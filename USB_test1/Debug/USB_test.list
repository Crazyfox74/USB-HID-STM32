
USB_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006ccc  08006ccc  00016ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d3c  08006d3c  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08006d3c  08006d3c  00016d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d44  08006d44  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d44  08006d44  00016d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d48  08006d48  00016d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08006d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020104  2**0
                  CONTENTS
 10 .bss          00000af0  20000104  20000104  00020104  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bf4  20000bf4  00020104  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db45  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002866  00000000  00000000  0002dc79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b10  00000000  00000000  000304e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009d8  00000000  00000000  00030ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b47  00000000  00000000  000319c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb69  00000000  00000000  0005450f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3de5  00000000  00000000  00063078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00126e5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ba8  00000000  00000000  00126eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000104 	.word	0x20000104
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006cb4 	.word	0x08006cb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000108 	.word	0x20000108
 80001c4:	08006cb4 	.word	0x08006cb4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 f9fa 	bl	80008c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f890 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8f8 	bl	80006cc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004dc:	f005 ff36 	bl	800634c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	//=============================================================================
	//Fill TX buffer
	USB_TX_Buffer[0]=0x01;  //ID report (=0x01 for input)
 80004e0:	4b3f      	ldr	r3, [pc, #252]	; (80005e0 <main+0x114>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
USB_TX_Buffer[1]=0x48;  //'H'
 80004e6:	4b3e      	ldr	r3, [pc, #248]	; (80005e0 <main+0x114>)
 80004e8:	2248      	movs	r2, #72	; 0x48
 80004ea:	705a      	strb	r2, [r3, #1]
	USB_TX_Buffer[2]=0x65;  //'e'
 80004ec:	4b3c      	ldr	r3, [pc, #240]	; (80005e0 <main+0x114>)
 80004ee:	2265      	movs	r2, #101	; 0x65
 80004f0:	709a      	strb	r2, [r3, #2]
	USB_TX_Buffer[3]=0x6c;  //'l'
 80004f2:	4b3b      	ldr	r3, [pc, #236]	; (80005e0 <main+0x114>)
 80004f4:	226c      	movs	r2, #108	; 0x6c
 80004f6:	70da      	strb	r2, [r3, #3]
	USB_TX_Buffer[4]=0x6c;  //'l'
 80004f8:	4b39      	ldr	r3, [pc, #228]	; (80005e0 <main+0x114>)
 80004fa:	226c      	movs	r2, #108	; 0x6c
 80004fc:	711a      	strb	r2, [r3, #4]
	USB_TX_Buffer[5]=0x6f;  //'o'
 80004fe:	4b38      	ldr	r3, [pc, #224]	; (80005e0 <main+0x114>)
 8000500:	226f      	movs	r2, #111	; 0x6f
 8000502:	715a      	strb	r2, [r3, #5]
	USB_TX_Buffer[6]=0x21;  //'!'
 8000504:	4b36      	ldr	r3, [pc, #216]	; (80005e0 <main+0x114>)
 8000506:	2221      	movs	r2, #33	; 0x21
 8000508:	719a      	strb	r2, [r3, #6]
	USB_TX_Buffer[7]=0x00;  // null-terminate string
 800050a:	4b35      	ldr	r3, [pc, #212]	; (80005e0 <main+0x114>)
 800050c:	2200      	movs	r2, #0
 800050e:	71da      	strb	r2, [r3, #7]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  if(USB_packet_enable==1)
 8000510:	4b34      	ldr	r3, [pc, #208]	; (80005e4 <main+0x118>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d152      	bne.n	80005be <main+0xf2>
	  {
		  if(USB_RX_Buffer[1]==0x11){
 8000518:	4b33      	ldr	r3, [pc, #204]	; (80005e8 <main+0x11c>)
 800051a:	785b      	ldrb	r3, [r3, #1]
 800051c:	2b11      	cmp	r3, #17
 800051e:	d105      	bne.n	800052c <main+0x60>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000526:	4831      	ldr	r0, [pc, #196]	; (80005ec <main+0x120>)
 8000528:	f000 fd12 	bl	8000f50 <HAL_GPIO_WritePin>
		  }
		  if(USB_RX_Buffer[1]==0x22){
 800052c:	4b2e      	ldr	r3, [pc, #184]	; (80005e8 <main+0x11c>)
 800052e:	785b      	ldrb	r3, [r3, #1]
 8000530:	2b22      	cmp	r3, #34	; 0x22
 8000532:	d105      	bne.n	8000540 <main+0x74>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053a:	482c      	ldr	r0, [pc, #176]	; (80005ec <main+0x120>)
 800053c:	f000 fd08 	bl	8000f50 <HAL_GPIO_WritePin>
		  }
		  if(USB_RX_Buffer[1]==0x33){
 8000540:	4b29      	ldr	r3, [pc, #164]	; (80005e8 <main+0x11c>)
 8000542:	785b      	ldrb	r3, [r3, #1]
 8000544:	2b33      	cmp	r3, #51	; 0x33
 8000546:	d105      	bne.n	8000554 <main+0x88>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054e:	4827      	ldr	r0, [pc, #156]	; (80005ec <main+0x120>)
 8000550:	f000 fcfe 	bl	8000f50 <HAL_GPIO_WritePin>
		  }
		  if(USB_RX_Buffer[1]==0x44){
 8000554:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <main+0x11c>)
 8000556:	785b      	ldrb	r3, [r3, #1]
 8000558:	2b44      	cmp	r3, #68	; 0x44
 800055a:	d105      	bne.n	8000568 <main+0x9c>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000562:	4822      	ldr	r0, [pc, #136]	; (80005ec <main+0x120>)
 8000564:	f000 fcf4 	bl	8000f50 <HAL_GPIO_WritePin>
		  }


		  if(USB_RX_Buffer[1]==0x01){
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <main+0x11c>)
 800056a:	785b      	ldrb	r3, [r3, #1]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d105      	bne.n	800057c <main+0xb0>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000576:	481d      	ldr	r0, [pc, #116]	; (80005ec <main+0x120>)
 8000578:	f000 fcea 	bl	8000f50 <HAL_GPIO_WritePin>
		  }
		  if(USB_RX_Buffer[1]==0x02){
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <main+0x11c>)
 800057e:	785b      	ldrb	r3, [r3, #1]
 8000580:	2b02      	cmp	r3, #2
 8000582:	d105      	bne.n	8000590 <main+0xc4>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058a:	4818      	ldr	r0, [pc, #96]	; (80005ec <main+0x120>)
 800058c:	f000 fce0 	bl	8000f50 <HAL_GPIO_WritePin>
		  }
		  if(USB_RX_Buffer[1]==0x03){
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <main+0x11c>)
 8000592:	785b      	ldrb	r3, [r3, #1]
 8000594:	2b03      	cmp	r3, #3
 8000596:	d105      	bne.n	80005a4 <main+0xd8>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800059e:	4813      	ldr	r0, [pc, #76]	; (80005ec <main+0x120>)
 80005a0:	f000 fcd6 	bl	8000f50 <HAL_GPIO_WritePin>
		  }
		  if(USB_RX_Buffer[1]==0x04){
 80005a4:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <main+0x11c>)
 80005a6:	785b      	ldrb	r3, [r3, #1]
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d105      	bne.n	80005b8 <main+0xec>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b2:	480e      	ldr	r0, [pc, #56]	; (80005ec <main+0x120>)
 80005b4:	f000 fccc 	bl	8000f50 <HAL_GPIO_WritePin>
		  }

		  USB_packet_enable=0;
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <main+0x118>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
	  }
    /* USER CODE BEGIN 3 */

	   //=============================================================================
    //Code for button (transmit "Hello!" to USB)
    if((GPIOA->IDR & GPIO_PIN_0)>0)
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <main+0x124>)
 80005c0:	691b      	ldr	r3, [r3, #16]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0a2      	beq.n	8000510 <main+0x44>
	   	 {
				 HAL_Delay(800);
 80005ca:	f44f 7048 	mov.w	r0, #800	; 0x320
 80005ce:	f000 f9ed 	bl	80009ac <HAL_Delay>
				 //HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,GPIO_PIN_SET);
				 USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,USB_TX_Buffer,65);
 80005d2:	2241      	movs	r2, #65	; 0x41
 80005d4:	4902      	ldr	r1, [pc, #8]	; (80005e0 <main+0x114>)
 80005d6:	4807      	ldr	r0, [pc, #28]	; (80005f4 <main+0x128>)
 80005d8:	f004 fa36 	bl	8004a48 <USBD_CUSTOM_HID_SendReport>
	  if(USB_packet_enable==1)
 80005dc:	e798      	b.n	8000510 <main+0x44>
 80005de:	bf00      	nop
 80005e0:	20000164 	.word	0x20000164
 80005e4:	200001a8 	.word	0x200001a8
 80005e8:	20000120 	.word	0x20000120
 80005ec:	40020c00 	.word	0x40020c00
 80005f0:	40020000 	.word	0x40020000
 80005f4:	200001b4 	.word	0x200001b4

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f006 fb4c 	bl	8006ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a27      	ldr	r2, [pc, #156]	; (80006c4 <SystemClock_Config+0xcc>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <SystemClock_Config+0xd0>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800066c:	23a8      	movs	r3, #168	; 0xa8
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000674:	2307      	movs	r3, #7
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fee5 	bl	800244c <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000688:	f000 f880 	bl	800078c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000698:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2105      	movs	r1, #5
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 f946 	bl	800293c <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006b6:	f000 f869 	bl	800078c <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	; 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	4b26      	ldr	r3, [pc, #152]	; (8000780 <MX_GPIO_Init+0xb4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a25      	ldr	r2, [pc, #148]	; (8000780 <MX_GPIO_Init+0xb4>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <MX_GPIO_Init+0xb4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a1e      	ldr	r2, [pc, #120]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a17      	ldr	r2, [pc, #92]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000724:	f043 0308 	orr.w	r3, r3, #8
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_GPIO_Init+0xb4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0308 	and.w	r3, r3, #8
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800073c:	4811      	ldr	r0, [pc, #68]	; (8000784 <MX_GPIO_Init+0xb8>)
 800073e:	f000 fc07 	bl	8000f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000742:	2301      	movs	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4619      	mov	r1, r3
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_GPIO_Init+0xbc>)
 8000756:	f000 fa5f 	bl	8000c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800075a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800075e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4619      	mov	r1, r3
 8000772:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_GPIO_Init+0xb8>)
 8000774:	f000 fa50 	bl	8000c18 <HAL_GPIO_Init>

}
 8000778:	bf00      	nop
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40023800 	.word	0x40023800
 8000784:	40020c00 	.word	0x40020c00
 8000788:	40020000 	.word	0x40020000

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	e7fe      	b.n	8000794 <Error_Handler+0x8>
	...

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <HAL_MspInit+0x4c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	4a0f      	ldr	r2, [pc, #60]	; (80007e4 <HAL_MspInit+0x4c>)
 80007a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ac:	6453      	str	r3, [r2, #68]	; 0x44
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_MspInit+0x4c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <HAL_MspInit+0x4c>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000834:	f000 f89a 	bl	800096c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <OTG_FS_IRQHandler+0x10>)
 8000842:	f000 fcee 	bl	8001222 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000690 	.word	0x20000690

08000850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <SystemInit+0x20>)
 8000856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <SystemInit+0x20>)
 800085c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800087a:	490e      	ldr	r1, [pc, #56]	; (80008b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800087c:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000880:	e002      	b.n	8000888 <LoopCopyDataInit>

08000882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000886:	3304      	adds	r3, #4

08000888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800088c:	d3f9      	bcc.n	8000882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088e:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000890:	4c0b      	ldr	r4, [pc, #44]	; (80008c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000894:	e001      	b.n	800089a <LoopFillZerobss>

08000896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000898:	3204      	adds	r2, #4

0800089a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800089c:	d3fb      	bcc.n	8000896 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800089e:	f7ff ffd7 	bl	8000850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008a2:	f006 f9db 	bl	8006c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008a6:	f7ff fe11 	bl	80004cc <main>
  bx  lr    
 80008aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80008b8:	08006d4c 	.word	0x08006d4c
  ldr r2, =_sbss
 80008bc:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 80008c0:	20000bf4 	.word	0x20000bf4

080008c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC_IRQHandler>
	...

080008c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_Init+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0d      	ldr	r2, [pc, #52]	; (8000908 <HAL_Init+0x40>)
 80008d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <HAL_Init+0x40>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <HAL_Init+0x40>)
 80008de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_Init+0x40>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a07      	ldr	r2, [pc, #28]	; (8000908 <HAL_Init+0x40>)
 80008ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 f94f 	bl	8000b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f6:	200f      	movs	r0, #15
 80008f8:	f000 f808 	bl	800090c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008fc:	f7ff ff4c 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023c00 	.word	0x40023c00

0800090c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_InitTick+0x54>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_InitTick+0x58>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000922:	fbb3 f3f1 	udiv	r3, r3, r1
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f967 	bl	8000bfe <HAL_SYSTICK_Config>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e00e      	b.n	8000958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b0f      	cmp	r3, #15
 800093e:	d80a      	bhi.n	8000956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000940:	2200      	movs	r2, #0
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f000 f92f 	bl	8000baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800094c:	4a06      	ldr	r2, [pc, #24]	; (8000968 <HAL_InitTick+0x5c>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000000 	.word	0x20000000
 8000964:	20000008 	.word	0x20000008
 8000968:	20000004 	.word	0x20000004

0800096c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_IncTick+0x20>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_IncTick+0x24>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <HAL_IncTick+0x24>)
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000008 	.word	0x20000008
 8000990:	200001ac 	.word	0x200001ac

08000994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <HAL_GetTick+0x14>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	200001ac 	.word	0x200001ac

080009ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b4:	f7ff ffee 	bl	8000994 <HAL_GetTick>
 80009b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c4:	d005      	beq.n	80009d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_Delay+0x44>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009d2:	bf00      	nop
 80009d4:	f7ff ffde 	bl	8000994 <HAL_GetTick>
 80009d8:	4602      	mov	r2, r0
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d8f7      	bhi.n	80009d4 <HAL_Delay+0x28>
  {
  }
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	db0b      	blt.n	8000a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f003 021f 	and.w	r2, r3, #31
 8000a70:	4907      	ldr	r1, [pc, #28]	; (8000a90 <__NVIC_EnableIRQ+0x38>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	095b      	lsrs	r3, r3, #5
 8000a78:	2001      	movs	r0, #1
 8000a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000e100 	.word	0xe000e100

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db0a      	blt.n	8000abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	490c      	ldr	r1, [pc, #48]	; (8000ae0 <__NVIC_SetPriority+0x4c>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000abc:	e00a      	b.n	8000ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4908      	ldr	r1, [pc, #32]	; (8000ae4 <__NVIC_SetPriority+0x50>)
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	3b04      	subs	r3, #4
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	761a      	strb	r2, [r3, #24]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000e100 	.word	0xe000e100
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f1c3 0307 	rsb	r3, r3, #7
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf28      	it	cs
 8000b06:	2304      	movcs	r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d902      	bls.n	8000b18 <NVIC_EncodePriority+0x30>
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	e000      	b.n	8000b1a <NVIC_EncodePriority+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43da      	mvns	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	43d9      	mvns	r1, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	4313      	orrs	r3, r2
         );
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3724      	adds	r7, #36	; 0x24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b60:	d301      	bcc.n	8000b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00f      	b.n	8000b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <SysTick_Config+0x40>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6e:	210f      	movs	r1, #15
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f7ff ff8e 	bl	8000a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <SysTick_Config+0x40>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <SysTick_Config+0x40>)
 8000b80:	2207      	movs	r2, #7
 8000b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	e000e010 	.word	0xe000e010

08000b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff29 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bbc:	f7ff ff3e 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	68b9      	ldr	r1, [r7, #8]
 8000bc6:	6978      	ldr	r0, [r7, #20]
 8000bc8:	f7ff ff8e 	bl	8000ae8 <NVIC_EncodePriority>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff5d 	bl	8000a94 <__NVIC_SetPriority>
}
 8000bda:	bf00      	nop
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff31 	bl	8000a58 <__NVIC_EnableIRQ>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ffa2 	bl	8000b50 <SysTick_Config>
 8000c0c:	4603      	mov	r3, r0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
 8000c32:	e16b      	b.n	8000f0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c34:	2201      	movs	r2, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	f040 815a 	bne.w	8000f06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d005      	beq.n	8000c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d130      	bne.n	8000ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	091b      	lsrs	r3, r3, #4
 8000cb6:	f003 0201 	and.w	r2, r3, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d017      	beq.n	8000d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d123      	bne.n	8000d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	691a      	ldr	r2, [r3, #16]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	08da      	lsrs	r2, r3, #3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3208      	adds	r2, #8
 8000d56:	69b9      	ldr	r1, [r7, #24]
 8000d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0203 	and.w	r2, r3, #3
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 80b4 	beq.w	8000f06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b60      	ldr	r3, [pc, #384]	; (8000f24 <HAL_GPIO_Init+0x30c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a5f      	ldr	r2, [pc, #380]	; (8000f24 <HAL_GPIO_Init+0x30c>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b5d      	ldr	r3, [pc, #372]	; (8000f24 <HAL_GPIO_Init+0x30c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dba:	4a5b      	ldr	r2, [pc, #364]	; (8000f28 <HAL_GPIO_Init+0x310>)
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a52      	ldr	r2, [pc, #328]	; (8000f2c <HAL_GPIO_Init+0x314>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d02b      	beq.n	8000e3e <HAL_GPIO_Init+0x226>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a51      	ldr	r2, [pc, #324]	; (8000f30 <HAL_GPIO_Init+0x318>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d025      	beq.n	8000e3a <HAL_GPIO_Init+0x222>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a50      	ldr	r2, [pc, #320]	; (8000f34 <HAL_GPIO_Init+0x31c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d01f      	beq.n	8000e36 <HAL_GPIO_Init+0x21e>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a4f      	ldr	r2, [pc, #316]	; (8000f38 <HAL_GPIO_Init+0x320>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d019      	beq.n	8000e32 <HAL_GPIO_Init+0x21a>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a4e      	ldr	r2, [pc, #312]	; (8000f3c <HAL_GPIO_Init+0x324>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d013      	beq.n	8000e2e <HAL_GPIO_Init+0x216>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4d      	ldr	r2, [pc, #308]	; (8000f40 <HAL_GPIO_Init+0x328>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d00d      	beq.n	8000e2a <HAL_GPIO_Init+0x212>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4c      	ldr	r2, [pc, #304]	; (8000f44 <HAL_GPIO_Init+0x32c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d007      	beq.n	8000e26 <HAL_GPIO_Init+0x20e>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4b      	ldr	r2, [pc, #300]	; (8000f48 <HAL_GPIO_Init+0x330>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d101      	bne.n	8000e22 <HAL_GPIO_Init+0x20a>
 8000e1e:	2307      	movs	r3, #7
 8000e20:	e00e      	b.n	8000e40 <HAL_GPIO_Init+0x228>
 8000e22:	2308      	movs	r3, #8
 8000e24:	e00c      	b.n	8000e40 <HAL_GPIO_Init+0x228>
 8000e26:	2306      	movs	r3, #6
 8000e28:	e00a      	b.n	8000e40 <HAL_GPIO_Init+0x228>
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	e008      	b.n	8000e40 <HAL_GPIO_Init+0x228>
 8000e2e:	2304      	movs	r3, #4
 8000e30:	e006      	b.n	8000e40 <HAL_GPIO_Init+0x228>
 8000e32:	2303      	movs	r3, #3
 8000e34:	e004      	b.n	8000e40 <HAL_GPIO_Init+0x228>
 8000e36:	2302      	movs	r3, #2
 8000e38:	e002      	b.n	8000e40 <HAL_GPIO_Init+0x228>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <HAL_GPIO_Init+0x228>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	69fa      	ldr	r2, [r7, #28]
 8000e42:	f002 0203 	and.w	r2, r2, #3
 8000e46:	0092      	lsls	r2, r2, #2
 8000e48:	4093      	lsls	r3, r2
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e50:	4935      	ldr	r1, [pc, #212]	; (8000f28 <HAL_GPIO_Init+0x310>)
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	089b      	lsrs	r3, r3, #2
 8000e56:	3302      	adds	r3, #2
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e5e:	4b3b      	ldr	r3, [pc, #236]	; (8000f4c <HAL_GPIO_Init+0x334>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e82:	4a32      	ldr	r2, [pc, #200]	; (8000f4c <HAL_GPIO_Init+0x334>)
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e88:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <HAL_GPIO_Init+0x334>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eac:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <HAL_GPIO_Init+0x334>)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eb2:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <HAL_GPIO_Init+0x334>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ed6:	4a1d      	ldr	r2, [pc, #116]	; (8000f4c <HAL_GPIO_Init+0x334>)
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000edc:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <HAL_GPIO_Init+0x334>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f00:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <HAL_GPIO_Init+0x334>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	61fb      	str	r3, [r7, #28]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	2b0f      	cmp	r3, #15
 8000f10:	f67f ae90 	bls.w	8000c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3724      	adds	r7, #36	; 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40013800 	.word	0x40013800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40020400 	.word	0x40020400
 8000f34:	40020800 	.word	0x40020800
 8000f38:	40020c00 	.word	0x40020c00
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40021400 	.word	0x40021400
 8000f44:	40021800 	.word	0x40021800
 8000f48:	40021c00 	.word	0x40021c00
 8000f4c:	40013c00 	.word	0x40013c00

08000f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f60:	787b      	ldrb	r3, [r7, #1]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f66:	887a      	ldrh	r2, [r7, #2]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f6c:	e003      	b.n	8000f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f6e:	887b      	ldrh	r3, [r7, #2]
 8000f70:	041a      	lsls	r2, r3, #16
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	619a      	str	r2, [r3, #24]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f84:	b08f      	sub	sp, #60	; 0x3c
 8000f86:	af0a      	add	r7, sp, #40	; 0x28
 8000f88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e10f      	b.n	80011b4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d106      	bne.n	8000fb4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f005 fb52 	bl	8006658 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 ffbf 	bl	8002f56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	687e      	ldr	r6, [r7, #4]
 8000fe0:	466d      	mov	r5, sp
 8000fe2:	f106 0410 	add.w	r4, r6, #16
 8000fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ff2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ff6:	1d33      	adds	r3, r6, #4
 8000ff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ffa:	6838      	ldr	r0, [r7, #0]
 8000ffc:	f001 fe96 	bl	8002d2c <USB_CoreInit>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d005      	beq.n	8001012 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2202      	movs	r2, #2
 800100a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e0d0      	b.n	80011b4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f001 ffad 	bl	8002f78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e04a      	b.n	80010ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	4413      	add	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	333d      	adds	r3, #61	; 0x3d
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	4613      	mov	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4413      	add	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	333c      	adds	r3, #60	; 0x3c
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	b298      	uxth	r0, r3
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4413      	add	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	3344      	adds	r3, #68	; 0x44
 8001060:	4602      	mov	r2, r0
 8001062:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4413      	add	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	3340      	adds	r3, #64	; 0x40
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	3348      	adds	r3, #72	; 0x48
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4413      	add	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	440b      	add	r3, r1
 800109a:	334c      	adds	r3, #76	; 0x4c
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	3354      	adds	r3, #84	; 0x54
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	3301      	adds	r3, #1
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d3af      	bcc.n	8001024 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e044      	b.n	8001154 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	4413      	add	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	3301      	adds	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	429a      	cmp	r2, r3
 800115c:	d3b5      	bcc.n	80010ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	687e      	ldr	r6, [r7, #4]
 8001166:	466d      	mov	r5, sp
 8001168:	f106 0410 	add.w	r4, r6, #16
 800116c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001174:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001178:	e885 0003 	stmia.w	r5, {r0, r1}
 800117c:	1d33      	adds	r3, r6, #4
 800117e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001180:	6838      	ldr	r0, [r7, #0]
 8001182:	f001 ff45 	bl	8003010 <USB_DevInit>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2202      	movs	r2, #2
 8001190:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e00d      	b.n	80011b4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 f894 	bl	80042da <USB_DevDisconnect>

  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d101      	bne.n	80011d8 <HAL_PCD_Start+0x1c>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e020      	b.n	800121a <HAL_PCD_Start+0x5e>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d109      	bne.n	80011fc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d005      	beq.n	80011fc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f001 fe97 	bl	8002f34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f003 f844 	bl	8004298 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001222:	b590      	push	{r4, r7, lr}
 8001224:	b08d      	sub	sp, #52	; 0x34
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f003 f902 	bl	8004442 <USB_GetMode>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	f040 848a 	bne.w	8001b5a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f003 f866 	bl	800431c <USB_ReadInterrupts>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 8480 	beq.w	8001b58 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f003 f853 	bl	800431c <USB_ReadInterrupts>
 8001276:	4603      	mov	r3, r0
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b02      	cmp	r3, #2
 800127e:	d107      	bne.n	8001290 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	695a      	ldr	r2, [r3, #20]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f002 0202 	and.w	r2, r2, #2
 800128e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f003 f841 	bl	800431c <USB_ReadInterrupts>
 800129a:	4603      	mov	r3, r0
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	2b10      	cmp	r3, #16
 80012a2:	d161      	bne.n	8001368 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	699a      	ldr	r2, [r3, #24]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0210 	bic.w	r2, r2, #16
 80012b2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	f003 020f 	and.w	r2, r3, #15
 80012c0:	4613      	mov	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	3304      	adds	r3, #4
 80012d2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	0c5b      	lsrs	r3, r3, #17
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d124      	bne.n	800132a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d035      	beq.n	8001358 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	091b      	lsrs	r3, r3, #4
 80012f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	6a38      	ldr	r0, [r7, #32]
 8001300:	f002 fe78 	bl	8003ff4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001310:	441a      	add	r2, r3
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	6a1a      	ldr	r2, [r3, #32]
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001322:	441a      	add	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	621a      	str	r2, [r3, #32]
 8001328:	e016      	b.n	8001358 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	0c5b      	lsrs	r3, r3, #17
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	2b06      	cmp	r3, #6
 8001334:	d110      	bne.n	8001358 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800133c:	2208      	movs	r2, #8
 800133e:	4619      	mov	r1, r3
 8001340:	6a38      	ldr	r0, [r7, #32]
 8001342:	f002 fe57 	bl	8003ff4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	6a1a      	ldr	r2, [r3, #32]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	091b      	lsrs	r3, r3, #4
 800134e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001352:	441a      	add	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	699a      	ldr	r2, [r3, #24]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0210 	orr.w	r2, r2, #16
 8001366:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f002 ffd5 	bl	800431c <USB_ReadInterrupts>
 8001372:	4603      	mov	r3, r0
 8001374:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001378:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800137c:	f040 80a7 	bne.w	80014ce <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f002 ffda 	bl	8004342 <USB_ReadDevAllOutEpInterrupt>
 800138e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001390:	e099      	b.n	80014c6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 808e 	beq.w	80014ba <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f002 fffe 	bl	80043aa <USB_ReadDevOutEPInterrupt>
 80013ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00c      	beq.n	80013d4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	015a      	lsls	r2, r3, #5
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	4413      	add	r3, r2
 80013c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013c6:	461a      	mov	r2, r3
 80013c8:	2301      	movs	r3, #1
 80013ca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 feaa 	bl	8002128 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00c      	beq.n	80013f8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	015a      	lsls	r2, r3, #5
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	4413      	add	r3, r2
 80013e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ea:	461a      	mov	r2, r3
 80013ec:	2308      	movs	r3, #8
 80013ee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 ff80 	bl	80022f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d008      	beq.n	8001414 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	015a      	lsls	r2, r3, #5
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	4413      	add	r3, r2
 800140a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800140e:	461a      	mov	r2, r3
 8001410:	2310      	movs	r3, #16
 8001412:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d030      	beq.n	8001480 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001426:	2b80      	cmp	r3, #128	; 0x80
 8001428:	d109      	bne.n	800143e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	69fa      	ldr	r2, [r7, #28]
 8001434:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001438:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800143c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800143e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001440:	4613      	mov	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	4413      	add	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	3304      	adds	r3, #4
 8001452:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	78db      	ldrb	r3, [r3, #3]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d108      	bne.n	800146e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	2200      	movs	r2, #0
 8001460:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	b2db      	uxtb	r3, r3
 8001466:	4619      	mov	r1, r3
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f005 f9fb 	bl	8006864 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	015a      	lsls	r2, r3, #5
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	4413      	add	r3, r2
 8001476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800147a:	461a      	mov	r2, r3
 800147c:	2302      	movs	r3, #2
 800147e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	f003 0320 	and.w	r3, r3, #32
 8001486:	2b00      	cmp	r3, #0
 8001488:	d008      	beq.n	800149c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	015a      	lsls	r2, r3, #5
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	4413      	add	r3, r2
 8001492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001496:	461a      	mov	r2, r3
 8001498:	2320      	movs	r3, #32
 800149a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d009      	beq.n	80014ba <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	015a      	lsls	r2, r3, #5
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014b2:	461a      	mov	r2, r3
 80014b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	3301      	adds	r3, #1
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f47f af62 	bne.w	8001392 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 ff22 	bl	800431c <USB_ReadInterrupts>
 80014d8:	4603      	mov	r3, r0
 80014da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014e2:	f040 80db 	bne.w	800169c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 ff43 	bl	8004376 <USB_ReadDevAllInEpInterrupt>
 80014f0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014f6:	e0cd      	b.n	8001694 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 80c2 	beq.w	8001688 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	4611      	mov	r1, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f002 ff69 	bl	80043e6 <USB_ReadDevInEPInterrupt>
 8001514:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b00      	cmp	r3, #0
 800151e:	d057      	beq.n	80015d0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	2201      	movs	r2, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	43db      	mvns	r3, r3
 800153a:	69f9      	ldr	r1, [r7, #28]
 800153c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001540:	4013      	ands	r3, r2
 8001542:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	015a      	lsls	r2, r3, #5
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	4413      	add	r3, r2
 800154c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001550:	461a      	mov	r2, r3
 8001552:	2301      	movs	r3, #1
 8001554:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d132      	bne.n	80015c4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001562:	4613      	mov	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	334c      	adds	r3, #76	; 0x4c
 800156e:	6819      	ldr	r1, [r3, #0]
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001574:	4613      	mov	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4403      	add	r3, r0
 800157e:	3348      	adds	r3, #72	; 0x48
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4419      	add	r1, r3
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001588:	4613      	mov	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4403      	add	r3, r0
 8001592:	334c      	adds	r3, #76	; 0x4c
 8001594:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	2b00      	cmp	r3, #0
 800159a:	d113      	bne.n	80015c4 <HAL_PCD_IRQHandler+0x3a2>
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a0:	4613      	mov	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	3354      	adds	r3, #84	; 0x54
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d108      	bne.n	80015c4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80015bc:	461a      	mov	r2, r3
 80015be:	2101      	movs	r1, #1
 80015c0:	f002 ff70 	bl	80044a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	4619      	mov	r1, r3
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f005 f8c5 	bl	800675a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d008      	beq.n	80015ec <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	015a      	lsls	r2, r3, #5
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	4413      	add	r3, r2
 80015e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e6:	461a      	mov	r2, r3
 80015e8:	2308      	movs	r3, #8
 80015ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d008      	beq.n	8001608 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	015a      	lsls	r2, r3, #5
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	4413      	add	r3, r2
 80015fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001602:	461a      	mov	r2, r3
 8001604:	2310      	movs	r3, #16
 8001606:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800160e:	2b00      	cmp	r3, #0
 8001610:	d008      	beq.n	8001624 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	015a      	lsls	r2, r3, #5
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	4413      	add	r3, r2
 800161a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800161e:	461a      	mov	r2, r3
 8001620:	2340      	movs	r3, #64	; 0x40
 8001622:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d023      	beq.n	8001676 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800162e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001630:	6a38      	ldr	r0, [r7, #32]
 8001632:	f001 fe51 	bl	80032d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	3338      	adds	r3, #56	; 0x38
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	3304      	adds	r3, #4
 8001648:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	78db      	ldrb	r3, [r3, #3]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d108      	bne.n	8001664 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2200      	movs	r2, #0
 8001656:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	b2db      	uxtb	r3, r3
 800165c:	4619      	mov	r1, r3
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f005 f912 	bl	8006888 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	015a      	lsls	r2, r3, #5
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	4413      	add	r3, r2
 800166c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001670:	461a      	mov	r2, r3
 8001672:	2302      	movs	r3, #2
 8001674:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 fcc3 	bl	800200e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	3301      	adds	r3, #1
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800168e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001690:	085b      	lsrs	r3, r3, #1
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001696:	2b00      	cmp	r3, #0
 8001698:	f47f af2e 	bne.w	80014f8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f002 fe3b 	bl	800431c <USB_ReadInterrupts>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016b0:	d122      	bne.n	80016f8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d108      	bne.n	80016e2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016d8:	2100      	movs	r1, #0
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 feaa 	bl	8002434 <HAL_PCDEx_LPM_Callback>
 80016e0:	e002      	b.n	80016e8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f005 f8b0 	bl	8006848 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f002 fe0d 	bl	800431c <USB_ReadInterrupts>
 8001702:	4603      	mov	r3, r0
 8001704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800170c:	d112      	bne.n	8001734 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b01      	cmp	r3, #1
 800171c:	d102      	bne.n	8001724 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f005 f86c 	bl	80067fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001732:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f002 fdef 	bl	800431c <USB_ReadInterrupts>
 800173e:	4603      	mov	r3, r0
 8001740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001748:	f040 80b7 	bne.w	80018ba <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2110      	movs	r1, #16
 8001766:	4618      	mov	r0, r3
 8001768:	f001 fdb6 	bl	80032d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001770:	e046      	b.n	8001800 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001774:	015a      	lsls	r2, r3, #5
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	4413      	add	r3, r2
 800177a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800177e:	461a      	mov	r2, r3
 8001780:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001784:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001788:	015a      	lsls	r2, r3, #5
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	4413      	add	r3, r2
 800178e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001796:	0151      	lsls	r1, r2, #5
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	440a      	add	r2, r1
 800179c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a8:	015a      	lsls	r2, r3, #5
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b2:	461a      	mov	r2, r3
 80017b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017b8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017bc:	015a      	lsls	r2, r3, #5
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	4413      	add	r3, r2
 80017c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ca:	0151      	lsls	r1, r2, #5
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	440a      	add	r2, r1
 80017d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017dc:	015a      	lsls	r2, r3, #5
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ea:	0151      	lsls	r1, r2, #5
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	440a      	add	r2, r1
 80017f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017f8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fc:	3301      	adds	r3, #1
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001806:	429a      	cmp	r2, r3
 8001808:	d3b3      	bcc.n	8001772 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001818:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800181c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	2b00      	cmp	r3, #0
 8001824:	d016      	beq.n	8001854 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800182c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001836:	f043 030b 	orr.w	r3, r3, #11
 800183a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800184c:	f043 030b 	orr.w	r3, r3, #11
 8001850:	6453      	str	r3, [r2, #68]	; 0x44
 8001852:	e015      	b.n	8001880 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001862:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001866:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800186a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800187a:	f043 030b 	orr.w	r3, r3, #11
 800187e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800188e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001892:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018a4:	461a      	mov	r2, r3
 80018a6:	f002 fdfd 	bl	80044a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	695a      	ldr	r2, [r3, #20]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 fd2c 	bl	800431c <USB_ReadInterrupts>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ce:	d124      	bne.n	800191a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 fdc2 	bl	800445e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f001 fd77 	bl	80033d2 <USB_GetDevSpeed>
 80018e4:	4603      	mov	r3, r0
 80018e6:	461a      	mov	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681c      	ldr	r4, [r3, #0]
 80018f0:	f001 fa10 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 80018f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	4620      	mov	r0, r4
 8001900:	f001 fa76 	bl	8002df0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f004 ff50 	bl	80067aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001918:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f002 fcfc 	bl	800431c <USB_ReadInterrupts>
 8001924:	4603      	mov	r3, r0
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b08      	cmp	r3, #8
 800192c:	d10a      	bne.n	8001944 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f004 ff2d 	bl	800678e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f002 0208 	and.w	r2, r2, #8
 8001942:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f002 fce7 	bl	800431c <USB_ReadInterrupts>
 800194e:	4603      	mov	r3, r0
 8001950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001954:	2b80      	cmp	r3, #128	; 0x80
 8001956:	d122      	bne.n	800199e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001964:	2301      	movs	r3, #1
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
 8001968:	e014      	b.n	8001994 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196e:	4613      	mov	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d105      	bne.n	800198e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	b2db      	uxtb	r3, r3
 8001986:	4619      	mov	r1, r3
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 fb0f 	bl	8001fac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	3301      	adds	r3, #1
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199a:	429a      	cmp	r2, r3
 800199c:	d3e5      	bcc.n	800196a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 fcba 	bl	800431c <USB_ReadInterrupts>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019b2:	d13b      	bne.n	8001a2c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019b4:	2301      	movs	r3, #1
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
 80019b8:	e02b      	b.n	8001a12 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ce:	4613      	mov	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	3340      	adds	r3, #64	; 0x40
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d115      	bne.n	8001a0c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80019e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	da12      	bge.n	8001a0c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ea:	4613      	mov	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	333f      	adds	r3, #63	; 0x3f
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	4619      	mov	r1, r3
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 fad0 	bl	8001fac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	3301      	adds	r3, #1
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d3ce      	bcc.n	80019ba <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f002 fc73 	bl	800431c <USB_ReadInterrupts>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a40:	d155      	bne.n	8001aee <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a42:	2301      	movs	r3, #1
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
 8001a46:	e045      	b.n	8001ad4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	015a      	lsls	r2, r3, #5
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	4413      	add	r3, r2
 8001a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4413      	add	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d12e      	bne.n	8001ace <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a70:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	da2b      	bge.n	8001ace <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001a82:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d121      	bne.n	8001ace <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8e:	4613      	mov	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4413      	add	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10a      	bne.n	8001ace <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aca:	6053      	str	r3, [r2, #4]
            break;
 8001acc:	e007      	b.n	8001ade <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d3b4      	bcc.n	8001a48 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 fc12 	bl	800431c <USB_ReadInterrupts>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b02:	d10a      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f004 fed1 	bl	80068ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f002 fbfc 	bl	800431c <USB_ReadInterrupts>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d115      	bne.n	8001b5a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f004 fec1 	bl	80068c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6859      	ldr	r1, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	e000      	b.n	8001b5a <HAL_PCD_IRQHandler+0x938>
      return;
 8001b58:	bf00      	nop
    }
  }
}
 8001b5a:	3734      	adds	r7, #52	; 0x34
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd90      	pop	{r4, r7, pc}

08001b60 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_PCD_SetAddress+0x1a>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e013      	b.n	8001ba2 <HAL_PCD_SetAddress+0x42>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	78fa      	ldrb	r2, [r7, #3]
 8001b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	78fa      	ldrb	r2, [r7, #3]
 8001b90:	4611      	mov	r1, r2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 fb5a 	bl	800424c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	4608      	mov	r0, r1
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4603      	mov	r3, r0
 8001bba:	70fb      	strb	r3, [r7, #3]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	803b      	strh	r3, [r7, #0]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	da0f      	bge.n	8001bf0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	f003 020f 	and.w	r2, r3, #15
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	3338      	adds	r3, #56	; 0x38
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	3304      	adds	r3, #4
 8001be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2201      	movs	r2, #1
 8001bec:	705a      	strb	r2, [r3, #1]
 8001bee:	e00f      	b.n	8001c10 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	f003 020f 	and.w	r2, r3, #15
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	3304      	adds	r3, #4
 8001c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c1c:	883a      	ldrh	r2, [r7, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	78ba      	ldrb	r2, [r7, #2]
 8001c26:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	785b      	ldrb	r3, [r3, #1]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d004      	beq.n	8001c3a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c3a:	78bb      	ldrb	r3, [r7, #2]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d102      	bne.n	8001c46 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_PCD_EP_Open+0xaa>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e00e      	b.n	8001c72 <HAL_PCD_EP_Open+0xc8>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68f9      	ldr	r1, [r7, #12]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f001 fbda 	bl	800341c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001c70:	7afb      	ldrb	r3, [r7, #11]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	460b      	mov	r3, r1
 8001c84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	da0f      	bge.n	8001cae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	f003 020f 	and.w	r2, r3, #15
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	3338      	adds	r3, #56	; 0x38
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	705a      	strb	r2, [r3, #1]
 8001cac:	e00f      	b.n	8001cce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	f003 020f 	and.w	r2, r3, #15
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_PCD_EP_Close+0x6e>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e00e      	b.n	8001d06 <HAL_PCD_EP_Close+0x8c>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68f9      	ldr	r1, [r7, #12]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 fc18 	bl	800352c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d1e:	7afb      	ldrb	r3, [r7, #11]
 8001d20:	f003 020f 	and.w	r2, r3, #15
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	3304      	adds	r3, #4
 8001d36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2200      	movs	r2, #0
 8001d48:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d50:	7afb      	ldrb	r3, [r7, #11]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d102      	bne.n	8001d6a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d6a:	7afb      	ldrb	r3, [r7, #11]
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d109      	bne.n	8001d88 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	6979      	ldr	r1, [r7, #20]
 8001d82:	f001 fef7 	bl	8003b74 <USB_EP0StartXfer>
 8001d86:	e008      	b.n	8001d9a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	6979      	ldr	r1, [r7, #20]
 8001d96:	f001 fca5 	bl	80036e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	460b      	mov	r3, r1
 8001db2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db4:	7afb      	ldrb	r3, [r7, #11]
 8001db6:	f003 020f 	and.w	r2, r3, #15
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	3338      	adds	r3, #56	; 0x38
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3304      	adds	r3, #4
 8001dca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2201      	movs	r2, #1
 8001de2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de4:	7afb      	ldrb	r3, [r7, #11]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d102      	bne.n	8001dfe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dfe:	7afb      	ldrb	r3, [r7, #11]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d109      	bne.n	8001e1c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	6979      	ldr	r1, [r7, #20]
 8001e16:	f001 fead 	bl	8003b74 <USB_EP0StartXfer>
 8001e1a:	e008      	b.n	8001e2e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	6979      	ldr	r1, [r7, #20]
 8001e2a:	f001 fc5b 	bl	80036e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	f003 020f 	and.w	r2, r3, #15
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d901      	bls.n	8001e56 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e050      	b.n	8001ef8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	da0f      	bge.n	8001e7e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	f003 020f 	and.w	r2, r3, #15
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	3338      	adds	r3, #56	; 0x38
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	3304      	adds	r3, #4
 8001e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	705a      	strb	r2, [r3, #1]
 8001e7c:	e00d      	b.n	8001e9a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e7e:	78fa      	ldrb	r2, [r7, #3]
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	3304      	adds	r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_PCD_EP_SetStall+0x82>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e01e      	b.n	8001ef8 <HAL_PCD_EP_SetStall+0xc0>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68f9      	ldr	r1, [r7, #12]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f002 f8eb 	bl	80040a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10a      	bne.n	8001eee <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	b2d9      	uxtb	r1, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f002 fadb 	bl	80044a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	f003 020f 	and.w	r2, r3, #15
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d901      	bls.n	8001f1e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e042      	b.n	8001fa4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	da0f      	bge.n	8001f46 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 020f 	and.w	r2, r3, #15
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	3338      	adds	r3, #56	; 0x38
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2201      	movs	r2, #1
 8001f42:	705a      	strb	r2, [r3, #1]
 8001f44:	e00f      	b.n	8001f66 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	f003 020f 	and.w	r2, r3, #15
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_PCD_EP_ClrStall+0x86>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e00e      	b.n	8001fa4 <HAL_PCD_EP_ClrStall+0xa4>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68f9      	ldr	r1, [r7, #12]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f002 f8f3 	bl	8004180 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	da0c      	bge.n	8001fda <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	f003 020f 	and.w	r2, r3, #15
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	3338      	adds	r3, #56	; 0x38
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	e00c      	b.n	8001ff4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	f003 020f 	and.w	r2, r3, #15
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	4413      	add	r3, r2
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68f9      	ldr	r1, [r7, #12]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f001 ff12 	bl	8003e24 <USB_EPStopXfer>
 8002000:	4603      	mov	r3, r0
 8002002:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002004:	7afb      	ldrb	r3, [r7, #11]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b08a      	sub	sp, #40	; 0x28
 8002012:	af02      	add	r7, sp, #8
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	3338      	adds	r3, #56	; 0x38
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	3304      	adds	r3, #4
 8002034:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a1a      	ldr	r2, [r3, #32]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	429a      	cmp	r2, r3
 8002040:	d901      	bls.n	8002046 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e06c      	b.n	8002120 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	429a      	cmp	r2, r3
 800205a:	d902      	bls.n	8002062 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3303      	adds	r3, #3
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800206a:	e02b      	b.n	80020c4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	699a      	ldr	r2, [r3, #24]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	429a      	cmp	r2, r3
 8002080:	d902      	bls.n	8002088 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	3303      	adds	r3, #3
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6919      	ldr	r1, [r3, #16]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	b2da      	uxtb	r2, r3
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	4603      	mov	r3, r0
 80020a6:	6978      	ldr	r0, [r7, #20]
 80020a8:	f001 ff66 	bl	8003f78 <USB_WritePacket>

    ep->xfer_buff  += len;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	441a      	add	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a1a      	ldr	r2, [r3, #32]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	441a      	add	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d809      	bhi.n	80020ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a1a      	ldr	r2, [r3, #32]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d203      	bcs.n	80020ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1be      	bne.n	800206c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	699a      	ldr	r2, [r3, #24]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d811      	bhi.n	800211e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	2201      	movs	r2, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800210e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	43db      	mvns	r3, r3
 8002114:	6939      	ldr	r1, [r7, #16]
 8002116:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800211a:	4013      	ands	r3, r2
 800211c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3720      	adds	r7, #32
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	333c      	adds	r3, #60	; 0x3c
 8002140:	3304      	adds	r3, #4
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4413      	add	r3, r2
 800214e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d17b      	bne.n	8002256 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	2b00      	cmp	r3, #0
 8002166:	d015      	beq.n	8002194 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	4a61      	ldr	r2, [pc, #388]	; (80022f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	f240 80b9 	bls.w	80022e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80b3 	beq.w	80022e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	4413      	add	r3, r2
 8002186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800218a:	461a      	mov	r2, r3
 800218c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002190:	6093      	str	r3, [r2, #8]
 8002192:	e0a7      	b.n	80022e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021aa:	461a      	mov	r2, r3
 80021ac:	2320      	movs	r3, #32
 80021ae:	6093      	str	r3, [r2, #8]
 80021b0:	e098      	b.n	80022e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f040 8093 	bne.w	80022e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	4a4b      	ldr	r2, [pc, #300]	; (80022f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d90f      	bls.n	80021e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021dc:	461a      	mov	r2, r3
 80021de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021e2:	6093      	str	r3, [r2, #8]
 80021e4:	e07e      	b.n	80022e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	4413      	add	r3, r2
 80021f8:	3304      	adds	r3, #4
 80021fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	69da      	ldr	r2, [r3, #28]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	0159      	lsls	r1, r3, #5
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	440b      	add	r3, r1
 8002208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	1ad2      	subs	r2, r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d114      	bne.n	8002248 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002230:	461a      	mov	r2, r3
 8002232:	2101      	movs	r1, #1
 8002234:	f002 f936 	bl	80044a4 <USB_EP0_OutStart>
 8002238:	e006      	b.n	8002248 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	441a      	add	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	4619      	mov	r1, r3
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f004 fa68 	bl	8006724 <HAL_PCD_DataOutStageCallback>
 8002254:	e046      	b.n	80022e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a26      	ldr	r2, [pc, #152]	; (80022f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d124      	bne.n	80022a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00a      	beq.n	800227e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	4413      	add	r3, r2
 8002270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002274:	461a      	mov	r2, r3
 8002276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800227a:	6093      	str	r3, [r2, #8]
 800227c:	e032      	b.n	80022e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	f003 0320 	and.w	r3, r3, #32
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	4413      	add	r3, r2
 8002290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002294:	461a      	mov	r2, r3
 8002296:	2320      	movs	r3, #32
 8002298:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f004 fa3f 	bl	8006724 <HAL_PCD_DataOutStageCallback>
 80022a6:	e01d      	b.n	80022e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d114      	bne.n	80022d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d108      	bne.n	80022d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022d0:	461a      	mov	r2, r3
 80022d2:	2100      	movs	r1, #0
 80022d4:	f002 f8e6 	bl	80044a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	4619      	mov	r1, r3
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f004 fa20 	bl	8006724 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3720      	adds	r7, #32
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	4f54300a 	.word	0x4f54300a
 80022f4:	4f54310a 	.word	0x4f54310a

080022f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	333c      	adds	r3, #60	; 0x3c
 8002310:	3304      	adds	r3, #4
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4a15      	ldr	r2, [pc, #84]	; (8002380 <PCD_EP_OutSetupPacket_int+0x88>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d90e      	bls.n	800234c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002334:	2b00      	cmp	r3, #0
 8002336:	d009      	beq.n	800234c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002344:	461a      	mov	r2, r3
 8002346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800234a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f004 f9d7 	bl	8006700 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <PCD_EP_OutSetupPacket_int+0x88>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d90c      	bls.n	8002374 <PCD_EP_OutSetupPacket_int+0x7c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d108      	bne.n	8002374 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800236c:	461a      	mov	r2, r3
 800236e:	2101      	movs	r1, #1
 8002370:	f002 f898 	bl	80044a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	4f54300a 	.word	0x4f54300a

08002384 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	70fb      	strb	r3, [r7, #3]
 8002390:	4613      	mov	r3, r2
 8002392:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d107      	bne.n	80023b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023a2:	883b      	ldrh	r3, [r7, #0]
 80023a4:	0419      	lsls	r1, r3, #16
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28
 80023b0:	e028      	b.n	8002404 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	0c1b      	lsrs	r3, r3, #16
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	4413      	add	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]
 80023c4:	e00d      	b.n	80023e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	3340      	adds	r3, #64	; 0x40
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	0c1b      	lsrs	r3, r3, #16
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	4413      	add	r3, r2
 80023da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	3301      	adds	r3, #1
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d3ec      	bcc.n	80023c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023ec:	883b      	ldrh	r3, [r7, #0]
 80023ee:	0418      	lsls	r0, r3, #16
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6819      	ldr	r1, [r3, #0]
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	4302      	orrs	r2, r0
 80023fc:	3340      	adds	r3, #64	; 0x40
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	887a      	ldrh	r2, [r7, #2]
 8002424:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e267      	b.n	800292e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d075      	beq.n	8002556 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800246a:	4b88      	ldr	r3, [pc, #544]	; (800268c <HAL_RCC_OscConfig+0x240>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b04      	cmp	r3, #4
 8002474:	d00c      	beq.n	8002490 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002476:	4b85      	ldr	r3, [pc, #532]	; (800268c <HAL_RCC_OscConfig+0x240>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800247e:	2b08      	cmp	r3, #8
 8002480:	d112      	bne.n	80024a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002482:	4b82      	ldr	r3, [pc, #520]	; (800268c <HAL_RCC_OscConfig+0x240>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800248e:	d10b      	bne.n	80024a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002490:	4b7e      	ldr	r3, [pc, #504]	; (800268c <HAL_RCC_OscConfig+0x240>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d05b      	beq.n	8002554 <HAL_RCC_OscConfig+0x108>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d157      	bne.n	8002554 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e242      	b.n	800292e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b0:	d106      	bne.n	80024c0 <HAL_RCC_OscConfig+0x74>
 80024b2:	4b76      	ldr	r3, [pc, #472]	; (800268c <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a75      	ldr	r2, [pc, #468]	; (800268c <HAL_RCC_OscConfig+0x240>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e01d      	b.n	80024fc <HAL_RCC_OscConfig+0xb0>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCC_OscConfig+0x98>
 80024ca:	4b70      	ldr	r3, [pc, #448]	; (800268c <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6f      	ldr	r2, [pc, #444]	; (800268c <HAL_RCC_OscConfig+0x240>)
 80024d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	4b6d      	ldr	r3, [pc, #436]	; (800268c <HAL_RCC_OscConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a6c      	ldr	r2, [pc, #432]	; (800268c <HAL_RCC_OscConfig+0x240>)
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e00b      	b.n	80024fc <HAL_RCC_OscConfig+0xb0>
 80024e4:	4b69      	ldr	r3, [pc, #420]	; (800268c <HAL_RCC_OscConfig+0x240>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a68      	ldr	r2, [pc, #416]	; (800268c <HAL_RCC_OscConfig+0x240>)
 80024ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b66      	ldr	r3, [pc, #408]	; (800268c <HAL_RCC_OscConfig+0x240>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a65      	ldr	r2, [pc, #404]	; (800268c <HAL_RCC_OscConfig+0x240>)
 80024f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d013      	beq.n	800252c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe fa46 	bl	8000994 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800250c:	f7fe fa42 	bl	8000994 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	; 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e207      	b.n	800292e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	4b5b      	ldr	r3, [pc, #364]	; (800268c <HAL_RCC_OscConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0xc0>
 800252a:	e014      	b.n	8002556 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7fe fa32 	bl	8000994 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002534:	f7fe fa2e 	bl	8000994 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e1f3      	b.n	800292e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002546:	4b51      	ldr	r3, [pc, #324]	; (800268c <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0xe8>
 8002552:	e000      	b.n	8002556 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d063      	beq.n	800262a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002562:	4b4a      	ldr	r3, [pc, #296]	; (800268c <HAL_RCC_OscConfig+0x240>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00b      	beq.n	8002586 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256e:	4b47      	ldr	r3, [pc, #284]	; (800268c <HAL_RCC_OscConfig+0x240>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002576:	2b08      	cmp	r3, #8
 8002578:	d11c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257a:	4b44      	ldr	r3, [pc, #272]	; (800268c <HAL_RCC_OscConfig+0x240>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d116      	bne.n	80025b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002586:	4b41      	ldr	r3, [pc, #260]	; (800268c <HAL_RCC_OscConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <HAL_RCC_OscConfig+0x152>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d001      	beq.n	800259e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e1c7      	b.n	800292e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259e:	4b3b      	ldr	r3, [pc, #236]	; (800268c <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4937      	ldr	r1, [pc, #220]	; (800268c <HAL_RCC_OscConfig+0x240>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b2:	e03a      	b.n	800262a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d020      	beq.n	80025fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025bc:	4b34      	ldr	r3, [pc, #208]	; (8002690 <HAL_RCC_OscConfig+0x244>)
 80025be:	2201      	movs	r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c2:	f7fe f9e7 	bl	8000994 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ca:	f7fe f9e3 	bl	8000994 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e1a8      	b.n	800292e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025dc:	4b2b      	ldr	r3, [pc, #172]	; (800268c <HAL_RCC_OscConfig+0x240>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0f0      	beq.n	80025ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e8:	4b28      	ldr	r3, [pc, #160]	; (800268c <HAL_RCC_OscConfig+0x240>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4925      	ldr	r1, [pc, #148]	; (800268c <HAL_RCC_OscConfig+0x240>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	600b      	str	r3, [r1, #0]
 80025fc:	e015      	b.n	800262a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fe:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_RCC_OscConfig+0x244>)
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe f9c6 	bl	8000994 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260c:	f7fe f9c2 	bl	8000994 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e187      	b.n	800292e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261e:	4b1b      	ldr	r3, [pc, #108]	; (800268c <HAL_RCC_OscConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d036      	beq.n	80026a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d016      	beq.n	800266c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <HAL_RCC_OscConfig+0x248>)
 8002640:	2201      	movs	r2, #1
 8002642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002644:	f7fe f9a6 	bl	8000994 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800264c:	f7fe f9a2 	bl	8000994 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e167      	b.n	800292e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCC_OscConfig+0x240>)
 8002660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x200>
 800266a:	e01b      	b.n	80026a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_RCC_OscConfig+0x248>)
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002672:	f7fe f98f 	bl	8000994 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002678:	e00e      	b.n	8002698 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800267a:	f7fe f98b 	bl	8000994 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d907      	bls.n	8002698 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e150      	b.n	800292e <HAL_RCC_OscConfig+0x4e2>
 800268c:	40023800 	.word	0x40023800
 8002690:	42470000 	.word	0x42470000
 8002694:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002698:	4b88      	ldr	r3, [pc, #544]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 800269a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1ea      	bne.n	800267a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 8097 	beq.w	80027e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b2:	2300      	movs	r3, #0
 80026b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b6:	4b81      	ldr	r3, [pc, #516]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10f      	bne.n	80026e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	4b7d      	ldr	r3, [pc, #500]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a7c      	ldr	r2, [pc, #496]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 80026cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
 80026d2:	4b7a      	ldr	r3, [pc, #488]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026de:	2301      	movs	r3, #1
 80026e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e2:	4b77      	ldr	r3, [pc, #476]	; (80028c0 <HAL_RCC_OscConfig+0x474>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d118      	bne.n	8002720 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ee:	4b74      	ldr	r3, [pc, #464]	; (80028c0 <HAL_RCC_OscConfig+0x474>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a73      	ldr	r2, [pc, #460]	; (80028c0 <HAL_RCC_OscConfig+0x474>)
 80026f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fa:	f7fe f94b 	bl	8000994 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002702:	f7fe f947 	bl	8000994 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e10c      	b.n	800292e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002714:	4b6a      	ldr	r3, [pc, #424]	; (80028c0 <HAL_RCC_OscConfig+0x474>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d106      	bne.n	8002736 <HAL_RCC_OscConfig+0x2ea>
 8002728:	4b64      	ldr	r3, [pc, #400]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	4a63      	ldr	r2, [pc, #396]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6713      	str	r3, [r2, #112]	; 0x70
 8002734:	e01c      	b.n	8002770 <HAL_RCC_OscConfig+0x324>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b05      	cmp	r3, #5
 800273c:	d10c      	bne.n	8002758 <HAL_RCC_OscConfig+0x30c>
 800273e:	4b5f      	ldr	r3, [pc, #380]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	4a5e      	ldr	r2, [pc, #376]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 8002744:	f043 0304 	orr.w	r3, r3, #4
 8002748:	6713      	str	r3, [r2, #112]	; 0x70
 800274a:	4b5c      	ldr	r3, [pc, #368]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	4a5b      	ldr	r2, [pc, #364]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6713      	str	r3, [r2, #112]	; 0x70
 8002756:	e00b      	b.n	8002770 <HAL_RCC_OscConfig+0x324>
 8002758:	4b58      	ldr	r3, [pc, #352]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275c:	4a57      	ldr	r2, [pc, #348]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	6713      	str	r3, [r2, #112]	; 0x70
 8002764:	4b55      	ldr	r3, [pc, #340]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002768:	4a54      	ldr	r2, [pc, #336]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 800276a:	f023 0304 	bic.w	r3, r3, #4
 800276e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d015      	beq.n	80027a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002778:	f7fe f90c 	bl	8000994 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277e:	e00a      	b.n	8002796 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002780:	f7fe f908 	bl	8000994 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e0cb      	b.n	800292e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002796:	4b49      	ldr	r3, [pc, #292]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0ee      	beq.n	8002780 <HAL_RCC_OscConfig+0x334>
 80027a2:	e014      	b.n	80027ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a4:	f7fe f8f6 	bl	8000994 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027aa:	e00a      	b.n	80027c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ac:	f7fe f8f2 	bl	8000994 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e0b5      	b.n	800292e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c2:	4b3e      	ldr	r3, [pc, #248]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 80027c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1ee      	bne.n	80027ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d105      	bne.n	80027e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d4:	4b39      	ldr	r3, [pc, #228]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	4a38      	ldr	r2, [pc, #224]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 80027da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80a1 	beq.w	800292c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ea:	4b34      	ldr	r3, [pc, #208]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d05c      	beq.n	80028b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d141      	bne.n	8002882 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fe:	4b31      	ldr	r3, [pc, #196]	; (80028c4 <HAL_RCC_OscConfig+0x478>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7fe f8c6 	bl	8000994 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280c:	f7fe f8c2 	bl	8000994 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e087      	b.n	800292e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281e:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69da      	ldr	r2, [r3, #28]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	019b      	lsls	r3, r3, #6
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	085b      	lsrs	r3, r3, #1
 8002842:	3b01      	subs	r3, #1
 8002844:	041b      	lsls	r3, r3, #16
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	061b      	lsls	r3, r3, #24
 800284e:	491b      	ldr	r1, [pc, #108]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002854:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <HAL_RCC_OscConfig+0x478>)
 8002856:	2201      	movs	r2, #1
 8002858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285a:	f7fe f89b 	bl	8000994 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002862:	f7fe f897 	bl	8000994 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e05c      	b.n	800292e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x416>
 8002880:	e054      	b.n	800292c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_RCC_OscConfig+0x478>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe f884 	bl	8000994 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002890:	f7fe f880 	bl	8000994 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e045      	b.n	800292e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_RCC_OscConfig+0x470>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x444>
 80028ae:	e03d      	b.n	800292c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d107      	bne.n	80028c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e038      	b.n	800292e <HAL_RCC_OscConfig+0x4e2>
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40007000 	.word	0x40007000
 80028c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <HAL_RCC_OscConfig+0x4ec>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d028      	beq.n	8002928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d121      	bne.n	8002928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d11a      	bne.n	8002928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028f8:	4013      	ands	r3, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002900:	4293      	cmp	r3, r2
 8002902:	d111      	bne.n	8002928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	085b      	lsrs	r3, r3, #1
 8002910:	3b01      	subs	r3, #1
 8002912:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d107      	bne.n	8002928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800

0800293c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0cc      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002950:	4b68      	ldr	r3, [pc, #416]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d90c      	bls.n	8002978 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295e:	4b65      	ldr	r3, [pc, #404]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b63      	ldr	r3, [pc, #396]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0b8      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d020      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002990:	4b59      	ldr	r3, [pc, #356]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	4a58      	ldr	r2, [pc, #352]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800299a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a8:	4b53      	ldr	r3, [pc, #332]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4a52      	ldr	r2, [pc, #328]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b4:	4b50      	ldr	r3, [pc, #320]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	494d      	ldr	r1, [pc, #308]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d044      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d119      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e07f      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d003      	beq.n	80029fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fa:	4b3f      	ldr	r3, [pc, #252]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e06f      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0a:	4b3b      	ldr	r3, [pc, #236]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e067      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a1a:	4b37      	ldr	r3, [pc, #220]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f023 0203 	bic.w	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4934      	ldr	r1, [pc, #208]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a2c:	f7fd ffb2 	bl	8000994 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a34:	f7fd ffae 	bl	8000994 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e04f      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4a:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 020c 	and.w	r2, r3, #12
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d1eb      	bne.n	8002a34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d20c      	bcs.n	8002a84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e032      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4916      	ldr	r1, [pc, #88]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	490e      	ldr	r1, [pc, #56]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ac2:	f000 f821 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	490a      	ldr	r1, [pc, #40]	; (8002afc <HAL_RCC_ClockConfig+0x1c0>)
 8002ad4:	5ccb      	ldrb	r3, [r1, r3]
 8002ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ada:	4a09      	ldr	r2, [pc, #36]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fd ff12 	bl	800090c <HAL_InitTick>

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023c00 	.word	0x40023c00
 8002af8:	40023800 	.word	0x40023800
 8002afc:	08006d2c 	.word	0x08006d2c
 8002b00:	20000000 	.word	0x20000000
 8002b04:	20000004 	.word	0x20000004

08002b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b0c:	b094      	sub	sp, #80	; 0x50
 8002b0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	647b      	str	r3, [r7, #68]	; 0x44
 8002b14:	2300      	movs	r3, #0
 8002b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b18:	2300      	movs	r3, #0
 8002b1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b20:	4b79      	ldr	r3, [pc, #484]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 030c 	and.w	r3, r3, #12
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d00d      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x40>
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	f200 80e1 	bhi.w	8002cf4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x34>
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d003      	beq.n	8002b42 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b3a:	e0db      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b3c:	4b73      	ldr	r3, [pc, #460]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x204>)
 8002b3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b40:	e0db      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b42:	4b73      	ldr	r3, [pc, #460]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b46:	e0d8      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b48:	4b6f      	ldr	r3, [pc, #444]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b52:	4b6d      	ldr	r3, [pc, #436]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d063      	beq.n	8002c26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5e:	4b6a      	ldr	r3, [pc, #424]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	099b      	lsrs	r3, r3, #6
 8002b64:	2200      	movs	r2, #0
 8002b66:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b70:	633b      	str	r3, [r7, #48]	; 0x30
 8002b72:	2300      	movs	r3, #0
 8002b74:	637b      	str	r3, [r7, #52]	; 0x34
 8002b76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b7a:	4622      	mov	r2, r4
 8002b7c:	462b      	mov	r3, r5
 8002b7e:	f04f 0000 	mov.w	r0, #0
 8002b82:	f04f 0100 	mov.w	r1, #0
 8002b86:	0159      	lsls	r1, r3, #5
 8002b88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b8c:	0150      	lsls	r0, r2, #5
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4621      	mov	r1, r4
 8002b94:	1a51      	subs	r1, r2, r1
 8002b96:	6139      	str	r1, [r7, #16]
 8002b98:	4629      	mov	r1, r5
 8002b9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bac:	4659      	mov	r1, fp
 8002bae:	018b      	lsls	r3, r1, #6
 8002bb0:	4651      	mov	r1, sl
 8002bb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bb6:	4651      	mov	r1, sl
 8002bb8:	018a      	lsls	r2, r1, #6
 8002bba:	4651      	mov	r1, sl
 8002bbc:	ebb2 0801 	subs.w	r8, r2, r1
 8002bc0:	4659      	mov	r1, fp
 8002bc2:	eb63 0901 	sbc.w	r9, r3, r1
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bda:	4690      	mov	r8, r2
 8002bdc:	4699      	mov	r9, r3
 8002bde:	4623      	mov	r3, r4
 8002be0:	eb18 0303 	adds.w	r3, r8, r3
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	462b      	mov	r3, r5
 8002be8:	eb49 0303 	adc.w	r3, r9, r3
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	024b      	lsls	r3, r1, #9
 8002bfe:	4621      	mov	r1, r4
 8002c00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c04:	4621      	mov	r1, r4
 8002c06:	024a      	lsls	r2, r1, #9
 8002c08:	4610      	mov	r0, r2
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c0e:	2200      	movs	r2, #0
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c18:	f7fd fad6 	bl	80001c8 <__aeabi_uldivmod>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4613      	mov	r3, r2
 8002c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c24:	e058      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c26:	4b38      	ldr	r3, [pc, #224]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	099b      	lsrs	r3, r3, #6
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	4611      	mov	r1, r2
 8002c32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c36:	623b      	str	r3, [r7, #32]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c40:	4642      	mov	r2, r8
 8002c42:	464b      	mov	r3, r9
 8002c44:	f04f 0000 	mov.w	r0, #0
 8002c48:	f04f 0100 	mov.w	r1, #0
 8002c4c:	0159      	lsls	r1, r3, #5
 8002c4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c52:	0150      	lsls	r0, r2, #5
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4641      	mov	r1, r8
 8002c5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c5e:	4649      	mov	r1, r9
 8002c60:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c78:	ebb2 040a 	subs.w	r4, r2, sl
 8002c7c:	eb63 050b 	sbc.w	r5, r3, fp
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	00eb      	lsls	r3, r5, #3
 8002c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c8e:	00e2      	lsls	r2, r4, #3
 8002c90:	4614      	mov	r4, r2
 8002c92:	461d      	mov	r5, r3
 8002c94:	4643      	mov	r3, r8
 8002c96:	18e3      	adds	r3, r4, r3
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	eb45 0303 	adc.w	r3, r5, r3
 8002ca0:	607b      	str	r3, [r7, #4]
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cae:	4629      	mov	r1, r5
 8002cb0:	028b      	lsls	r3, r1, #10
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cb8:	4621      	mov	r1, r4
 8002cba:	028a      	lsls	r2, r1, #10
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	61fa      	str	r2, [r7, #28]
 8002cc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ccc:	f7fd fa7c 	bl	80001c8 <__aeabi_uldivmod>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cf2:	e002      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x204>)
 8002cf6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3750      	adds	r7, #80	; 0x50
 8002d00:	46bd      	mov	sp, r7
 8002d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	00f42400 	.word	0x00f42400
 8002d10:	007a1200 	.word	0x007a1200

08002d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d18:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	20000000 	.word	0x20000000

08002d2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	f107 001c 	add.w	r0, r7, #28
 8002d3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d122      	bne.n	8002d8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d105      	bne.n	8002d7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f001 fbee 	bl	8004560 <USB_CoreReset>
 8002d84:	4603      	mov	r3, r0
 8002d86:	73fb      	strb	r3, [r7, #15]
 8002d88:	e01a      	b.n	8002dc0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f001 fbe2 	bl	8004560 <USB_CoreReset>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002daa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	639a      	str	r2, [r3, #56]	; 0x38
 8002db2:	e005      	b.n	8002dc0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d10b      	bne.n	8002dde <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f043 0206 	orr.w	r2, r3, #6
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f043 0220 	orr.w	r2, r3, #32
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002dea:	b004      	add	sp, #16
 8002dec:	4770      	bx	lr
	...

08002df0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d165      	bne.n	8002ed0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4a41      	ldr	r2, [pc, #260]	; (8002f0c <USB_SetTurnaroundTime+0x11c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d906      	bls.n	8002e1a <USB_SetTurnaroundTime+0x2a>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4a40      	ldr	r2, [pc, #256]	; (8002f10 <USB_SetTurnaroundTime+0x120>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d202      	bcs.n	8002e1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002e14:	230f      	movs	r3, #15
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	e062      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4a3c      	ldr	r2, [pc, #240]	; (8002f10 <USB_SetTurnaroundTime+0x120>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d306      	bcc.n	8002e30 <USB_SetTurnaroundTime+0x40>
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4a3b      	ldr	r2, [pc, #236]	; (8002f14 <USB_SetTurnaroundTime+0x124>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d202      	bcs.n	8002e30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002e2a:	230e      	movs	r3, #14
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e057      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4a38      	ldr	r2, [pc, #224]	; (8002f14 <USB_SetTurnaroundTime+0x124>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d306      	bcc.n	8002e46 <USB_SetTurnaroundTime+0x56>
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4a37      	ldr	r2, [pc, #220]	; (8002f18 <USB_SetTurnaroundTime+0x128>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d202      	bcs.n	8002e46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002e40:	230d      	movs	r3, #13
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	e04c      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4a33      	ldr	r2, [pc, #204]	; (8002f18 <USB_SetTurnaroundTime+0x128>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d306      	bcc.n	8002e5c <USB_SetTurnaroundTime+0x6c>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	4a32      	ldr	r2, [pc, #200]	; (8002f1c <USB_SetTurnaroundTime+0x12c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d802      	bhi.n	8002e5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002e56:	230c      	movs	r3, #12
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	e041      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4a2f      	ldr	r2, [pc, #188]	; (8002f1c <USB_SetTurnaroundTime+0x12c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d906      	bls.n	8002e72 <USB_SetTurnaroundTime+0x82>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4a2e      	ldr	r2, [pc, #184]	; (8002f20 <USB_SetTurnaroundTime+0x130>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d802      	bhi.n	8002e72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002e6c:	230b      	movs	r3, #11
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	e036      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4a2a      	ldr	r2, [pc, #168]	; (8002f20 <USB_SetTurnaroundTime+0x130>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d906      	bls.n	8002e88 <USB_SetTurnaroundTime+0x98>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	4a29      	ldr	r2, [pc, #164]	; (8002f24 <USB_SetTurnaroundTime+0x134>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d802      	bhi.n	8002e88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e82:	230a      	movs	r3, #10
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	e02b      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4a26      	ldr	r2, [pc, #152]	; (8002f24 <USB_SetTurnaroundTime+0x134>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d906      	bls.n	8002e9e <USB_SetTurnaroundTime+0xae>
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4a25      	ldr	r2, [pc, #148]	; (8002f28 <USB_SetTurnaroundTime+0x138>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d202      	bcs.n	8002e9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e98:	2309      	movs	r3, #9
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	e020      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	4a21      	ldr	r2, [pc, #132]	; (8002f28 <USB_SetTurnaroundTime+0x138>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d306      	bcc.n	8002eb4 <USB_SetTurnaroundTime+0xc4>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4a20      	ldr	r2, [pc, #128]	; (8002f2c <USB_SetTurnaroundTime+0x13c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d802      	bhi.n	8002eb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002eae:	2308      	movs	r3, #8
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	e015      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <USB_SetTurnaroundTime+0x13c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d906      	bls.n	8002eca <USB_SetTurnaroundTime+0xda>
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <USB_SetTurnaroundTime+0x140>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d202      	bcs.n	8002eca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002ec4:	2307      	movs	r3, #7
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	e00a      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002eca:	2306      	movs	r3, #6
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	e007      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d102      	bne.n	8002edc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002ed6:	2309      	movs	r3, #9
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	e001      	b.n	8002ee0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002edc:	2309      	movs	r3, #9
 8002ede:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	029b      	lsls	r3, r3, #10
 8002ef4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	00d8acbf 	.word	0x00d8acbf
 8002f10:	00e4e1c0 	.word	0x00e4e1c0
 8002f14:	00f42400 	.word	0x00f42400
 8002f18:	01067380 	.word	0x01067380
 8002f1c:	011a499f 	.word	0x011a499f
 8002f20:	01312cff 	.word	0x01312cff
 8002f24:	014ca43f 	.word	0x014ca43f
 8002f28:	016e3600 	.word	0x016e3600
 8002f2c:	01a6ab1f 	.word	0x01a6ab1f
 8002f30:	01e84800 	.word	0x01e84800

08002f34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f043 0201 	orr.w	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f023 0201 	bic.w	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d115      	bne.n	8002fc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f7fd fd00 	bl	80009ac <HAL_Delay>
      ms++;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f001 fa45 	bl	8004442 <USB_GetMode>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d01e      	beq.n	8002ffc <USB_SetCurrentMode+0x84>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b31      	cmp	r3, #49	; 0x31
 8002fc2:	d9f0      	bls.n	8002fa6 <USB_SetCurrentMode+0x2e>
 8002fc4:	e01a      	b.n	8002ffc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d115      	bne.n	8002ff8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002fd8:	2001      	movs	r0, #1
 8002fda:	f7fd fce7 	bl	80009ac <HAL_Delay>
      ms++;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f001 fa2c 	bl	8004442 <USB_GetMode>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <USB_SetCurrentMode+0x84>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b31      	cmp	r3, #49	; 0x31
 8002ff4:	d9f0      	bls.n	8002fd8 <USB_SetCurrentMode+0x60>
 8002ff6:	e001      	b.n	8002ffc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e005      	b.n	8003008 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b32      	cmp	r3, #50	; 0x32
 8003000:	d101      	bne.n	8003006 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003010:	b084      	sub	sp, #16
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800301e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	e009      	b.n	8003044 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	3340      	adds	r3, #64	; 0x40
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	2200      	movs	r2, #0
 800303c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	3301      	adds	r3, #1
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b0e      	cmp	r3, #14
 8003048:	d9f2      	bls.n	8003030 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800304a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800304c:	2b00      	cmp	r3, #0
 800304e:	d11c      	bne.n	800308a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800305e:	f043 0302 	orr.w	r3, r3, #2
 8003062:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	639a      	str	r2, [r3, #56]	; 0x38
 8003088:	e00b      	b.n	80030a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80030a8:	461a      	mov	r2, r3
 80030aa:	2300      	movs	r3, #0
 80030ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b4:	4619      	mov	r1, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030bc:	461a      	mov	r2, r3
 80030be:	680b      	ldr	r3, [r1, #0]
 80030c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d10c      	bne.n	80030e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80030c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d104      	bne.n	80030d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80030ce:	2100      	movs	r1, #0
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f965 	bl	80033a0 <USB_SetDevSpeed>
 80030d6:	e008      	b.n	80030ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80030d8:	2101      	movs	r1, #1
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f960 	bl	80033a0 <USB_SetDevSpeed>
 80030e0:	e003      	b.n	80030ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80030e2:	2103      	movs	r1, #3
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f95b 	bl	80033a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80030ea:	2110      	movs	r1, #16
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f8f3 	bl	80032d8 <USB_FlushTxFifo>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f91f 	bl	8003340 <USB_FlushRxFifo>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003112:	461a      	mov	r2, r3
 8003114:	2300      	movs	r3, #0
 8003116:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311e:	461a      	mov	r2, r3
 8003120:	2300      	movs	r3, #0
 8003122:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800312a:	461a      	mov	r2, r3
 800312c:	2300      	movs	r3, #0
 800312e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003130:	2300      	movs	r3, #0
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	e043      	b.n	80031be <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800314c:	d118      	bne.n	8003180 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10a      	bne.n	800316a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003160:	461a      	mov	r2, r3
 8003162:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	e013      	b.n	8003192 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4413      	add	r3, r2
 8003172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003176:	461a      	mov	r2, r3
 8003178:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e008      	b.n	8003192 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4413      	add	r3, r2
 8003188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800318c:	461a      	mov	r2, r3
 800318e:	2300      	movs	r3, #0
 8003190:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800319e:	461a      	mov	r2, r3
 80031a0:	2300      	movs	r3, #0
 80031a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b0:	461a      	mov	r2, r3
 80031b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	3301      	adds	r3, #1
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d3b7      	bcc.n	8003136 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	e043      	b.n	8003254 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031e2:	d118      	bne.n	8003216 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10a      	bne.n	8003200 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f6:	461a      	mov	r2, r3
 80031f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e013      	b.n	8003228 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320c:	461a      	mov	r2, r3
 800320e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	e008      	b.n	8003228 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4413      	add	r3, r2
 800321e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003222:	461a      	mov	r2, r3
 8003224:	2300      	movs	r3, #0
 8003226:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003234:	461a      	mov	r2, r3
 8003236:	2300      	movs	r3, #0
 8003238:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4413      	add	r3, r2
 8003242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003246:	461a      	mov	r2, r3
 8003248:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800324c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	3301      	adds	r3, #1
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	429a      	cmp	r2, r3
 800325a:	d3b7      	bcc.n	80031cc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800326a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800326e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800327c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003280:	2b00      	cmp	r3, #0
 8003282:	d105      	bne.n	8003290 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f043 0210 	orr.w	r2, r3, #16
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699a      	ldr	r2, [r3, #24]
 8003294:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <USB_DevInit+0x2c4>)
 8003296:	4313      	orrs	r3, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800329c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f043 0208 	orr.w	r2, r3, #8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80032ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d107      	bne.n	80032c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032bc:	f043 0304 	orr.w	r3, r3, #4
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032d0:	b004      	add	sp, #16
 80032d2:	4770      	bx	lr
 80032d4:	803c3800 	.word	0x803c3800

080032d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3301      	adds	r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a13      	ldr	r2, [pc, #76]	; (800333c <USB_FlushTxFifo+0x64>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d901      	bls.n	80032f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e01b      	b.n	8003330 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	daf2      	bge.n	80032e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	019b      	lsls	r3, r3, #6
 8003308:	f043 0220 	orr.w	r2, r3, #32
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	3301      	adds	r3, #1
 8003314:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4a08      	ldr	r2, [pc, #32]	; (800333c <USB_FlushTxFifo+0x64>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e006      	b.n	8003330 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b20      	cmp	r3, #32
 800332c:	d0f0      	beq.n	8003310 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	00030d40 	.word	0x00030d40

08003340 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3301      	adds	r3, #1
 8003350:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4a11      	ldr	r2, [pc, #68]	; (800339c <USB_FlushRxFifo+0x5c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e018      	b.n	8003390 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	daf2      	bge.n	800334c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2210      	movs	r2, #16
 800336e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3301      	adds	r3, #1
 8003374:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4a08      	ldr	r2, [pc, #32]	; (800339c <USB_FlushRxFifo+0x5c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e006      	b.n	8003390 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b10      	cmp	r3, #16
 800338c:	d0f0      	beq.n	8003370 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	00030d40 	.word	0x00030d40

080033a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	68f9      	ldr	r1, [r7, #12]
 80033bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033c0:	4313      	orrs	r3, r2
 80033c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b087      	sub	sp, #28
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0306 	and.w	r3, r3, #6
 80033ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d102      	bne.n	80033f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80033f2:	2300      	movs	r3, #0
 80033f4:	75fb      	strb	r3, [r7, #23]
 80033f6:	e00a      	b.n	800340e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d002      	beq.n	8003404 <USB_GetDevSpeed+0x32>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b06      	cmp	r3, #6
 8003402:	d102      	bne.n	800340a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003404:	2302      	movs	r3, #2
 8003406:	75fb      	strb	r3, [r7, #23]
 8003408:	e001      	b.n	800340e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800340a:	230f      	movs	r3, #15
 800340c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800340e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003410:	4618      	mov	r0, r3
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	785b      	ldrb	r3, [r3, #1]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d13a      	bne.n	80034ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	2101      	movs	r1, #1
 800344a:	fa01 f303 	lsl.w	r3, r1, r3
 800344e:	b29b      	uxth	r3, r3
 8003450:	68f9      	ldr	r1, [r7, #12]
 8003452:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003456:	4313      	orrs	r3, r2
 8003458:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d155      	bne.n	800351c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4413      	add	r3, r2
 8003478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	791b      	ldrb	r3, [r3, #4]
 800348a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800348c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	059b      	lsls	r3, r3, #22
 8003492:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003494:	4313      	orrs	r3, r2
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	0151      	lsls	r1, r2, #5
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	440a      	add	r2, r1
 800349e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	e036      	b.n	800351c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b4:	69da      	ldr	r2, [r3, #28]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	2101      	movs	r1, #1
 80034c0:	fa01 f303 	lsl.w	r3, r1, r3
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d11a      	bne.n	800351c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	791b      	ldrb	r3, [r3, #4]
 8003500:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003502:	430b      	orrs	r3, r1
 8003504:	4313      	orrs	r3, r2
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	0151      	lsls	r1, r2, #5
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	440a      	add	r2, r1
 800350e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800351a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	785b      	ldrb	r3, [r3, #1]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d161      	bne.n	800360c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800355a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800355e:	d11f      	bne.n	80035a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4413      	add	r3, r2
 8003568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	0151      	lsls	r1, r2, #5
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	440a      	add	r2, r1
 8003576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800357a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800357e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	0151      	lsls	r1, r2, #5
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	440a      	add	r2, r1
 8003596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800359a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800359e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	2101      	movs	r1, #1
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	68f9      	ldr	r1, [r7, #12]
 80035bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035c0:	4013      	ands	r3, r2
 80035c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	2101      	movs	r1, #1
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	b29b      	uxth	r3, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	68f9      	ldr	r1, [r7, #12]
 80035e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035e4:	4013      	ands	r3, r2
 80035e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	0159      	lsls	r1, r3, #5
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	440b      	add	r3, r1
 80035fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003602:	4619      	mov	r1, r3
 8003604:	4b35      	ldr	r3, [pc, #212]	; (80036dc <USB_DeactivateEndpoint+0x1b0>)
 8003606:	4013      	ands	r3, r2
 8003608:	600b      	str	r3, [r1, #0]
 800360a:	e060      	b.n	80036ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800361e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003622:	d11f      	bne.n	8003664 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	0151      	lsls	r1, r2, #5
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	440a      	add	r2, r1
 800363a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800363e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003642:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	0151      	lsls	r1, r2, #5
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	440a      	add	r2, r1
 800365a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800365e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003662:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	2101      	movs	r1, #1
 8003676:	fa01 f303 	lsl.w	r3, r1, r3
 800367a:	041b      	lsls	r3, r3, #16
 800367c:	43db      	mvns	r3, r3
 800367e:	68f9      	ldr	r1, [r7, #12]
 8003680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003684:	4013      	ands	r3, r2
 8003686:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	2101      	movs	r1, #1
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	041b      	lsls	r3, r3, #16
 80036a0:	43db      	mvns	r3, r3
 80036a2:	68f9      	ldr	r1, [r7, #12]
 80036a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036a8:	4013      	ands	r3, r2
 80036aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	0159      	lsls	r1, r3, #5
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	440b      	add	r3, r1
 80036c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c6:	4619      	mov	r1, r3
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <USB_DeactivateEndpoint+0x1b4>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	ec337800 	.word	0xec337800
 80036e0:	eff37800 	.word	0xeff37800

080036e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	; 0x28
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	4613      	mov	r3, r2
 80036f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	785b      	ldrb	r3, [r3, #1]
 8003700:	2b01      	cmp	r3, #1
 8003702:	f040 815c 	bne.w	80039be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d132      	bne.n	8003774 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	0151      	lsls	r1, r2, #5
 8003720:	69fa      	ldr	r2, [r7, #28]
 8003722:	440a      	add	r2, r1
 8003724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003728:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800372c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003730:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	0151      	lsls	r1, r2, #5
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	440a      	add	r2, r1
 8003748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800374c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003750:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	0151      	lsls	r1, r2, #5
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	440a      	add	r2, r1
 8003768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800376c:	0cdb      	lsrs	r3, r3, #19
 800376e:	04db      	lsls	r3, r3, #19
 8003770:	6113      	str	r3, [r2, #16]
 8003772:	e074      	b.n	800385e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	0151      	lsls	r1, r2, #5
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	440a      	add	r2, r1
 800378a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800378e:	0cdb      	lsrs	r3, r3, #19
 8003790:	04db      	lsls	r3, r3, #19
 8003792:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	4413      	add	r3, r2
 800379c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	0151      	lsls	r1, r2, #5
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	440a      	add	r2, r1
 80037aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	6999      	ldr	r1, [r3, #24]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	440b      	add	r3, r1
 80037d0:	1e59      	subs	r1, r3, #1
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80037dc:	4b9d      	ldr	r3, [pc, #628]	; (8003a54 <USB_EPStartXfer+0x370>)
 80037de:	400b      	ands	r3, r1
 80037e0:	69b9      	ldr	r1, [r7, #24]
 80037e2:	0148      	lsls	r0, r1, #5
 80037e4:	69f9      	ldr	r1, [r7, #28]
 80037e6:	4401      	add	r1, r0
 80037e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80037ec:	4313      	orrs	r3, r2
 80037ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003806:	69b9      	ldr	r1, [r7, #24]
 8003808:	0148      	lsls	r0, r1, #5
 800380a:	69f9      	ldr	r1, [r7, #28]
 800380c:	4401      	add	r1, r0
 800380e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003812:	4313      	orrs	r3, r2
 8003814:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	791b      	ldrb	r3, [r3, #4]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d11f      	bne.n	800385e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	0151      	lsls	r1, r2, #5
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	440a      	add	r2, r1
 8003834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003838:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800383c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	0151      	lsls	r1, r2, #5
 8003850:	69fa      	ldr	r2, [r7, #28]
 8003852:	440a      	add	r2, r1
 8003854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003858:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800385c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d14b      	bne.n	80038fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d009      	beq.n	8003880 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003878:	461a      	mov	r2, r3
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	791b      	ldrb	r3, [r3, #4]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d128      	bne.n	80038da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d110      	bne.n	80038ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	0151      	lsls	r1, r2, #5
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	440a      	add	r2, r1
 80038ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	e00f      	b.n	80038da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	0151      	lsls	r1, r2, #5
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	440a      	add	r2, r1
 80038d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	0151      	lsls	r1, r2, #5
 80038ec:	69fa      	ldr	r2, [r7, #28]
 80038ee:	440a      	add	r2, r1
 80038f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e133      	b.n	8003b64 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	0151      	lsls	r1, r2, #5
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	440a      	add	r2, r1
 8003912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003916:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800391a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	791b      	ldrb	r3, [r3, #4]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d015      	beq.n	8003950 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 811b 	beq.w	8003b64 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	2101      	movs	r1, #1
 8003940:	fa01 f303 	lsl.w	r3, r1, r3
 8003944:	69f9      	ldr	r1, [r7, #28]
 8003946:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800394a:	4313      	orrs	r3, r2
 800394c:	634b      	str	r3, [r1, #52]	; 0x34
 800394e:	e109      	b.n	8003b64 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d110      	bne.n	8003982 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	0151      	lsls	r1, r2, #5
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	440a      	add	r2, r1
 8003976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800397a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	e00f      	b.n	80039a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	0151      	lsls	r1, r2, #5
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	440a      	add	r2, r1
 8003998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800399c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	6919      	ldr	r1, [r3, #16]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	b298      	uxth	r0, r3
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	4603      	mov	r3, r0
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fade 	bl	8003f78 <USB_WritePacket>
 80039bc:	e0d2      	b.n	8003b64 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	0151      	lsls	r1, r2, #5
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	440a      	add	r2, r1
 80039d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039d8:	0cdb      	lsrs	r3, r3, #19
 80039da:	04db      	lsls	r3, r3, #19
 80039dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	0151      	lsls	r1, r2, #5
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	440a      	add	r2, r1
 80039f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a00:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d126      	bne.n	8003a58 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a20:	69b9      	ldr	r1, [r7, #24]
 8003a22:	0148      	lsls	r0, r1, #5
 8003a24:	69f9      	ldr	r1, [r7, #28]
 8003a26:	4401      	add	r1, r0
 8003a28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	0151      	lsls	r1, r2, #5
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	440a      	add	r2, r1
 8003a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a4e:	6113      	str	r3, [r2, #16]
 8003a50:	e03a      	b.n	8003ac8 <USB_EPStartXfer+0x3e4>
 8003a52:	bf00      	nop
 8003a54:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4413      	add	r3, r2
 8003a62:	1e5a      	subs	r2, r3, #1
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	8afa      	ldrh	r2, [r7, #22]
 8003a74:	fb03 f202 	mul.w	r2, r3, r2
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	8afb      	ldrh	r3, [r7, #22]
 8003a8c:	04d9      	lsls	r1, r3, #19
 8003a8e:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <USB_EPStartXfer+0x48c>)
 8003a90:	400b      	ands	r3, r1
 8003a92:	69b9      	ldr	r1, [r7, #24]
 8003a94:	0148      	lsls	r0, r1, #5
 8003a96:	69f9      	ldr	r1, [r7, #28]
 8003a98:	4401      	add	r1, r0
 8003a9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab8:	69b9      	ldr	r1, [r7, #24]
 8003aba:	0148      	lsls	r0, r1, #5
 8003abc:	69f9      	ldr	r1, [r7, #28]
 8003abe:	4401      	add	r1, r0
 8003ac0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d10d      	bne.n	8003aea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6919      	ldr	r1, [r3, #16]
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae6:	460a      	mov	r2, r1
 8003ae8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	791b      	ldrb	r3, [r3, #4]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d128      	bne.n	8003b44 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d110      	bne.n	8003b24 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	0151      	lsls	r1, r2, #5
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	440a      	add	r2, r1
 8003b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e00f      	b.n	8003b44 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	0151      	lsls	r1, r2, #5
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	440a      	add	r2, r1
 8003b3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b42:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	0151      	lsls	r1, r2, #5
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	440a      	add	r2, r1
 8003b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	1ff80000 	.word	0x1ff80000

08003b74 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	785b      	ldrb	r3, [r3, #1]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	f040 80ce 	bne.w	8003d32 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d132      	bne.n	8003c04 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	0151      	lsls	r1, r2, #5
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	440a      	add	r2, r1
 8003bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	0151      	lsls	r1, r2, #5
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	440a      	add	r2, r1
 8003bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003be0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	0151      	lsls	r1, r2, #5
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	440a      	add	r2, r1
 8003bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bfc:	0cdb      	lsrs	r3, r3, #19
 8003bfe:	04db      	lsls	r3, r3, #19
 8003c00:	6113      	str	r3, [r2, #16]
 8003c02:	e04e      	b.n	8003ca2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	0151      	lsls	r1, r2, #5
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	440a      	add	r2, r1
 8003c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c1e:	0cdb      	lsrs	r3, r3, #19
 8003c20:	04db      	lsls	r3, r3, #19
 8003c22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	0151      	lsls	r1, r2, #5
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	440a      	add	r2, r1
 8003c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c46:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	699a      	ldr	r2, [r3, #24]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d903      	bls.n	8003c5c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	0151      	lsls	r1, r2, #5
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	440a      	add	r2, r1
 8003c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c92:	6939      	ldr	r1, [r7, #16]
 8003c94:	0148      	lsls	r0, r1, #5
 8003c96:	6979      	ldr	r1, [r7, #20]
 8003c98:	4401      	add	r1, r0
 8003c9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d11e      	bne.n	8003ce6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d009      	beq.n	8003cc4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	0151      	lsls	r1, r2, #5
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	440a      	add	r2, r1
 8003cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	e097      	b.n	8003e16 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	0151      	lsls	r1, r2, #5
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	440a      	add	r2, r1
 8003cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d04:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8083 	beq.w	8003e16 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	2101      	movs	r1, #1
 8003d22:	fa01 f303 	lsl.w	r3, r1, r3
 8003d26:	6979      	ldr	r1, [r7, #20]
 8003d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	634b      	str	r3, [r1, #52]	; 0x34
 8003d30:	e071      	b.n	8003e16 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	0151      	lsls	r1, r2, #5
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	440a      	add	r2, r1
 8003d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d4c:	0cdb      	lsrs	r3, r3, #19
 8003d4e:	04db      	lsls	r3, r3, #19
 8003d50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	0151      	lsls	r1, r2, #5
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	440a      	add	r2, r1
 8003d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d74:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	0151      	lsls	r1, r2, #5
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	440a      	add	r2, r1
 8003da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003da8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc4:	6939      	ldr	r1, [r7, #16]
 8003dc6:	0148      	lsls	r0, r1, #5
 8003dc8:	6979      	ldr	r1, [r7, #20]
 8003dca:	4401      	add	r1, r0
 8003dcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003dd4:	79fb      	ldrb	r3, [r7, #7]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d10d      	bne.n	8003df6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	6919      	ldr	r1, [r3, #16]
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df2:	460a      	mov	r2, r1
 8003df4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	0151      	lsls	r1, r2, #5
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	440a      	add	r2, r1
 8003e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	785b      	ldrb	r3, [r3, #1]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d14a      	bne.n	8003ed8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e5a:	f040 8086 	bne.w	8003f6a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	7812      	ldrb	r2, [r2, #0]
 8003e72:	0151      	lsls	r1, r2, #5
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	440a      	add	r2, r1
 8003e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e80:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	7812      	ldrb	r2, [r2, #0]
 8003e96:	0151      	lsls	r1, r2, #5
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	440a      	add	r2, r1
 8003e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ea4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f242 7210 	movw	r2, #10000	; 0x2710
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d902      	bls.n	8003ebc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	75fb      	strb	r3, [r7, #23]
          break;
 8003eba:	e056      	b.n	8003f6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ed4:	d0e7      	beq.n	8003ea6 <USB_EPStopXfer+0x82>
 8003ed6:	e048      	b.n	8003f6a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ef0:	d13b      	bne.n	8003f6a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	7812      	ldrb	r2, [r2, #0]
 8003f06:	0151      	lsls	r1, r2, #5
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	440a      	add	r2, r1
 8003f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f14:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	7812      	ldrb	r2, [r2, #0]
 8003f2a:	0151      	lsls	r1, r2, #5
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	440a      	add	r2, r1
 8003f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d902      	bls.n	8003f50 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8003f4e:	e00c      	b.n	8003f6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f68:	d0e7      	beq.n	8003f3a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b089      	sub	sp, #36	; 0x24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	4611      	mov	r1, r2
 8003f84:	461a      	mov	r2, r3
 8003f86:	460b      	mov	r3, r1
 8003f88:	71fb      	strb	r3, [r7, #7]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003f96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d123      	bne.n	8003fe6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003f9e:	88bb      	ldrh	r3, [r7, #4]
 8003fa0:	3303      	adds	r3, #3
 8003fa2:	089b      	lsrs	r3, r3, #2
 8003fa4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	e018      	b.n	8003fde <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	031a      	lsls	r2, r3, #12
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb8:	461a      	mov	r2, r3
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	61bb      	str	r3, [r7, #24]
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d3e2      	bcc.n	8003fac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3724      	adds	r7, #36	; 0x24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b08b      	sub	sp, #44	; 0x2c
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	4613      	mov	r3, r2
 8004000:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	089b      	lsrs	r3, r3, #2
 800400e:	b29b      	uxth	r3, r3
 8004010:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800401a:	2300      	movs	r3, #0
 800401c:	623b      	str	r3, [r7, #32]
 800401e:	e014      	b.n	800404a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	601a      	str	r2, [r3, #0]
    pDest++;
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	3301      	adds	r3, #1
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	3301      	adds	r3, #1
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	3301      	adds	r3, #1
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	3301      	adds	r3, #1
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	3301      	adds	r3, #1
 8004048:	623b      	str	r3, [r7, #32]
 800404a:	6a3a      	ldr	r2, [r7, #32]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	429a      	cmp	r2, r3
 8004050:	d3e6      	bcc.n	8004020 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004052:	8bfb      	ldrh	r3, [r7, #30]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01e      	beq.n	8004096 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004062:	461a      	mov	r2, r3
 8004064:	f107 0310 	add.w	r3, r7, #16
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
 8004078:	b2da      	uxtb	r2, r3
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	701a      	strb	r2, [r3, #0]
      i++;
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	3301      	adds	r3, #1
 8004082:	623b      	str	r3, [r7, #32]
      pDest++;
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	3301      	adds	r3, #1
 8004088:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800408a:	8bfb      	ldrh	r3, [r7, #30]
 800408c:	3b01      	subs	r3, #1
 800408e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004090:	8bfb      	ldrh	r3, [r7, #30]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1ea      	bne.n	800406c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004098:	4618      	mov	r0, r3
 800409a:	372c      	adds	r7, #44	; 0x2c
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	785b      	ldrb	r3, [r3, #1]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d12c      	bne.n	800411a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	db12      	blt.n	80040f8 <USB_EPSetStall+0x54>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00f      	beq.n	80040f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	0151      	lsls	r1, r2, #5
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	440a      	add	r2, r1
 80040ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	0151      	lsls	r1, r2, #5
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	440a      	add	r2, r1
 800410e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004112:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	e02b      	b.n	8004172 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	db12      	blt.n	8004152 <USB_EPSetStall+0xae>
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00f      	beq.n	8004152 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	0151      	lsls	r1, r2, #5
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	440a      	add	r2, r1
 8004148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800414c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004150:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	0151      	lsls	r1, r2, #5
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	440a      	add	r2, r1
 8004168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800416c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004170:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	785b      	ldrb	r3, [r3, #1]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d128      	bne.n	80041ee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	0151      	lsls	r1, r2, #5
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	440a      	add	r2, r1
 80041b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	791b      	ldrb	r3, [r3, #4]
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d003      	beq.n	80041cc <USB_EPClearStall+0x4c>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	791b      	ldrb	r3, [r3, #4]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d138      	bne.n	800423e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	0151      	lsls	r1, r2, #5
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	440a      	add	r2, r1
 80041e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	e027      	b.n	800423e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	0151      	lsls	r1, r2, #5
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	440a      	add	r2, r1
 8004204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004208:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800420c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	791b      	ldrb	r3, [r3, #4]
 8004212:	2b03      	cmp	r3, #3
 8004214:	d003      	beq.n	800421e <USB_EPClearStall+0x9e>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	791b      	ldrb	r3, [r3, #4]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d10f      	bne.n	800423e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	0151      	lsls	r1, r2, #5
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	440a      	add	r2, r1
 8004234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800426a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800426e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004280:	68f9      	ldr	r1, [r7, #12]
 8004282:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004286:	4313      	orrs	r3, r2
 8004288:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80042b2:	f023 0303 	bic.w	r3, r3, #3
 80042b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042c6:	f023 0302 	bic.w	r3, r3, #2
 80042ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80042da:	b480      	push	{r7}
 80042dc:	b085      	sub	sp, #20
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80042f4:	f023 0303 	bic.w	r3, r3, #3
 80042f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004308:	f043 0302 	orr.w	r3, r3, #2
 800430c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4013      	ands	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004334:	68fb      	ldr	r3, [r7, #12]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004342:	b480      	push	{r7}
 8004344:	b085      	sub	sp, #20
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	4013      	ands	r3, r2
 8004364:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	0c1b      	lsrs	r3, r3, #16
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004376:	b480      	push	{r7}
 8004378:	b085      	sub	sp, #20
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	4013      	ands	r3, r2
 8004398:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	b29b      	uxth	r3, r3
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b085      	sub	sp, #20
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	460b      	mov	r3, r1
 80043b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80043ba:	78fb      	ldrb	r3, [r7, #3]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	4013      	ands	r3, r2
 80043d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80043d8:	68bb      	ldr	r3, [r7, #8]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b087      	sub	sp, #28
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	460b      	mov	r3, r1
 80043f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004408:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	fa22 f303 	lsr.w	r3, r2, r3
 8004416:	01db      	lsls	r3, r3, #7
 8004418:	b2db      	uxtb	r3, r3
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	4413      	add	r3, r2
 8004428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4013      	ands	r3, r2
 8004432:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004434:	68bb      	ldr	r3, [r7, #8]
}
 8004436:	4618      	mov	r0, r3
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f003 0301 	and.w	r3, r3, #1
}
 8004452:	4618      	mov	r0, r3
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800445e:	b480      	push	{r7}
 8004460:	b085      	sub	sp, #20
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004478:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800447c:	f023 0307 	bic.w	r3, r3, #7
 8004480:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004494:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	460b      	mov	r3, r1
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	333c      	adds	r3, #60	; 0x3c
 80044ba:	3304      	adds	r3, #4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	4a26      	ldr	r2, [pc, #152]	; (800455c <USB_EP0_OutStart+0xb8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d90a      	bls.n	80044de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044d8:	d101      	bne.n	80044de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	e037      	b.n	800454e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e4:	461a      	mov	r2, r3
 80044e6:	2300      	movs	r3, #0
 80044e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800450c:	f043 0318 	orr.w	r3, r3, #24
 8004510:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004520:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004524:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004526:	7afb      	ldrb	r3, [r7, #11]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d10f      	bne.n	800454c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004532:	461a      	mov	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004546:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800454a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	4f54300a 	.word	0x4f54300a

08004560 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	3301      	adds	r3, #1
 8004570:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <USB_CoreReset+0x64>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d901      	bls.n	800457e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e01b      	b.n	80045b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	daf2      	bge.n	800456c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3301      	adds	r3, #1
 800459a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a09      	ldr	r2, [pc, #36]	; (80045c4 <USB_CoreReset+0x64>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d901      	bls.n	80045a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e006      	b.n	80045b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d0f0      	beq.n	8004596 <USB_CoreReset+0x36>

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	00030d40 	.word	0x00030d40

080045c8 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80045d4:	2054      	movs	r0, #84	; 0x54
 80045d6:	f002 fafd 	bl	8006bd4 <USBD_static_malloc>
 80045da:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d109      	bne.n	80045f6 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	32b0      	adds	r2, #176	; 0xb0
 80045ec:	2100      	movs	r1, #0
 80045ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80045f2:	2302      	movs	r3, #2
 80045f4:	e08b      	b.n	800470e <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	32b0      	adds	r2, #176	; 0xb0
 8004600:	68f9      	ldr	r1, [r7, #12]
 8004602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	32b0      	adds	r2, #176	; 0xb0
 8004610:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	7c1b      	ldrb	r3, [r3, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d11b      	bne.n	800465a <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004622:	4b3d      	ldr	r3, [pc, #244]	; (8004718 <USBD_CUSTOM_HID_Init+0x150>)
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	f003 020f 	and.w	r2, r3, #15
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	3326      	adds	r3, #38	; 0x26
 8004638:	2205      	movs	r2, #5
 800463a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800463c:	4b37      	ldr	r3, [pc, #220]	; (800471c <USBD_CUSTOM_HID_Init+0x154>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	f003 020f 	and.w	r2, r3, #15
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8004654:	2205      	movs	r2, #5
 8004656:	801a      	strh	r2, [r3, #0]
 8004658:	e01a      	b.n	8004690 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800465a:	4b2f      	ldr	r3, [pc, #188]	; (8004718 <USBD_CUSTOM_HID_Init+0x150>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	f003 020f 	and.w	r2, r3, #15
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	3326      	adds	r3, #38	; 0x26
 8004670:	2208      	movs	r2, #8
 8004672:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004674:	4b29      	ldr	r3, [pc, #164]	; (800471c <USBD_CUSTOM_HID_Init+0x154>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	f003 020f 	and.w	r2, r3, #15
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800468c:	2208      	movs	r2, #8
 800468e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8004690:	4b21      	ldr	r3, [pc, #132]	; (8004718 <USBD_CUSTOM_HID_Init+0x150>)
 8004692:	7819      	ldrb	r1, [r3, #0]
 8004694:	2302      	movs	r3, #2
 8004696:	2203      	movs	r2, #3
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f002 f98a 	bl	80069b2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800469e:	4b1e      	ldr	r3, [pc, #120]	; (8004718 <USBD_CUSTOM_HID_Init+0x150>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	f003 020f 	and.w	r2, r3, #15
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	3324      	adds	r3, #36	; 0x24
 80046b4:	2201      	movs	r2, #1
 80046b6:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80046b8:	4b18      	ldr	r3, [pc, #96]	; (800471c <USBD_CUSTOM_HID_Init+0x154>)
 80046ba:	7819      	ldrb	r1, [r3, #0]
 80046bc:	2302      	movs	r3, #2
 80046be:	2203      	movs	r2, #3
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f002 f976 	bl	80069b2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80046c6:	4b15      	ldr	r3, [pc, #84]	; (800471c <USBD_CUSTOM_HID_Init+0x154>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	f003 020f 	and.w	r2, r3, #15
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80046de:	2201      	movs	r2, #1
 80046e0:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	33b0      	adds	r3, #176	; 0xb0
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80046fe:	4b07      	ldr	r3, [pc, #28]	; (800471c <USBD_CUSTOM_HID_Init+0x154>)
 8004700:	7819      	ldrb	r1, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	2340      	movs	r3, #64	; 0x40
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f002 fa42 	bl	8006b90 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000086 	.word	0x20000086
 800471c:	20000087 	.word	0x20000087

08004720 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800472c:	4b37      	ldr	r3, [pc, #220]	; (800480c <USBD_CUSTOM_HID_DeInit+0xec>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	4619      	mov	r1, r3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f002 f963 	bl	80069fe <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8004738:	4b34      	ldr	r3, [pc, #208]	; (800480c <USBD_CUSTOM_HID_DeInit+0xec>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	f003 020f 	and.w	r2, r3, #15
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	3324      	adds	r3, #36	; 0x24
 800474e:	2200      	movs	r2, #0
 8004750:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8004752:	4b2e      	ldr	r3, [pc, #184]	; (800480c <USBD_CUSTOM_HID_DeInit+0xec>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	f003 020f 	and.w	r2, r3, #15
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	3326      	adds	r3, #38	; 0x26
 8004768:	2200      	movs	r2, #0
 800476a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800476c:	4b28      	ldr	r3, [pc, #160]	; (8004810 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	4619      	mov	r1, r3
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f002 f943 	bl	80069fe <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8004778:	4b25      	ldr	r3, [pc, #148]	; (8004810 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	f003 020f 	and.w	r2, r3, #15
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	440b      	add	r3, r1
 800478c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004790:	2200      	movs	r2, #0
 8004792:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8004794:	4b1e      	ldr	r3, [pc, #120]	; (8004810 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	f003 020f 	and.w	r2, r3, #15
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80047ac:	2200      	movs	r2, #0
 80047ae:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	32b0      	adds	r2, #176	; 0xb0
 80047ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01f      	beq.n	8004802 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	33b0      	adds	r3, #176	; 0xb0
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	32b0      	adds	r2, #176	; 0xb0
 80047e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f002 fa03 	bl	8006bf0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	32b0      	adds	r2, #176	; 0xb0
 80047f4:	2100      	movs	r1, #0
 80047f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20000086 	.word	0x20000086
 8004810:	20000087 	.word	0x20000087

08004814 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	32b0      	adds	r2, #176	; 0xb0
 8004828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800482c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8004832:	2300      	movs	r3, #0
 8004834:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8004844:	2303      	movs	r3, #3
 8004846:	e0f8      	b.n	8004a3a <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004850:	2b00      	cmp	r3, #0
 8004852:	d056      	beq.n	8004902 <USBD_CUSTOM_HID_Setup+0xee>
 8004854:	2b20      	cmp	r3, #32
 8004856:	f040 80e8 	bne.w	8004a2a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	785b      	ldrb	r3, [r3, #1]
 800485e:	3b02      	subs	r3, #2
 8004860:	2b09      	cmp	r3, #9
 8004862:	d846      	bhi.n	80048f2 <USBD_CUSTOM_HID_Setup+0xde>
 8004864:	a201      	add	r2, pc, #4	; (adr r2, 800486c <USBD_CUSTOM_HID_Setup+0x58>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	080048c5 	.word	0x080048c5
 8004870:	080048a3 	.word	0x080048a3
 8004874:	080048f3 	.word	0x080048f3
 8004878:	080048f3 	.word	0x080048f3
 800487c:	080048f3 	.word	0x080048f3
 8004880:	080048f3 	.word	0x080048f3
 8004884:	080048f3 	.word	0x080048f3
 8004888:	080048d5 	.word	0x080048d5
 800488c:	080048b3 	.word	0x080048b3
 8004890:	08004895 	.word	0x08004895
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	885b      	ldrh	r3, [r3, #2]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 80048a0:	e02e      	b.n	8004900 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	3340      	adds	r3, #64	; 0x40
 80048a6:	2201      	movs	r2, #1
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f001 fcce 	bl	800624c <USBD_CtlSendData>
          break;
 80048b0:	e026      	b.n	8004900 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	885b      	ldrh	r3, [r3, #2]
 80048b6:	0a1b      	lsrs	r3, r3, #8
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 80048c2:	e01d      	b.n	8004900 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	3344      	adds	r3, #68	; 0x44
 80048c8:	2201      	movs	r2, #1
 80048ca:	4619      	mov	r1, r3
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f001 fcbd 	bl	800624c <USBD_CtlSendData>
          break;
 80048d2:	e015      	b.n	8004900 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2201      	movs	r2, #1
 80048d8:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80048da:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	88db      	ldrh	r3, [r3, #6]
 80048e0:	2b40      	cmp	r3, #64	; 0x40
 80048e2:	bf28      	it	cs
 80048e4:	2340      	movcs	r3, #64	; 0x40
 80048e6:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80048e8:	461a      	mov	r2, r3
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f001 fcda 	bl	80062a4 <USBD_CtlPrepareRx>
          break;
 80048f0:	e006      	b.n	8004900 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 80048f2:	6839      	ldr	r1, [r7, #0]
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f001 fc38 	bl	800616a <USBD_CtlError>
          ret = USBD_FAIL;
 80048fa:	2303      	movs	r3, #3
 80048fc:	75fb      	strb	r3, [r7, #23]
          break;
 80048fe:	bf00      	nop
      }
      break;
 8004900:	e09a      	b.n	8004a38 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	785b      	ldrb	r3, [r3, #1]
 8004906:	2b0b      	cmp	r3, #11
 8004908:	f200 8086 	bhi.w	8004a18 <USBD_CUSTOM_HID_Setup+0x204>
 800490c:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <USBD_CUSTOM_HID_Setup+0x100>)
 800490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004912:	bf00      	nop
 8004914:	08004945 	.word	0x08004945
 8004918:	08004a27 	.word	0x08004a27
 800491c:	08004a19 	.word	0x08004a19
 8004920:	08004a19 	.word	0x08004a19
 8004924:	08004a19 	.word	0x08004a19
 8004928:	08004a19 	.word	0x08004a19
 800492c:	0800496f 	.word	0x0800496f
 8004930:	08004a19 	.word	0x08004a19
 8004934:	08004a19 	.word	0x08004a19
 8004938:	08004a19 	.word	0x08004a19
 800493c:	080049c7 	.word	0x080049c7
 8004940:	080049f1 	.word	0x080049f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b03      	cmp	r3, #3
 800494e:	d107      	bne.n	8004960 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004950:	f107 030e 	add.w	r3, r7, #14
 8004954:	2202      	movs	r2, #2
 8004956:	4619      	mov	r1, r3
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f001 fc77 	bl	800624c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800495e:	e063      	b.n	8004a28 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f001 fc01 	bl	800616a <USBD_CtlError>
            ret = USBD_FAIL;
 8004968:	2303      	movs	r3, #3
 800496a:	75fb      	strb	r3, [r7, #23]
          break;
 800496c:	e05c      	b.n	8004a28 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	885b      	ldrh	r3, [r3, #2]
 8004972:	0a1b      	lsrs	r3, r3, #8
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b22      	cmp	r3, #34	; 0x22
 8004978:	d110      	bne.n	800499c <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	88db      	ldrh	r3, [r3, #6]
 800497e:	2b1c      	cmp	r3, #28
 8004980:	bf28      	it	cs
 8004982:	231c      	movcs	r3, #28
 8004984:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	33b0      	adds	r3, #176	; 0xb0
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	61bb      	str	r3, [r7, #24]
 800499a:	e00d      	b.n	80049b8 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	885b      	ldrh	r3, [r3, #2]
 80049a0:	0a1b      	lsrs	r3, r3, #8
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b21      	cmp	r3, #33	; 0x21
 80049a6:	d107      	bne.n	80049b8 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80049a8:	4b26      	ldr	r3, [pc, #152]	; (8004a44 <USBD_CUSTOM_HID_Setup+0x230>)
 80049aa:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	88db      	ldrh	r3, [r3, #6]
 80049b0:	2b09      	cmp	r3, #9
 80049b2:	bf28      	it	cs
 80049b4:	2309      	movcs	r3, #9
 80049b6:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80049b8:	8bfb      	ldrh	r3, [r7, #30]
 80049ba:	461a      	mov	r2, r3
 80049bc:	69b9      	ldr	r1, [r7, #24]
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f001 fc44 	bl	800624c <USBD_CtlSendData>
          break;
 80049c4:	e030      	b.n	8004a28 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d107      	bne.n	80049e2 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	3348      	adds	r3, #72	; 0x48
 80049d6:	2201      	movs	r2, #1
 80049d8:	4619      	mov	r1, r3
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f001 fc36 	bl	800624c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80049e0:	e022      	b.n	8004a28 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80049e2:	6839      	ldr	r1, [r7, #0]
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f001 fbc0 	bl	800616a <USBD_CtlError>
            ret = USBD_FAIL;
 80049ea:	2303      	movs	r3, #3
 80049ec:	75fb      	strb	r3, [r7, #23]
          break;
 80049ee:	e01b      	b.n	8004a28 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d106      	bne.n	8004a0a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	885b      	ldrh	r3, [r3, #2]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	461a      	mov	r2, r3
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a08:	e00e      	b.n	8004a28 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8004a0a:	6839      	ldr	r1, [r7, #0]
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f001 fbac 	bl	800616a <USBD_CtlError>
            ret = USBD_FAIL;
 8004a12:	2303      	movs	r3, #3
 8004a14:	75fb      	strb	r3, [r7, #23]
          break;
 8004a16:	e007      	b.n	8004a28 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004a18:	6839      	ldr	r1, [r7, #0]
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f001 fba5 	bl	800616a <USBD_CtlError>
          ret = USBD_FAIL;
 8004a20:	2303      	movs	r3, #3
 8004a22:	75fb      	strb	r3, [r7, #23]
          break;
 8004a24:	e000      	b.n	8004a28 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8004a26:	bf00      	nop
      }
      break;
 8004a28:	e006      	b.n	8004a38 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8004a2a:	6839      	ldr	r1, [r7, #0]
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f001 fb9c 	bl	800616a <USBD_CtlError>
      ret = USBD_FAIL;
 8004a32:	2303      	movs	r3, #3
 8004a34:	75fb      	strb	r3, [r7, #23]
      break;
 8004a36:	bf00      	nop
  }
  return (uint8_t)ret;
 8004a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3720      	adds	r7, #32
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20000070 	.word	0x20000070

08004a48 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	4613      	mov	r3, r2
 8004a54:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	32b0      	adds	r2, #176	; 0xb0
 8004a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e021      	b.n	8004ab0 <USBD_CUSTOM_HID_SendReport+0x68>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	32b0      	adds	r2, #176	; 0xb0
 8004a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a7a:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d112      	bne.n	8004aae <USBD_CUSTOM_HID_SendReport+0x66>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10b      	bne.n	8004aaa <USBD_CUSTOM_HID_SendReport+0x62>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8004a9a:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <USBD_CUSTOM_HID_SendReport+0x70>)
 8004a9c:	7819      	ldrb	r1, [r3, #0]
 8004a9e:	88fb      	ldrh	r3, [r7, #6]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f002 f853 	bl	8006b4e <USBD_LL_Transmit>
 8004aa8:	e001      	b.n	8004aae <USBD_CUSTOM_HID_SendReport+0x66>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <USBD_CUSTOM_HID_SendReport+0x68>
    }
  }
  return (uint8_t)USBD_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20000086 	.word	0x20000086

08004abc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8004ac4:	2181      	movs	r1, #129	; 0x81
 8004ac6:	4815      	ldr	r0, [pc, #84]	; (8004b1c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8004ac8:	f000 fd17 	bl	80054fa <USBD_GetEpDesc>
 8004acc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8004ace:	2101      	movs	r1, #1
 8004ad0:	4812      	ldr	r0, [pc, #72]	; (8004b1c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8004ad2:	f000 fd12 	bl	80054fa <USBD_GetEpDesc>
 8004ad6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f042 0202 	orr.w	r2, r2, #2
 8004ae6:	711a      	strb	r2, [r3, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2208      	movs	r2, #8
 8004af0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d009      	beq.n	8004b0c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f042 0202 	orr.w	r2, r2, #2
 8004b00:	711a      	strb	r2, [r3, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2208      	movs	r2, #8
 8004b0a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2229      	movs	r2, #41	; 0x29
 8004b10:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8004b12:	4b02      	ldr	r3, [pc, #8]	; (8004b1c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20000044 	.word	0x20000044

08004b20 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8004b28:	2181      	movs	r1, #129	; 0x81
 8004b2a:	4815      	ldr	r0, [pc, #84]	; (8004b80 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8004b2c:	f000 fce5 	bl	80054fa <USBD_GetEpDesc>
 8004b30:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8004b32:	2101      	movs	r1, #1
 8004b34:	4812      	ldr	r0, [pc, #72]	; (8004b80 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8004b36:	f000 fce0 	bl	80054fa <USBD_GetEpDesc>
 8004b3a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f042 0202 	orr.w	r2, r2, #2
 8004b4a:	711a      	strb	r2, [r3, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2205      	movs	r2, #5
 8004b54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d009      	beq.n	8004b70 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f042 0202 	orr.w	r2, r2, #2
 8004b64:	711a      	strb	r2, [r3, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2205      	movs	r2, #5
 8004b6e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2229      	movs	r2, #41	; 0x29
 8004b74:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8004b76:	4b02      	ldr	r3, [pc, #8]	; (8004b80 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000044 	.word	0x20000044

08004b84 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8004b8c:	2181      	movs	r1, #129	; 0x81
 8004b8e:	4815      	ldr	r0, [pc, #84]	; (8004be4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8004b90:	f000 fcb3 	bl	80054fa <USBD_GetEpDesc>
 8004b94:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8004b96:	2101      	movs	r1, #1
 8004b98:	4812      	ldr	r0, [pc, #72]	; (8004be4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8004b9a:	f000 fcae 	bl	80054fa <USBD_GetEpDesc>
 8004b9e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f042 0202 	orr.w	r2, r2, #2
 8004bae:	711a      	strb	r2, [r3, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2208      	movs	r2, #8
 8004bb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d009      	beq.n	8004bd4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f042 0202 	orr.w	r2, r2, #2
 8004bc8:	711a      	strb	r2, [r3, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2229      	movs	r2, #41	; 0x29
 8004bd8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8004bda:	4b02      	ldr	r3, [pc, #8]	; (8004be4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	20000044 	.word	0x20000044

08004be8 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	32b0      	adds	r2, #176	; 0xb0
 8004bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	32b0      	adds	r2, #176	; 0xb0
 8004c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e017      	b.n	8004c68 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	32b0      	adds	r2, #176	; 0xb0
 8004c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	33b0      	adds	r3, #176	; 0xb0
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	7810      	ldrb	r0, [r2, #0]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	7852      	ldrb	r2, [r2, #1]
 8004c62:	4611      	mov	r1, r2
 8004c64:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	32b0      	adds	r2, #176	; 0xb0
 8004c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e00f      	b.n	8004cae <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	32b0      	adds	r2, #176	; 0xb0
 8004c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c9c:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8004c9e:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8004ca0:	7819      	ldrb	r1, [r3, #0]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	2340      	movs	r3, #64	; 0x40
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f001 ff72 	bl	8006b90 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000087 	.word	0x20000087

08004cbc <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	32b0      	adds	r2, #176	; 0xb0
 8004cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cd2:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e016      	b.n	8004d0c <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d111      	bne.n	8004d0a <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	33b0      	adds	r3, #176	; 0xb0
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	7810      	ldrb	r0, [r2, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	7852      	ldrb	r2, [r2, #1]
 8004d00:	4611      	mov	r1, r2
 8004d02:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	220a      	movs	r2, #10
 8004d20:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8004d22:	4b03      	ldr	r3, [pc, #12]	; (8004d30 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	2000007c 	.word	0x2000007c

08004d34 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e009      	b.n	8004d5c <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	33b0      	adds	r3, #176	; 0xb0
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	4613      	mov	r3, r2
 8004d74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e01f      	b.n	8004dc0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	79fa      	ldrb	r2, [r7, #7]
 8004db2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f001 fd95 	bl	80068e4 <USBD_LL_Init>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e025      	b.n	8004e2c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	32ae      	adds	r2, #174	; 0xae
 8004df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00f      	beq.n	8004e1c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	32ae      	adds	r2, #174	; 0xae
 8004e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	f107 020e 	add.w	r2, r7, #14
 8004e10:	4610      	mov	r0, r2
 8004e12:	4798      	blx	r3
 8004e14:	4602      	mov	r2, r0
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f001 fd9d 	bl	800697c <USBD_LL_Start>
 8004e42:	4603      	mov	r3, r0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e54:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d009      	beq.n	8004e90 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	78fa      	ldrb	r2, [r7, #3]
 8004e86:	4611      	mov	r1, r2
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	4798      	blx	r3
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	4798      	blx	r3
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004ede:	6839      	ldr	r1, [r7, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f001 f908 	bl	80060f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d01a      	beq.n	8004f40 <USBD_LL_SetupStage+0x72>
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d822      	bhi.n	8004f54 <USBD_LL_SetupStage+0x86>
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <USBD_LL_SetupStage+0x4a>
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d00a      	beq.n	8004f2c <USBD_LL_SetupStage+0x5e>
 8004f16:	e01d      	b.n	8004f54 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fb5f 	bl	80055e4 <USBD_StdDevReq>
 8004f26:	4603      	mov	r3, r0
 8004f28:	73fb      	strb	r3, [r7, #15]
      break;
 8004f2a:	e020      	b.n	8004f6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f32:	4619      	mov	r1, r3
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fbc7 	bl	80056c8 <USBD_StdItfReq>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f3e:	e016      	b.n	8004f6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f46:	4619      	mov	r1, r3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fc29 	bl	80057a0 <USBD_StdEPReq>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	73fb      	strb	r3, [r7, #15]
      break;
 8004f52:	e00c      	b.n	8004f6e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004f5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	4619      	mov	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f001 fd6a 	bl	8006a3c <USBD_LL_StallEP>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f6c:	bf00      	nop
  }

  return ret;
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	460b      	mov	r3, r1
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004f8a:	7afb      	ldrb	r3, [r7, #11]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d16e      	bne.n	800506e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004f96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	f040 8098 	bne.w	80050d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d913      	bls.n	8004fd8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	1ad2      	subs	r2, r2, r3
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	bf28      	it	cs
 8004fca:	4613      	movcs	r3, r2
 8004fcc:	461a      	mov	r2, r3
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f001 f984 	bl	80062de <USBD_CtlContinueRx>
 8004fd6:	e07d      	b.n	80050d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d014      	beq.n	8005010 <USBD_LL_DataOutStage+0x98>
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d81d      	bhi.n	8005026 <USBD_LL_DataOutStage+0xae>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <USBD_LL_DataOutStage+0x7c>
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d003      	beq.n	8004ffa <USBD_LL_DataOutStage+0x82>
 8004ff2:	e018      	b.n	8005026 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	75bb      	strb	r3, [r7, #22]
            break;
 8004ff8:	e018      	b.n	800502c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005000:	b2db      	uxtb	r3, r3
 8005002:	4619      	mov	r1, r3
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 fa5e 	bl	80054c6 <USBD_CoreFindIF>
 800500a:	4603      	mov	r3, r0
 800500c:	75bb      	strb	r3, [r7, #22]
            break;
 800500e:	e00d      	b.n	800502c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005016:	b2db      	uxtb	r3, r3
 8005018:	4619      	mov	r1, r3
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 fa60 	bl	80054e0 <USBD_CoreFindEP>
 8005020:	4603      	mov	r3, r0
 8005022:	75bb      	strb	r3, [r7, #22]
            break;
 8005024:	e002      	b.n	800502c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	75bb      	strb	r3, [r7, #22]
            break;
 800502a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800502c:	7dbb      	ldrb	r3, [r7, #22]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d119      	bne.n	8005066 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b03      	cmp	r3, #3
 800503c:	d113      	bne.n	8005066 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800503e:	7dba      	ldrb	r2, [r7, #22]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	32ae      	adds	r2, #174	; 0xae
 8005044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00b      	beq.n	8005066 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800504e:	7dba      	ldrb	r2, [r7, #22]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005056:	7dba      	ldrb	r2, [r7, #22]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	32ae      	adds	r2, #174	; 0xae
 800505c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f001 f94a 	bl	8006300 <USBD_CtlSendStatus>
 800506c:	e032      	b.n	80050d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800506e:	7afb      	ldrb	r3, [r7, #11]
 8005070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005074:	b2db      	uxtb	r3, r3
 8005076:	4619      	mov	r1, r3
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 fa31 	bl	80054e0 <USBD_CoreFindEP>
 800507e:	4603      	mov	r3, r0
 8005080:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005082:	7dbb      	ldrb	r3, [r7, #22]
 8005084:	2bff      	cmp	r3, #255	; 0xff
 8005086:	d025      	beq.n	80050d4 <USBD_LL_DataOutStage+0x15c>
 8005088:	7dbb      	ldrb	r3, [r7, #22]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d122      	bne.n	80050d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b03      	cmp	r3, #3
 8005098:	d117      	bne.n	80050ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800509a:	7dba      	ldrb	r2, [r7, #22]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	32ae      	adds	r2, #174	; 0xae
 80050a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00f      	beq.n	80050ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80050aa:	7dba      	ldrb	r2, [r7, #22]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80050b2:	7dba      	ldrb	r2, [r7, #22]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	32ae      	adds	r2, #174	; 0xae
 80050b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	7afa      	ldrb	r2, [r7, #11]
 80050c0:	4611      	mov	r1, r2
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	4798      	blx	r3
 80050c6:	4603      	mov	r3, r0
 80050c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80050ca:	7dfb      	ldrb	r3, [r7, #23]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80050d0:	7dfb      	ldrb	r3, [r7, #23]
 80050d2:	e000      	b.n	80050d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b086      	sub	sp, #24
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	460b      	mov	r3, r1
 80050e8:	607a      	str	r2, [r7, #4]
 80050ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80050ec:	7afb      	ldrb	r3, [r7, #11]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d16f      	bne.n	80051d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3314      	adds	r3, #20
 80050f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d15a      	bne.n	80051b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	429a      	cmp	r2, r3
 800510c:	d914      	bls.n	8005138 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	1ad2      	subs	r2, r2, r3
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	461a      	mov	r2, r3
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f001 f8ac 	bl	8006282 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800512a:	2300      	movs	r3, #0
 800512c:	2200      	movs	r2, #0
 800512e:	2100      	movs	r1, #0
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f001 fd2d 	bl	8006b90 <USBD_LL_PrepareReceive>
 8005136:	e03f      	b.n	80051b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	429a      	cmp	r2, r3
 8005142:	d11c      	bne.n	800517e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800514c:	429a      	cmp	r2, r3
 800514e:	d316      	bcc.n	800517e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800515a:	429a      	cmp	r2, r3
 800515c:	d20f      	bcs.n	800517e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800515e:	2200      	movs	r2, #0
 8005160:	2100      	movs	r1, #0
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f001 f88d 	bl	8006282 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005170:	2300      	movs	r3, #0
 8005172:	2200      	movs	r2, #0
 8005174:	2100      	movs	r1, #0
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f001 fd0a 	bl	8006b90 <USBD_LL_PrepareReceive>
 800517c:	e01c      	b.n	80051b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b03      	cmp	r3, #3
 8005188:	d10f      	bne.n	80051aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d009      	beq.n	80051aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80051aa:	2180      	movs	r1, #128	; 0x80
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f001 fc45 	bl	8006a3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f001 f8b7 	bl	8006326 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d03a      	beq.n	8005238 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f7ff fe42 	bl	8004e4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80051d0:	e032      	b.n	8005238 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80051d2:	7afb      	ldrb	r3, [r7, #11]
 80051d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	4619      	mov	r1, r3
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f97f 	bl	80054e0 <USBD_CoreFindEP>
 80051e2:	4603      	mov	r3, r0
 80051e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051e6:	7dfb      	ldrb	r3, [r7, #23]
 80051e8:	2bff      	cmp	r3, #255	; 0xff
 80051ea:	d025      	beq.n	8005238 <USBD_LL_DataInStage+0x15a>
 80051ec:	7dfb      	ldrb	r3, [r7, #23]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d122      	bne.n	8005238 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d11c      	bne.n	8005238 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80051fe:	7dfa      	ldrb	r2, [r7, #23]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	32ae      	adds	r2, #174	; 0xae
 8005204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d014      	beq.n	8005238 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800520e:	7dfa      	ldrb	r2, [r7, #23]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005216:	7dfa      	ldrb	r2, [r7, #23]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	32ae      	adds	r2, #174	; 0xae
 800521c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	7afa      	ldrb	r2, [r7, #11]
 8005224:	4611      	mov	r1, r2
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	4798      	blx	r3
 800522a:	4603      	mov	r3, r0
 800522c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800522e:	7dbb      	ldrb	r3, [r7, #22]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005234:	7dbb      	ldrb	r3, [r7, #22]
 8005236:	e000      	b.n	800523a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d014      	beq.n	80052a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00e      	beq.n	80052a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6852      	ldr	r2, [r2, #4]
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	4611      	mov	r1, r2
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	4798      	blx	r3
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80052a4:	2303      	movs	r3, #3
 80052a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052a8:	2340      	movs	r3, #64	; 0x40
 80052aa:	2200      	movs	r2, #0
 80052ac:	2100      	movs	r1, #0
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f001 fb7f 	bl	80069b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2240      	movs	r2, #64	; 0x40
 80052c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052c4:	2340      	movs	r3, #64	; 0x40
 80052c6:	2200      	movs	r2, #0
 80052c8:	2180      	movs	r1, #128	; 0x80
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f001 fb71 	bl	80069b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2240      	movs	r2, #64	; 0x40
 80052da:	621a      	str	r2, [r3, #32]

  return ret;
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	460b      	mov	r3, r1
 80052f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	78fa      	ldrb	r2, [r7, #3]
 80052f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005314:	b2da      	uxtb	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2204      	movs	r2, #4
 8005320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b04      	cmp	r3, #4
 8005344:	d106      	bne.n	8005354 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800534c:	b2da      	uxtb	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b03      	cmp	r3, #3
 8005374:	d110      	bne.n	8005398 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00b      	beq.n	8005398 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b082      	sub	sp, #8
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	460b      	mov	r3, r1
 80053ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	32ae      	adds	r2, #174	; 0xae
 80053b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e01c      	b.n	80053fe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d115      	bne.n	80053fc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	32ae      	adds	r2, #174	; 0xae
 80053da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00b      	beq.n	80053fc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	32ae      	adds	r2, #174	; 0xae
 80053ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	78fa      	ldrb	r2, [r7, #3]
 80053f6:	4611      	mov	r1, r2
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b082      	sub	sp, #8
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	460b      	mov	r3, r1
 8005410:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	32ae      	adds	r2, #174	; 0xae
 800541c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005424:	2303      	movs	r3, #3
 8005426:	e01c      	b.n	8005462 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b03      	cmp	r3, #3
 8005432:	d115      	bne.n	8005460 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	32ae      	adds	r2, #174	; 0xae
 800543e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00b      	beq.n	8005460 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	32ae      	adds	r2, #174	; 0xae
 8005452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	78fa      	ldrb	r2, [r7, #3]
 800545a:	4611      	mov	r1, r2
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00e      	beq.n	80054bc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6852      	ldr	r2, [r2, #4]
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	4611      	mov	r1, r2
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	4798      	blx	r3
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80054b8:	2303      	movs	r3, #3
 80054ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	460b      	mov	r3, r1
 80054d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80054d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80054ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b086      	sub	sp, #24
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	460b      	mov	r3, r1
 8005504:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800550e:	2300      	movs	r3, #0
 8005510:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	885b      	ldrh	r3, [r3, #2]
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	b29b      	uxth	r3, r3
 800551e:	429a      	cmp	r2, r3
 8005520:	d920      	bls.n	8005564 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	b29b      	uxth	r3, r3
 8005528:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800552a:	e013      	b.n	8005554 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800552c:	f107 030a 	add.w	r3, r7, #10
 8005530:	4619      	mov	r1, r3
 8005532:	6978      	ldr	r0, [r7, #20]
 8005534:	f000 f81b 	bl	800556e <USBD_GetNextDesc>
 8005538:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	785b      	ldrb	r3, [r3, #1]
 800553e:	2b05      	cmp	r3, #5
 8005540:	d108      	bne.n	8005554 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	789b      	ldrb	r3, [r3, #2]
 800554a:	78fa      	ldrb	r2, [r7, #3]
 800554c:	429a      	cmp	r2, r3
 800554e:	d008      	beq.n	8005562 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005550:	2300      	movs	r3, #0
 8005552:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	885b      	ldrh	r3, [r3, #2]
 8005558:	b29a      	uxth	r2, r3
 800555a:	897b      	ldrh	r3, [r7, #10]
 800555c:	429a      	cmp	r2, r3
 800555e:	d8e5      	bhi.n	800552c <USBD_GetEpDesc+0x32>
 8005560:	e000      	b.n	8005564 <USBD_GetEpDesc+0x6a>
          break;
 8005562:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005564:	693b      	ldr	r3, [r7, #16]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800556e:	b480      	push	{r7}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	881a      	ldrh	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	b29b      	uxth	r3, r3
 8005586:	4413      	add	r3, r2
 8005588:	b29a      	uxth	r2, r3
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4413      	add	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800559a:	68fb      	ldr	r3, [r7, #12]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	3301      	adds	r3, #1
 80055be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80055c6:	8a3b      	ldrh	r3, [r7, #16]
 80055c8:	021b      	lsls	r3, r3, #8
 80055ca:	b21a      	sxth	r2, r3
 80055cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	b21b      	sxth	r3, r3
 80055d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80055d6:	89fb      	ldrh	r3, [r7, #14]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	371c      	adds	r7, #28
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	d005      	beq.n	800560a <USBD_StdDevReq+0x26>
 80055fe:	2b40      	cmp	r3, #64	; 0x40
 8005600:	d857      	bhi.n	80056b2 <USBD_StdDevReq+0xce>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00f      	beq.n	8005626 <USBD_StdDevReq+0x42>
 8005606:	2b20      	cmp	r3, #32
 8005608:	d153      	bne.n	80056b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	32ae      	adds	r2, #174	; 0xae
 8005614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	6839      	ldr	r1, [r7, #0]
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4798      	blx	r3
 8005620:	4603      	mov	r3, r0
 8005622:	73fb      	strb	r3, [r7, #15]
      break;
 8005624:	e04a      	b.n	80056bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	785b      	ldrb	r3, [r3, #1]
 800562a:	2b09      	cmp	r3, #9
 800562c:	d83b      	bhi.n	80056a6 <USBD_StdDevReq+0xc2>
 800562e:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <USBD_StdDevReq+0x50>)
 8005630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005634:	08005689 	.word	0x08005689
 8005638:	0800569d 	.word	0x0800569d
 800563c:	080056a7 	.word	0x080056a7
 8005640:	08005693 	.word	0x08005693
 8005644:	080056a7 	.word	0x080056a7
 8005648:	08005667 	.word	0x08005667
 800564c:	0800565d 	.word	0x0800565d
 8005650:	080056a7 	.word	0x080056a7
 8005654:	0800567f 	.word	0x0800567f
 8005658:	08005671 	.word	0x08005671
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800565c:	6839      	ldr	r1, [r7, #0]
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fa3c 	bl	8005adc <USBD_GetDescriptor>
          break;
 8005664:	e024      	b.n	80056b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005666:	6839      	ldr	r1, [r7, #0]
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fba1 	bl	8005db0 <USBD_SetAddress>
          break;
 800566e:	e01f      	b.n	80056b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005670:	6839      	ldr	r1, [r7, #0]
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fbe0 	bl	8005e38 <USBD_SetConfig>
 8005678:	4603      	mov	r3, r0
 800567a:	73fb      	strb	r3, [r7, #15]
          break;
 800567c:	e018      	b.n	80056b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800567e:	6839      	ldr	r1, [r7, #0]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fc83 	bl	8005f8c <USBD_GetConfig>
          break;
 8005686:	e013      	b.n	80056b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fcb4 	bl	8005ff8 <USBD_GetStatus>
          break;
 8005690:	e00e      	b.n	80056b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005692:	6839      	ldr	r1, [r7, #0]
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fce3 	bl	8006060 <USBD_SetFeature>
          break;
 800569a:	e009      	b.n	80056b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800569c:	6839      	ldr	r1, [r7, #0]
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fd07 	bl	80060b2 <USBD_ClrFeature>
          break;
 80056a4:	e004      	b.n	80056b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80056a6:	6839      	ldr	r1, [r7, #0]
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fd5e 	bl	800616a <USBD_CtlError>
          break;
 80056ae:	bf00      	nop
      }
      break;
 80056b0:	e004      	b.n	80056bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80056b2:	6839      	ldr	r1, [r7, #0]
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fd58 	bl	800616a <USBD_CtlError>
      break;
 80056ba:	bf00      	nop
  }

  return ret;
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop

080056c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056de:	2b40      	cmp	r3, #64	; 0x40
 80056e0:	d005      	beq.n	80056ee <USBD_StdItfReq+0x26>
 80056e2:	2b40      	cmp	r3, #64	; 0x40
 80056e4:	d852      	bhi.n	800578c <USBD_StdItfReq+0xc4>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <USBD_StdItfReq+0x26>
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d14e      	bne.n	800578c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d840      	bhi.n	800577e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	889b      	ldrh	r3, [r3, #4]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b01      	cmp	r3, #1
 8005704:	d836      	bhi.n	8005774 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	889b      	ldrh	r3, [r3, #4]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	4619      	mov	r1, r3
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7ff fed9 	bl	80054c6 <USBD_CoreFindIF>
 8005714:	4603      	mov	r3, r0
 8005716:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005718:	7bbb      	ldrb	r3, [r7, #14]
 800571a:	2bff      	cmp	r3, #255	; 0xff
 800571c:	d01d      	beq.n	800575a <USBD_StdItfReq+0x92>
 800571e:	7bbb      	ldrb	r3, [r7, #14]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d11a      	bne.n	800575a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005724:	7bba      	ldrb	r2, [r7, #14]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	32ae      	adds	r2, #174	; 0xae
 800572a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00f      	beq.n	8005754 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005734:	7bba      	ldrb	r2, [r7, #14]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800573c:	7bba      	ldrb	r2, [r7, #14]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	32ae      	adds	r2, #174	; 0xae
 8005742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	6839      	ldr	r1, [r7, #0]
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	4798      	blx	r3
 800574e:	4603      	mov	r3, r0
 8005750:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005752:	e004      	b.n	800575e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005754:	2303      	movs	r3, #3
 8005756:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005758:	e001      	b.n	800575e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800575a:	2303      	movs	r3, #3
 800575c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	88db      	ldrh	r3, [r3, #6]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d110      	bne.n	8005788 <USBD_StdItfReq+0xc0>
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10d      	bne.n	8005788 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fdc7 	bl	8006300 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005772:	e009      	b.n	8005788 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005774:	6839      	ldr	r1, [r7, #0]
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fcf7 	bl	800616a <USBD_CtlError>
          break;
 800577c:	e004      	b.n	8005788 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fcf2 	bl	800616a <USBD_CtlError>
          break;
 8005786:	e000      	b.n	800578a <USBD_StdItfReq+0xc2>
          break;
 8005788:	bf00      	nop
      }
      break;
 800578a:	e004      	b.n	8005796 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800578c:	6839      	ldr	r1, [r7, #0]
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fceb 	bl	800616a <USBD_CtlError>
      break;
 8005794:	bf00      	nop
  }

  return ret;
 8005796:	7bfb      	ldrb	r3, [r7, #15]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	889b      	ldrh	r3, [r3, #4]
 80057b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057bc:	2b40      	cmp	r3, #64	; 0x40
 80057be:	d007      	beq.n	80057d0 <USBD_StdEPReq+0x30>
 80057c0:	2b40      	cmp	r3, #64	; 0x40
 80057c2:	f200 817f 	bhi.w	8005ac4 <USBD_StdEPReq+0x324>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d02a      	beq.n	8005820 <USBD_StdEPReq+0x80>
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	f040 817a 	bne.w	8005ac4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80057d0:	7bbb      	ldrb	r3, [r7, #14]
 80057d2:	4619      	mov	r1, r3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff fe83 	bl	80054e0 <USBD_CoreFindEP>
 80057da:	4603      	mov	r3, r0
 80057dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057de:	7b7b      	ldrb	r3, [r7, #13]
 80057e0:	2bff      	cmp	r3, #255	; 0xff
 80057e2:	f000 8174 	beq.w	8005ace <USBD_StdEPReq+0x32e>
 80057e6:	7b7b      	ldrb	r3, [r7, #13]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f040 8170 	bne.w	8005ace <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80057ee:	7b7a      	ldrb	r2, [r7, #13]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80057f6:	7b7a      	ldrb	r2, [r7, #13]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	32ae      	adds	r2, #174	; 0xae
 80057fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 8163 	beq.w	8005ace <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005808:	7b7a      	ldrb	r2, [r7, #13]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	32ae      	adds	r2, #174	; 0xae
 800580e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	4798      	blx	r3
 800581a:	4603      	mov	r3, r0
 800581c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800581e:	e156      	b.n	8005ace <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	785b      	ldrb	r3, [r3, #1]
 8005824:	2b03      	cmp	r3, #3
 8005826:	d008      	beq.n	800583a <USBD_StdEPReq+0x9a>
 8005828:	2b03      	cmp	r3, #3
 800582a:	f300 8145 	bgt.w	8005ab8 <USBD_StdEPReq+0x318>
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 809b 	beq.w	800596a <USBD_StdEPReq+0x1ca>
 8005834:	2b01      	cmp	r3, #1
 8005836:	d03c      	beq.n	80058b2 <USBD_StdEPReq+0x112>
 8005838:	e13e      	b.n	8005ab8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d002      	beq.n	800584c <USBD_StdEPReq+0xac>
 8005846:	2b03      	cmp	r3, #3
 8005848:	d016      	beq.n	8005878 <USBD_StdEPReq+0xd8>
 800584a:	e02c      	b.n	80058a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800584c:	7bbb      	ldrb	r3, [r7, #14]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00d      	beq.n	800586e <USBD_StdEPReq+0xce>
 8005852:	7bbb      	ldrb	r3, [r7, #14]
 8005854:	2b80      	cmp	r3, #128	; 0x80
 8005856:	d00a      	beq.n	800586e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005858:	7bbb      	ldrb	r3, [r7, #14]
 800585a:	4619      	mov	r1, r3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f001 f8ed 	bl	8006a3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005862:	2180      	movs	r1, #128	; 0x80
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f001 f8e9 	bl	8006a3c <USBD_LL_StallEP>
 800586a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800586c:	e020      	b.n	80058b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800586e:	6839      	ldr	r1, [r7, #0]
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fc7a 	bl	800616a <USBD_CtlError>
              break;
 8005876:	e01b      	b.n	80058b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	885b      	ldrh	r3, [r3, #2]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10e      	bne.n	800589e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005880:	7bbb      	ldrb	r3, [r7, #14]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00b      	beq.n	800589e <USBD_StdEPReq+0xfe>
 8005886:	7bbb      	ldrb	r3, [r7, #14]
 8005888:	2b80      	cmp	r3, #128	; 0x80
 800588a:	d008      	beq.n	800589e <USBD_StdEPReq+0xfe>
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	88db      	ldrh	r3, [r3, #6]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d104      	bne.n	800589e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005894:	7bbb      	ldrb	r3, [r7, #14]
 8005896:	4619      	mov	r1, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f001 f8cf 	bl	8006a3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fd2e 	bl	8006300 <USBD_CtlSendStatus>

              break;
 80058a4:	e004      	b.n	80058b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80058a6:	6839      	ldr	r1, [r7, #0]
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fc5e 	bl	800616a <USBD_CtlError>
              break;
 80058ae:	bf00      	nop
          }
          break;
 80058b0:	e107      	b.n	8005ac2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d002      	beq.n	80058c4 <USBD_StdEPReq+0x124>
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d016      	beq.n	80058f0 <USBD_StdEPReq+0x150>
 80058c2:	e04b      	b.n	800595c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058c4:	7bbb      	ldrb	r3, [r7, #14]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00d      	beq.n	80058e6 <USBD_StdEPReq+0x146>
 80058ca:	7bbb      	ldrb	r3, [r7, #14]
 80058cc:	2b80      	cmp	r3, #128	; 0x80
 80058ce:	d00a      	beq.n	80058e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80058d0:	7bbb      	ldrb	r3, [r7, #14]
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f001 f8b1 	bl	8006a3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80058da:	2180      	movs	r1, #128	; 0x80
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f001 f8ad 	bl	8006a3c <USBD_LL_StallEP>
 80058e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80058e4:	e040      	b.n	8005968 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fc3e 	bl	800616a <USBD_CtlError>
              break;
 80058ee:	e03b      	b.n	8005968 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	885b      	ldrh	r3, [r3, #2]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d136      	bne.n	8005966 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80058f8:	7bbb      	ldrb	r3, [r7, #14]
 80058fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d004      	beq.n	800590c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005902:	7bbb      	ldrb	r3, [r7, #14]
 8005904:	4619      	mov	r1, r3
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f001 f8b7 	bl	8006a7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fcf7 	bl	8006300 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005912:	7bbb      	ldrb	r3, [r7, #14]
 8005914:	4619      	mov	r1, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff fde2 	bl	80054e0 <USBD_CoreFindEP>
 800591c:	4603      	mov	r3, r0
 800591e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005920:	7b7b      	ldrb	r3, [r7, #13]
 8005922:	2bff      	cmp	r3, #255	; 0xff
 8005924:	d01f      	beq.n	8005966 <USBD_StdEPReq+0x1c6>
 8005926:	7b7b      	ldrb	r3, [r7, #13]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d11c      	bne.n	8005966 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800592c:	7b7a      	ldrb	r2, [r7, #13]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005934:	7b7a      	ldrb	r2, [r7, #13]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	32ae      	adds	r2, #174	; 0xae
 800593a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d010      	beq.n	8005966 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005944:	7b7a      	ldrb	r2, [r7, #13]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	32ae      	adds	r2, #174	; 0xae
 800594a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	6839      	ldr	r1, [r7, #0]
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	4798      	blx	r3
 8005956:	4603      	mov	r3, r0
 8005958:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800595a:	e004      	b.n	8005966 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800595c:	6839      	ldr	r1, [r7, #0]
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fc03 	bl	800616a <USBD_CtlError>
              break;
 8005964:	e000      	b.n	8005968 <USBD_StdEPReq+0x1c8>
              break;
 8005966:	bf00      	nop
          }
          break;
 8005968:	e0ab      	b.n	8005ac2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d002      	beq.n	800597c <USBD_StdEPReq+0x1dc>
 8005976:	2b03      	cmp	r3, #3
 8005978:	d032      	beq.n	80059e0 <USBD_StdEPReq+0x240>
 800597a:	e097      	b.n	8005aac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800597c:	7bbb      	ldrb	r3, [r7, #14]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d007      	beq.n	8005992 <USBD_StdEPReq+0x1f2>
 8005982:	7bbb      	ldrb	r3, [r7, #14]
 8005984:	2b80      	cmp	r3, #128	; 0x80
 8005986:	d004      	beq.n	8005992 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005988:	6839      	ldr	r1, [r7, #0]
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fbed 	bl	800616a <USBD_CtlError>
                break;
 8005990:	e091      	b.n	8005ab6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005992:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005996:	2b00      	cmp	r3, #0
 8005998:	da0b      	bge.n	80059b2 <USBD_StdEPReq+0x212>
 800599a:	7bbb      	ldrb	r3, [r7, #14]
 800599c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	3310      	adds	r3, #16
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	4413      	add	r3, r2
 80059ae:	3304      	adds	r3, #4
 80059b0:	e00b      	b.n	80059ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80059b2:	7bbb      	ldrb	r3, [r7, #14]
 80059b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059b8:	4613      	mov	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	4413      	add	r3, r2
 80059c8:	3304      	adds	r3, #4
 80059ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2200      	movs	r2, #0
 80059d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2202      	movs	r2, #2
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fc37 	bl	800624c <USBD_CtlSendData>
              break;
 80059de:	e06a      	b.n	8005ab6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80059e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	da11      	bge.n	8005a0c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059e8:	7bbb      	ldrb	r3, [r7, #14]
 80059ea:	f003 020f 	and.w	r2, r3, #15
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	3324      	adds	r3, #36	; 0x24
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d117      	bne.n	8005a32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005a02:	6839      	ldr	r1, [r7, #0]
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fbb0 	bl	800616a <USBD_CtlError>
                  break;
 8005a0a:	e054      	b.n	8005ab6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a0c:	7bbb      	ldrb	r3, [r7, #14]
 8005a0e:	f003 020f 	and.w	r2, r3, #15
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d104      	bne.n	8005a32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fb9d 	bl	800616a <USBD_CtlError>
                  break;
 8005a30:	e041      	b.n	8005ab6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	da0b      	bge.n	8005a52 <USBD_StdEPReq+0x2b2>
 8005a3a:	7bbb      	ldrb	r3, [r7, #14]
 8005a3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	3310      	adds	r3, #16
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	3304      	adds	r3, #4
 8005a50:	e00b      	b.n	8005a6a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a52:	7bbb      	ldrb	r3, [r7, #14]
 8005a54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	4413      	add	r3, r2
 8005a68:	3304      	adds	r3, #4
 8005a6a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a6c:	7bbb      	ldrb	r3, [r7, #14]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <USBD_StdEPReq+0x2d8>
 8005a72:	7bbb      	ldrb	r3, [r7, #14]
 8005a74:	2b80      	cmp	r3, #128	; 0x80
 8005a76:	d103      	bne.n	8005a80 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	e00e      	b.n	8005a9e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005a80:	7bbb      	ldrb	r3, [r7, #14]
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f001 f817 	bl	8006ab8 <USBD_LL_IsStallEP>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2201      	movs	r2, #1
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	e002      	b.n	8005a9e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fbd1 	bl	800624c <USBD_CtlSendData>
              break;
 8005aaa:	e004      	b.n	8005ab6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005aac:	6839      	ldr	r1, [r7, #0]
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fb5b 	bl	800616a <USBD_CtlError>
              break;
 8005ab4:	bf00      	nop
          }
          break;
 8005ab6:	e004      	b.n	8005ac2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fb55 	bl	800616a <USBD_CtlError>
          break;
 8005ac0:	bf00      	nop
      }
      break;
 8005ac2:	e005      	b.n	8005ad0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fb4f 	bl	800616a <USBD_CtlError>
      break;
 8005acc:	e000      	b.n	8005ad0 <USBD_StdEPReq+0x330>
      break;
 8005ace:	bf00      	nop
  }

  return ret;
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	885b      	ldrh	r3, [r3, #2]
 8005af6:	0a1b      	lsrs	r3, r3, #8
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	2b06      	cmp	r3, #6
 8005afe:	f200 8128 	bhi.w	8005d52 <USBD_GetDescriptor+0x276>
 8005b02:	a201      	add	r2, pc, #4	; (adr r2, 8005b08 <USBD_GetDescriptor+0x2c>)
 8005b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b08:	08005b25 	.word	0x08005b25
 8005b0c:	08005b3d 	.word	0x08005b3d
 8005b10:	08005b7d 	.word	0x08005b7d
 8005b14:	08005d53 	.word	0x08005d53
 8005b18:	08005d53 	.word	0x08005d53
 8005b1c:	08005cf3 	.word	0x08005cf3
 8005b20:	08005d1f 	.word	0x08005d1f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	7c12      	ldrb	r2, [r2, #16]
 8005b30:	f107 0108 	add.w	r1, r7, #8
 8005b34:	4610      	mov	r0, r2
 8005b36:	4798      	blx	r3
 8005b38:	60f8      	str	r0, [r7, #12]
      break;
 8005b3a:	e112      	b.n	8005d62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	7c1b      	ldrb	r3, [r3, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10d      	bne.n	8005b60 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4c:	f107 0208 	add.w	r2, r7, #8
 8005b50:	4610      	mov	r0, r2
 8005b52:	4798      	blx	r3
 8005b54:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005b5e:	e100      	b.n	8005d62 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	f107 0208 	add.w	r2, r7, #8
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	4798      	blx	r3
 8005b70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3301      	adds	r3, #1
 8005b76:	2202      	movs	r2, #2
 8005b78:	701a      	strb	r2, [r3, #0]
      break;
 8005b7a:	e0f2      	b.n	8005d62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	885b      	ldrh	r3, [r3, #2]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b05      	cmp	r3, #5
 8005b84:	f200 80ac 	bhi.w	8005ce0 <USBD_GetDescriptor+0x204>
 8005b88:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <USBD_GetDescriptor+0xb4>)
 8005b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8e:	bf00      	nop
 8005b90:	08005ba9 	.word	0x08005ba9
 8005b94:	08005bdd 	.word	0x08005bdd
 8005b98:	08005c11 	.word	0x08005c11
 8005b9c:	08005c45 	.word	0x08005c45
 8005ba0:	08005c79 	.word	0x08005c79
 8005ba4:	08005cad 	.word	0x08005cad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00b      	beq.n	8005bcc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	7c12      	ldrb	r2, [r2, #16]
 8005bc0:	f107 0108 	add.w	r1, r7, #8
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	4798      	blx	r3
 8005bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bca:	e091      	b.n	8005cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 facb 	bl	800616a <USBD_CtlError>
            err++;
 8005bd4:	7afb      	ldrb	r3, [r7, #11]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8005bda:	e089      	b.n	8005cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00b      	beq.n	8005c00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	7c12      	ldrb	r2, [r2, #16]
 8005bf4:	f107 0108 	add.w	r1, r7, #8
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	4798      	blx	r3
 8005bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bfe:	e077      	b.n	8005cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fab1 	bl	800616a <USBD_CtlError>
            err++;
 8005c08:	7afb      	ldrb	r3, [r7, #11]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8005c0e:	e06f      	b.n	8005cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00b      	beq.n	8005c34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	7c12      	ldrb	r2, [r2, #16]
 8005c28:	f107 0108 	add.w	r1, r7, #8
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	4798      	blx	r3
 8005c30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c32:	e05d      	b.n	8005cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c34:	6839      	ldr	r1, [r7, #0]
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fa97 	bl	800616a <USBD_CtlError>
            err++;
 8005c3c:	7afb      	ldrb	r3, [r7, #11]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	72fb      	strb	r3, [r7, #11]
          break;
 8005c42:	e055      	b.n	8005cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00b      	beq.n	8005c68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	7c12      	ldrb	r2, [r2, #16]
 8005c5c:	f107 0108 	add.w	r1, r7, #8
 8005c60:	4610      	mov	r0, r2
 8005c62:	4798      	blx	r3
 8005c64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c66:	e043      	b.n	8005cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fa7d 	bl	800616a <USBD_CtlError>
            err++;
 8005c70:	7afb      	ldrb	r3, [r7, #11]
 8005c72:	3301      	adds	r3, #1
 8005c74:	72fb      	strb	r3, [r7, #11]
          break;
 8005c76:	e03b      	b.n	8005cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00b      	beq.n	8005c9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	7c12      	ldrb	r2, [r2, #16]
 8005c90:	f107 0108 	add.w	r1, r7, #8
 8005c94:	4610      	mov	r0, r2
 8005c96:	4798      	blx	r3
 8005c98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c9a:	e029      	b.n	8005cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c9c:	6839      	ldr	r1, [r7, #0]
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fa63 	bl	800616a <USBD_CtlError>
            err++;
 8005ca4:	7afb      	ldrb	r3, [r7, #11]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	72fb      	strb	r3, [r7, #11]
          break;
 8005caa:	e021      	b.n	8005cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00b      	beq.n	8005cd0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	7c12      	ldrb	r2, [r2, #16]
 8005cc4:	f107 0108 	add.w	r1, r7, #8
 8005cc8:	4610      	mov	r0, r2
 8005cca:	4798      	blx	r3
 8005ccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cce:	e00f      	b.n	8005cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fa49 	bl	800616a <USBD_CtlError>
            err++;
 8005cd8:	7afb      	ldrb	r3, [r7, #11]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	72fb      	strb	r3, [r7, #11]
          break;
 8005cde:	e007      	b.n	8005cf0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fa41 	bl	800616a <USBD_CtlError>
          err++;
 8005ce8:	7afb      	ldrb	r3, [r7, #11]
 8005cea:	3301      	adds	r3, #1
 8005cec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005cee:	bf00      	nop
      }
      break;
 8005cf0:	e037      	b.n	8005d62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	7c1b      	ldrb	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d109      	bne.n	8005d0e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d02:	f107 0208 	add.w	r2, r7, #8
 8005d06:	4610      	mov	r0, r2
 8005d08:	4798      	blx	r3
 8005d0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d0c:	e029      	b.n	8005d62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fa2a 	bl	800616a <USBD_CtlError>
        err++;
 8005d16:	7afb      	ldrb	r3, [r7, #11]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	72fb      	strb	r3, [r7, #11]
      break;
 8005d1c:	e021      	b.n	8005d62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	7c1b      	ldrb	r3, [r3, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10d      	bne.n	8005d42 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2e:	f107 0208 	add.w	r2, r7, #8
 8005d32:	4610      	mov	r0, r2
 8005d34:	4798      	blx	r3
 8005d36:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	2207      	movs	r2, #7
 8005d3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d40:	e00f      	b.n	8005d62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d42:	6839      	ldr	r1, [r7, #0]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fa10 	bl	800616a <USBD_CtlError>
        err++;
 8005d4a:	7afb      	ldrb	r3, [r7, #11]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	72fb      	strb	r3, [r7, #11]
      break;
 8005d50:	e007      	b.n	8005d62 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fa08 	bl	800616a <USBD_CtlError>
      err++;
 8005d5a:	7afb      	ldrb	r3, [r7, #11]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	72fb      	strb	r3, [r7, #11]
      break;
 8005d60:	bf00      	nop
  }

  if (err != 0U)
 8005d62:	7afb      	ldrb	r3, [r7, #11]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d11e      	bne.n	8005da6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	88db      	ldrh	r3, [r3, #6]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d016      	beq.n	8005d9e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005d70:	893b      	ldrh	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00e      	beq.n	8005d94 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	88da      	ldrh	r2, [r3, #6]
 8005d7a:	893b      	ldrh	r3, [r7, #8]
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	bf28      	it	cs
 8005d80:	4613      	movcs	r3, r2
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d86:	893b      	ldrh	r3, [r7, #8]
 8005d88:	461a      	mov	r2, r3
 8005d8a:	68f9      	ldr	r1, [r7, #12]
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fa5d 	bl	800624c <USBD_CtlSendData>
 8005d92:	e009      	b.n	8005da8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f9e7 	bl	800616a <USBD_CtlError>
 8005d9c:	e004      	b.n	8005da8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 faae 	bl	8006300 <USBD_CtlSendStatus>
 8005da4:	e000      	b.n	8005da8 <USBD_GetDescriptor+0x2cc>
    return;
 8005da6:	bf00      	nop
  }
}
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop

08005db0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	889b      	ldrh	r3, [r3, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d131      	bne.n	8005e26 <USBD_SetAddress+0x76>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	88db      	ldrh	r3, [r3, #6]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d12d      	bne.n	8005e26 <USBD_SetAddress+0x76>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	885b      	ldrh	r3, [r3, #2]
 8005dce:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd0:	d829      	bhi.n	8005e26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	885b      	ldrh	r3, [r3, #2]
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ddc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d104      	bne.n	8005df4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f9bc 	bl	800616a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005df2:	e01d      	b.n	8005e30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	7bfa      	ldrb	r2, [r7, #15]
 8005df8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fe85 	bl	8006b10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa7a 	bl	8006300 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d004      	beq.n	8005e1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2202      	movs	r2, #2
 8005e16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e1a:	e009      	b.n	8005e30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e24:	e004      	b.n	8005e30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005e26:	6839      	ldr	r1, [r7, #0]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f99e 	bl	800616a <USBD_CtlError>
  }
}
 8005e2e:	bf00      	nop
 8005e30:	bf00      	nop
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	885b      	ldrh	r3, [r3, #2]
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	4b4e      	ldr	r3, [pc, #312]	; (8005f88 <USBD_SetConfig+0x150>)
 8005e4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e50:	4b4d      	ldr	r3, [pc, #308]	; (8005f88 <USBD_SetConfig+0x150>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d905      	bls.n	8005e64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005e58:	6839      	ldr	r1, [r7, #0]
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f985 	bl	800616a <USBD_CtlError>
    return USBD_FAIL;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e08c      	b.n	8005f7e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d002      	beq.n	8005e76 <USBD_SetConfig+0x3e>
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d029      	beq.n	8005ec8 <USBD_SetConfig+0x90>
 8005e74:	e075      	b.n	8005f62 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005e76:	4b44      	ldr	r3, [pc, #272]	; (8005f88 <USBD_SetConfig+0x150>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d020      	beq.n	8005ec0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005e7e:	4b42      	ldr	r3, [pc, #264]	; (8005f88 <USBD_SetConfig+0x150>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	461a      	mov	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e88:	4b3f      	ldr	r3, [pc, #252]	; (8005f88 <USBD_SetConfig+0x150>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fe ffe7 	bl	8004e62 <USBD_SetClassConfig>
 8005e94:	4603      	mov	r3, r0
 8005e96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d008      	beq.n	8005eb0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f962 	bl	800616a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005eae:	e065      	b.n	8005f7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fa25 	bl	8006300 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2203      	movs	r2, #3
 8005eba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005ebe:	e05d      	b.n	8005f7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fa1d 	bl	8006300 <USBD_CtlSendStatus>
      break;
 8005ec6:	e059      	b.n	8005f7c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005ec8:	4b2f      	ldr	r3, [pc, #188]	; (8005f88 <USBD_SetConfig+0x150>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d112      	bne.n	8005ef6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005ed8:	4b2b      	ldr	r3, [pc, #172]	; (8005f88 <USBD_SetConfig+0x150>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	461a      	mov	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005ee2:	4b29      	ldr	r3, [pc, #164]	; (8005f88 <USBD_SetConfig+0x150>)
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7fe ffd6 	bl	8004e9a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fa06 	bl	8006300 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005ef4:	e042      	b.n	8005f7c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005ef6:	4b24      	ldr	r3, [pc, #144]	; (8005f88 <USBD_SetConfig+0x150>)
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d02a      	beq.n	8005f5a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7fe ffc4 	bl	8004e9a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005f12:	4b1d      	ldr	r3, [pc, #116]	; (8005f88 <USBD_SetConfig+0x150>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f1c:	4b1a      	ldr	r3, [pc, #104]	; (8005f88 <USBD_SetConfig+0x150>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	4619      	mov	r1, r3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7fe ff9d 	bl	8004e62 <USBD_SetClassConfig>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00f      	beq.n	8005f52 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f918 	bl	800616a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	4619      	mov	r1, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fe ffa9 	bl	8004e9a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005f50:	e014      	b.n	8005f7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f9d4 	bl	8006300 <USBD_CtlSendStatus>
      break;
 8005f58:	e010      	b.n	8005f7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f9d0 	bl	8006300 <USBD_CtlSendStatus>
      break;
 8005f60:	e00c      	b.n	8005f7c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f900 	bl	800616a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f6a:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <USBD_SetConfig+0x150>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7fe ff92 	bl	8004e9a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005f76:	2303      	movs	r3, #3
 8005f78:	73fb      	strb	r3, [r7, #15]
      break;
 8005f7a:	bf00      	nop
  }

  return ret;
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	200001b0 	.word	0x200001b0

08005f8c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	88db      	ldrh	r3, [r3, #6]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d004      	beq.n	8005fa8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005f9e:	6839      	ldr	r1, [r7, #0]
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f8e2 	bl	800616a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005fa6:	e023      	b.n	8005ff0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	dc02      	bgt.n	8005fba <USBD_GetConfig+0x2e>
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	dc03      	bgt.n	8005fc0 <USBD_GetConfig+0x34>
 8005fb8:	e015      	b.n	8005fe6 <USBD_GetConfig+0x5a>
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	d00b      	beq.n	8005fd6 <USBD_GetConfig+0x4a>
 8005fbe:	e012      	b.n	8005fe6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	3308      	adds	r3, #8
 8005fca:	2201      	movs	r2, #1
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f93c 	bl	800624c <USBD_CtlSendData>
        break;
 8005fd4:	e00c      	b.n	8005ff0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	2201      	movs	r2, #1
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f934 	bl	800624c <USBD_CtlSendData>
        break;
 8005fe4:	e004      	b.n	8005ff0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f8be 	bl	800616a <USBD_CtlError>
        break;
 8005fee:	bf00      	nop
}
 8005ff0:	bf00      	nop
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006008:	b2db      	uxtb	r3, r3
 800600a:	3b01      	subs	r3, #1
 800600c:	2b02      	cmp	r3, #2
 800600e:	d81e      	bhi.n	800604e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	88db      	ldrh	r3, [r3, #6]
 8006014:	2b02      	cmp	r3, #2
 8006016:	d004      	beq.n	8006022 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006018:	6839      	ldr	r1, [r7, #0]
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f8a5 	bl	800616a <USBD_CtlError>
        break;
 8006020:	e01a      	b.n	8006058 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800602e:	2b00      	cmp	r3, #0
 8006030:	d005      	beq.n	800603e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f043 0202 	orr.w	r2, r3, #2
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	330c      	adds	r3, #12
 8006042:	2202      	movs	r2, #2
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f900 	bl	800624c <USBD_CtlSendData>
      break;
 800604c:	e004      	b.n	8006058 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f88a 	bl	800616a <USBD_CtlError>
      break;
 8006056:	bf00      	nop
  }
}
 8006058:	bf00      	nop
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	885b      	ldrh	r3, [r3, #2]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d107      	bne.n	8006082 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f940 	bl	8006300 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006080:	e013      	b.n	80060aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	885b      	ldrh	r3, [r3, #2]
 8006086:	2b02      	cmp	r3, #2
 8006088:	d10b      	bne.n	80060a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	889b      	ldrh	r3, [r3, #4]
 800608e:	0a1b      	lsrs	r3, r3, #8
 8006090:	b29b      	uxth	r3, r3
 8006092:	b2da      	uxtb	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f930 	bl	8006300 <USBD_CtlSendStatus>
}
 80060a0:	e003      	b.n	80060aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f860 	bl	800616a <USBD_CtlError>
}
 80060aa:	bf00      	nop
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d80b      	bhi.n	80060e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	885b      	ldrh	r3, [r3, #2]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d10c      	bne.n	80060ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f910 	bl	8006300 <USBD_CtlSendStatus>
      }
      break;
 80060e0:	e004      	b.n	80060ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f840 	bl	800616a <USBD_CtlError>
      break;
 80060ea:	e000      	b.n	80060ee <USBD_ClrFeature+0x3c>
      break;
 80060ec:	bf00      	nop
  }
}
 80060ee:	bf00      	nop
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	781a      	ldrb	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3301      	adds	r3, #1
 8006110:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	781a      	ldrb	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3301      	adds	r3, #1
 800611e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f7ff fa41 	bl	80055a8 <SWAPBYTE>
 8006126:	4603      	mov	r3, r0
 8006128:	461a      	mov	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	3301      	adds	r3, #1
 8006132:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3301      	adds	r3, #1
 8006138:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f7ff fa34 	bl	80055a8 <SWAPBYTE>
 8006140:	4603      	mov	r3, r0
 8006142:	461a      	mov	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	3301      	adds	r3, #1
 800614c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3301      	adds	r3, #1
 8006152:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f7ff fa27 	bl	80055a8 <SWAPBYTE>
 800615a:	4603      	mov	r3, r0
 800615c:	461a      	mov	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	80da      	strh	r2, [r3, #6]
}
 8006162:	bf00      	nop
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b082      	sub	sp, #8
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006174:	2180      	movs	r1, #128	; 0x80
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fc60 	bl	8006a3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800617c:	2100      	movs	r1, #0
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fc5c 	bl	8006a3c <USBD_LL_StallEP>
}
 8006184:	bf00      	nop
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d036      	beq.n	8006210 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80061a6:	6938      	ldr	r0, [r7, #16]
 80061a8:	f000 f836 	bl	8006218 <USBD_GetLen>
 80061ac:	4603      	mov	r3, r0
 80061ae:	3301      	adds	r3, #1
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80061ba:	7dfb      	ldrb	r3, [r7, #23]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	4413      	add	r3, r2
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	7812      	ldrb	r2, [r2, #0]
 80061c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80061c6:	7dfb      	ldrb	r3, [r7, #23]
 80061c8:	3301      	adds	r3, #1
 80061ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	4413      	add	r3, r2
 80061d2:	2203      	movs	r2, #3
 80061d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80061d6:	7dfb      	ldrb	r3, [r7, #23]
 80061d8:	3301      	adds	r3, #1
 80061da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80061dc:	e013      	b.n	8006206 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	4413      	add	r3, r2
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	7812      	ldrb	r2, [r2, #0]
 80061e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	3301      	adds	r3, #1
 80061ee:	613b      	str	r3, [r7, #16]
    idx++;
 80061f0:	7dfb      	ldrb	r3, [r7, #23]
 80061f2:	3301      	adds	r3, #1
 80061f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80061f6:	7dfb      	ldrb	r3, [r7, #23]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	4413      	add	r3, r2
 80061fc:	2200      	movs	r2, #0
 80061fe:	701a      	strb	r2, [r3, #0]
    idx++;
 8006200:	7dfb      	ldrb	r3, [r7, #23]
 8006202:	3301      	adds	r3, #1
 8006204:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e7      	bne.n	80061de <USBD_GetString+0x52>
 800620e:	e000      	b.n	8006212 <USBD_GetString+0x86>
    return;
 8006210:	bf00      	nop
  }
}
 8006212:	3718      	adds	r7, #24
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006228:	e005      	b.n	8006236 <USBD_GetLen+0x1e>
  {
    len++;
 800622a:	7bfb      	ldrb	r3, [r7, #15]
 800622c:	3301      	adds	r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	3301      	adds	r3, #1
 8006234:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1f5      	bne.n	800622a <USBD_GetLen+0x12>
  }

  return len;
 800623e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2202      	movs	r2, #2
 800625c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	2100      	movs	r1, #0
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 fc6b 	bl	8006b4e <USBD_LL_Transmit>

  return USBD_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b084      	sub	sp, #16
 8006286:	af00      	add	r7, sp, #0
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	2100      	movs	r1, #0
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 fc5a 	bl	8006b4e <USBD_LL_Transmit>

  return USBD_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2203      	movs	r2, #3
 80062b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	2100      	movs	r1, #0
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 fc5e 	bl	8006b90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	60f8      	str	r0, [r7, #12]
 80062e6:	60b9      	str	r1, [r7, #8]
 80062e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	2100      	movs	r1, #0
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 fc4d 	bl	8006b90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2204      	movs	r2, #4
 800630c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006310:	2300      	movs	r3, #0
 8006312:	2200      	movs	r2, #0
 8006314:	2100      	movs	r1, #0
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fc19 	bl	8006b4e <USBD_LL_Transmit>

  return USBD_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b082      	sub	sp, #8
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2205      	movs	r2, #5
 8006332:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006336:	2300      	movs	r3, #0
 8006338:	2200      	movs	r2, #0
 800633a:	2100      	movs	r1, #0
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fc27 	bl	8006b90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006350:	2200      	movs	r2, #0
 8006352:	4912      	ldr	r1, [pc, #72]	; (800639c <MX_USB_DEVICE_Init+0x50>)
 8006354:	4812      	ldr	r0, [pc, #72]	; (80063a0 <MX_USB_DEVICE_Init+0x54>)
 8006356:	f7fe fd07 	bl	8004d68 <USBD_Init>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006360:	f7fa fa14 	bl	800078c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006364:	490f      	ldr	r1, [pc, #60]	; (80063a4 <MX_USB_DEVICE_Init+0x58>)
 8006366:	480e      	ldr	r0, [pc, #56]	; (80063a0 <MX_USB_DEVICE_Init+0x54>)
 8006368:	f7fe fd2e 	bl	8004dc8 <USBD_RegisterClass>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006372:	f7fa fa0b 	bl	800078c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006376:	490c      	ldr	r1, [pc, #48]	; (80063a8 <MX_USB_DEVICE_Init+0x5c>)
 8006378:	4809      	ldr	r0, [pc, #36]	; (80063a0 <MX_USB_DEVICE_Init+0x54>)
 800637a:	f7fe fcdb 	bl	8004d34 <USBD_CUSTOM_HID_RegisterInterface>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006384:	f7fa fa02 	bl	800078c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006388:	4805      	ldr	r0, [pc, #20]	; (80063a0 <MX_USB_DEVICE_Init+0x54>)
 800638a:	f7fe fd53 	bl	8004e34 <USBD_Start>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006394:	f7fa f9fa 	bl	800078c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006398:	bf00      	nop
 800639a:	bd80      	pop	{r7, pc}
 800639c:	200000b4 	.word	0x200000b4
 80063a0:	200001b4 	.word	0x200001b4
 80063a4:	2000000c 	.word	0x2000000c
 80063a8:	200000a4 	.word	0x200000a4

080063ac <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80063b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80063c0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <CUSTOM_HID_OutEvent_FS>:

extern uint8_t USB_RX_Buffer[65];
extern int USB_packet_enable;

static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	4603      	mov	r3, r0
 80063d4:	460a      	mov	r2, r1
 80063d6:	71fb      	strb	r3, [r7, #7]
 80063d8:	4613      	mov	r3, r2
 80063da:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
	  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80063dc:	4b13      	ldr	r3, [pc, #76]	; (800642c <CUSTOM_HID_OutEvent_FS+0x60>)
 80063de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063e2:	60bb      	str	r3, [r7, #8]

	  for (int i =  0; i < 65 ; i++)
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	e00b      	b.n	8006402 <CUSTOM_HID_OutEvent_FS+0x36>
	  {
	    USB_RX_Buffer[i] = hhid->Report_buf[i]; // To read usb data from PC
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	7819      	ldrb	r1, [r3, #0]
 80063f2:	4a0f      	ldr	r2, [pc, #60]	; (8006430 <CUSTOM_HID_OutEvent_FS+0x64>)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	460a      	mov	r2, r1
 80063fa:	701a      	strb	r2, [r3, #0]
	  for (int i =  0; i < 65 ; i++)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3301      	adds	r3, #1
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2b40      	cmp	r3, #64	; 0x40
 8006406:	ddf0      	ble.n	80063ea <CUSTOM_HID_OutEvent_FS+0x1e>
	  }
	  USB_packet_enable=1;
 8006408:	4b0a      	ldr	r3, [pc, #40]	; (8006434 <CUSTOM_HID_OutEvent_FS+0x68>)
 800640a:	2201      	movs	r2, #1
 800640c:	601a      	str	r2, [r3, #0]
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800640e:	4807      	ldr	r0, [pc, #28]	; (800642c <CUSTOM_HID_OutEvent_FS+0x60>)
 8006410:	f7fe fc2e 	bl	8004c70 <USBD_CUSTOM_HID_ReceivePacket>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <CUSTOM_HID_OutEvent_FS+0x54>
  {
    return -1;
 800641a:	f04f 33ff 	mov.w	r3, #4294967295
 800641e:	e000      	b.n	8006422 <CUSTOM_HID_OutEvent_FS+0x56>
  }

  return (USBD_OK);
 8006420:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	200001b4 	.word	0x200001b4
 8006430:	20000120 	.word	0x20000120
 8006434:	200001a8 	.word	0x200001a8

08006438 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	6039      	str	r1, [r7, #0]
 8006442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2212      	movs	r2, #18
 8006448:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800644a:	4b03      	ldr	r3, [pc, #12]	; (8006458 <USBD_FS_DeviceDescriptor+0x20>)
}
 800644c:	4618      	mov	r0, r3
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	200000d0 	.word	0x200000d0

0800645c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	4603      	mov	r3, r0
 8006464:	6039      	str	r1, [r7, #0]
 8006466:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2204      	movs	r2, #4
 800646c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800646e:	4b03      	ldr	r3, [pc, #12]	; (800647c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006470:	4618      	mov	r0, r3
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	200000e4 	.word	0x200000e4

08006480 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	4603      	mov	r3, r0
 8006488:	6039      	str	r1, [r7, #0]
 800648a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d105      	bne.n	800649e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	4907      	ldr	r1, [pc, #28]	; (80064b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006496:	4808      	ldr	r0, [pc, #32]	; (80064b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006498:	f7ff fe78 	bl	800618c <USBD_GetString>
 800649c:	e004      	b.n	80064a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	4904      	ldr	r1, [pc, #16]	; (80064b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80064a2:	4805      	ldr	r0, [pc, #20]	; (80064b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80064a4:	f7ff fe72 	bl	800618c <USBD_GetString>
  }
  return USBD_StrDesc;
 80064a8:	4b02      	ldr	r3, [pc, #8]	; (80064b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20000490 	.word	0x20000490
 80064b8:	08006ccc 	.word	0x08006ccc

080064bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	4603      	mov	r3, r0
 80064c4:	6039      	str	r1, [r7, #0]
 80064c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	4904      	ldr	r1, [pc, #16]	; (80064dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80064cc:	4804      	ldr	r0, [pc, #16]	; (80064e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80064ce:	f7ff fe5d 	bl	800618c <USBD_GetString>
  return USBD_StrDesc;
 80064d2:	4b02      	ldr	r3, [pc, #8]	; (80064dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20000490 	.word	0x20000490
 80064e0:	08006cec 	.word	0x08006cec

080064e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	4603      	mov	r3, r0
 80064ec:	6039      	str	r1, [r7, #0]
 80064ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	221a      	movs	r2, #26
 80064f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80064f6:	f000 f843 	bl	8006580 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80064fa:	4b02      	ldr	r3, [pc, #8]	; (8006504 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	200000e8 	.word	0x200000e8

08006508 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	4603      	mov	r3, r0
 8006510:	6039      	str	r1, [r7, #0]
 8006512:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d105      	bne.n	8006526 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	4907      	ldr	r1, [pc, #28]	; (800653c <USBD_FS_ConfigStrDescriptor+0x34>)
 800651e:	4808      	ldr	r0, [pc, #32]	; (8006540 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006520:	f7ff fe34 	bl	800618c <USBD_GetString>
 8006524:	e004      	b.n	8006530 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	4904      	ldr	r1, [pc, #16]	; (800653c <USBD_FS_ConfigStrDescriptor+0x34>)
 800652a:	4805      	ldr	r0, [pc, #20]	; (8006540 <USBD_FS_ConfigStrDescriptor+0x38>)
 800652c:	f7ff fe2e 	bl	800618c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006530:	4b02      	ldr	r3, [pc, #8]	; (800653c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20000490 	.word	0x20000490
 8006540:	08006d00 	.word	0x08006d00

08006544 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	4603      	mov	r3, r0
 800654c:	6039      	str	r1, [r7, #0]
 800654e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d105      	bne.n	8006562 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	4907      	ldr	r1, [pc, #28]	; (8006578 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800655a:	4808      	ldr	r0, [pc, #32]	; (800657c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800655c:	f7ff fe16 	bl	800618c <USBD_GetString>
 8006560:	e004      	b.n	800656c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	4904      	ldr	r1, [pc, #16]	; (8006578 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006566:	4805      	ldr	r0, [pc, #20]	; (800657c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006568:	f7ff fe10 	bl	800618c <USBD_GetString>
  }
  return USBD_StrDesc;
 800656c:	4b02      	ldr	r3, [pc, #8]	; (8006578 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20000490 	.word	0x20000490
 800657c:	08006d14 	.word	0x08006d14

08006580 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006586:	4b0f      	ldr	r3, [pc, #60]	; (80065c4 <Get_SerialNum+0x44>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800658c:	4b0e      	ldr	r3, [pc, #56]	; (80065c8 <Get_SerialNum+0x48>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006592:	4b0e      	ldr	r3, [pc, #56]	; (80065cc <Get_SerialNum+0x4c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4413      	add	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d009      	beq.n	80065ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80065a6:	2208      	movs	r2, #8
 80065a8:	4909      	ldr	r1, [pc, #36]	; (80065d0 <Get_SerialNum+0x50>)
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f814 	bl	80065d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80065b0:	2204      	movs	r2, #4
 80065b2:	4908      	ldr	r1, [pc, #32]	; (80065d4 <Get_SerialNum+0x54>)
 80065b4:	68b8      	ldr	r0, [r7, #8]
 80065b6:	f000 f80f 	bl	80065d8 <IntToUnicode>
  }
}
 80065ba:	bf00      	nop
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	1fff7a10 	.word	0x1fff7a10
 80065c8:	1fff7a14 	.word	0x1fff7a14
 80065cc:	1fff7a18 	.word	0x1fff7a18
 80065d0:	200000ea 	.word	0x200000ea
 80065d4:	200000fa 	.word	0x200000fa

080065d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	4613      	mov	r3, r2
 80065e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80065e6:	2300      	movs	r3, #0
 80065e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80065ea:	2300      	movs	r3, #0
 80065ec:	75fb      	strb	r3, [r7, #23]
 80065ee:	e027      	b.n	8006640 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	0f1b      	lsrs	r3, r3, #28
 80065f4:	2b09      	cmp	r3, #9
 80065f6:	d80b      	bhi.n	8006610 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	0f1b      	lsrs	r3, r3, #28
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	4619      	mov	r1, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	440b      	add	r3, r1
 8006608:	3230      	adds	r2, #48	; 0x30
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	e00a      	b.n	8006626 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	0f1b      	lsrs	r3, r3, #28
 8006614:	b2da      	uxtb	r2, r3
 8006616:	7dfb      	ldrb	r3, [r7, #23]
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	4619      	mov	r1, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	440b      	add	r3, r1
 8006620:	3237      	adds	r2, #55	; 0x37
 8006622:	b2d2      	uxtb	r2, r2
 8006624:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	011b      	lsls	r3, r3, #4
 800662a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800662c:	7dfb      	ldrb	r3, [r7, #23]
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	3301      	adds	r3, #1
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	4413      	add	r3, r2
 8006636:	2200      	movs	r2, #0
 8006638:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800663a:	7dfb      	ldrb	r3, [r7, #23]
 800663c:	3301      	adds	r3, #1
 800663e:	75fb      	strb	r3, [r7, #23]
 8006640:	7dfa      	ldrb	r2, [r7, #23]
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	429a      	cmp	r2, r3
 8006646:	d3d3      	bcc.n	80065f0 <IntToUnicode+0x18>
  }
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
	...

08006658 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08a      	sub	sp, #40	; 0x28
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006660:	f107 0314 	add.w	r3, r7, #20
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	609a      	str	r2, [r3, #8]
 800666c:	60da      	str	r2, [r3, #12]
 800666e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006678:	d13a      	bne.n	80066f0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800667a:	2300      	movs	r3, #0
 800667c:	613b      	str	r3, [r7, #16]
 800667e:	4b1e      	ldr	r3, [pc, #120]	; (80066f8 <HAL_PCD_MspInit+0xa0>)
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	4a1d      	ldr	r2, [pc, #116]	; (80066f8 <HAL_PCD_MspInit+0xa0>)
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	6313      	str	r3, [r2, #48]	; 0x30
 800668a:	4b1b      	ldr	r3, [pc, #108]	; (80066f8 <HAL_PCD_MspInit+0xa0>)
 800668c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006696:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800669a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800669c:	2302      	movs	r3, #2
 800669e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066a4:	2303      	movs	r3, #3
 80066a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80066a8:	230a      	movs	r3, #10
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066ac:	f107 0314 	add.w	r3, r7, #20
 80066b0:	4619      	mov	r1, r3
 80066b2:	4812      	ldr	r0, [pc, #72]	; (80066fc <HAL_PCD_MspInit+0xa4>)
 80066b4:	f7fa fab0 	bl	8000c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80066b8:	4b0f      	ldr	r3, [pc, #60]	; (80066f8 <HAL_PCD_MspInit+0xa0>)
 80066ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066bc:	4a0e      	ldr	r2, [pc, #56]	; (80066f8 <HAL_PCD_MspInit+0xa0>)
 80066be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c2:	6353      	str	r3, [r2, #52]	; 0x34
 80066c4:	2300      	movs	r3, #0
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	4b0b      	ldr	r3, [pc, #44]	; (80066f8 <HAL_PCD_MspInit+0xa0>)
 80066ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066cc:	4a0a      	ldr	r2, [pc, #40]	; (80066f8 <HAL_PCD_MspInit+0xa0>)
 80066ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066d2:	6453      	str	r3, [r2, #68]	; 0x44
 80066d4:	4b08      	ldr	r3, [pc, #32]	; (80066f8 <HAL_PCD_MspInit+0xa0>)
 80066d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80066e0:	2200      	movs	r2, #0
 80066e2:	2100      	movs	r1, #0
 80066e4:	2043      	movs	r0, #67	; 0x43
 80066e6:	f7fa fa60 	bl	8000baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80066ea:	2043      	movs	r0, #67	; 0x43
 80066ec:	f7fa fa79 	bl	8000be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80066f0:	bf00      	nop
 80066f2:	3728      	adds	r7, #40	; 0x28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40023800 	.word	0x40023800
 80066fc:	40020000 	.word	0x40020000

08006700 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006714:	4619      	mov	r1, r3
 8006716:	4610      	mov	r0, r2
 8006718:	f7fe fbd9 	bl	8004ece <USBD_LL_SetupStage>
}
 800671c:	bf00      	nop
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006736:	78fa      	ldrb	r2, [r7, #3]
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	4613      	mov	r3, r2
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	440b      	add	r3, r1
 8006744:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	78fb      	ldrb	r3, [r7, #3]
 800674c:	4619      	mov	r1, r3
 800674e:	f7fe fc13 	bl	8004f78 <USBD_LL_DataOutStage>
}
 8006752:	bf00      	nop
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b082      	sub	sp, #8
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	460b      	mov	r3, r1
 8006764:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800676c:	78fa      	ldrb	r2, [r7, #3]
 800676e:	6879      	ldr	r1, [r7, #4]
 8006770:	4613      	mov	r3, r2
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	334c      	adds	r3, #76	; 0x4c
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	78fb      	ldrb	r3, [r7, #3]
 8006780:	4619      	mov	r1, r3
 8006782:	f7fe fcac 	bl	80050de <USBD_LL_DataInStage>
}
 8006786:	bf00      	nop
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe fde0 	bl	8005362 <USBD_LL_SOF>
}
 80067a2:	bf00      	nop
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80067b2:	2301      	movs	r3, #1
 80067b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d102      	bne.n	80067c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]
 80067c2:	e008      	b.n	80067d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d102      	bne.n	80067d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80067cc:	2301      	movs	r3, #1
 80067ce:	73fb      	strb	r3, [r7, #15]
 80067d0:	e001      	b.n	80067d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80067d2:	f7f9 ffdb 	bl	800078c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80067dc:	7bfa      	ldrb	r2, [r7, #15]
 80067de:	4611      	mov	r1, r2
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fe fd80 	bl	80052e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fe fd28 	bl	8005242 <USBD_LL_Reset>
}
 80067f2:	bf00      	nop
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
	...

080067fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe fd7b 	bl	8005306 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6812      	ldr	r2, [r2, #0]
 800681e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006822:	f043 0301 	orr.w	r3, r3, #1
 8006826:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006830:	4b04      	ldr	r3, [pc, #16]	; (8006844 <HAL_PCD_SuspendCallback+0x48>)
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	4a03      	ldr	r2, [pc, #12]	; (8006844 <HAL_PCD_SuspendCallback+0x48>)
 8006836:	f043 0306 	orr.w	r3, r3, #6
 800683a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800683c:	bf00      	nop
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	e000ed00 	.word	0xe000ed00

08006848 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006856:	4618      	mov	r0, r3
 8006858:	f7fe fd6b 	bl	8005332 <USBD_LL_Resume>
}
 800685c:	bf00      	nop
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006876:	78fa      	ldrb	r2, [r7, #3]
 8006878:	4611      	mov	r1, r2
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe fdc3 	bl	8005406 <USBD_LL_IsoOUTIncomplete>
}
 8006880:	bf00      	nop
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800689a:	78fa      	ldrb	r2, [r7, #3]
 800689c:	4611      	mov	r1, r2
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fe fd7f 	bl	80053a2 <USBD_LL_IsoINIncomplete>
}
 80068a4:	bf00      	nop
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe fdd5 	bl	800546a <USBD_LL_DevConnected>
}
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe fdd2 	bl	8005480 <USBD_LL_DevDisconnected>
}
 80068dc:	bf00      	nop
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d13c      	bne.n	800696e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80068f4:	4a20      	ldr	r2, [pc, #128]	; (8006978 <USBD_LL_Init+0x94>)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a1e      	ldr	r2, [pc, #120]	; (8006978 <USBD_LL_Init+0x94>)
 8006900:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006904:	4b1c      	ldr	r3, [pc, #112]	; (8006978 <USBD_LL_Init+0x94>)
 8006906:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800690a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800690c:	4b1a      	ldr	r3, [pc, #104]	; (8006978 <USBD_LL_Init+0x94>)
 800690e:	2204      	movs	r2, #4
 8006910:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006912:	4b19      	ldr	r3, [pc, #100]	; (8006978 <USBD_LL_Init+0x94>)
 8006914:	2202      	movs	r2, #2
 8006916:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006918:	4b17      	ldr	r3, [pc, #92]	; (8006978 <USBD_LL_Init+0x94>)
 800691a:	2200      	movs	r2, #0
 800691c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800691e:	4b16      	ldr	r3, [pc, #88]	; (8006978 <USBD_LL_Init+0x94>)
 8006920:	2202      	movs	r2, #2
 8006922:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006924:	4b14      	ldr	r3, [pc, #80]	; (8006978 <USBD_LL_Init+0x94>)
 8006926:	2200      	movs	r2, #0
 8006928:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800692a:	4b13      	ldr	r3, [pc, #76]	; (8006978 <USBD_LL_Init+0x94>)
 800692c:	2200      	movs	r2, #0
 800692e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006930:	4b11      	ldr	r3, [pc, #68]	; (8006978 <USBD_LL_Init+0x94>)
 8006932:	2200      	movs	r2, #0
 8006934:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006936:	4b10      	ldr	r3, [pc, #64]	; (8006978 <USBD_LL_Init+0x94>)
 8006938:	2200      	movs	r2, #0
 800693a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800693c:	4b0e      	ldr	r3, [pc, #56]	; (8006978 <USBD_LL_Init+0x94>)
 800693e:	2200      	movs	r2, #0
 8006940:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006942:	480d      	ldr	r0, [pc, #52]	; (8006978 <USBD_LL_Init+0x94>)
 8006944:	f7fa fb1d 	bl	8000f82 <HAL_PCD_Init>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800694e:	f7f9 ff1d 	bl	800078c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006952:	2180      	movs	r1, #128	; 0x80
 8006954:	4808      	ldr	r0, [pc, #32]	; (8006978 <USBD_LL_Init+0x94>)
 8006956:	f7fb fd5c 	bl	8002412 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800695a:	2240      	movs	r2, #64	; 0x40
 800695c:	2100      	movs	r1, #0
 800695e:	4806      	ldr	r0, [pc, #24]	; (8006978 <USBD_LL_Init+0x94>)
 8006960:	f7fb fd10 	bl	8002384 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006964:	2280      	movs	r2, #128	; 0x80
 8006966:	2101      	movs	r1, #1
 8006968:	4803      	ldr	r0, [pc, #12]	; (8006978 <USBD_LL_Init+0x94>)
 800696a:	f7fb fd0b 	bl	8002384 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	20000690 	.word	0x20000690

0800697c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006992:	4618      	mov	r0, r3
 8006994:	f7fa fc12 	bl	80011bc <HAL_PCD_Start>
 8006998:	4603      	mov	r3, r0
 800699a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800699c:	7bfb      	ldrb	r3, [r7, #15]
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 f930 	bl	8006c04 <USBD_Get_USB_Status>
 80069a4:	4603      	mov	r3, r0
 80069a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	4608      	mov	r0, r1
 80069bc:	4611      	mov	r1, r2
 80069be:	461a      	mov	r2, r3
 80069c0:	4603      	mov	r3, r0
 80069c2:	70fb      	strb	r3, [r7, #3]
 80069c4:	460b      	mov	r3, r1
 80069c6:	70bb      	strb	r3, [r7, #2]
 80069c8:	4613      	mov	r3, r2
 80069ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80069da:	78bb      	ldrb	r3, [r7, #2]
 80069dc:	883a      	ldrh	r2, [r7, #0]
 80069de:	78f9      	ldrb	r1, [r7, #3]
 80069e0:	f7fb f8e3 	bl	8001baa <HAL_PCD_EP_Open>
 80069e4:	4603      	mov	r3, r0
 80069e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 f90a 	bl	8006c04 <USBD_Get_USB_Status>
 80069f0:	4603      	mov	r3, r0
 80069f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b084      	sub	sp, #16
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	460b      	mov	r3, r1
 8006a08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a18:	78fa      	ldrb	r2, [r7, #3]
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fb f92c 	bl	8001c7a <HAL_PCD_EP_Close>
 8006a22:	4603      	mov	r3, r0
 8006a24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 f8eb 	bl	8006c04 <USBD_Get_USB_Status>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a56:	78fa      	ldrb	r2, [r7, #3]
 8006a58:	4611      	mov	r1, r2
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fb f9ec 	bl	8001e38 <HAL_PCD_EP_SetStall>
 8006a60:	4603      	mov	r3, r0
 8006a62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 f8cc 	bl	8006c04 <USBD_Get_USB_Status>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a70:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	460b      	mov	r3, r1
 8006a84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a94:	78fa      	ldrb	r2, [r7, #3]
 8006a96:	4611      	mov	r1, r2
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fb fa31 	bl	8001f00 <HAL_PCD_EP_ClrStall>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 f8ad 	bl	8006c04 <USBD_Get_USB_Status>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006aca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006acc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	da0b      	bge.n	8006aec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ada:	68f9      	ldr	r1, [r7, #12]
 8006adc:	4613      	mov	r3, r2
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	333e      	adds	r3, #62	; 0x3e
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	e00b      	b.n	8006b04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006aec:	78fb      	ldrb	r3, [r7, #3]
 8006aee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006af2:	68f9      	ldr	r1, [r7, #12]
 8006af4:	4613      	mov	r3, r2
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	4413      	add	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	440b      	add	r3, r1
 8006afe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006b02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b2a:	78fa      	ldrb	r2, [r7, #3]
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fb f816 	bl	8001b60 <HAL_PCD_SetAddress>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 f862 	bl	8006c04 <USBD_Get_USB_Status>
 8006b40:	4603      	mov	r3, r0
 8006b42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b086      	sub	sp, #24
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	603b      	str	r3, [r7, #0]
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006b6c:	7af9      	ldrb	r1, [r7, #11]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	f7fb f917 	bl	8001da4 <HAL_PCD_EP_Transmit>
 8006b76:	4603      	mov	r3, r0
 8006b78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b7a:	7dfb      	ldrb	r3, [r7, #23]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 f841 	bl	8006c04 <USBD_Get_USB_Status>
 8006b82:	4603      	mov	r3, r0
 8006b84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006b86:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	607a      	str	r2, [r7, #4]
 8006b9a:	603b      	str	r3, [r7, #0]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006bae:	7af9      	ldrb	r1, [r7, #11]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	f7fb f8ab 	bl	8001d0e <HAL_PCD_EP_Receive>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 f820 	bl	8006c04 <USBD_Get_USB_Status>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006bc8:	7dbb      	ldrb	r3, [r7, #22]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8006bdc:	4b03      	ldr	r3, [pc, #12]	; (8006bec <USBD_static_malloc+0x18>)
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	20000b9c 	.word	0x20000b9c

08006bf0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]

}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c12:	79fb      	ldrb	r3, [r7, #7]
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d817      	bhi.n	8006c48 <USBD_Get_USB_Status+0x44>
 8006c18:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <USBD_Get_USB_Status+0x1c>)
 8006c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1e:	bf00      	nop
 8006c20:	08006c31 	.word	0x08006c31
 8006c24:	08006c37 	.word	0x08006c37
 8006c28:	08006c3d 	.word	0x08006c3d
 8006c2c:	08006c43 	.word	0x08006c43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	73fb      	strb	r3, [r7, #15]
    break;
 8006c34:	e00b      	b.n	8006c4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c36:	2303      	movs	r3, #3
 8006c38:	73fb      	strb	r3, [r7, #15]
    break;
 8006c3a:	e008      	b.n	8006c4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8006c40:	e005      	b.n	8006c4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c42:	2303      	movs	r3, #3
 8006c44:	73fb      	strb	r3, [r7, #15]
    break;
 8006c46:	e002      	b.n	8006c4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c4c:	bf00      	nop
  }
  return usb_status;
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <__libc_init_array>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	4d0d      	ldr	r5, [pc, #52]	; (8006c94 <__libc_init_array+0x38>)
 8006c60:	4c0d      	ldr	r4, [pc, #52]	; (8006c98 <__libc_init_array+0x3c>)
 8006c62:	1b64      	subs	r4, r4, r5
 8006c64:	10a4      	asrs	r4, r4, #2
 8006c66:	2600      	movs	r6, #0
 8006c68:	42a6      	cmp	r6, r4
 8006c6a:	d109      	bne.n	8006c80 <__libc_init_array+0x24>
 8006c6c:	4d0b      	ldr	r5, [pc, #44]	; (8006c9c <__libc_init_array+0x40>)
 8006c6e:	4c0c      	ldr	r4, [pc, #48]	; (8006ca0 <__libc_init_array+0x44>)
 8006c70:	f000 f820 	bl	8006cb4 <_init>
 8006c74:	1b64      	subs	r4, r4, r5
 8006c76:	10a4      	asrs	r4, r4, #2
 8006c78:	2600      	movs	r6, #0
 8006c7a:	42a6      	cmp	r6, r4
 8006c7c:	d105      	bne.n	8006c8a <__libc_init_array+0x2e>
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}
 8006c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c84:	4798      	blx	r3
 8006c86:	3601      	adds	r6, #1
 8006c88:	e7ee      	b.n	8006c68 <__libc_init_array+0xc>
 8006c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c8e:	4798      	blx	r3
 8006c90:	3601      	adds	r6, #1
 8006c92:	e7f2      	b.n	8006c7a <__libc_init_array+0x1e>
 8006c94:	08006d44 	.word	0x08006d44
 8006c98:	08006d44 	.word	0x08006d44
 8006c9c:	08006d44 	.word	0x08006d44
 8006ca0:	08006d48 	.word	0x08006d48

08006ca4 <memset>:
 8006ca4:	4402      	add	r2, r0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d100      	bne.n	8006cae <memset+0xa>
 8006cac:	4770      	bx	lr
 8006cae:	f803 1b01 	strb.w	r1, [r3], #1
 8006cb2:	e7f9      	b.n	8006ca8 <memset+0x4>

08006cb4 <_init>:
 8006cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb6:	bf00      	nop
 8006cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cba:	bc08      	pop	{r3}
 8006cbc:	469e      	mov	lr, r3
 8006cbe:	4770      	bx	lr

08006cc0 <_fini>:
 8006cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc2:	bf00      	nop
 8006cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc6:	bc08      	pop	{r3}
 8006cc8:	469e      	mov	lr, r3
 8006cca:	4770      	bx	lr

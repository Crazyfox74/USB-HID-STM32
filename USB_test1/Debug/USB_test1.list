
USB_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08009858  08009858  00019858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800993c  0800993c  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  0800993c  0800993c  0001993c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009944  08009944  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009944  08009944  00019944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009948  08009948  00019948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  0800994c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020108  2**0
                  CONTENTS
 10 .bss          00005448  20000108  20000108  00020108  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005550  20005550  00020108  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f8f  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dc7  00000000  00000000  000380c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  0003be90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001178  00000000  00000000  0003d1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006051  00000000  00000000  0003e328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016aea  00000000  00000000  00044379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce6d5  00000000  00000000  0005ae63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00129538  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e1c  00000000  00000000  00129588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000108 	.word	0x20000108
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009840 	.word	0x08009840

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000010c 	.word	0x2000010c
 80001cc:	08009840 	.word	0x08009840

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fa2a 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f83e 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f8a6 	bl	8000630 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

	//=============================================================================
	//Fill TX buffer
	USB_TX_Buffer[0]=0x01;  //ID report (=0x01 for input)
 80004e4:	4b16      	ldr	r3, [pc, #88]	; (8000540 <main+0x6c>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	701a      	strb	r2, [r3, #0]
	USB_TX_Buffer[1]=0x48;  //'H'
 80004ea:	4b15      	ldr	r3, [pc, #84]	; (8000540 <main+0x6c>)
 80004ec:	2248      	movs	r2, #72	; 0x48
 80004ee:	705a      	strb	r2, [r3, #1]
	USB_TX_Buffer[2]=0x65;  //'e'
 80004f0:	4b13      	ldr	r3, [pc, #76]	; (8000540 <main+0x6c>)
 80004f2:	2265      	movs	r2, #101	; 0x65
 80004f4:	709a      	strb	r2, [r3, #2]
	USB_TX_Buffer[3]=0x6c;  //'l'
 80004f6:	4b12      	ldr	r3, [pc, #72]	; (8000540 <main+0x6c>)
 80004f8:	226c      	movs	r2, #108	; 0x6c
 80004fa:	70da      	strb	r2, [r3, #3]
	USB_TX_Buffer[4]=0x6c;  //'l'
 80004fc:	4b10      	ldr	r3, [pc, #64]	; (8000540 <main+0x6c>)
 80004fe:	226c      	movs	r2, #108	; 0x6c
 8000500:	711a      	strb	r2, [r3, #4]
	USB_TX_Buffer[5]=0x6f;  //'o'
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <main+0x6c>)
 8000504:	226f      	movs	r2, #111	; 0x6f
 8000506:	715a      	strb	r2, [r3, #5]
	USB_TX_Buffer[6]=0x21;  //'!'
 8000508:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <main+0x6c>)
 800050a:	2221      	movs	r2, #33	; 0x21
 800050c:	719a      	strb	r2, [r3, #6]
	USB_TX_Buffer[7]=0x00;  // null-terminate string
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <main+0x6c>)
 8000510:	2200      	movs	r2, #0
 8000512:	71da      	strb	r2, [r3, #7]
	//=============================================================================

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000514:	f005 ff82 	bl	800641c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <main+0x70>)
 800051a:	2100      	movs	r1, #0
 800051c:	480a      	ldr	r0, [pc, #40]	; (8000548 <main+0x74>)
 800051e:	f005 ffc7 	bl	80064b0 <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a09      	ldr	r2, [pc, #36]	; (800054c <main+0x78>)
 8000526:	6013      	str	r3, [r2, #0]

  /* creation of LEDTask */
  LEDTaskHandle = osThreadNew(StartLEDTask, NULL, &LEDTask_attributes);
 8000528:	4a09      	ldr	r2, [pc, #36]	; (8000550 <main+0x7c>)
 800052a:	2100      	movs	r1, #0
 800052c:	4809      	ldr	r0, [pc, #36]	; (8000554 <main+0x80>)
 800052e:	f005 ffbf 	bl	80064b0 <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a08      	ldr	r2, [pc, #32]	; (8000558 <main+0x84>)
 8000536:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000538:	f005 ff94 	bl	8006464 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	e7fe      	b.n	800053c <main+0x68>
 800053e:	bf00      	nop
 8000540:	20000170 	.word	0x20000170
 8000544:	080098e4 	.word	0x080098e4
 8000548:	080006f1 	.word	0x080006f1
 800054c:	20000124 	.word	0x20000124
 8000550:	08009908 	.word	0x08009908
 8000554:	08000705 	.word	0x08000705
 8000558:	20000128 	.word	0x20000128

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	; 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f009 f960 	bl	8009830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a27      	ldr	r2, [pc, #156]	; (8000628 <SystemClock_Config+0xcc>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b25      	ldr	r3, [pc, #148]	; (8000628 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <SystemClock_Config+0xd0>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d0:	23a8      	movs	r3, #168	; 0xa8
 80005d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d8:	2307      	movs	r3, #7
 80005da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 ff67 	bl	80024b4 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ec:	f000 f904 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2105      	movs	r1, #5
 800060e:	4618      	mov	r0, r3
 8000610:	f002 f9c8 	bl	80029a4 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061a:	f000 f8ed 	bl	80007f8 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	; 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <MX_GPIO_Init+0xb4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a25      	ldr	r2, [pc, #148]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a1e      	ldr	r2, [pc, #120]	; (80006e4 <MX_GPIO_Init+0xb4>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0308 	and.w	r3, r3, #8
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006a0:	4811      	ldr	r0, [pc, #68]	; (80006e8 <MX_GPIO_Init+0xb8>)
 80006a2:	f000 fc89 	bl	8000fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006a6:	2301      	movs	r3, #1
 80006a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	4619      	mov	r1, r3
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <MX_GPIO_Init+0xbc>)
 80006ba:	f000 fae1 	bl	8000c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006be:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4619      	mov	r1, r3
 80006d6:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_GPIO_Init+0xb8>)
 80006d8:	f000 fad2 	bl	8000c80 <HAL_GPIO_Init>

}
 80006dc:	bf00      	nop
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020c00 	.word	0x40020c00
 80006ec:	40020000 	.word	0x40020000

080006f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80006f8:	f008 fbe0 	bl	8008ebc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f005 ff69 	bl	80065d4 <osDelay>
 8000702:	e7fb      	b.n	80006fc <StartDefaultTask+0xc>

08000704 <StartLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDTask */
void StartLEDTask(void *argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDTask */
  /* Infinite loop */
  for(;;)
  {
	  if(USB_packet_enable==1)
 800070c:	4b34      	ldr	r3, [pc, #208]	; (80007e0 <StartLEDTask+0xdc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d152      	bne.n	80007ba <StartLEDTask+0xb6>
	  {
		  if(USB_RX_Buffer[1]==0x11){
 8000714:	4b33      	ldr	r3, [pc, #204]	; (80007e4 <StartLEDTask+0xe0>)
 8000716:	785b      	ldrb	r3, [r3, #1]
 8000718:	2b11      	cmp	r3, #17
 800071a:	d105      	bne.n	8000728 <StartLEDTask+0x24>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000722:	4831      	ldr	r0, [pc, #196]	; (80007e8 <StartLEDTask+0xe4>)
 8000724:	f000 fc48 	bl	8000fb8 <HAL_GPIO_WritePin>
		  }
		  if(USB_RX_Buffer[1]==0x22){
 8000728:	4b2e      	ldr	r3, [pc, #184]	; (80007e4 <StartLEDTask+0xe0>)
 800072a:	785b      	ldrb	r3, [r3, #1]
 800072c:	2b22      	cmp	r3, #34	; 0x22
 800072e:	d105      	bne.n	800073c <StartLEDTask+0x38>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000736:	482c      	ldr	r0, [pc, #176]	; (80007e8 <StartLEDTask+0xe4>)
 8000738:	f000 fc3e 	bl	8000fb8 <HAL_GPIO_WritePin>
		  }
		  if(USB_RX_Buffer[1]==0x33){
 800073c:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <StartLEDTask+0xe0>)
 800073e:	785b      	ldrb	r3, [r3, #1]
 8000740:	2b33      	cmp	r3, #51	; 0x33
 8000742:	d105      	bne.n	8000750 <StartLEDTask+0x4c>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800074a:	4827      	ldr	r0, [pc, #156]	; (80007e8 <StartLEDTask+0xe4>)
 800074c:	f000 fc34 	bl	8000fb8 <HAL_GPIO_WritePin>
		  }
		  if(USB_RX_Buffer[1]==0x44){
 8000750:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <StartLEDTask+0xe0>)
 8000752:	785b      	ldrb	r3, [r3, #1]
 8000754:	2b44      	cmp	r3, #68	; 0x44
 8000756:	d105      	bne.n	8000764 <StartLEDTask+0x60>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800075e:	4822      	ldr	r0, [pc, #136]	; (80007e8 <StartLEDTask+0xe4>)
 8000760:	f000 fc2a 	bl	8000fb8 <HAL_GPIO_WritePin>
		  }


		  if(USB_RX_Buffer[1]==0x01){
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <StartLEDTask+0xe0>)
 8000766:	785b      	ldrb	r3, [r3, #1]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d105      	bne.n	8000778 <StartLEDTask+0x74>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000772:	481d      	ldr	r0, [pc, #116]	; (80007e8 <StartLEDTask+0xe4>)
 8000774:	f000 fc20 	bl	8000fb8 <HAL_GPIO_WritePin>
		  }
		  if(USB_RX_Buffer[1]==0x02){
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <StartLEDTask+0xe0>)
 800077a:	785b      	ldrb	r3, [r3, #1]
 800077c:	2b02      	cmp	r3, #2
 800077e:	d105      	bne.n	800078c <StartLEDTask+0x88>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000786:	4818      	ldr	r0, [pc, #96]	; (80007e8 <StartLEDTask+0xe4>)
 8000788:	f000 fc16 	bl	8000fb8 <HAL_GPIO_WritePin>
		  }
		  if(USB_RX_Buffer[1]==0x03){
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <StartLEDTask+0xe0>)
 800078e:	785b      	ldrb	r3, [r3, #1]
 8000790:	2b03      	cmp	r3, #3
 8000792:	d105      	bne.n	80007a0 <StartLEDTask+0x9c>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079a:	4813      	ldr	r0, [pc, #76]	; (80007e8 <StartLEDTask+0xe4>)
 800079c:	f000 fc0c 	bl	8000fb8 <HAL_GPIO_WritePin>
		  }
		  if(USB_RX_Buffer[1]==0x04){
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <StartLEDTask+0xe0>)
 80007a2:	785b      	ldrb	r3, [r3, #1]
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	d105      	bne.n	80007b4 <StartLEDTask+0xb0>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ae:	480e      	ldr	r0, [pc, #56]	; (80007e8 <StartLEDTask+0xe4>)
 80007b0:	f000 fc02 	bl	8000fb8 <HAL_GPIO_WritePin>
		  }




		  USB_packet_enable=0;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <StartLEDTask+0xdc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]


	  }

	  if((GPIOA->IDR & GPIO_PIN_0)>0)
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <StartLEDTask+0xe8>)
 80007bc:	691b      	ldr	r3, [r3, #16]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d007      	beq.n	80007d6 <StartLEDTask+0xd2>
			   	 {
						 HAL_Delay(10);
 80007c6:	200a      	movs	r0, #10
 80007c8:	f000 f924 	bl	8000a14 <HAL_Delay>
						 //HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,GPIO_PIN_SET);
						 USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,USB_TX_Buffer,65);
 80007cc:	2241      	movs	r2, #65	; 0x41
 80007ce:	4908      	ldr	r1, [pc, #32]	; (80007f0 <StartLEDTask+0xec>)
 80007d0:	4808      	ldr	r0, [pc, #32]	; (80007f4 <StartLEDTask+0xf0>)
 80007d2:	f004 f96d 	bl	8004ab0 <USBD_CUSTOM_HID_SendReport>
				   }
				 //======
    osDelay(5);
 80007d6:	2005      	movs	r0, #5
 80007d8:	f005 fefc 	bl	80065d4 <osDelay>
	  if(USB_packet_enable==1)
 80007dc:	e796      	b.n	800070c <StartLEDTask+0x8>
 80007de:	bf00      	nop
 80007e0:	200001b4 	.word	0x200001b4
 80007e4:	2000012c 	.word	0x2000012c
 80007e8:	40020c00 	.word	0x40020c00
 80007ec:	40020000 	.word	0x40020000
 80007f0:	20000170 	.word	0x20000170
 80007f4:	20004b10 	.word	0x20004b10

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	e7fe      	b.n	8000800 <Error_Handler+0x8>
	...

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_MspInit+0x54>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	4a11      	ldr	r2, [pc, #68]	; (8000858 <HAL_MspInit+0x54>)
 8000814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000818:	6453      	str	r3, [r2, #68]	; 0x44
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <HAL_MspInit+0x54>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <HAL_MspInit+0x54>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <HAL_MspInit+0x54>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_MspInit+0x54>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	210f      	movs	r1, #15
 8000846:	f06f 0001 	mvn.w	r0, #1
 800084a:	f000 f9e2 	bl	8000c12 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <NMI_Handler+0x4>

08000862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <HardFault_Handler+0x4>

08000868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <MemManage_Handler+0x4>

0800086e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <BusFault_Handler+0x4>

08000874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <UsageFault_Handler+0x4>

0800087a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088c:	f000 f8a2 	bl	80009d4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000890:	f007 faae 	bl	8007df0 <xTaskGetSchedulerState>
 8000894:	4603      	mov	r3, r0
 8000896:	2b01      	cmp	r3, #1
 8000898:	d001      	beq.n	800089e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800089a:	f008 f895 	bl	80089c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <OTG_FS_IRQHandler+0x10>)
 80008aa:	f000 fcee 	bl	800128a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20004fec 	.word	0x20004fec

080008b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <SystemInit+0x20>)
 80008be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <SystemInit+0x20>)
 80008c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000914 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008e2:	490e      	ldr	r1, [pc, #56]	; (800091c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008e4:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008f8:	4c0b      	ldr	r4, [pc, #44]	; (8000928 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000906:	f7ff ffd7 	bl	80008b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090a:	f008 ff5f 	bl	80097cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800090e:	f7ff fde1 	bl	80004d4 <main>
  bx  lr    
 8000912:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000920:	0800994c 	.word	0x0800994c
  ldr r2, =_sbss
 8000924:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8000928:	20005550 	.word	0x20005550

0800092c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <HAL_Init+0x40>)
 800093a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800093e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <HAL_Init+0x40>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_Init+0x40>)
 8000946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800094a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x40>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x40>)
 8000952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f94f 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff ff4e 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023c00 	.word	0x40023c00

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f967 	bl	8000c66 <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 f92f 	bl	8000c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_IncTick+0x20>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_IncTick+0x24>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <HAL_IncTick+0x24>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000008 	.word	0x20000008
 80009f8:	200001b8 	.word	0x200001b8

080009fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <HAL_GetTick+0x14>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	200001b8 	.word	0x200001b8

08000a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a1c:	f7ff ffee 	bl	80009fc <HAL_GetTick>
 8000a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a2c:	d005      	beq.n	8000a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_Delay+0x44>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a3a:	bf00      	nop
 8000a3c:	f7ff ffde 	bl	80009fc <HAL_GetTick>
 8000a40:	4602      	mov	r2, r0
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d8f7      	bhi.n	8000a3c <HAL_Delay+0x28>
  {
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008

08000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	60d3      	str	r3, [r2, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db0b      	blt.n	8000aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 021f 	and.w	r2, r3, #31
 8000ad8:	4907      	ldr	r1, [pc, #28]	; (8000af8 <__NVIC_EnableIRQ+0x38>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	095b      	lsrs	r3, r3, #5
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e100 	.word	0xe000e100

08000afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db0a      	blt.n	8000b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	; (8000b48 <__NVIC_SetPriority+0x4c>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b24:	e00a      	b.n	8000b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4908      	ldr	r1, [pc, #32]	; (8000b4c <__NVIC_SetPriority+0x50>)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	3b04      	subs	r3, #4
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	440b      	add	r3, r1
 8000b3a:	761a      	strb	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	; 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f1c3 0307 	rsb	r3, r3, #7
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	bf28      	it	cs
 8000b6e:	2304      	movcs	r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3304      	adds	r3, #4
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	d902      	bls.n	8000b80 <NVIC_EncodePriority+0x30>
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3b03      	subs	r3, #3
 8000b7e:	e000      	b.n	8000b82 <NVIC_EncodePriority+0x32>
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43d9      	mvns	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	4313      	orrs	r3, r2
         );
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3724      	adds	r7, #36	; 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc8:	d301      	bcc.n	8000bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00f      	b.n	8000bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <SysTick_Config+0x40>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f7ff ff8e 	bl	8000afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <SysTick_Config+0x40>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <SysTick_Config+0x40>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ff29 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c24:	f7ff ff3e 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	6978      	ldr	r0, [r7, #20]
 8000c30:	f7ff ff8e 	bl	8000b50 <NVIC_EncodePriority>
 8000c34:	4602      	mov	r2, r0
 8000c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff5d 	bl	8000afc <__NVIC_SetPriority>
}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff31 	bl	8000ac0 <__NVIC_EnableIRQ>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ffa2 	bl	8000bb8 <SysTick_Config>
 8000c74:	4603      	mov	r3, r0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	; 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	e16b      	b.n	8000f74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	f040 815a 	bne.w	8000f6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 0303 	and.w	r3, r3, #3
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d005      	beq.n	8000cd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d130      	bne.n	8000d34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	2203      	movs	r2, #3
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	68da      	ldr	r2, [r3, #12]
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d08:	2201      	movs	r2, #1
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	091b      	lsrs	r3, r3, #4
 8000d1e:	f003 0201 	and.w	r2, r3, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	2b03      	cmp	r3, #3
 8000d3e:	d017      	beq.n	8000d70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d123      	bne.n	8000dc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	08da      	lsrs	r2, r3, #3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3208      	adds	r2, #8
 8000d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	f003 0307 	and.w	r3, r3, #7
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	220f      	movs	r2, #15
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	691a      	ldr	r2, [r3, #16]
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	08da      	lsrs	r2, r3, #3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3208      	adds	r2, #8
 8000dbe:	69b9      	ldr	r1, [r7, #24]
 8000dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0203 	and.w	r2, r3, #3
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f000 80b4 	beq.w	8000f6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b60      	ldr	r3, [pc, #384]	; (8000f8c <HAL_GPIO_Init+0x30c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a5f      	ldr	r2, [pc, #380]	; (8000f8c <HAL_GPIO_Init+0x30c>)
 8000e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b5d      	ldr	r3, [pc, #372]	; (8000f8c <HAL_GPIO_Init+0x30c>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e22:	4a5b      	ldr	r2, [pc, #364]	; (8000f90 <HAL_GPIO_Init+0x310>)
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	3302      	adds	r3, #2
 8000e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a52      	ldr	r2, [pc, #328]	; (8000f94 <HAL_GPIO_Init+0x314>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d02b      	beq.n	8000ea6 <HAL_GPIO_Init+0x226>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a51      	ldr	r2, [pc, #324]	; (8000f98 <HAL_GPIO_Init+0x318>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d025      	beq.n	8000ea2 <HAL_GPIO_Init+0x222>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a50      	ldr	r2, [pc, #320]	; (8000f9c <HAL_GPIO_Init+0x31c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d01f      	beq.n	8000e9e <HAL_GPIO_Init+0x21e>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4f      	ldr	r2, [pc, #316]	; (8000fa0 <HAL_GPIO_Init+0x320>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d019      	beq.n	8000e9a <HAL_GPIO_Init+0x21a>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4e      	ldr	r2, [pc, #312]	; (8000fa4 <HAL_GPIO_Init+0x324>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d013      	beq.n	8000e96 <HAL_GPIO_Init+0x216>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4d      	ldr	r2, [pc, #308]	; (8000fa8 <HAL_GPIO_Init+0x328>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d00d      	beq.n	8000e92 <HAL_GPIO_Init+0x212>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4c      	ldr	r2, [pc, #304]	; (8000fac <HAL_GPIO_Init+0x32c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d007      	beq.n	8000e8e <HAL_GPIO_Init+0x20e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4b      	ldr	r2, [pc, #300]	; (8000fb0 <HAL_GPIO_Init+0x330>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d101      	bne.n	8000e8a <HAL_GPIO_Init+0x20a>
 8000e86:	2307      	movs	r3, #7
 8000e88:	e00e      	b.n	8000ea8 <HAL_GPIO_Init+0x228>
 8000e8a:	2308      	movs	r3, #8
 8000e8c:	e00c      	b.n	8000ea8 <HAL_GPIO_Init+0x228>
 8000e8e:	2306      	movs	r3, #6
 8000e90:	e00a      	b.n	8000ea8 <HAL_GPIO_Init+0x228>
 8000e92:	2305      	movs	r3, #5
 8000e94:	e008      	b.n	8000ea8 <HAL_GPIO_Init+0x228>
 8000e96:	2304      	movs	r3, #4
 8000e98:	e006      	b.n	8000ea8 <HAL_GPIO_Init+0x228>
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e004      	b.n	8000ea8 <HAL_GPIO_Init+0x228>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e002      	b.n	8000ea8 <HAL_GPIO_Init+0x228>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <HAL_GPIO_Init+0x228>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	69fa      	ldr	r2, [r7, #28]
 8000eaa:	f002 0203 	and.w	r2, r2, #3
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	4093      	lsls	r3, r2
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb8:	4935      	ldr	r1, [pc, #212]	; (8000f90 <HAL_GPIO_Init+0x310>)
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ec6:	4b3b      	ldr	r3, [pc, #236]	; (8000fb4 <HAL_GPIO_Init+0x334>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eea:	4a32      	ldr	r2, [pc, #200]	; (8000fb4 <HAL_GPIO_Init+0x334>)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ef0:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <HAL_GPIO_Init+0x334>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f14:	4a27      	ldr	r2, [pc, #156]	; (8000fb4 <HAL_GPIO_Init+0x334>)
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f1a:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <HAL_GPIO_Init+0x334>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f3e:	4a1d      	ldr	r2, [pc, #116]	; (8000fb4 <HAL_GPIO_Init+0x334>)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <HAL_GPIO_Init+0x334>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f68:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <HAL_GPIO_Init+0x334>)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3301      	adds	r3, #1
 8000f72:	61fb      	str	r3, [r7, #28]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	2b0f      	cmp	r3, #15
 8000f78:	f67f ae90 	bls.w	8000c9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40013800 	.word	0x40013800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	40020800 	.word	0x40020800
 8000fa0:	40020c00 	.word	0x40020c00
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40021400 	.word	0x40021400
 8000fac:	40021800 	.word	0x40021800
 8000fb0:	40021c00 	.word	0x40021c00
 8000fb4:	40013c00 	.word	0x40013c00

08000fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc8:	787b      	ldrb	r3, [r7, #1]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fd4:	e003      	b.n	8000fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	041a      	lsls	r2, r3, #16
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	619a      	str	r2, [r3, #24]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fec:	b08f      	sub	sp, #60	; 0x3c
 8000fee:	af0a      	add	r7, sp, #40	; 0x28
 8000ff0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e10f      	b.n	800121c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d106      	bne.n	800101c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f008 f8d6 	bl	80091c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2203      	movs	r2, #3
 8001020:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f001 ffbf 	bl	8002fbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	687e      	ldr	r6, [r7, #4]
 8001048:	466d      	mov	r5, sp
 800104a:	f106 0410 	add.w	r4, r6, #16
 800104e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001056:	e894 0003 	ldmia.w	r4, {r0, r1}
 800105a:	e885 0003 	stmia.w	r5, {r0, r1}
 800105e:	1d33      	adds	r3, r6, #4
 8001060:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001062:	6838      	ldr	r0, [r7, #0]
 8001064:	f001 fe96 	bl	8002d94 <USB_CoreInit>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2202      	movs	r2, #2
 8001072:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e0d0      	b.n	800121c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f001 ffad 	bl	8002fe0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	e04a      	b.n	8001122 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4413      	add	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	440b      	add	r3, r1
 800109a:	333d      	adds	r3, #61	; 0x3d
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	333c      	adds	r3, #60	; 0x3c
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	b298      	uxth	r0, r3
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	3344      	adds	r3, #68	; 0x44
 80010c8:	4602      	mov	r2, r0
 80010ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	4413      	add	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	3340      	adds	r3, #64	; 0x40
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	3348      	adds	r3, #72	; 0x48
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	334c      	adds	r3, #76	; 0x4c
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	3354      	adds	r3, #84	; 0x54
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	3301      	adds	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	d3af      	bcc.n	800108c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e044      	b.n	80011bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001132:	7bfa      	ldrb	r2, [r7, #15]
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4413      	add	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	440b      	add	r3, r1
 8001140:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001148:	7bfa      	ldrb	r2, [r7, #15]
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4413      	add	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	440b      	add	r3, r1
 8001156:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800115a:	7bfa      	ldrb	r2, [r7, #15]
 800115c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800115e:	7bfa      	ldrb	r2, [r7, #15]
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	4613      	mov	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4413      	add	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	440b      	add	r3, r1
 8001182:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800118a:	7bfa      	ldrb	r2, [r7, #15]
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	4413      	add	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	440b      	add	r3, r1
 8001198:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	3301      	adds	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d3b5      	bcc.n	8001132 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	687e      	ldr	r6, [r7, #4]
 80011ce:	466d      	mov	r5, sp
 80011d0:	f106 0410 	add.w	r4, r6, #16
 80011d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80011e4:	1d33      	adds	r3, r6, #4
 80011e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e8:	6838      	ldr	r0, [r7, #0]
 80011ea:	f001 ff45 	bl	8003078 <USB_DevInit>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2202      	movs	r2, #2
 80011f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e00d      	b.n	800121c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f003 f894 	bl	8004342 <USB_DevDisconnect>

  return HAL_OK;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001224 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001238:	2b01      	cmp	r3, #1
 800123a:	d101      	bne.n	8001240 <HAL_PCD_Start+0x1c>
 800123c:	2302      	movs	r3, #2
 800123e:	e020      	b.n	8001282 <HAL_PCD_Start+0x5e>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124c:	2b01      	cmp	r3, #1
 800124e:	d109      	bne.n	8001264 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001254:	2b01      	cmp	r3, #1
 8001256:	d005      	beq.n	8001264 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f001 fe97 	bl	8002f9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f003 f844 	bl	8004300 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800128a:	b590      	push	{r4, r7, lr}
 800128c:	b08d      	sub	sp, #52	; 0x34
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 f902 	bl	80044aa <USB_GetMode>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f040 848a 	bne.w	8001bc2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 f866 	bl	8004384 <USB_ReadInterrupts>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8480 	beq.w	8001bc0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 f853 	bl	8004384 <USB_ReadInterrupts>
 80012de:	4603      	mov	r3, r0
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d107      	bne.n	80012f8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f002 0202 	and.w	r2, r2, #2
 80012f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f003 f841 	bl	8004384 <USB_ReadInterrupts>
 8001302:	4603      	mov	r3, r0
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	2b10      	cmp	r3, #16
 800130a:	d161      	bne.n	80013d0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0210 	bic.w	r2, r2, #16
 800131a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	f003 020f 	and.w	r2, r3, #15
 8001328:	4613      	mov	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	3304      	adds	r3, #4
 800133a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	0c5b      	lsrs	r3, r3, #17
 8001340:	f003 030f 	and.w	r3, r3, #15
 8001344:	2b02      	cmp	r3, #2
 8001346:	d124      	bne.n	8001392 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d035      	beq.n	80013c0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800135e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001362:	b29b      	uxth	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	6a38      	ldr	r0, [r7, #32]
 8001368:	f002 fe78 	bl	800405c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001378:	441a      	add	r2, r3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	6a1a      	ldr	r2, [r3, #32]
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800138a:	441a      	add	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	621a      	str	r2, [r3, #32]
 8001390:	e016      	b.n	80013c0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	0c5b      	lsrs	r3, r3, #17
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	2b06      	cmp	r3, #6
 800139c:	d110      	bne.n	80013c0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013a4:	2208      	movs	r2, #8
 80013a6:	4619      	mov	r1, r3
 80013a8:	6a38      	ldr	r0, [r7, #32]
 80013aa:	f002 fe57 	bl	800405c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	6a1a      	ldr	r2, [r3, #32]
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	091b      	lsrs	r3, r3, #4
 80013b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ba:	441a      	add	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699a      	ldr	r2, [r3, #24]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0210 	orr.w	r2, r2, #16
 80013ce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f002 ffd5 	bl	8004384 <USB_ReadInterrupts>
 80013da:	4603      	mov	r3, r0
 80013dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013e4:	f040 80a7 	bne.w	8001536 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f002 ffda 	bl	80043aa <USB_ReadDevAllOutEpInterrupt>
 80013f6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013f8:	e099      	b.n	800152e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 808e 	beq.w	8001522 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f002 fffe 	bl	8004412 <USB_ReadDevOutEPInterrupt>
 8001416:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00c      	beq.n	800143c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	015a      	lsls	r2, r3, #5
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	4413      	add	r3, r2
 800142a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800142e:	461a      	mov	r2, r3
 8001430:	2301      	movs	r3, #1
 8001432:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 feaa 	bl	8002190 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00c      	beq.n	8001460 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	015a      	lsls	r2, r3, #5
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	4413      	add	r3, r2
 800144e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001452:	461a      	mov	r2, r3
 8001454:	2308      	movs	r3, #8
 8001456:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001458:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 ff80 	bl	8002360 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	2b00      	cmp	r3, #0
 8001468:	d008      	beq.n	800147c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	015a      	lsls	r2, r3, #5
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	4413      	add	r3, r2
 8001472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001476:	461a      	mov	r2, r3
 8001478:	2310      	movs	r3, #16
 800147a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d030      	beq.n	80014e8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148e:	2b80      	cmp	r3, #128	; 0x80
 8001490:	d109      	bne.n	80014a6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	69fa      	ldr	r2, [r7, #28]
 800149c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a8:	4613      	mov	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4413      	add	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	3304      	adds	r3, #4
 80014ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	78db      	ldrb	r3, [r3, #3]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d108      	bne.n	80014d6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	2200      	movs	r2, #0
 80014c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4619      	mov	r1, r3
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f007 ff7f 	bl	80093d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014e2:	461a      	mov	r2, r3
 80014e4:	2302      	movs	r3, #2
 80014e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	f003 0320 	and.w	r3, r3, #32
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d008      	beq.n	8001504 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	015a      	lsls	r2, r3, #5
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014fe:	461a      	mov	r2, r3
 8001500:	2320      	movs	r3, #32
 8001502:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d009      	beq.n	8001522 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	015a      	lsls	r2, r3, #5
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	4413      	add	r3, r2
 8001516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800151a:	461a      	mov	r2, r3
 800151c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001520:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	3301      	adds	r3, #1
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152a:	085b      	lsrs	r3, r3, #1
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001530:	2b00      	cmp	r3, #0
 8001532:	f47f af62 	bne.w	80013fa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f002 ff22 	bl	8004384 <USB_ReadInterrupts>
 8001540:	4603      	mov	r3, r0
 8001542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001546:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800154a:	f040 80db 	bne.w	8001704 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f002 ff43 	bl	80043de <USB_ReadDevAllInEpInterrupt>
 8001558:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800155e:	e0cd      	b.n	80016fc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 80c2 	beq.w	80016f0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f002 ff69 	bl	800444e <USB_ReadDevInEPInterrupt>
 800157c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d057      	beq.n	8001638 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	2201      	movs	r2, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800159c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69f9      	ldr	r1, [r7, #28]
 80015a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015a8:	4013      	ands	r3, r2
 80015aa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	015a      	lsls	r2, r3, #5
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	4413      	add	r3, r2
 80015b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b8:	461a      	mov	r2, r3
 80015ba:	2301      	movs	r3, #1
 80015bc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d132      	bne.n	800162c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	334c      	adds	r3, #76	; 0x4c
 80015d6:	6819      	ldr	r1, [r3, #0]
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015dc:	4613      	mov	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4413      	add	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4403      	add	r3, r0
 80015e6:	3348      	adds	r3, #72	; 0x48
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4419      	add	r1, r3
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f0:	4613      	mov	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4403      	add	r3, r0
 80015fa:	334c      	adds	r3, #76	; 0x4c
 80015fc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	2b00      	cmp	r3, #0
 8001602:	d113      	bne.n	800162c <HAL_PCD_IRQHandler+0x3a2>
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001608:	4613      	mov	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	3354      	adds	r3, #84	; 0x54
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d108      	bne.n	800162c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001624:	461a      	mov	r2, r3
 8001626:	2101      	movs	r1, #1
 8001628:	f002 ff70 	bl	800450c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4619      	mov	r1, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f007 fe49 	bl	80092ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	015a      	lsls	r2, r3, #5
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	4413      	add	r3, r2
 800164a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800164e:	461a      	mov	r2, r3
 8001650:	2308      	movs	r3, #8
 8001652:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	2b00      	cmp	r3, #0
 800165c:	d008      	beq.n	8001670 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4413      	add	r3, r2
 8001666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800166a:	461a      	mov	r2, r3
 800166c:	2310      	movs	r3, #16
 800166e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001676:	2b00      	cmp	r3, #0
 8001678:	d008      	beq.n	800168c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	015a      	lsls	r2, r3, #5
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	4413      	add	r3, r2
 8001682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001686:	461a      	mov	r2, r3
 8001688:	2340      	movs	r3, #64	; 0x40
 800168a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d023      	beq.n	80016de <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001696:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001698:	6a38      	ldr	r0, [r7, #32]
 800169a:	f001 fe51 	bl	8003340 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800169e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a0:	4613      	mov	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	3338      	adds	r3, #56	; 0x38
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	3304      	adds	r3, #4
 80016b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	78db      	ldrb	r3, [r3, #3]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d108      	bne.n	80016cc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2200      	movs	r2, #0
 80016be:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	4619      	mov	r1, r3
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f007 fe96 	bl	80093f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	015a      	lsls	r2, r3, #5
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	4413      	add	r3, r2
 80016d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016d8:	461a      	mov	r2, r3
 80016da:	2302      	movs	r3, #2
 80016dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 fcc3 	bl	8002076 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	3301      	adds	r3, #1
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f47f af2e 	bne.w	8001560 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f002 fe3b 	bl	8004384 <USB_ReadInterrupts>
 800170e:	4603      	mov	r3, r0
 8001710:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001718:	d122      	bne.n	8001760 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001728:	f023 0301 	bic.w	r3, r3, #1
 800172c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001734:	2b01      	cmp	r3, #1
 8001736:	d108      	bne.n	800174a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001740:	2100      	movs	r1, #0
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 feaa 	bl	800249c <HAL_PCDEx_LPM_Callback>
 8001748:	e002      	b.n	8001750 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f007 fe34 	bl	80093b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695a      	ldr	r2, [r3, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800175e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fe0d 	bl	8004384 <USB_ReadInterrupts>
 800176a:	4603      	mov	r3, r0
 800176c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001774:	d112      	bne.n	800179c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b01      	cmp	r3, #1
 8001784:	d102      	bne.n	800178c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f007 fdf0 	bl	800936c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	695a      	ldr	r2, [r3, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800179a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f002 fdef 	bl	8004384 <USB_ReadInterrupts>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017b0:	f040 80b7 	bne.w	8001922 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2110      	movs	r1, #16
 80017ce:	4618      	mov	r0, r3
 80017d0:	f001 fdb6 	bl	8003340 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d8:	e046      	b.n	8001868 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017dc:	015a      	lsls	r2, r3, #5
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017e6:	461a      	mov	r2, r3
 80017e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f0:	015a      	lsls	r2, r3, #5
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017fe:	0151      	lsls	r1, r2, #5
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	440a      	add	r2, r1
 8001804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001808:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800180c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001810:	015a      	lsls	r2, r3, #5
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	4413      	add	r3, r2
 8001816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800181a:	461a      	mov	r2, r3
 800181c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001820:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	015a      	lsls	r2, r3, #5
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	4413      	add	r3, r2
 800182a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001832:	0151      	lsls	r1, r2, #5
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	440a      	add	r2, r1
 8001838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800183c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001840:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001844:	015a      	lsls	r2, r3, #5
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	4413      	add	r3, r2
 800184a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001852:	0151      	lsls	r1, r2, #5
 8001854:	69fa      	ldr	r2, [r7, #28]
 8001856:	440a      	add	r2, r1
 8001858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800185c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001860:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001864:	3301      	adds	r3, #1
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800186e:	429a      	cmp	r2, r3
 8001870:	d3b3      	bcc.n	80017da <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001880:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001884:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	2b00      	cmp	r3, #0
 800188c:	d016      	beq.n	80018bc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001898:	69fa      	ldr	r2, [r7, #28]
 800189a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800189e:	f043 030b 	orr.w	r3, r3, #11
 80018a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b4:	f043 030b 	orr.w	r3, r3, #11
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	e015      	b.n	80018e8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018ce:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018d2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018e2:	f043 030b 	orr.w	r3, r3, #11
 80018e6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018fa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800190c:	461a      	mov	r2, r3
 800190e:	f002 fdfd 	bl	800450c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	695a      	ldr	r2, [r3, #20]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f002 fd2c 	bl	8004384 <USB_ReadInterrupts>
 800192c:	4603      	mov	r3, r0
 800192e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001936:	d124      	bne.n	8001982 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f002 fdc2 	bl	80044c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f001 fd77 	bl	800343a <USB_GetDevSpeed>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681c      	ldr	r4, [r3, #0]
 8001958:	f001 fa10 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 800195c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001962:	b2db      	uxtb	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	4620      	mov	r0, r4
 8001968:	f001 fa76 	bl	8002e58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f007 fcd4 	bl	800931a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	695a      	ldr	r2, [r3, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001980:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f002 fcfc 	bl	8004384 <USB_ReadInterrupts>
 800198c:	4603      	mov	r3, r0
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b08      	cmp	r3, #8
 8001994:	d10a      	bne.n	80019ac <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f007 fcb1 	bl	80092fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f002 0208 	and.w	r2, r2, #8
 80019aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f002 fce7 	bl	8004384 <USB_ReadInterrupts>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019bc:	2b80      	cmp	r3, #128	; 0x80
 80019be:	d122      	bne.n	8001a06 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019cc:	2301      	movs	r3, #1
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
 80019d0:	e014      	b.n	80019fc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d6:	4613      	mov	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d105      	bne.n	80019f6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	4619      	mov	r1, r3
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fb0f 	bl	8002014 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	3301      	adds	r3, #1
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d3e5      	bcc.n	80019d2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 fcba 	bl	8004384 <USB_ReadInterrupts>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a1a:	d13b      	bne.n	8001a94 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a20:	e02b      	b.n	8001a7a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	015a      	lsls	r2, r3, #5
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	4413      	add	r3, r2
 8001a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	3340      	adds	r3, #64	; 0x40
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d115      	bne.n	8001a74 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a48:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	da12      	bge.n	8001a74 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a52:	4613      	mov	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4413      	add	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	333f      	adds	r3, #63	; 0x3f
 8001a5e:	2201      	movs	r2, #1
 8001a60:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 fad0 	bl	8002014 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	3301      	adds	r3, #1
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d3ce      	bcc.n	8001a22 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f002 fc73 	bl	8004384 <USB_ReadInterrupts>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001aa8:	d155      	bne.n	8001b56 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aaa:	2301      	movs	r3, #1
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
 8001aae:	e045      	b.n	8001b3c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	015a      	lsls	r2, r3, #5
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d12e      	bne.n	8001b36 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ad8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	da2b      	bge.n	8001b36 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001aea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d121      	bne.n	8001b36 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10a      	bne.n	8001b36 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b32:	6053      	str	r3, [r2, #4]
            break;
 8001b34:	e007      	b.n	8001b46 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	3301      	adds	r3, #1
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d3b4      	bcc.n	8001ab0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695a      	ldr	r2, [r3, #20]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f002 fc12 	bl	8004384 <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b6a:	d10a      	bne.n	8001b82 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f007 fc55 	bl	800941c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	695a      	ldr	r2, [r3, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 fbfc 	bl	8004384 <USB_ReadInterrupts>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d115      	bne.n	8001bc2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f007 fc45 	bl	8009438 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6859      	ldr	r1, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	e000      	b.n	8001bc2 <HAL_PCD_IRQHandler+0x938>
      return;
 8001bc0:	bf00      	nop
    }
  }
}
 8001bc2:	3734      	adds	r7, #52	; 0x34
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd90      	pop	{r4, r7, pc}

08001bc8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_PCD_SetAddress+0x1a>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e013      	b.n	8001c0a <HAL_PCD_SetAddress+0x42>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	78fa      	ldrb	r2, [r7, #3]
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f002 fb5a 	bl	80042b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	4608      	mov	r0, r1
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4603      	mov	r3, r0
 8001c22:	70fb      	strb	r3, [r7, #3]
 8001c24:	460b      	mov	r3, r1
 8001c26:	803b      	strh	r3, [r7, #0]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	da0f      	bge.n	8001c58 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	f003 020f 	and.w	r2, r3, #15
 8001c3e:	4613      	mov	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	3338      	adds	r3, #56	; 0x38
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2201      	movs	r2, #1
 8001c54:	705a      	strb	r2, [r3, #1]
 8001c56:	e00f      	b.n	8001c78 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	f003 020f 	and.w	r2, r3, #15
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3304      	adds	r3, #4
 8001c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c84:	883a      	ldrh	r2, [r7, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	78ba      	ldrb	r2, [r7, #2]
 8001c8e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	785b      	ldrb	r3, [r3, #1]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d004      	beq.n	8001ca2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ca2:	78bb      	ldrb	r3, [r7, #2]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d102      	bne.n	8001cae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_PCD_EP_Open+0xaa>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e00e      	b.n	8001cda <HAL_PCD_EP_Open+0xc8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68f9      	ldr	r1, [r7, #12]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 fbda 	bl	8003484 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001cd8:	7afb      	ldrb	r3, [r7, #11]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	460b      	mov	r3, r1
 8001cec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	da0f      	bge.n	8001d16 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	f003 020f 	and.w	r2, r3, #15
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	3338      	adds	r3, #56	; 0x38
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2201      	movs	r2, #1
 8001d12:	705a      	strb	r2, [r3, #1]
 8001d14:	e00f      	b.n	8001d36 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	f003 020f 	and.w	r2, r3, #15
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_PCD_EP_Close+0x6e>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e00e      	b.n	8001d6e <HAL_PCD_EP_Close+0x8c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68f9      	ldr	r1, [r7, #12]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f001 fc18 	bl	8003594 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	603b      	str	r3, [r7, #0]
 8001d82:	460b      	mov	r3, r1
 8001d84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d86:	7afb      	ldrb	r3, [r7, #11]
 8001d88:	f003 020f 	and.w	r2, r3, #15
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	2200      	movs	r2, #0
 8001db0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2200      	movs	r2, #0
 8001db6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001db8:	7afb      	ldrb	r3, [r7, #11]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d102      	bne.n	8001dd2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dd2:	7afb      	ldrb	r3, [r7, #11]
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	6979      	ldr	r1, [r7, #20]
 8001dea:	f001 fef7 	bl	8003bdc <USB_EP0StartXfer>
 8001dee:	e008      	b.n	8001e02 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	6979      	ldr	r1, [r7, #20]
 8001dfe:	f001 fca5 	bl	800374c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e1c:	7afb      	ldrb	r3, [r7, #11]
 8001e1e:	f003 020f 	and.w	r2, r3, #15
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	3338      	adds	r3, #56	; 0x38
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	3304      	adds	r3, #4
 8001e32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	2200      	movs	r2, #0
 8001e44:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e4c:	7afb      	ldrb	r3, [r7, #11]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d102      	bne.n	8001e66 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e66:	7afb      	ldrb	r3, [r7, #11]
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d109      	bne.n	8001e84 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	6979      	ldr	r1, [r7, #20]
 8001e7e:	f001 fead 	bl	8003bdc <USB_EP0StartXfer>
 8001e82:	e008      	b.n	8001e96 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	6979      	ldr	r1, [r7, #20]
 8001e92:	f001 fc5b 	bl	800374c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	f003 020f 	and.w	r2, r3, #15
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d901      	bls.n	8001ebe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e050      	b.n	8001f60 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ebe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	da0f      	bge.n	8001ee6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ec6:	78fb      	ldrb	r3, [r7, #3]
 8001ec8:	f003 020f 	and.w	r2, r3, #15
 8001ecc:	4613      	mov	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	3338      	adds	r3, #56	; 0x38
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	3304      	adds	r3, #4
 8001edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	705a      	strb	r2, [r3, #1]
 8001ee4:	e00d      	b.n	8001f02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3304      	adds	r3, #4
 8001efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_PCD_EP_SetStall+0x82>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e01e      	b.n	8001f60 <HAL_PCD_EP_SetStall+0xc0>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68f9      	ldr	r1, [r7, #12]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f002 f8eb 	bl	800410c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10a      	bne.n	8001f56 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	b2d9      	uxtb	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f50:	461a      	mov	r2, r3
 8001f52:	f002 fadb 	bl	800450c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	f003 020f 	and.w	r2, r3, #15
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d901      	bls.n	8001f86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e042      	b.n	800200c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	da0f      	bge.n	8001fae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	f003 020f 	and.w	r2, r3, #15
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	3338      	adds	r3, #56	; 0x38
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	705a      	strb	r2, [r3, #1]
 8001fac:	e00f      	b.n	8001fce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	f003 020f 	and.w	r2, r3, #15
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_PCD_EP_ClrStall+0x86>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e00e      	b.n	800200c <HAL_PCD_EP_ClrStall+0xa4>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68f9      	ldr	r1, [r7, #12]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f002 f8f3 	bl	80041e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002020:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002024:	2b00      	cmp	r3, #0
 8002026:	da0c      	bge.n	8002042 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	f003 020f 	and.w	r2, r3, #15
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	3338      	adds	r3, #56	; 0x38
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	4413      	add	r3, r2
 800203c:	3304      	adds	r3, #4
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e00c      	b.n	800205c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	f003 020f 	and.w	r2, r3, #15
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	3304      	adds	r3, #4
 800205a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68f9      	ldr	r1, [r7, #12]
 8002062:	4618      	mov	r0, r3
 8002064:	f001 ff12 	bl	8003e8c <USB_EPStopXfer>
 8002068:	4603      	mov	r3, r0
 800206a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800206c:	7afb      	ldrb	r3, [r7, #11]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b08a      	sub	sp, #40	; 0x28
 800207a:	af02      	add	r7, sp, #8
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	3338      	adds	r3, #56	; 0x38
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	3304      	adds	r3, #4
 800209c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a1a      	ldr	r2, [r3, #32]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d901      	bls.n	80020ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e06c      	b.n	8002188 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	699a      	ldr	r2, [r3, #24]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d902      	bls.n	80020ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3303      	adds	r3, #3
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020d2:	e02b      	b.n	800212c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	699a      	ldr	r2, [r3, #24]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d902      	bls.n	80020f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	3303      	adds	r3, #3
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6919      	ldr	r1, [r3, #16]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002108:	b2db      	uxtb	r3, r3
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	4603      	mov	r3, r0
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f001 ff66 	bl	8003fe0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	441a      	add	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a1a      	ldr	r2, [r3, #32]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	441a      	add	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	b29b      	uxth	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	429a      	cmp	r2, r3
 8002140:	d809      	bhi.n	8002156 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a1a      	ldr	r2, [r3, #32]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800214a:	429a      	cmp	r2, r3
 800214c:	d203      	bcs.n	8002156 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1be      	bne.n	80020d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	429a      	cmp	r2, r3
 8002160:	d811      	bhi.n	8002186 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	2201      	movs	r2, #1
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	43db      	mvns	r3, r3
 800217c:	6939      	ldr	r1, [r7, #16]
 800217e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002182:	4013      	ands	r3, r2
 8002184:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3720      	adds	r7, #32
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	333c      	adds	r3, #60	; 0x3c
 80021a8:	3304      	adds	r3, #4
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d17b      	bne.n	80022be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d015      	beq.n	80021fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	4a61      	ldr	r2, [pc, #388]	; (8002358 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	f240 80b9 	bls.w	800234c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80b3 	beq.w	800234c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f2:	461a      	mov	r2, r3
 80021f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f8:	6093      	str	r3, [r2, #8]
 80021fa:	e0a7      	b.n	800234c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	4413      	add	r3, r2
 800220e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002212:	461a      	mov	r2, r3
 8002214:	2320      	movs	r3, #32
 8002216:	6093      	str	r3, [r2, #8]
 8002218:	e098      	b.n	800234c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002220:	2b00      	cmp	r3, #0
 8002222:	f040 8093 	bne.w	800234c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	4a4b      	ldr	r2, [pc, #300]	; (8002358 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d90f      	bls.n	800224e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	4413      	add	r3, r2
 8002240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002244:	461a      	mov	r2, r3
 8002246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800224a:	6093      	str	r3, [r2, #8]
 800224c:	e07e      	b.n	800234c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	4413      	add	r3, r2
 8002260:	3304      	adds	r3, #4
 8002262:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	69da      	ldr	r2, [r3, #28]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	0159      	lsls	r1, r3, #5
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	440b      	add	r3, r1
 8002270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227a:	1ad2      	subs	r2, r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d114      	bne.n	80022b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002298:	461a      	mov	r2, r3
 800229a:	2101      	movs	r1, #1
 800229c:	f002 f936 	bl	800450c <USB_EP0_OutStart>
 80022a0:	e006      	b.n	80022b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	441a      	add	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4619      	mov	r1, r3
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f006 ffec 	bl	8009294 <HAL_PCD_DataOutStageCallback>
 80022bc:	e046      	b.n	800234c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	4a26      	ldr	r2, [pc, #152]	; (800235c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d124      	bne.n	8002310 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022dc:	461a      	mov	r2, r3
 80022de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022e2:	6093      	str	r3, [r2, #8]
 80022e4:	e032      	b.n	800234c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022fc:	461a      	mov	r2, r3
 80022fe:	2320      	movs	r3, #32
 8002300:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	4619      	mov	r1, r3
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f006 ffc3 	bl	8009294 <HAL_PCD_DataOutStageCallback>
 800230e:	e01d      	b.n	800234c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d114      	bne.n	8002340 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	4613      	mov	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4413      	add	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d108      	bne.n	8002340 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002338:	461a      	mov	r2, r3
 800233a:	2100      	movs	r1, #0
 800233c:	f002 f8e6 	bl	800450c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	4619      	mov	r1, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f006 ffa4 	bl	8009294 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	4f54300a 	.word	0x4f54300a
 800235c:	4f54310a 	.word	0x4f54310a

08002360 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	333c      	adds	r3, #60	; 0x3c
 8002378:	3304      	adds	r3, #4
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4413      	add	r3, r2
 8002386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4a15      	ldr	r2, [pc, #84]	; (80023e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d90e      	bls.n	80023b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800239c:	2b00      	cmp	r3, #0
 800239e:	d009      	beq.n	80023b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ac:	461a      	mov	r2, r3
 80023ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f006 ff5b 	bl	8009270 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d90c      	bls.n	80023dc <PCD_EP_OutSetupPacket_int+0x7c>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d108      	bne.n	80023dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023d4:	461a      	mov	r2, r3
 80023d6:	2101      	movs	r1, #1
 80023d8:	f002 f898 	bl	800450c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	4f54300a 	.word	0x4f54300a

080023ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	70fb      	strb	r3, [r7, #3]
 80023f8:	4613      	mov	r3, r2
 80023fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d107      	bne.n	800241a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800240a:	883b      	ldrh	r3, [r7, #0]
 800240c:	0419      	lsls	r1, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	430a      	orrs	r2, r1
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
 8002418:	e028      	b.n	800246c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	4413      	add	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]
 800242c:	e00d      	b.n	800244a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	3340      	adds	r3, #64	; 0x40
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	4413      	add	r3, r2
 8002442:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	3301      	adds	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	7bfa      	ldrb	r2, [r7, #15]
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	3b01      	subs	r3, #1
 8002450:	429a      	cmp	r2, r3
 8002452:	d3ec      	bcc.n	800242e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002454:	883b      	ldrh	r3, [r7, #0]
 8002456:	0418      	lsls	r0, r3, #16
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6819      	ldr	r1, [r3, #0]
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	3b01      	subs	r3, #1
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	4302      	orrs	r2, r0
 8002464:	3340      	adds	r3, #64	; 0x40
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e267      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d075      	beq.n	80025be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024d2:	4b88      	ldr	r3, [pc, #544]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d00c      	beq.n	80024f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024de:	4b85      	ldr	r3, [pc, #532]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d112      	bne.n	8002510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ea:	4b82      	ldr	r3, [pc, #520]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024f6:	d10b      	bne.n	8002510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	4b7e      	ldr	r3, [pc, #504]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d05b      	beq.n	80025bc <HAL_RCC_OscConfig+0x108>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d157      	bne.n	80025bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e242      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002518:	d106      	bne.n	8002528 <HAL_RCC_OscConfig+0x74>
 800251a:	4b76      	ldr	r3, [pc, #472]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a75      	ldr	r2, [pc, #468]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e01d      	b.n	8002564 <HAL_RCC_OscConfig+0xb0>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002530:	d10c      	bne.n	800254c <HAL_RCC_OscConfig+0x98>
 8002532:	4b70      	ldr	r3, [pc, #448]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6f      	ldr	r2, [pc, #444]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b6d      	ldr	r3, [pc, #436]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a6c      	ldr	r2, [pc, #432]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	e00b      	b.n	8002564 <HAL_RCC_OscConfig+0xb0>
 800254c:	4b69      	ldr	r3, [pc, #420]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a68      	ldr	r2, [pc, #416]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4b66      	ldr	r3, [pc, #408]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a65      	ldr	r2, [pc, #404]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 800255e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe fa46 	bl	80009fc <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002574:	f7fe fa42 	bl	80009fc <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	; 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e207      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	4b5b      	ldr	r3, [pc, #364]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0xc0>
 8002592:	e014      	b.n	80025be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe fa32 	bl	80009fc <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259c:	f7fe fa2e 	bl	80009fc <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e1f3      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ae:	4b51      	ldr	r3, [pc, #324]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0xe8>
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d063      	beq.n	8002692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ca:	4b4a      	ldr	r3, [pc, #296]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00b      	beq.n	80025ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d6:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d11c      	bne.n	800261c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025e2:	4b44      	ldr	r3, [pc, #272]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d116      	bne.n	800261c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ee:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_RCC_OscConfig+0x152>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e1c7      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002606:	4b3b      	ldr	r3, [pc, #236]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4937      	ldr	r1, [pc, #220]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261a:	e03a      	b.n	8002692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002624:	4b34      	ldr	r3, [pc, #208]	; (80026f8 <HAL_RCC_OscConfig+0x244>)
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7fe f9e7 	bl	80009fc <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002632:	f7fe f9e3 	bl	80009fc <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e1a8      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002644:	4b2b      	ldr	r3, [pc, #172]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002650:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4925      	ldr	r1, [pc, #148]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002660:	4313      	orrs	r3, r2
 8002662:	600b      	str	r3, [r1, #0]
 8002664:	e015      	b.n	8002692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002666:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HAL_RCC_OscConfig+0x244>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe f9c6 	bl	80009fc <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002674:	f7fe f9c2 	bl	80009fc <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e187      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002686:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d036      	beq.n	800270c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d016      	beq.n	80026d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_RCC_OscConfig+0x248>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7fe f9a6 	bl	80009fc <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b4:	f7fe f9a2 	bl	80009fc <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e167      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80026c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x200>
 80026d2:	e01b      	b.n	800270c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_RCC_OscConfig+0x248>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026da:	f7fe f98f 	bl	80009fc <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	e00e      	b.n	8002700 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e2:	f7fe f98b 	bl	80009fc <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d907      	bls.n	8002700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e150      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
 80026f4:	40023800 	.word	0x40023800
 80026f8:	42470000 	.word	0x42470000
 80026fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002700:	4b88      	ldr	r3, [pc, #544]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ea      	bne.n	80026e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 8097 	beq.w	8002848 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271e:	4b81      	ldr	r3, [pc, #516]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10f      	bne.n	800274a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	4b7d      	ldr	r3, [pc, #500]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a7c      	ldr	r2, [pc, #496]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b7a      	ldr	r3, [pc, #488]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002746:	2301      	movs	r3, #1
 8002748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274a:	4b77      	ldr	r3, [pc, #476]	; (8002928 <HAL_RCC_OscConfig+0x474>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d118      	bne.n	8002788 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002756:	4b74      	ldr	r3, [pc, #464]	; (8002928 <HAL_RCC_OscConfig+0x474>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a73      	ldr	r2, [pc, #460]	; (8002928 <HAL_RCC_OscConfig+0x474>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002762:	f7fe f94b 	bl	80009fc <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276a:	f7fe f947 	bl	80009fc <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e10c      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	4b6a      	ldr	r3, [pc, #424]	; (8002928 <HAL_RCC_OscConfig+0x474>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d106      	bne.n	800279e <HAL_RCC_OscConfig+0x2ea>
 8002790:	4b64      	ldr	r3, [pc, #400]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	4a63      	ldr	r2, [pc, #396]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6713      	str	r3, [r2, #112]	; 0x70
 800279c:	e01c      	b.n	80027d8 <HAL_RCC_OscConfig+0x324>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b05      	cmp	r3, #5
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x30c>
 80027a6:	4b5f      	ldr	r3, [pc, #380]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	4a5e      	ldr	r2, [pc, #376]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	6713      	str	r3, [r2, #112]	; 0x70
 80027b2:	4b5c      	ldr	r3, [pc, #368]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	4a5b      	ldr	r2, [pc, #364]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6713      	str	r3, [r2, #112]	; 0x70
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0x324>
 80027c0:	4b58      	ldr	r3, [pc, #352]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	4a57      	ldr	r2, [pc, #348]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80027c6:	f023 0301 	bic.w	r3, r3, #1
 80027ca:	6713      	str	r3, [r2, #112]	; 0x70
 80027cc:	4b55      	ldr	r3, [pc, #340]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	4a54      	ldr	r2, [pc, #336]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80027d2:	f023 0304 	bic.w	r3, r3, #4
 80027d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d015      	beq.n	800280c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e0:	f7fe f90c 	bl	80009fc <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e8:	f7fe f908 	bl	80009fc <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e0cb      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fe:	4b49      	ldr	r3, [pc, #292]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0ee      	beq.n	80027e8 <HAL_RCC_OscConfig+0x334>
 800280a:	e014      	b.n	8002836 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280c:	f7fe f8f6 	bl	80009fc <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002812:	e00a      	b.n	800282a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002814:	f7fe f8f2 	bl	80009fc <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e0b5      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282a:	4b3e      	ldr	r3, [pc, #248]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1ee      	bne.n	8002814 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d105      	bne.n	8002848 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283c:	4b39      	ldr	r3, [pc, #228]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	4a38      	ldr	r2, [pc, #224]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002846:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80a1 	beq.w	8002994 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002852:	4b34      	ldr	r3, [pc, #208]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b08      	cmp	r3, #8
 800285c:	d05c      	beq.n	8002918 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d141      	bne.n	80028ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002866:	4b31      	ldr	r3, [pc, #196]	; (800292c <HAL_RCC_OscConfig+0x478>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe f8c6 	bl	80009fc <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002874:	f7fe f8c2 	bl	80009fc <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e087      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	4b27      	ldr	r3, [pc, #156]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69da      	ldr	r2, [r3, #28]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	019b      	lsls	r3, r3, #6
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	3b01      	subs	r3, #1
 80028ac:	041b      	lsls	r3, r3, #16
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	061b      	lsls	r3, r3, #24
 80028b6:	491b      	ldr	r1, [pc, #108]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028bc:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_RCC_OscConfig+0x478>)
 80028be:	2201      	movs	r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c2:	f7fe f89b 	bl	80009fc <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ca:	f7fe f897 	bl	80009fc <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e05c      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f0      	beq.n	80028ca <HAL_RCC_OscConfig+0x416>
 80028e8:	e054      	b.n	8002994 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_RCC_OscConfig+0x478>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe f884 	bl	80009fc <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe f880 	bl	80009fc <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e045      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x444>
 8002916:	e03d      	b.n	8002994 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d107      	bne.n	8002930 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e038      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
 8002924:	40023800 	.word	0x40023800
 8002928:	40007000 	.word	0x40007000
 800292c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <HAL_RCC_OscConfig+0x4ec>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d028      	beq.n	8002990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d121      	bne.n	8002990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002956:	429a      	cmp	r2, r3
 8002958:	d11a      	bne.n	8002990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002960:	4013      	ands	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002966:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002968:	4293      	cmp	r3, r2
 800296a:	d111      	bne.n	8002990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	3b01      	subs	r3, #1
 800297a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d107      	bne.n	8002990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800

080029a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0cc      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029b8:	4b68      	ldr	r3, [pc, #416]	; (8002b5c <HAL_RCC_ClockConfig+0x1b8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d90c      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c6:	4b65      	ldr	r3, [pc, #404]	; (8002b5c <HAL_RCC_ClockConfig+0x1b8>)
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b63      	ldr	r3, [pc, #396]	; (8002b5c <HAL_RCC_ClockConfig+0x1b8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0b8      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d020      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f8:	4b59      	ldr	r3, [pc, #356]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4a58      	ldr	r2, [pc, #352]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a10:	4b53      	ldr	r3, [pc, #332]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a52      	ldr	r2, [pc, #328]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a1c:	4b50      	ldr	r3, [pc, #320]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	494d      	ldr	r1, [pc, #308]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d044      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	4b47      	ldr	r3, [pc, #284]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d119      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e07f      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d003      	beq.n	8002a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d107      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a62:	4b3f      	ldr	r3, [pc, #252]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e06f      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a72:	4b3b      	ldr	r3, [pc, #236]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e067      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a82:	4b37      	ldr	r3, [pc, #220]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f023 0203 	bic.w	r2, r3, #3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	4934      	ldr	r1, [pc, #208]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a94:	f7fd ffb2 	bl	80009fc <HAL_GetTick>
 8002a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9a:	e00a      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9c:	f7fd ffae 	bl	80009fc <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e04f      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	4b2b      	ldr	r3, [pc, #172]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 020c 	and.w	r2, r3, #12
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d1eb      	bne.n	8002a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac4:	4b25      	ldr	r3, [pc, #148]	; (8002b5c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d20c      	bcs.n	8002aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad2:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <HAL_RCC_ClockConfig+0x1b8>)
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ada:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <HAL_RCC_ClockConfig+0x1b8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e032      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4916      	ldr	r1, [pc, #88]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b16:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	490e      	ldr	r1, [pc, #56]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b2a:	f000 f821 	bl	8002b70 <HAL_RCC_GetSysClockFreq>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	490a      	ldr	r1, [pc, #40]	; (8002b64 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3c:	5ccb      	ldrb	r3, [r1, r3]
 8002b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b42:	4a09      	ldr	r2, [pc, #36]	; (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd ff12 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023c00 	.word	0x40023c00
 8002b60:	40023800 	.word	0x40023800
 8002b64:	0800992c 	.word	0x0800992c
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	20000004 	.word	0x20000004

08002b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b74:	b094      	sub	sp, #80	; 0x50
 8002b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b80:	2300      	movs	r3, #0
 8002b82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b88:	4b79      	ldr	r3, [pc, #484]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d00d      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	f200 80e1 	bhi.w	8002d5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_GetSysClockFreq+0x3a>
 8002ba2:	e0db      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ba4:	4b73      	ldr	r3, [pc, #460]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ba6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ba8:	e0db      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002baa:	4b73      	ldr	r3, [pc, #460]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bae:	e0d8      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bb0:	4b6f      	ldr	r3, [pc, #444]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bba:	4b6d      	ldr	r3, [pc, #436]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d063      	beq.n	8002c8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc6:	4b6a      	ldr	r3, [pc, #424]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	099b      	lsrs	r3, r3, #6
 8002bcc:	2200      	movs	r2, #0
 8002bce:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bda:	2300      	movs	r3, #0
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002be2:	4622      	mov	r2, r4
 8002be4:	462b      	mov	r3, r5
 8002be6:	f04f 0000 	mov.w	r0, #0
 8002bea:	f04f 0100 	mov.w	r1, #0
 8002bee:	0159      	lsls	r1, r3, #5
 8002bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf4:	0150      	lsls	r0, r2, #5
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	1a51      	subs	r1, r2, r1
 8002bfe:	6139      	str	r1, [r7, #16]
 8002c00:	4629      	mov	r1, r5
 8002c02:	eb63 0301 	sbc.w	r3, r3, r1
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c14:	4659      	mov	r1, fp
 8002c16:	018b      	lsls	r3, r1, #6
 8002c18:	4651      	mov	r1, sl
 8002c1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c1e:	4651      	mov	r1, sl
 8002c20:	018a      	lsls	r2, r1, #6
 8002c22:	4651      	mov	r1, sl
 8002c24:	ebb2 0801 	subs.w	r8, r2, r1
 8002c28:	4659      	mov	r1, fp
 8002c2a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c42:	4690      	mov	r8, r2
 8002c44:	4699      	mov	r9, r3
 8002c46:	4623      	mov	r3, r4
 8002c48:	eb18 0303 	adds.w	r3, r8, r3
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	462b      	mov	r3, r5
 8002c50:	eb49 0303 	adc.w	r3, r9, r3
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c62:	4629      	mov	r1, r5
 8002c64:	024b      	lsls	r3, r1, #9
 8002c66:	4621      	mov	r1, r4
 8002c68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	024a      	lsls	r2, r1, #9
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c76:	2200      	movs	r2, #0
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c80:	f7fd faa6 	bl	80001d0 <__aeabi_uldivmod>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c8c:	e058      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8e:	4b38      	ldr	r3, [pc, #224]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	099b      	lsrs	r3, r3, #6
 8002c94:	2200      	movs	r2, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	4611      	mov	r1, r2
 8002c9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c9e:	623b      	str	r3, [r7, #32]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ca8:	4642      	mov	r2, r8
 8002caa:	464b      	mov	r3, r9
 8002cac:	f04f 0000 	mov.w	r0, #0
 8002cb0:	f04f 0100 	mov.w	r1, #0
 8002cb4:	0159      	lsls	r1, r3, #5
 8002cb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cba:	0150      	lsls	r0, r2, #5
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4641      	mov	r1, r8
 8002cc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ce0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ce4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	00eb      	lsls	r3, r5, #3
 8002cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cf6:	00e2      	lsls	r2, r4, #3
 8002cf8:	4614      	mov	r4, r2
 8002cfa:	461d      	mov	r5, r3
 8002cfc:	4643      	mov	r3, r8
 8002cfe:	18e3      	adds	r3, r4, r3
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	464b      	mov	r3, r9
 8002d04:	eb45 0303 	adc.w	r3, r5, r3
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d16:	4629      	mov	r1, r5
 8002d18:	028b      	lsls	r3, r1, #10
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d20:	4621      	mov	r1, r4
 8002d22:	028a      	lsls	r2, r1, #10
 8002d24:	4610      	mov	r0, r2
 8002d26:	4619      	mov	r1, r3
 8002d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	61fa      	str	r2, [r7, #28]
 8002d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d34:	f7fd fa4c 	bl	80001d0 <__aeabi_uldivmod>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	0c1b      	lsrs	r3, r3, #16
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d5a:	e002      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3750      	adds	r7, #80	; 0x50
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d6e:	bf00      	nop
 8002d70:	40023800 	.word	0x40023800
 8002d74:	00f42400 	.word	0x00f42400
 8002d78:	007a1200 	.word	0x007a1200

08002d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d82:	681b      	ldr	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20000000 	.word	0x20000000

08002d94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d94:	b084      	sub	sp, #16
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	f107 001c 	add.w	r0, r7, #28
 8002da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d122      	bne.n	8002df2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d105      	bne.n	8002de6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f001 fbee 	bl	80045c8 <USB_CoreReset>
 8002dec:	4603      	mov	r3, r0
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	e01a      	b.n	8002e28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f001 fbe2 	bl	80045c8 <USB_CoreReset>
 8002e04:	4603      	mov	r3, r0
 8002e06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	639a      	str	r2, [r3, #56]	; 0x38
 8002e1a:	e005      	b.n	8002e28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d10b      	bne.n	8002e46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f043 0206 	orr.w	r2, r3, #6
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f043 0220 	orr.w	r2, r3, #32
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e52:	b004      	add	sp, #16
 8002e54:	4770      	bx	lr
	...

08002e58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	4613      	mov	r3, r2
 8002e64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d165      	bne.n	8002f38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4a41      	ldr	r2, [pc, #260]	; (8002f74 <USB_SetTurnaroundTime+0x11c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d906      	bls.n	8002e82 <USB_SetTurnaroundTime+0x2a>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4a40      	ldr	r2, [pc, #256]	; (8002f78 <USB_SetTurnaroundTime+0x120>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d202      	bcs.n	8002e82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002e7c:	230f      	movs	r3, #15
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	e062      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4a3c      	ldr	r2, [pc, #240]	; (8002f78 <USB_SetTurnaroundTime+0x120>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d306      	bcc.n	8002e98 <USB_SetTurnaroundTime+0x40>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4a3b      	ldr	r2, [pc, #236]	; (8002f7c <USB_SetTurnaroundTime+0x124>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d202      	bcs.n	8002e98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002e92:	230e      	movs	r3, #14
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	e057      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4a38      	ldr	r2, [pc, #224]	; (8002f7c <USB_SetTurnaroundTime+0x124>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d306      	bcc.n	8002eae <USB_SetTurnaroundTime+0x56>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4a37      	ldr	r2, [pc, #220]	; (8002f80 <USB_SetTurnaroundTime+0x128>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d202      	bcs.n	8002eae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002ea8:	230d      	movs	r3, #13
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	e04c      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4a33      	ldr	r2, [pc, #204]	; (8002f80 <USB_SetTurnaroundTime+0x128>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d306      	bcc.n	8002ec4 <USB_SetTurnaroundTime+0x6c>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4a32      	ldr	r2, [pc, #200]	; (8002f84 <USB_SetTurnaroundTime+0x12c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d802      	bhi.n	8002ec4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	e041      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4a2f      	ldr	r2, [pc, #188]	; (8002f84 <USB_SetTurnaroundTime+0x12c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d906      	bls.n	8002eda <USB_SetTurnaroundTime+0x82>
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4a2e      	ldr	r2, [pc, #184]	; (8002f88 <USB_SetTurnaroundTime+0x130>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d802      	bhi.n	8002eda <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002ed4:	230b      	movs	r3, #11
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	e036      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4a2a      	ldr	r2, [pc, #168]	; (8002f88 <USB_SetTurnaroundTime+0x130>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d906      	bls.n	8002ef0 <USB_SetTurnaroundTime+0x98>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	4a29      	ldr	r2, [pc, #164]	; (8002f8c <USB_SetTurnaroundTime+0x134>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d802      	bhi.n	8002ef0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002eea:	230a      	movs	r3, #10
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e02b      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4a26      	ldr	r2, [pc, #152]	; (8002f8c <USB_SetTurnaroundTime+0x134>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d906      	bls.n	8002f06 <USB_SetTurnaroundTime+0xae>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <USB_SetTurnaroundTime+0x138>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d202      	bcs.n	8002f06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002f00:	2309      	movs	r3, #9
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	e020      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4a21      	ldr	r2, [pc, #132]	; (8002f90 <USB_SetTurnaroundTime+0x138>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d306      	bcc.n	8002f1c <USB_SetTurnaroundTime+0xc4>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4a20      	ldr	r2, [pc, #128]	; (8002f94 <USB_SetTurnaroundTime+0x13c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d802      	bhi.n	8002f1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002f16:	2308      	movs	r3, #8
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	e015      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <USB_SetTurnaroundTime+0x13c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d906      	bls.n	8002f32 <USB_SetTurnaroundTime+0xda>
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4a1c      	ldr	r2, [pc, #112]	; (8002f98 <USB_SetTurnaroundTime+0x140>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d202      	bcs.n	8002f32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002f2c:	2307      	movs	r3, #7
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	e00a      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002f32:	2306      	movs	r3, #6
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	e007      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d102      	bne.n	8002f44 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002f3e:	2309      	movs	r3, #9
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e001      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002f44:	2309      	movs	r3, #9
 8002f46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	029b      	lsls	r3, r3, #10
 8002f5c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002f60:	431a      	orrs	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	00d8acbf 	.word	0x00d8acbf
 8002f78:	00e4e1c0 	.word	0x00e4e1c0
 8002f7c:	00f42400 	.word	0x00f42400
 8002f80:	01067380 	.word	0x01067380
 8002f84:	011a499f 	.word	0x011a499f
 8002f88:	01312cff 	.word	0x01312cff
 8002f8c:	014ca43f 	.word	0x014ca43f
 8002f90:	016e3600 	.word	0x016e3600
 8002f94:	01a6ab1f 	.word	0x01a6ab1f
 8002f98:	01e84800 	.word	0x01e84800

08002f9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f043 0201 	orr.w	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f023 0201 	bic.w	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d115      	bne.n	800302e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800300e:	2001      	movs	r0, #1
 8003010:	f7fd fd00 	bl	8000a14 <HAL_Delay>
      ms++;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3301      	adds	r3, #1
 8003018:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f001 fa45 	bl	80044aa <USB_GetMode>
 8003020:	4603      	mov	r3, r0
 8003022:	2b01      	cmp	r3, #1
 8003024:	d01e      	beq.n	8003064 <USB_SetCurrentMode+0x84>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b31      	cmp	r3, #49	; 0x31
 800302a:	d9f0      	bls.n	800300e <USB_SetCurrentMode+0x2e>
 800302c:	e01a      	b.n	8003064 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800302e:	78fb      	ldrb	r3, [r7, #3]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d115      	bne.n	8003060 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003040:	2001      	movs	r0, #1
 8003042:	f7fd fce7 	bl	8000a14 <HAL_Delay>
      ms++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3301      	adds	r3, #1
 800304a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f001 fa2c 	bl	80044aa <USB_GetMode>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <USB_SetCurrentMode+0x84>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b31      	cmp	r3, #49	; 0x31
 800305c:	d9f0      	bls.n	8003040 <USB_SetCurrentMode+0x60>
 800305e:	e001      	b.n	8003064 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e005      	b.n	8003070 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b32      	cmp	r3, #50	; 0x32
 8003068:	d101      	bne.n	800306e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003078:	b084      	sub	sp, #16
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	e009      	b.n	80030ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	3340      	adds	r3, #64	; 0x40
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	2200      	movs	r2, #0
 80030a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	3301      	adds	r3, #1
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	2b0e      	cmp	r3, #14
 80030b0:	d9f2      	bls.n	8003098 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80030b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d11c      	bne.n	80030f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030c6:	f043 0302 	orr.w	r3, r3, #2
 80030ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38
 80030f0:	e00b      	b.n	800310a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003110:	461a      	mov	r2, r3
 8003112:	2300      	movs	r3, #0
 8003114:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311c:	4619      	mov	r1, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003124:	461a      	mov	r2, r3
 8003126:	680b      	ldr	r3, [r1, #0]
 8003128:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800312a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312c:	2b01      	cmp	r3, #1
 800312e:	d10c      	bne.n	800314a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003132:	2b00      	cmp	r3, #0
 8003134:	d104      	bne.n	8003140 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003136:	2100      	movs	r1, #0
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f965 	bl	8003408 <USB_SetDevSpeed>
 800313e:	e008      	b.n	8003152 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003140:	2101      	movs	r1, #1
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f960 	bl	8003408 <USB_SetDevSpeed>
 8003148:	e003      	b.n	8003152 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800314a:	2103      	movs	r1, #3
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f95b 	bl	8003408 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003152:	2110      	movs	r1, #16
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f8f3 	bl	8003340 <USB_FlushTxFifo>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f91f 	bl	80033a8 <USB_FlushRxFifo>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317a:	461a      	mov	r2, r3
 800317c:	2300      	movs	r3, #0
 800317e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003186:	461a      	mov	r2, r3
 8003188:	2300      	movs	r3, #0
 800318a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003192:	461a      	mov	r2, r3
 8003194:	2300      	movs	r3, #0
 8003196:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	e043      	b.n	8003226 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031b4:	d118      	bne.n	80031e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c8:	461a      	mov	r2, r3
 80031ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	e013      	b.n	80031fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031de:	461a      	mov	r2, r3
 80031e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e008      	b.n	80031fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f4:	461a      	mov	r2, r3
 80031f6:	2300      	movs	r3, #0
 80031f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003206:	461a      	mov	r2, r3
 8003208:	2300      	movs	r3, #0
 800320a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003218:	461a      	mov	r2, r3
 800321a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800321e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	3301      	adds	r3, #1
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	429a      	cmp	r2, r3
 800322c:	d3b7      	bcc.n	800319e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	e043      	b.n	80032bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800324a:	d118      	bne.n	800327e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10a      	bne.n	8003268 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325e:	461a      	mov	r2, r3
 8003260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e013      	b.n	8003290 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003274:	461a      	mov	r2, r3
 8003276:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	e008      	b.n	8003290 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4413      	add	r3, r2
 8003286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328a:	461a      	mov	r2, r3
 800328c:	2300      	movs	r3, #0
 800328e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329c:	461a      	mov	r2, r3
 800329e:	2300      	movs	r3, #0
 80032a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ae:	461a      	mov	r2, r3
 80032b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	3301      	adds	r3, #1
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d3b7      	bcc.n	8003234 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80032e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d105      	bne.n	80032f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f043 0210 	orr.w	r2, r3, #16
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699a      	ldr	r2, [r3, #24]
 80032fc:	4b0f      	ldr	r3, [pc, #60]	; (800333c <USB_DevInit+0x2c4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f043 0208 	orr.w	r2, r3, #8
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d107      	bne.n	800332c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003324:	f043 0304 	orr.w	r3, r3, #4
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800332c:	7dfb      	ldrb	r3, [r7, #23]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003338:	b004      	add	sp, #16
 800333a:	4770      	bx	lr
 800333c:	803c3800 	.word	0x803c3800

08003340 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	3301      	adds	r3, #1
 8003352:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4a13      	ldr	r2, [pc, #76]	; (80033a4 <USB_FlushTxFifo+0x64>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e01b      	b.n	8003398 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	daf2      	bge.n	800334e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	019b      	lsls	r3, r3, #6
 8003370:	f043 0220 	orr.w	r2, r3, #32
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3301      	adds	r3, #1
 800337c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4a08      	ldr	r2, [pc, #32]	; (80033a4 <USB_FlushTxFifo+0x64>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e006      	b.n	8003398 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b20      	cmp	r3, #32
 8003394:	d0f0      	beq.n	8003378 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	00030d40 	.word	0x00030d40

080033a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3301      	adds	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4a11      	ldr	r2, [pc, #68]	; (8003404 <USB_FlushRxFifo+0x5c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e018      	b.n	80033f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	daf2      	bge.n	80033b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2210      	movs	r2, #16
 80033d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3301      	adds	r3, #1
 80033dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4a08      	ldr	r2, [pc, #32]	; (8003404 <USB_FlushRxFifo+0x5c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e006      	b.n	80033f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b10      	cmp	r3, #16
 80033f4:	d0f0      	beq.n	80033d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	00030d40 	.word	0x00030d40

08003408 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	68f9      	ldr	r1, [r7, #12]
 8003424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003428:	4313      	orrs	r3, r2
 800342a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800343a:	b480      	push	{r7}
 800343c:	b087      	sub	sp, #28
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 0306 	and.w	r3, r3, #6
 8003452:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800345a:	2300      	movs	r3, #0
 800345c:	75fb      	strb	r3, [r7, #23]
 800345e:	e00a      	b.n	8003476 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d002      	beq.n	800346c <USB_GetDevSpeed+0x32>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b06      	cmp	r3, #6
 800346a:	d102      	bne.n	8003472 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800346c:	2302      	movs	r3, #2
 800346e:	75fb      	strb	r3, [r7, #23]
 8003470:	e001      	b.n	8003476 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003472:	230f      	movs	r3, #15
 8003474:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003476:	7dfb      	ldrb	r3, [r7, #23]
}
 8003478:	4618      	mov	r0, r3
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	785b      	ldrb	r3, [r3, #1]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d13a      	bne.n	8003516 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a6:	69da      	ldr	r2, [r3, #28]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	2101      	movs	r1, #1
 80034b2:	fa01 f303 	lsl.w	r3, r1, r3
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	68f9      	ldr	r1, [r7, #12]
 80034ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034be:	4313      	orrs	r3, r2
 80034c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d155      	bne.n	8003584 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	791b      	ldrb	r3, [r3, #4]
 80034f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	059b      	lsls	r3, r3, #22
 80034fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034fc:	4313      	orrs	r3, r2
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	0151      	lsls	r1, r2, #5
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	440a      	add	r2, r1
 8003506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800350a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	e036      	b.n	8003584 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800351c:	69da      	ldr	r2, [r3, #28]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	2101      	movs	r1, #1
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	041b      	lsls	r3, r3, #16
 800352e:	68f9      	ldr	r1, [r7, #12]
 8003530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003534:	4313      	orrs	r3, r2
 8003536:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d11a      	bne.n	8003584 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4413      	add	r3, r2
 8003556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	791b      	ldrb	r3, [r3, #4]
 8003568:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800356a:	430b      	orrs	r3, r1
 800356c:	4313      	orrs	r3, r2
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	0151      	lsls	r1, r2, #5
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	440a      	add	r2, r1
 8003576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800357a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003582:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	785b      	ldrb	r3, [r3, #1]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d161      	bne.n	8003674 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035c6:	d11f      	bne.n	8003608 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	0151      	lsls	r1, r2, #5
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	440a      	add	r2, r1
 80035de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	0151      	lsls	r1, r2, #5
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	440a      	add	r2, r1
 80035fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003602:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003606:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800360e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	2101      	movs	r1, #1
 800361a:	fa01 f303 	lsl.w	r3, r1, r3
 800361e:	b29b      	uxth	r3, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	68f9      	ldr	r1, [r7, #12]
 8003624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003628:	4013      	ands	r3, r2
 800362a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003632:	69da      	ldr	r2, [r3, #28]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	2101      	movs	r1, #1
 800363e:	fa01 f303 	lsl.w	r3, r1, r3
 8003642:	b29b      	uxth	r3, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	68f9      	ldr	r1, [r7, #12]
 8003648:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800364c:	4013      	ands	r3, r2
 800364e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	0159      	lsls	r1, r3, #5
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	440b      	add	r3, r1
 8003666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366a:	4619      	mov	r1, r3
 800366c:	4b35      	ldr	r3, [pc, #212]	; (8003744 <USB_DeactivateEndpoint+0x1b0>)
 800366e:	4013      	ands	r3, r2
 8003670:	600b      	str	r3, [r1, #0]
 8003672:	e060      	b.n	8003736 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003686:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800368a:	d11f      	bne.n	80036cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	0151      	lsls	r1, r2, #5
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	440a      	add	r2, r1
 80036a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	0151      	lsls	r1, r2, #5
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	440a      	add	r2, r1
 80036c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	2101      	movs	r1, #1
 80036de:	fa01 f303 	lsl.w	r3, r1, r3
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	43db      	mvns	r3, r3
 80036e6:	68f9      	ldr	r1, [r7, #12]
 80036e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036ec:	4013      	ands	r3, r2
 80036ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	2101      	movs	r1, #1
 8003702:	fa01 f303 	lsl.w	r3, r1, r3
 8003706:	041b      	lsls	r3, r3, #16
 8003708:	43db      	mvns	r3, r3
 800370a:	68f9      	ldr	r1, [r7, #12]
 800370c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003710:	4013      	ands	r3, r2
 8003712:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4413      	add	r3, r2
 800371c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	0159      	lsls	r1, r3, #5
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	440b      	add	r3, r1
 800372a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372e:	4619      	mov	r1, r3
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <USB_DeactivateEndpoint+0x1b4>)
 8003732:	4013      	ands	r3, r2
 8003734:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	ec337800 	.word	0xec337800
 8003748:	eff37800 	.word	0xeff37800

0800374c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	; 0x28
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	4613      	mov	r3, r2
 8003758:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	785b      	ldrb	r3, [r3, #1]
 8003768:	2b01      	cmp	r3, #1
 800376a:	f040 815c 	bne.w	8003a26 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d132      	bne.n	80037dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	0151      	lsls	r1, r2, #5
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	440a      	add	r2, r1
 800378c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003790:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003794:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003798:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	0151      	lsls	r1, r2, #5
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	440a      	add	r2, r1
 80037b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	0151      	lsls	r1, r2, #5
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	440a      	add	r2, r1
 80037d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037d4:	0cdb      	lsrs	r3, r3, #19
 80037d6:	04db      	lsls	r3, r3, #19
 80037d8:	6113      	str	r3, [r2, #16]
 80037da:	e074      	b.n	80038c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	0151      	lsls	r1, r2, #5
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	440a      	add	r2, r1
 80037f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037f6:	0cdb      	lsrs	r3, r3, #19
 80037f8:	04db      	lsls	r3, r3, #19
 80037fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	0151      	lsls	r1, r2, #5
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	440a      	add	r2, r1
 8003812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003816:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800381a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800381e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	6999      	ldr	r1, [r3, #24]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	440b      	add	r3, r1
 8003838:	1e59      	subs	r1, r3, #1
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003842:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003844:	4b9d      	ldr	r3, [pc, #628]	; (8003abc <USB_EPStartXfer+0x370>)
 8003846:	400b      	ands	r3, r1
 8003848:	69b9      	ldr	r1, [r7, #24]
 800384a:	0148      	lsls	r0, r1, #5
 800384c:	69f9      	ldr	r1, [r7, #28]
 800384e:	4401      	add	r1, r0
 8003850:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003854:	4313      	orrs	r3, r2
 8003856:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386e:	69b9      	ldr	r1, [r7, #24]
 8003870:	0148      	lsls	r0, r1, #5
 8003872:	69f9      	ldr	r1, [r7, #28]
 8003874:	4401      	add	r1, r0
 8003876:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800387a:	4313      	orrs	r3, r2
 800387c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	791b      	ldrb	r3, [r3, #4]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d11f      	bne.n	80038c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	4413      	add	r3, r2
 800388e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	0151      	lsls	r1, r2, #5
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	440a      	add	r2, r1
 800389c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80038a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	0151      	lsls	r1, r2, #5
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	440a      	add	r2, r1
 80038bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d14b      	bne.n	8003964 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d009      	beq.n	80038e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e0:	461a      	mov	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	791b      	ldrb	r3, [r3, #4]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d128      	bne.n	8003942 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d110      	bne.n	8003922 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	0151      	lsls	r1, r2, #5
 8003912:	69fa      	ldr	r2, [r7, #28]
 8003914:	440a      	add	r2, r1
 8003916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800391a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	e00f      	b.n	8003942 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	0151      	lsls	r1, r2, #5
 8003934:	69fa      	ldr	r2, [r7, #28]
 8003936:	440a      	add	r2, r1
 8003938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800393c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003940:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	0151      	lsls	r1, r2, #5
 8003954:	69fa      	ldr	r2, [r7, #28]
 8003956:	440a      	add	r2, r1
 8003958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800395c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e133      	b.n	8003bcc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	0151      	lsls	r1, r2, #5
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	440a      	add	r2, r1
 800397a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800397e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003982:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	791b      	ldrb	r3, [r3, #4]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d015      	beq.n	80039b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 811b 	beq.w	8003bcc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	2101      	movs	r1, #1
 80039a8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ac:	69f9      	ldr	r1, [r7, #28]
 80039ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039b2:	4313      	orrs	r3, r2
 80039b4:	634b      	str	r3, [r1, #52]	; 0x34
 80039b6:	e109      	b.n	8003bcc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d110      	bne.n	80039ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	0151      	lsls	r1, r2, #5
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	440a      	add	r2, r1
 80039de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	e00f      	b.n	8003a0a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	0151      	lsls	r1, r2, #5
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	440a      	add	r2, r1
 8003a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a08:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	6919      	ldr	r1, [r3, #16]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	781a      	ldrb	r2, [r3, #0]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	b298      	uxth	r0, r3
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 fade 	bl	8003fe0 <USB_WritePacket>
 8003a24:	e0d2      	b.n	8003bcc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	0151      	lsls	r1, r2, #5
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	440a      	add	r2, r1
 8003a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a40:	0cdb      	lsrs	r3, r3, #19
 8003a42:	04db      	lsls	r3, r3, #19
 8003a44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	0151      	lsls	r1, r2, #5
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	440a      	add	r2, r1
 8003a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d126      	bne.n	8003ac0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a88:	69b9      	ldr	r1, [r7, #24]
 8003a8a:	0148      	lsls	r0, r1, #5
 8003a8c:	69f9      	ldr	r1, [r7, #28]
 8003a8e:	4401      	add	r1, r0
 8003a90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a94:	4313      	orrs	r3, r2
 8003a96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	0151      	lsls	r1, r2, #5
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	440a      	add	r2, r1
 8003aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ab2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ab6:	6113      	str	r3, [r2, #16]
 8003ab8:	e03a      	b.n	8003b30 <USB_EPStartXfer+0x3e4>
 8003aba:	bf00      	nop
 8003abc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	699a      	ldr	r2, [r3, #24]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4413      	add	r3, r2
 8003aca:	1e5a      	subs	r2, r3, #1
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	8afa      	ldrh	r2, [r7, #22]
 8003adc:	fb03 f202 	mul.w	r2, r3, r2
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	8afb      	ldrh	r3, [r7, #22]
 8003af4:	04d9      	lsls	r1, r3, #19
 8003af6:	4b38      	ldr	r3, [pc, #224]	; (8003bd8 <USB_EPStartXfer+0x48c>)
 8003af8:	400b      	ands	r3, r1
 8003afa:	69b9      	ldr	r1, [r7, #24]
 8003afc:	0148      	lsls	r0, r1, #5
 8003afe:	69f9      	ldr	r1, [r7, #28]
 8003b00:	4401      	add	r1, r0
 8003b02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b06:	4313      	orrs	r3, r2
 8003b08:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b20:	69b9      	ldr	r1, [r7, #24]
 8003b22:	0148      	lsls	r0, r1, #5
 8003b24:	69f9      	ldr	r1, [r7, #28]
 8003b26:	4401      	add	r1, r0
 8003b28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d10d      	bne.n	8003b52 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	6919      	ldr	r1, [r3, #16]
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b4e:	460a      	mov	r2, r1
 8003b50:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	791b      	ldrb	r3, [r3, #4]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d128      	bne.n	8003bac <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d110      	bne.n	8003b8c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	0151      	lsls	r1, r2, #5
 8003b7c:	69fa      	ldr	r2, [r7, #28]
 8003b7e:	440a      	add	r2, r1
 8003b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e00f      	b.n	8003bac <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	0151      	lsls	r1, r2, #5
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	440a      	add	r2, r1
 8003ba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003baa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	0151      	lsls	r1, r2, #5
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	440a      	add	r2, r1
 8003bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3720      	adds	r7, #32
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	1ff80000 	.word	0x1ff80000

08003bdc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	4613      	mov	r3, r2
 8003be8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	785b      	ldrb	r3, [r3, #1]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	f040 80ce 	bne.w	8003d9a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d132      	bne.n	8003c6c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	0151      	lsls	r1, r2, #5
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	440a      	add	r2, r1
 8003c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	0151      	lsls	r1, r2, #5
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	440a      	add	r2, r1
 8003c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	0151      	lsls	r1, r2, #5
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	440a      	add	r2, r1
 8003c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c64:	0cdb      	lsrs	r3, r3, #19
 8003c66:	04db      	lsls	r3, r3, #19
 8003c68:	6113      	str	r3, [r2, #16]
 8003c6a:	e04e      	b.n	8003d0a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	0151      	lsls	r1, r2, #5
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	440a      	add	r2, r1
 8003c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c86:	0cdb      	lsrs	r3, r3, #19
 8003c88:	04db      	lsls	r3, r3, #19
 8003c8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	0151      	lsls	r1, r2, #5
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	440a      	add	r2, r1
 8003ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003caa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	699a      	ldr	r2, [r3, #24]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d903      	bls.n	8003cc4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	0151      	lsls	r1, r2, #5
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	440a      	add	r2, r1
 8003cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ce2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfa:	6939      	ldr	r1, [r7, #16]
 8003cfc:	0148      	lsls	r0, r1, #5
 8003cfe:	6979      	ldr	r1, [r7, #20]
 8003d00:	4401      	add	r1, r0
 8003d02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d06:	4313      	orrs	r3, r2
 8003d08:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d11e      	bne.n	8003d4e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d009      	beq.n	8003d2c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d24:	461a      	mov	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	0151      	lsls	r1, r2, #5
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	440a      	add	r2, r1
 8003d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	e097      	b.n	8003e7e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	0151      	lsls	r1, r2, #5
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	440a      	add	r2, r1
 8003d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d6c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 8083 	beq.w	8003e7e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	2101      	movs	r1, #1
 8003d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8e:	6979      	ldr	r1, [r7, #20]
 8003d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d94:	4313      	orrs	r3, r2
 8003d96:	634b      	str	r3, [r1, #52]	; 0x34
 8003d98:	e071      	b.n	8003e7e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	0151      	lsls	r1, r2, #5
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	440a      	add	r2, r1
 8003db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003db4:	0cdb      	lsrs	r3, r3, #19
 8003db6:	04db      	lsls	r3, r3, #19
 8003db8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	0151      	lsls	r1, r2, #5
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	440a      	add	r2, r1
 8003dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003dd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ddc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	0151      	lsls	r1, r2, #5
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	440a      	add	r2, r1
 8003e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e2c:	6939      	ldr	r1, [r7, #16]
 8003e2e:	0148      	lsls	r0, r1, #5
 8003e30:	6979      	ldr	r1, [r7, #20]
 8003e32:	4401      	add	r1, r0
 8003e34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d10d      	bne.n	8003e5e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d009      	beq.n	8003e5e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	6919      	ldr	r1, [r3, #16]
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5a:	460a      	mov	r2, r1
 8003e5c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	0151      	lsls	r1, r2, #5
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	440a      	add	r2, r1
 8003e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	371c      	adds	r7, #28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	785b      	ldrb	r3, [r3, #1]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d14a      	bne.n	8003f40 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ec2:	f040 8086 	bne.w	8003fd2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	7812      	ldrb	r2, [r2, #0]
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ee8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	7812      	ldrb	r2, [r2, #0]
 8003efe:	0151      	lsls	r1, r2, #5
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	440a      	add	r2, r1
 8003f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3301      	adds	r3, #1
 8003f12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d902      	bls.n	8003f24 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	75fb      	strb	r3, [r7, #23]
          break;
 8003f22:	e056      	b.n	8003fd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f3c:	d0e7      	beq.n	8003f0e <USB_EPStopXfer+0x82>
 8003f3e:	e048      	b.n	8003fd2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f58:	d13b      	bne.n	8003fd2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	7812      	ldrb	r2, [r2, #0]
 8003f6e:	0151      	lsls	r1, r2, #5
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	440a      	add	r2, r1
 8003f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f7c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	7812      	ldrb	r2, [r2, #0]
 8003f92:	0151      	lsls	r1, r2, #5
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	440a      	add	r2, r1
 8003f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fa0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f242 7210 	movw	r2, #10000	; 0x2710
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d902      	bls.n	8003fb8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	75fb      	strb	r3, [r7, #23]
          break;
 8003fb6:	e00c      	b.n	8003fd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fd0:	d0e7      	beq.n	8003fa2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b089      	sub	sp, #36	; 0x24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	4611      	mov	r1, r2
 8003fec:	461a      	mov	r2, r3
 8003fee:	460b      	mov	r3, r1
 8003ff0:	71fb      	strb	r3, [r7, #7]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003ffe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004002:	2b00      	cmp	r3, #0
 8004004:	d123      	bne.n	800404e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004006:	88bb      	ldrh	r3, [r7, #4]
 8004008:	3303      	adds	r3, #3
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	e018      	b.n	8004046 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	031a      	lsls	r2, r3, #12
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	4413      	add	r3, r2
 800401c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004020:	461a      	mov	r2, r3
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	3301      	adds	r3, #1
 800402c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	3301      	adds	r3, #1
 8004032:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	3301      	adds	r3, #1
 8004038:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	3301      	adds	r3, #1
 800403e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	3301      	adds	r3, #1
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	429a      	cmp	r2, r3
 800404c:	d3e2      	bcc.n	8004014 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3724      	adds	r7, #36	; 0x24
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800405c:	b480      	push	{r7}
 800405e:	b08b      	sub	sp, #44	; 0x2c
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004072:	88fb      	ldrh	r3, [r7, #6]
 8004074:	089b      	lsrs	r3, r3, #2
 8004076:	b29b      	uxth	r3, r3
 8004078:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004082:	2300      	movs	r3, #0
 8004084:	623b      	str	r3, [r7, #32]
 8004086:	e014      	b.n	80040b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	601a      	str	r2, [r3, #0]
    pDest++;
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	3301      	adds	r3, #1
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	3301      	adds	r3, #1
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	3301      	adds	r3, #1
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	3301      	adds	r3, #1
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	3301      	adds	r3, #1
 80040b0:	623b      	str	r3, [r7, #32]
 80040b2:	6a3a      	ldr	r2, [r7, #32]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d3e6      	bcc.n	8004088 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80040ba:	8bfb      	ldrh	r3, [r7, #30]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01e      	beq.n	80040fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ca:	461a      	mov	r2, r3
 80040cc:	f107 0310 	add.w	r3, r7, #16
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	701a      	strb	r2, [r3, #0]
      i++;
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	3301      	adds	r3, #1
 80040ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	3301      	adds	r3, #1
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80040f2:	8bfb      	ldrh	r3, [r7, #30]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80040f8:	8bfb      	ldrh	r3, [r7, #30]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1ea      	bne.n	80040d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004100:	4618      	mov	r0, r3
 8004102:	372c      	adds	r7, #44	; 0x2c
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	785b      	ldrb	r3, [r3, #1]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d12c      	bne.n	8004182 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	db12      	blt.n	8004160 <USB_EPSetStall+0x54>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00f      	beq.n	8004160 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4413      	add	r3, r2
 8004148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	0151      	lsls	r1, r2, #5
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	440a      	add	r2, r1
 8004156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800415e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	0151      	lsls	r1, r2, #5
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	440a      	add	r2, r1
 8004176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800417a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	e02b      	b.n	80041da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	db12      	blt.n	80041ba <USB_EPSetStall+0xae>
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00f      	beq.n	80041ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	0151      	lsls	r1, r2, #5
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	440a      	add	r2, r1
 80041b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	785b      	ldrb	r3, [r3, #1]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d128      	bne.n	8004256 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	0151      	lsls	r1, r2, #5
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	440a      	add	r2, r1
 800421a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800421e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004222:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	791b      	ldrb	r3, [r3, #4]
 8004228:	2b03      	cmp	r3, #3
 800422a:	d003      	beq.n	8004234 <USB_EPClearStall+0x4c>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	791b      	ldrb	r3, [r3, #4]
 8004230:	2b02      	cmp	r3, #2
 8004232:	d138      	bne.n	80042a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	0151      	lsls	r1, r2, #5
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	440a      	add	r2, r1
 800424a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800424e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	e027      	b.n	80042a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	0151      	lsls	r1, r2, #5
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	440a      	add	r2, r1
 800426c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004270:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004274:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	791b      	ldrb	r3, [r3, #4]
 800427a:	2b03      	cmp	r3, #3
 800427c:	d003      	beq.n	8004286 <USB_EPClearStall+0x9e>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	791b      	ldrb	r3, [r3, #4]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d10f      	bne.n	80042a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4413      	add	r3, r2
 800428e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	0151      	lsls	r1, r2, #5
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	440a      	add	r2, r1
 800429c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	78fb      	ldrb	r3, [r7, #3]
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80042e8:	68f9      	ldr	r1, [r7, #12]
 80042ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042ee:	4313      	orrs	r3, r2
 80042f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800431a:	f023 0303 	bic.w	r3, r3, #3
 800431e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800432e:	f023 0302 	bic.w	r3, r3, #2
 8004332:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004342:	b480      	push	{r7}
 8004344:	b085      	sub	sp, #20
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800435c:	f023 0303 	bic.w	r3, r3, #3
 8004360:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004370:	f043 0302 	orr.w	r3, r3, #2
 8004374:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4013      	ands	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800439c:	68fb      	ldr	r3, [r7, #12]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b085      	sub	sp, #20
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	4013      	ands	r3, r2
 80043cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	0c1b      	lsrs	r3, r3, #16
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80043de:	b480      	push	{r7}
 80043e0:	b085      	sub	sp, #20
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	4013      	ands	r3, r2
 8004400:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	b29b      	uxth	r3, r3
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004412:	b480      	push	{r7}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	460b      	mov	r3, r1
 800441c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	4013      	ands	r3, r2
 800443e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004440:	68bb      	ldr	r3, [r7, #8]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800444e:	b480      	push	{r7}
 8004450:	b087      	sub	sp, #28
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	460b      	mov	r3, r1
 8004458:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004470:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004472:	78fb      	ldrb	r3, [r7, #3]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	fa22 f303 	lsr.w	r3, r2, r3
 800447e:	01db      	lsls	r3, r3, #7
 8004480:	b2db      	uxtb	r3, r3
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4013      	ands	r3, r2
 800449a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800449c:	68bb      	ldr	r3, [r7, #8]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f003 0301 	and.w	r3, r3, #1
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b085      	sub	sp, #20
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80044e4:	f023 0307 	bic.w	r3, r3, #7
 80044e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	460b      	mov	r3, r1
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	333c      	adds	r3, #60	; 0x3c
 8004522:	3304      	adds	r3, #4
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4a26      	ldr	r2, [pc, #152]	; (80045c4 <USB_EP0_OutStart+0xb8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d90a      	bls.n	8004546 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800453c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004540:	d101      	bne.n	8004546 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	e037      	b.n	80045b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454c:	461a      	mov	r2, r3
 800454e:	2300      	movs	r3, #0
 8004550:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004560:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004564:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004574:	f043 0318 	orr.w	r3, r3, #24
 8004578:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004588:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800458c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800458e:	7afb      	ldrb	r3, [r7, #11]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d10f      	bne.n	80045b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459a:	461a      	mov	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80045b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	371c      	adds	r7, #28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	4f54300a 	.word	0x4f54300a

080045c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3301      	adds	r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4a13      	ldr	r2, [pc, #76]	; (800462c <USB_CoreReset+0x64>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d901      	bls.n	80045e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e01b      	b.n	800461e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	daf2      	bge.n	80045d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f043 0201 	orr.w	r2, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3301      	adds	r3, #1
 8004602:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4a09      	ldr	r2, [pc, #36]	; (800462c <USB_CoreReset+0x64>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d901      	bls.n	8004610 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e006      	b.n	800461e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b01      	cmp	r3, #1
 800461a:	d0f0      	beq.n	80045fe <USB_CoreReset+0x36>

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	00030d40 	.word	0x00030d40

08004630 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	460b      	mov	r3, r1
 800463a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800463c:	2054      	movs	r0, #84	; 0x54
 800463e:	f005 f881 	bl	8009744 <USBD_static_malloc>
 8004642:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	32b0      	adds	r2, #176	; 0xb0
 8004654:	2100      	movs	r1, #0
 8004656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800465a:	2302      	movs	r3, #2
 800465c:	e08b      	b.n	8004776 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	32b0      	adds	r2, #176	; 0xb0
 8004668:	68f9      	ldr	r1, [r7, #12]
 800466a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	32b0      	adds	r2, #176	; 0xb0
 8004678:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	7c1b      	ldrb	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d11b      	bne.n	80046c2 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800468a:	4b3d      	ldr	r3, [pc, #244]	; (8004780 <USBD_CUSTOM_HID_Init+0x150>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	f003 020f 	and.w	r2, r3, #15
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	3326      	adds	r3, #38	; 0x26
 80046a0:	2205      	movs	r2, #5
 80046a2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80046a4:	4b37      	ldr	r3, [pc, #220]	; (8004784 <USBD_CUSTOM_HID_Init+0x154>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	f003 020f 	and.w	r2, r3, #15
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80046bc:	2205      	movs	r2, #5
 80046be:	801a      	strh	r2, [r3, #0]
 80046c0:	e01a      	b.n	80046f8 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80046c2:	4b2f      	ldr	r3, [pc, #188]	; (8004780 <USBD_CUSTOM_HID_Init+0x150>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	f003 020f 	and.w	r2, r3, #15
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	3326      	adds	r3, #38	; 0x26
 80046d8:	2205      	movs	r2, #5
 80046da:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80046dc:	4b29      	ldr	r3, [pc, #164]	; (8004784 <USBD_CUSTOM_HID_Init+0x154>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	f003 020f 	and.w	r2, r3, #15
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80046f4:	2205      	movs	r2, #5
 80046f6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80046f8:	4b21      	ldr	r3, [pc, #132]	; (8004780 <USBD_CUSTOM_HID_Init+0x150>)
 80046fa:	7819      	ldrb	r1, [r3, #0]
 80046fc:	2302      	movs	r3, #2
 80046fe:	2203      	movs	r2, #3
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f004 ff0e 	bl	8009522 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8004706:	4b1e      	ldr	r3, [pc, #120]	; (8004780 <USBD_CUSTOM_HID_Init+0x150>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	f003 020f 	and.w	r2, r3, #15
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	3324      	adds	r3, #36	; 0x24
 800471c:	2201      	movs	r2, #1
 800471e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8004720:	4b18      	ldr	r3, [pc, #96]	; (8004784 <USBD_CUSTOM_HID_Init+0x154>)
 8004722:	7819      	ldrb	r1, [r3, #0]
 8004724:	2302      	movs	r3, #2
 8004726:	2203      	movs	r2, #3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f004 fefa 	bl	8009522 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800472e:	4b15      	ldr	r3, [pc, #84]	; (8004784 <USBD_CUSTOM_HID_Init+0x154>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	f003 020f 	and.w	r2, r3, #15
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004746:	2201      	movs	r2, #1
 8004748:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	33b0      	adds	r3, #176	; 0xb0
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8004766:	4b07      	ldr	r3, [pc, #28]	; (8004784 <USBD_CUSTOM_HID_Init+0x154>)
 8004768:	7819      	ldrb	r1, [r3, #0]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	2340      	movs	r3, #64	; 0x40
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f004 ffc6 	bl	8009700 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000086 	.word	0x20000086
 8004784:	20000087 	.word	0x20000087

08004788 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8004794:	4b37      	ldr	r3, [pc, #220]	; (8004874 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	4619      	mov	r1, r3
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f004 fee7 	bl	800956e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80047a0:	4b34      	ldr	r3, [pc, #208]	; (8004874 <USBD_CUSTOM_HID_DeInit+0xec>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	f003 020f 	and.w	r2, r3, #15
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	3324      	adds	r3, #36	; 0x24
 80047b6:	2200      	movs	r2, #0
 80047b8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80047ba:	4b2e      	ldr	r3, [pc, #184]	; (8004874 <USBD_CUSTOM_HID_DeInit+0xec>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	f003 020f 	and.w	r2, r3, #15
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	3326      	adds	r3, #38	; 0x26
 80047d0:	2200      	movs	r2, #0
 80047d2:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80047d4:	4b28      	ldr	r3, [pc, #160]	; (8004878 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	4619      	mov	r1, r3
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f004 fec7 	bl	800956e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80047e0:	4b25      	ldr	r3, [pc, #148]	; (8004878 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	f003 020f 	and.w	r2, r3, #15
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80047f8:	2200      	movs	r2, #0
 80047fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80047fc:	4b1e      	ldr	r3, [pc, #120]	; (8004878 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	f003 020f 	and.w	r2, r3, #15
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8004814:	2200      	movs	r2, #0
 8004816:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	32b0      	adds	r2, #176	; 0xb0
 8004822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d01f      	beq.n	800486a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	33b0      	adds	r3, #176	; 0xb0
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	32b0      	adds	r2, #176	; 0xb0
 8004848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800484c:	4618      	mov	r0, r3
 800484e:	f004 ff87 	bl	8009760 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	32b0      	adds	r2, #176	; 0xb0
 800485c:	2100      	movs	r1, #0
 800485e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20000086 	.word	0x20000086
 8004878:	20000087 	.word	0x20000087

0800487c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	32b0      	adds	r2, #176	; 0xb0
 8004890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004894:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e0f8      	b.n	8004aa2 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d056      	beq.n	800496a <USBD_CUSTOM_HID_Setup+0xee>
 80048bc:	2b20      	cmp	r3, #32
 80048be:	f040 80e8 	bne.w	8004a92 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	785b      	ldrb	r3, [r3, #1]
 80048c6:	3b02      	subs	r3, #2
 80048c8:	2b09      	cmp	r3, #9
 80048ca:	d846      	bhi.n	800495a <USBD_CUSTOM_HID_Setup+0xde>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <USBD_CUSTOM_HID_Setup+0x58>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	0800492d 	.word	0x0800492d
 80048d8:	0800490b 	.word	0x0800490b
 80048dc:	0800495b 	.word	0x0800495b
 80048e0:	0800495b 	.word	0x0800495b
 80048e4:	0800495b 	.word	0x0800495b
 80048e8:	0800495b 	.word	0x0800495b
 80048ec:	0800495b 	.word	0x0800495b
 80048f0:	0800493d 	.word	0x0800493d
 80048f4:	0800491b 	.word	0x0800491b
 80048f8:	080048fd 	.word	0x080048fd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	885b      	ldrh	r3, [r3, #2]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8004908:	e02e      	b.n	8004968 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	3340      	adds	r3, #64	; 0x40
 800490e:	2201      	movs	r2, #1
 8004910:	4619      	mov	r1, r3
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f001 fcce 	bl	80062b4 <USBD_CtlSendData>
          break;
 8004918:	e026      	b.n	8004968 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	885b      	ldrh	r3, [r3, #2]
 800491e:	0a1b      	lsrs	r3, r3, #8
 8004920:	b29b      	uxth	r3, r3
 8004922:	b2db      	uxtb	r3, r3
 8004924:	461a      	mov	r2, r3
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 800492a:	e01d      	b.n	8004968 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	3344      	adds	r3, #68	; 0x44
 8004930:	2201      	movs	r2, #1
 8004932:	4619      	mov	r1, r3
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f001 fcbd 	bl	80062b4 <USBD_CtlSendData>
          break;
 800493a:	e015      	b.n	8004968 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	2201      	movs	r2, #1
 8004940:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8004942:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	88db      	ldrh	r3, [r3, #6]
 8004948:	2b40      	cmp	r3, #64	; 0x40
 800494a:	bf28      	it	cs
 800494c:	2340      	movcs	r3, #64	; 0x40
 800494e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8004950:	461a      	mov	r2, r3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f001 fcda 	bl	800630c <USBD_CtlPrepareRx>
          break;
 8004958:	e006      	b.n	8004968 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 800495a:	6839      	ldr	r1, [r7, #0]
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f001 fc38 	bl	80061d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8004962:	2303      	movs	r3, #3
 8004964:	75fb      	strb	r3, [r7, #23]
          break;
 8004966:	bf00      	nop
      }
      break;
 8004968:	e09a      	b.n	8004aa0 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	785b      	ldrb	r3, [r3, #1]
 800496e:	2b0b      	cmp	r3, #11
 8004970:	f200 8086 	bhi.w	8004a80 <USBD_CUSTOM_HID_Setup+0x204>
 8004974:	a201      	add	r2, pc, #4	; (adr r2, 800497c <USBD_CUSTOM_HID_Setup+0x100>)
 8004976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497a:	bf00      	nop
 800497c:	080049ad 	.word	0x080049ad
 8004980:	08004a8f 	.word	0x08004a8f
 8004984:	08004a81 	.word	0x08004a81
 8004988:	08004a81 	.word	0x08004a81
 800498c:	08004a81 	.word	0x08004a81
 8004990:	08004a81 	.word	0x08004a81
 8004994:	080049d7 	.word	0x080049d7
 8004998:	08004a81 	.word	0x08004a81
 800499c:	08004a81 	.word	0x08004a81
 80049a0:	08004a81 	.word	0x08004a81
 80049a4:	08004a2f 	.word	0x08004a2f
 80049a8:	08004a59 	.word	0x08004a59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d107      	bne.n	80049c8 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80049b8:	f107 030e 	add.w	r3, r7, #14
 80049bc:	2202      	movs	r2, #2
 80049be:	4619      	mov	r1, r3
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f001 fc77 	bl	80062b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80049c6:	e063      	b.n	8004a90 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80049c8:	6839      	ldr	r1, [r7, #0]
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f001 fc01 	bl	80061d2 <USBD_CtlError>
            ret = USBD_FAIL;
 80049d0:	2303      	movs	r3, #3
 80049d2:	75fb      	strb	r3, [r7, #23]
          break;
 80049d4:	e05c      	b.n	8004a90 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	885b      	ldrh	r3, [r3, #2]
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b22      	cmp	r3, #34	; 0x22
 80049e0:	d110      	bne.n	8004a04 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	88db      	ldrh	r3, [r3, #6]
 80049e6:	2b1c      	cmp	r3, #28
 80049e8:	bf28      	it	cs
 80049ea:	231c      	movcs	r3, #28
 80049ec:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	33b0      	adds	r3, #176	; 0xb0
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	e00d      	b.n	8004a20 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	885b      	ldrh	r3, [r3, #2]
 8004a08:	0a1b      	lsrs	r3, r3, #8
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b21      	cmp	r3, #33	; 0x21
 8004a0e:	d107      	bne.n	8004a20 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8004a10:	4b26      	ldr	r3, [pc, #152]	; (8004aac <USBD_CUSTOM_HID_Setup+0x230>)
 8004a12:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	88db      	ldrh	r3, [r3, #6]
 8004a18:	2b09      	cmp	r3, #9
 8004a1a:	bf28      	it	cs
 8004a1c:	2309      	movcs	r3, #9
 8004a1e:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004a20:	8bfb      	ldrh	r3, [r7, #30]
 8004a22:	461a      	mov	r2, r3
 8004a24:	69b9      	ldr	r1, [r7, #24]
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f001 fc44 	bl	80062b4 <USBD_CtlSendData>
          break;
 8004a2c:	e030      	b.n	8004a90 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d107      	bne.n	8004a4a <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	3348      	adds	r3, #72	; 0x48
 8004a3e:	2201      	movs	r2, #1
 8004a40:	4619      	mov	r1, r3
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f001 fc36 	bl	80062b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a48:	e022      	b.n	8004a90 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8004a4a:	6839      	ldr	r1, [r7, #0]
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f001 fbc0 	bl	80061d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a52:	2303      	movs	r3, #3
 8004a54:	75fb      	strb	r3, [r7, #23]
          break;
 8004a56:	e01b      	b.n	8004a90 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d106      	bne.n	8004a72 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	885b      	ldrh	r3, [r3, #2]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a70:	e00e      	b.n	8004a90 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8004a72:	6839      	ldr	r1, [r7, #0]
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f001 fbac 	bl	80061d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	75fb      	strb	r3, [r7, #23]
          break;
 8004a7e:	e007      	b.n	8004a90 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004a80:	6839      	ldr	r1, [r7, #0]
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f001 fba5 	bl	80061d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	75fb      	strb	r3, [r7, #23]
          break;
 8004a8c:	e000      	b.n	8004a90 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8004a8e:	bf00      	nop
      }
      break;
 8004a90:	e006      	b.n	8004aa0 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8004a92:	6839      	ldr	r1, [r7, #0]
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f001 fb9c 	bl	80061d2 <USBD_CtlError>
      ret = USBD_FAIL;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a9e:	bf00      	nop
  }
  return (uint8_t)ret;
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3720      	adds	r7, #32
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000070 	.word	0x20000070

08004ab0 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	4613      	mov	r3, r2
 8004abc:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	32b0      	adds	r2, #176	; 0xb0
 8004ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e021      	b.n	8004b18 <USBD_CUSTOM_HID_SendReport+0x68>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	32b0      	adds	r2, #176	; 0xb0
 8004ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ae2:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d112      	bne.n	8004b16 <USBD_CUSTOM_HID_SendReport+0x66>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10b      	bne.n	8004b12 <USBD_CUSTOM_HID_SendReport+0x62>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8004b02:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <USBD_CUSTOM_HID_SendReport+0x70>)
 8004b04:	7819      	ldrb	r1, [r3, #0]
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f004 fdd7 	bl	80096be <USBD_LL_Transmit>
 8004b10:	e001      	b.n	8004b16 <USBD_CUSTOM_HID_SendReport+0x66>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <USBD_CUSTOM_HID_SendReport+0x68>
    }
  }
  return (uint8_t)USBD_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20000086 	.word	0x20000086

08004b24 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8004b2c:	2181      	movs	r1, #129	; 0x81
 8004b2e:	4815      	ldr	r0, [pc, #84]	; (8004b84 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8004b30:	f000 fd17 	bl	8005562 <USBD_GetEpDesc>
 8004b34:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8004b36:	2101      	movs	r1, #1
 8004b38:	4812      	ldr	r0, [pc, #72]	; (8004b84 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8004b3a:	f000 fd12 	bl	8005562 <USBD_GetEpDesc>
 8004b3e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f042 0202 	orr.w	r2, r2, #2
 8004b4e:	711a      	strb	r2, [r3, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2205      	movs	r2, #5
 8004b58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d009      	beq.n	8004b74 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f042 0202 	orr.w	r2, r2, #2
 8004b68:	711a      	strb	r2, [r3, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2205      	movs	r2, #5
 8004b72:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2229      	movs	r2, #41	; 0x29
 8004b78:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8004b7a:	4b02      	ldr	r3, [pc, #8]	; (8004b84 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	20000044 	.word	0x20000044

08004b88 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8004b90:	2181      	movs	r1, #129	; 0x81
 8004b92:	4815      	ldr	r0, [pc, #84]	; (8004be8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8004b94:	f000 fce5 	bl	8005562 <USBD_GetEpDesc>
 8004b98:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	4812      	ldr	r0, [pc, #72]	; (8004be8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8004b9e:	f000 fce0 	bl	8005562 <USBD_GetEpDesc>
 8004ba2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d009      	beq.n	8004bbe <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f042 0202 	orr.w	r2, r2, #2
 8004bb2:	711a      	strb	r2, [r3, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2205      	movs	r2, #5
 8004bbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d009      	beq.n	8004bd8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f042 0202 	orr.w	r2, r2, #2
 8004bcc:	711a      	strb	r2, [r3, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2205      	movs	r2, #5
 8004bd6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2229      	movs	r2, #41	; 0x29
 8004bdc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8004bde:	4b02      	ldr	r3, [pc, #8]	; (8004be8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20000044 	.word	0x20000044

08004bec <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8004bf4:	2181      	movs	r1, #129	; 0x81
 8004bf6:	4815      	ldr	r0, [pc, #84]	; (8004c4c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8004bf8:	f000 fcb3 	bl	8005562 <USBD_GetEpDesc>
 8004bfc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8004bfe:	2101      	movs	r1, #1
 8004c00:	4812      	ldr	r0, [pc, #72]	; (8004c4c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8004c02:	f000 fcae 	bl	8005562 <USBD_GetEpDesc>
 8004c06:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f042 0202 	orr.w	r2, r2, #2
 8004c16:	711a      	strb	r2, [r3, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2205      	movs	r2, #5
 8004c20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d009      	beq.n	8004c3c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f042 0202 	orr.w	r2, r2, #2
 8004c30:	711a      	strb	r2, [r3, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2205      	movs	r2, #5
 8004c3a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2229      	movs	r2, #41	; 0x29
 8004c40:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8004c42:	4b02      	ldr	r3, [pc, #8]	; (8004c4c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	20000044 	.word	0x20000044

08004c50 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	32b0      	adds	r2, #176	; 0xb0
 8004c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	460b      	mov	r3, r1
 8004c88:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	32b0      	adds	r2, #176	; 0xb0
 8004c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e017      	b.n	8004cd0 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	32b0      	adds	r2, #176	; 0xb0
 8004caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	33b0      	adds	r3, #176	; 0xb0
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	7810      	ldrb	r0, [r2, #0]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	7852      	ldrb	r2, [r2, #1]
 8004cca:	4611      	mov	r1, r2
 8004ccc:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	32b0      	adds	r2, #176	; 0xb0
 8004cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e00f      	b.n	8004d16 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	32b0      	adds	r2, #176	; 0xb0
 8004d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d04:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8004d08:	7819      	ldrb	r1, [r3, #0]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	2340      	movs	r3, #64	; 0x40
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f004 fcf6 	bl	8009700 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	20000087 	.word	0x20000087

08004d24 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	32b0      	adds	r2, #176	; 0xb0
 8004d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d3a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e016      	b.n	8004d74 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d111      	bne.n	8004d72 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	33b0      	adds	r3, #176	; 0xb0
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	7810      	ldrb	r0, [r2, #0]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	7852      	ldrb	r2, [r2, #1]
 8004d68:	4611      	mov	r1, r2
 8004d6a:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	220a      	movs	r2, #10
 8004d88:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8004d8a:	4b03      	ldr	r3, [pc, #12]	; (8004d98 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	2000007c 	.word	0x2000007c

08004d9c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e009      	b.n	8004dc4 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	33b0      	adds	r3, #176	; 0xb0
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e01f      	b.n	8004e28 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	79fa      	ldrb	r2, [r7, #7]
 8004e1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f004 fb19 	bl	8009454 <USBD_LL_Init>
 8004e22:	4603      	mov	r3, r0
 8004e24:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e025      	b.n	8004e94 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	32ae      	adds	r2, #174	; 0xae
 8004e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00f      	beq.n	8004e84 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	32ae      	adds	r2, #174	; 0xae
 8004e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	f107 020e 	add.w	r2, r7, #14
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4798      	blx	r3
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f004 fb21 	bl	80094ec <USBD_LL_Start>
 8004eaa:	4603      	mov	r3, r0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ebc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d009      	beq.n	8004ef8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	78fa      	ldrb	r2, [r7, #3]
 8004eee:	4611      	mov	r1, r2
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	4798      	blx	r3
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	78fa      	ldrb	r2, [r7, #3]
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b084      	sub	sp, #16
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f46:	6839      	ldr	r1, [r7, #0]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f001 f908 	bl	800615e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004f6a:	f003 031f 	and.w	r3, r3, #31
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d01a      	beq.n	8004fa8 <USBD_LL_SetupStage+0x72>
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d822      	bhi.n	8004fbc <USBD_LL_SetupStage+0x86>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <USBD_LL_SetupStage+0x4a>
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d00a      	beq.n	8004f94 <USBD_LL_SetupStage+0x5e>
 8004f7e:	e01d      	b.n	8004fbc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fb5f 	bl	800564c <USBD_StdDevReq>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	73fb      	strb	r3, [r7, #15]
      break;
 8004f92:	e020      	b.n	8004fd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 fbc7 	bl	8005730 <USBD_StdItfReq>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8004fa6:	e016      	b.n	8004fd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004fae:	4619      	mov	r1, r3
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fc29 	bl	8005808 <USBD_StdEPReq>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8004fba:	e00c      	b.n	8004fd6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004fc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f004 faee 	bl	80095ac <USBD_LL_StallEP>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd4:	bf00      	nop
  }

  return ret;
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004ff2:	7afb      	ldrb	r3, [r7, #11]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d16e      	bne.n	80050d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004ffe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005006:	2b03      	cmp	r3, #3
 8005008:	f040 8098 	bne.w	800513c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	429a      	cmp	r2, r3
 8005016:	d913      	bls.n	8005040 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	1ad2      	subs	r2, r2, r3
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	4293      	cmp	r3, r2
 8005030:	bf28      	it	cs
 8005032:	4613      	movcs	r3, r2
 8005034:	461a      	mov	r2, r3
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f001 f984 	bl	8006346 <USBD_CtlContinueRx>
 800503e:	e07d      	b.n	800513c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005046:	f003 031f 	and.w	r3, r3, #31
 800504a:	2b02      	cmp	r3, #2
 800504c:	d014      	beq.n	8005078 <USBD_LL_DataOutStage+0x98>
 800504e:	2b02      	cmp	r3, #2
 8005050:	d81d      	bhi.n	800508e <USBD_LL_DataOutStage+0xae>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <USBD_LL_DataOutStage+0x7c>
 8005056:	2b01      	cmp	r3, #1
 8005058:	d003      	beq.n	8005062 <USBD_LL_DataOutStage+0x82>
 800505a:	e018      	b.n	800508e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	75bb      	strb	r3, [r7, #22]
            break;
 8005060:	e018      	b.n	8005094 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005068:	b2db      	uxtb	r3, r3
 800506a:	4619      	mov	r1, r3
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fa5e 	bl	800552e <USBD_CoreFindIF>
 8005072:	4603      	mov	r3, r0
 8005074:	75bb      	strb	r3, [r7, #22]
            break;
 8005076:	e00d      	b.n	8005094 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800507e:	b2db      	uxtb	r3, r3
 8005080:	4619      	mov	r1, r3
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 fa60 	bl	8005548 <USBD_CoreFindEP>
 8005088:	4603      	mov	r3, r0
 800508a:	75bb      	strb	r3, [r7, #22]
            break;
 800508c:	e002      	b.n	8005094 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	75bb      	strb	r3, [r7, #22]
            break;
 8005092:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005094:	7dbb      	ldrb	r3, [r7, #22]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d119      	bne.n	80050ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d113      	bne.n	80050ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80050a6:	7dba      	ldrb	r2, [r7, #22]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	32ae      	adds	r2, #174	; 0xae
 80050ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00b      	beq.n	80050ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80050b6:	7dba      	ldrb	r2, [r7, #22]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80050be:	7dba      	ldrb	r2, [r7, #22]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	32ae      	adds	r2, #174	; 0xae
 80050c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f001 f94a 	bl	8006368 <USBD_CtlSendStatus>
 80050d4:	e032      	b.n	800513c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80050d6:	7afb      	ldrb	r3, [r7, #11]
 80050d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	4619      	mov	r1, r3
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 fa31 	bl	8005548 <USBD_CoreFindEP>
 80050e6:	4603      	mov	r3, r0
 80050e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80050ea:	7dbb      	ldrb	r3, [r7, #22]
 80050ec:	2bff      	cmp	r3, #255	; 0xff
 80050ee:	d025      	beq.n	800513c <USBD_LL_DataOutStage+0x15c>
 80050f0:	7dbb      	ldrb	r3, [r7, #22]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d122      	bne.n	800513c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d117      	bne.n	8005132 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005102:	7dba      	ldrb	r2, [r7, #22]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	32ae      	adds	r2, #174	; 0xae
 8005108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00f      	beq.n	8005132 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005112:	7dba      	ldrb	r2, [r7, #22]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800511a:	7dba      	ldrb	r2, [r7, #22]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	32ae      	adds	r2, #174	; 0xae
 8005120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	7afa      	ldrb	r2, [r7, #11]
 8005128:	4611      	mov	r1, r2
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	4798      	blx	r3
 800512e:	4603      	mov	r3, r0
 8005130:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005132:	7dfb      	ldrb	r3, [r7, #23]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005138:	7dfb      	ldrb	r3, [r7, #23]
 800513a:	e000      	b.n	800513e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b086      	sub	sp, #24
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	460b      	mov	r3, r1
 8005150:	607a      	str	r2, [r7, #4]
 8005152:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005154:	7afb      	ldrb	r3, [r7, #11]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d16f      	bne.n	800523a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3314      	adds	r3, #20
 800515e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005166:	2b02      	cmp	r3, #2
 8005168:	d15a      	bne.n	8005220 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	429a      	cmp	r2, r3
 8005174:	d914      	bls.n	80051a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	1ad2      	subs	r2, r2, r3
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	461a      	mov	r2, r3
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f001 f8ac 	bl	80062ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005192:	2300      	movs	r3, #0
 8005194:	2200      	movs	r2, #0
 8005196:	2100      	movs	r1, #0
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f004 fab1 	bl	8009700 <USBD_LL_PrepareReceive>
 800519e:	e03f      	b.n	8005220 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d11c      	bne.n	80051e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d316      	bcc.n	80051e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d20f      	bcs.n	80051e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80051c6:	2200      	movs	r2, #0
 80051c8:	2100      	movs	r1, #0
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f001 f88d 	bl	80062ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80051d8:	2300      	movs	r3, #0
 80051da:	2200      	movs	r2, #0
 80051dc:	2100      	movs	r1, #0
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f004 fa8e 	bl	8009700 <USBD_LL_PrepareReceive>
 80051e4:	e01c      	b.n	8005220 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d10f      	bne.n	8005212 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005212:	2180      	movs	r1, #128	; 0x80
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f004 f9c9 	bl	80095ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f001 f8b7 	bl	800638e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d03a      	beq.n	80052a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f7ff fe42 	bl	8004eb4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005238:	e032      	b.n	80052a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800523a:	7afb      	ldrb	r3, [r7, #11]
 800523c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005240:	b2db      	uxtb	r3, r3
 8005242:	4619      	mov	r1, r3
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 f97f 	bl	8005548 <USBD_CoreFindEP>
 800524a:	4603      	mov	r3, r0
 800524c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800524e:	7dfb      	ldrb	r3, [r7, #23]
 8005250:	2bff      	cmp	r3, #255	; 0xff
 8005252:	d025      	beq.n	80052a0 <USBD_LL_DataInStage+0x15a>
 8005254:	7dfb      	ldrb	r3, [r7, #23]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d122      	bne.n	80052a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b03      	cmp	r3, #3
 8005264:	d11c      	bne.n	80052a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005266:	7dfa      	ldrb	r2, [r7, #23]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	32ae      	adds	r2, #174	; 0xae
 800526c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d014      	beq.n	80052a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005276:	7dfa      	ldrb	r2, [r7, #23]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800527e:	7dfa      	ldrb	r2, [r7, #23]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	32ae      	adds	r2, #174	; 0xae
 8005284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	7afa      	ldrb	r2, [r7, #11]
 800528c:	4611      	mov	r1, r2
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	4798      	blx	r3
 8005292:	4603      	mov	r3, r0
 8005294:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005296:	7dbb      	ldrb	r3, [r7, #22]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800529c:	7dbb      	ldrb	r3, [r7, #22]
 800529e:	e000      	b.n	80052a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d014      	beq.n	8005310 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00e      	beq.n	8005310 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6852      	ldr	r2, [r2, #4]
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	4611      	mov	r1, r2
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	4798      	blx	r3
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800530c:	2303      	movs	r3, #3
 800530e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005310:	2340      	movs	r3, #64	; 0x40
 8005312:	2200      	movs	r2, #0
 8005314:	2100      	movs	r1, #0
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f004 f903 	bl	8009522 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2240      	movs	r2, #64	; 0x40
 8005328:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800532c:	2340      	movs	r3, #64	; 0x40
 800532e:	2200      	movs	r2, #0
 8005330:	2180      	movs	r1, #128	; 0x80
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f004 f8f5 	bl	8009522 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2240      	movs	r2, #64	; 0x40
 8005342:	621a      	str	r2, [r3, #32]

  return ret;
 8005344:	7bfb      	ldrb	r3, [r7, #15]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	460b      	mov	r3, r1
 8005358:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800537c:	b2da      	uxtb	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2204      	movs	r2, #4
 8005388:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d106      	bne.n	80053bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b082      	sub	sp, #8
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d110      	bne.n	8005400 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00b      	beq.n	8005400 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	32ae      	adds	r2, #174	; 0xae
 8005420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005428:	2303      	movs	r3, #3
 800542a:	e01c      	b.n	8005466 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b03      	cmp	r3, #3
 8005436:	d115      	bne.n	8005464 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	32ae      	adds	r2, #174	; 0xae
 8005442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00b      	beq.n	8005464 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	32ae      	adds	r2, #174	; 0xae
 8005456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	78fa      	ldrb	r2, [r7, #3]
 800545e:	4611      	mov	r1, r2
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b082      	sub	sp, #8
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	460b      	mov	r3, r1
 8005478:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	32ae      	adds	r2, #174	; 0xae
 8005484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800548c:	2303      	movs	r3, #3
 800548e:	e01c      	b.n	80054ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b03      	cmp	r3, #3
 800549a:	d115      	bne.n	80054c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	32ae      	adds	r2, #174	; 0xae
 80054a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00b      	beq.n	80054c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	32ae      	adds	r2, #174	; 0xae
 80054ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	78fa      	ldrb	r2, [r7, #3]
 80054c2:	4611      	mov	r1, r2
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00e      	beq.n	8005524 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6852      	ldr	r2, [r2, #4]
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	4611      	mov	r1, r2
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	4798      	blx	r3
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005520:	2303      	movs	r3, #3
 8005522:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005524:	7bfb      	ldrb	r3, [r7, #15]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	460b      	mov	r3, r1
 8005538:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800553a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800553c:	4618      	mov	r0, r3
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005554:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005556:	4618      	mov	r0, r3
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b086      	sub	sp, #24
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	460b      	mov	r3, r1
 800556c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005576:	2300      	movs	r3, #0
 8005578:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	885b      	ldrh	r3, [r3, #2]
 800557e:	b29a      	uxth	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	b29b      	uxth	r3, r3
 8005586:	429a      	cmp	r2, r3
 8005588:	d920      	bls.n	80055cc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	b29b      	uxth	r3, r3
 8005590:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005592:	e013      	b.n	80055bc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005594:	f107 030a 	add.w	r3, r7, #10
 8005598:	4619      	mov	r1, r3
 800559a:	6978      	ldr	r0, [r7, #20]
 800559c:	f000 f81b 	bl	80055d6 <USBD_GetNextDesc>
 80055a0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	785b      	ldrb	r3, [r3, #1]
 80055a6:	2b05      	cmp	r3, #5
 80055a8:	d108      	bne.n	80055bc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	789b      	ldrb	r3, [r3, #2]
 80055b2:	78fa      	ldrb	r2, [r7, #3]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d008      	beq.n	80055ca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	885b      	ldrh	r3, [r3, #2]
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	897b      	ldrh	r3, [r7, #10]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d8e5      	bhi.n	8005594 <USBD_GetEpDesc+0x32>
 80055c8:	e000      	b.n	80055cc <USBD_GetEpDesc+0x6a>
          break;
 80055ca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80055cc:	693b      	ldr	r3, [r7, #16]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	881a      	ldrh	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	4413      	add	r3, r2
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4413      	add	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005602:	68fb      	ldr	r3, [r7, #12]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	3301      	adds	r3, #1
 8005626:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800562e:	8a3b      	ldrh	r3, [r7, #16]
 8005630:	021b      	lsls	r3, r3, #8
 8005632:	b21a      	sxth	r2, r3
 8005634:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005638:	4313      	orrs	r3, r2
 800563a:	b21b      	sxth	r3, r3
 800563c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800563e:	89fb      	ldrh	r3, [r7, #14]
}
 8005640:	4618      	mov	r0, r3
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005662:	2b40      	cmp	r3, #64	; 0x40
 8005664:	d005      	beq.n	8005672 <USBD_StdDevReq+0x26>
 8005666:	2b40      	cmp	r3, #64	; 0x40
 8005668:	d857      	bhi.n	800571a <USBD_StdDevReq+0xce>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00f      	beq.n	800568e <USBD_StdDevReq+0x42>
 800566e:	2b20      	cmp	r3, #32
 8005670:	d153      	bne.n	800571a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	32ae      	adds	r2, #174	; 0xae
 800567c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	6839      	ldr	r1, [r7, #0]
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	4798      	blx	r3
 8005688:	4603      	mov	r3, r0
 800568a:	73fb      	strb	r3, [r7, #15]
      break;
 800568c:	e04a      	b.n	8005724 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	785b      	ldrb	r3, [r3, #1]
 8005692:	2b09      	cmp	r3, #9
 8005694:	d83b      	bhi.n	800570e <USBD_StdDevReq+0xc2>
 8005696:	a201      	add	r2, pc, #4	; (adr r2, 800569c <USBD_StdDevReq+0x50>)
 8005698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569c:	080056f1 	.word	0x080056f1
 80056a0:	08005705 	.word	0x08005705
 80056a4:	0800570f 	.word	0x0800570f
 80056a8:	080056fb 	.word	0x080056fb
 80056ac:	0800570f 	.word	0x0800570f
 80056b0:	080056cf 	.word	0x080056cf
 80056b4:	080056c5 	.word	0x080056c5
 80056b8:	0800570f 	.word	0x0800570f
 80056bc:	080056e7 	.word	0x080056e7
 80056c0:	080056d9 	.word	0x080056d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80056c4:	6839      	ldr	r1, [r7, #0]
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fa3c 	bl	8005b44 <USBD_GetDescriptor>
          break;
 80056cc:	e024      	b.n	8005718 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80056ce:	6839      	ldr	r1, [r7, #0]
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fba1 	bl	8005e18 <USBD_SetAddress>
          break;
 80056d6:	e01f      	b.n	8005718 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80056d8:	6839      	ldr	r1, [r7, #0]
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fbe0 	bl	8005ea0 <USBD_SetConfig>
 80056e0:	4603      	mov	r3, r0
 80056e2:	73fb      	strb	r3, [r7, #15]
          break;
 80056e4:	e018      	b.n	8005718 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80056e6:	6839      	ldr	r1, [r7, #0]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fc83 	bl	8005ff4 <USBD_GetConfig>
          break;
 80056ee:	e013      	b.n	8005718 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80056f0:	6839      	ldr	r1, [r7, #0]
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fcb4 	bl	8006060 <USBD_GetStatus>
          break;
 80056f8:	e00e      	b.n	8005718 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80056fa:	6839      	ldr	r1, [r7, #0]
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fce3 	bl	80060c8 <USBD_SetFeature>
          break;
 8005702:	e009      	b.n	8005718 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fd07 	bl	800611a <USBD_ClrFeature>
          break;
 800570c:	e004      	b.n	8005718 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800570e:	6839      	ldr	r1, [r7, #0]
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fd5e 	bl	80061d2 <USBD_CtlError>
          break;
 8005716:	bf00      	nop
      }
      break;
 8005718:	e004      	b.n	8005724 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800571a:	6839      	ldr	r1, [r7, #0]
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fd58 	bl	80061d2 <USBD_CtlError>
      break;
 8005722:	bf00      	nop
  }

  return ret;
 8005724:	7bfb      	ldrb	r3, [r7, #15]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop

08005730 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	d005      	beq.n	8005756 <USBD_StdItfReq+0x26>
 800574a:	2b40      	cmp	r3, #64	; 0x40
 800574c:	d852      	bhi.n	80057f4 <USBD_StdItfReq+0xc4>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <USBD_StdItfReq+0x26>
 8005752:	2b20      	cmp	r3, #32
 8005754:	d14e      	bne.n	80057f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800575c:	b2db      	uxtb	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	2b02      	cmp	r3, #2
 8005762:	d840      	bhi.n	80057e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	889b      	ldrh	r3, [r3, #4]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b01      	cmp	r3, #1
 800576c:	d836      	bhi.n	80057dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	889b      	ldrh	r3, [r3, #4]
 8005772:	b2db      	uxtb	r3, r3
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff fed9 	bl	800552e <USBD_CoreFindIF>
 800577c:	4603      	mov	r3, r0
 800577e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005780:	7bbb      	ldrb	r3, [r7, #14]
 8005782:	2bff      	cmp	r3, #255	; 0xff
 8005784:	d01d      	beq.n	80057c2 <USBD_StdItfReq+0x92>
 8005786:	7bbb      	ldrb	r3, [r7, #14]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d11a      	bne.n	80057c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800578c:	7bba      	ldrb	r2, [r7, #14]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	32ae      	adds	r2, #174	; 0xae
 8005792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00f      	beq.n	80057bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800579c:	7bba      	ldrb	r2, [r7, #14]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80057a4:	7bba      	ldrb	r2, [r7, #14]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	32ae      	adds	r2, #174	; 0xae
 80057aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	6839      	ldr	r1, [r7, #0]
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	4798      	blx	r3
 80057b6:	4603      	mov	r3, r0
 80057b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80057ba:	e004      	b.n	80057c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80057bc:	2303      	movs	r3, #3
 80057be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80057c0:	e001      	b.n	80057c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80057c2:	2303      	movs	r3, #3
 80057c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	88db      	ldrh	r3, [r3, #6]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d110      	bne.n	80057f0 <USBD_StdItfReq+0xc0>
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10d      	bne.n	80057f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fdc7 	bl	8006368 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80057da:	e009      	b.n	80057f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fcf7 	bl	80061d2 <USBD_CtlError>
          break;
 80057e4:	e004      	b.n	80057f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fcf2 	bl	80061d2 <USBD_CtlError>
          break;
 80057ee:	e000      	b.n	80057f2 <USBD_StdItfReq+0xc2>
          break;
 80057f0:	bf00      	nop
      }
      break;
 80057f2:	e004      	b.n	80057fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80057f4:	6839      	ldr	r1, [r7, #0]
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fceb 	bl	80061d2 <USBD_CtlError>
      break;
 80057fc:	bf00      	nop
  }

  return ret;
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	889b      	ldrh	r3, [r3, #4]
 800581a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	d007      	beq.n	8005838 <USBD_StdEPReq+0x30>
 8005828:	2b40      	cmp	r3, #64	; 0x40
 800582a:	f200 817f 	bhi.w	8005b2c <USBD_StdEPReq+0x324>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d02a      	beq.n	8005888 <USBD_StdEPReq+0x80>
 8005832:	2b20      	cmp	r3, #32
 8005834:	f040 817a 	bne.w	8005b2c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005838:	7bbb      	ldrb	r3, [r7, #14]
 800583a:	4619      	mov	r1, r3
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff fe83 	bl	8005548 <USBD_CoreFindEP>
 8005842:	4603      	mov	r3, r0
 8005844:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005846:	7b7b      	ldrb	r3, [r7, #13]
 8005848:	2bff      	cmp	r3, #255	; 0xff
 800584a:	f000 8174 	beq.w	8005b36 <USBD_StdEPReq+0x32e>
 800584e:	7b7b      	ldrb	r3, [r7, #13]
 8005850:	2b00      	cmp	r3, #0
 8005852:	f040 8170 	bne.w	8005b36 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005856:	7b7a      	ldrb	r2, [r7, #13]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800585e:	7b7a      	ldrb	r2, [r7, #13]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	32ae      	adds	r2, #174	; 0xae
 8005864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 8163 	beq.w	8005b36 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005870:	7b7a      	ldrb	r2, [r7, #13]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	32ae      	adds	r2, #174	; 0xae
 8005876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	6839      	ldr	r1, [r7, #0]
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	4798      	blx	r3
 8005882:	4603      	mov	r3, r0
 8005884:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005886:	e156      	b.n	8005b36 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	785b      	ldrb	r3, [r3, #1]
 800588c:	2b03      	cmp	r3, #3
 800588e:	d008      	beq.n	80058a2 <USBD_StdEPReq+0x9a>
 8005890:	2b03      	cmp	r3, #3
 8005892:	f300 8145 	bgt.w	8005b20 <USBD_StdEPReq+0x318>
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 809b 	beq.w	80059d2 <USBD_StdEPReq+0x1ca>
 800589c:	2b01      	cmp	r3, #1
 800589e:	d03c      	beq.n	800591a <USBD_StdEPReq+0x112>
 80058a0:	e13e      	b.n	8005b20 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d002      	beq.n	80058b4 <USBD_StdEPReq+0xac>
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d016      	beq.n	80058e0 <USBD_StdEPReq+0xd8>
 80058b2:	e02c      	b.n	800590e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058b4:	7bbb      	ldrb	r3, [r7, #14]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00d      	beq.n	80058d6 <USBD_StdEPReq+0xce>
 80058ba:	7bbb      	ldrb	r3, [r7, #14]
 80058bc:	2b80      	cmp	r3, #128	; 0x80
 80058be:	d00a      	beq.n	80058d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80058c0:	7bbb      	ldrb	r3, [r7, #14]
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f003 fe71 	bl	80095ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80058ca:	2180      	movs	r1, #128	; 0x80
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f003 fe6d 	bl	80095ac <USBD_LL_StallEP>
 80058d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80058d4:	e020      	b.n	8005918 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fc7a 	bl	80061d2 <USBD_CtlError>
              break;
 80058de:	e01b      	b.n	8005918 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	885b      	ldrh	r3, [r3, #2]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10e      	bne.n	8005906 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80058e8:	7bbb      	ldrb	r3, [r7, #14]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00b      	beq.n	8005906 <USBD_StdEPReq+0xfe>
 80058ee:	7bbb      	ldrb	r3, [r7, #14]
 80058f0:	2b80      	cmp	r3, #128	; 0x80
 80058f2:	d008      	beq.n	8005906 <USBD_StdEPReq+0xfe>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	88db      	ldrh	r3, [r3, #6]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d104      	bne.n	8005906 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80058fc:	7bbb      	ldrb	r3, [r7, #14]
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f003 fe53 	bl	80095ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fd2e 	bl	8006368 <USBD_CtlSendStatus>

              break;
 800590c:	e004      	b.n	8005918 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800590e:	6839      	ldr	r1, [r7, #0]
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fc5e 	bl	80061d2 <USBD_CtlError>
              break;
 8005916:	bf00      	nop
          }
          break;
 8005918:	e107      	b.n	8005b2a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d002      	beq.n	800592c <USBD_StdEPReq+0x124>
 8005926:	2b03      	cmp	r3, #3
 8005928:	d016      	beq.n	8005958 <USBD_StdEPReq+0x150>
 800592a:	e04b      	b.n	80059c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800592c:	7bbb      	ldrb	r3, [r7, #14]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00d      	beq.n	800594e <USBD_StdEPReq+0x146>
 8005932:	7bbb      	ldrb	r3, [r7, #14]
 8005934:	2b80      	cmp	r3, #128	; 0x80
 8005936:	d00a      	beq.n	800594e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005938:	7bbb      	ldrb	r3, [r7, #14]
 800593a:	4619      	mov	r1, r3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f003 fe35 	bl	80095ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005942:	2180      	movs	r1, #128	; 0x80
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f003 fe31 	bl	80095ac <USBD_LL_StallEP>
 800594a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800594c:	e040      	b.n	80059d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800594e:	6839      	ldr	r1, [r7, #0]
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fc3e 	bl	80061d2 <USBD_CtlError>
              break;
 8005956:	e03b      	b.n	80059d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	885b      	ldrh	r3, [r3, #2]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d136      	bne.n	80059ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005960:	7bbb      	ldrb	r3, [r7, #14]
 8005962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005966:	2b00      	cmp	r3, #0
 8005968:	d004      	beq.n	8005974 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800596a:	7bbb      	ldrb	r3, [r7, #14]
 800596c:	4619      	mov	r1, r3
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f003 fe3b 	bl	80095ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fcf7 	bl	8006368 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800597a:	7bbb      	ldrb	r3, [r7, #14]
 800597c:	4619      	mov	r1, r3
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff fde2 	bl	8005548 <USBD_CoreFindEP>
 8005984:	4603      	mov	r3, r0
 8005986:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005988:	7b7b      	ldrb	r3, [r7, #13]
 800598a:	2bff      	cmp	r3, #255	; 0xff
 800598c:	d01f      	beq.n	80059ce <USBD_StdEPReq+0x1c6>
 800598e:	7b7b      	ldrb	r3, [r7, #13]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d11c      	bne.n	80059ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005994:	7b7a      	ldrb	r2, [r7, #13]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800599c:	7b7a      	ldrb	r2, [r7, #13]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	32ae      	adds	r2, #174	; 0xae
 80059a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d010      	beq.n	80059ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80059ac:	7b7a      	ldrb	r2, [r7, #13]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	32ae      	adds	r2, #174	; 0xae
 80059b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	6839      	ldr	r1, [r7, #0]
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
 80059be:	4603      	mov	r3, r0
 80059c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80059c2:	e004      	b.n	80059ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80059c4:	6839      	ldr	r1, [r7, #0]
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fc03 	bl	80061d2 <USBD_CtlError>
              break;
 80059cc:	e000      	b.n	80059d0 <USBD_StdEPReq+0x1c8>
              break;
 80059ce:	bf00      	nop
          }
          break;
 80059d0:	e0ab      	b.n	8005b2a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d002      	beq.n	80059e4 <USBD_StdEPReq+0x1dc>
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d032      	beq.n	8005a48 <USBD_StdEPReq+0x240>
 80059e2:	e097      	b.n	8005b14 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059e4:	7bbb      	ldrb	r3, [r7, #14]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <USBD_StdEPReq+0x1f2>
 80059ea:	7bbb      	ldrb	r3, [r7, #14]
 80059ec:	2b80      	cmp	r3, #128	; 0x80
 80059ee:	d004      	beq.n	80059fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fbed 	bl	80061d2 <USBD_CtlError>
                break;
 80059f8:	e091      	b.n	8005b1e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	da0b      	bge.n	8005a1a <USBD_StdEPReq+0x212>
 8005a02:	7bbb      	ldrb	r3, [r7, #14]
 8005a04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	3310      	adds	r3, #16
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	4413      	add	r3, r2
 8005a16:	3304      	adds	r3, #4
 8005a18:	e00b      	b.n	8005a32 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a1a:	7bbb      	ldrb	r3, [r7, #14]
 8005a1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	4413      	add	r3, r2
 8005a30:	3304      	adds	r3, #4
 8005a32:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	4619      	mov	r1, r3
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fc37 	bl	80062b4 <USBD_CtlSendData>
              break;
 8005a46:	e06a      	b.n	8005b1e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005a48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	da11      	bge.n	8005a74 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005a50:	7bbb      	ldrb	r3, [r7, #14]
 8005a52:	f003 020f 	and.w	r2, r3, #15
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	3324      	adds	r3, #36	; 0x24
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d117      	bne.n	8005a9a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005a6a:	6839      	ldr	r1, [r7, #0]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fbb0 	bl	80061d2 <USBD_CtlError>
                  break;
 8005a72:	e054      	b.n	8005b1e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a74:	7bbb      	ldrb	r3, [r7, #14]
 8005a76:	f003 020f 	and.w	r2, r3, #15
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	440b      	add	r3, r1
 8005a86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d104      	bne.n	8005a9a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005a90:	6839      	ldr	r1, [r7, #0]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fb9d 	bl	80061d2 <USBD_CtlError>
                  break;
 8005a98:	e041      	b.n	8005b1e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	da0b      	bge.n	8005aba <USBD_StdEPReq+0x2b2>
 8005aa2:	7bbb      	ldrb	r3, [r7, #14]
 8005aa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	3310      	adds	r3, #16
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	e00b      	b.n	8005ad2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005aba:	7bbb      	ldrb	r3, [r7, #14]
 8005abc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	4413      	add	r3, r2
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005ad4:	7bbb      	ldrb	r3, [r7, #14]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <USBD_StdEPReq+0x2d8>
 8005ada:	7bbb      	ldrb	r3, [r7, #14]
 8005adc:	2b80      	cmp	r3, #128	; 0x80
 8005ade:	d103      	bne.n	8005ae8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	e00e      	b.n	8005b06 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005ae8:	7bbb      	ldrb	r3, [r7, #14]
 8005aea:	4619      	mov	r1, r3
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f003 fd9b 	bl	8009628 <USBD_LL_IsStallEP>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2201      	movs	r2, #1
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	e002      	b.n	8005b06 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fbd1 	bl	80062b4 <USBD_CtlSendData>
              break;
 8005b12:	e004      	b.n	8005b1e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005b14:	6839      	ldr	r1, [r7, #0]
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fb5b 	bl	80061d2 <USBD_CtlError>
              break;
 8005b1c:	bf00      	nop
          }
          break;
 8005b1e:	e004      	b.n	8005b2a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fb55 	bl	80061d2 <USBD_CtlError>
          break;
 8005b28:	bf00      	nop
      }
      break;
 8005b2a:	e005      	b.n	8005b38 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005b2c:	6839      	ldr	r1, [r7, #0]
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fb4f 	bl	80061d2 <USBD_CtlError>
      break;
 8005b34:	e000      	b.n	8005b38 <USBD_StdEPReq+0x330>
      break;
 8005b36:	bf00      	nop
  }

  return ret;
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	885b      	ldrh	r3, [r3, #2]
 8005b5e:	0a1b      	lsrs	r3, r3, #8
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	3b01      	subs	r3, #1
 8005b64:	2b06      	cmp	r3, #6
 8005b66:	f200 8128 	bhi.w	8005dba <USBD_GetDescriptor+0x276>
 8005b6a:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <USBD_GetDescriptor+0x2c>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005b8d 	.word	0x08005b8d
 8005b74:	08005ba5 	.word	0x08005ba5
 8005b78:	08005be5 	.word	0x08005be5
 8005b7c:	08005dbb 	.word	0x08005dbb
 8005b80:	08005dbb 	.word	0x08005dbb
 8005b84:	08005d5b 	.word	0x08005d5b
 8005b88:	08005d87 	.word	0x08005d87
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	7c12      	ldrb	r2, [r2, #16]
 8005b98:	f107 0108 	add.w	r1, r7, #8
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4798      	blx	r3
 8005ba0:	60f8      	str	r0, [r7, #12]
      break;
 8005ba2:	e112      	b.n	8005dca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	7c1b      	ldrb	r3, [r3, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10d      	bne.n	8005bc8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	f107 0208 	add.w	r2, r7, #8
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4798      	blx	r3
 8005bbc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005bc6:	e100      	b.n	8005dca <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd0:	f107 0208 	add.w	r2, r7, #8
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	4798      	blx	r3
 8005bd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	2202      	movs	r2, #2
 8005be0:	701a      	strb	r2, [r3, #0]
      break;
 8005be2:	e0f2      	b.n	8005dca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	885b      	ldrh	r3, [r3, #2]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b05      	cmp	r3, #5
 8005bec:	f200 80ac 	bhi.w	8005d48 <USBD_GetDescriptor+0x204>
 8005bf0:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <USBD_GetDescriptor+0xb4>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c11 	.word	0x08005c11
 8005bfc:	08005c45 	.word	0x08005c45
 8005c00:	08005c79 	.word	0x08005c79
 8005c04:	08005cad 	.word	0x08005cad
 8005c08:	08005ce1 	.word	0x08005ce1
 8005c0c:	08005d15 	.word	0x08005d15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00b      	beq.n	8005c34 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	7c12      	ldrb	r2, [r2, #16]
 8005c28:	f107 0108 	add.w	r1, r7, #8
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	4798      	blx	r3
 8005c30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c32:	e091      	b.n	8005d58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c34:	6839      	ldr	r1, [r7, #0]
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 facb 	bl	80061d2 <USBD_CtlError>
            err++;
 8005c3c:	7afb      	ldrb	r3, [r7, #11]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	72fb      	strb	r3, [r7, #11]
          break;
 8005c42:	e089      	b.n	8005d58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00b      	beq.n	8005c68 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	7c12      	ldrb	r2, [r2, #16]
 8005c5c:	f107 0108 	add.w	r1, r7, #8
 8005c60:	4610      	mov	r0, r2
 8005c62:	4798      	blx	r3
 8005c64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c66:	e077      	b.n	8005d58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fab1 	bl	80061d2 <USBD_CtlError>
            err++;
 8005c70:	7afb      	ldrb	r3, [r7, #11]
 8005c72:	3301      	adds	r3, #1
 8005c74:	72fb      	strb	r3, [r7, #11]
          break;
 8005c76:	e06f      	b.n	8005d58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00b      	beq.n	8005c9c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	7c12      	ldrb	r2, [r2, #16]
 8005c90:	f107 0108 	add.w	r1, r7, #8
 8005c94:	4610      	mov	r0, r2
 8005c96:	4798      	blx	r3
 8005c98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c9a:	e05d      	b.n	8005d58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c9c:	6839      	ldr	r1, [r7, #0]
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fa97 	bl	80061d2 <USBD_CtlError>
            err++;
 8005ca4:	7afb      	ldrb	r3, [r7, #11]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	72fb      	strb	r3, [r7, #11]
          break;
 8005caa:	e055      	b.n	8005d58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00b      	beq.n	8005cd0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	7c12      	ldrb	r2, [r2, #16]
 8005cc4:	f107 0108 	add.w	r1, r7, #8
 8005cc8:	4610      	mov	r0, r2
 8005cca:	4798      	blx	r3
 8005ccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cce:	e043      	b.n	8005d58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fa7d 	bl	80061d2 <USBD_CtlError>
            err++;
 8005cd8:	7afb      	ldrb	r3, [r7, #11]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	72fb      	strb	r3, [r7, #11]
          break;
 8005cde:	e03b      	b.n	8005d58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00b      	beq.n	8005d04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	7c12      	ldrb	r2, [r2, #16]
 8005cf8:	f107 0108 	add.w	r1, r7, #8
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4798      	blx	r3
 8005d00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d02:	e029      	b.n	8005d58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d04:	6839      	ldr	r1, [r7, #0]
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fa63 	bl	80061d2 <USBD_CtlError>
            err++;
 8005d0c:	7afb      	ldrb	r3, [r7, #11]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	72fb      	strb	r3, [r7, #11]
          break;
 8005d12:	e021      	b.n	8005d58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00b      	beq.n	8005d38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	7c12      	ldrb	r2, [r2, #16]
 8005d2c:	f107 0108 	add.w	r1, r7, #8
 8005d30:	4610      	mov	r0, r2
 8005d32:	4798      	blx	r3
 8005d34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d36:	e00f      	b.n	8005d58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d38:	6839      	ldr	r1, [r7, #0]
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fa49 	bl	80061d2 <USBD_CtlError>
            err++;
 8005d40:	7afb      	ldrb	r3, [r7, #11]
 8005d42:	3301      	adds	r3, #1
 8005d44:	72fb      	strb	r3, [r7, #11]
          break;
 8005d46:	e007      	b.n	8005d58 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fa41 	bl	80061d2 <USBD_CtlError>
          err++;
 8005d50:	7afb      	ldrb	r3, [r7, #11]
 8005d52:	3301      	adds	r3, #1
 8005d54:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005d56:	bf00      	nop
      }
      break;
 8005d58:	e037      	b.n	8005dca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	7c1b      	ldrb	r3, [r3, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d109      	bne.n	8005d76 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6a:	f107 0208 	add.w	r2, r7, #8
 8005d6e:	4610      	mov	r0, r2
 8005d70:	4798      	blx	r3
 8005d72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d74:	e029      	b.n	8005dca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fa2a 	bl	80061d2 <USBD_CtlError>
        err++;
 8005d7e:	7afb      	ldrb	r3, [r7, #11]
 8005d80:	3301      	adds	r3, #1
 8005d82:	72fb      	strb	r3, [r7, #11]
      break;
 8005d84:	e021      	b.n	8005dca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	7c1b      	ldrb	r3, [r3, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10d      	bne.n	8005daa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d96:	f107 0208 	add.w	r2, r7, #8
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	4798      	blx	r3
 8005d9e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3301      	adds	r3, #1
 8005da4:	2207      	movs	r2, #7
 8005da6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005da8:	e00f      	b.n	8005dca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005daa:	6839      	ldr	r1, [r7, #0]
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fa10 	bl	80061d2 <USBD_CtlError>
        err++;
 8005db2:	7afb      	ldrb	r3, [r7, #11]
 8005db4:	3301      	adds	r3, #1
 8005db6:	72fb      	strb	r3, [r7, #11]
      break;
 8005db8:	e007      	b.n	8005dca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fa08 	bl	80061d2 <USBD_CtlError>
      err++;
 8005dc2:	7afb      	ldrb	r3, [r7, #11]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	72fb      	strb	r3, [r7, #11]
      break;
 8005dc8:	bf00      	nop
  }

  if (err != 0U)
 8005dca:	7afb      	ldrb	r3, [r7, #11]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d11e      	bne.n	8005e0e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	88db      	ldrh	r3, [r3, #6]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d016      	beq.n	8005e06 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005dd8:	893b      	ldrh	r3, [r7, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00e      	beq.n	8005dfc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	88da      	ldrh	r2, [r3, #6]
 8005de2:	893b      	ldrh	r3, [r7, #8]
 8005de4:	4293      	cmp	r3, r2
 8005de6:	bf28      	it	cs
 8005de8:	4613      	movcs	r3, r2
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005dee:	893b      	ldrh	r3, [r7, #8]
 8005df0:	461a      	mov	r2, r3
 8005df2:	68f9      	ldr	r1, [r7, #12]
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fa5d 	bl	80062b4 <USBD_CtlSendData>
 8005dfa:	e009      	b.n	8005e10 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005dfc:	6839      	ldr	r1, [r7, #0]
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f9e7 	bl	80061d2 <USBD_CtlError>
 8005e04:	e004      	b.n	8005e10 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 faae 	bl	8006368 <USBD_CtlSendStatus>
 8005e0c:	e000      	b.n	8005e10 <USBD_GetDescriptor+0x2cc>
    return;
 8005e0e:	bf00      	nop
  }
}
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop

08005e18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	889b      	ldrh	r3, [r3, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d131      	bne.n	8005e8e <USBD_SetAddress+0x76>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	88db      	ldrh	r3, [r3, #6]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d12d      	bne.n	8005e8e <USBD_SetAddress+0x76>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	885b      	ldrh	r3, [r3, #2]
 8005e36:	2b7f      	cmp	r3, #127	; 0x7f
 8005e38:	d829      	bhi.n	8005e8e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	885b      	ldrh	r3, [r3, #2]
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b03      	cmp	r3, #3
 8005e50:	d104      	bne.n	8005e5c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005e52:	6839      	ldr	r1, [r7, #0]
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f9bc 	bl	80061d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e5a:	e01d      	b.n	8005e98 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	7bfa      	ldrb	r2, [r7, #15]
 8005e60:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
 8005e66:	4619      	mov	r1, r3
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f003 fc09 	bl	8009680 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fa7a 	bl	8006368 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d004      	beq.n	8005e84 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e82:	e009      	b.n	8005e98 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e8c:	e004      	b.n	8005e98 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005e8e:	6839      	ldr	r1, [r7, #0]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f99e 	bl	80061d2 <USBD_CtlError>
  }
}
 8005e96:	bf00      	nop
 8005e98:	bf00      	nop
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	885b      	ldrh	r3, [r3, #2]
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	4b4e      	ldr	r3, [pc, #312]	; (8005ff0 <USBD_SetConfig+0x150>)
 8005eb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005eb8:	4b4d      	ldr	r3, [pc, #308]	; (8005ff0 <USBD_SetConfig+0x150>)
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d905      	bls.n	8005ecc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f985 	bl	80061d2 <USBD_CtlError>
    return USBD_FAIL;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e08c      	b.n	8005fe6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d002      	beq.n	8005ede <USBD_SetConfig+0x3e>
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d029      	beq.n	8005f30 <USBD_SetConfig+0x90>
 8005edc:	e075      	b.n	8005fca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005ede:	4b44      	ldr	r3, [pc, #272]	; (8005ff0 <USBD_SetConfig+0x150>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d020      	beq.n	8005f28 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005ee6:	4b42      	ldr	r3, [pc, #264]	; (8005ff0 <USBD_SetConfig+0x150>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005ef0:	4b3f      	ldr	r3, [pc, #252]	; (8005ff0 <USBD_SetConfig+0x150>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fe ffe7 	bl	8004eca <USBD_SetClassConfig>
 8005efc:	4603      	mov	r3, r0
 8005efe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d008      	beq.n	8005f18 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005f06:	6839      	ldr	r1, [r7, #0]
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f962 	bl	80061d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2202      	movs	r2, #2
 8005f12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005f16:	e065      	b.n	8005fe4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fa25 	bl	8006368 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2203      	movs	r2, #3
 8005f22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005f26:	e05d      	b.n	8005fe4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fa1d 	bl	8006368 <USBD_CtlSendStatus>
      break;
 8005f2e:	e059      	b.n	8005fe4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005f30:	4b2f      	ldr	r3, [pc, #188]	; (8005ff0 <USBD_SetConfig+0x150>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d112      	bne.n	8005f5e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005f40:	4b2b      	ldr	r3, [pc, #172]	; (8005ff0 <USBD_SetConfig+0x150>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f4a:	4b29      	ldr	r3, [pc, #164]	; (8005ff0 <USBD_SetConfig+0x150>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7fe ffd6 	bl	8004f02 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fa06 	bl	8006368 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005f5c:	e042      	b.n	8005fe4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005f5e:	4b24      	ldr	r3, [pc, #144]	; (8005ff0 <USBD_SetConfig+0x150>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	461a      	mov	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d02a      	beq.n	8005fc2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7fe ffc4 	bl	8004f02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005f7a:	4b1d      	ldr	r3, [pc, #116]	; (8005ff0 <USBD_SetConfig+0x150>)
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f84:	4b1a      	ldr	r3, [pc, #104]	; (8005ff0 <USBD_SetConfig+0x150>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fe ff9d 	bl	8004eca <USBD_SetClassConfig>
 8005f90:	4603      	mov	r3, r0
 8005f92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00f      	beq.n	8005fba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f918 	bl	80061d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fe ffa9 	bl	8004f02 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005fb8:	e014      	b.n	8005fe4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f9d4 	bl	8006368 <USBD_CtlSendStatus>
      break;
 8005fc0:	e010      	b.n	8005fe4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f9d0 	bl	8006368 <USBD_CtlSendStatus>
      break;
 8005fc8:	e00c      	b.n	8005fe4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005fca:	6839      	ldr	r1, [r7, #0]
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f900 	bl	80061d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005fd2:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <USBD_SetConfig+0x150>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7fe ff92 	bl	8004f02 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe2:	bf00      	nop
  }

  return ret;
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	200001bc 	.word	0x200001bc

08005ff4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	88db      	ldrh	r3, [r3, #6]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d004      	beq.n	8006010 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006006:	6839      	ldr	r1, [r7, #0]
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f8e2 	bl	80061d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800600e:	e023      	b.n	8006058 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	dc02      	bgt.n	8006022 <USBD_GetConfig+0x2e>
 800601c:	2b00      	cmp	r3, #0
 800601e:	dc03      	bgt.n	8006028 <USBD_GetConfig+0x34>
 8006020:	e015      	b.n	800604e <USBD_GetConfig+0x5a>
 8006022:	2b03      	cmp	r3, #3
 8006024:	d00b      	beq.n	800603e <USBD_GetConfig+0x4a>
 8006026:	e012      	b.n	800604e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3308      	adds	r3, #8
 8006032:	2201      	movs	r2, #1
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f93c 	bl	80062b4 <USBD_CtlSendData>
        break;
 800603c:	e00c      	b.n	8006058 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	3304      	adds	r3, #4
 8006042:	2201      	movs	r2, #1
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f934 	bl	80062b4 <USBD_CtlSendData>
        break;
 800604c:	e004      	b.n	8006058 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f8be 	bl	80061d2 <USBD_CtlError>
        break;
 8006056:	bf00      	nop
}
 8006058:	bf00      	nop
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006070:	b2db      	uxtb	r3, r3
 8006072:	3b01      	subs	r3, #1
 8006074:	2b02      	cmp	r3, #2
 8006076:	d81e      	bhi.n	80060b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	88db      	ldrh	r3, [r3, #6]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d004      	beq.n	800608a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006080:	6839      	ldr	r1, [r7, #0]
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f8a5 	bl	80061d2 <USBD_CtlError>
        break;
 8006088:	e01a      	b.n	80060c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006096:	2b00      	cmp	r3, #0
 8006098:	d005      	beq.n	80060a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	f043 0202 	orr.w	r2, r3, #2
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	330c      	adds	r3, #12
 80060aa:	2202      	movs	r2, #2
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f900 	bl	80062b4 <USBD_CtlSendData>
      break;
 80060b4:	e004      	b.n	80060c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80060b6:	6839      	ldr	r1, [r7, #0]
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f88a 	bl	80061d2 <USBD_CtlError>
      break;
 80060be:	bf00      	nop
  }
}
 80060c0:	bf00      	nop
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	885b      	ldrh	r3, [r3, #2]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d107      	bne.n	80060ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f940 	bl	8006368 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80060e8:	e013      	b.n	8006112 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	885b      	ldrh	r3, [r3, #2]
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d10b      	bne.n	800610a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	889b      	ldrh	r3, [r3, #4]
 80060f6:	0a1b      	lsrs	r3, r3, #8
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f930 	bl	8006368 <USBD_CtlSendStatus>
}
 8006108:	e003      	b.n	8006112 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f860 	bl	80061d2 <USBD_CtlError>
}
 8006112:	bf00      	nop
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800612a:	b2db      	uxtb	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	2b02      	cmp	r3, #2
 8006130:	d80b      	bhi.n	800614a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	885b      	ldrh	r3, [r3, #2]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d10c      	bne.n	8006154 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f910 	bl	8006368 <USBD_CtlSendStatus>
      }
      break;
 8006148:	e004      	b.n	8006154 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f840 	bl	80061d2 <USBD_CtlError>
      break;
 8006152:	e000      	b.n	8006156 <USBD_ClrFeature+0x3c>
      break;
 8006154:	bf00      	nop
  }
}
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	781a      	ldrb	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3301      	adds	r3, #1
 8006178:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	781a      	ldrb	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	3301      	adds	r3, #1
 8006186:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f7ff fa41 	bl	8005610 <SWAPBYTE>
 800618e:	4603      	mov	r3, r0
 8006190:	461a      	mov	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3301      	adds	r3, #1
 800619a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	3301      	adds	r3, #1
 80061a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f7ff fa34 	bl	8005610 <SWAPBYTE>
 80061a8:	4603      	mov	r3, r0
 80061aa:	461a      	mov	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3301      	adds	r3, #1
 80061b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3301      	adds	r3, #1
 80061ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f7ff fa27 	bl	8005610 <SWAPBYTE>
 80061c2:	4603      	mov	r3, r0
 80061c4:	461a      	mov	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	80da      	strh	r2, [r3, #6]
}
 80061ca:	bf00      	nop
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80061dc:	2180      	movs	r1, #128	; 0x80
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f003 f9e4 	bl	80095ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80061e4:	2100      	movs	r1, #0
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f003 f9e0 	bl	80095ac <USBD_LL_StallEP>
}
 80061ec:	bf00      	nop
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d036      	beq.n	8006278 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800620e:	6938      	ldr	r0, [r7, #16]
 8006210:	f000 f836 	bl	8006280 <USBD_GetLen>
 8006214:	4603      	mov	r3, r0
 8006216:	3301      	adds	r3, #1
 8006218:	b29b      	uxth	r3, r3
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006222:	7dfb      	ldrb	r3, [r7, #23]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	4413      	add	r3, r2
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	7812      	ldrb	r2, [r2, #0]
 800622c:	701a      	strb	r2, [r3, #0]
  idx++;
 800622e:	7dfb      	ldrb	r3, [r7, #23]
 8006230:	3301      	adds	r3, #1
 8006232:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006234:	7dfb      	ldrb	r3, [r7, #23]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	4413      	add	r3, r2
 800623a:	2203      	movs	r2, #3
 800623c:	701a      	strb	r2, [r3, #0]
  idx++;
 800623e:	7dfb      	ldrb	r3, [r7, #23]
 8006240:	3301      	adds	r3, #1
 8006242:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006244:	e013      	b.n	800626e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006246:	7dfb      	ldrb	r3, [r7, #23]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	4413      	add	r3, r2
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	7812      	ldrb	r2, [r2, #0]
 8006250:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	3301      	adds	r3, #1
 8006256:	613b      	str	r3, [r7, #16]
    idx++;
 8006258:	7dfb      	ldrb	r3, [r7, #23]
 800625a:	3301      	adds	r3, #1
 800625c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800625e:	7dfb      	ldrb	r3, [r7, #23]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	4413      	add	r3, r2
 8006264:	2200      	movs	r2, #0
 8006266:	701a      	strb	r2, [r3, #0]
    idx++;
 8006268:	7dfb      	ldrb	r3, [r7, #23]
 800626a:	3301      	adds	r3, #1
 800626c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e7      	bne.n	8006246 <USBD_GetString+0x52>
 8006276:	e000      	b.n	800627a <USBD_GetString+0x86>
    return;
 8006278:	bf00      	nop
  }
}
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006290:	e005      	b.n	800629e <USBD_GetLen+0x1e>
  {
    len++;
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	3301      	adds	r3, #1
 8006296:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	3301      	adds	r3, #1
 800629c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1f5      	bne.n	8006292 <USBD_GetLen+0x12>
  }

  return len;
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	2100      	movs	r1, #0
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f003 f9ef 	bl	80096be <USBD_LL_Transmit>

  return USBD_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b084      	sub	sp, #16
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	60b9      	str	r1, [r7, #8]
 80062f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	2100      	movs	r1, #0
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f003 f9de 	bl	80096be <USBD_LL_Transmit>

  return USBD_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2203      	movs	r2, #3
 800631c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	2100      	movs	r1, #0
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f003 f9e2 	bl	8009700 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b084      	sub	sp, #16
 800634a:	af00      	add	r7, sp, #0
 800634c:	60f8      	str	r0, [r7, #12]
 800634e:	60b9      	str	r1, [r7, #8]
 8006350:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	2100      	movs	r1, #0
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f003 f9d1 	bl	8009700 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2204      	movs	r2, #4
 8006374:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006378:	2300      	movs	r3, #0
 800637a:	2200      	movs	r2, #0
 800637c:	2100      	movs	r1, #0
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f003 f99d 	bl	80096be <USBD_LL_Transmit>

  return USBD_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b082      	sub	sp, #8
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2205      	movs	r2, #5
 800639a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800639e:	2300      	movs	r3, #0
 80063a0:	2200      	movs	r2, #0
 80063a2:	2100      	movs	r1, #0
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f003 f9ab 	bl	8009700 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <__NVIC_SetPriority>:
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	4603      	mov	r3, r0
 80063bc:	6039      	str	r1, [r7, #0]
 80063be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	db0a      	blt.n	80063de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	490c      	ldr	r1, [pc, #48]	; (8006400 <__NVIC_SetPriority+0x4c>)
 80063ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063d2:	0112      	lsls	r2, r2, #4
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	440b      	add	r3, r1
 80063d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80063dc:	e00a      	b.n	80063f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	4908      	ldr	r1, [pc, #32]	; (8006404 <__NVIC_SetPriority+0x50>)
 80063e4:	79fb      	ldrb	r3, [r7, #7]
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	3b04      	subs	r3, #4
 80063ec:	0112      	lsls	r2, r2, #4
 80063ee:	b2d2      	uxtb	r2, r2
 80063f0:	440b      	add	r3, r1
 80063f2:	761a      	strb	r2, [r3, #24]
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	e000e100 	.word	0xe000e100
 8006404:	e000ed00 	.word	0xe000ed00

08006408 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800640c:	2100      	movs	r1, #0
 800640e:	f06f 0004 	mvn.w	r0, #4
 8006412:	f7ff ffcf 	bl	80063b4 <__NVIC_SetPriority>
#endif
}
 8006416:	bf00      	nop
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006422:	f3ef 8305 	mrs	r3, IPSR
 8006426:	603b      	str	r3, [r7, #0]
  return(result);
 8006428:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800642e:	f06f 0305 	mvn.w	r3, #5
 8006432:	607b      	str	r3, [r7, #4]
 8006434:	e00c      	b.n	8006450 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006436:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <osKernelInitialize+0x44>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d105      	bne.n	800644a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800643e:	4b08      	ldr	r3, [pc, #32]	; (8006460 <osKernelInitialize+0x44>)
 8006440:	2201      	movs	r2, #1
 8006442:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006444:	2300      	movs	r3, #0
 8006446:	607b      	str	r3, [r7, #4]
 8006448:	e002      	b.n	8006450 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800644a:	f04f 33ff 	mov.w	r3, #4294967295
 800644e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006450:	687b      	ldr	r3, [r7, #4]
}
 8006452:	4618      	mov	r0, r3
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	200001c0 	.word	0x200001c0

08006464 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800646a:	f3ef 8305 	mrs	r3, IPSR
 800646e:	603b      	str	r3, [r7, #0]
  return(result);
 8006470:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006476:	f06f 0305 	mvn.w	r3, #5
 800647a:	607b      	str	r3, [r7, #4]
 800647c:	e010      	b.n	80064a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800647e:	4b0b      	ldr	r3, [pc, #44]	; (80064ac <osKernelStart+0x48>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d109      	bne.n	800649a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006486:	f7ff ffbf 	bl	8006408 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800648a:	4b08      	ldr	r3, [pc, #32]	; (80064ac <osKernelStart+0x48>)
 800648c:	2202      	movs	r2, #2
 800648e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006490:	f001 f866 	bl	8007560 <vTaskStartScheduler>
      stat = osOK;
 8006494:	2300      	movs	r3, #0
 8006496:	607b      	str	r3, [r7, #4]
 8006498:	e002      	b.n	80064a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800649a:	f04f 33ff 	mov.w	r3, #4294967295
 800649e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80064a0:	687b      	ldr	r3, [r7, #4]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	200001c0 	.word	0x200001c0

080064b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08e      	sub	sp, #56	; 0x38
 80064b4:	af04      	add	r7, sp, #16
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80064bc:	2300      	movs	r3, #0
 80064be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064c0:	f3ef 8305 	mrs	r3, IPSR
 80064c4:	617b      	str	r3, [r7, #20]
  return(result);
 80064c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d17e      	bne.n	80065ca <osThreadNew+0x11a>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d07b      	beq.n	80065ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80064d2:	2380      	movs	r3, #128	; 0x80
 80064d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80064d6:	2318      	movs	r3, #24
 80064d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80064de:	f04f 33ff 	mov.w	r3, #4294967295
 80064e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d045      	beq.n	8006576 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <osThreadNew+0x48>
        name = attr->name;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d008      	beq.n	800651e <osThreadNew+0x6e>
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	2b38      	cmp	r3, #56	; 0x38
 8006510:	d805      	bhi.n	800651e <osThreadNew+0x6e>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <osThreadNew+0x72>
        return (NULL);
 800651e:	2300      	movs	r3, #0
 8006520:	e054      	b.n	80065cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	089b      	lsrs	r3, r3, #2
 8006530:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00e      	beq.n	8006558 <osThreadNew+0xa8>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	2b5b      	cmp	r3, #91	; 0x5b
 8006540:	d90a      	bls.n	8006558 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006546:	2b00      	cmp	r3, #0
 8006548:	d006      	beq.n	8006558 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <osThreadNew+0xa8>
        mem = 1;
 8006552:	2301      	movs	r3, #1
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	e010      	b.n	800657a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10c      	bne.n	800657a <osThreadNew+0xca>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d108      	bne.n	800657a <osThreadNew+0xca>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d104      	bne.n	800657a <osThreadNew+0xca>
          mem = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	61bb      	str	r3, [r7, #24]
 8006574:	e001      	b.n	800657a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006576:	2300      	movs	r3, #0
 8006578:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d110      	bne.n	80065a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006588:	9202      	str	r2, [sp, #8]
 800658a:	9301      	str	r3, [sp, #4]
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	6a3a      	ldr	r2, [r7, #32]
 8006594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fe0c 	bl	80071b4 <xTaskCreateStatic>
 800659c:	4603      	mov	r3, r0
 800659e:	613b      	str	r3, [r7, #16]
 80065a0:	e013      	b.n	80065ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d110      	bne.n	80065ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	f107 0310 	add.w	r3, r7, #16
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 fe57 	bl	800726e <xTaskCreate>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d001      	beq.n	80065ca <osThreadNew+0x11a>
            hTask = NULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80065ca:	693b      	ldr	r3, [r7, #16]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3728      	adds	r7, #40	; 0x28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065dc:	f3ef 8305 	mrs	r3, IPSR
 80065e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80065e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <osDelay+0x1c>
    stat = osErrorISR;
 80065e8:	f06f 0305 	mvn.w	r3, #5
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	e007      	b.n	8006600 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <osDelay+0x2c>
      vTaskDelay(ticks);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 ff7c 	bl	80074f8 <vTaskDelay>
    }
  }

  return (stat);
 8006600:	68fb      	ldr	r3, [r7, #12]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4a07      	ldr	r2, [pc, #28]	; (8006638 <vApplicationGetIdleTaskMemory+0x2c>)
 800661c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	4a06      	ldr	r2, [pc, #24]	; (800663c <vApplicationGetIdleTaskMemory+0x30>)
 8006622:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2280      	movs	r2, #128	; 0x80
 8006628:	601a      	str	r2, [r3, #0]
}
 800662a:	bf00      	nop
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	200001c4 	.word	0x200001c4
 800663c:	20000220 	.word	0x20000220

08006640 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4a07      	ldr	r2, [pc, #28]	; (800666c <vApplicationGetTimerTaskMemory+0x2c>)
 8006650:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	4a06      	ldr	r2, [pc, #24]	; (8006670 <vApplicationGetTimerTaskMemory+0x30>)
 8006656:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800665e:	601a      	str	r2, [r3, #0]
}
 8006660:	bf00      	nop
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	20000420 	.word	0x20000420
 8006670:	2000047c 	.word	0x2000047c

08006674 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f103 0208 	add.w	r2, r3, #8
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f04f 32ff 	mov.w	r2, #4294967295
 800668c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f103 0208 	add.w	r2, r3, #8
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f103 0208 	add.w	r2, r3, #8
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066ce:	b480      	push	{r7}
 80066d0:	b085      	sub	sp, #20
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	601a      	str	r2, [r3, #0]
}
 800670a:	bf00      	nop
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006716:	b480      	push	{r7}
 8006718:	b085      	sub	sp, #20
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672c:	d103      	bne.n	8006736 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	e00c      	b.n	8006750 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3308      	adds	r3, #8
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	e002      	b.n	8006744 <vListInsert+0x2e>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	429a      	cmp	r2, r3
 800674e:	d2f6      	bcs.n	800673e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	601a      	str	r2, [r3, #0]
}
 800677c:	bf00      	nop
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6892      	ldr	r2, [r2, #8]
 800679e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	6852      	ldr	r2, [r2, #4]
 80067a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d103      	bne.n	80067bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	1e5a      	subs	r2, r3, #1
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10a      	bne.n	8006806 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006802:	bf00      	nop
 8006804:	e7fe      	b.n	8006804 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006806:	f002 f84d 	bl	80088a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006812:	68f9      	ldr	r1, [r7, #12]
 8006814:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006816:	fb01 f303 	mul.w	r3, r1, r3
 800681a:	441a      	add	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006836:	3b01      	subs	r3, #1
 8006838:	68f9      	ldr	r1, [r7, #12]
 800683a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800683c:	fb01 f303 	mul.w	r3, r1, r3
 8006840:	441a      	add	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	22ff      	movs	r2, #255	; 0xff
 800684a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	22ff      	movs	r2, #255	; 0xff
 8006852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d114      	bne.n	8006886 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d01a      	beq.n	800689a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3310      	adds	r3, #16
 8006868:	4618      	mov	r0, r3
 800686a:	f001 f903 	bl	8007a74 <xTaskRemoveFromEventList>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d012      	beq.n	800689a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006874:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <xQueueGenericReset+0xcc>)
 8006876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	e009      	b.n	800689a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3310      	adds	r3, #16
 800688a:	4618      	mov	r0, r3
 800688c:	f7ff fef2 	bl	8006674 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	3324      	adds	r3, #36	; 0x24
 8006894:	4618      	mov	r0, r3
 8006896:	f7ff feed 	bl	8006674 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800689a:	f002 f833 	bl	8008904 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800689e:	2301      	movs	r3, #1
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	e000ed04 	.word	0xe000ed04

080068ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b08e      	sub	sp, #56	; 0x38
 80068b0:	af02      	add	r7, sp, #8
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10a      	bne.n	80068d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068d2:	bf00      	nop
 80068d4:	e7fe      	b.n	80068d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10a      	bne.n	80068f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068ee:	bf00      	nop
 80068f0:	e7fe      	b.n	80068f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <xQueueGenericCreateStatic+0x52>
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <xQueueGenericCreateStatic+0x56>
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <xQueueGenericCreateStatic+0x58>
 8006902:	2300      	movs	r3, #0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	623b      	str	r3, [r7, #32]
}
 800691a:	bf00      	nop
 800691c:	e7fe      	b.n	800691c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d102      	bne.n	800692a <xQueueGenericCreateStatic+0x7e>
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <xQueueGenericCreateStatic+0x82>
 800692a:	2301      	movs	r3, #1
 800692c:	e000      	b.n	8006930 <xQueueGenericCreateStatic+0x84>
 800692e:	2300      	movs	r3, #0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	61fb      	str	r3, [r7, #28]
}
 8006946:	bf00      	nop
 8006948:	e7fe      	b.n	8006948 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800694a:	2350      	movs	r3, #80	; 0x50
 800694c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b50      	cmp	r3, #80	; 0x50
 8006952:	d00a      	beq.n	800696a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	61bb      	str	r3, [r7, #24]
}
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800696a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00d      	beq.n	8006992 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800697e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	4613      	mov	r3, r2
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	68b9      	ldr	r1, [r7, #8]
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 f805 	bl	800699c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006994:	4618      	mov	r0, r3
 8006996:	3730      	adds	r7, #48	; 0x30
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d103      	bne.n	80069b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	e002      	b.n	80069be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069ca:	2101      	movs	r1, #1
 80069cc:	69b8      	ldr	r0, [r7, #24]
 80069ce:	f7ff ff05 	bl	80067dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	78fa      	ldrb	r2, [r7, #3]
 80069d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069da:	bf00      	nop
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08e      	sub	sp, #56	; 0x38
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069f2:	2300      	movs	r3, #0
 80069f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10a      	bne.n	8006a16 <xQueueGenericSend+0x32>
	__asm volatile
 8006a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a12:	bf00      	nop
 8006a14:	e7fe      	b.n	8006a14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d103      	bne.n	8006a24 <xQueueGenericSend+0x40>
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <xQueueGenericSend+0x44>
 8006a24:	2301      	movs	r3, #1
 8006a26:	e000      	b.n	8006a2a <xQueueGenericSend+0x46>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10a      	bne.n	8006a44 <xQueueGenericSend+0x60>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a40:	bf00      	nop
 8006a42:	e7fe      	b.n	8006a42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d103      	bne.n	8006a52 <xQueueGenericSend+0x6e>
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <xQueueGenericSend+0x72>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e000      	b.n	8006a58 <xQueueGenericSend+0x74>
 8006a56:	2300      	movs	r3, #0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <xQueueGenericSend+0x8e>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	623b      	str	r3, [r7, #32]
}
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a72:	f001 f9bd 	bl	8007df0 <xTaskGetSchedulerState>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d102      	bne.n	8006a82 <xQueueGenericSend+0x9e>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <xQueueGenericSend+0xa2>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e000      	b.n	8006a88 <xQueueGenericSend+0xa4>
 8006a86:	2300      	movs	r3, #0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10a      	bne.n	8006aa2 <xQueueGenericSend+0xbe>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	61fb      	str	r3, [r7, #28]
}
 8006a9e:	bf00      	nop
 8006aa0:	e7fe      	b.n	8006aa0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006aa2:	f001 feff 	bl	80088a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d302      	bcc.n	8006ab8 <xQueueGenericSend+0xd4>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d129      	bne.n	8006b0c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	68b9      	ldr	r1, [r7, #8]
 8006abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006abe:	f000 fa0b 	bl	8006ed8 <prvCopyDataToQueue>
 8006ac2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d010      	beq.n	8006aee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	3324      	adds	r3, #36	; 0x24
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 ffcf 	bl	8007a74 <xTaskRemoveFromEventList>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d013      	beq.n	8006b04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006adc:	4b3f      	ldr	r3, [pc, #252]	; (8006bdc <xQueueGenericSend+0x1f8>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	e00a      	b.n	8006b04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d007      	beq.n	8006b04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006af4:	4b39      	ldr	r3, [pc, #228]	; (8006bdc <xQueueGenericSend+0x1f8>)
 8006af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b04:	f001 fefe 	bl	8008904 <vPortExitCritical>
				return pdPASS;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e063      	b.n	8006bd4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d103      	bne.n	8006b1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b12:	f001 fef7 	bl	8008904 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e05c      	b.n	8006bd4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d106      	bne.n	8006b2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b20:	f107 0314 	add.w	r3, r7, #20
 8006b24:	4618      	mov	r0, r3
 8006b26:	f001 f809 	bl	8007b3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b2e:	f001 fee9 	bl	8008904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b32:	f000 fd7b 	bl	800762c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b36:	f001 feb5 	bl	80088a4 <vPortEnterCritical>
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b40:	b25b      	sxtb	r3, r3
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b46:	d103      	bne.n	8006b50 <xQueueGenericSend+0x16c>
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b56:	b25b      	sxtb	r3, r3
 8006b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5c:	d103      	bne.n	8006b66 <xQueueGenericSend+0x182>
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b66:	f001 fecd 	bl	8008904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b6a:	1d3a      	adds	r2, r7, #4
 8006b6c:	f107 0314 	add.w	r3, r7, #20
 8006b70:	4611      	mov	r1, r2
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fff8 	bl	8007b68 <xTaskCheckForTimeOut>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d124      	bne.n	8006bc8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b80:	f000 faa2 	bl	80070c8 <prvIsQueueFull>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d018      	beq.n	8006bbc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8c:	3310      	adds	r3, #16
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	4611      	mov	r1, r2
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 ff1e 	bl	80079d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b9a:	f000 fa2d 	bl	8006ff8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b9e:	f000 fd53 	bl	8007648 <xTaskResumeAll>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f47f af7c 	bne.w	8006aa2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006baa:	4b0c      	ldr	r3, [pc, #48]	; (8006bdc <xQueueGenericSend+0x1f8>)
 8006bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	e772      	b.n	8006aa2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bbe:	f000 fa1b 	bl	8006ff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bc2:	f000 fd41 	bl	8007648 <xTaskResumeAll>
 8006bc6:	e76c      	b.n	8006aa2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006bc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bca:	f000 fa15 	bl	8006ff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bce:	f000 fd3b 	bl	8007648 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006bd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3738      	adds	r7, #56	; 0x38
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	e000ed04 	.word	0xe000ed04

08006be0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b090      	sub	sp, #64	; 0x40
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c0a:	bf00      	nop
 8006c0c:	e7fe      	b.n	8006c0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d103      	bne.n	8006c1c <xQueueGenericSendFromISR+0x3c>
 8006c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <xQueueGenericSendFromISR+0x40>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e000      	b.n	8006c22 <xQueueGenericSendFromISR+0x42>
 8006c20:	2300      	movs	r3, #0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10a      	bne.n	8006c3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c38:	bf00      	nop
 8006c3a:	e7fe      	b.n	8006c3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d103      	bne.n	8006c4a <xQueueGenericSendFromISR+0x6a>
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d101      	bne.n	8006c4e <xQueueGenericSendFromISR+0x6e>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e000      	b.n	8006c50 <xQueueGenericSendFromISR+0x70>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	623b      	str	r3, [r7, #32]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c6a:	f001 fefd 	bl	8008a68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c6e:	f3ef 8211 	mrs	r2, BASEPRI
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	61fa      	str	r2, [r7, #28]
 8006c84:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c86:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c88:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d302      	bcc.n	8006c9c <xQueueGenericSendFromISR+0xbc>
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d12f      	bne.n	8006cfc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006caa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	68b9      	ldr	r1, [r7, #8]
 8006cb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006cb2:	f000 f911 	bl	8006ed8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cb6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbe:	d112      	bne.n	8006ce6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d016      	beq.n	8006cf6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cca:	3324      	adds	r3, #36	; 0x24
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fed1 	bl	8007a74 <xTaskRemoveFromEventList>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00e      	beq.n	8006cf6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00b      	beq.n	8006cf6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	e007      	b.n	8006cf6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ce6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006cea:	3301      	adds	r3, #1
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	b25a      	sxtb	r2, r3
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006cfa:	e001      	b.n	8006d00 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d02:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3740      	adds	r7, #64	; 0x40
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
	...

08006d18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08c      	sub	sp, #48	; 0x30
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d24:	2300      	movs	r3, #0
 8006d26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10a      	bne.n	8006d48 <xQueueReceive+0x30>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	623b      	str	r3, [r7, #32]
}
 8006d44:	bf00      	nop
 8006d46:	e7fe      	b.n	8006d46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d103      	bne.n	8006d56 <xQueueReceive+0x3e>
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <xQueueReceive+0x42>
 8006d56:	2301      	movs	r3, #1
 8006d58:	e000      	b.n	8006d5c <xQueueReceive+0x44>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10a      	bne.n	8006d76 <xQueueReceive+0x5e>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	61fb      	str	r3, [r7, #28]
}
 8006d72:	bf00      	nop
 8006d74:	e7fe      	b.n	8006d74 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d76:	f001 f83b 	bl	8007df0 <xTaskGetSchedulerState>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d102      	bne.n	8006d86 <xQueueReceive+0x6e>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <xQueueReceive+0x72>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <xQueueReceive+0x74>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10a      	bne.n	8006da6 <xQueueReceive+0x8e>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	61bb      	str	r3, [r7, #24]
}
 8006da2:	bf00      	nop
 8006da4:	e7fe      	b.n	8006da4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006da6:	f001 fd7d 	bl	80088a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d01f      	beq.n	8006df6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006db6:	68b9      	ldr	r1, [r7, #8]
 8006db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dba:	f000 f8f7 	bl	8006fac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	1e5a      	subs	r2, r3, #1
 8006dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00f      	beq.n	8006dee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd0:	3310      	adds	r3, #16
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fe4e 	bl	8007a74 <xTaskRemoveFromEventList>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d007      	beq.n	8006dee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dde:	4b3d      	ldr	r3, [pc, #244]	; (8006ed4 <xQueueReceive+0x1bc>)
 8006de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dee:	f001 fd89 	bl	8008904 <vPortExitCritical>
				return pdPASS;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e069      	b.n	8006eca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d103      	bne.n	8006e04 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dfc:	f001 fd82 	bl	8008904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e00:	2300      	movs	r3, #0
 8006e02:	e062      	b.n	8006eca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d106      	bne.n	8006e18 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e0a:	f107 0310 	add.w	r3, r7, #16
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fe94 	bl	8007b3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e14:	2301      	movs	r3, #1
 8006e16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e18:	f001 fd74 	bl	8008904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e1c:	f000 fc06 	bl	800762c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e20:	f001 fd40 	bl	80088a4 <vPortEnterCritical>
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e2a:	b25b      	sxtb	r3, r3
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e30:	d103      	bne.n	8006e3a <xQueueReceive+0x122>
 8006e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e40:	b25b      	sxtb	r3, r3
 8006e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e46:	d103      	bne.n	8006e50 <xQueueReceive+0x138>
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e50:	f001 fd58 	bl	8008904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e54:	1d3a      	adds	r2, r7, #4
 8006e56:	f107 0310 	add.w	r3, r7, #16
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 fe83 	bl	8007b68 <xTaskCheckForTimeOut>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d123      	bne.n	8006eb0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e6a:	f000 f917 	bl	800709c <prvIsQueueEmpty>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d017      	beq.n	8006ea4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	3324      	adds	r3, #36	; 0x24
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 fda9 	bl	80079d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e84:	f000 f8b8 	bl	8006ff8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e88:	f000 fbde 	bl	8007648 <xTaskResumeAll>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d189      	bne.n	8006da6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e92:	4b10      	ldr	r3, [pc, #64]	; (8006ed4 <xQueueReceive+0x1bc>)
 8006e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	e780      	b.n	8006da6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ea6:	f000 f8a7 	bl	8006ff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006eaa:	f000 fbcd 	bl	8007648 <xTaskResumeAll>
 8006eae:	e77a      	b.n	8006da6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eb2:	f000 f8a1 	bl	8006ff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eb6:	f000 fbc7 	bl	8007648 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ebc:	f000 f8ee 	bl	800709c <prvIsQueueEmpty>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f43f af6f 	beq.w	8006da6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ec8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3730      	adds	r7, #48	; 0x30
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	e000ed04 	.word	0xe000ed04

08006ed8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10d      	bne.n	8006f12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d14d      	bne.n	8006f9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 ff92 	bl	8007e2c <xTaskPriorityDisinherit>
 8006f08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	609a      	str	r2, [r3, #8]
 8006f10:	e043      	b.n	8006f9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d119      	bne.n	8006f4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6858      	ldr	r0, [r3, #4]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f20:	461a      	mov	r2, r3
 8006f22:	68b9      	ldr	r1, [r7, #8]
 8006f24:	f002 fc76 	bl	8009814 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f30:	441a      	add	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d32b      	bcc.n	8006f9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	605a      	str	r2, [r3, #4]
 8006f4a:	e026      	b.n	8006f9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	68d8      	ldr	r0, [r3, #12]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	461a      	mov	r2, r3
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	f002 fc5c 	bl	8009814 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	68da      	ldr	r2, [r3, #12]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f64:	425b      	negs	r3, r3
 8006f66:	441a      	add	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d207      	bcs.n	8006f88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f80:	425b      	negs	r3, r3
 8006f82:	441a      	add	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d105      	bne.n	8006f9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006fa2:	697b      	ldr	r3, [r7, #20]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d018      	beq.n	8006ff0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc6:	441a      	add	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d303      	bcc.n	8006fe0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68d9      	ldr	r1, [r3, #12]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6838      	ldr	r0, [r7, #0]
 8006fec:	f002 fc12 	bl	8009814 <memcpy>
	}
}
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007000:	f001 fc50 	bl	80088a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800700a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800700c:	e011      	b.n	8007032 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007012:	2b00      	cmp	r3, #0
 8007014:	d012      	beq.n	800703c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3324      	adds	r3, #36	; 0x24
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fd2a 	bl	8007a74 <xTaskRemoveFromEventList>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007026:	f000 fe01 	bl	8007c2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
 800702c:	3b01      	subs	r3, #1
 800702e:	b2db      	uxtb	r3, r3
 8007030:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007036:	2b00      	cmp	r3, #0
 8007038:	dce9      	bgt.n	800700e <prvUnlockQueue+0x16>
 800703a:	e000      	b.n	800703e <prvUnlockQueue+0x46>
					break;
 800703c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	22ff      	movs	r2, #255	; 0xff
 8007042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007046:	f001 fc5d 	bl	8008904 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800704a:	f001 fc2b 	bl	80088a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007054:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007056:	e011      	b.n	800707c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d012      	beq.n	8007086 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3310      	adds	r3, #16
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fd05 	bl	8007a74 <xTaskRemoveFromEventList>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007070:	f000 fddc 	bl	8007c2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	3b01      	subs	r3, #1
 8007078:	b2db      	uxtb	r3, r3
 800707a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800707c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007080:	2b00      	cmp	r3, #0
 8007082:	dce9      	bgt.n	8007058 <prvUnlockQueue+0x60>
 8007084:	e000      	b.n	8007088 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007086:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	22ff      	movs	r2, #255	; 0xff
 800708c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007090:	f001 fc38 	bl	8008904 <vPortExitCritical>
}
 8007094:	bf00      	nop
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070a4:	f001 fbfe 	bl	80088a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d102      	bne.n	80070b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070b0:	2301      	movs	r3, #1
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	e001      	b.n	80070ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070ba:	f001 fc23 	bl	8008904 <vPortExitCritical>

	return xReturn;
 80070be:	68fb      	ldr	r3, [r7, #12]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070d0:	f001 fbe8 	bl	80088a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070dc:	429a      	cmp	r2, r3
 80070de:	d102      	bne.n	80070e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070e0:	2301      	movs	r3, #1
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	e001      	b.n	80070ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070e6:	2300      	movs	r3, #0
 80070e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070ea:	f001 fc0b 	bl	8008904 <vPortExitCritical>

	return xReturn;
 80070ee:	68fb      	ldr	r3, [r7, #12]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	e014      	b.n	8007132 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007108:	4a0f      	ldr	r2, [pc, #60]	; (8007148 <vQueueAddToRegistry+0x50>)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10b      	bne.n	800712c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007114:	490c      	ldr	r1, [pc, #48]	; (8007148 <vQueueAddToRegistry+0x50>)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800711e:	4a0a      	ldr	r2, [pc, #40]	; (8007148 <vQueueAddToRegistry+0x50>)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	4413      	add	r3, r2
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800712a:	e006      	b.n	800713a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3301      	adds	r3, #1
 8007130:	60fb      	str	r3, [r7, #12]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b07      	cmp	r3, #7
 8007136:	d9e7      	bls.n	8007108 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007138:	bf00      	nop
 800713a:	bf00      	nop
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	2000087c 	.word	0x2000087c

0800714c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800715c:	f001 fba2 	bl	80088a4 <vPortEnterCritical>
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007166:	b25b      	sxtb	r3, r3
 8007168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716c:	d103      	bne.n	8007176 <vQueueWaitForMessageRestricted+0x2a>
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800717c:	b25b      	sxtb	r3, r3
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007182:	d103      	bne.n	800718c <vQueueWaitForMessageRestricted+0x40>
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800718c:	f001 fbba 	bl	8008904 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	2b00      	cmp	r3, #0
 8007196:	d106      	bne.n	80071a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	3324      	adds	r3, #36	; 0x24
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	68b9      	ldr	r1, [r7, #8]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fc3b 	bl	8007a1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071a6:	6978      	ldr	r0, [r7, #20]
 80071a8:	f7ff ff26 	bl	8006ff8 <prvUnlockQueue>
	}
 80071ac:	bf00      	nop
 80071ae:	3718      	adds	r7, #24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08e      	sub	sp, #56	; 0x38
 80071b8:	af04      	add	r7, sp, #16
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10a      	bne.n	80071de <xTaskCreateStatic+0x2a>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	623b      	str	r3, [r7, #32]
}
 80071da:	bf00      	nop
 80071dc:	e7fe      	b.n	80071dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10a      	bne.n	80071fa <xTaskCreateStatic+0x46>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	61fb      	str	r3, [r7, #28]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071fa:	235c      	movs	r3, #92	; 0x5c
 80071fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	2b5c      	cmp	r3, #92	; 0x5c
 8007202:	d00a      	beq.n	800721a <xTaskCreateStatic+0x66>
	__asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	61bb      	str	r3, [r7, #24]
}
 8007216:	bf00      	nop
 8007218:	e7fe      	b.n	8007218 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800721a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	2b00      	cmp	r3, #0
 8007220:	d01e      	beq.n	8007260 <xTaskCreateStatic+0xac>
 8007222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01b      	beq.n	8007260 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007230:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	2202      	movs	r2, #2
 8007236:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800723a:	2300      	movs	r3, #0
 800723c:	9303      	str	r3, [sp, #12]
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	9302      	str	r3, [sp, #8]
 8007242:	f107 0314 	add.w	r3, r7, #20
 8007246:	9301      	str	r3, [sp, #4]
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	68b9      	ldr	r1, [r7, #8]
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 f850 	bl	80072f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007258:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800725a:	f000 f8dd 	bl	8007418 <prvAddNewTaskToReadyList>
 800725e:	e001      	b.n	8007264 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007260:	2300      	movs	r3, #0
 8007262:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007264:	697b      	ldr	r3, [r7, #20]
	}
 8007266:	4618      	mov	r0, r3
 8007268:	3728      	adds	r7, #40	; 0x28
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800726e:	b580      	push	{r7, lr}
 8007270:	b08c      	sub	sp, #48	; 0x30
 8007272:	af04      	add	r7, sp, #16
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	603b      	str	r3, [r7, #0]
 800727a:	4613      	mov	r3, r2
 800727c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800727e:	88fb      	ldrh	r3, [r7, #6]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4618      	mov	r0, r3
 8007284:	f001 fc30 	bl	8008ae8 <pvPortMalloc>
 8007288:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00e      	beq.n	80072ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007290:	205c      	movs	r0, #92	; 0x5c
 8007292:	f001 fc29 	bl	8008ae8 <pvPortMalloc>
 8007296:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	631a      	str	r2, [r3, #48]	; 0x30
 80072a4:	e005      	b.n	80072b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072a6:	6978      	ldr	r0, [r7, #20]
 80072a8:	f001 fcea 	bl	8008c80 <vPortFree>
 80072ac:	e001      	b.n	80072b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d017      	beq.n	80072e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072c0:	88fa      	ldrh	r2, [r7, #6]
 80072c2:	2300      	movs	r3, #0
 80072c4:	9303      	str	r3, [sp, #12]
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	9302      	str	r3, [sp, #8]
 80072ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072cc:	9301      	str	r3, [sp, #4]
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f80e 	bl	80072f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072dc:	69f8      	ldr	r0, [r7, #28]
 80072de:	f000 f89b 	bl	8007418 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072e2:	2301      	movs	r3, #1
 80072e4:	61bb      	str	r3, [r7, #24]
 80072e6:	e002      	b.n	80072ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072e8:	f04f 33ff 	mov.w	r3, #4294967295
 80072ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072ee:	69bb      	ldr	r3, [r7, #24]
	}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3720      	adds	r7, #32
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b088      	sub	sp, #32
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
 8007304:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	461a      	mov	r2, r3
 8007310:	21a5      	movs	r1, #165	; 0xa5
 8007312:	f002 fa8d 	bl	8009830 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007320:	3b01      	subs	r3, #1
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	f023 0307 	bic.w	r3, r3, #7
 800732e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	f003 0307 	and.w	r3, r3, #7
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <prvInitialiseNewTask+0x58>
	__asm volatile
 800733a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	617b      	str	r3, [r7, #20]
}
 800734c:	bf00      	nop
 800734e:	e7fe      	b.n	800734e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d01f      	beq.n	8007396 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007356:	2300      	movs	r3, #0
 8007358:	61fb      	str	r3, [r7, #28]
 800735a:	e012      	b.n	8007382 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	4413      	add	r3, r2
 8007362:	7819      	ldrb	r1, [r3, #0]
 8007364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	4413      	add	r3, r2
 800736a:	3334      	adds	r3, #52	; 0x34
 800736c:	460a      	mov	r2, r1
 800736e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	4413      	add	r3, r2
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d006      	beq.n	800738a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	3301      	adds	r3, #1
 8007380:	61fb      	str	r3, [r7, #28]
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	2b0f      	cmp	r3, #15
 8007386:	d9e9      	bls.n	800735c <prvInitialiseNewTask+0x64>
 8007388:	e000      	b.n	800738c <prvInitialiseNewTask+0x94>
			{
				break;
 800738a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007394:	e003      	b.n	800739e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007398:	2200      	movs	r2, #0
 800739a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	2b37      	cmp	r3, #55	; 0x37
 80073a2:	d901      	bls.n	80073a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073a4:	2337      	movs	r3, #55	; 0x37
 80073a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b6:	2200      	movs	r2, #0
 80073b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	3304      	adds	r3, #4
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff f978 	bl	80066b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c6:	3318      	adds	r3, #24
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7ff f973 	bl	80066b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	2200      	movs	r2, #0
 80073e8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	68f9      	ldr	r1, [r7, #12]
 80073f6:	69b8      	ldr	r0, [r7, #24]
 80073f8:	f001 f928 	bl	800864c <pxPortInitialiseStack>
 80073fc:	4602      	mov	r2, r0
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007404:	2b00      	cmp	r3, #0
 8007406:	d002      	beq.n	800740e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800740c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800740e:	bf00      	nop
 8007410:	3720      	adds	r7, #32
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
	...

08007418 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007420:	f001 fa40 	bl	80088a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007424:	4b2d      	ldr	r3, [pc, #180]	; (80074dc <prvAddNewTaskToReadyList+0xc4>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3301      	adds	r3, #1
 800742a:	4a2c      	ldr	r2, [pc, #176]	; (80074dc <prvAddNewTaskToReadyList+0xc4>)
 800742c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800742e:	4b2c      	ldr	r3, [pc, #176]	; (80074e0 <prvAddNewTaskToReadyList+0xc8>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d109      	bne.n	800744a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007436:	4a2a      	ldr	r2, [pc, #168]	; (80074e0 <prvAddNewTaskToReadyList+0xc8>)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800743c:	4b27      	ldr	r3, [pc, #156]	; (80074dc <prvAddNewTaskToReadyList+0xc4>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d110      	bne.n	8007466 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007444:	f000 fc16 	bl	8007c74 <prvInitialiseTaskLists>
 8007448:	e00d      	b.n	8007466 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800744a:	4b26      	ldr	r3, [pc, #152]	; (80074e4 <prvAddNewTaskToReadyList+0xcc>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d109      	bne.n	8007466 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007452:	4b23      	ldr	r3, [pc, #140]	; (80074e0 <prvAddNewTaskToReadyList+0xc8>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	429a      	cmp	r2, r3
 800745e:	d802      	bhi.n	8007466 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007460:	4a1f      	ldr	r2, [pc, #124]	; (80074e0 <prvAddNewTaskToReadyList+0xc8>)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007466:	4b20      	ldr	r3, [pc, #128]	; (80074e8 <prvAddNewTaskToReadyList+0xd0>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3301      	adds	r3, #1
 800746c:	4a1e      	ldr	r2, [pc, #120]	; (80074e8 <prvAddNewTaskToReadyList+0xd0>)
 800746e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007470:	4b1d      	ldr	r3, [pc, #116]	; (80074e8 <prvAddNewTaskToReadyList+0xd0>)
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747c:	4b1b      	ldr	r3, [pc, #108]	; (80074ec <prvAddNewTaskToReadyList+0xd4>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d903      	bls.n	800748c <prvAddNewTaskToReadyList+0x74>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007488:	4a18      	ldr	r2, [pc, #96]	; (80074ec <prvAddNewTaskToReadyList+0xd4>)
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007490:	4613      	mov	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4a15      	ldr	r2, [pc, #84]	; (80074f0 <prvAddNewTaskToReadyList+0xd8>)
 800749a:	441a      	add	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3304      	adds	r3, #4
 80074a0:	4619      	mov	r1, r3
 80074a2:	4610      	mov	r0, r2
 80074a4:	f7ff f913 	bl	80066ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074a8:	f001 fa2c 	bl	8008904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074ac:	4b0d      	ldr	r3, [pc, #52]	; (80074e4 <prvAddNewTaskToReadyList+0xcc>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00e      	beq.n	80074d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074b4:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <prvAddNewTaskToReadyList+0xc8>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074be:	429a      	cmp	r2, r3
 80074c0:	d207      	bcs.n	80074d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074c2:	4b0c      	ldr	r3, [pc, #48]	; (80074f4 <prvAddNewTaskToReadyList+0xdc>)
 80074c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074d2:	bf00      	nop
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	20000d90 	.word	0x20000d90
 80074e0:	200008bc 	.word	0x200008bc
 80074e4:	20000d9c 	.word	0x20000d9c
 80074e8:	20000dac 	.word	0x20000dac
 80074ec:	20000d98 	.word	0x20000d98
 80074f0:	200008c0 	.word	0x200008c0
 80074f4:	e000ed04 	.word	0xe000ed04

080074f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d017      	beq.n	800753a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800750a:	4b13      	ldr	r3, [pc, #76]	; (8007558 <vTaskDelay+0x60>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00a      	beq.n	8007528 <vTaskDelay+0x30>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	60bb      	str	r3, [r7, #8]
}
 8007524:	bf00      	nop
 8007526:	e7fe      	b.n	8007526 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007528:	f000 f880 	bl	800762c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800752c:	2100      	movs	r1, #0
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fcea 	bl	8007f08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007534:	f000 f888 	bl	8007648 <xTaskResumeAll>
 8007538:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d107      	bne.n	8007550 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007540:	4b06      	ldr	r3, [pc, #24]	; (800755c <vTaskDelay+0x64>)
 8007542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007550:	bf00      	nop
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20000db8 	.word	0x20000db8
 800755c:	e000ed04 	.word	0xe000ed04

08007560 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08a      	sub	sp, #40	; 0x28
 8007564:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007566:	2300      	movs	r3, #0
 8007568:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800756a:	2300      	movs	r3, #0
 800756c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800756e:	463a      	mov	r2, r7
 8007570:	1d39      	adds	r1, r7, #4
 8007572:	f107 0308 	add.w	r3, r7, #8
 8007576:	4618      	mov	r0, r3
 8007578:	f7ff f848 	bl	800660c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	9202      	str	r2, [sp, #8]
 8007584:	9301      	str	r3, [sp, #4]
 8007586:	2300      	movs	r3, #0
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	2300      	movs	r3, #0
 800758c:	460a      	mov	r2, r1
 800758e:	4921      	ldr	r1, [pc, #132]	; (8007614 <vTaskStartScheduler+0xb4>)
 8007590:	4821      	ldr	r0, [pc, #132]	; (8007618 <vTaskStartScheduler+0xb8>)
 8007592:	f7ff fe0f 	bl	80071b4 <xTaskCreateStatic>
 8007596:	4603      	mov	r3, r0
 8007598:	4a20      	ldr	r2, [pc, #128]	; (800761c <vTaskStartScheduler+0xbc>)
 800759a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800759c:	4b1f      	ldr	r3, [pc, #124]	; (800761c <vTaskStartScheduler+0xbc>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d002      	beq.n	80075aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075a4:	2301      	movs	r3, #1
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	e001      	b.n	80075ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075aa:	2300      	movs	r3, #0
 80075ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d102      	bne.n	80075ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80075b4:	f000 fcfc 	bl	8007fb0 <xTimerCreateTimerTask>
 80075b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d116      	bne.n	80075ee <vTaskStartScheduler+0x8e>
	__asm volatile
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	613b      	str	r3, [r7, #16]
}
 80075d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80075d4:	4b12      	ldr	r3, [pc, #72]	; (8007620 <vTaskStartScheduler+0xc0>)
 80075d6:	f04f 32ff 	mov.w	r2, #4294967295
 80075da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80075dc:	4b11      	ldr	r3, [pc, #68]	; (8007624 <vTaskStartScheduler+0xc4>)
 80075de:	2201      	movs	r2, #1
 80075e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80075e2:	4b11      	ldr	r3, [pc, #68]	; (8007628 <vTaskStartScheduler+0xc8>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80075e8:	f001 f8ba 	bl	8008760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075ec:	e00e      	b.n	800760c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f4:	d10a      	bne.n	800760c <vTaskStartScheduler+0xac>
	__asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	60fb      	str	r3, [r7, #12]
}
 8007608:	bf00      	nop
 800760a:	e7fe      	b.n	800760a <vTaskStartScheduler+0xaa>
}
 800760c:	bf00      	nop
 800760e:	3718      	adds	r7, #24
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	0800986c 	.word	0x0800986c
 8007618:	08007c45 	.word	0x08007c45
 800761c:	20000db4 	.word	0x20000db4
 8007620:	20000db0 	.word	0x20000db0
 8007624:	20000d9c 	.word	0x20000d9c
 8007628:	20000d94 	.word	0x20000d94

0800762c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800762c:	b480      	push	{r7}
 800762e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007630:	4b04      	ldr	r3, [pc, #16]	; (8007644 <vTaskSuspendAll+0x18>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3301      	adds	r3, #1
 8007636:	4a03      	ldr	r2, [pc, #12]	; (8007644 <vTaskSuspendAll+0x18>)
 8007638:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800763a:	bf00      	nop
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	20000db8 	.word	0x20000db8

08007648 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800764e:	2300      	movs	r3, #0
 8007650:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007652:	2300      	movs	r3, #0
 8007654:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007656:	4b42      	ldr	r3, [pc, #264]	; (8007760 <xTaskResumeAll+0x118>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10a      	bne.n	8007674 <xTaskResumeAll+0x2c>
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	603b      	str	r3, [r7, #0]
}
 8007670:	bf00      	nop
 8007672:	e7fe      	b.n	8007672 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007674:	f001 f916 	bl	80088a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007678:	4b39      	ldr	r3, [pc, #228]	; (8007760 <xTaskResumeAll+0x118>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3b01      	subs	r3, #1
 800767e:	4a38      	ldr	r2, [pc, #224]	; (8007760 <xTaskResumeAll+0x118>)
 8007680:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007682:	4b37      	ldr	r3, [pc, #220]	; (8007760 <xTaskResumeAll+0x118>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d162      	bne.n	8007750 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800768a:	4b36      	ldr	r3, [pc, #216]	; (8007764 <xTaskResumeAll+0x11c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d05e      	beq.n	8007750 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007692:	e02f      	b.n	80076f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007694:	4b34      	ldr	r3, [pc, #208]	; (8007768 <xTaskResumeAll+0x120>)
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	3318      	adds	r3, #24
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff f871 	bl	8006788 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3304      	adds	r3, #4
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff f86c 	bl	8006788 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b4:	4b2d      	ldr	r3, [pc, #180]	; (800776c <xTaskResumeAll+0x124>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d903      	bls.n	80076c4 <xTaskResumeAll+0x7c>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	4a2a      	ldr	r2, [pc, #168]	; (800776c <xTaskResumeAll+0x124>)
 80076c2:	6013      	str	r3, [r2, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c8:	4613      	mov	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4a27      	ldr	r2, [pc, #156]	; (8007770 <xTaskResumeAll+0x128>)
 80076d2:	441a      	add	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3304      	adds	r3, #4
 80076d8:	4619      	mov	r1, r3
 80076da:	4610      	mov	r0, r2
 80076dc:	f7fe fff7 	bl	80066ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e4:	4b23      	ldr	r3, [pc, #140]	; (8007774 <xTaskResumeAll+0x12c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d302      	bcc.n	80076f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80076ee:	4b22      	ldr	r3, [pc, #136]	; (8007778 <xTaskResumeAll+0x130>)
 80076f0:	2201      	movs	r2, #1
 80076f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076f4:	4b1c      	ldr	r3, [pc, #112]	; (8007768 <xTaskResumeAll+0x120>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1cb      	bne.n	8007694 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007702:	f000 fb55 	bl	8007db0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007706:	4b1d      	ldr	r3, [pc, #116]	; (800777c <xTaskResumeAll+0x134>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d010      	beq.n	8007734 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007712:	f000 f847 	bl	80077a4 <xTaskIncrementTick>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800771c:	4b16      	ldr	r3, [pc, #88]	; (8007778 <xTaskResumeAll+0x130>)
 800771e:	2201      	movs	r2, #1
 8007720:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	3b01      	subs	r3, #1
 8007726:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1f1      	bne.n	8007712 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800772e:	4b13      	ldr	r3, [pc, #76]	; (800777c <xTaskResumeAll+0x134>)
 8007730:	2200      	movs	r2, #0
 8007732:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007734:	4b10      	ldr	r3, [pc, #64]	; (8007778 <xTaskResumeAll+0x130>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d009      	beq.n	8007750 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800773c:	2301      	movs	r3, #1
 800773e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007740:	4b0f      	ldr	r3, [pc, #60]	; (8007780 <xTaskResumeAll+0x138>)
 8007742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007750:	f001 f8d8 	bl	8008904 <vPortExitCritical>

	return xAlreadyYielded;
 8007754:	68bb      	ldr	r3, [r7, #8]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20000db8 	.word	0x20000db8
 8007764:	20000d90 	.word	0x20000d90
 8007768:	20000d50 	.word	0x20000d50
 800776c:	20000d98 	.word	0x20000d98
 8007770:	200008c0 	.word	0x200008c0
 8007774:	200008bc 	.word	0x200008bc
 8007778:	20000da4 	.word	0x20000da4
 800777c:	20000da0 	.word	0x20000da0
 8007780:	e000ed04 	.word	0xe000ed04

08007784 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800778a:	4b05      	ldr	r3, [pc, #20]	; (80077a0 <xTaskGetTickCount+0x1c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007790:	687b      	ldr	r3, [r7, #4]
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	20000d94 	.word	0x20000d94

080077a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80077aa:	2300      	movs	r3, #0
 80077ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077ae:	4b4f      	ldr	r3, [pc, #316]	; (80078ec <xTaskIncrementTick+0x148>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f040 808f 	bne.w	80078d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077b8:	4b4d      	ldr	r3, [pc, #308]	; (80078f0 <xTaskIncrementTick+0x14c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3301      	adds	r3, #1
 80077be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077c0:	4a4b      	ldr	r2, [pc, #300]	; (80078f0 <xTaskIncrementTick+0x14c>)
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d120      	bne.n	800780e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80077cc:	4b49      	ldr	r3, [pc, #292]	; (80078f4 <xTaskIncrementTick+0x150>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00a      	beq.n	80077ec <xTaskIncrementTick+0x48>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	603b      	str	r3, [r7, #0]
}
 80077e8:	bf00      	nop
 80077ea:	e7fe      	b.n	80077ea <xTaskIncrementTick+0x46>
 80077ec:	4b41      	ldr	r3, [pc, #260]	; (80078f4 <xTaskIncrementTick+0x150>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	60fb      	str	r3, [r7, #12]
 80077f2:	4b41      	ldr	r3, [pc, #260]	; (80078f8 <xTaskIncrementTick+0x154>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a3f      	ldr	r2, [pc, #252]	; (80078f4 <xTaskIncrementTick+0x150>)
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	4a3f      	ldr	r2, [pc, #252]	; (80078f8 <xTaskIncrementTick+0x154>)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6013      	str	r3, [r2, #0]
 8007800:	4b3e      	ldr	r3, [pc, #248]	; (80078fc <xTaskIncrementTick+0x158>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3301      	adds	r3, #1
 8007806:	4a3d      	ldr	r2, [pc, #244]	; (80078fc <xTaskIncrementTick+0x158>)
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	f000 fad1 	bl	8007db0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800780e:	4b3c      	ldr	r3, [pc, #240]	; (8007900 <xTaskIncrementTick+0x15c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	429a      	cmp	r2, r3
 8007816:	d349      	bcc.n	80078ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007818:	4b36      	ldr	r3, [pc, #216]	; (80078f4 <xTaskIncrementTick+0x150>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d104      	bne.n	800782c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007822:	4b37      	ldr	r3, [pc, #220]	; (8007900 <xTaskIncrementTick+0x15c>)
 8007824:	f04f 32ff 	mov.w	r2, #4294967295
 8007828:	601a      	str	r2, [r3, #0]
					break;
 800782a:	e03f      	b.n	80078ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800782c:	4b31      	ldr	r3, [pc, #196]	; (80078f4 <xTaskIncrementTick+0x150>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	429a      	cmp	r2, r3
 8007842:	d203      	bcs.n	800784c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007844:	4a2e      	ldr	r2, [pc, #184]	; (8007900 <xTaskIncrementTick+0x15c>)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800784a:	e02f      	b.n	80078ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	3304      	adds	r3, #4
 8007850:	4618      	mov	r0, r3
 8007852:	f7fe ff99 	bl	8006788 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785a:	2b00      	cmp	r3, #0
 800785c:	d004      	beq.n	8007868 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	3318      	adds	r3, #24
 8007862:	4618      	mov	r0, r3
 8007864:	f7fe ff90 	bl	8006788 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800786c:	4b25      	ldr	r3, [pc, #148]	; (8007904 <xTaskIncrementTick+0x160>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	429a      	cmp	r2, r3
 8007872:	d903      	bls.n	800787c <xTaskIncrementTick+0xd8>
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007878:	4a22      	ldr	r2, [pc, #136]	; (8007904 <xTaskIncrementTick+0x160>)
 800787a:	6013      	str	r3, [r2, #0]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007880:	4613      	mov	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4a1f      	ldr	r2, [pc, #124]	; (8007908 <xTaskIncrementTick+0x164>)
 800788a:	441a      	add	r2, r3
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	3304      	adds	r3, #4
 8007890:	4619      	mov	r1, r3
 8007892:	4610      	mov	r0, r2
 8007894:	f7fe ff1b 	bl	80066ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800789c:	4b1b      	ldr	r3, [pc, #108]	; (800790c <xTaskIncrementTick+0x168>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d3b8      	bcc.n	8007818 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80078a6:	2301      	movs	r3, #1
 80078a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078aa:	e7b5      	b.n	8007818 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078ac:	4b17      	ldr	r3, [pc, #92]	; (800790c <xTaskIncrementTick+0x168>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b2:	4915      	ldr	r1, [pc, #84]	; (8007908 <xTaskIncrementTick+0x164>)
 80078b4:	4613      	mov	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	440b      	add	r3, r1
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d901      	bls.n	80078c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80078c4:	2301      	movs	r3, #1
 80078c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80078c8:	4b11      	ldr	r3, [pc, #68]	; (8007910 <xTaskIncrementTick+0x16c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d007      	beq.n	80078e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80078d0:	2301      	movs	r3, #1
 80078d2:	617b      	str	r3, [r7, #20]
 80078d4:	e004      	b.n	80078e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80078d6:	4b0f      	ldr	r3, [pc, #60]	; (8007914 <xTaskIncrementTick+0x170>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3301      	adds	r3, #1
 80078dc:	4a0d      	ldr	r2, [pc, #52]	; (8007914 <xTaskIncrementTick+0x170>)
 80078de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80078e0:	697b      	ldr	r3, [r7, #20]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000db8 	.word	0x20000db8
 80078f0:	20000d94 	.word	0x20000d94
 80078f4:	20000d48 	.word	0x20000d48
 80078f8:	20000d4c 	.word	0x20000d4c
 80078fc:	20000da8 	.word	0x20000da8
 8007900:	20000db0 	.word	0x20000db0
 8007904:	20000d98 	.word	0x20000d98
 8007908:	200008c0 	.word	0x200008c0
 800790c:	200008bc 	.word	0x200008bc
 8007910:	20000da4 	.word	0x20000da4
 8007914:	20000da0 	.word	0x20000da0

08007918 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800791e:	4b28      	ldr	r3, [pc, #160]	; (80079c0 <vTaskSwitchContext+0xa8>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007926:	4b27      	ldr	r3, [pc, #156]	; (80079c4 <vTaskSwitchContext+0xac>)
 8007928:	2201      	movs	r2, #1
 800792a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800792c:	e041      	b.n	80079b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800792e:	4b25      	ldr	r3, [pc, #148]	; (80079c4 <vTaskSwitchContext+0xac>)
 8007930:	2200      	movs	r2, #0
 8007932:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007934:	4b24      	ldr	r3, [pc, #144]	; (80079c8 <vTaskSwitchContext+0xb0>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	60fb      	str	r3, [r7, #12]
 800793a:	e010      	b.n	800795e <vTaskSwitchContext+0x46>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <vTaskSwitchContext+0x40>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	607b      	str	r3, [r7, #4]
}
 8007954:	bf00      	nop
 8007956:	e7fe      	b.n	8007956 <vTaskSwitchContext+0x3e>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3b01      	subs	r3, #1
 800795c:	60fb      	str	r3, [r7, #12]
 800795e:	491b      	ldr	r1, [pc, #108]	; (80079cc <vTaskSwitchContext+0xb4>)
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d0e4      	beq.n	800793c <vTaskSwitchContext+0x24>
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4613      	mov	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4a13      	ldr	r2, [pc, #76]	; (80079cc <vTaskSwitchContext+0xb4>)
 800797e:	4413      	add	r3, r2
 8007980:	60bb      	str	r3, [r7, #8]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	605a      	str	r2, [r3, #4]
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	3308      	adds	r3, #8
 8007994:	429a      	cmp	r2, r3
 8007996:	d104      	bne.n	80079a2 <vTaskSwitchContext+0x8a>
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	605a      	str	r2, [r3, #4]
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	4a09      	ldr	r2, [pc, #36]	; (80079d0 <vTaskSwitchContext+0xb8>)
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	4a06      	ldr	r2, [pc, #24]	; (80079c8 <vTaskSwitchContext+0xb0>)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6013      	str	r3, [r2, #0]
}
 80079b2:	bf00      	nop
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	20000db8 	.word	0x20000db8
 80079c4:	20000da4 	.word	0x20000da4
 80079c8:	20000d98 	.word	0x20000d98
 80079cc:	200008c0 	.word	0x200008c0
 80079d0:	200008bc 	.word	0x200008bc

080079d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10a      	bne.n	80079fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80079e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	60fb      	str	r3, [r7, #12]
}
 80079f6:	bf00      	nop
 80079f8:	e7fe      	b.n	80079f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079fa:	4b07      	ldr	r3, [pc, #28]	; (8007a18 <vTaskPlaceOnEventList+0x44>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3318      	adds	r3, #24
 8007a00:	4619      	mov	r1, r3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7fe fe87 	bl	8006716 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a08:	2101      	movs	r1, #1
 8007a0a:	6838      	ldr	r0, [r7, #0]
 8007a0c:	f000 fa7c 	bl	8007f08 <prvAddCurrentTaskToDelayedList>
}
 8007a10:	bf00      	nop
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	200008bc 	.word	0x200008bc

08007a1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10a      	bne.n	8007a44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	617b      	str	r3, [r7, #20]
}
 8007a40:	bf00      	nop
 8007a42:	e7fe      	b.n	8007a42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a44:	4b0a      	ldr	r3, [pc, #40]	; (8007a70 <vTaskPlaceOnEventListRestricted+0x54>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3318      	adds	r3, #24
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f7fe fe3e 	bl	80066ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007a58:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a5e:	6879      	ldr	r1, [r7, #4]
 8007a60:	68b8      	ldr	r0, [r7, #8]
 8007a62:	f000 fa51 	bl	8007f08 <prvAddCurrentTaskToDelayedList>
	}
 8007a66:	bf00      	nop
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	200008bc 	.word	0x200008bc

08007a74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10a      	bne.n	8007aa0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	60fb      	str	r3, [r7, #12]
}
 8007a9c:	bf00      	nop
 8007a9e:	e7fe      	b.n	8007a9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	3318      	adds	r3, #24
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7fe fe6f 	bl	8006788 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aaa:	4b1e      	ldr	r3, [pc, #120]	; (8007b24 <xTaskRemoveFromEventList+0xb0>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d11d      	bne.n	8007aee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fe fe66 	bl	8006788 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac0:	4b19      	ldr	r3, [pc, #100]	; (8007b28 <xTaskRemoveFromEventList+0xb4>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d903      	bls.n	8007ad0 <xTaskRemoveFromEventList+0x5c>
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	4a16      	ldr	r2, [pc, #88]	; (8007b28 <xTaskRemoveFromEventList+0xb4>)
 8007ace:	6013      	str	r3, [r2, #0]
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4a13      	ldr	r2, [pc, #76]	; (8007b2c <xTaskRemoveFromEventList+0xb8>)
 8007ade:	441a      	add	r2, r3
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	f7fe fdf1 	bl	80066ce <vListInsertEnd>
 8007aec:	e005      	b.n	8007afa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	3318      	adds	r3, #24
 8007af2:	4619      	mov	r1, r3
 8007af4:	480e      	ldr	r0, [pc, #56]	; (8007b30 <xTaskRemoveFromEventList+0xbc>)
 8007af6:	f7fe fdea 	bl	80066ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afe:	4b0d      	ldr	r3, [pc, #52]	; (8007b34 <xTaskRemoveFromEventList+0xc0>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d905      	bls.n	8007b14 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b0c:	4b0a      	ldr	r3, [pc, #40]	; (8007b38 <xTaskRemoveFromEventList+0xc4>)
 8007b0e:	2201      	movs	r2, #1
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	e001      	b.n	8007b18 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007b14:	2300      	movs	r3, #0
 8007b16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b18:	697b      	ldr	r3, [r7, #20]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3718      	adds	r7, #24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20000db8 	.word	0x20000db8
 8007b28:	20000d98 	.word	0x20000d98
 8007b2c:	200008c0 	.word	0x200008c0
 8007b30:	20000d50 	.word	0x20000d50
 8007b34:	200008bc 	.word	0x200008bc
 8007b38:	20000da4 	.word	0x20000da4

08007b3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b44:	4b06      	ldr	r3, [pc, #24]	; (8007b60 <vTaskInternalSetTimeOutState+0x24>)
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b4c:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <vTaskInternalSetTimeOutState+0x28>)
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	605a      	str	r2, [r3, #4]
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	20000da8 	.word	0x20000da8
 8007b64:	20000d94 	.word	0x20000d94

08007b68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10a      	bne.n	8007b8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	613b      	str	r3, [r7, #16]
}
 8007b8a:	bf00      	nop
 8007b8c:	e7fe      	b.n	8007b8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	60fb      	str	r3, [r7, #12]
}
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007baa:	f000 fe7b 	bl	80088a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007bae:	4b1d      	ldr	r3, [pc, #116]	; (8007c24 <xTaskCheckForTimeOut+0xbc>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc6:	d102      	bne.n	8007bce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	61fb      	str	r3, [r7, #28]
 8007bcc:	e023      	b.n	8007c16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	4b15      	ldr	r3, [pc, #84]	; (8007c28 <xTaskCheckForTimeOut+0xc0>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d007      	beq.n	8007bea <xTaskCheckForTimeOut+0x82>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d302      	bcc.n	8007bea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007be4:	2301      	movs	r3, #1
 8007be6:	61fb      	str	r3, [r7, #28]
 8007be8:	e015      	b.n	8007c16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d20b      	bcs.n	8007c0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	1ad2      	subs	r2, r2, r3
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff ff9b 	bl	8007b3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c06:	2300      	movs	r3, #0
 8007c08:	61fb      	str	r3, [r7, #28]
 8007c0a:	e004      	b.n	8007c16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c12:	2301      	movs	r3, #1
 8007c14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c16:	f000 fe75 	bl	8008904 <vPortExitCritical>

	return xReturn;
 8007c1a:	69fb      	ldr	r3, [r7, #28]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3720      	adds	r7, #32
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	20000d94 	.word	0x20000d94
 8007c28:	20000da8 	.word	0x20000da8

08007c2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c30:	4b03      	ldr	r3, [pc, #12]	; (8007c40 <vTaskMissedYield+0x14>)
 8007c32:	2201      	movs	r2, #1
 8007c34:	601a      	str	r2, [r3, #0]
}
 8007c36:	bf00      	nop
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	20000da4 	.word	0x20000da4

08007c44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c4c:	f000 f852 	bl	8007cf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c50:	4b06      	ldr	r3, [pc, #24]	; (8007c6c <prvIdleTask+0x28>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d9f9      	bls.n	8007c4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c58:	4b05      	ldr	r3, [pc, #20]	; (8007c70 <prvIdleTask+0x2c>)
 8007c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c68:	e7f0      	b.n	8007c4c <prvIdleTask+0x8>
 8007c6a:	bf00      	nop
 8007c6c:	200008c0 	.word	0x200008c0
 8007c70:	e000ed04 	.word	0xe000ed04

08007c74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	607b      	str	r3, [r7, #4]
 8007c7e:	e00c      	b.n	8007c9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	4613      	mov	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4a12      	ldr	r2, [pc, #72]	; (8007cd4 <prvInitialiseTaskLists+0x60>)
 8007c8c:	4413      	add	r3, r2
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fe fcf0 	bl	8006674 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	3301      	adds	r3, #1
 8007c98:	607b      	str	r3, [r7, #4]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b37      	cmp	r3, #55	; 0x37
 8007c9e:	d9ef      	bls.n	8007c80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ca0:	480d      	ldr	r0, [pc, #52]	; (8007cd8 <prvInitialiseTaskLists+0x64>)
 8007ca2:	f7fe fce7 	bl	8006674 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ca6:	480d      	ldr	r0, [pc, #52]	; (8007cdc <prvInitialiseTaskLists+0x68>)
 8007ca8:	f7fe fce4 	bl	8006674 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007cac:	480c      	ldr	r0, [pc, #48]	; (8007ce0 <prvInitialiseTaskLists+0x6c>)
 8007cae:	f7fe fce1 	bl	8006674 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007cb2:	480c      	ldr	r0, [pc, #48]	; (8007ce4 <prvInitialiseTaskLists+0x70>)
 8007cb4:	f7fe fcde 	bl	8006674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007cb8:	480b      	ldr	r0, [pc, #44]	; (8007ce8 <prvInitialiseTaskLists+0x74>)
 8007cba:	f7fe fcdb 	bl	8006674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007cbe:	4b0b      	ldr	r3, [pc, #44]	; (8007cec <prvInitialiseTaskLists+0x78>)
 8007cc0:	4a05      	ldr	r2, [pc, #20]	; (8007cd8 <prvInitialiseTaskLists+0x64>)
 8007cc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007cc4:	4b0a      	ldr	r3, [pc, #40]	; (8007cf0 <prvInitialiseTaskLists+0x7c>)
 8007cc6:	4a05      	ldr	r2, [pc, #20]	; (8007cdc <prvInitialiseTaskLists+0x68>)
 8007cc8:	601a      	str	r2, [r3, #0]
}
 8007cca:	bf00      	nop
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	200008c0 	.word	0x200008c0
 8007cd8:	20000d20 	.word	0x20000d20
 8007cdc:	20000d34 	.word	0x20000d34
 8007ce0:	20000d50 	.word	0x20000d50
 8007ce4:	20000d64 	.word	0x20000d64
 8007ce8:	20000d7c 	.word	0x20000d7c
 8007cec:	20000d48 	.word	0x20000d48
 8007cf0:	20000d4c 	.word	0x20000d4c

08007cf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cfa:	e019      	b.n	8007d30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007cfc:	f000 fdd2 	bl	80088a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d00:	4b10      	ldr	r3, [pc, #64]	; (8007d44 <prvCheckTasksWaitingTermination+0x50>)
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fe fd3b 	bl	8006788 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d12:	4b0d      	ldr	r3, [pc, #52]	; (8007d48 <prvCheckTasksWaitingTermination+0x54>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	4a0b      	ldr	r2, [pc, #44]	; (8007d48 <prvCheckTasksWaitingTermination+0x54>)
 8007d1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d1c:	4b0b      	ldr	r3, [pc, #44]	; (8007d4c <prvCheckTasksWaitingTermination+0x58>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	4a0a      	ldr	r2, [pc, #40]	; (8007d4c <prvCheckTasksWaitingTermination+0x58>)
 8007d24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d26:	f000 fded 	bl	8008904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f810 	bl	8007d50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d30:	4b06      	ldr	r3, [pc, #24]	; (8007d4c <prvCheckTasksWaitingTermination+0x58>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1e1      	bne.n	8007cfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20000d64 	.word	0x20000d64
 8007d48:	20000d90 	.word	0x20000d90
 8007d4c:	20000d78 	.word	0x20000d78

08007d50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d108      	bne.n	8007d74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 ff8a 	bl	8008c80 <vPortFree>
				vPortFree( pxTCB );
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 ff87 	bl	8008c80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d72:	e018      	b.n	8007da6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d103      	bne.n	8007d86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 ff7e 	bl	8008c80 <vPortFree>
	}
 8007d84:	e00f      	b.n	8007da6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d00a      	beq.n	8007da6 <prvDeleteTCB+0x56>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	60fb      	str	r3, [r7, #12]
}
 8007da2:	bf00      	nop
 8007da4:	e7fe      	b.n	8007da4 <prvDeleteTCB+0x54>
	}
 8007da6:	bf00      	nop
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007db6:	4b0c      	ldr	r3, [pc, #48]	; (8007de8 <prvResetNextTaskUnblockTime+0x38>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d104      	bne.n	8007dca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007dc0:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <prvResetNextTaskUnblockTime+0x3c>)
 8007dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007dc8:	e008      	b.n	8007ddc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dca:	4b07      	ldr	r3, [pc, #28]	; (8007de8 <prvResetNextTaskUnblockTime+0x38>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	4a04      	ldr	r2, [pc, #16]	; (8007dec <prvResetNextTaskUnblockTime+0x3c>)
 8007dda:	6013      	str	r3, [r2, #0]
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	20000d48 	.word	0x20000d48
 8007dec:	20000db0 	.word	0x20000db0

08007df0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007df6:	4b0b      	ldr	r3, [pc, #44]	; (8007e24 <xTaskGetSchedulerState+0x34>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d102      	bne.n	8007e04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	607b      	str	r3, [r7, #4]
 8007e02:	e008      	b.n	8007e16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e04:	4b08      	ldr	r3, [pc, #32]	; (8007e28 <xTaskGetSchedulerState+0x38>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d102      	bne.n	8007e12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	607b      	str	r3, [r7, #4]
 8007e10:	e001      	b.n	8007e16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e12:	2300      	movs	r3, #0
 8007e14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e16:	687b      	ldr	r3, [r7, #4]
	}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	20000d9c 	.word	0x20000d9c
 8007e28:	20000db8 	.word	0x20000db8

08007e2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d056      	beq.n	8007ef0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e42:	4b2e      	ldr	r3, [pc, #184]	; (8007efc <xTaskPriorityDisinherit+0xd0>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d00a      	beq.n	8007e62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	60fb      	str	r3, [r7, #12]
}
 8007e5e:	bf00      	nop
 8007e60:	e7fe      	b.n	8007e60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10a      	bne.n	8007e80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	60bb      	str	r3, [r7, #8]
}
 8007e7c:	bf00      	nop
 8007e7e:	e7fe      	b.n	8007e7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e84:	1e5a      	subs	r2, r3, #1
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d02c      	beq.n	8007ef0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d128      	bne.n	8007ef0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fe fc70 	bl	8006788 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec0:	4b0f      	ldr	r3, [pc, #60]	; (8007f00 <xTaskPriorityDisinherit+0xd4>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d903      	bls.n	8007ed0 <xTaskPriorityDisinherit+0xa4>
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	4a0c      	ldr	r2, [pc, #48]	; (8007f00 <xTaskPriorityDisinherit+0xd4>)
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4a09      	ldr	r2, [pc, #36]	; (8007f04 <xTaskPriorityDisinherit+0xd8>)
 8007ede:	441a      	add	r2, r3
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	f7fe fbf1 	bl	80066ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007eec:	2301      	movs	r3, #1
 8007eee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ef0:	697b      	ldr	r3, [r7, #20]
	}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	200008bc 	.word	0x200008bc
 8007f00:	20000d98 	.word	0x20000d98
 8007f04:	200008c0 	.word	0x200008c0

08007f08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f12:	4b21      	ldr	r3, [pc, #132]	; (8007f98 <prvAddCurrentTaskToDelayedList+0x90>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f18:	4b20      	ldr	r3, [pc, #128]	; (8007f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe fc32 	bl	8006788 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2a:	d10a      	bne.n	8007f42 <prvAddCurrentTaskToDelayedList+0x3a>
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d007      	beq.n	8007f42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f32:	4b1a      	ldr	r3, [pc, #104]	; (8007f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3304      	adds	r3, #4
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4819      	ldr	r0, [pc, #100]	; (8007fa0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007f3c:	f7fe fbc7 	bl	80066ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f40:	e026      	b.n	8007f90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4413      	add	r3, r2
 8007f48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f4a:	4b14      	ldr	r3, [pc, #80]	; (8007f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d209      	bcs.n	8007f6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f5a:	4b12      	ldr	r3, [pc, #72]	; (8007fa4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	4b0f      	ldr	r3, [pc, #60]	; (8007f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3304      	adds	r3, #4
 8007f64:	4619      	mov	r1, r3
 8007f66:	4610      	mov	r0, r2
 8007f68:	f7fe fbd5 	bl	8006716 <vListInsert>
}
 8007f6c:	e010      	b.n	8007f90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f6e:	4b0e      	ldr	r3, [pc, #56]	; (8007fa8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	4b0a      	ldr	r3, [pc, #40]	; (8007f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3304      	adds	r3, #4
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	f7fe fbcb 	bl	8006716 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f80:	4b0a      	ldr	r3, [pc, #40]	; (8007fac <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d202      	bcs.n	8007f90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f8a:	4a08      	ldr	r2, [pc, #32]	; (8007fac <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	6013      	str	r3, [r2, #0]
}
 8007f90:	bf00      	nop
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	20000d94 	.word	0x20000d94
 8007f9c:	200008bc 	.word	0x200008bc
 8007fa0:	20000d7c 	.word	0x20000d7c
 8007fa4:	20000d4c 	.word	0x20000d4c
 8007fa8:	20000d48 	.word	0x20000d48
 8007fac:	20000db0 	.word	0x20000db0

08007fb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b08a      	sub	sp, #40	; 0x28
 8007fb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007fba:	f000 fb07 	bl	80085cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007fbe:	4b1c      	ldr	r3, [pc, #112]	; (8008030 <xTimerCreateTimerTask+0x80>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d021      	beq.n	800800a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007fce:	1d3a      	adds	r2, r7, #4
 8007fd0:	f107 0108 	add.w	r1, r7, #8
 8007fd4:	f107 030c 	add.w	r3, r7, #12
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fe fb31 	bl	8006640 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007fde:	6879      	ldr	r1, [r7, #4]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	9202      	str	r2, [sp, #8]
 8007fe6:	9301      	str	r3, [sp, #4]
 8007fe8:	2302      	movs	r3, #2
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	2300      	movs	r3, #0
 8007fee:	460a      	mov	r2, r1
 8007ff0:	4910      	ldr	r1, [pc, #64]	; (8008034 <xTimerCreateTimerTask+0x84>)
 8007ff2:	4811      	ldr	r0, [pc, #68]	; (8008038 <xTimerCreateTimerTask+0x88>)
 8007ff4:	f7ff f8de 	bl	80071b4 <xTaskCreateStatic>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	4a10      	ldr	r2, [pc, #64]	; (800803c <xTimerCreateTimerTask+0x8c>)
 8007ffc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007ffe:	4b0f      	ldr	r3, [pc, #60]	; (800803c <xTimerCreateTimerTask+0x8c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008006:	2301      	movs	r3, #1
 8008008:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10a      	bne.n	8008026 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	613b      	str	r3, [r7, #16]
}
 8008022:	bf00      	nop
 8008024:	e7fe      	b.n	8008024 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008026:	697b      	ldr	r3, [r7, #20]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3718      	adds	r7, #24
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	20000dec 	.word	0x20000dec
 8008034:	08009874 	.word	0x08009874
 8008038:	08008175 	.word	0x08008175
 800803c:	20000df0 	.word	0x20000df0

08008040 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b08a      	sub	sp, #40	; 0x28
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
 800804c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800804e:	2300      	movs	r3, #0
 8008050:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10a      	bne.n	800806e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	623b      	str	r3, [r7, #32]
}
 800806a:	bf00      	nop
 800806c:	e7fe      	b.n	800806c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800806e:	4b1a      	ldr	r3, [pc, #104]	; (80080d8 <xTimerGenericCommand+0x98>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d02a      	beq.n	80080cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2b05      	cmp	r3, #5
 8008086:	dc18      	bgt.n	80080ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008088:	f7ff feb2 	bl	8007df0 <xTaskGetSchedulerState>
 800808c:	4603      	mov	r3, r0
 800808e:	2b02      	cmp	r3, #2
 8008090:	d109      	bne.n	80080a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008092:	4b11      	ldr	r3, [pc, #68]	; (80080d8 <xTimerGenericCommand+0x98>)
 8008094:	6818      	ldr	r0, [r3, #0]
 8008096:	f107 0110 	add.w	r1, r7, #16
 800809a:	2300      	movs	r3, #0
 800809c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800809e:	f7fe fca1 	bl	80069e4 <xQueueGenericSend>
 80080a2:	6278      	str	r0, [r7, #36]	; 0x24
 80080a4:	e012      	b.n	80080cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80080a6:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <xTimerGenericCommand+0x98>)
 80080a8:	6818      	ldr	r0, [r3, #0]
 80080aa:	f107 0110 	add.w	r1, r7, #16
 80080ae:	2300      	movs	r3, #0
 80080b0:	2200      	movs	r2, #0
 80080b2:	f7fe fc97 	bl	80069e4 <xQueueGenericSend>
 80080b6:	6278      	str	r0, [r7, #36]	; 0x24
 80080b8:	e008      	b.n	80080cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80080ba:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <xTimerGenericCommand+0x98>)
 80080bc:	6818      	ldr	r0, [r3, #0]
 80080be:	f107 0110 	add.w	r1, r7, #16
 80080c2:	2300      	movs	r3, #0
 80080c4:	683a      	ldr	r2, [r7, #0]
 80080c6:	f7fe fd8b 	bl	8006be0 <xQueueGenericSendFromISR>
 80080ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80080cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3728      	adds	r7, #40	; 0x28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	20000dec 	.word	0x20000dec

080080dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af02      	add	r7, sp, #8
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080e6:	4b22      	ldr	r3, [pc, #136]	; (8008170 <prvProcessExpiredTimer+0x94>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	3304      	adds	r3, #4
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fe fb47 	bl	8006788 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008100:	f003 0304 	and.w	r3, r3, #4
 8008104:	2b00      	cmp	r3, #0
 8008106:	d022      	beq.n	800814e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	699a      	ldr	r2, [r3, #24]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	18d1      	adds	r1, r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	6978      	ldr	r0, [r7, #20]
 8008116:	f000 f8d1 	bl	80082bc <prvInsertTimerInActiveList>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d01f      	beq.n	8008160 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008120:	2300      	movs	r3, #0
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	2300      	movs	r3, #0
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	2100      	movs	r1, #0
 800812a:	6978      	ldr	r0, [r7, #20]
 800812c:	f7ff ff88 	bl	8008040 <xTimerGenericCommand>
 8008130:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d113      	bne.n	8008160 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	60fb      	str	r3, [r7, #12]
}
 800814a:	bf00      	nop
 800814c:	e7fe      	b.n	800814c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008154:	f023 0301 	bic.w	r3, r3, #1
 8008158:	b2da      	uxtb	r2, r3
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	6978      	ldr	r0, [r7, #20]
 8008166:	4798      	blx	r3
}
 8008168:	bf00      	nop
 800816a:	3718      	adds	r7, #24
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	20000de4 	.word	0x20000de4

08008174 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800817c:	f107 0308 	add.w	r3, r7, #8
 8008180:	4618      	mov	r0, r3
 8008182:	f000 f857 	bl	8008234 <prvGetNextExpireTime>
 8008186:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	4619      	mov	r1, r3
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f000 f803 	bl	8008198 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008192:	f000 f8d5 	bl	8008340 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008196:	e7f1      	b.n	800817c <prvTimerTask+0x8>

08008198 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80081a2:	f7ff fa43 	bl	800762c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081a6:	f107 0308 	add.w	r3, r7, #8
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 f866 	bl	800827c <prvSampleTimeNow>
 80081b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d130      	bne.n	800821a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10a      	bne.n	80081d4 <prvProcessTimerOrBlockTask+0x3c>
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d806      	bhi.n	80081d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80081c6:	f7ff fa3f 	bl	8007648 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80081ca:	68f9      	ldr	r1, [r7, #12]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7ff ff85 	bl	80080dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081d2:	e024      	b.n	800821e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d008      	beq.n	80081ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80081da:	4b13      	ldr	r3, [pc, #76]	; (8008228 <prvProcessTimerOrBlockTask+0x90>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <prvProcessTimerOrBlockTask+0x50>
 80081e4:	2301      	movs	r3, #1
 80081e6:	e000      	b.n	80081ea <prvProcessTimerOrBlockTask+0x52>
 80081e8:	2300      	movs	r3, #0
 80081ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80081ec:	4b0f      	ldr	r3, [pc, #60]	; (800822c <prvProcessTimerOrBlockTask+0x94>)
 80081ee:	6818      	ldr	r0, [r3, #0]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	4619      	mov	r1, r3
 80081fa:	f7fe ffa7 	bl	800714c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80081fe:	f7ff fa23 	bl	8007648 <xTaskResumeAll>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10a      	bne.n	800821e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008208:	4b09      	ldr	r3, [pc, #36]	; (8008230 <prvProcessTimerOrBlockTask+0x98>)
 800820a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	f3bf 8f6f 	isb	sy
}
 8008218:	e001      	b.n	800821e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800821a:	f7ff fa15 	bl	8007648 <xTaskResumeAll>
}
 800821e:	bf00      	nop
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	20000de8 	.word	0x20000de8
 800822c:	20000dec 	.word	0x20000dec
 8008230:	e000ed04 	.word	0xe000ed04

08008234 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800823c:	4b0e      	ldr	r3, [pc, #56]	; (8008278 <prvGetNextExpireTime+0x44>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <prvGetNextExpireTime+0x16>
 8008246:	2201      	movs	r2, #1
 8008248:	e000      	b.n	800824c <prvGetNextExpireTime+0x18>
 800824a:	2200      	movs	r2, #0
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d105      	bne.n	8008264 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008258:	4b07      	ldr	r3, [pc, #28]	; (8008278 <prvGetNextExpireTime+0x44>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	60fb      	str	r3, [r7, #12]
 8008262:	e001      	b.n	8008268 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008268:	68fb      	ldr	r3, [r7, #12]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	20000de4 	.word	0x20000de4

0800827c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008284:	f7ff fa7e 	bl	8007784 <xTaskGetTickCount>
 8008288:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800828a:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <prvSampleTimeNow+0x3c>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	429a      	cmp	r2, r3
 8008292:	d205      	bcs.n	80082a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008294:	f000 f936 	bl	8008504 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	e002      	b.n	80082a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80082a6:	4a04      	ldr	r2, [pc, #16]	; (80082b8 <prvSampleTimeNow+0x3c>)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80082ac:	68fb      	ldr	r3, [r7, #12]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	20000df4 	.word	0x20000df4

080082bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
 80082c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80082ca:	2300      	movs	r3, #0
 80082cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d812      	bhi.n	8008308 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	1ad2      	subs	r2, r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d302      	bcc.n	80082f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80082f0:	2301      	movs	r3, #1
 80082f2:	617b      	str	r3, [r7, #20]
 80082f4:	e01b      	b.n	800832e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80082f6:	4b10      	ldr	r3, [pc, #64]	; (8008338 <prvInsertTimerInActiveList+0x7c>)
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3304      	adds	r3, #4
 80082fe:	4619      	mov	r1, r3
 8008300:	4610      	mov	r0, r2
 8008302:	f7fe fa08 	bl	8006716 <vListInsert>
 8008306:	e012      	b.n	800832e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	429a      	cmp	r2, r3
 800830e:	d206      	bcs.n	800831e <prvInsertTimerInActiveList+0x62>
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	429a      	cmp	r2, r3
 8008316:	d302      	bcc.n	800831e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008318:	2301      	movs	r3, #1
 800831a:	617b      	str	r3, [r7, #20]
 800831c:	e007      	b.n	800832e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800831e:	4b07      	ldr	r3, [pc, #28]	; (800833c <prvInsertTimerInActiveList+0x80>)
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3304      	adds	r3, #4
 8008326:	4619      	mov	r1, r3
 8008328:	4610      	mov	r0, r2
 800832a:	f7fe f9f4 	bl	8006716 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800832e:	697b      	ldr	r3, [r7, #20]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	20000de8 	.word	0x20000de8
 800833c:	20000de4 	.word	0x20000de4

08008340 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b08e      	sub	sp, #56	; 0x38
 8008344:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008346:	e0ca      	b.n	80084de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	da18      	bge.n	8008380 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800834e:	1d3b      	adds	r3, r7, #4
 8008350:	3304      	adds	r3, #4
 8008352:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10a      	bne.n	8008370 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	61fb      	str	r3, [r7, #28]
}
 800836c:	bf00      	nop
 800836e:	e7fe      	b.n	800836e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008376:	6850      	ldr	r0, [r2, #4]
 8008378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800837a:	6892      	ldr	r2, [r2, #8]
 800837c:	4611      	mov	r1, r2
 800837e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	f2c0 80aa 	blt.w	80084dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d004      	beq.n	800839e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008396:	3304      	adds	r3, #4
 8008398:	4618      	mov	r0, r3
 800839a:	f7fe f9f5 	bl	8006788 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800839e:	463b      	mov	r3, r7
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff ff6b 	bl	800827c <prvSampleTimeNow>
 80083a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b09      	cmp	r3, #9
 80083ac:	f200 8097 	bhi.w	80084de <prvProcessReceivedCommands+0x19e>
 80083b0:	a201      	add	r2, pc, #4	; (adr r2, 80083b8 <prvProcessReceivedCommands+0x78>)
 80083b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b6:	bf00      	nop
 80083b8:	080083e1 	.word	0x080083e1
 80083bc:	080083e1 	.word	0x080083e1
 80083c0:	080083e1 	.word	0x080083e1
 80083c4:	08008455 	.word	0x08008455
 80083c8:	08008469 	.word	0x08008469
 80083cc:	080084b3 	.word	0x080084b3
 80083d0:	080083e1 	.word	0x080083e1
 80083d4:	080083e1 	.word	0x080083e1
 80083d8:	08008455 	.word	0x08008455
 80083dc:	08008469 	.word	0x08008469
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083e6:	f043 0301 	orr.w	r3, r3, #1
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	18d1      	adds	r1, r2, r3
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008400:	f7ff ff5c 	bl	80082bc <prvInsertTimerInActiveList>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d069      	beq.n	80084de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008410:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008418:	f003 0304 	and.w	r3, r3, #4
 800841c:	2b00      	cmp	r3, #0
 800841e:	d05e      	beq.n	80084de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	441a      	add	r2, r3
 8008428:	2300      	movs	r3, #0
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	2300      	movs	r3, #0
 800842e:	2100      	movs	r1, #0
 8008430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008432:	f7ff fe05 	bl	8008040 <xTimerGenericCommand>
 8008436:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d14f      	bne.n	80084de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	61bb      	str	r3, [r7, #24]
}
 8008450:	bf00      	nop
 8008452:	e7fe      	b.n	8008452 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008456:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800845a:	f023 0301 	bic.w	r3, r3, #1
 800845e:	b2da      	uxtb	r2, r3
 8008460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008462:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008466:	e03a      	b.n	80084de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800846e:	f043 0301 	orr.w	r3, r3, #1
 8008472:	b2da      	uxtb	r2, r3
 8008474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008482:	699b      	ldr	r3, [r3, #24]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10a      	bne.n	800849e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	617b      	str	r3, [r7, #20]
}
 800849a:	bf00      	nop
 800849c:	e7fe      	b.n	800849c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a0:	699a      	ldr	r2, [r3, #24]
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	18d1      	adds	r1, r2, r3
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084ac:	f7ff ff06 	bl	80082bc <prvInsertTimerInActiveList>
					break;
 80084b0:	e015      	b.n	80084de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d103      	bne.n	80084c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80084c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084c2:	f000 fbdd 	bl	8008c80 <vPortFree>
 80084c6:	e00a      	b.n	80084de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084ce:	f023 0301 	bic.w	r3, r3, #1
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80084da:	e000      	b.n	80084de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80084dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084de:	4b08      	ldr	r3, [pc, #32]	; (8008500 <prvProcessReceivedCommands+0x1c0>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	1d39      	adds	r1, r7, #4
 80084e4:	2200      	movs	r2, #0
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe fc16 	bl	8006d18 <xQueueReceive>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f47f af2a 	bne.w	8008348 <prvProcessReceivedCommands+0x8>
	}
}
 80084f4:	bf00      	nop
 80084f6:	bf00      	nop
 80084f8:	3730      	adds	r7, #48	; 0x30
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000dec 	.word	0x20000dec

08008504 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b088      	sub	sp, #32
 8008508:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800850a:	e048      	b.n	800859e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800850c:	4b2d      	ldr	r3, [pc, #180]	; (80085c4 <prvSwitchTimerLists+0xc0>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008516:	4b2b      	ldr	r3, [pc, #172]	; (80085c4 <prvSwitchTimerLists+0xc0>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	3304      	adds	r3, #4
 8008524:	4618      	mov	r0, r3
 8008526:	f7fe f92f 	bl	8006788 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008538:	f003 0304 	and.w	r3, r3, #4
 800853c:	2b00      	cmp	r3, #0
 800853e:	d02e      	beq.n	800859e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	693a      	ldr	r2, [r7, #16]
 8008546:	4413      	add	r3, r2
 8008548:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	429a      	cmp	r2, r3
 8008550:	d90e      	bls.n	8008570 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800855e:	4b19      	ldr	r3, [pc, #100]	; (80085c4 <prvSwitchTimerLists+0xc0>)
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	3304      	adds	r3, #4
 8008566:	4619      	mov	r1, r3
 8008568:	4610      	mov	r0, r2
 800856a:	f7fe f8d4 	bl	8006716 <vListInsert>
 800856e:	e016      	b.n	800859e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008570:	2300      	movs	r3, #0
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	2300      	movs	r3, #0
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	2100      	movs	r1, #0
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f7ff fd60 	bl	8008040 <xTimerGenericCommand>
 8008580:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10a      	bne.n	800859e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	603b      	str	r3, [r7, #0]
}
 800859a:	bf00      	nop
 800859c:	e7fe      	b.n	800859c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800859e:	4b09      	ldr	r3, [pc, #36]	; (80085c4 <prvSwitchTimerLists+0xc0>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1b1      	bne.n	800850c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80085a8:	4b06      	ldr	r3, [pc, #24]	; (80085c4 <prvSwitchTimerLists+0xc0>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80085ae:	4b06      	ldr	r3, [pc, #24]	; (80085c8 <prvSwitchTimerLists+0xc4>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a04      	ldr	r2, [pc, #16]	; (80085c4 <prvSwitchTimerLists+0xc0>)
 80085b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80085b6:	4a04      	ldr	r2, [pc, #16]	; (80085c8 <prvSwitchTimerLists+0xc4>)
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	6013      	str	r3, [r2, #0]
}
 80085bc:	bf00      	nop
 80085be:	3718      	adds	r7, #24
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	20000de4 	.word	0x20000de4
 80085c8:	20000de8 	.word	0x20000de8

080085cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80085d2:	f000 f967 	bl	80088a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80085d6:	4b15      	ldr	r3, [pc, #84]	; (800862c <prvCheckForValidListAndQueue+0x60>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d120      	bne.n	8008620 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80085de:	4814      	ldr	r0, [pc, #80]	; (8008630 <prvCheckForValidListAndQueue+0x64>)
 80085e0:	f7fe f848 	bl	8006674 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80085e4:	4813      	ldr	r0, [pc, #76]	; (8008634 <prvCheckForValidListAndQueue+0x68>)
 80085e6:	f7fe f845 	bl	8006674 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80085ea:	4b13      	ldr	r3, [pc, #76]	; (8008638 <prvCheckForValidListAndQueue+0x6c>)
 80085ec:	4a10      	ldr	r2, [pc, #64]	; (8008630 <prvCheckForValidListAndQueue+0x64>)
 80085ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80085f0:	4b12      	ldr	r3, [pc, #72]	; (800863c <prvCheckForValidListAndQueue+0x70>)
 80085f2:	4a10      	ldr	r2, [pc, #64]	; (8008634 <prvCheckForValidListAndQueue+0x68>)
 80085f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80085f6:	2300      	movs	r3, #0
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	4b11      	ldr	r3, [pc, #68]	; (8008640 <prvCheckForValidListAndQueue+0x74>)
 80085fc:	4a11      	ldr	r2, [pc, #68]	; (8008644 <prvCheckForValidListAndQueue+0x78>)
 80085fe:	2110      	movs	r1, #16
 8008600:	200a      	movs	r0, #10
 8008602:	f7fe f953 	bl	80068ac <xQueueGenericCreateStatic>
 8008606:	4603      	mov	r3, r0
 8008608:	4a08      	ldr	r2, [pc, #32]	; (800862c <prvCheckForValidListAndQueue+0x60>)
 800860a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800860c:	4b07      	ldr	r3, [pc, #28]	; (800862c <prvCheckForValidListAndQueue+0x60>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d005      	beq.n	8008620 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008614:	4b05      	ldr	r3, [pc, #20]	; (800862c <prvCheckForValidListAndQueue+0x60>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	490b      	ldr	r1, [pc, #44]	; (8008648 <prvCheckForValidListAndQueue+0x7c>)
 800861a:	4618      	mov	r0, r3
 800861c:	f7fe fd6c 	bl	80070f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008620:	f000 f970 	bl	8008904 <vPortExitCritical>
}
 8008624:	bf00      	nop
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	20000dec 	.word	0x20000dec
 8008630:	20000dbc 	.word	0x20000dbc
 8008634:	20000dd0 	.word	0x20000dd0
 8008638:	20000de4 	.word	0x20000de4
 800863c:	20000de8 	.word	0x20000de8
 8008640:	20000e98 	.word	0x20000e98
 8008644:	20000df8 	.word	0x20000df8
 8008648:	0800987c 	.word	0x0800987c

0800864c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	3b04      	subs	r3, #4
 800865c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3b04      	subs	r3, #4
 800866a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	f023 0201 	bic.w	r2, r3, #1
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3b04      	subs	r3, #4
 800867a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800867c:	4a0c      	ldr	r2, [pc, #48]	; (80086b0 <pxPortInitialiseStack+0x64>)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3b14      	subs	r3, #20
 8008686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3b04      	subs	r3, #4
 8008692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f06f 0202 	mvn.w	r2, #2
 800869a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	3b20      	subs	r3, #32
 80086a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086a2:	68fb      	ldr	r3, [r7, #12]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	080086b5 	.word	0x080086b5

080086b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80086ba:	2300      	movs	r3, #0
 80086bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086be:	4b12      	ldr	r3, [pc, #72]	; (8008708 <prvTaskExitError+0x54>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c6:	d00a      	beq.n	80086de <prvTaskExitError+0x2a>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	60fb      	str	r3, [r7, #12]
}
 80086da:	bf00      	nop
 80086dc:	e7fe      	b.n	80086dc <prvTaskExitError+0x28>
	__asm volatile
 80086de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	60bb      	str	r3, [r7, #8]
}
 80086f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086f2:	bf00      	nop
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d0fc      	beq.n	80086f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086fa:	bf00      	nop
 80086fc:	bf00      	nop
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	20000088 	.word	0x20000088
 800870c:	00000000 	.word	0x00000000

08008710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008710:	4b07      	ldr	r3, [pc, #28]	; (8008730 <pxCurrentTCBConst2>)
 8008712:	6819      	ldr	r1, [r3, #0]
 8008714:	6808      	ldr	r0, [r1, #0]
 8008716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871a:	f380 8809 	msr	PSP, r0
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f04f 0000 	mov.w	r0, #0
 8008726:	f380 8811 	msr	BASEPRI, r0
 800872a:	4770      	bx	lr
 800872c:	f3af 8000 	nop.w

08008730 <pxCurrentTCBConst2>:
 8008730:	200008bc 	.word	0x200008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008734:	bf00      	nop
 8008736:	bf00      	nop

08008738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008738:	4808      	ldr	r0, [pc, #32]	; (800875c <prvPortStartFirstTask+0x24>)
 800873a:	6800      	ldr	r0, [r0, #0]
 800873c:	6800      	ldr	r0, [r0, #0]
 800873e:	f380 8808 	msr	MSP, r0
 8008742:	f04f 0000 	mov.w	r0, #0
 8008746:	f380 8814 	msr	CONTROL, r0
 800874a:	b662      	cpsie	i
 800874c:	b661      	cpsie	f
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	df00      	svc	0
 8008758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800875a:	bf00      	nop
 800875c:	e000ed08 	.word	0xe000ed08

08008760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008766:	4b46      	ldr	r3, [pc, #280]	; (8008880 <xPortStartScheduler+0x120>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a46      	ldr	r2, [pc, #280]	; (8008884 <xPortStartScheduler+0x124>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d10a      	bne.n	8008786 <xPortStartScheduler+0x26>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	613b      	str	r3, [r7, #16]
}
 8008782:	bf00      	nop
 8008784:	e7fe      	b.n	8008784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008786:	4b3e      	ldr	r3, [pc, #248]	; (8008880 <xPortStartScheduler+0x120>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a3f      	ldr	r2, [pc, #252]	; (8008888 <xPortStartScheduler+0x128>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d10a      	bne.n	80087a6 <xPortStartScheduler+0x46>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	60fb      	str	r3, [r7, #12]
}
 80087a2:	bf00      	nop
 80087a4:	e7fe      	b.n	80087a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087a6:	4b39      	ldr	r3, [pc, #228]	; (800888c <xPortStartScheduler+0x12c>)
 80087a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	22ff      	movs	r2, #255	; 0xff
 80087b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	4b31      	ldr	r3, [pc, #196]	; (8008890 <xPortStartScheduler+0x130>)
 80087cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087ce:	4b31      	ldr	r3, [pc, #196]	; (8008894 <xPortStartScheduler+0x134>)
 80087d0:	2207      	movs	r2, #7
 80087d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087d4:	e009      	b.n	80087ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80087d6:	4b2f      	ldr	r3, [pc, #188]	; (8008894 <xPortStartScheduler+0x134>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3b01      	subs	r3, #1
 80087dc:	4a2d      	ldr	r2, [pc, #180]	; (8008894 <xPortStartScheduler+0x134>)
 80087de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087e0:	78fb      	ldrb	r3, [r7, #3]
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087ea:	78fb      	ldrb	r3, [r7, #3]
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f2:	2b80      	cmp	r3, #128	; 0x80
 80087f4:	d0ef      	beq.n	80087d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087f6:	4b27      	ldr	r3, [pc, #156]	; (8008894 <xPortStartScheduler+0x134>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f1c3 0307 	rsb	r3, r3, #7
 80087fe:	2b04      	cmp	r3, #4
 8008800:	d00a      	beq.n	8008818 <xPortStartScheduler+0xb8>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	60bb      	str	r3, [r7, #8]
}
 8008814:	bf00      	nop
 8008816:	e7fe      	b.n	8008816 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008818:	4b1e      	ldr	r3, [pc, #120]	; (8008894 <xPortStartScheduler+0x134>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	021b      	lsls	r3, r3, #8
 800881e:	4a1d      	ldr	r2, [pc, #116]	; (8008894 <xPortStartScheduler+0x134>)
 8008820:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008822:	4b1c      	ldr	r3, [pc, #112]	; (8008894 <xPortStartScheduler+0x134>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800882a:	4a1a      	ldr	r2, [pc, #104]	; (8008894 <xPortStartScheduler+0x134>)
 800882c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	b2da      	uxtb	r2, r3
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008836:	4b18      	ldr	r3, [pc, #96]	; (8008898 <xPortStartScheduler+0x138>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a17      	ldr	r2, [pc, #92]	; (8008898 <xPortStartScheduler+0x138>)
 800883c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008842:	4b15      	ldr	r3, [pc, #84]	; (8008898 <xPortStartScheduler+0x138>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a14      	ldr	r2, [pc, #80]	; (8008898 <xPortStartScheduler+0x138>)
 8008848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800884c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800884e:	f000 f8dd 	bl	8008a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008852:	4b12      	ldr	r3, [pc, #72]	; (800889c <xPortStartScheduler+0x13c>)
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008858:	f000 f8fc 	bl	8008a54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800885c:	4b10      	ldr	r3, [pc, #64]	; (80088a0 <xPortStartScheduler+0x140>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a0f      	ldr	r2, [pc, #60]	; (80088a0 <xPortStartScheduler+0x140>)
 8008862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008866:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008868:	f7ff ff66 	bl	8008738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800886c:	f7ff f854 	bl	8007918 <vTaskSwitchContext>
	prvTaskExitError();
 8008870:	f7ff ff20 	bl	80086b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	e000ed00 	.word	0xe000ed00
 8008884:	410fc271 	.word	0x410fc271
 8008888:	410fc270 	.word	0x410fc270
 800888c:	e000e400 	.word	0xe000e400
 8008890:	20000ee8 	.word	0x20000ee8
 8008894:	20000eec 	.word	0x20000eec
 8008898:	e000ed20 	.word	0xe000ed20
 800889c:	20000088 	.word	0x20000088
 80088a0:	e000ef34 	.word	0xe000ef34

080088a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	607b      	str	r3, [r7, #4]
}
 80088bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088be:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <vPortEnterCritical+0x58>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	3301      	adds	r3, #1
 80088c4:	4a0d      	ldr	r2, [pc, #52]	; (80088fc <vPortEnterCritical+0x58>)
 80088c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088c8:	4b0c      	ldr	r3, [pc, #48]	; (80088fc <vPortEnterCritical+0x58>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d10f      	bne.n	80088f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088d0:	4b0b      	ldr	r3, [pc, #44]	; (8008900 <vPortEnterCritical+0x5c>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00a      	beq.n	80088f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	603b      	str	r3, [r7, #0]
}
 80088ec:	bf00      	nop
 80088ee:	e7fe      	b.n	80088ee <vPortEnterCritical+0x4a>
	}
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	20000088 	.word	0x20000088
 8008900:	e000ed04 	.word	0xe000ed04

08008904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800890a:	4b12      	ldr	r3, [pc, #72]	; (8008954 <vPortExitCritical+0x50>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10a      	bne.n	8008928 <vPortExitCritical+0x24>
	__asm volatile
 8008912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	607b      	str	r3, [r7, #4]
}
 8008924:	bf00      	nop
 8008926:	e7fe      	b.n	8008926 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008928:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <vPortExitCritical+0x50>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3b01      	subs	r3, #1
 800892e:	4a09      	ldr	r2, [pc, #36]	; (8008954 <vPortExitCritical+0x50>)
 8008930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008932:	4b08      	ldr	r3, [pc, #32]	; (8008954 <vPortExitCritical+0x50>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d105      	bne.n	8008946 <vPortExitCritical+0x42>
 800893a:	2300      	movs	r3, #0
 800893c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	f383 8811 	msr	BASEPRI, r3
}
 8008944:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008946:	bf00      	nop
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	20000088 	.word	0x20000088
	...

08008960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008960:	f3ef 8009 	mrs	r0, PSP
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	4b15      	ldr	r3, [pc, #84]	; (80089c0 <pxCurrentTCBConst>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	f01e 0f10 	tst.w	lr, #16
 8008970:	bf08      	it	eq
 8008972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897a:	6010      	str	r0, [r2, #0]
 800897c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008984:	f380 8811 	msr	BASEPRI, r0
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f7fe ffc2 	bl	8007918 <vTaskSwitchContext>
 8008994:	f04f 0000 	mov.w	r0, #0
 8008998:	f380 8811 	msr	BASEPRI, r0
 800899c:	bc09      	pop	{r0, r3}
 800899e:	6819      	ldr	r1, [r3, #0]
 80089a0:	6808      	ldr	r0, [r1, #0]
 80089a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a6:	f01e 0f10 	tst.w	lr, #16
 80089aa:	bf08      	it	eq
 80089ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089b0:	f380 8809 	msr	PSP, r0
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	f3af 8000 	nop.w

080089c0 <pxCurrentTCBConst>:
 80089c0:	200008bc 	.word	0x200008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089c4:	bf00      	nop
 80089c6:	bf00      	nop

080089c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
	__asm volatile
 80089ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	607b      	str	r3, [r7, #4]
}
 80089e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80089e2:	f7fe fedf 	bl	80077a4 <xTaskIncrementTick>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d003      	beq.n	80089f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089ec:	4b06      	ldr	r3, [pc, #24]	; (8008a08 <xPortSysTickHandler+0x40>)
 80089ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	2300      	movs	r3, #0
 80089f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	f383 8811 	msr	BASEPRI, r3
}
 80089fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	e000ed04 	.word	0xe000ed04

08008a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a10:	4b0b      	ldr	r3, [pc, #44]	; (8008a40 <vPortSetupTimerInterrupt+0x34>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a16:	4b0b      	ldr	r3, [pc, #44]	; (8008a44 <vPortSetupTimerInterrupt+0x38>)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a1c:	4b0a      	ldr	r3, [pc, #40]	; (8008a48 <vPortSetupTimerInterrupt+0x3c>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a0a      	ldr	r2, [pc, #40]	; (8008a4c <vPortSetupTimerInterrupt+0x40>)
 8008a22:	fba2 2303 	umull	r2, r3, r2, r3
 8008a26:	099b      	lsrs	r3, r3, #6
 8008a28:	4a09      	ldr	r2, [pc, #36]	; (8008a50 <vPortSetupTimerInterrupt+0x44>)
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a2e:	4b04      	ldr	r3, [pc, #16]	; (8008a40 <vPortSetupTimerInterrupt+0x34>)
 8008a30:	2207      	movs	r2, #7
 8008a32:	601a      	str	r2, [r3, #0]
}
 8008a34:	bf00      	nop
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	e000e010 	.word	0xe000e010
 8008a44:	e000e018 	.word	0xe000e018
 8008a48:	20000000 	.word	0x20000000
 8008a4c:	10624dd3 	.word	0x10624dd3
 8008a50:	e000e014 	.word	0xe000e014

08008a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a64 <vPortEnableVFP+0x10>
 8008a58:	6801      	ldr	r1, [r0, #0]
 8008a5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a5e:	6001      	str	r1, [r0, #0]
 8008a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a62:	bf00      	nop
 8008a64:	e000ed88 	.word	0xe000ed88

08008a68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a6e:	f3ef 8305 	mrs	r3, IPSR
 8008a72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2b0f      	cmp	r3, #15
 8008a78:	d914      	bls.n	8008aa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a7a:	4a17      	ldr	r2, [pc, #92]	; (8008ad8 <vPortValidateInterruptPriority+0x70>)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	4413      	add	r3, r2
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a84:	4b15      	ldr	r3, [pc, #84]	; (8008adc <vPortValidateInterruptPriority+0x74>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	7afa      	ldrb	r2, [r7, #11]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d20a      	bcs.n	8008aa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	607b      	str	r3, [r7, #4]
}
 8008aa0:	bf00      	nop
 8008aa2:	e7fe      	b.n	8008aa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008aa4:	4b0e      	ldr	r3, [pc, #56]	; (8008ae0 <vPortValidateInterruptPriority+0x78>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008aac:	4b0d      	ldr	r3, [pc, #52]	; (8008ae4 <vPortValidateInterruptPriority+0x7c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d90a      	bls.n	8008aca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab8:	f383 8811 	msr	BASEPRI, r3
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	603b      	str	r3, [r7, #0]
}
 8008ac6:	bf00      	nop
 8008ac8:	e7fe      	b.n	8008ac8 <vPortValidateInterruptPriority+0x60>
	}
 8008aca:	bf00      	nop
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	e000e3f0 	.word	0xe000e3f0
 8008adc:	20000ee8 	.word	0x20000ee8
 8008ae0:	e000ed0c 	.word	0xe000ed0c
 8008ae4:	20000eec 	.word	0x20000eec

08008ae8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b08a      	sub	sp, #40	; 0x28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008af0:	2300      	movs	r3, #0
 8008af2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008af4:	f7fe fd9a 	bl	800762c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008af8:	4b5b      	ldr	r3, [pc, #364]	; (8008c68 <pvPortMalloc+0x180>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b00:	f000 f920 	bl	8008d44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b04:	4b59      	ldr	r3, [pc, #356]	; (8008c6c <pvPortMalloc+0x184>)
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f040 8093 	bne.w	8008c38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d01d      	beq.n	8008b54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008b18:	2208      	movs	r2, #8
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f003 0307 	and.w	r3, r3, #7
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d014      	beq.n	8008b54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f023 0307 	bic.w	r3, r3, #7
 8008b30:	3308      	adds	r3, #8
 8008b32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f003 0307 	and.w	r3, r3, #7
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00a      	beq.n	8008b54 <pvPortMalloc+0x6c>
	__asm volatile
 8008b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	617b      	str	r3, [r7, #20]
}
 8008b50:	bf00      	nop
 8008b52:	e7fe      	b.n	8008b52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d06e      	beq.n	8008c38 <pvPortMalloc+0x150>
 8008b5a:	4b45      	ldr	r3, [pc, #276]	; (8008c70 <pvPortMalloc+0x188>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d869      	bhi.n	8008c38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b64:	4b43      	ldr	r3, [pc, #268]	; (8008c74 <pvPortMalloc+0x18c>)
 8008b66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b68:	4b42      	ldr	r3, [pc, #264]	; (8008c74 <pvPortMalloc+0x18c>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b6e:	e004      	b.n	8008b7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d903      	bls.n	8008b8c <pvPortMalloc+0xa4>
 8008b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1f1      	bne.n	8008b70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b8c:	4b36      	ldr	r3, [pc, #216]	; (8008c68 <pvPortMalloc+0x180>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d050      	beq.n	8008c38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2208      	movs	r2, #8
 8008b9c:	4413      	add	r3, r2
 8008b9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	6a3b      	ldr	r3, [r7, #32]
 8008ba6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	685a      	ldr	r2, [r3, #4]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	1ad2      	subs	r2, r2, r3
 8008bb0:	2308      	movs	r3, #8
 8008bb2:	005b      	lsls	r3, r3, #1
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d91f      	bls.n	8008bf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	f003 0307 	and.w	r3, r3, #7
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00a      	beq.n	8008be0 <pvPortMalloc+0xf8>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	613b      	str	r3, [r7, #16]
}
 8008bdc:	bf00      	nop
 8008bde:	e7fe      	b.n	8008bde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	1ad2      	subs	r2, r2, r3
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bf2:	69b8      	ldr	r0, [r7, #24]
 8008bf4:	f000 f908 	bl	8008e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bf8:	4b1d      	ldr	r3, [pc, #116]	; (8008c70 <pvPortMalloc+0x188>)
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	4a1b      	ldr	r2, [pc, #108]	; (8008c70 <pvPortMalloc+0x188>)
 8008c04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c06:	4b1a      	ldr	r3, [pc, #104]	; (8008c70 <pvPortMalloc+0x188>)
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	4b1b      	ldr	r3, [pc, #108]	; (8008c78 <pvPortMalloc+0x190>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d203      	bcs.n	8008c1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c12:	4b17      	ldr	r3, [pc, #92]	; (8008c70 <pvPortMalloc+0x188>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a18      	ldr	r2, [pc, #96]	; (8008c78 <pvPortMalloc+0x190>)
 8008c18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	685a      	ldr	r2, [r3, #4]
 8008c1e:	4b13      	ldr	r3, [pc, #76]	; (8008c6c <pvPortMalloc+0x184>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	431a      	orrs	r2, r3
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c2e:	4b13      	ldr	r3, [pc, #76]	; (8008c7c <pvPortMalloc+0x194>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3301      	adds	r3, #1
 8008c34:	4a11      	ldr	r2, [pc, #68]	; (8008c7c <pvPortMalloc+0x194>)
 8008c36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c38:	f7fe fd06 	bl	8007648 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	f003 0307 	and.w	r3, r3, #7
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00a      	beq.n	8008c5c <pvPortMalloc+0x174>
	__asm volatile
 8008c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	60fb      	str	r3, [r7, #12]
}
 8008c58:	bf00      	nop
 8008c5a:	e7fe      	b.n	8008c5a <pvPortMalloc+0x172>
	return pvReturn;
 8008c5c:	69fb      	ldr	r3, [r7, #28]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3728      	adds	r7, #40	; 0x28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	20004af8 	.word	0x20004af8
 8008c6c:	20004b0c 	.word	0x20004b0c
 8008c70:	20004afc 	.word	0x20004afc
 8008c74:	20004af0 	.word	0x20004af0
 8008c78:	20004b00 	.word	0x20004b00
 8008c7c:	20004b04 	.word	0x20004b04

08008c80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d04d      	beq.n	8008d2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c92:	2308      	movs	r3, #8
 8008c94:	425b      	negs	r3, r3
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	4413      	add	r3, r2
 8008c9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	685a      	ldr	r2, [r3, #4]
 8008ca4:	4b24      	ldr	r3, [pc, #144]	; (8008d38 <vPortFree+0xb8>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4013      	ands	r3, r2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10a      	bne.n	8008cc4 <vPortFree+0x44>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	60fb      	str	r3, [r7, #12]
}
 8008cc0:	bf00      	nop
 8008cc2:	e7fe      	b.n	8008cc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00a      	beq.n	8008ce2 <vPortFree+0x62>
	__asm volatile
 8008ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	60bb      	str	r3, [r7, #8]
}
 8008cde:	bf00      	nop
 8008ce0:	e7fe      	b.n	8008ce0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	685a      	ldr	r2, [r3, #4]
 8008ce6:	4b14      	ldr	r3, [pc, #80]	; (8008d38 <vPortFree+0xb8>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4013      	ands	r3, r2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d01e      	beq.n	8008d2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d11a      	bne.n	8008d2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	4b0e      	ldr	r3, [pc, #56]	; (8008d38 <vPortFree+0xb8>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	43db      	mvns	r3, r3
 8008d02:	401a      	ands	r2, r3
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d08:	f7fe fc90 	bl	800762c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	4b0a      	ldr	r3, [pc, #40]	; (8008d3c <vPortFree+0xbc>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4413      	add	r3, r2
 8008d16:	4a09      	ldr	r2, [pc, #36]	; (8008d3c <vPortFree+0xbc>)
 8008d18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d1a:	6938      	ldr	r0, [r7, #16]
 8008d1c:	f000 f874 	bl	8008e08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d20:	4b07      	ldr	r3, [pc, #28]	; (8008d40 <vPortFree+0xc0>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3301      	adds	r3, #1
 8008d26:	4a06      	ldr	r2, [pc, #24]	; (8008d40 <vPortFree+0xc0>)
 8008d28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008d2a:	f7fe fc8d 	bl	8007648 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d2e:	bf00      	nop
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	20004b0c 	.word	0x20004b0c
 8008d3c:	20004afc 	.word	0x20004afc
 8008d40:	20004b08 	.word	0x20004b08

08008d44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008d4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d50:	4b27      	ldr	r3, [pc, #156]	; (8008df0 <prvHeapInit+0xac>)
 8008d52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f003 0307 	and.w	r3, r3, #7
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00c      	beq.n	8008d78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3307      	adds	r3, #7
 8008d62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f023 0307 	bic.w	r3, r3, #7
 8008d6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d6c:	68ba      	ldr	r2, [r7, #8]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	4a1f      	ldr	r2, [pc, #124]	; (8008df0 <prvHeapInit+0xac>)
 8008d74:	4413      	add	r3, r2
 8008d76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d7c:	4a1d      	ldr	r2, [pc, #116]	; (8008df4 <prvHeapInit+0xb0>)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d82:	4b1c      	ldr	r3, [pc, #112]	; (8008df4 <prvHeapInit+0xb0>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d90:	2208      	movs	r2, #8
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	1a9b      	subs	r3, r3, r2
 8008d96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f023 0307 	bic.w	r3, r3, #7
 8008d9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	4a15      	ldr	r2, [pc, #84]	; (8008df8 <prvHeapInit+0xb4>)
 8008da4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008da6:	4b14      	ldr	r3, [pc, #80]	; (8008df8 <prvHeapInit+0xb4>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2200      	movs	r2, #0
 8008dac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dae:	4b12      	ldr	r3, [pc, #72]	; (8008df8 <prvHeapInit+0xb4>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2200      	movs	r2, #0
 8008db4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	1ad2      	subs	r2, r2, r3
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008dc4:	4b0c      	ldr	r3, [pc, #48]	; (8008df8 <prvHeapInit+0xb4>)
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	4a0a      	ldr	r2, [pc, #40]	; (8008dfc <prvHeapInit+0xb8>)
 8008dd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	4a09      	ldr	r2, [pc, #36]	; (8008e00 <prvHeapInit+0xbc>)
 8008dda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ddc:	4b09      	ldr	r3, [pc, #36]	; (8008e04 <prvHeapInit+0xc0>)
 8008dde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008de2:	601a      	str	r2, [r3, #0]
}
 8008de4:	bf00      	nop
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	20000ef0 	.word	0x20000ef0
 8008df4:	20004af0 	.word	0x20004af0
 8008df8:	20004af8 	.word	0x20004af8
 8008dfc:	20004b00 	.word	0x20004b00
 8008e00:	20004afc 	.word	0x20004afc
 8008e04:	20004b0c 	.word	0x20004b0c

08008e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e10:	4b28      	ldr	r3, [pc, #160]	; (8008eb4 <prvInsertBlockIntoFreeList+0xac>)
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	e002      	b.n	8008e1c <prvInsertBlockIntoFreeList+0x14>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d8f7      	bhi.n	8008e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	4413      	add	r3, r2
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d108      	bne.n	8008e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	441a      	add	r2, r3
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	441a      	add	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d118      	bne.n	8008e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	4b15      	ldr	r3, [pc, #84]	; (8008eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d00d      	beq.n	8008e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	441a      	add	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	e008      	b.n	8008e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e86:	4b0c      	ldr	r3, [pc, #48]	; (8008eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	e003      	b.n	8008e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d002      	beq.n	8008ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ea6:	bf00      	nop
 8008ea8:	3714      	adds	r7, #20
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	20004af0 	.word	0x20004af0
 8008eb8:	20004af8 	.word	0x20004af8

08008ebc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	4912      	ldr	r1, [pc, #72]	; (8008f0c <MX_USB_DEVICE_Init+0x50>)
 8008ec4:	4812      	ldr	r0, [pc, #72]	; (8008f10 <MX_USB_DEVICE_Init+0x54>)
 8008ec6:	f7fb ff83 	bl	8004dd0 <USBD_Init>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d001      	beq.n	8008ed4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ed0:	f7f7 fc92 	bl	80007f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8008ed4:	490f      	ldr	r1, [pc, #60]	; (8008f14 <MX_USB_DEVICE_Init+0x58>)
 8008ed6:	480e      	ldr	r0, [pc, #56]	; (8008f10 <MX_USB_DEVICE_Init+0x54>)
 8008ed8:	f7fb ffaa 	bl	8004e30 <USBD_RegisterClass>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ee2:	f7f7 fc89 	bl	80007f8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8008ee6:	490c      	ldr	r1, [pc, #48]	; (8008f18 <MX_USB_DEVICE_Init+0x5c>)
 8008ee8:	4809      	ldr	r0, [pc, #36]	; (8008f10 <MX_USB_DEVICE_Init+0x54>)
 8008eea:	f7fb ff57 	bl	8004d9c <USBD_CUSTOM_HID_RegisterInterface>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ef4:	f7f7 fc80 	bl	80007f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ef8:	4805      	ldr	r0, [pc, #20]	; (8008f10 <MX_USB_DEVICE_Init+0x54>)
 8008efa:	f7fb ffcf 	bl	8004e9c <USBD_Start>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f04:	f7f7 fc78 	bl	80007f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f08:	bf00      	nop
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	200000b8 	.word	0x200000b8
 8008f10:	20004b10 	.word	0x20004b10
 8008f14:	2000000c 	.word	0x2000000c
 8008f18:	200000a8 	.word	0x200000a8

08008f1c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008f30:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <CUSTOM_HID_OutEvent_FS>:

extern uint8_t USB_RX_Buffer[65];

extern int USB_packet_enable;
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	4603      	mov	r3, r0
 8008f44:	460a      	mov	r2, r1
 8008f46:	71fb      	strb	r3, [r7, #7]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
	  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f4c:	4b13      	ldr	r3, [pc, #76]	; (8008f9c <CUSTOM_HID_OutEvent_FS+0x60>)
 8008f4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f52:	60bb      	str	r3, [r7, #8]

	  for (int i =  0; i < 65 ; i++)
 8008f54:	2300      	movs	r3, #0
 8008f56:	60fb      	str	r3, [r7, #12]
 8008f58:	e00b      	b.n	8008f72 <CUSTOM_HID_OutEvent_FS+0x36>
	  {
	    USB_RX_Buffer[i] = hhid->Report_buf[i]; // To read usb data from PC
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	4413      	add	r3, r2
 8008f60:	7819      	ldrb	r1, [r3, #0]
 8008f62:	4a0f      	ldr	r2, [pc, #60]	; (8008fa0 <CUSTOM_HID_OutEvent_FS+0x64>)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4413      	add	r3, r2
 8008f68:	460a      	mov	r2, r1
 8008f6a:	701a      	strb	r2, [r3, #0]
	  for (int i =  0; i < 65 ; i++)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	60fb      	str	r3, [r7, #12]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2b40      	cmp	r3, #64	; 0x40
 8008f76:	ddf0      	ble.n	8008f5a <CUSTOM_HID_OutEvent_FS+0x1e>
	  }
	  USB_packet_enable=1;
 8008f78:	4b0a      	ldr	r3, [pc, #40]	; (8008fa4 <CUSTOM_HID_OutEvent_FS+0x68>)
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	601a      	str	r2, [r3, #0]
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8008f7e:	4807      	ldr	r0, [pc, #28]	; (8008f9c <CUSTOM_HID_OutEvent_FS+0x60>)
 8008f80:	f7fb feaa 	bl	8004cd8 <USBD_CUSTOM_HID_ReceivePacket>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d002      	beq.n	8008f90 <CUSTOM_HID_OutEvent_FS+0x54>
  {
    return -1;
 8008f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f8e:	e000      	b.n	8008f92 <CUSTOM_HID_OutEvent_FS+0x56>
  }

  return (USBD_OK);
 8008f90:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	20004b10 	.word	0x20004b10
 8008fa0:	2000012c 	.word	0x2000012c
 8008fa4:	200001b4 	.word	0x200001b4

08008fa8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	4603      	mov	r3, r0
 8008fb0:	6039      	str	r1, [r7, #0]
 8008fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	2212      	movs	r2, #18
 8008fb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008fba:	4b03      	ldr	r3, [pc, #12]	; (8008fc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	200000d4 	.word	0x200000d4

08008fcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	6039      	str	r1, [r7, #0]
 8008fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	2204      	movs	r2, #4
 8008fdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008fde:	4b03      	ldr	r3, [pc, #12]	; (8008fec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr
 8008fec:	200000e8 	.word	0x200000e8

08008ff0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	6039      	str	r1, [r7, #0]
 8008ffa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ffc:	79fb      	ldrb	r3, [r7, #7]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d105      	bne.n	800900e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	4907      	ldr	r1, [pc, #28]	; (8009024 <USBD_FS_ProductStrDescriptor+0x34>)
 8009006:	4808      	ldr	r0, [pc, #32]	; (8009028 <USBD_FS_ProductStrDescriptor+0x38>)
 8009008:	f7fd f8f4 	bl	80061f4 <USBD_GetString>
 800900c:	e004      	b.n	8009018 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	4904      	ldr	r1, [pc, #16]	; (8009024 <USBD_FS_ProductStrDescriptor+0x34>)
 8009012:	4805      	ldr	r0, [pc, #20]	; (8009028 <USBD_FS_ProductStrDescriptor+0x38>)
 8009014:	f7fd f8ee 	bl	80061f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009018:	4b02      	ldr	r3, [pc, #8]	; (8009024 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800901a:	4618      	mov	r0, r3
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20004dec 	.word	0x20004dec
 8009028:	08009884 	.word	0x08009884

0800902c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	6039      	str	r1, [r7, #0]
 8009036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009038:	683a      	ldr	r2, [r7, #0]
 800903a:	4904      	ldr	r1, [pc, #16]	; (800904c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800903c:	4804      	ldr	r0, [pc, #16]	; (8009050 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800903e:	f7fd f8d9 	bl	80061f4 <USBD_GetString>
  return USBD_StrDesc;
 8009042:	4b02      	ldr	r3, [pc, #8]	; (800904c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009044:	4618      	mov	r0, r3
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	20004dec 	.word	0x20004dec
 8009050:	080098a4 	.word	0x080098a4

08009054 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	4603      	mov	r3, r0
 800905c:	6039      	str	r1, [r7, #0]
 800905e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	221a      	movs	r2, #26
 8009064:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009066:	f000 f843 	bl	80090f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800906a:	4b02      	ldr	r3, [pc, #8]	; (8009074 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800906c:	4618      	mov	r0, r3
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	200000ec 	.word	0x200000ec

08009078 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	4603      	mov	r3, r0
 8009080:	6039      	str	r1, [r7, #0]
 8009082:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009084:	79fb      	ldrb	r3, [r7, #7]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d105      	bne.n	8009096 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	4907      	ldr	r1, [pc, #28]	; (80090ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800908e:	4808      	ldr	r0, [pc, #32]	; (80090b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009090:	f7fd f8b0 	bl	80061f4 <USBD_GetString>
 8009094:	e004      	b.n	80090a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	4904      	ldr	r1, [pc, #16]	; (80090ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800909a:	4805      	ldr	r0, [pc, #20]	; (80090b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800909c:	f7fd f8aa 	bl	80061f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090a0:	4b02      	ldr	r3, [pc, #8]	; (80090ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	20004dec 	.word	0x20004dec
 80090b0:	080098b8 	.word	0x080098b8

080090b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	4603      	mov	r3, r0
 80090bc:	6039      	str	r1, [r7, #0]
 80090be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090c0:	79fb      	ldrb	r3, [r7, #7]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d105      	bne.n	80090d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	4907      	ldr	r1, [pc, #28]	; (80090e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090ca:	4808      	ldr	r0, [pc, #32]	; (80090ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090cc:	f7fd f892 	bl	80061f4 <USBD_GetString>
 80090d0:	e004      	b.n	80090dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	4904      	ldr	r1, [pc, #16]	; (80090e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090d6:	4805      	ldr	r0, [pc, #20]	; (80090ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090d8:	f7fd f88c 	bl	80061f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090dc:	4b02      	ldr	r3, [pc, #8]	; (80090e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	20004dec 	.word	0x20004dec
 80090ec:	080098cc 	.word	0x080098cc

080090f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090f6:	4b0f      	ldr	r3, [pc, #60]	; (8009134 <Get_SerialNum+0x44>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090fc:	4b0e      	ldr	r3, [pc, #56]	; (8009138 <Get_SerialNum+0x48>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009102:	4b0e      	ldr	r3, [pc, #56]	; (800913c <Get_SerialNum+0x4c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4413      	add	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d009      	beq.n	800912a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009116:	2208      	movs	r2, #8
 8009118:	4909      	ldr	r1, [pc, #36]	; (8009140 <Get_SerialNum+0x50>)
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f000 f814 	bl	8009148 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009120:	2204      	movs	r2, #4
 8009122:	4908      	ldr	r1, [pc, #32]	; (8009144 <Get_SerialNum+0x54>)
 8009124:	68b8      	ldr	r0, [r7, #8]
 8009126:	f000 f80f 	bl	8009148 <IntToUnicode>
  }
}
 800912a:	bf00      	nop
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	1fff7a10 	.word	0x1fff7a10
 8009138:	1fff7a14 	.word	0x1fff7a14
 800913c:	1fff7a18 	.word	0x1fff7a18
 8009140:	200000ee 	.word	0x200000ee
 8009144:	200000fe 	.word	0x200000fe

08009148 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009148:	b480      	push	{r7}
 800914a:	b087      	sub	sp, #28
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	4613      	mov	r3, r2
 8009154:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800915a:	2300      	movs	r3, #0
 800915c:	75fb      	strb	r3, [r7, #23]
 800915e:	e027      	b.n	80091b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	0f1b      	lsrs	r3, r3, #28
 8009164:	2b09      	cmp	r3, #9
 8009166:	d80b      	bhi.n	8009180 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	0f1b      	lsrs	r3, r3, #28
 800916c:	b2da      	uxtb	r2, r3
 800916e:	7dfb      	ldrb	r3, [r7, #23]
 8009170:	005b      	lsls	r3, r3, #1
 8009172:	4619      	mov	r1, r3
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	440b      	add	r3, r1
 8009178:	3230      	adds	r2, #48	; 0x30
 800917a:	b2d2      	uxtb	r2, r2
 800917c:	701a      	strb	r2, [r3, #0]
 800917e:	e00a      	b.n	8009196 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	0f1b      	lsrs	r3, r3, #28
 8009184:	b2da      	uxtb	r2, r3
 8009186:	7dfb      	ldrb	r3, [r7, #23]
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	4619      	mov	r1, r3
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	440b      	add	r3, r1
 8009190:	3237      	adds	r2, #55	; 0x37
 8009192:	b2d2      	uxtb	r2, r2
 8009194:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	011b      	lsls	r3, r3, #4
 800919a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800919c:	7dfb      	ldrb	r3, [r7, #23]
 800919e:	005b      	lsls	r3, r3, #1
 80091a0:	3301      	adds	r3, #1
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	4413      	add	r3, r2
 80091a6:	2200      	movs	r2, #0
 80091a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091aa:	7dfb      	ldrb	r3, [r7, #23]
 80091ac:	3301      	adds	r3, #1
 80091ae:	75fb      	strb	r3, [r7, #23]
 80091b0:	7dfa      	ldrb	r2, [r7, #23]
 80091b2:	79fb      	ldrb	r3, [r7, #7]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d3d3      	bcc.n	8009160 <IntToUnicode+0x18>
  }
}
 80091b8:	bf00      	nop
 80091ba:	bf00      	nop
 80091bc:	371c      	adds	r7, #28
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
	...

080091c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b08a      	sub	sp, #40	; 0x28
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091d0:	f107 0314 	add.w	r3, r7, #20
 80091d4:	2200      	movs	r2, #0
 80091d6:	601a      	str	r2, [r3, #0]
 80091d8:	605a      	str	r2, [r3, #4]
 80091da:	609a      	str	r2, [r3, #8]
 80091dc:	60da      	str	r2, [r3, #12]
 80091de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091e8:	d13a      	bne.n	8009260 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091ea:	2300      	movs	r3, #0
 80091ec:	613b      	str	r3, [r7, #16]
 80091ee:	4b1e      	ldr	r3, [pc, #120]	; (8009268 <HAL_PCD_MspInit+0xa0>)
 80091f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f2:	4a1d      	ldr	r2, [pc, #116]	; (8009268 <HAL_PCD_MspInit+0xa0>)
 80091f4:	f043 0301 	orr.w	r3, r3, #1
 80091f8:	6313      	str	r3, [r2, #48]	; 0x30
 80091fa:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <HAL_PCD_MspInit+0xa0>)
 80091fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	613b      	str	r3, [r7, #16]
 8009204:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009206:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800920a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800920c:	2302      	movs	r3, #2
 800920e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009210:	2300      	movs	r3, #0
 8009212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009214:	2303      	movs	r3, #3
 8009216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009218:	230a      	movs	r3, #10
 800921a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800921c:	f107 0314 	add.w	r3, r7, #20
 8009220:	4619      	mov	r1, r3
 8009222:	4812      	ldr	r0, [pc, #72]	; (800926c <HAL_PCD_MspInit+0xa4>)
 8009224:	f7f7 fd2c 	bl	8000c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009228:	4b0f      	ldr	r3, [pc, #60]	; (8009268 <HAL_PCD_MspInit+0xa0>)
 800922a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800922c:	4a0e      	ldr	r2, [pc, #56]	; (8009268 <HAL_PCD_MspInit+0xa0>)
 800922e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009232:	6353      	str	r3, [r2, #52]	; 0x34
 8009234:	2300      	movs	r3, #0
 8009236:	60fb      	str	r3, [r7, #12]
 8009238:	4b0b      	ldr	r3, [pc, #44]	; (8009268 <HAL_PCD_MspInit+0xa0>)
 800923a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800923c:	4a0a      	ldr	r2, [pc, #40]	; (8009268 <HAL_PCD_MspInit+0xa0>)
 800923e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009242:	6453      	str	r3, [r2, #68]	; 0x44
 8009244:	4b08      	ldr	r3, [pc, #32]	; (8009268 <HAL_PCD_MspInit+0xa0>)
 8009246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800924c:	60fb      	str	r3, [r7, #12]
 800924e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009250:	2200      	movs	r2, #0
 8009252:	2105      	movs	r1, #5
 8009254:	2043      	movs	r0, #67	; 0x43
 8009256:	f7f7 fcdc 	bl	8000c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800925a:	2043      	movs	r0, #67	; 0x43
 800925c:	f7f7 fcf5 	bl	8000c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009260:	bf00      	nop
 8009262:	3728      	adds	r7, #40	; 0x28
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	40023800 	.word	0x40023800
 800926c:	40020000 	.word	0x40020000

08009270 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009284:	4619      	mov	r1, r3
 8009286:	4610      	mov	r0, r2
 8009288:	f7fb fe55 	bl	8004f36 <USBD_LL_SetupStage>
}
 800928c:	bf00      	nop
 800928e:	3708      	adds	r7, #8
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80092a6:	78fa      	ldrb	r2, [r7, #3]
 80092a8:	6879      	ldr	r1, [r7, #4]
 80092aa:	4613      	mov	r3, r2
 80092ac:	00db      	lsls	r3, r3, #3
 80092ae:	4413      	add	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	440b      	add	r3, r1
 80092b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	78fb      	ldrb	r3, [r7, #3]
 80092bc:	4619      	mov	r1, r3
 80092be:	f7fb fe8f 	bl	8004fe0 <USBD_LL_DataOutStage>
}
 80092c2:	bf00      	nop
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b082      	sub	sp, #8
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	460b      	mov	r3, r1
 80092d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80092dc:	78fa      	ldrb	r2, [r7, #3]
 80092de:	6879      	ldr	r1, [r7, #4]
 80092e0:	4613      	mov	r3, r2
 80092e2:	00db      	lsls	r3, r3, #3
 80092e4:	4413      	add	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	440b      	add	r3, r1
 80092ea:	334c      	adds	r3, #76	; 0x4c
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	78fb      	ldrb	r3, [r7, #3]
 80092f0:	4619      	mov	r1, r3
 80092f2:	f7fb ff28 	bl	8005146 <USBD_LL_DataInStage>
}
 80092f6:	bf00      	nop
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b082      	sub	sp, #8
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800930c:	4618      	mov	r0, r3
 800930e:	f7fc f85c 	bl	80053ca <USBD_LL_SOF>
}
 8009312:	bf00      	nop
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009322:	2301      	movs	r3, #1
 8009324:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d102      	bne.n	8009334 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800932e:	2300      	movs	r3, #0
 8009330:	73fb      	strb	r3, [r7, #15]
 8009332:	e008      	b.n	8009346 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	2b02      	cmp	r3, #2
 800933a:	d102      	bne.n	8009342 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800933c:	2301      	movs	r3, #1
 800933e:	73fb      	strb	r3, [r7, #15]
 8009340:	e001      	b.n	8009346 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009342:	f7f7 fa59 	bl	80007f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800934c:	7bfa      	ldrb	r2, [r7, #15]
 800934e:	4611      	mov	r1, r2
 8009350:	4618      	mov	r0, r3
 8009352:	f7fb fffc 	bl	800534e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800935c:	4618      	mov	r0, r3
 800935e:	f7fb ffa4 	bl	80052aa <USBD_LL_Reset>
}
 8009362:	bf00      	nop
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
	...

0800936c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800937a:	4618      	mov	r0, r3
 800937c:	f7fb fff7 	bl	800536e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	6812      	ldr	r2, [r2, #0]
 800938e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009392:	f043 0301 	orr.w	r3, r3, #1
 8009396:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a1b      	ldr	r3, [r3, #32]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d005      	beq.n	80093ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093a0:	4b04      	ldr	r3, [pc, #16]	; (80093b4 <HAL_PCD_SuspendCallback+0x48>)
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	4a03      	ldr	r2, [pc, #12]	; (80093b4 <HAL_PCD_SuspendCallback+0x48>)
 80093a6:	f043 0306 	orr.w	r3, r3, #6
 80093aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093ac:	bf00      	nop
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	e000ed00 	.word	0xe000ed00

080093b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fb ffe7 	bl	800539a <USBD_LL_Resume>
}
 80093cc:	bf00      	nop
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	460b      	mov	r3, r1
 80093de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093e6:	78fa      	ldrb	r2, [r7, #3]
 80093e8:	4611      	mov	r1, r2
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fc f83f 	bl	800546e <USBD_LL_IsoOUTIncomplete>
}
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	460b      	mov	r3, r1
 8009402:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800940a:	78fa      	ldrb	r2, [r7, #3]
 800940c:	4611      	mov	r1, r2
 800940e:	4618      	mov	r0, r3
 8009410:	f7fb fffb 	bl	800540a <USBD_LL_IsoINIncomplete>
}
 8009414:	bf00      	nop
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800942a:	4618      	mov	r0, r3
 800942c:	f7fc f851 	bl	80054d2 <USBD_LL_DevConnected>
}
 8009430:	bf00      	nop
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009446:	4618      	mov	r0, r3
 8009448:	f7fc f84e 	bl	80054e8 <USBD_LL_DevDisconnected>
}
 800944c:	bf00      	nop
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d13c      	bne.n	80094de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009464:	4a20      	ldr	r2, [pc, #128]	; (80094e8 <USBD_LL_Init+0x94>)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a1e      	ldr	r2, [pc, #120]	; (80094e8 <USBD_LL_Init+0x94>)
 8009470:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009474:	4b1c      	ldr	r3, [pc, #112]	; (80094e8 <USBD_LL_Init+0x94>)
 8009476:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800947a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800947c:	4b1a      	ldr	r3, [pc, #104]	; (80094e8 <USBD_LL_Init+0x94>)
 800947e:	2204      	movs	r2, #4
 8009480:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009482:	4b19      	ldr	r3, [pc, #100]	; (80094e8 <USBD_LL_Init+0x94>)
 8009484:	2202      	movs	r2, #2
 8009486:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009488:	4b17      	ldr	r3, [pc, #92]	; (80094e8 <USBD_LL_Init+0x94>)
 800948a:	2200      	movs	r2, #0
 800948c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800948e:	4b16      	ldr	r3, [pc, #88]	; (80094e8 <USBD_LL_Init+0x94>)
 8009490:	2202      	movs	r2, #2
 8009492:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009494:	4b14      	ldr	r3, [pc, #80]	; (80094e8 <USBD_LL_Init+0x94>)
 8009496:	2200      	movs	r2, #0
 8009498:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800949a:	4b13      	ldr	r3, [pc, #76]	; (80094e8 <USBD_LL_Init+0x94>)
 800949c:	2200      	movs	r2, #0
 800949e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80094a0:	4b11      	ldr	r3, [pc, #68]	; (80094e8 <USBD_LL_Init+0x94>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80094a6:	4b10      	ldr	r3, [pc, #64]	; (80094e8 <USBD_LL_Init+0x94>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80094ac:	4b0e      	ldr	r3, [pc, #56]	; (80094e8 <USBD_LL_Init+0x94>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80094b2:	480d      	ldr	r0, [pc, #52]	; (80094e8 <USBD_LL_Init+0x94>)
 80094b4:	f7f7 fd99 	bl	8000fea <HAL_PCD_Init>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80094be:	f7f7 f99b 	bl	80007f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80094c2:	2180      	movs	r1, #128	; 0x80
 80094c4:	4808      	ldr	r0, [pc, #32]	; (80094e8 <USBD_LL_Init+0x94>)
 80094c6:	f7f8 ffd8 	bl	800247a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80094ca:	2240      	movs	r2, #64	; 0x40
 80094cc:	2100      	movs	r1, #0
 80094ce:	4806      	ldr	r0, [pc, #24]	; (80094e8 <USBD_LL_Init+0x94>)
 80094d0:	f7f8 ff8c 	bl	80023ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80094d4:	2280      	movs	r2, #128	; 0x80
 80094d6:	2101      	movs	r1, #1
 80094d8:	4803      	ldr	r0, [pc, #12]	; (80094e8 <USBD_LL_Init+0x94>)
 80094da:	f7f8 ff87 	bl	80023ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	20004fec 	.word	0x20004fec

080094ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f4:	2300      	movs	r3, #0
 80094f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009502:	4618      	mov	r0, r3
 8009504:	f7f7 fe8e 	bl	8001224 <HAL_PCD_Start>
 8009508:	4603      	mov	r3, r0
 800950a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800950c:	7bfb      	ldrb	r3, [r7, #15]
 800950e:	4618      	mov	r0, r3
 8009510:	f000 f930 	bl	8009774 <USBD_Get_USB_Status>
 8009514:	4603      	mov	r3, r0
 8009516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009518:	7bbb      	ldrb	r3, [r7, #14]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b084      	sub	sp, #16
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	4608      	mov	r0, r1
 800952c:	4611      	mov	r1, r2
 800952e:	461a      	mov	r2, r3
 8009530:	4603      	mov	r3, r0
 8009532:	70fb      	strb	r3, [r7, #3]
 8009534:	460b      	mov	r3, r1
 8009536:	70bb      	strb	r3, [r7, #2]
 8009538:	4613      	mov	r3, r2
 800953a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800954a:	78bb      	ldrb	r3, [r7, #2]
 800954c:	883a      	ldrh	r2, [r7, #0]
 800954e:	78f9      	ldrb	r1, [r7, #3]
 8009550:	f7f8 fb5f 	bl	8001c12 <HAL_PCD_EP_Open>
 8009554:	4603      	mov	r3, r0
 8009556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009558:	7bfb      	ldrb	r3, [r7, #15]
 800955a:	4618      	mov	r0, r3
 800955c:	f000 f90a 	bl	8009774 <USBD_Get_USB_Status>
 8009560:	4603      	mov	r3, r0
 8009562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009564:	7bbb      	ldrb	r3, [r7, #14]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b084      	sub	sp, #16
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	460b      	mov	r3, r1
 8009578:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009588:	78fa      	ldrb	r2, [r7, #3]
 800958a:	4611      	mov	r1, r2
 800958c:	4618      	mov	r0, r3
 800958e:	f7f8 fba8 	bl	8001ce2 <HAL_PCD_EP_Close>
 8009592:	4603      	mov	r3, r0
 8009594:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009596:	7bfb      	ldrb	r3, [r7, #15]
 8009598:	4618      	mov	r0, r3
 800959a:	f000 f8eb 	bl	8009774 <USBD_Get_USB_Status>
 800959e:	4603      	mov	r3, r0
 80095a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095bc:	2300      	movs	r3, #0
 80095be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095c6:	78fa      	ldrb	r2, [r7, #3]
 80095c8:	4611      	mov	r1, r2
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7f8 fc68 	bl	8001ea0 <HAL_PCD_EP_SetStall>
 80095d0:	4603      	mov	r3, r0
 80095d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 f8cc 	bl	8009774 <USBD_Get_USB_Status>
 80095dc:	4603      	mov	r3, r0
 80095de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b084      	sub	sp, #16
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009604:	78fa      	ldrb	r2, [r7, #3]
 8009606:	4611      	mov	r1, r2
 8009608:	4618      	mov	r0, r3
 800960a:	f7f8 fcad 	bl	8001f68 <HAL_PCD_EP_ClrStall>
 800960e:	4603      	mov	r3, r0
 8009610:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	4618      	mov	r0, r3
 8009616:	f000 f8ad 	bl	8009774 <USBD_Get_USB_Status>
 800961a:	4603      	mov	r3, r0
 800961c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800961e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800963a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800963c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009640:	2b00      	cmp	r3, #0
 8009642:	da0b      	bge.n	800965c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009644:	78fb      	ldrb	r3, [r7, #3]
 8009646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800964a:	68f9      	ldr	r1, [r7, #12]
 800964c:	4613      	mov	r3, r2
 800964e:	00db      	lsls	r3, r3, #3
 8009650:	4413      	add	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	440b      	add	r3, r1
 8009656:	333e      	adds	r3, #62	; 0x3e
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	e00b      	b.n	8009674 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800965c:	78fb      	ldrb	r3, [r7, #3]
 800965e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009662:	68f9      	ldr	r1, [r7, #12]
 8009664:	4613      	mov	r3, r2
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	4413      	add	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	440b      	add	r3, r1
 800966e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009672:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009674:	4618      	mov	r0, r3
 8009676:	3714      	adds	r7, #20
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	460b      	mov	r3, r1
 800968a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800969a:	78fa      	ldrb	r2, [r7, #3]
 800969c:	4611      	mov	r1, r2
 800969e:	4618      	mov	r0, r3
 80096a0:	f7f8 fa92 	bl	8001bc8 <HAL_PCD_SetAddress>
 80096a4:	4603      	mov	r3, r0
 80096a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 f862 	bl	8009774 <USBD_Get_USB_Status>
 80096b0:	4603      	mov	r3, r0
 80096b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b086      	sub	sp, #24
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	60f8      	str	r0, [r7, #12]
 80096c6:	607a      	str	r2, [r7, #4]
 80096c8:	603b      	str	r3, [r7, #0]
 80096ca:	460b      	mov	r3, r1
 80096cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096ce:	2300      	movs	r3, #0
 80096d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80096dc:	7af9      	ldrb	r1, [r7, #11]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	f7f8 fb93 	bl	8001e0c <HAL_PCD_EP_Transmit>
 80096e6:	4603      	mov	r3, r0
 80096e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ea:	7dfb      	ldrb	r3, [r7, #23]
 80096ec:	4618      	mov	r0, r3
 80096ee:	f000 f841 	bl	8009774 <USBD_Get_USB_Status>
 80096f2:	4603      	mov	r3, r0
 80096f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3718      	adds	r7, #24
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	607a      	str	r2, [r7, #4]
 800970a:	603b      	str	r3, [r7, #0]
 800970c:	460b      	mov	r3, r1
 800970e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800971e:	7af9      	ldrb	r1, [r7, #11]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	f7f8 fb27 	bl	8001d76 <HAL_PCD_EP_Receive>
 8009728:	4603      	mov	r3, r0
 800972a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800972c:	7dfb      	ldrb	r3, [r7, #23]
 800972e:	4618      	mov	r0, r3
 8009730:	f000 f820 	bl	8009774 <USBD_Get_USB_Status>
 8009734:	4603      	mov	r3, r0
 8009736:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009738:	7dbb      	ldrb	r3, [r7, #22]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
	...

08009744 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800974c:	4b03      	ldr	r3, [pc, #12]	; (800975c <USBD_static_malloc+0x18>)
}
 800974e:	4618      	mov	r0, r3
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	200054f8 	.word	0x200054f8

08009760 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]

}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	4603      	mov	r3, r0
 800977c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009782:	79fb      	ldrb	r3, [r7, #7]
 8009784:	2b03      	cmp	r3, #3
 8009786:	d817      	bhi.n	80097b8 <USBD_Get_USB_Status+0x44>
 8009788:	a201      	add	r2, pc, #4	; (adr r2, 8009790 <USBD_Get_USB_Status+0x1c>)
 800978a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978e:	bf00      	nop
 8009790:	080097a1 	.word	0x080097a1
 8009794:	080097a7 	.word	0x080097a7
 8009798:	080097ad 	.word	0x080097ad
 800979c:	080097b3 	.word	0x080097b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	73fb      	strb	r3, [r7, #15]
    break;
 80097a4:	e00b      	b.n	80097be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097a6:	2303      	movs	r3, #3
 80097a8:	73fb      	strb	r3, [r7, #15]
    break;
 80097aa:	e008      	b.n	80097be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097ac:	2301      	movs	r3, #1
 80097ae:	73fb      	strb	r3, [r7, #15]
    break;
 80097b0:	e005      	b.n	80097be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097b2:	2303      	movs	r3, #3
 80097b4:	73fb      	strb	r3, [r7, #15]
    break;
 80097b6:	e002      	b.n	80097be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80097b8:	2303      	movs	r3, #3
 80097ba:	73fb      	strb	r3, [r7, #15]
    break;
 80097bc:	bf00      	nop
  }
  return usb_status;
 80097be:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3714      	adds	r7, #20
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <__libc_init_array>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	4d0d      	ldr	r5, [pc, #52]	; (8009804 <__libc_init_array+0x38>)
 80097d0:	4c0d      	ldr	r4, [pc, #52]	; (8009808 <__libc_init_array+0x3c>)
 80097d2:	1b64      	subs	r4, r4, r5
 80097d4:	10a4      	asrs	r4, r4, #2
 80097d6:	2600      	movs	r6, #0
 80097d8:	42a6      	cmp	r6, r4
 80097da:	d109      	bne.n	80097f0 <__libc_init_array+0x24>
 80097dc:	4d0b      	ldr	r5, [pc, #44]	; (800980c <__libc_init_array+0x40>)
 80097de:	4c0c      	ldr	r4, [pc, #48]	; (8009810 <__libc_init_array+0x44>)
 80097e0:	f000 f82e 	bl	8009840 <_init>
 80097e4:	1b64      	subs	r4, r4, r5
 80097e6:	10a4      	asrs	r4, r4, #2
 80097e8:	2600      	movs	r6, #0
 80097ea:	42a6      	cmp	r6, r4
 80097ec:	d105      	bne.n	80097fa <__libc_init_array+0x2e>
 80097ee:	bd70      	pop	{r4, r5, r6, pc}
 80097f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80097f4:	4798      	blx	r3
 80097f6:	3601      	adds	r6, #1
 80097f8:	e7ee      	b.n	80097d8 <__libc_init_array+0xc>
 80097fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80097fe:	4798      	blx	r3
 8009800:	3601      	adds	r6, #1
 8009802:	e7f2      	b.n	80097ea <__libc_init_array+0x1e>
 8009804:	08009944 	.word	0x08009944
 8009808:	08009944 	.word	0x08009944
 800980c:	08009944 	.word	0x08009944
 8009810:	08009948 	.word	0x08009948

08009814 <memcpy>:
 8009814:	440a      	add	r2, r1
 8009816:	4291      	cmp	r1, r2
 8009818:	f100 33ff 	add.w	r3, r0, #4294967295
 800981c:	d100      	bne.n	8009820 <memcpy+0xc>
 800981e:	4770      	bx	lr
 8009820:	b510      	push	{r4, lr}
 8009822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009826:	f803 4f01 	strb.w	r4, [r3, #1]!
 800982a:	4291      	cmp	r1, r2
 800982c:	d1f9      	bne.n	8009822 <memcpy+0xe>
 800982e:	bd10      	pop	{r4, pc}

08009830 <memset>:
 8009830:	4402      	add	r2, r0
 8009832:	4603      	mov	r3, r0
 8009834:	4293      	cmp	r3, r2
 8009836:	d100      	bne.n	800983a <memset+0xa>
 8009838:	4770      	bx	lr
 800983a:	f803 1b01 	strb.w	r1, [r3], #1
 800983e:	e7f9      	b.n	8009834 <memset+0x4>

08009840 <_init>:
 8009840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009842:	bf00      	nop
 8009844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009846:	bc08      	pop	{r3}
 8009848:	469e      	mov	lr, r3
 800984a:	4770      	bx	lr

0800984c <_fini>:
 800984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984e:	bf00      	nop
 8009850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009852:	bc08      	pop	{r3}
 8009854:	469e      	mov	lr, r3
 8009856:	4770      	bx	lr

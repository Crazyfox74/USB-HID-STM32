
LIS3DSH_USB_HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001199c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  08011b30  08011b30  00021b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080121a8  080121a8  000302d8  2**0
                  CONTENTS
  4 .ARM          00000008  080121a8  080121a8  000221a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080121b0  080121b0  000302d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080121b0  080121b0  000221b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080121b4  080121b4  000221b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  080121b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302d8  2**0
                  CONTENTS
 10 .bss          000067c0  200002d8  200002d8  000302d8  2**3
                  ALLOC
 11 ._user_heap_stack 00006000  20006a98  20006a98  000302d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025eb1  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005299  00000000  00000000  000561b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e98  00000000  00000000  0005b458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c90  00000000  00000000  0005d2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c61  00000000  00000000  0005ef80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023d5c  00000000  00000000  00086be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd75d  00000000  00000000  000aa93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018809a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000095e8  00000000  00000000  001880ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011b14 	.word	0x08011b14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	08011b14 	.word	0x08011b14

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	ulStatsTimerTicks=0;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <configureTimerForRunTimeStats+0x14>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 8000eb6:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <configureTimerForRunTimeStats+0x18>)
 8000eb8:	f004 fd36 	bl	8005928 <HAL_TIM_Base_Start_IT>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200002f4 	.word	0x200002f4
 8000ec4:	20000410 	.word	0x20000410

08000ec8 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
	return ulStatsTimerTicks;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <getRunTimeCounterValue+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	200002f4 	.word	0x200002f4

08000ee0 <Acc_Inin>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Acc_Inin(void){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0

	uint8_t Reg_ctrl_4=0x20;
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	71fb      	strb	r3, [r7, #7]
	uint8_t acc_set=0x57;
 8000eea:	2357      	movs	r3, #87	; 0x57
 8000eec:	71bb      	strb	r3, [r7, #6]
	uint8_t Reg_ctrl_5=0x24;
 8000eee:	2324      	movs	r3, #36	; 0x24
 8000ef0:	717b      	strb	r3, [r7, #5]
	uint8_t acc_reg=0x00;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	713b      	strb	r3, [r7, #4]

	uint8_t Reg_ctrl_3=0x23;
 8000ef6:	2323      	movs	r3, #35	; 0x23
 8000ef8:	70fb      	strb	r3, [r7, #3]
	uint8_t acc_int=0x88;
 8000efa:	2388      	movs	r3, #136	; 0x88
 8000efc:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2108      	movs	r1, #8
 8000f02:	4822      	ldr	r0, [pc, #136]	; (8000f8c <Acc_Inin+0xac>)
 8000f04:	f001 ff80 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, &Reg_ctrl_4, 1);
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4820      	ldr	r0, [pc, #128]	; (8000f90 <Acc_Inin+0xb0>)
 8000f10:	f003 ff8a 	bl	8004e28 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(&hspi1, &acc_set, 1);
 8000f14:	1dbb      	adds	r3, r7, #6
 8000f16:	2201      	movs	r2, #1
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481d      	ldr	r0, [pc, #116]	; (8000f90 <Acc_Inin+0xb0>)
 8000f1c:	f003 ff84 	bl	8004e28 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2108      	movs	r1, #8
 8000f24:	4819      	ldr	r0, [pc, #100]	; (8000f8c <Acc_Inin+0xac>)
 8000f26:	f001 ff6f 	bl	8002e08 <HAL_GPIO_WritePin>



    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	4817      	ldr	r0, [pc, #92]	; (8000f8c <Acc_Inin+0xac>)
 8000f30:	f001 ff6a 	bl	8002e08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi1, &Reg_ctrl_5, 1);
 8000f34:	1d7b      	adds	r3, r7, #5
 8000f36:	2201      	movs	r2, #1
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4815      	ldr	r0, [pc, #84]	; (8000f90 <Acc_Inin+0xb0>)
 8000f3c:	f003 ff74 	bl	8004e28 <HAL_SPI_Transmit_DMA>
    HAL_SPI_Transmit_DMA(&hspi1, &acc_reg, 1);
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2201      	movs	r2, #1
 8000f44:	4619      	mov	r1, r3
 8000f46:	4812      	ldr	r0, [pc, #72]	; (8000f90 <Acc_Inin+0xb0>)
 8000f48:	f003 ff6e 	bl	8004e28 <HAL_SPI_Transmit_DMA>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2108      	movs	r1, #8
 8000f50:	480e      	ldr	r0, [pc, #56]	; (8000f8c <Acc_Inin+0xac>)
 8000f52:	f001 ff59 	bl	8002e08 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2108      	movs	r1, #8
 8000f5a:	480c      	ldr	r0, [pc, #48]	; (8000f8c <Acc_Inin+0xac>)
 8000f5c:	f001 ff54 	bl	8002e08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi1, &Reg_ctrl_3, 1);
 8000f60:	1cfb      	adds	r3, r7, #3
 8000f62:	2201      	movs	r2, #1
 8000f64:	4619      	mov	r1, r3
 8000f66:	480a      	ldr	r0, [pc, #40]	; (8000f90 <Acc_Inin+0xb0>)
 8000f68:	f003 ff5e 	bl	8004e28 <HAL_SPI_Transmit_DMA>
    HAL_SPI_Transmit_DMA(&hspi1, &acc_int, 1);
 8000f6c:	1cbb      	adds	r3, r7, #2
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4619      	mov	r1, r3
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <Acc_Inin+0xb0>)
 8000f74:	f003 ff58 	bl	8004e28 <HAL_SPI_Transmit_DMA>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2108      	movs	r1, #8
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <Acc_Inin+0xac>)
 8000f7e:	f001 ff43 	bl	8002e08 <HAL_GPIO_WritePin>
//HAL_SPI_Transmit(&hspi1, &Reg_ctrl_5, 1, 100);
//HAL_SPI_Transmit(&hspi1, &acc_reg, 1, 100);
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
*/

}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	200002f8 	.word	0x200002f8

08000f94 <Filter_Kalman>:


double Filter_Kalman(double val) { //функция фильтрации
 8000f94:	b480      	push	{r7}
 8000f96:	b08b      	sub	sp, #44	; 0x2c
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	ed87 0b00 	vstr	d0, [r7]

	float varVolt = 0.3; // среднее отклонение (расчет в программе)
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <Filter_Kalman+0x50>)
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
	float varProcess = 0.2; // скорость реакции на изменение (подбирается вручную)
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <Filter_Kalman+0x54>)
 8000fa4:	623b      	str	r3, [r7, #32]
	float Pc = 0.0;
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
	float G = 0.0;
 8000fac:	f04f 0300 	mov.w	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
	float P = 1.0;
 8000fb2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000fb6:	617b      	str	r3, [r7, #20]
	float Xp = 0.0;
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
	float Zp = 0.0;
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
	float Xe = 0.0;
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
Zp = Xp;
Xe = G*(val-Zp)+Xp; // "фильтрованное" значение

return(Xe);
*/
	return(val);
 8000fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fce:	ec43 2b17 	vmov	d7, r2, r3
}
 8000fd2:	eeb0 0a47 	vmov.f32	s0, s14
 8000fd6:	eef0 0a67 	vmov.f32	s1, s15
 8000fda:	372c      	adds	r7, #44	; 0x2c
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	3e99999a 	.word	0x3e99999a
 8000fe8:	3e4ccccd 	.word	0x3e4ccccd

08000fec <LED_Proc>:

void LED_Proc(double angle_ax,double angle_ay){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	ed87 0b02 	vstr	d0, [r7, #8]
 8000ff6:	ed87 1b00 	vstr	d1, [r7]

	if(angle_ax>=10){
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	4b4e      	ldr	r3, [pc, #312]	; (8001138 <LED_Proc+0x14c>)
 8001000:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001004:	f7ff fd7e 	bl	8000b04 <__aeabi_dcmpge>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00b      	beq.n	8001026 <LED_Proc+0x3a>

		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001014:	4849      	ldr	r0, [pc, #292]	; (800113c <LED_Proc+0x150>)
 8001016:	f001 fef7 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001020:	4846      	ldr	r0, [pc, #280]	; (800113c <LED_Proc+0x150>)
 8001022:	f001 fef1 	bl	8002e08 <HAL_GPIO_WritePin>
	}
	if (angle_ax<=-10){
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	4b45      	ldr	r3, [pc, #276]	; (8001140 <LED_Proc+0x154>)
 800102c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001030:	f7ff fd5e 	bl	8000af0 <__aeabi_dcmple>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00b      	beq.n	8001052 <LED_Proc+0x66>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001040:	483e      	ldr	r0, [pc, #248]	; (800113c <LED_Proc+0x150>)
 8001042:	f001 fee1 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800104c:	483b      	ldr	r0, [pc, #236]	; (800113c <LED_Proc+0x150>)
 800104e:	f001 fedb 	bl	8002e08 <HAL_GPIO_WritePin>
	}


	if ((angle_ax>-10) && (angle_ax<10))
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <LED_Proc+0x154>)
 8001058:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800105c:	f7ff fd5c 	bl	8000b18 <__aeabi_dcmpgt>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d015      	beq.n	8001092 <LED_Proc+0xa6>
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	4b33      	ldr	r3, [pc, #204]	; (8001138 <LED_Proc+0x14c>)
 800106c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001070:	f7ff fd34 	bl	8000adc <__aeabi_dcmplt>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00b      	beq.n	8001092 <LED_Proc+0xa6>
	{
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001080:	482e      	ldr	r0, [pc, #184]	; (800113c <LED_Proc+0x150>)
 8001082:	f001 fec1 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800108c:	482b      	ldr	r0, [pc, #172]	; (800113c <LED_Proc+0x150>)
 800108e:	f001 febb 	bl	8002e08 <HAL_GPIO_WritePin>

	}

	if(angle_ay>=10){
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	4b28      	ldr	r3, [pc, #160]	; (8001138 <LED_Proc+0x14c>)
 8001098:	e9d7 0100 	ldrd	r0, r1, [r7]
 800109c:	f7ff fd32 	bl	8000b04 <__aeabi_dcmpge>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00b      	beq.n	80010be <LED_Proc+0xd2>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin,GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ac:	4823      	ldr	r0, [pc, #140]	; (800113c <LED_Proc+0x150>)
 80010ae:	f001 feab 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin,GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b8:	4820      	ldr	r0, [pc, #128]	; (800113c <LED_Proc+0x150>)
 80010ba:	f001 fea5 	bl	8002e08 <HAL_GPIO_WritePin>
	}
	if (angle_ay<=-10){
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <LED_Proc+0x154>)
 80010c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010c8:	f7ff fd12 	bl	8000af0 <__aeabi_dcmple>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <LED_Proc+0xfe>

		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin,GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d8:	4818      	ldr	r0, [pc, #96]	; (800113c <LED_Proc+0x150>)
 80010da:	f001 fe95 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin,GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e4:	4815      	ldr	r0, [pc, #84]	; (800113c <LED_Proc+0x150>)
 80010e6:	f001 fe8f 	bl	8002e08 <HAL_GPIO_WritePin>
	}


	if ((angle_ay>-10) && (angle_ay<10))
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <LED_Proc+0x154>)
 80010f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010f4:	f7ff fd10 	bl	8000b18 <__aeabi_dcmpgt>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d100      	bne.n	8001100 <LED_Proc+0x114>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin,GPIO_PIN_RESET);

	}

}
 80010fe:	e016      	b.n	800112e <LED_Proc+0x142>
	if ((angle_ay>-10) && (angle_ay<10))
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <LED_Proc+0x14c>)
 8001106:	e9d7 0100 	ldrd	r0, r1, [r7]
 800110a:	f7ff fce7 	bl	8000adc <__aeabi_dcmplt>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d100      	bne.n	8001116 <LED_Proc+0x12a>
}
 8001114:	e00b      	b.n	800112e <LED_Proc+0x142>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin,GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800111c:	4807      	ldr	r0, [pc, #28]	; (800113c <LED_Proc+0x150>)
 800111e:	f001 fe73 	bl	8002e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin,GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <LED_Proc+0x150>)
 800112a:	f001 fe6d 	bl	8002e08 <HAL_GPIO_WritePin>
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40240000 	.word	0x40240000
 800113c:	40020c00 	.word	0x40020c00
 8001140:	c0240000 	.word	0xc0240000

08001144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001148:	f001 f80a 	bl	8002160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114c:	f000 f880 	bl	8001250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001150:	f000 f9a4 	bl	800149c <MX_GPIO_Init>
  MX_DMA_Init();
 8001154:	f000 f97a 	bl	800144c <MX_DMA_Init>
  MX_SPI1_Init();
 8001158:	f000 f8e4 	bl	8001324 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800115c:	f000 f94c 	bl	80013f8 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8001160:	f000 f916 	bl	8001390 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Acc_Inin();
 8001164:	f7ff febc 	bl	8000ee0 <Acc_Inin>
  sprintf(test, "test of Accselerometr\r\n");
 8001168:	4923      	ldr	r1, [pc, #140]	; (80011f8 <main+0xb4>)
 800116a:	4824      	ldr	r0, [pc, #144]	; (80011fc <main+0xb8>)
 800116c:	f00d f97c 	bl	800e468 <siprintf>
*/
  //=============================================================================
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001170:	f008 fcc0 	bl	8009af4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex1 */
  Mutex1Handle = osMutexNew(&Mutex1_attributes);
 8001174:	4822      	ldr	r0, [pc, #136]	; (8001200 <main+0xbc>)
 8001176:	f008 fdb4 	bl	8009ce2 <osMutexNew>
 800117a:	4603      	mov	r3, r0
 800117c:	4a21      	ldr	r2, [pc, #132]	; (8001204 <main+0xc0>)
 800117e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of AccelSem */
  AccelSemHandle = osSemaphoreNew(1, 1, &AccelSem_attributes);
 8001180:	4a21      	ldr	r2, [pc, #132]	; (8001208 <main+0xc4>)
 8001182:	2101      	movs	r1, #1
 8001184:	2001      	movs	r0, #1
 8001186:	f008 feba 	bl	8009efe <osSemaphoreNew>
 800118a:	4603      	mov	r3, r0
 800118c:	4a1f      	ldr	r2, [pc, #124]	; (800120c <main+0xc8>)
 800118e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QUEUE_DATA */
  QUEUE_DATAHandle = osMessageQueueNew (2, sizeof(QUEUE_DATA), &QUEUE_DATA_attributes);
 8001190:	4a1f      	ldr	r2, [pc, #124]	; (8001210 <main+0xcc>)
 8001192:	2100      	movs	r1, #0
 8001194:	2002      	movs	r0, #2
 8001196:	f008 ff3b 	bl	800a010 <osMessageQueueNew>
 800119a:	4603      	mov	r3, r0
 800119c:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <main+0xd0>)
 800119e:	6013      	str	r3, [r2, #0]

  /* creation of QUEUE_UART */
  QUEUE_UARTHandle = osMessageQueueNew (2, sizeof(QUEUE_UART), &QUEUE_UART_attributes);
 80011a0:	4a1d      	ldr	r2, [pc, #116]	; (8001218 <main+0xd4>)
 80011a2:	2100      	movs	r1, #0
 80011a4:	2002      	movs	r0, #2
 80011a6:	f008 ff33 	bl	800a010 <osMessageQueueNew>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a1b      	ldr	r2, [pc, #108]	; (800121c <main+0xd8>)
 80011ae:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011b0:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <main+0xdc>)
 80011b2:	2100      	movs	r1, #0
 80011b4:	481b      	ldr	r0, [pc, #108]	; (8001224 <main+0xe0>)
 80011b6:	f008 fce7 	bl	8009b88 <osThreadNew>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <main+0xe4>)
 80011be:	6013      	str	r3, [r2, #0]

  /* creation of Read_XYZ */
  Read_XYZHandle = osThreadNew(StartRead_XYZ, NULL, &Read_XYZ_attributes);
 80011c0:	4a1a      	ldr	r2, [pc, #104]	; (800122c <main+0xe8>)
 80011c2:	2100      	movs	r1, #0
 80011c4:	481a      	ldr	r0, [pc, #104]	; (8001230 <main+0xec>)
 80011c6:	f008 fcdf 	bl	8009b88 <osThreadNew>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a19      	ldr	r2, [pc, #100]	; (8001234 <main+0xf0>)
 80011ce:	6013      	str	r3, [r2, #0]

  /* creation of Angle_Task */
  Angle_TaskHandle = osThreadNew(StartAngle_Task, NULL, &Angle_Task_attributes);
 80011d0:	4a19      	ldr	r2, [pc, #100]	; (8001238 <main+0xf4>)
 80011d2:	2100      	movs	r1, #0
 80011d4:	4819      	ldr	r0, [pc, #100]	; (800123c <main+0xf8>)
 80011d6:	f008 fcd7 	bl	8009b88 <osThreadNew>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <main+0xfc>)
 80011de:	6013      	str	r3, [r2, #0]

  /* creation of Task_test */
  Task_testHandle = osThreadNew(StartTask_test, NULL, &Task_test_attributes);
 80011e0:	4a18      	ldr	r2, [pc, #96]	; (8001244 <main+0x100>)
 80011e2:	2100      	movs	r1, #0
 80011e4:	4818      	ldr	r0, [pc, #96]	; (8001248 <main+0x104>)
 80011e6:	f008 fccf 	bl	8009b88 <osThreadNew>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a17      	ldr	r2, [pc, #92]	; (800124c <main+0x108>)
 80011ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011f0:	f008 fca4 	bl	8009b3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <main+0xb0>
 80011f6:	bf00      	nop
 80011f8:	08011b8c 	.word	0x08011b8c
 80011fc:	200015e8 	.word	0x200015e8
 8001200:	08011d1c 	.word	0x08011d1c
 8001204:	200015e0 	.word	0x200015e0
 8001208:	08011d2c 	.word	0x08011d2c
 800120c:	200015e4 	.word	0x200015e4
 8001210:	08011cec 	.word	0x08011cec
 8001214:	200015d8 	.word	0x200015d8
 8001218:	08011d04 	.word	0x08011d04
 800121c:	200015dc 	.word	0x200015dc
 8001220:	08011c5c 	.word	0x08011c5c
 8001224:	080015b1 	.word	0x080015b1
 8001228:	2000049c 	.word	0x2000049c
 800122c:	08011c80 	.word	0x08011c80
 8001230:	080015c5 	.word	0x080015c5
 8001234:	200004a0 	.word	0x200004a0
 8001238:	08011ca4 	.word	0x08011ca4
 800123c:	08001771 	.word	0x08001771
 8001240:	20000908 	.word	0x20000908
 8001244:	08011cc8 	.word	0x08011cc8
 8001248:	08001a09 	.word	0x08001a09
 800124c:	20000d70 	.word	0x20000d70

08001250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b094      	sub	sp, #80	; 0x50
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0320 	add.w	r3, r7, #32
 800125a:	2230      	movs	r2, #48	; 0x30
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f00c fc5c 	bl	800db1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	4b28      	ldr	r3, [pc, #160]	; (800131c <SystemClock_Config+0xcc>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	4a27      	ldr	r2, [pc, #156]	; (800131c <SystemClock_Config+0xcc>)
 800127e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001282:	6413      	str	r3, [r2, #64]	; 0x40
 8001284:	4b25      	ldr	r3, [pc, #148]	; (800131c <SystemClock_Config+0xcc>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	4b22      	ldr	r3, [pc, #136]	; (8001320 <SystemClock_Config+0xd0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a21      	ldr	r2, [pc, #132]	; (8001320 <SystemClock_Config+0xd0>)
 800129a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <SystemClock_Config+0xd0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ac:	2301      	movs	r3, #1
 80012ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b6:	2302      	movs	r3, #2
 80012b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012c0:	2304      	movs	r3, #4
 80012c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012c4:	23a8      	movs	r3, #168	; 0xa8
 80012c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c8:	2302      	movs	r3, #2
 80012ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012cc:	2307      	movs	r3, #7
 80012ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	4618      	mov	r0, r3
 80012d6:	f003 f853 	bl	8004380 <HAL_RCC_OscConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012e0:	f000 fc16 	bl	8001b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e4:	230f      	movs	r3, #15
 80012e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e8:	2302      	movs	r3, #2
 80012ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2105      	movs	r1, #5
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fab4 	bl	8004870 <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800130e:	f000 fbff 	bl	8001b10 <Error_Handler>
  }
}
 8001312:	bf00      	nop
 8001314:	3750      	adds	r7, #80	; 0x50
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40007000 	.word	0x40007000

08001324 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_SPI1_Init+0x64>)
 800132a:	4a18      	ldr	r2, [pc, #96]	; (800138c <MX_SPI1_Init+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_SPI1_Init+0x64>)
 8001330:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001334:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_SPI1_Init+0x64>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_SPI1_Init+0x64>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_SPI1_Init+0x64>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_SPI1_Init+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_SPI1_Init+0x64>)
 8001350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001354:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_SPI1_Init+0x64>)
 8001358:	2200      	movs	r2, #0
 800135a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <MX_SPI1_Init+0x64>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_SPI1_Init+0x64>)
 8001364:	2200      	movs	r2, #0
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <MX_SPI1_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_SPI1_Init+0x64>)
 8001370:	220a      	movs	r2, #10
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_SPI1_Init+0x64>)
 8001376:	f003 fccd 	bl	8004d14 <HAL_SPI_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001380:	f000 fbc6 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200002f8 	.word	0x200002f8
 800138c:	40013000 	.word	0x40013000

08001390 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_TIM7_Init+0x60>)
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <MX_TIM7_Init+0x64>)
 80013a2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <MX_TIM7_Init+0x60>)
 80013a6:	220f      	movs	r2, #15
 80013a8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_TIM7_Init+0x60>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_TIM7_Init+0x60>)
 80013b2:	2263      	movs	r2, #99	; 0x63
 80013b4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_TIM7_Init+0x60>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <MX_TIM7_Init+0x60>)
 80013be:	f004 fa63 	bl	8005888 <HAL_TIM_Base_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80013c8:	f000 fba2 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013cc:	2300      	movs	r3, #0
 80013ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_TIM7_Init+0x60>)
 80013da:	f004 fce5 	bl	8005da8 <HAL_TIMEx_MasterConfigSynchronization>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80013e4:	f000 fb94 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000410 	.word	0x20000410
 80013f4:	40001400 	.word	0x40001400

080013f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <MX_USART2_UART_Init+0x50>)
 8001400:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001408:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001430:	f004 fd4a 	bl	8005ec8 <HAL_UART_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800143a:	f000 fb69 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000458 	.word	0x20000458
 8001448:	40004400 	.word	0x40004400

0800144c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_DMA_Init+0x4c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <MX_DMA_Init+0x4c>)
 800145c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <MX_DMA_Init+0x4c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2105      	movs	r1, #5
 8001472:	2038      	movs	r0, #56	; 0x38
 8001474:	f000 ff92 	bl	800239c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001478:	2038      	movs	r0, #56	; 0x38
 800147a:	f000 ffab 	bl	80023d4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2105      	movs	r1, #5
 8001482:	203b      	movs	r0, #59	; 0x3b
 8001484:	f000 ff8a 	bl	800239c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001488:	203b      	movs	r0, #59	; 0x3b
 800148a:	f000 ffa3 	bl	80023d4 <HAL_NVIC_EnableIRQ>

}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b3b      	ldr	r3, [pc, #236]	; (80015a4 <MX_GPIO_Init+0x108>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a3a      	ldr	r2, [pc, #232]	; (80015a4 <MX_GPIO_Init+0x108>)
 80014bc:	f043 0310 	orr.w	r3, r3, #16
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <MX_GPIO_Init+0x108>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0310 	and.w	r3, r3, #16
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <MX_GPIO_Init+0x108>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a33      	ldr	r2, [pc, #204]	; (80015a4 <MX_GPIO_Init+0x108>)
 80014d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <MX_GPIO_Init+0x108>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <MX_GPIO_Init+0x108>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a2c      	ldr	r2, [pc, #176]	; (80015a4 <MX_GPIO_Init+0x108>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <MX_GPIO_Init+0x108>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <MX_GPIO_Init+0x108>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a25      	ldr	r2, [pc, #148]	; (80015a4 <MX_GPIO_Init+0x108>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <MX_GPIO_Init+0x108>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port, CS_LIS3DSH_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2108      	movs	r1, #8
 8001526:	4820      	ldr	r0, [pc, #128]	; (80015a8 <MX_GPIO_Init+0x10c>)
 8001528:	f001 fc6e 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001532:	481e      	ldr	r0, [pc, #120]	; (80015ac <MX_GPIO_Init+0x110>)
 8001534:	f001 fc68 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_LIS3DSH_Pin */
  GPIO_InitStruct.Pin = CS_LIS3DSH_Pin;
 8001538:	2308      	movs	r3, #8
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_LIS3DSH_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	4816      	ldr	r0, [pc, #88]	; (80015a8 <MX_GPIO_Init+0x10c>)
 8001550:	f001 fabe 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8001554:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	480f      	ldr	r0, [pc, #60]	; (80015ac <MX_GPIO_Init+0x110>)
 800156e:	f001 faaf 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_Pin */
  GPIO_InitStruct.Pin = INT1_Pin;
 8001572:	2301      	movs	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001576:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT1_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4808      	ldr	r0, [pc, #32]	; (80015a8 <MX_GPIO_Init+0x10c>)
 8001588:	f001 faa2 	bl	8002ad0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2105      	movs	r1, #5
 8001590:	2006      	movs	r0, #6
 8001592:	f000 ff03 	bl	800239c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001596:	2006      	movs	r0, #6
 8001598:	f000 ff1c 	bl	80023d4 <HAL_NVIC_EnableIRQ>

}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	; 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40020c00 	.word	0x40020c00

080015b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80015b8:	f00b fdf0 	bl	800d19c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015bc:	2001      	movs	r0, #1
 80015be:	f008 fb75 	bl	8009cac <osDelay>
 80015c2:	e7fb      	b.n	80015bc <StartDefaultTask+0xc>

080015c4 <StartRead_XYZ>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRead_XYZ */
void StartRead_XYZ(void *argument)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRead_XYZ */
	//QUEUE_DATA XYZ;



	uint8_t X_read_L=XL_REG;
 80015cc:	2328      	movs	r3, #40	; 0x28
 80015ce:	75bb      	strb	r3, [r7, #22]
	uint8_t OUT_X_H;
	uint8_t OUT_X_L;

	uint8_t Y_read_L=YL_REG;
 80015d0:	232a      	movs	r3, #42	; 0x2a
 80015d2:	74fb      	strb	r3, [r7, #19]
	uint8_t OUT_Y_H;
	uint8_t OUT_Y_L;

	uint8_t Z_read_L=ZL_REG;
 80015d4:	232c      	movs	r3, #44	; 0x2c
 80015d6:	743b      	strb	r3, [r7, #16]
	uint8_t OUT_Z_H;
	uint8_t OUT_Z_L;

	uint8_t Tmp_read=OUT_T_REG;
 80015d8:	230c      	movs	r3, #12
 80015da:	75fb      	strb	r3, [r7, #23]
	int8_t Temp;


	uint8_t StatusReg = STATUS_REG;
 80015dc:	2327      	movs	r3, #39	; 0x27
 80015de:	737b      	strb	r3, [r7, #13]
  {

	 // xSemaphoreTake(AccelSemHandle, portMAX_DELAY);
	//  osSemaphoreAcquire(AccelSemHandle, 50);
//	  osSemaphoreRelease(AccelSemHandle);
	  osMutexAcquire(Mutex1Handle, osWaitForever);
 80015e0:	4b5f      	ldr	r3, [pc, #380]	; (8001760 <StartRead_XYZ+0x19c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	4618      	mov	r0, r3
 80015ea:	f008 fc00 	bl	8009dee <osMutexAcquire>


	 // taskENTER_CRITICAL();
	//		  {

	  StatusRegData=0x00;
 80015ee:	2300      	movs	r3, #0
 80015f0:	733b      	strb	r3, [r7, #12]
	  while(StatusRegData!=0x08){
 80015f2:	e021      	b.n	8001638 <StartRead_XYZ+0x74>

	    HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin , GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2108      	movs	r1, #8
 80015f8:	485a      	ldr	r0, [pc, #360]	; (8001764 <StartRead_XYZ+0x1a0>)
 80015fa:	f001 fc05 	bl	8002e08 <HAL_GPIO_WritePin>
	    StatusReg|=0x80;
 80015fe:	7b7b      	ldrb	r3, [r7, #13]
 8001600:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001604:	b2db      	uxtb	r3, r3
 8001606:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit_DMA(&hspi1, &StatusReg, 1);//(&hspi1, &X_read_L, 1, 100);
 8001608:	f107 030d 	add.w	r3, r7, #13
 800160c:	2201      	movs	r2, #1
 800160e:	4619      	mov	r1, r3
 8001610:	4855      	ldr	r0, [pc, #340]	; (8001768 <StartRead_XYZ+0x1a4>)
 8001612:	f003 fc09 	bl	8004e28 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Receive_DMA(&hspi1, &StatusRegData, 1);//(&hspi1, &OUT_X_L, 1, 100);
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	2201      	movs	r2, #1
 800161c:	4619      	mov	r1, r3
 800161e:	4852      	ldr	r0, [pc, #328]	; (8001768 <StartRead_XYZ+0x1a4>)
 8001620:	f003 fcb8 	bl	8004f94 <HAL_SPI_Receive_DMA>
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	2108      	movs	r1, #8
 8001628:	484e      	ldr	r0, [pc, #312]	; (8001764 <StartRead_XYZ+0x1a0>)
 800162a:	f001 fbed 	bl	8002e08 <HAL_GPIO_WritePin>

		StatusRegData&=0x08;
 800162e:	7b3b      	ldrb	r3, [r7, #12]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	b2db      	uxtb	r3, r3
 8001636:	733b      	strb	r3, [r7, #12]
	  while(StatusRegData!=0x08){
 8001638:	7b3b      	ldrb	r3, [r7, #12]
 800163a:	2b08      	cmp	r3, #8
 800163c:	d1da      	bne.n	80015f4 <StartRead_XYZ+0x30>
	  }

	    HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin , GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2108      	movs	r1, #8
 8001642:	4848      	ldr	r0, [pc, #288]	; (8001764 <StartRead_XYZ+0x1a0>)
 8001644:	f001 fbe0 	bl	8002e08 <HAL_GPIO_WritePin>
		X_read_L=0x80|X_read_L;
 8001648:	7dbb      	ldrb	r3, [r7, #22]
 800164a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800164e:	b2db      	uxtb	r3, r3
 8001650:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit_DMA(&hspi1, &X_read_L, 1);//(&hspi1, &X_read_L, 1, 100);
 8001652:	f107 0316 	add.w	r3, r7, #22
 8001656:	2201      	movs	r2, #1
 8001658:	4619      	mov	r1, r3
 800165a:	4843      	ldr	r0, [pc, #268]	; (8001768 <StartRead_XYZ+0x1a4>)
 800165c:	f003 fbe4 	bl	8004e28 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Receive_DMA(&hspi1, &OUT_X_L, 1);//(&hspi1, &OUT_X_L, 1, 100);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2201      	movs	r2, #1
 8001666:	4619      	mov	r1, r3
 8001668:	483f      	ldr	r0, [pc, #252]	; (8001768 <StartRead_XYZ+0x1a4>)
 800166a:	f003 fc93 	bl	8004f94 <HAL_SPI_Receive_DMA>
	//	HAL_SPI_TransmitReceive_DMA(&hspi1, &X_read_L, &OUT_X_L, 1);
		//HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
		//X_read_H=0x80|X_read_H;
		//HAL_SPI_Transmit_DMA(&hspi1, &X_read_H, 1);//(&hspi1, &X_read_H, 1, 100);
		HAL_SPI_Receive_DMA(&hspi1, &OUT_X_H, 1);//(&hspi1, &OUT_X_H, 1, 100);
 800166e:	f107 0315 	add.w	r3, r7, #21
 8001672:	2201      	movs	r2, #1
 8001674:	4619      	mov	r1, r3
 8001676:	483c      	ldr	r0, [pc, #240]	; (8001768 <StartRead_XYZ+0x1a4>)
 8001678:	f003 fc8c 	bl	8004f94 <HAL_SPI_Receive_DMA>
	//	HAL_SPI_TransmitReceive_DMA(&hspi1, &X_read_H, &OUT_X_H, 1);
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	2108      	movs	r1, #8
 8001680:	4838      	ldr	r0, [pc, #224]	; (8001764 <StartRead_XYZ+0x1a0>)
 8001682:	f001 fbc1 	bl	8002e08 <HAL_GPIO_WritePin>
	//	XYZ.X_16bit=((OUT_X_H<<8)|(OUT_X_L));

		accel.X_16bit=((OUT_X_H<<8)|(OUT_X_L));
 8001686:	7d7b      	ldrb	r3, [r7, #21]
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	b21a      	sxth	r2, r3
 800168c:	7d3b      	ldrb	r3, [r7, #20]
 800168e:	b21b      	sxth	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	b21a      	sxth	r2, r3
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <StartRead_XYZ+0x1a8>)
 8001696:	801a      	strh	r2, [r3, #0]



		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	2108      	movs	r1, #8
 800169c:	4831      	ldr	r0, [pc, #196]	; (8001764 <StartRead_XYZ+0x1a0>)
 800169e:	f001 fbb3 	bl	8002e08 <HAL_GPIO_WritePin>
		Y_read_L=0x80|Y_read_L;
 80016a2:	7cfb      	ldrb	r3, [r7, #19]
 80016a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	74fb      	strb	r3, [r7, #19]
		HAL_SPI_Transmit_DMA(&hspi1, &Y_read_L, 1); //(&hspi1, &Y_read_L, 1, 100);
 80016ac:	f107 0313 	add.w	r3, r7, #19
 80016b0:	2201      	movs	r2, #1
 80016b2:	4619      	mov	r1, r3
 80016b4:	482c      	ldr	r0, [pc, #176]	; (8001768 <StartRead_XYZ+0x1a4>)
 80016b6:	f003 fbb7 	bl	8004e28 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Receive_DMA(&hspi1, &OUT_Y_L, 1); //(&hspi1, &OUT_Y_L, 1, 100);
 80016ba:	f107 0311 	add.w	r3, r7, #17
 80016be:	2201      	movs	r2, #1
 80016c0:	4619      	mov	r1, r3
 80016c2:	4829      	ldr	r0, [pc, #164]	; (8001768 <StartRead_XYZ+0x1a4>)
 80016c4:	f003 fc66 	bl	8004f94 <HAL_SPI_Receive_DMA>
	//	HAL_SPI_TransmitReceive_DMA(&hspi1, &Y_read_L, &OUT_Y_L, 1);
		//HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
		//Y_read_H=0x80|Y_read_H;
		//HAL_SPI_Transmit_DMA(&hspi1, &Y_read_H, 1); //(&hspi1, &Y_read_H, 1, 100);
		HAL_SPI_Receive_DMA(&hspi1, &OUT_Y_H, 1); //(&hspi1, &OUT_Y_H, 1, 100);
 80016c8:	f107 0312 	add.w	r3, r7, #18
 80016cc:	2201      	movs	r2, #1
 80016ce:	4619      	mov	r1, r3
 80016d0:	4825      	ldr	r0, [pc, #148]	; (8001768 <StartRead_XYZ+0x1a4>)
 80016d2:	f003 fc5f 	bl	8004f94 <HAL_SPI_Receive_DMA>
	//	HAL_SPI_TransmitReceive_DMA(&hspi1, &Y_read_H, &OUT_Y_H, 1);
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
 80016d6:	2201      	movs	r2, #1
 80016d8:	2108      	movs	r1, #8
 80016da:	4822      	ldr	r0, [pc, #136]	; (8001764 <StartRead_XYZ+0x1a0>)
 80016dc:	f001 fb94 	bl	8002e08 <HAL_GPIO_WritePin>
	//	XYZ.Y_16bit=((OUT_Y_H<<8)|(OUT_Y_L));

		accel.Y_16bit=((OUT_Y_H<<8)|(OUT_Y_L));
 80016e0:	7cbb      	ldrb	r3, [r7, #18]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	7c7b      	ldrb	r3, [r7, #17]
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b21a      	sxth	r2, r3
 80016ee:	4b1f      	ldr	r3, [pc, #124]	; (800176c <StartRead_XYZ+0x1a8>)
 80016f0:	805a      	strh	r2, [r3, #2]

		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2108      	movs	r1, #8
 80016f6:	481b      	ldr	r0, [pc, #108]	; (8001764 <StartRead_XYZ+0x1a0>)
 80016f8:	f001 fb86 	bl	8002e08 <HAL_GPIO_WritePin>
		Z_read_L=0x80|Z_read_L;
 80016fc:	7c3b      	ldrb	r3, [r7, #16]
 80016fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001702:	b2db      	uxtb	r3, r3
 8001704:	743b      	strb	r3, [r7, #16]
		HAL_SPI_Transmit_DMA(&hspi1, &Z_read_L, 1); //(&hspi1, &Z_read_L, 1, 100);
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	2201      	movs	r2, #1
 800170c:	4619      	mov	r1, r3
 800170e:	4816      	ldr	r0, [pc, #88]	; (8001768 <StartRead_XYZ+0x1a4>)
 8001710:	f003 fb8a 	bl	8004e28 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Receive_DMA(&hspi1, &OUT_Z_L, 1); //(&hspi1, &OUT_Z_L, 1, 100);
 8001714:	f107 030e 	add.w	r3, r7, #14
 8001718:	2201      	movs	r2, #1
 800171a:	4619      	mov	r1, r3
 800171c:	4812      	ldr	r0, [pc, #72]	; (8001768 <StartRead_XYZ+0x1a4>)
 800171e:	f003 fc39 	bl	8004f94 <HAL_SPI_Receive_DMA>
	//	HAL_SPI_TransmitReceive_DMA(&hspi1, &Z_read_L, &OUT_Z_L, 1);
		//HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
		//Z_read_H=0x80|Z_read_H;
		//HAL_SPI_Transmit_DMA(&hspi1, &Z_read_H, 1); //(&hspi1, &Z_read_H, 1, 100);
		HAL_SPI_Receive_DMA(&hspi1, &OUT_Z_H, 1); //(&hspi1, &OUT_Z_H, 1, 100);
 8001722:	f107 030f 	add.w	r3, r7, #15
 8001726:	2201      	movs	r2, #1
 8001728:	4619      	mov	r1, r3
 800172a:	480f      	ldr	r0, [pc, #60]	; (8001768 <StartRead_XYZ+0x1a4>)
 800172c:	f003 fc32 	bl	8004f94 <HAL_SPI_Receive_DMA>
	//	HAL_SPI_TransmitReceive_DMA(&hspi1, &Z_read_H, &OUT_Z_H, 1);
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
 8001730:	2201      	movs	r2, #1
 8001732:	2108      	movs	r1, #8
 8001734:	480b      	ldr	r0, [pc, #44]	; (8001764 <StartRead_XYZ+0x1a0>)
 8001736:	f001 fb67 	bl	8002e08 <HAL_GPIO_WritePin>
	//	XYZ.Z_16bit=((OUT_Z_H<<8)|(OUT_Z_L));

		accel.Z_16bit=((OUT_Z_H<<8)|(OUT_Z_L));
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	b21a      	sxth	r2, r3
 8001740:	7bbb      	ldrb	r3, [r7, #14]
 8001742:	b21b      	sxth	r3, r3
 8001744:	4313      	orrs	r3, r2
 8001746:	b21a      	sxth	r2, r3
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <StartRead_XYZ+0x1a8>)
 800174a:	809a      	strh	r2, [r3, #4]


	//	osMessageQueuePut(QUEUE_DATAHandle, &XYZ, 0, 1);


		  osMutexRelease(Mutex1Handle);
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <StartRead_XYZ+0x19c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f008 fb97 	bl	8009e84 <osMutexRelease>

    osDelay(10);
 8001756:	200a      	movs	r0, #10
 8001758:	f008 faa8 	bl	8009cac <osDelay>
	  osMutexAcquire(Mutex1Handle, osWaitForever);
 800175c:	e740      	b.n	80015e0 <StartRead_XYZ+0x1c>
 800175e:	bf00      	nop
 8001760:	200015e0 	.word	0x200015e0
 8001764:	40021000 	.word	0x40021000
 8001768:	200002f8 	.word	0x200002f8
 800176c:	20001608 	.word	0x20001608

08001770 <StartAngle_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAngle_Task */
void StartAngle_Task(void *argument)
{
 8001770:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001774:	b08c      	sub	sp, #48	; 0x30
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
	double X_1;
	double Y_1;
	double Z_1;


	double sens=SENS;
 800177a:	a39f      	add	r3, pc, #636	; (adr r3, 80019f8 <StartAngle_Task+0x288>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double TO_DEG=57.2958;
 8001784:	a39e      	add	r3, pc, #632	; (adr r3, 8001a00 <StartAngle_Task+0x290>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	e9c7 2308 	strd	r2, r3, [r7, #32]

  /* Infinite loop */
  for(;;)
  {
	  	  osMutexAcquire(Mutex1Handle, osWaitForever);
 800178e:	4b98      	ldr	r3, [pc, #608]	; (80019f0 <StartAngle_Task+0x280>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f04f 31ff 	mov.w	r1, #4294967295
 8001796:	4618      	mov	r0, r3
 8001798:	f008 fb29 	bl	8009dee <osMutexAcquire>



		  ///расчет коэффициентов для углов

		  accel.gx=(double)accel.X_16bit/sens;
 800179c:	4b95      	ldr	r3, [pc, #596]	; (80019f4 <StartAngle_Task+0x284>)
 800179e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe febe 	bl	8000524 <__aeabi_i2d>
 80017a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017ac:	f7ff f84e 	bl	800084c <__aeabi_ddiv>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	498f      	ldr	r1, [pc, #572]	; (80019f4 <StartAngle_Task+0x284>)
 80017b6:	e9c1 2308 	strd	r2, r3, [r1, #32]
		  accel.gy=(double)accel.Y_16bit/sens;
 80017ba:	4b8e      	ldr	r3, [pc, #568]	; (80019f4 <StartAngle_Task+0x284>)
 80017bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe feaf 	bl	8000524 <__aeabi_i2d>
 80017c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017ca:	f7ff f83f 	bl	800084c <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4988      	ldr	r1, [pc, #544]	; (80019f4 <StartAngle_Task+0x284>)
 80017d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		  accel.gz=(double)accel.Z_16bit/sens;
 80017d8:	4b86      	ldr	r3, [pc, #536]	; (80019f4 <StartAngle_Task+0x284>)
 80017da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fea0 	bl	8000524 <__aeabi_i2d>
 80017e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017e8:	f7ff f830 	bl	800084c <__aeabi_ddiv>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4980      	ldr	r1, [pc, #512]	; (80019f4 <StartAngle_Task+0x284>)
 80017f2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

		  ///расчет угла через арктангенс с умножением на константу для перевода из радианы в градусы



		  X_1=TO_DEG*atan(accel.gx/(sqrt(pow(accel.gy,2)+pow(accel.gz,2))));
 80017f6:	4b7f      	ldr	r3, [pc, #508]	; (80019f4 <StartAngle_Task+0x284>)
 80017f8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80017fc:	4b7d      	ldr	r3, [pc, #500]	; (80019f4 <StartAngle_Task+0x284>)
 80017fe:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001802:	ed9f 1b79 	vldr	d1, [pc, #484]	; 80019e8 <StartAngle_Task+0x278>
 8001806:	eeb0 0a47 	vmov.f32	s0, s14
 800180a:	eef0 0a67 	vmov.f32	s1, s15
 800180e:	f00f fa41 	bl	8010c94 <pow>
 8001812:	ec59 8b10 	vmov	r8, r9, d0
 8001816:	4b77      	ldr	r3, [pc, #476]	; (80019f4 <StartAngle_Task+0x284>)
 8001818:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800181c:	ed9f 1b72 	vldr	d1, [pc, #456]	; 80019e8 <StartAngle_Task+0x278>
 8001820:	eeb0 0a47 	vmov.f32	s0, s14
 8001824:	eef0 0a67 	vmov.f32	s1, s15
 8001828:	f00f fa34 	bl	8010c94 <pow>
 800182c:	ec53 2b10 	vmov	r2, r3, d0
 8001830:	4640      	mov	r0, r8
 8001832:	4649      	mov	r1, r9
 8001834:	f7fe fd2a 	bl	800028c <__adddf3>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	ec43 2b17 	vmov	d7, r2, r3
 8001840:	eeb0 0a47 	vmov.f32	s0, s14
 8001844:	eef0 0a67 	vmov.f32	s1, s15
 8001848:	f00f fa94 	bl	8010d74 <sqrt>
 800184c:	ec53 2b10 	vmov	r2, r3, d0
 8001850:	4620      	mov	r0, r4
 8001852:	4629      	mov	r1, r5
 8001854:	f7fe fffa 	bl	800084c <__aeabi_ddiv>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	ec43 2b17 	vmov	d7, r2, r3
 8001860:	eeb0 0a47 	vmov.f32	s0, s14
 8001864:	eef0 0a67 	vmov.f32	s1, s15
 8001868:	f00f f86a 	bl	8010940 <atan>
 800186c:	ec53 2b10 	vmov	r2, r3, d0
 8001870:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001874:	f7fe fec0 	bl	80005f8 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		  Y_1=TO_DEG*atan(accel.gy/(sqrt(pow(accel.gx,2)+pow(accel.gz,2))));
 8001880:	4b5c      	ldr	r3, [pc, #368]	; (80019f4 <StartAngle_Task+0x284>)
 8001882:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001886:	4b5b      	ldr	r3, [pc, #364]	; (80019f4 <StartAngle_Task+0x284>)
 8001888:	ed93 7b08 	vldr	d7, [r3, #32]
 800188c:	ed9f 1b56 	vldr	d1, [pc, #344]	; 80019e8 <StartAngle_Task+0x278>
 8001890:	eeb0 0a47 	vmov.f32	s0, s14
 8001894:	eef0 0a67 	vmov.f32	s1, s15
 8001898:	f00f f9fc 	bl	8010c94 <pow>
 800189c:	ec59 8b10 	vmov	r8, r9, d0
 80018a0:	4b54      	ldr	r3, [pc, #336]	; (80019f4 <StartAngle_Task+0x284>)
 80018a2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80018a6:	ed9f 1b50 	vldr	d1, [pc, #320]	; 80019e8 <StartAngle_Task+0x278>
 80018aa:	eeb0 0a47 	vmov.f32	s0, s14
 80018ae:	eef0 0a67 	vmov.f32	s1, s15
 80018b2:	f00f f9ef 	bl	8010c94 <pow>
 80018b6:	ec53 2b10 	vmov	r2, r3, d0
 80018ba:	4640      	mov	r0, r8
 80018bc:	4649      	mov	r1, r9
 80018be:	f7fe fce5 	bl	800028c <__adddf3>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	ec43 2b17 	vmov	d7, r2, r3
 80018ca:	eeb0 0a47 	vmov.f32	s0, s14
 80018ce:	eef0 0a67 	vmov.f32	s1, s15
 80018d2:	f00f fa4f 	bl	8010d74 <sqrt>
 80018d6:	ec53 2b10 	vmov	r2, r3, d0
 80018da:	4620      	mov	r0, r4
 80018dc:	4629      	mov	r1, r5
 80018de:	f7fe ffb5 	bl	800084c <__aeabi_ddiv>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	ec43 2b17 	vmov	d7, r2, r3
 80018ea:	eeb0 0a47 	vmov.f32	s0, s14
 80018ee:	eef0 0a67 	vmov.f32	s1, s15
 80018f2:	f00f f825 	bl	8010940 <atan>
 80018f6:	ec53 2b10 	vmov	r2, r3, d0
 80018fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018fe:	f7fe fe7b 	bl	80005f8 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	e9c7 2304 	strd	r2, r3, [r7, #16]
		 Z_1=TO_DEG*atan(accel.gz/(sqrt(pow(accel.gx,2)+pow(accel.gy,2))));
 800190a:	4b3a      	ldr	r3, [pc, #232]	; (80019f4 <StartAngle_Task+0x284>)
 800190c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001910:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <StartAngle_Task+0x284>)
 8001912:	ed93 7b08 	vldr	d7, [r3, #32]
 8001916:	ed9f 1b34 	vldr	d1, [pc, #208]	; 80019e8 <StartAngle_Task+0x278>
 800191a:	eeb0 0a47 	vmov.f32	s0, s14
 800191e:	eef0 0a67 	vmov.f32	s1, s15
 8001922:	f00f f9b7 	bl	8010c94 <pow>
 8001926:	ec59 8b10 	vmov	r8, r9, d0
 800192a:	4b32      	ldr	r3, [pc, #200]	; (80019f4 <StartAngle_Task+0x284>)
 800192c:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001930:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 80019e8 <StartAngle_Task+0x278>
 8001934:	eeb0 0a47 	vmov.f32	s0, s14
 8001938:	eef0 0a67 	vmov.f32	s1, s15
 800193c:	f00f f9aa 	bl	8010c94 <pow>
 8001940:	ec53 2b10 	vmov	r2, r3, d0
 8001944:	4640      	mov	r0, r8
 8001946:	4649      	mov	r1, r9
 8001948:	f7fe fca0 	bl	800028c <__adddf3>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	ec43 2b17 	vmov	d7, r2, r3
 8001954:	eeb0 0a47 	vmov.f32	s0, s14
 8001958:	eef0 0a67 	vmov.f32	s1, s15
 800195c:	f00f fa0a 	bl	8010d74 <sqrt>
 8001960:	ec53 2b10 	vmov	r2, r3, d0
 8001964:	4620      	mov	r0, r4
 8001966:	4629      	mov	r1, r5
 8001968:	f7fe ff70 	bl	800084c <__aeabi_ddiv>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	ec43 2b17 	vmov	d7, r2, r3
 8001974:	eeb0 0a47 	vmov.f32	s0, s14
 8001978:	eef0 0a67 	vmov.f32	s1, s15
 800197c:	f00e ffe0 	bl	8010940 <atan>
 8001980:	ec53 2b10 	vmov	r2, r3, d0
 8001984:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001988:	f7fe fe36 	bl	80005f8 <__aeabi_dmul>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	e9c7 2302 	strd	r2, r3, [r7, #8]

		  accel.angle_ax=Filter_Kalman(X_1);
 8001994:	ed97 0b06 	vldr	d0, [r7, #24]
 8001998:	f7ff fafc 	bl	8000f94 <Filter_Kalman>
 800199c:	eeb0 7a40 	vmov.f32	s14, s0
 80019a0:	eef0 7a60 	vmov.f32	s15, s1
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <StartAngle_Task+0x284>)
 80019a6:	ed83 7b02 	vstr	d7, [r3, #8]
		  accel.angle_ay=Filter_Kalman(Y_1);
 80019aa:	ed97 0b04 	vldr	d0, [r7, #16]
 80019ae:	f7ff faf1 	bl	8000f94 <Filter_Kalman>
 80019b2:	eeb0 7a40 	vmov.f32	s14, s0
 80019b6:	eef0 7a60 	vmov.f32	s15, s1
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <StartAngle_Task+0x284>)
 80019bc:	ed83 7b04 	vstr	d7, [r3, #16]
		  accel.angle_az=Filter_Kalman(Z_1);
 80019c0:	ed97 0b02 	vldr	d0, [r7, #8]
 80019c4:	f7ff fae6 	bl	8000f94 <Filter_Kalman>
 80019c8:	eeb0 7a40 	vmov.f32	s14, s0
 80019cc:	eef0 7a60 	vmov.f32	s15, s1
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <StartAngle_Task+0x284>)
 80019d2:	ed83 7b06 	vstr	d7, [r3, #24]
		  ///отправка в очередь


//	  osMessageQueuePut(QUEUE_UARTHandle, &Angle, 0, 1);

		  osMutexRelease(Mutex1Handle);
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <StartAngle_Task+0x280>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f008 fa52 	bl	8009e84 <osMutexRelease>


    osDelay(10);
 80019e0:	200a      	movs	r0, #10
 80019e2:	f008 f963 	bl	8009cac <osDelay>
	  	  osMutexAcquire(Mutex1Handle, osWaitForever);
 80019e6:	e6d2      	b.n	800178e <StartAngle_Task+0x1e>
 80019e8:	00000000 	.word	0x00000000
 80019ec:	40000000 	.word	0x40000000
 80019f0:	200015e0 	.word	0x200015e0
 80019f4:	20001608 	.word	0x20001608
 80019f8:	00000000 	.word	0x00000000
 80019fc:	40d07080 	.word	0x40d07080
 8001a00:	c63f1412 	.word	0xc63f1412
 8001a04:	404ca5dc 	.word	0x404ca5dc

08001a08 <StartTask_test>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_test */
void StartTask_test(void *argument)
{
 8001a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0a:	b0ab      	sub	sp, #172	; 0xac
 8001a0c:	af06      	add	r7, sp, #24
 8001a0e:	6078      	str	r0, [r7, #4]

	char dataUART[64];

	uint8_t USB_TX_Buffer[65];

	char rep=0x01;
 8001a10:	2301      	movs	r3, #1
 8001a12:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f


  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(Mutex1Handle, osWaitForever);
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <StartTask_test+0xcc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f008 f9e5 	bl	8009dee <osMutexAcquire>



//	  osMessageQueueGet(QUEUE_UARTHandle, &Angle, 0, 1);

	  if(LED_flag==SET){
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <StartTask_test+0xd0>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d010      	beq.n	8001a4e <StartTask_test+0x46>
	  LED_Proc(accel.angle_ax,accel.angle_ay);
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <StartTask_test+0xd4>)
 8001a2e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001a32:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <StartTask_test+0xd4>)
 8001a34:	ed93 6b04 	vldr	d6, [r3, #16]
 8001a38:	eeb0 1a46 	vmov.f32	s2, s12
 8001a3c:	eef0 1a66 	vmov.f32	s3, s13
 8001a40:	eeb0 0a47 	vmov.f32	s0, s14
 8001a44:	eef0 0a67 	vmov.f32	s1, s15
 8001a48:	f7ff fad0 	bl	8000fec <LED_Proc>
 8001a4c:	e017      	b.n	8001a7e <StartTask_test+0x76>
	  }
	  else{
		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin,GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a54:	4822      	ldr	r0, [pc, #136]	; (8001ae0 <StartTask_test+0xd8>)
 8001a56:	f001 f9d7 	bl	8002e08 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a60:	481f      	ldr	r0, [pc, #124]	; (8001ae0 <StartTask_test+0xd8>)
 8001a62:	f001 f9d1 	bl	8002e08 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin,GPIO_PIN_RESET);
 8001a66:	2200      	movs	r2, #0
 8001a68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a6c:	481c      	ldr	r0, [pc, #112]	; (8001ae0 <StartTask_test+0xd8>)
 8001a6e:	f001 f9cb 	bl	8002e08 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a78:	4819      	ldr	r0, [pc, #100]	; (8001ae0 <StartTask_test+0xd8>)
 8001a7a:	f001 f9c5 	bl	8002e08 <HAL_GPIO_WritePin>



	  ///вывод углов

	  snprintf((char*)&USB_TX_Buffer,sizeof(USB_TX_Buffer),"%c %.2f \t %.2f \t %.2f\r\n",rep, accel.angle_ax, accel.angle_ay, accel.angle_az);
 8001a7e:	f897 c08f 	ldrb.w	ip, [r7, #143]	; 0x8f
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <StartTask_test+0xd4>)
 8001a84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a88:	4914      	ldr	r1, [pc, #80]	; (8001adc <StartTask_test+0xd4>)
 8001a8a:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001a8e:	4c13      	ldr	r4, [pc, #76]	; (8001adc <StartTask_test+0xd4>)
 8001a90:	e9d4 4506 	ldrd	r4, r5, [r4, #24]
 8001a94:	f107 0608 	add.w	r6, r7, #8
 8001a98:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001a9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001aa0:	e9cd 2300 	strd	r2, r3, [sp]
 8001aa4:	4663      	mov	r3, ip
 8001aa6:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <StartTask_test+0xdc>)
 8001aa8:	2141      	movs	r1, #65	; 0x41
 8001aaa:	4630      	mov	r0, r6
 8001aac:	f00c fca8 	bl	800e400 <sniprintf>

	  USB_TX_Buffer[0]=0x01;  //ID report (=0x01 for input)
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	723b      	strb	r3, [r7, #8]
//	  snprintf((char*)&USB_TX_Buffer,sizeof(USB_TX_Buffer),"%.2f %.2f %.2f\r\n", accel.angle_ax, accel.angle_ay, accel.angle_az);
	//  snprintf(dataUART,sizeof(dataUART),"%.2f %.2f %.2f\r\n", Angle.angle_ax, Angle.angle_ay, Angle.angle_az);
	//  snprintf(dataUART,sizeof(dataUART),"1X_ax=%.2f 2Y_ay=%.2f 3Z_az=%.2f\r\n", Angle.angle_ax, Angle.angle_ay, Angle.angle_az);
	//  CDC_Transmit_FS((uint8_t*)&dataUART, strlen(dataUART));

		 USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,USB_TX_Buffer,sizeof(USB_TX_Buffer));
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	2241      	movs	r2, #65	; 0x41
 8001aba:	4619      	mov	r1, r3
 8001abc:	480a      	ldr	r0, [pc, #40]	; (8001ae8 <StartTask_test+0xe0>)
 8001abe:	f006 fb53 	bl	8008168 <USBD_CUSTOM_HID_SendReport>
	//  HAL_UART_Transmit(&huart2, (uint8_t*)&dataUART, strlen(dataUART), osWaitForever);

	  osMutexRelease(Mutex1Handle);
 8001ac2:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <StartTask_test+0xcc>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f008 f9dc 	bl	8009e84 <osMutexRelease>

    osDelay(10);
 8001acc:	200a      	movs	r0, #10
 8001ace:	f008 f8ed 	bl	8009cac <osDelay>
	  osMutexAcquire(Mutex1Handle, osWaitForever);
 8001ad2:	e7a0      	b.n	8001a16 <StartTask_test+0xe>
 8001ad4:	200015e0 	.word	0x200015e0
 8001ad8:	20001606 	.word	0x20001606
 8001adc:	20001608 	.word	0x20001608
 8001ae0:	40020c00 	.word	0x40020c00
 8001ae4:	08011ba4 	.word	0x08011ba4
 8001ae8:	20006044 	.word	0x20006044

08001aec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001afe:	f000 fb51 	bl	80021a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40001000 	.word	0x40001000

08001b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b14:	b672      	cpsid	i
}
 8001b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <Error_Handler+0x8>
	...

08001b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_MspInit+0x54>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <HAL_MspInit+0x54>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_MspInit+0x54>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_MspInit+0x54>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <HAL_MspInit+0x54>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_MspInit+0x54>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	210f      	movs	r1, #15
 8001b5e:	f06f 0001 	mvn.w	r0, #1
 8001b62:	f000 fc1b 	bl	800239c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800

08001b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a47      	ldr	r2, [pc, #284]	; (8001cb0 <HAL_SPI_MspInit+0x13c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	f040 8088 	bne.w	8001ca8 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	4b45      	ldr	r3, [pc, #276]	; (8001cb4 <HAL_SPI_MspInit+0x140>)
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba0:	4a44      	ldr	r2, [pc, #272]	; (8001cb4 <HAL_SPI_MspInit+0x140>)
 8001ba2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ba6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba8:	4b42      	ldr	r3, [pc, #264]	; (8001cb4 <HAL_SPI_MspInit+0x140>)
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	4b3e      	ldr	r3, [pc, #248]	; (8001cb4 <HAL_SPI_MspInit+0x140>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	4a3d      	ldr	r2, [pc, #244]	; (8001cb4 <HAL_SPI_MspInit+0x140>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc4:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <HAL_SPI_MspInit+0x140>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bd0:	23e0      	movs	r3, #224	; 0xe0
 8001bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001be0:	2305      	movs	r3, #5
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	4833      	ldr	r0, [pc, #204]	; (8001cb8 <HAL_SPI_MspInit+0x144>)
 8001bec:	f000 ff70 	bl	8002ad0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001bf0:	4b32      	ldr	r3, [pc, #200]	; (8001cbc <HAL_SPI_MspInit+0x148>)
 8001bf2:	4a33      	ldr	r2, [pc, #204]	; (8001cc0 <HAL_SPI_MspInit+0x14c>)
 8001bf4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001bf6:	4b31      	ldr	r3, [pc, #196]	; (8001cbc <HAL_SPI_MspInit+0x148>)
 8001bf8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001bfc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bfe:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <HAL_SPI_MspInit+0x148>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <HAL_SPI_MspInit+0x148>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c0a:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <HAL_SPI_MspInit+0x148>)
 8001c0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c10:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c12:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <HAL_SPI_MspInit+0x148>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c18:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <HAL_SPI_MspInit+0x148>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001c1e:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <HAL_SPI_MspInit+0x148>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_SPI_MspInit+0x148>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_SPI_MspInit+0x148>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001c30:	4822      	ldr	r0, [pc, #136]	; (8001cbc <HAL_SPI_MspInit+0x148>)
 8001c32:	f000 fbdd 	bl	80023f0 <HAL_DMA_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001c3c:	f7ff ff68 	bl	8001b10 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a1e      	ldr	r2, [pc, #120]	; (8001cbc <HAL_SPI_MspInit+0x148>)
 8001c44:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c46:	4a1d      	ldr	r2, [pc, #116]	; (8001cbc <HAL_SPI_MspInit+0x148>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <HAL_SPI_MspInit+0x150>)
 8001c4e:	4a1e      	ldr	r2, [pc, #120]	; (8001cc8 <HAL_SPI_MspInit+0x154>)
 8001c50:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <HAL_SPI_MspInit+0x150>)
 8001c54:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001c58:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <HAL_SPI_MspInit+0x150>)
 8001c5c:	2240      	movs	r2, #64	; 0x40
 8001c5e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <HAL_SPI_MspInit+0x150>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c66:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_SPI_MspInit+0x150>)
 8001c68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c6c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_SPI_MspInit+0x150>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c74:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <HAL_SPI_MspInit+0x150>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001c7a:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_SPI_MspInit+0x150>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c80:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <HAL_SPI_MspInit+0x150>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c86:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_SPI_MspInit+0x150>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001c8c:	480d      	ldr	r0, [pc, #52]	; (8001cc4 <HAL_SPI_MspInit+0x150>)
 8001c8e:	f000 fbaf 	bl	80023f0 <HAL_DMA_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001c98:	f7ff ff3a 	bl	8001b10 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a09      	ldr	r2, [pc, #36]	; (8001cc4 <HAL_SPI_MspInit+0x150>)
 8001ca0:	649a      	str	r2, [r3, #72]	; 0x48
 8001ca2:	4a08      	ldr	r2, [pc, #32]	; (8001cc4 <HAL_SPI_MspInit+0x150>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ca8:	bf00      	nop
 8001caa:	3728      	adds	r7, #40	; 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40013000 	.word	0x40013000
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	20000350 	.word	0x20000350
 8001cc0:	40026410 	.word	0x40026410
 8001cc4:	200003b0 	.word	0x200003b0
 8001cc8:	40026458 	.word	0x40026458

08001ccc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <HAL_TIM_Base_MspInit+0x48>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d115      	bne.n	8001d0a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_TIM_Base_MspInit+0x4c>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <HAL_TIM_Base_MspInit+0x4c>)
 8001ce8:	f043 0320 	orr.w	r3, r3, #32
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_TIM_Base_MspInit+0x4c>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2105      	movs	r1, #5
 8001cfe:	2037      	movs	r0, #55	; 0x37
 8001d00:	f000 fb4c 	bl	800239c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d04:	2037      	movs	r0, #55	; 0x37
 8001d06:	f000 fb65 	bl	80023d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40001400 	.word	0x40001400
 8001d18:	40023800 	.word	0x40023800

08001d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a19      	ldr	r2, [pc, #100]	; (8001da0 <HAL_UART_MspInit+0x84>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d12b      	bne.n	8001d96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <HAL_UART_MspInit+0x88>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <HAL_UART_MspInit+0x88>)
 8001d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <HAL_UART_MspInit+0x88>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_UART_MspInit+0x88>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a10      	ldr	r2, [pc, #64]	; (8001da4 <HAL_UART_MspInit+0x88>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_UART_MspInit+0x88>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d76:	230c      	movs	r3, #12
 8001d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d86:	2307      	movs	r3, #7
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4805      	ldr	r0, [pc, #20]	; (8001da8 <HAL_UART_MspInit+0x8c>)
 8001d92:	f000 fe9d 	bl	8002ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d96:	bf00      	nop
 8001d98:	3728      	adds	r7, #40	; 0x28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40004400 	.word	0x40004400
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020000 	.word	0x40020000

08001dac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08e      	sub	sp, #56	; 0x38
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	4b33      	ldr	r3, [pc, #204]	; (8001e90 <HAL_InitTick+0xe4>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	4a32      	ldr	r2, [pc, #200]	; (8001e90 <HAL_InitTick+0xe4>)
 8001dc6:	f043 0310 	orr.w	r3, r3, #16
 8001dca:	6413      	str	r3, [r2, #64]	; 0x40
 8001dcc:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <HAL_InitTick+0xe4>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dd8:	f107 0210 	add.w	r2, r7, #16
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 ff64 	bl	8004cb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d103      	bne.n	8001dfa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001df2:	f002 ff35 	bl	8004c60 <HAL_RCC_GetPCLK1Freq>
 8001df6:	6378      	str	r0, [r7, #52]	; 0x34
 8001df8:	e004      	b.n	8001e04 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001dfa:	f002 ff31 	bl	8004c60 <HAL_RCC_GetPCLK1Freq>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e06:	4a23      	ldr	r2, [pc, #140]	; (8001e94 <HAL_InitTick+0xe8>)
 8001e08:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0c:	0c9b      	lsrs	r3, r3, #18
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e12:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <HAL_InitTick+0xec>)
 8001e14:	4a21      	ldr	r2, [pc, #132]	; (8001e9c <HAL_InitTick+0xf0>)
 8001e16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <HAL_InitTick+0xec>)
 8001e1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e1e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e20:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <HAL_InitTick+0xec>)
 8001e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e24:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e26:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <HAL_InitTick+0xec>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <HAL_InitTick+0xec>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e32:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_InitTick+0xec>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001e38:	4817      	ldr	r0, [pc, #92]	; (8001e98 <HAL_InitTick+0xec>)
 8001e3a:	f003 fd25 	bl	8005888 <HAL_TIM_Base_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001e44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d11b      	bne.n	8001e84 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001e4c:	4812      	ldr	r0, [pc, #72]	; (8001e98 <HAL_InitTick+0xec>)
 8001e4e:	f003 fd6b 	bl	8005928 <HAL_TIM_Base_Start_IT>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001e58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d111      	bne.n	8001e84 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e60:	2036      	movs	r0, #54	; 0x36
 8001e62:	f000 fab7 	bl	80023d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b0f      	cmp	r3, #15
 8001e6a:	d808      	bhi.n	8001e7e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	2036      	movs	r0, #54	; 0x36
 8001e72:	f000 fa93 	bl	800239c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <HAL_InitTick+0xf4>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	e002      	b.n	8001e84 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3738      	adds	r7, #56	; 0x38
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	431bde83 	.word	0x431bde83
 8001e98:	20001688 	.word	0x20001688
 8001e9c:	40001000 	.word	0x40001000
 8001ea0:	20000004 	.word	0x20000004

08001ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <NMI_Handler+0x4>

08001eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <HardFault_Handler+0x4>

08001eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <MemManage_Handler+0x4>

08001eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <BusFault_Handler+0x4>

08001ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <UsageFault_Handler+0x4>

08001ec2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0

	*/

	//LED_flag=~LED_flag;
	//HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ed8:	4803      	ldr	r0, [pc, #12]	; (8001ee8 <EXTI0_IRQHandler+0x18>)
 8001eda:	f000 ffae 	bl	8002e3a <HAL_GPIO_TogglePin>
	//  osSemaphoreRelease(AccelSemHandle);

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_Pin);
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f000 ffc6 	bl	8002e70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

 // osSemaphoreAcquire(AccelSemHandle, 50);
  //xSemaphoreGiveFromISR(AccelSemHandle,100);
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40020c00 	.word	0x40020c00

08001eec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <TIM6_DAC_IRQHandler+0x10>)
 8001ef2:	f003 fd89 	bl	8005a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20001688 	.word	0x20001688

08001f00 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	ulStatsTimerTicks++;
 8001f04:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <TIM7_IRQHandler+0x18>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	4a03      	ldr	r2, [pc, #12]	; (8001f18 <TIM7_IRQHandler+0x18>)
 8001f0c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f0e:	4803      	ldr	r0, [pc, #12]	; (8001f1c <TIM7_IRQHandler+0x1c>)
 8001f10:	f003 fd7a 	bl	8005a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200002f4 	.word	0x200002f4
 8001f1c:	20000410 	.word	0x20000410

08001f20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <DMA2_Stream0_IRQHandler+0x10>)
 8001f26:	f000 fb69 	bl	80025fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000350 	.word	0x20000350

08001f34 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <DMA2_Stream3_IRQHandler+0x10>)
 8001f3a:	f000 fb5f 	bl	80025fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200003b0 	.word	0x200003b0

08001f48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <OTG_FS_IRQHandler+0x10>)
 8001f4e:	f001 f902 	bl	8003156 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20006520 	.word	0x20006520

08001f5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
	return 1;
 8001f60:	2301      	movs	r3, #1
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <_kill>:

int _kill(int pid, int sig)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f76:	f00b fd99 	bl	800daac <__errno>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2216      	movs	r2, #22
 8001f7e:	601a      	str	r2, [r3, #0]
	return -1;
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <_exit>:

void _exit (int status)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f94:	f04f 31ff 	mov.w	r1, #4294967295
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ffe7 	bl	8001f6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f9e:	e7fe      	b.n	8001f9e <_exit+0x12>

08001fa0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	e00a      	b.n	8001fc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fb2:	f3af 8000 	nop.w
 8001fb6:	4601      	mov	r1, r0
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	60ba      	str	r2, [r7, #8]
 8001fbe:	b2ca      	uxtb	r2, r1
 8001fc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	dbf0      	blt.n	8001fb2 <_read+0x12>
	}

return len;
 8001fd0:	687b      	ldr	r3, [r7, #4]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	e009      	b.n	8002000 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	60ba      	str	r2, [r7, #8]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	dbf1      	blt.n	8001fec <_write+0x12>
	}
	return len;
 8002008:	687b      	ldr	r3, [r7, #4]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <_close>:

int _close(int file)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
	return -1;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800203a:	605a      	str	r2, [r3, #4]
	return 0;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <_isatty>:

int _isatty(int file)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
	return 1;
 8002052:	2301      	movs	r3, #1
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
	return 0;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002084:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <_sbrk+0x5c>)
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <_sbrk+0x60>)
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002090:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <_sbrk+0x64>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <_sbrk+0x64>)
 800209a:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <_sbrk+0x68>)
 800209c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d207      	bcs.n	80020bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020ac:	f00b fcfe 	bl	800daac <__errno>
 80020b0:	4603      	mov	r3, r0
 80020b2:	220c      	movs	r2, #12
 80020b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ba:	e009      	b.n	80020d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <_sbrk+0x64>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020c2:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <_sbrk+0x64>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <_sbrk+0x64>)
 80020cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ce:	68fb      	ldr	r3, [r7, #12]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20020000 	.word	0x20020000
 80020dc:	00004000 	.word	0x00004000
 80020e0:	200016d0 	.word	0x200016d0
 80020e4:	20006a98 	.word	0x20006a98

080020e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <SystemInit+0x20>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f2:	4a05      	ldr	r2, [pc, #20]	; (8002108 <SystemInit+0x20>)
 80020f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800210c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002144 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002110:	480d      	ldr	r0, [pc, #52]	; (8002148 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002112:	490e      	ldr	r1, [pc, #56]	; (800214c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002114:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002118:	e002      	b.n	8002120 <LoopCopyDataInit>

0800211a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800211a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800211c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211e:	3304      	adds	r3, #4

08002120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002124:	d3f9      	bcc.n	800211a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002126:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002128:	4c0b      	ldr	r4, [pc, #44]	; (8002158 <LoopFillZerobss+0x26>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800212c:	e001      	b.n	8002132 <LoopFillZerobss>

0800212e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002130:	3204      	adds	r2, #4

08002132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002134:	d3fb      	bcc.n	800212e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002136:	f7ff ffd7 	bl	80020e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800213a:	f00b fcbd 	bl	800dab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800213e:	f7ff f801 	bl	8001144 <main>
  bx  lr    
 8002142:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002144:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800214c:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8002150:	080121b8 	.word	0x080121b8
  ldr r2, =_sbss
 8002154:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8002158:	20006a98 	.word	0x20006a98

0800215c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800215c:	e7fe      	b.n	800215c <ADC_IRQHandler>
	...

08002160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0d      	ldr	r2, [pc, #52]	; (80021a0 <HAL_Init+0x40>)
 800216a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_Init+0x40>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <HAL_Init+0x40>)
 8002176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800217a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a07      	ldr	r2, [pc, #28]	; (80021a0 <HAL_Init+0x40>)
 8002182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002188:	2003      	movs	r0, #3
 800218a:	f000 f8fc 	bl	8002386 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800218e:	200f      	movs	r0, #15
 8002190:	f7ff fe0c 	bl	8001dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002194:	f7ff fcc2 	bl	8001b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40023c00 	.word	0x40023c00

080021a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_IncTick+0x20>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_IncTick+0x24>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <HAL_IncTick+0x24>)
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000008 	.word	0x20000008
 80021c8:	200016d4 	.word	0x200016d4

080021cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return uwTick;
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <HAL_GetTick+0x14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	200016d4 	.word	0x200016d4

080021e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ec:	f7ff ffee 	bl	80021cc <HAL_GetTick>
 80021f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d005      	beq.n	800220a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_Delay+0x44>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4413      	add	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800220a:	bf00      	nop
 800220c:	f7ff ffde 	bl	80021cc <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	429a      	cmp	r2, r3
 800221a:	d8f7      	bhi.n	800220c <HAL_Delay+0x28>
  {
  }
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000008 	.word	0x20000008

0800222c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002248:	4013      	ands	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800225c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225e:	4a04      	ldr	r2, [pc, #16]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	60d3      	str	r3, [r2, #12]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <__NVIC_GetPriorityGrouping+0x18>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 0307 	and.w	r3, r3, #7
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db0b      	blt.n	80022ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	4907      	ldr	r1, [pc, #28]	; (80022c8 <__NVIC_EnableIRQ+0x38>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2001      	movs	r0, #1
 80022b2:	fa00 f202 	lsl.w	r2, r0, r2
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000e100 	.word	0xe000e100

080022cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	6039      	str	r1, [r7, #0]
 80022d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db0a      	blt.n	80022f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	490c      	ldr	r1, [pc, #48]	; (8002318 <__NVIC_SetPriority+0x4c>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	0112      	lsls	r2, r2, #4
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	440b      	add	r3, r1
 80022f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f4:	e00a      	b.n	800230c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4908      	ldr	r1, [pc, #32]	; (800231c <__NVIC_SetPriority+0x50>)
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	3b04      	subs	r3, #4
 8002304:	0112      	lsls	r2, r2, #4
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	440b      	add	r3, r1
 800230a:	761a      	strb	r2, [r3, #24]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000e100 	.word	0xe000e100
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002320:	b480      	push	{r7}
 8002322:	b089      	sub	sp, #36	; 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f1c3 0307 	rsb	r3, r3, #7
 800233a:	2b04      	cmp	r3, #4
 800233c:	bf28      	it	cs
 800233e:	2304      	movcs	r3, #4
 8002340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3304      	adds	r3, #4
 8002346:	2b06      	cmp	r3, #6
 8002348:	d902      	bls.n	8002350 <NVIC_EncodePriority+0x30>
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3b03      	subs	r3, #3
 800234e:	e000      	b.n	8002352 <NVIC_EncodePriority+0x32>
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	f04f 32ff 	mov.w	r2, #4294967295
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43da      	mvns	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	401a      	ands	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002368:	f04f 31ff 	mov.w	r1, #4294967295
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	43d9      	mvns	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	4313      	orrs	r3, r2
         );
}
 800237a:	4618      	mov	r0, r3
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ff4c 	bl	800222c <__NVIC_SetPriorityGrouping>
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ae:	f7ff ff61 	bl	8002274 <__NVIC_GetPriorityGrouping>
 80023b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68b9      	ldr	r1, [r7, #8]
 80023b8:	6978      	ldr	r0, [r7, #20]
 80023ba:	f7ff ffb1 	bl	8002320 <NVIC_EncodePriority>
 80023be:	4602      	mov	r2, r0
 80023c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c4:	4611      	mov	r1, r2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff80 	bl	80022cc <__NVIC_SetPriority>
}
 80023cc:	bf00      	nop
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff ff54 	bl	8002290 <__NVIC_EnableIRQ>
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff fee6 	bl	80021cc <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e099      	b.n	8002540 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0201 	bic.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800242c:	e00f      	b.n	800244e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800242e:	f7ff fecd 	bl	80021cc <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b05      	cmp	r3, #5
 800243a:	d908      	bls.n	800244e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2220      	movs	r2, #32
 8002440:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2203      	movs	r2, #3
 8002446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e078      	b.n	8002540 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1e8      	bne.n	800242e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4b38      	ldr	r3, [pc, #224]	; (8002548 <HAL_DMA_Init+0x158>)
 8002468:	4013      	ands	r3, r2
 800246a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800247a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d107      	bne.n	80024b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	4313      	orrs	r3, r2
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f023 0307 	bic.w	r3, r3, #7
 80024ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d117      	bne.n	8002512 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00e      	beq.n	8002512 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fa6f 	bl	80029d8 <DMA_CheckFifoParam>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2240      	movs	r2, #64	; 0x40
 8002504:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800250e:	2301      	movs	r3, #1
 8002510:	e016      	b.n	8002540 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fa26 	bl	800296c <DMA_CalcBaseAndBitshift>
 8002520:	4603      	mov	r3, r0
 8002522:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	223f      	movs	r2, #63	; 0x3f
 800252a:	409a      	lsls	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	f010803f 	.word	0xf010803f

0800254c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_DMA_Start_IT+0x26>
 800256e:	2302      	movs	r3, #2
 8002570:	e040      	b.n	80025f4 <HAL_DMA_Start_IT+0xa8>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d12f      	bne.n	80025e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f9b8 	bl	8002910 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	223f      	movs	r2, #63	; 0x3f
 80025a6:	409a      	lsls	r2, r3
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0216 	orr.w	r2, r2, #22
 80025ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0208 	orr.w	r2, r2, #8
 80025d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e005      	b.n	80025f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
 80025f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002608:	4b8e      	ldr	r3, [pc, #568]	; (8002844 <HAL_DMA_IRQHandler+0x248>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a8e      	ldr	r2, [pc, #568]	; (8002848 <HAL_DMA_IRQHandler+0x24c>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	0a9b      	lsrs	r3, r3, #10
 8002614:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	2208      	movs	r2, #8
 8002628:	409a      	lsls	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d01a      	beq.n	8002668 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d013      	beq.n	8002668 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0204 	bic.w	r2, r2, #4
 800264e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	2208      	movs	r2, #8
 8002656:	409a      	lsls	r2, r3
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	f043 0201 	orr.w	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266c:	2201      	movs	r2, #1
 800266e:	409a      	lsls	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d012      	beq.n	800269e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	2201      	movs	r2, #1
 800268c:	409a      	lsls	r2, r3
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	f043 0202 	orr.w	r2, r3, #2
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a2:	2204      	movs	r2, #4
 80026a4:	409a      	lsls	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d012      	beq.n	80026d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00b      	beq.n	80026d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c0:	2204      	movs	r2, #4
 80026c2:	409a      	lsls	r2, r3
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026cc:	f043 0204 	orr.w	r2, r3, #4
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	2210      	movs	r2, #16
 80026da:	409a      	lsls	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d043      	beq.n	800276c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d03c      	beq.n	800276c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f6:	2210      	movs	r2, #16
 80026f8:	409a      	lsls	r2, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d018      	beq.n	800273e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d108      	bne.n	800272c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d024      	beq.n	800276c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	4798      	blx	r3
 800272a:	e01f      	b.n	800276c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002730:	2b00      	cmp	r3, #0
 8002732:	d01b      	beq.n	800276c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
 800273c:	e016      	b.n	800276c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d107      	bne.n	800275c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0208 	bic.w	r2, r2, #8
 800275a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	2220      	movs	r2, #32
 8002772:	409a      	lsls	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4013      	ands	r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 808f 	beq.w	800289c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 8087 	beq.w	800289c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	2220      	movs	r2, #32
 8002794:	409a      	lsls	r2, r3
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b05      	cmp	r3, #5
 80027a4:	d136      	bne.n	8002814 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0216 	bic.w	r2, r2, #22
 80027b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695a      	ldr	r2, [r3, #20]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d103      	bne.n	80027d6 <HAL_DMA_IRQHandler+0x1da>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d007      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0208 	bic.w	r2, r2, #8
 80027e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	223f      	movs	r2, #63	; 0x3f
 80027ec:	409a      	lsls	r2, r3
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002806:	2b00      	cmp	r3, #0
 8002808:	d07e      	beq.n	8002908 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	4798      	blx	r3
        }
        return;
 8002812:	e079      	b.n	8002908 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d01d      	beq.n	800285e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10d      	bne.n	800284c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002834:	2b00      	cmp	r3, #0
 8002836:	d031      	beq.n	800289c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	4798      	blx	r3
 8002840:	e02c      	b.n	800289c <HAL_DMA_IRQHandler+0x2a0>
 8002842:	bf00      	nop
 8002844:	20000000 	.word	0x20000000
 8002848:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002850:	2b00      	cmp	r3, #0
 8002852:	d023      	beq.n	800289c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	4798      	blx	r3
 800285c:	e01e      	b.n	800289c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10f      	bne.n	800288c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0210 	bic.w	r2, r2, #16
 800287a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d032      	beq.n	800290a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d022      	beq.n	80028f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2205      	movs	r2, #5
 80028b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0201 	bic.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	3301      	adds	r3, #1
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d307      	bcc.n	80028e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f2      	bne.n	80028c8 <HAL_DMA_IRQHandler+0x2cc>
 80028e2:	e000      	b.n	80028e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
 8002906:	e000      	b.n	800290a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002908:	bf00      	nop
    }
  }
}
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800292c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b40      	cmp	r3, #64	; 0x40
 800293c:	d108      	bne.n	8002950 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800294e:	e007      	b.n	8002960 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	60da      	str	r2, [r3, #12]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	3b10      	subs	r3, #16
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <DMA_CalcBaseAndBitshift+0x64>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002986:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4413      	add	r3, r2
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b03      	cmp	r3, #3
 8002998:	d909      	bls.n	80029ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029a2:	f023 0303 	bic.w	r3, r3, #3
 80029a6:	1d1a      	adds	r2, r3, #4
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	659a      	str	r2, [r3, #88]	; 0x58
 80029ac:	e007      	b.n	80029be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029b6:	f023 0303 	bic.w	r3, r3, #3
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	aaaaaaab 	.word	0xaaaaaaab
 80029d4:	08011d54 	.word	0x08011d54

080029d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d11f      	bne.n	8002a32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d856      	bhi.n	8002aa6 <DMA_CheckFifoParam+0xce>
 80029f8:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <DMA_CheckFifoParam+0x28>)
 80029fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fe:	bf00      	nop
 8002a00:	08002a11 	.word	0x08002a11
 8002a04:	08002a23 	.word	0x08002a23
 8002a08:	08002a11 	.word	0x08002a11
 8002a0c:	08002aa7 	.word	0x08002aa7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d046      	beq.n	8002aaa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a20:	e043      	b.n	8002aaa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a2a:	d140      	bne.n	8002aae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a30:	e03d      	b.n	8002aae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a3a:	d121      	bne.n	8002a80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d837      	bhi.n	8002ab2 <DMA_CheckFifoParam+0xda>
 8002a42:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <DMA_CheckFifoParam+0x70>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002a59 	.word	0x08002a59
 8002a4c:	08002a5f 	.word	0x08002a5f
 8002a50:	08002a59 	.word	0x08002a59
 8002a54:	08002a71 	.word	0x08002a71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5c:	e030      	b.n	8002ac0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d025      	beq.n	8002ab6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6e:	e022      	b.n	8002ab6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a78:	d11f      	bne.n	8002aba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a7e:	e01c      	b.n	8002aba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d903      	bls.n	8002a8e <DMA_CheckFifoParam+0xb6>
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d003      	beq.n	8002a94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a8c:	e018      	b.n	8002ac0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
      break;
 8002a92:	e015      	b.n	8002ac0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00e      	beq.n	8002abe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa4:	e00b      	b.n	8002abe <DMA_CheckFifoParam+0xe6>
      break;
 8002aa6:	bf00      	nop
 8002aa8:	e00a      	b.n	8002ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8002aaa:	bf00      	nop
 8002aac:	e008      	b.n	8002ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8002aae:	bf00      	nop
 8002ab0:	e006      	b.n	8002ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ab2:	bf00      	nop
 8002ab4:	e004      	b.n	8002ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ab6:	bf00      	nop
 8002ab8:	e002      	b.n	8002ac0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002aba:	bf00      	nop
 8002abc:	e000      	b.n	8002ac0 <DMA_CheckFifoParam+0xe8>
      break;
 8002abe:	bf00      	nop
    }
  } 
  
  return status; 
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop

08002ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	e16b      	b.n	8002dc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aec:	2201      	movs	r2, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	f040 815a 	bne.w	8002dbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d005      	beq.n	8002b22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d130      	bne.n	8002b84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b58:	2201      	movs	r2, #1
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 0201 	and.w	r2, r3, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d017      	beq.n	8002bc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d123      	bne.n	8002c14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	08da      	lsrs	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3208      	adds	r2, #8
 8002bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	08da      	lsrs	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3208      	adds	r2, #8
 8002c0e:	69b9      	ldr	r1, [r7, #24]
 8002c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0203 	and.w	r2, r3, #3
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80b4 	beq.w	8002dbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	4b60      	ldr	r3, [pc, #384]	; (8002ddc <HAL_GPIO_Init+0x30c>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	4a5f      	ldr	r2, [pc, #380]	; (8002ddc <HAL_GPIO_Init+0x30c>)
 8002c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c64:	6453      	str	r3, [r2, #68]	; 0x44
 8002c66:	4b5d      	ldr	r3, [pc, #372]	; (8002ddc <HAL_GPIO_Init+0x30c>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c72:	4a5b      	ldr	r2, [pc, #364]	; (8002de0 <HAL_GPIO_Init+0x310>)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	089b      	lsrs	r3, r3, #2
 8002c78:	3302      	adds	r3, #2
 8002c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	220f      	movs	r2, #15
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4013      	ands	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a52      	ldr	r2, [pc, #328]	; (8002de4 <HAL_GPIO_Init+0x314>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d02b      	beq.n	8002cf6 <HAL_GPIO_Init+0x226>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a51      	ldr	r2, [pc, #324]	; (8002de8 <HAL_GPIO_Init+0x318>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d025      	beq.n	8002cf2 <HAL_GPIO_Init+0x222>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a50      	ldr	r2, [pc, #320]	; (8002dec <HAL_GPIO_Init+0x31c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01f      	beq.n	8002cee <HAL_GPIO_Init+0x21e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4f      	ldr	r2, [pc, #316]	; (8002df0 <HAL_GPIO_Init+0x320>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d019      	beq.n	8002cea <HAL_GPIO_Init+0x21a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4e      	ldr	r2, [pc, #312]	; (8002df4 <HAL_GPIO_Init+0x324>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_GPIO_Init+0x216>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4d      	ldr	r2, [pc, #308]	; (8002df8 <HAL_GPIO_Init+0x328>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_GPIO_Init+0x212>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4c      	ldr	r2, [pc, #304]	; (8002dfc <HAL_GPIO_Init+0x32c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <HAL_GPIO_Init+0x20e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4b      	ldr	r2, [pc, #300]	; (8002e00 <HAL_GPIO_Init+0x330>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_GPIO_Init+0x20a>
 8002cd6:	2307      	movs	r3, #7
 8002cd8:	e00e      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002cda:	2308      	movs	r3, #8
 8002cdc:	e00c      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002cde:	2306      	movs	r3, #6
 8002ce0:	e00a      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002ce2:	2305      	movs	r3, #5
 8002ce4:	e008      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	e006      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002cea:	2303      	movs	r3, #3
 8002cec:	e004      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e002      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	f002 0203 	and.w	r2, r2, #3
 8002cfe:	0092      	lsls	r2, r2, #2
 8002d00:	4093      	lsls	r3, r2
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d08:	4935      	ldr	r1, [pc, #212]	; (8002de0 <HAL_GPIO_Init+0x310>)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	3302      	adds	r3, #2
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d16:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <HAL_GPIO_Init+0x334>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d3a:	4a32      	ldr	r2, [pc, #200]	; (8002e04 <HAL_GPIO_Init+0x334>)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d40:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <HAL_GPIO_Init+0x334>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d64:	4a27      	ldr	r2, [pc, #156]	; (8002e04 <HAL_GPIO_Init+0x334>)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d6a:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <HAL_GPIO_Init+0x334>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d8e:	4a1d      	ldr	r2, [pc, #116]	; (8002e04 <HAL_GPIO_Init+0x334>)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d94:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <HAL_GPIO_Init+0x334>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002db8:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <HAL_GPIO_Init+0x334>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	2b0f      	cmp	r3, #15
 8002dc8:	f67f ae90 	bls.w	8002aec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	3724      	adds	r7, #36	; 0x24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40013800 	.word	0x40013800
 8002de4:	40020000 	.word	0x40020000
 8002de8:	40020400 	.word	0x40020400
 8002dec:	40020800 	.word	0x40020800
 8002df0:	40020c00 	.word	0x40020c00
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40021400 	.word	0x40021400
 8002dfc:	40021800 	.word	0x40021800
 8002e00:	40021c00 	.word	0x40021c00
 8002e04:	40013c00 	.word	0x40013c00

08002e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
 8002e14:	4613      	mov	r3, r2
 8002e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e18:	787b      	ldrb	r3, [r7, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e24:	e003      	b.n	8002e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e26:	887b      	ldrh	r3, [r7, #2]
 8002e28:	041a      	lsls	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	619a      	str	r2, [r3, #24]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e4c:	887a      	ldrh	r2, [r7, #2]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	041a      	lsls	r2, r3, #16
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	43d9      	mvns	r1, r3
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	400b      	ands	r3, r1
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	619a      	str	r2, [r3, #24]
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e7a:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d006      	beq.n	8002e94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e86:	4a05      	ldr	r2, [pc, #20]	; (8002e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 f806 	bl	8002ea0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40013c00 	.word	0x40013c00

08002ea0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002eb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eb8:	b08f      	sub	sp, #60	; 0x3c
 8002eba:	af0a      	add	r7, sp, #40	; 0x28
 8002ebc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e10f      	b.n	80030e8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f00a fae0 	bl	800d4a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2203      	movs	r2, #3
 8002eec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d102      	bne.n	8002f02 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f003 fbb5 	bl	8006676 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	687e      	ldr	r6, [r7, #4]
 8002f14:	466d      	mov	r5, sp
 8002f16:	f106 0410 	add.w	r4, r6, #16
 8002f1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f26:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f2a:	1d33      	adds	r3, r6, #4
 8002f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f2e:	6838      	ldr	r0, [r7, #0]
 8002f30:	f003 fa8c 	bl	800644c <USB_CoreInit>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e0d0      	b.n	80030e8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 fba3 	bl	8006698 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	73fb      	strb	r3, [r7, #15]
 8002f56:	e04a      	b.n	8002fee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	333d      	adds	r3, #61	; 0x3d
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f6c:	7bfa      	ldrb	r2, [r7, #15]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	333c      	adds	r3, #60	; 0x3c
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	b298      	uxth	r0, r3
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	3344      	adds	r3, #68	; 0x44
 8002f94:	4602      	mov	r2, r0
 8002f96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f98:	7bfa      	ldrb	r2, [r7, #15]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3340      	adds	r3, #64	; 0x40
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fac:	7bfa      	ldrb	r2, [r7, #15]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	3348      	adds	r3, #72	; 0x48
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fc0:	7bfa      	ldrb	r2, [r7, #15]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	334c      	adds	r3, #76	; 0x4c
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3354      	adds	r3, #84	; 0x54
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	3301      	adds	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
 8002fee:	7bfa      	ldrb	r2, [r7, #15]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d3af      	bcc.n	8002f58 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	73fb      	strb	r3, [r7, #15]
 8002ffc:	e044      	b.n	8003088 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ffe:	7bfa      	ldrb	r2, [r7, #15]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003014:	7bfa      	ldrb	r2, [r7, #15]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003026:	7bfa      	ldrb	r2, [r7, #15]
 8003028:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800302a:	7bfa      	ldrb	r2, [r7, #15]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	3301      	adds	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
 8003088:	7bfa      	ldrb	r2, [r7, #15]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	429a      	cmp	r2, r3
 8003090:	d3b5      	bcc.n	8002ffe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	687e      	ldr	r6, [r7, #4]
 800309a:	466d      	mov	r5, sp
 800309c:	f106 0410 	add.w	r4, r6, #16
 80030a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80030b0:	1d33      	adds	r3, r6, #4
 80030b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030b4:	6838      	ldr	r0, [r7, #0]
 80030b6:	f003 fb3b 	bl	8006730 <USB_DevInit>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e00d      	b.n	80030e8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f004 fc8a 	bl	80079fa <USB_DevDisconnect>

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_PCD_Start+0x1c>
 8003108:	2302      	movs	r3, #2
 800310a:	e020      	b.n	800314e <HAL_PCD_Start+0x5e>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	2b01      	cmp	r3, #1
 800311a:	d109      	bne.n	8003130 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003120:	2b01      	cmp	r3, #1
 8003122:	d005      	beq.n	8003130 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f003 fa8d 	bl	8006654 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f004 fc3a 	bl	80079b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003156:	b590      	push	{r4, r7, lr}
 8003158:	b08d      	sub	sp, #52	; 0x34
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f004 fcf8 	bl	8007b62 <USB_GetMode>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	f040 848a 	bne.w	8003a8e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f004 fc5c 	bl	8007a3c <USB_ReadInterrupts>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8480 	beq.w	8003a8c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	0a1b      	lsrs	r3, r3, #8
 8003196:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f004 fc49 	bl	8007a3c <USB_ReadInterrupts>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d107      	bne.n	80031c4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f002 0202 	and.w	r2, r2, #2
 80031c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f004 fc37 	bl	8007a3c <USB_ReadInterrupts>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b10      	cmp	r3, #16
 80031d6:	d161      	bne.n	800329c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0210 	bic.w	r2, r2, #16
 80031e6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	f003 020f 	and.w	r2, r3, #15
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	4413      	add	r3, r2
 8003204:	3304      	adds	r3, #4
 8003206:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	0c5b      	lsrs	r3, r3, #17
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	2b02      	cmp	r3, #2
 8003212:	d124      	bne.n	800325e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d035      	beq.n	800328c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	091b      	lsrs	r3, r3, #4
 8003228:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800322a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800322e:	b29b      	uxth	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	6a38      	ldr	r0, [r7, #32]
 8003234:	f004 fa6e 	bl	8007714 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	091b      	lsrs	r3, r3, #4
 8003240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003244:	441a      	add	r2, r3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	6a1a      	ldr	r2, [r3, #32]
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003256:	441a      	add	r2, r3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	621a      	str	r2, [r3, #32]
 800325c:	e016      	b.n	800328c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	0c5b      	lsrs	r3, r3, #17
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	2b06      	cmp	r3, #6
 8003268:	d110      	bne.n	800328c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003270:	2208      	movs	r2, #8
 8003272:	4619      	mov	r1, r3
 8003274:	6a38      	ldr	r0, [r7, #32]
 8003276:	f004 fa4d 	bl	8007714 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	6a1a      	ldr	r2, [r3, #32]
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003286:	441a      	add	r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0210 	orr.w	r2, r2, #16
 800329a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f004 fbcb 	bl	8007a3c <USB_ReadInterrupts>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032b0:	f040 80a7 	bne.w	8003402 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f004 fbd0 	bl	8007a62 <USB_ReadDevAllOutEpInterrupt>
 80032c2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80032c4:	e099      	b.n	80033fa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 808e 	beq.w	80033ee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f004 fbf4 	bl	8007aca <USB_ReadDevOutEPInterrupt>
 80032e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00c      	beq.n	8003308 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fa:	461a      	mov	r2, r3
 80032fc:	2301      	movs	r3, #1
 80032fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 feaa 	bl	800405c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00c      	beq.n	800332c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	4413      	add	r3, r2
 800331a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331e:	461a      	mov	r2, r3
 8003320:	2308      	movs	r3, #8
 8003322:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 ff80 	bl	800422c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b00      	cmp	r3, #0
 8003334:	d008      	beq.n	8003348 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003342:	461a      	mov	r2, r3
 8003344:	2310      	movs	r3, #16
 8003346:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d030      	beq.n	80033b4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335a:	2b80      	cmp	r3, #128	; 0x80
 800335c:	d109      	bne.n	8003372 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	69fa      	ldr	r2, [r7, #28]
 8003368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800336c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003370:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003374:	4613      	mov	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	4413      	add	r3, r2
 8003384:	3304      	adds	r3, #4
 8003386:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	78db      	ldrb	r3, [r3, #3]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d108      	bne.n	80033a2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2200      	movs	r2, #0
 8003394:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	b2db      	uxtb	r3, r3
 800339a:	4619      	mov	r1, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f00a f989 	bl	800d6b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ae:	461a      	mov	r2, r3
 80033b0:	2302      	movs	r3, #2
 80033b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ca:	461a      	mov	r2, r3
 80033cc:	2320      	movs	r3, #32
 80033ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e6:	461a      	mov	r2, r3
 80033e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	3301      	adds	r3, #1
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f6:	085b      	lsrs	r3, r3, #1
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f47f af62 	bne.w	80032c6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f004 fb18 	bl	8007a3c <USB_ReadInterrupts>
 800340c:	4603      	mov	r3, r0
 800340e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003412:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003416:	f040 80db 	bne.w	80035d0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f004 fb39 	bl	8007a96 <USB_ReadDevAllInEpInterrupt>
 8003424:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800342a:	e0cd      	b.n	80035c8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 80c2 	beq.w	80035bc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	4611      	mov	r1, r2
 8003442:	4618      	mov	r0, r3
 8003444:	f004 fb5f 	bl	8007b06 <USB_ReadDevInEPInterrupt>
 8003448:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d057      	beq.n	8003504 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	2201      	movs	r2, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	43db      	mvns	r3, r3
 800346e:	69f9      	ldr	r1, [r7, #28]
 8003470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003474:	4013      	ands	r3, r2
 8003476:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	4413      	add	r3, r2
 8003480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003484:	461a      	mov	r2, r3
 8003486:	2301      	movs	r3, #1
 8003488:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d132      	bne.n	80034f8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	334c      	adds	r3, #76	; 0x4c
 80034a2:	6819      	ldr	r1, [r3, #0]
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4403      	add	r3, r0
 80034b2:	3348      	adds	r3, #72	; 0x48
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4419      	add	r1, r3
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4403      	add	r3, r0
 80034c6:	334c      	adds	r3, #76	; 0x4c
 80034c8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d113      	bne.n	80034f8 <HAL_PCD_IRQHandler+0x3a2>
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	3354      	adds	r3, #84	; 0x54
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d108      	bne.n	80034f8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034f0:	461a      	mov	r2, r3
 80034f2:	2101      	movs	r1, #1
 80034f4:	f004 fb66 	bl	8007bc4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	4619      	mov	r1, r3
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f00a f853 	bl	800d5aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800351a:	461a      	mov	r2, r3
 800351c:	2308      	movs	r3, #8
 800351e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	4413      	add	r3, r2
 8003532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003536:	461a      	mov	r2, r3
 8003538:	2310      	movs	r3, #16
 800353a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d008      	beq.n	8003558 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003552:	461a      	mov	r2, r3
 8003554:	2340      	movs	r3, #64	; 0x40
 8003556:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d023      	beq.n	80035aa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003562:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003564:	6a38      	ldr	r0, [r7, #32]
 8003566:	f003 fa47 	bl	80069f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800356a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	3338      	adds	r3, #56	; 0x38
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	4413      	add	r3, r2
 800357a:	3304      	adds	r3, #4
 800357c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	78db      	ldrb	r3, [r3, #3]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d108      	bne.n	8003598 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2200      	movs	r2, #0
 800358a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	b2db      	uxtb	r3, r3
 8003590:	4619      	mov	r1, r3
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f00a f8a0 	bl	800d6d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a4:	461a      	mov	r2, r3
 80035a6:	2302      	movs	r3, #2
 80035a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fcc3 	bl	8003f42 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	3301      	adds	r3, #1
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f47f af2e 	bne.w	800342c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f004 fa31 	bl	8007a3c <USB_ReadInterrupts>
 80035da:	4603      	mov	r3, r0
 80035dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035e4:	d122      	bne.n	800362c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035f4:	f023 0301 	bic.w	r3, r3, #1
 80035f8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003600:	2b01      	cmp	r3, #1
 8003602:	d108      	bne.n	8003616 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800360c:	2100      	movs	r1, #0
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 feaa 	bl	8004368 <HAL_PCDEx_LPM_Callback>
 8003614:	e002      	b.n	800361c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f00a f83e 	bl	800d698 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800362a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f004 fa03 	bl	8007a3c <USB_ReadInterrupts>
 8003636:	4603      	mov	r3, r0
 8003638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800363c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003640:	d112      	bne.n	8003668 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d102      	bne.n	8003658 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f009 fffa 	bl	800d64c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003666:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f004 f9e5 	bl	8007a3c <USB_ReadInterrupts>
 8003672:	4603      	mov	r3, r0
 8003674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367c:	f040 80b7 	bne.w	80037ee <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368e:	f023 0301 	bic.w	r3, r3, #1
 8003692:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2110      	movs	r1, #16
 800369a:	4618      	mov	r0, r3
 800369c:	f003 f9ac 	bl	80069f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a0:	2300      	movs	r3, #0
 80036a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a4:	e046      	b.n	8003734 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b2:	461a      	mov	r2, r3
 80036b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ca:	0151      	lsls	r1, r2, #5
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	440a      	add	r2, r1
 80036d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e6:	461a      	mov	r2, r3
 80036e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036ec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036fe:	0151      	lsls	r1, r2, #5
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	440a      	add	r2, r1
 8003704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003708:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800370c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800371e:	0151      	lsls	r1, r2, #5
 8003720:	69fa      	ldr	r2, [r7, #28]
 8003722:	440a      	add	r2, r1
 8003724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003728:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800372c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003730:	3301      	adds	r3, #1
 8003732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800373a:	429a      	cmp	r2, r3
 800373c:	d3b3      	bcc.n	80036a6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800374c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003750:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	2b00      	cmp	r3, #0
 8003758:	d016      	beq.n	8003788 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800376a:	f043 030b 	orr.w	r3, r3, #11
 800376e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003780:	f043 030b 	orr.w	r3, r3, #11
 8003784:	6453      	str	r3, [r2, #68]	; 0x44
 8003786:	e015      	b.n	80037b4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003796:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800379a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800379e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ae:	f043 030b 	orr.w	r3, r3, #11
 80037b2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037c6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037d8:	461a      	mov	r2, r3
 80037da:	f004 f9f3 	bl	8007bc4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695a      	ldr	r2, [r3, #20]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80037ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f004 f922 	bl	8007a3c <USB_ReadInterrupts>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003802:	d124      	bne.n	800384e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f004 f9b8 	bl	8007b7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f003 f96d 	bl	8006af2 <USB_GetDevSpeed>
 8003818:	4603      	mov	r3, r0
 800381a:	461a      	mov	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681c      	ldr	r4, [r3, #0]
 8003824:	f001 fa10 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8003828:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	4620      	mov	r0, r4
 8003834:	f002 fe6c 	bl	8006510 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f009 fede 	bl	800d5fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800384c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f004 f8f2 	bl	8007a3c <USB_ReadInterrupts>
 8003858:	4603      	mov	r3, r0
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b08      	cmp	r3, #8
 8003860:	d10a      	bne.n	8003878 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f009 febb 	bl	800d5de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f002 0208 	and.w	r2, r2, #8
 8003876:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f004 f8dd 	bl	8007a3c <USB_ReadInterrupts>
 8003882:	4603      	mov	r3, r0
 8003884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003888:	2b80      	cmp	r3, #128	; 0x80
 800388a:	d122      	bne.n	80038d2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003898:	2301      	movs	r3, #1
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
 800389c:	e014      	b.n	80038c8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a2:	4613      	mov	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d105      	bne.n	80038c2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	4619      	mov	r1, r3
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fb0f 	bl	8003ee0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	3301      	adds	r3, #1
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d3e5      	bcc.n	800389e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f004 f8b0 	bl	8007a3c <USB_ReadInterrupts>
 80038dc:	4603      	mov	r3, r0
 80038de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038e6:	d13b      	bne.n	8003960 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038e8:	2301      	movs	r3, #1
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
 80038ec:	e02b      	b.n	8003946 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003902:	4613      	mov	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	3340      	adds	r3, #64	; 0x40
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d115      	bne.n	8003940 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003914:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003916:	2b00      	cmp	r3, #0
 8003918:	da12      	bge.n	8003940 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391e:	4613      	mov	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	333f      	adds	r3, #63	; 0x3f
 800392a:	2201      	movs	r2, #1
 800392c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003936:	b2db      	uxtb	r3, r3
 8003938:	4619      	mov	r1, r3
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fad0 	bl	8003ee0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	3301      	adds	r3, #1
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394c:	429a      	cmp	r2, r3
 800394e:	d3ce      	bcc.n	80038ee <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800395e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f004 f869 	bl	8007a3c <USB_ReadInterrupts>
 800396a:	4603      	mov	r3, r0
 800396c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003970:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003974:	d155      	bne.n	8003a22 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003976:	2301      	movs	r3, #1
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
 800397a:	e045      	b.n	8003a08 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003990:	4613      	mov	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d12e      	bne.n	8003a02 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	da2b      	bge.n	8003a02 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80039b6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d121      	bne.n	8003a02 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10a      	bne.n	8003a02 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039fe:	6053      	str	r3, [r2, #4]
            break;
 8003a00:	e007      	b.n	8003a12 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	3301      	adds	r3, #1
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d3b4      	bcc.n	800397c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f004 f808 	bl	8007a3c <USB_ReadInterrupts>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a36:	d10a      	bne.n	8003a4e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f009 fe5f 	bl	800d6fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f003 fff2 	bl	8007a3c <USB_ReadInterrupts>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d115      	bne.n	8003a8e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f009 fe4f 	bl	800d718 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6859      	ldr	r1, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	e000      	b.n	8003a8e <HAL_PCD_IRQHandler+0x938>
      return;
 8003a8c:	bf00      	nop
    }
  }
}
 8003a8e:	3734      	adds	r7, #52	; 0x34
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd90      	pop	{r4, r7, pc}

08003a94 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_PCD_SetAddress+0x1a>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e013      	b.n	8003ad6 <HAL_PCD_SetAddress+0x42>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f003 ff50 	bl	800796c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	4608      	mov	r0, r1
 8003ae8:	4611      	mov	r1, r2
 8003aea:	461a      	mov	r2, r3
 8003aec:	4603      	mov	r3, r0
 8003aee:	70fb      	strb	r3, [r7, #3]
 8003af0:	460b      	mov	r3, r1
 8003af2:	803b      	strh	r3, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	da0f      	bge.n	8003b24 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	f003 020f 	and.w	r2, r3, #15
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	3338      	adds	r3, #56	; 0x38
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	4413      	add	r3, r2
 8003b18:	3304      	adds	r3, #4
 8003b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	705a      	strb	r2, [r3, #1]
 8003b22:	e00f      	b.n	8003b44 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	f003 020f 	and.w	r2, r3, #15
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b50:	883a      	ldrh	r2, [r7, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	78ba      	ldrb	r2, [r7, #2]
 8003b5a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	785b      	ldrb	r3, [r3, #1]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d004      	beq.n	8003b6e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b6e:	78bb      	ldrb	r3, [r7, #2]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d102      	bne.n	8003b7a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_PCD_EP_Open+0xaa>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e00e      	b.n	8003ba6 <HAL_PCD_EP_Open+0xc8>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68f9      	ldr	r1, [r7, #12]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f002 ffd0 	bl	8006b3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003ba4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	da0f      	bge.n	8003be2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	f003 020f 	and.w	r2, r3, #15
 8003bc8:	4613      	mov	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	3338      	adds	r3, #56	; 0x38
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	705a      	strb	r2, [r3, #1]
 8003be0:	e00f      	b.n	8003c02 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	f003 020f 	and.w	r2, r3, #15
 8003be8:	4613      	mov	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_PCD_EP_Close+0x6e>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e00e      	b.n	8003c3a <HAL_PCD_EP_Close+0x8c>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68f9      	ldr	r1, [r7, #12]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f003 f80e 	bl	8006c4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b086      	sub	sp, #24
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c52:	7afb      	ldrb	r3, [r7, #11]
 8003c54:	f003 020f 	and.w	r2, r3, #15
 8003c58:	4613      	mov	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	3304      	adds	r3, #4
 8003c6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2200      	movs	r2, #0
 8003c82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c84:	7afb      	ldrb	r3, [r7, #11]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d102      	bne.n	8003c9e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c9e:	7afb      	ldrb	r3, [r7, #11]
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d109      	bne.n	8003cbc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	6979      	ldr	r1, [r7, #20]
 8003cb6:	f003 faed 	bl	8007294 <USB_EP0StartXfer>
 8003cba:	e008      	b.n	8003cce <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6979      	ldr	r1, [r7, #20]
 8003cca:	f003 f89b 	bl	8006e04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ce8:	7afb      	ldrb	r3, [r7, #11]
 8003cea:	f003 020f 	and.w	r2, r3, #15
 8003cee:	4613      	mov	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	3338      	adds	r3, #56	; 0x38
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2201      	movs	r2, #1
 8003d16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d18:	7afb      	ldrb	r3, [r7, #11]
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d102      	bne.n	8003d32 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d32:	7afb      	ldrb	r3, [r7, #11]
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d109      	bne.n	8003d50 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	6979      	ldr	r1, [r7, #20]
 8003d4a:	f003 faa3 	bl	8007294 <USB_EP0StartXfer>
 8003d4e:	e008      	b.n	8003d62 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6818      	ldr	r0, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	6979      	ldr	r1, [r7, #20]
 8003d5e:	f003 f851 	bl	8006e04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	f003 020f 	and.w	r2, r3, #15
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d901      	bls.n	8003d8a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e050      	b.n	8003e2c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	da0f      	bge.n	8003db2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d92:	78fb      	ldrb	r3, [r7, #3]
 8003d94:	f003 020f 	and.w	r2, r3, #15
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	3338      	adds	r3, #56	; 0x38
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	4413      	add	r3, r2
 8003da6:	3304      	adds	r3, #4
 8003da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	705a      	strb	r2, [r3, #1]
 8003db0:	e00d      	b.n	8003dce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	4613      	mov	r3, r2
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_PCD_EP_SetStall+0x82>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e01e      	b.n	8003e2c <HAL_PCD_EP_SetStall+0xc0>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68f9      	ldr	r1, [r7, #12]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f003 fce1 	bl	80077c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	b2d9      	uxtb	r1, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f003 fed1 	bl	8007bc4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	f003 020f 	and.w	r2, r3, #15
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d901      	bls.n	8003e52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e042      	b.n	8003ed8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	da0f      	bge.n	8003e7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	f003 020f 	and.w	r2, r3, #15
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	3338      	adds	r3, #56	; 0x38
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3304      	adds	r3, #4
 8003e70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2201      	movs	r2, #1
 8003e76:	705a      	strb	r2, [r3, #1]
 8003e78:	e00f      	b.n	8003e9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	f003 020f 	and.w	r2, r3, #15
 8003e80:	4613      	mov	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	4413      	add	r3, r2
 8003e90:	3304      	adds	r3, #4
 8003e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_PCD_EP_ClrStall+0x86>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e00e      	b.n	8003ed8 <HAL_PCD_EP_ClrStall+0xa4>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68f9      	ldr	r1, [r7, #12]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f003 fce9 	bl	80078a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	da0c      	bge.n	8003f0e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	f003 020f 	and.w	r2, r3, #15
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	3338      	adds	r3, #56	; 0x38
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	4413      	add	r3, r2
 8003f08:	3304      	adds	r3, #4
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	e00c      	b.n	8003f28 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f0e:	78fb      	ldrb	r3, [r7, #3]
 8003f10:	f003 020f 	and.w	r2, r3, #15
 8003f14:	4613      	mov	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	4413      	add	r3, r2
 8003f24:	3304      	adds	r3, #4
 8003f26:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68f9      	ldr	r1, [r7, #12]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f003 fb08 	bl	8007544 <USB_EPStopXfer>
 8003f34:	4603      	mov	r3, r0
 8003f36:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f38:	7afb      	ldrb	r3, [r7, #11]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b08a      	sub	sp, #40	; 0x28
 8003f46:	af02      	add	r7, sp, #8
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	3338      	adds	r3, #56	; 0x38
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	3304      	adds	r3, #4
 8003f68:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a1a      	ldr	r2, [r3, #32]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d901      	bls.n	8003f7a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e06c      	b.n	8004054 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d902      	bls.n	8003f96 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3303      	adds	r3, #3
 8003f9a:	089b      	lsrs	r3, r3, #2
 8003f9c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f9e:	e02b      	b.n	8003ff8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	699a      	ldr	r2, [r3, #24]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d902      	bls.n	8003fbc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	3303      	adds	r3, #3
 8003fc0:	089b      	lsrs	r3, r3, #2
 8003fc2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6919      	ldr	r1, [r3, #16]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	4603      	mov	r3, r0
 8003fda:	6978      	ldr	r0, [r7, #20]
 8003fdc:	f003 fb5c 	bl	8007698 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	441a      	add	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a1a      	ldr	r2, [r3, #32]
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	441a      	add	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	b29b      	uxth	r3, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	429a      	cmp	r2, r3
 800400c:	d809      	bhi.n	8004022 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a1a      	ldr	r2, [r3, #32]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004016:	429a      	cmp	r2, r3
 8004018:	d203      	bcs.n	8004022 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1be      	bne.n	8003fa0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	429a      	cmp	r2, r3
 800402c:	d811      	bhi.n	8004052 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	2201      	movs	r2, #1
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	43db      	mvns	r3, r3
 8004048:	6939      	ldr	r1, [r7, #16]
 800404a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800404e:	4013      	ands	r3, r2
 8004050:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3720      	adds	r7, #32
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	333c      	adds	r3, #60	; 0x3c
 8004074:	3304      	adds	r3, #4
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d17b      	bne.n	800418a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b00      	cmp	r3, #0
 800409a:	d015      	beq.n	80040c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	4a61      	ldr	r2, [pc, #388]	; (8004224 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	f240 80b9 	bls.w	8004218 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 80b3 	beq.w	8004218 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040be:	461a      	mov	r2, r3
 80040c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040c4:	6093      	str	r3, [r2, #8]
 80040c6:	e0a7      	b.n	8004218 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040de:	461a      	mov	r2, r3
 80040e0:	2320      	movs	r3, #32
 80040e2:	6093      	str	r3, [r2, #8]
 80040e4:	e098      	b.n	8004218 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f040 8093 	bne.w	8004218 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	4a4b      	ldr	r2, [pc, #300]	; (8004224 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d90f      	bls.n	800411a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004110:	461a      	mov	r2, r3
 8004112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004116:	6093      	str	r3, [r2, #8]
 8004118:	e07e      	b.n	8004218 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	4413      	add	r3, r2
 800412c:	3304      	adds	r3, #4
 800412e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	0159      	lsls	r1, r3, #5
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	440b      	add	r3, r1
 800413c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004146:	1ad2      	subs	r2, r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d114      	bne.n	800417c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004164:	461a      	mov	r2, r3
 8004166:	2101      	movs	r1, #1
 8004168:	f003 fd2c 	bl	8007bc4 <USB_EP0_OutStart>
 800416c:	e006      	b.n	800417c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	441a      	add	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	4619      	mov	r1, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f009 f9f6 	bl	800d574 <HAL_PCD_DataOutStageCallback>
 8004188:	e046      	b.n	8004218 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	4a26      	ldr	r2, [pc, #152]	; (8004228 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d124      	bne.n	80041dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a8:	461a      	mov	r2, r3
 80041aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ae:	6093      	str	r3, [r2, #8]
 80041b0:	e032      	b.n	8004218 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c8:	461a      	mov	r2, r3
 80041ca:	2320      	movs	r3, #32
 80041cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	4619      	mov	r1, r3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f009 f9cd 	bl	800d574 <HAL_PCD_DataOutStageCallback>
 80041da:	e01d      	b.n	8004218 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d114      	bne.n	800420c <PCD_EP_OutXfrComplete_int+0x1b0>
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d108      	bne.n	800420c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004204:	461a      	mov	r2, r3
 8004206:	2100      	movs	r1, #0
 8004208:	f003 fcdc 	bl	8007bc4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	4619      	mov	r1, r3
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f009 f9ae 	bl	800d574 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3720      	adds	r7, #32
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	4f54300a 	.word	0x4f54300a
 8004228:	4f54310a 	.word	0x4f54310a

0800422c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	333c      	adds	r3, #60	; 0x3c
 8004244:	3304      	adds	r3, #4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4a15      	ldr	r2, [pc, #84]	; (80042b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d90e      	bls.n	8004280 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004268:	2b00      	cmp	r3, #0
 800426a:	d009      	beq.n	8004280 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004278:	461a      	mov	r2, r3
 800427a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800427e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f009 f965 	bl	800d550 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4a0a      	ldr	r2, [pc, #40]	; (80042b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d90c      	bls.n	80042a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d108      	bne.n	80042a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042a0:	461a      	mov	r2, r3
 80042a2:	2101      	movs	r1, #1
 80042a4:	f003 fc8e 	bl	8007bc4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	4f54300a 	.word	0x4f54300a

080042b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	70fb      	strb	r3, [r7, #3]
 80042c4:	4613      	mov	r3, r2
 80042c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d107      	bne.n	80042e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042d6:	883b      	ldrh	r3, [r7, #0]
 80042d8:	0419      	lsls	r1, r3, #16
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	629a      	str	r2, [r3, #40]	; 0x28
 80042e4:	e028      	b.n	8004338 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	4413      	add	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042f4:	2300      	movs	r3, #0
 80042f6:	73fb      	strb	r3, [r7, #15]
 80042f8:	e00d      	b.n	8004316 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	3340      	adds	r3, #64	; 0x40
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	4413      	add	r3, r2
 800430e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	3301      	adds	r3, #1
 8004314:	73fb      	strb	r3, [r7, #15]
 8004316:	7bfa      	ldrb	r2, [r7, #15]
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	3b01      	subs	r3, #1
 800431c:	429a      	cmp	r2, r3
 800431e:	d3ec      	bcc.n	80042fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004320:	883b      	ldrh	r3, [r7, #0]
 8004322:	0418      	lsls	r0, r3, #16
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6819      	ldr	r1, [r3, #0]
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	3b01      	subs	r3, #1
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	4302      	orrs	r2, r0
 8004330:	3340      	adds	r3, #64	; 0x40
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	460b      	mov	r3, r1
 8004350:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	887a      	ldrh	r2, [r7, #2]
 8004358:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e267      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d075      	beq.n	800448a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800439e:	4b88      	ldr	r3, [pc, #544]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d00c      	beq.n	80043c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043aa:	4b85      	ldr	r3, [pc, #532]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d112      	bne.n	80043dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043b6:	4b82      	ldr	r3, [pc, #520]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043c2:	d10b      	bne.n	80043dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c4:	4b7e      	ldr	r3, [pc, #504]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d05b      	beq.n	8004488 <HAL_RCC_OscConfig+0x108>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d157      	bne.n	8004488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e242      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e4:	d106      	bne.n	80043f4 <HAL_RCC_OscConfig+0x74>
 80043e6:	4b76      	ldr	r3, [pc, #472]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a75      	ldr	r2, [pc, #468]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 80043ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	e01d      	b.n	8004430 <HAL_RCC_OscConfig+0xb0>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043fc:	d10c      	bne.n	8004418 <HAL_RCC_OscConfig+0x98>
 80043fe:	4b70      	ldr	r3, [pc, #448]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a6f      	ldr	r2, [pc, #444]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 8004404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	4b6d      	ldr	r3, [pc, #436]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a6c      	ldr	r2, [pc, #432]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 8004410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	e00b      	b.n	8004430 <HAL_RCC_OscConfig+0xb0>
 8004418:	4b69      	ldr	r3, [pc, #420]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a68      	ldr	r2, [pc, #416]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 800441e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	4b66      	ldr	r3, [pc, #408]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a65      	ldr	r2, [pc, #404]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 800442a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800442e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d013      	beq.n	8004460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004438:	f7fd fec8 	bl	80021cc <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004440:	f7fd fec4 	bl	80021cc <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e207      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004452:	4b5b      	ldr	r3, [pc, #364]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0xc0>
 800445e:	e014      	b.n	800448a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004460:	f7fd feb4 	bl	80021cc <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004468:	f7fd feb0 	bl	80021cc <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e1f3      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447a:	4b51      	ldr	r3, [pc, #324]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0xe8>
 8004486:	e000      	b.n	800448a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d063      	beq.n	800455e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004496:	4b4a      	ldr	r3, [pc, #296]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00b      	beq.n	80044ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044a2:	4b47      	ldr	r3, [pc, #284]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d11c      	bne.n	80044e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ae:	4b44      	ldr	r3, [pc, #272]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d116      	bne.n	80044e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ba:	4b41      	ldr	r3, [pc, #260]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <HAL_RCC_OscConfig+0x152>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d001      	beq.n	80044d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e1c7      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d2:	4b3b      	ldr	r3, [pc, #236]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	4937      	ldr	r1, [pc, #220]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e6:	e03a      	b.n	800455e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d020      	beq.n	8004532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f0:	4b34      	ldr	r3, [pc, #208]	; (80045c4 <HAL_RCC_OscConfig+0x244>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f6:	f7fd fe69 	bl	80021cc <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044fe:	f7fd fe65 	bl	80021cc <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e1a8      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004510:	4b2b      	ldr	r3, [pc, #172]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0f0      	beq.n	80044fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451c:	4b28      	ldr	r3, [pc, #160]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	4925      	ldr	r1, [pc, #148]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 800452c:	4313      	orrs	r3, r2
 800452e:	600b      	str	r3, [r1, #0]
 8004530:	e015      	b.n	800455e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004532:	4b24      	ldr	r3, [pc, #144]	; (80045c4 <HAL_RCC_OscConfig+0x244>)
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fd fe48 	bl	80021cc <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004540:	f7fd fe44 	bl	80021cc <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e187      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004552:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f0      	bne.n	8004540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d036      	beq.n	80045d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d016      	beq.n	80045a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004572:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <HAL_RCC_OscConfig+0x248>)
 8004574:	2201      	movs	r2, #1
 8004576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004578:	f7fd fe28 	bl	80021cc <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004580:	f7fd fe24 	bl	80021cc <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e167      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004592:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <HAL_RCC_OscConfig+0x240>)
 8004594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCC_OscConfig+0x200>
 800459e:	e01b      	b.n	80045d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a0:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <HAL_RCC_OscConfig+0x248>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a6:	f7fd fe11 	bl	80021cc <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045ac:	e00e      	b.n	80045cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045ae:	f7fd fe0d 	bl	80021cc <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d907      	bls.n	80045cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e150      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
 80045c0:	40023800 	.word	0x40023800
 80045c4:	42470000 	.word	0x42470000
 80045c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045cc:	4b88      	ldr	r3, [pc, #544]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 80045ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1ea      	bne.n	80045ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 8097 	beq.w	8004714 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045e6:	2300      	movs	r3, #0
 80045e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ea:	4b81      	ldr	r3, [pc, #516]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10f      	bne.n	8004616 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f6:	2300      	movs	r3, #0
 80045f8:	60bb      	str	r3, [r7, #8]
 80045fa:	4b7d      	ldr	r3, [pc, #500]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	4a7c      	ldr	r2, [pc, #496]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004604:	6413      	str	r3, [r2, #64]	; 0x40
 8004606:	4b7a      	ldr	r3, [pc, #488]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460e:	60bb      	str	r3, [r7, #8]
 8004610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004612:	2301      	movs	r3, #1
 8004614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004616:	4b77      	ldr	r3, [pc, #476]	; (80047f4 <HAL_RCC_OscConfig+0x474>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461e:	2b00      	cmp	r3, #0
 8004620:	d118      	bne.n	8004654 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004622:	4b74      	ldr	r3, [pc, #464]	; (80047f4 <HAL_RCC_OscConfig+0x474>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a73      	ldr	r2, [pc, #460]	; (80047f4 <HAL_RCC_OscConfig+0x474>)
 8004628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800462c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800462e:	f7fd fdcd 	bl	80021cc <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004636:	f7fd fdc9 	bl	80021cc <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e10c      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004648:	4b6a      	ldr	r3, [pc, #424]	; (80047f4 <HAL_RCC_OscConfig+0x474>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0f0      	beq.n	8004636 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d106      	bne.n	800466a <HAL_RCC_OscConfig+0x2ea>
 800465c:	4b64      	ldr	r3, [pc, #400]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 800465e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004660:	4a63      	ldr	r2, [pc, #396]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004662:	f043 0301 	orr.w	r3, r3, #1
 8004666:	6713      	str	r3, [r2, #112]	; 0x70
 8004668:	e01c      	b.n	80046a4 <HAL_RCC_OscConfig+0x324>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	2b05      	cmp	r3, #5
 8004670:	d10c      	bne.n	800468c <HAL_RCC_OscConfig+0x30c>
 8004672:	4b5f      	ldr	r3, [pc, #380]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	4a5e      	ldr	r2, [pc, #376]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004678:	f043 0304 	orr.w	r3, r3, #4
 800467c:	6713      	str	r3, [r2, #112]	; 0x70
 800467e:	4b5c      	ldr	r3, [pc, #368]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	4a5b      	ldr	r2, [pc, #364]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	6713      	str	r3, [r2, #112]	; 0x70
 800468a:	e00b      	b.n	80046a4 <HAL_RCC_OscConfig+0x324>
 800468c:	4b58      	ldr	r3, [pc, #352]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	4a57      	ldr	r2, [pc, #348]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004692:	f023 0301 	bic.w	r3, r3, #1
 8004696:	6713      	str	r3, [r2, #112]	; 0x70
 8004698:	4b55      	ldr	r3, [pc, #340]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	4a54      	ldr	r2, [pc, #336]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 800469e:	f023 0304 	bic.w	r3, r3, #4
 80046a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d015      	beq.n	80046d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ac:	f7fd fd8e 	bl	80021cc <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b2:	e00a      	b.n	80046ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b4:	f7fd fd8a 	bl	80021cc <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e0cb      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ca:	4b49      	ldr	r3, [pc, #292]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0ee      	beq.n	80046b4 <HAL_RCC_OscConfig+0x334>
 80046d6:	e014      	b.n	8004702 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d8:	f7fd fd78 	bl	80021cc <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046de:	e00a      	b.n	80046f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046e0:	f7fd fd74 	bl	80021cc <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e0b5      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f6:	4b3e      	ldr	r3, [pc, #248]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1ee      	bne.n	80046e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004702:	7dfb      	ldrb	r3, [r7, #23]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d105      	bne.n	8004714 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004708:	4b39      	ldr	r3, [pc, #228]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	4a38      	ldr	r2, [pc, #224]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 800470e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004712:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 80a1 	beq.w	8004860 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800471e:	4b34      	ldr	r3, [pc, #208]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	2b08      	cmp	r3, #8
 8004728:	d05c      	beq.n	80047e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d141      	bne.n	80047b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004732:	4b31      	ldr	r3, [pc, #196]	; (80047f8 <HAL_RCC_OscConfig+0x478>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004738:	f7fd fd48 	bl	80021cc <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004740:	f7fd fd44 	bl	80021cc <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e087      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004752:	4b27      	ldr	r3, [pc, #156]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69da      	ldr	r2, [r3, #28]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	019b      	lsls	r3, r3, #6
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	085b      	lsrs	r3, r3, #1
 8004776:	3b01      	subs	r3, #1
 8004778:	041b      	lsls	r3, r3, #16
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	061b      	lsls	r3, r3, #24
 8004782:	491b      	ldr	r1, [pc, #108]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004784:	4313      	orrs	r3, r2
 8004786:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004788:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <HAL_RCC_OscConfig+0x478>)
 800478a:	2201      	movs	r2, #1
 800478c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478e:	f7fd fd1d 	bl	80021cc <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004796:	f7fd fd19 	bl	80021cc <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e05c      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a8:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0f0      	beq.n	8004796 <HAL_RCC_OscConfig+0x416>
 80047b4:	e054      	b.n	8004860 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b6:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <HAL_RCC_OscConfig+0x478>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047bc:	f7fd fd06 	bl	80021cc <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fd fd02 	bl	80021cc <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e045      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d6:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <HAL_RCC_OscConfig+0x470>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x444>
 80047e2:	e03d      	b.n	8004860 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d107      	bne.n	80047fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e038      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
 80047f0:	40023800 	.word	0x40023800
 80047f4:	40007000 	.word	0x40007000
 80047f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047fc:	4b1b      	ldr	r3, [pc, #108]	; (800486c <HAL_RCC_OscConfig+0x4ec>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d028      	beq.n	800485c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d121      	bne.n	800485c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004822:	429a      	cmp	r2, r3
 8004824:	d11a      	bne.n	800485c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800482c:	4013      	ands	r3, r2
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004832:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004834:	4293      	cmp	r3, r2
 8004836:	d111      	bne.n	800485c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	085b      	lsrs	r3, r3, #1
 8004844:	3b01      	subs	r3, #1
 8004846:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004848:	429a      	cmp	r2, r3
 800484a:	d107      	bne.n	800485c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004858:	429a      	cmp	r2, r3
 800485a:	d001      	beq.n	8004860 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800

08004870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0cc      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004884:	4b68      	ldr	r3, [pc, #416]	; (8004a28 <HAL_RCC_ClockConfig+0x1b8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d90c      	bls.n	80048ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004892:	4b65      	ldr	r3, [pc, #404]	; (8004a28 <HAL_RCC_ClockConfig+0x1b8>)
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800489a:	4b63      	ldr	r3, [pc, #396]	; (8004a28 <HAL_RCC_ClockConfig+0x1b8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0b8      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d020      	beq.n	80048fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c4:	4b59      	ldr	r3, [pc, #356]	; (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4a58      	ldr	r2, [pc, #352]	; (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048dc:	4b53      	ldr	r3, [pc, #332]	; (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	4a52      	ldr	r2, [pc, #328]	; (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e8:	4b50      	ldr	r3, [pc, #320]	; (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	494d      	ldr	r1, [pc, #308]	; (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d044      	beq.n	8004990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d107      	bne.n	800491e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490e:	4b47      	ldr	r3, [pc, #284]	; (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d119      	bne.n	800494e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e07f      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d003      	beq.n	800492e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800492a:	2b03      	cmp	r3, #3
 800492c:	d107      	bne.n	800493e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800492e:	4b3f      	ldr	r3, [pc, #252]	; (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d109      	bne.n	800494e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e06f      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493e:	4b3b      	ldr	r3, [pc, #236]	; (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e067      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800494e:	4b37      	ldr	r3, [pc, #220]	; (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f023 0203 	bic.w	r2, r3, #3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	4934      	ldr	r1, [pc, #208]	; (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	4313      	orrs	r3, r2
 800495e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004960:	f7fd fc34 	bl	80021cc <HAL_GetTick>
 8004964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004966:	e00a      	b.n	800497e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004968:	f7fd fc30 	bl	80021cc <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	f241 3288 	movw	r2, #5000	; 0x1388
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e04f      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497e:	4b2b      	ldr	r3, [pc, #172]	; (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 020c 	and.w	r2, r3, #12
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	429a      	cmp	r2, r3
 800498e:	d1eb      	bne.n	8004968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004990:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <HAL_RCC_ClockConfig+0x1b8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d20c      	bcs.n	80049b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499e:	4b22      	ldr	r3, [pc, #136]	; (8004a28 <HAL_RCC_ClockConfig+0x1b8>)
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a6:	4b20      	ldr	r3, [pc, #128]	; (8004a28 <HAL_RCC_ClockConfig+0x1b8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e032      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d008      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c4:	4b19      	ldr	r3, [pc, #100]	; (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4916      	ldr	r1, [pc, #88]	; (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d009      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049e2:	4b12      	ldr	r3, [pc, #72]	; (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	490e      	ldr	r1, [pc, #56]	; (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049f6:	f000 f821 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 80049fa:	4602      	mov	r2, r0
 80049fc:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	091b      	lsrs	r3, r3, #4
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	490a      	ldr	r1, [pc, #40]	; (8004a30 <HAL_RCC_ClockConfig+0x1c0>)
 8004a08:	5ccb      	ldrb	r3, [r1, r3]
 8004a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0e:	4a09      	ldr	r2, [pc, #36]	; (8004a34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a12:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fd f9c8 	bl	8001dac <HAL_InitTick>

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40023c00 	.word	0x40023c00
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	08011d3c 	.word	0x08011d3c
 8004a34:	20000000 	.word	0x20000000
 8004a38:	20000004 	.word	0x20000004

08004a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a40:	b094      	sub	sp, #80	; 0x50
 8004a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	647b      	str	r3, [r7, #68]	; 0x44
 8004a48:	2300      	movs	r3, #0
 8004a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a54:	4b79      	ldr	r3, [pc, #484]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 030c 	and.w	r3, r3, #12
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d00d      	beq.n	8004a7c <HAL_RCC_GetSysClockFreq+0x40>
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	f200 80e1 	bhi.w	8004c28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_RCC_GetSysClockFreq+0x34>
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d003      	beq.n	8004a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a6e:	e0db      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a70:	4b73      	ldr	r3, [pc, #460]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a74:	e0db      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a76:	4b73      	ldr	r3, [pc, #460]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a7a:	e0d8      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a7c:	4b6f      	ldr	r3, [pc, #444]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a86:	4b6d      	ldr	r3, [pc, #436]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d063      	beq.n	8004b5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a92:	4b6a      	ldr	r3, [pc, #424]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	099b      	lsrs	r3, r3, #6
 8004a98:	2200      	movs	r2, #0
 8004a9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8004aaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004aae:	4622      	mov	r2, r4
 8004ab0:	462b      	mov	r3, r5
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f04f 0100 	mov.w	r1, #0
 8004aba:	0159      	lsls	r1, r3, #5
 8004abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac0:	0150      	lsls	r0, r2, #5
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	1a51      	subs	r1, r2, r1
 8004aca:	6139      	str	r1, [r7, #16]
 8004acc:	4629      	mov	r1, r5
 8004ace:	eb63 0301 	sbc.w	r3, r3, r1
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ae0:	4659      	mov	r1, fp
 8004ae2:	018b      	lsls	r3, r1, #6
 8004ae4:	4651      	mov	r1, sl
 8004ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aea:	4651      	mov	r1, sl
 8004aec:	018a      	lsls	r2, r1, #6
 8004aee:	4651      	mov	r1, sl
 8004af0:	ebb2 0801 	subs.w	r8, r2, r1
 8004af4:	4659      	mov	r1, fp
 8004af6:	eb63 0901 	sbc.w	r9, r3, r1
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b0e:	4690      	mov	r8, r2
 8004b10:	4699      	mov	r9, r3
 8004b12:	4623      	mov	r3, r4
 8004b14:	eb18 0303 	adds.w	r3, r8, r3
 8004b18:	60bb      	str	r3, [r7, #8]
 8004b1a:	462b      	mov	r3, r5
 8004b1c:	eb49 0303 	adc.w	r3, r9, r3
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b2e:	4629      	mov	r1, r5
 8004b30:	024b      	lsls	r3, r1, #9
 8004b32:	4621      	mov	r1, r4
 8004b34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b38:	4621      	mov	r1, r4
 8004b3a:	024a      	lsls	r2, r1, #9
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	4619      	mov	r1, r3
 8004b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b42:	2200      	movs	r2, #0
 8004b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b4c:	f7fc f82c 	bl	8000ba8 <__aeabi_uldivmod>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4613      	mov	r3, r2
 8004b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b58:	e058      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b5a:	4b38      	ldr	r3, [pc, #224]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	099b      	lsrs	r3, r3, #6
 8004b60:	2200      	movs	r2, #0
 8004b62:	4618      	mov	r0, r3
 8004b64:	4611      	mov	r1, r2
 8004b66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b6a:	623b      	str	r3, [r7, #32]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b74:	4642      	mov	r2, r8
 8004b76:	464b      	mov	r3, r9
 8004b78:	f04f 0000 	mov.w	r0, #0
 8004b7c:	f04f 0100 	mov.w	r1, #0
 8004b80:	0159      	lsls	r1, r3, #5
 8004b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b86:	0150      	lsls	r0, r2, #5
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b92:	4649      	mov	r1, r9
 8004b94:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ba4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ba8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bac:	ebb2 040a 	subs.w	r4, r2, sl
 8004bb0:	eb63 050b 	sbc.w	r5, r3, fp
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	00eb      	lsls	r3, r5, #3
 8004bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bc2:	00e2      	lsls	r2, r4, #3
 8004bc4:	4614      	mov	r4, r2
 8004bc6:	461d      	mov	r5, r3
 8004bc8:	4643      	mov	r3, r8
 8004bca:	18e3      	adds	r3, r4, r3
 8004bcc:	603b      	str	r3, [r7, #0]
 8004bce:	464b      	mov	r3, r9
 8004bd0:	eb45 0303 	adc.w	r3, r5, r3
 8004bd4:	607b      	str	r3, [r7, #4]
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004be2:	4629      	mov	r1, r5
 8004be4:	028b      	lsls	r3, r1, #10
 8004be6:	4621      	mov	r1, r4
 8004be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bec:	4621      	mov	r1, r4
 8004bee:	028a      	lsls	r2, r1, #10
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	61fa      	str	r2, [r7, #28]
 8004bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c00:	f7fb ffd2 	bl	8000ba8 <__aeabi_uldivmod>
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	4613      	mov	r3, r2
 8004c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	0c1b      	lsrs	r3, r3, #16
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	3301      	adds	r3, #1
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c26:	e002      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3750      	adds	r7, #80	; 0x50
 8004c34:	46bd      	mov	sp, r7
 8004c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	00f42400 	.word	0x00f42400
 8004c44:	007a1200 	.word	0x007a1200

08004c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c4c:	4b03      	ldr	r3, [pc, #12]	; (8004c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	20000000 	.word	0x20000000

08004c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c64:	f7ff fff0 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	0a9b      	lsrs	r3, r3, #10
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	4903      	ldr	r1, [pc, #12]	; (8004c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c76:	5ccb      	ldrb	r3, [r1, r3]
 8004c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40023800 	.word	0x40023800
 8004c84:	08011d4c 	.word	0x08011d4c

08004c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c8c:	f7ff ffdc 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8004c90:	4602      	mov	r2, r0
 8004c92:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	0b5b      	lsrs	r3, r3, #13
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	4903      	ldr	r1, [pc, #12]	; (8004cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	08011d4c 	.word	0x08011d4c

08004cb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	220f      	movs	r2, #15
 8004cbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004cc0:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <HAL_RCC_GetClockConfig+0x5c>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 0203 	and.w	r2, r3, #3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ccc:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <HAL_RCC_GetClockConfig+0x5c>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004cd8:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <HAL_RCC_GetClockConfig+0x5c>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ce4:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	08db      	lsrs	r3, r3, #3
 8004cea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004cf2:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <HAL_RCC_GetClockConfig+0x60>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0207 	and.w	r2, r3, #7
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	601a      	str	r2, [r3, #0]
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	40023c00 	.word	0x40023c00

08004d14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e07b      	b.n	8004e1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d108      	bne.n	8004d40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d36:	d009      	beq.n	8004d4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	61da      	str	r2, [r3, #28]
 8004d3e:	e005      	b.n	8004d4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d106      	bne.n	8004d6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7fc ff04 	bl	8001b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd0:	ea42 0103 	orr.w	r1, r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	0c1b      	lsrs	r3, r3, #16
 8004dea:	f003 0104 	and.w	r1, r3, #4
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	f003 0210 	and.w	r2, r3, #16
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	4613      	mov	r3, r2
 8004e34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d101      	bne.n	8004e48 <HAL_SPI_Transmit_DMA+0x20>
 8004e44:	2302      	movs	r3, #2
 8004e46:	e09b      	b.n	8004f80 <HAL_SPI_Transmit_DMA+0x158>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d002      	beq.n	8004e62 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e60:	e089      	b.n	8004f76 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <HAL_SPI_Transmit_DMA+0x46>
 8004e68:	88fb      	ldrh	r3, [r7, #6]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d102      	bne.n	8004e74 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e72:	e080      	b.n	8004f76 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2203      	movs	r2, #3
 8004e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	88fa      	ldrh	r2, [r7, #6]
 8004e8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	88fa      	ldrh	r2, [r7, #6]
 8004e92:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eba:	d10f      	bne.n	8004edc <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee0:	4a29      	ldr	r2, [pc, #164]	; (8004f88 <HAL_SPI_Transmit_DMA+0x160>)
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee8:	4a28      	ldr	r2, [pc, #160]	; (8004f8c <HAL_SPI_Transmit_DMA+0x164>)
 8004eea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef0:	4a27      	ldr	r2, [pc, #156]	; (8004f90 <HAL_SPI_Transmit_DMA+0x168>)
 8004ef2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef8:	2200      	movs	r2, #0
 8004efa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f04:	4619      	mov	r1, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	330c      	adds	r3, #12
 8004f0c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f12:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004f14:	f7fd fb1a 	bl	800254c <HAL_DMA_Start_IT>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00c      	beq.n	8004f38 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f22:	f043 0210 	orr.w	r2, r3, #16
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004f36:	e01e      	b.n	8004f76 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f42:	2b40      	cmp	r3, #64	; 0x40
 8004f44:	d007      	beq.n	8004f56 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f54:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0220 	orr.w	r2, r2, #32
 8004f64:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0202 	orr.w	r2, r2, #2
 8004f74:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	08005595 	.word	0x08005595
 8004f8c:	080053b5 	.word	0x080053b5
 8004f90:	080055e9 	.word	0x080055e9

08004f94 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d110      	bne.n	8004fd0 <HAL_SPI_Receive_DMA+0x3c>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fb6:	d10b      	bne.n	8004fd0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2204      	movs	r2, #4
 8004fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 f8ac 	bl	8005124 <HAL_SPI_TransmitReceive_DMA>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	e09f      	b.n	8005110 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d101      	bne.n	8004fde <HAL_SPI_Receive_DMA+0x4a>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	e098      	b.n	8005110 <HAL_SPI_Receive_DMA+0x17c>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d002      	beq.n	8004ff8 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ff6:	e086      	b.n	8005106 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <HAL_SPI_Receive_DMA+0x70>
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d102      	bne.n	800500a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005008:	e07d      	b.n	8005106 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2204      	movs	r2, #4
 800500e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	88fa      	ldrh	r2, [r7, #6]
 8005022:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	88fa      	ldrh	r2, [r7, #6]
 8005028:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800504a:	d10f      	bne.n	800506c <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800505a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800506a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005070:	4a29      	ldr	r2, [pc, #164]	; (8005118 <HAL_SPI_Receive_DMA+0x184>)
 8005072:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005078:	4a28      	ldr	r2, [pc, #160]	; (800511c <HAL_SPI_Receive_DMA+0x188>)
 800507a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005080:	4a27      	ldr	r2, [pc, #156]	; (8005120 <HAL_SPI_Receive_DMA+0x18c>)
 8005082:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005088:	2200      	movs	r2, #0
 800508a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	330c      	adds	r3, #12
 8005096:	4619      	mov	r1, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80050a4:	f7fd fa52 	bl	800254c <HAL_DMA_Start_IT>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00c      	beq.n	80050c8 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b2:	f043 0210 	orr.w	r2, r3, #16
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80050c6:	e01e      	b.n	8005106 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d2:	2b40      	cmp	r3, #64	; 0x40
 80050d4:	d007      	beq.n	80050e6 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050e4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0220 	orr.w	r2, r2, #32
 80050f4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0201 	orr.w	r2, r2, #1
 8005104:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800510e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	080055b1 	.word	0x080055b1
 800511c:	0800545d 	.word	0x0800545d
 8005120:	080055e9 	.word	0x080055e9

08005124 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005140:	2302      	movs	r3, #2
 8005142:	e0e3      	b.n	800530c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005152:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800515a:	7dbb      	ldrb	r3, [r7, #22]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d00d      	beq.n	800517c <HAL_SPI_TransmitReceive_DMA+0x58>
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005166:	d106      	bne.n	8005176 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d102      	bne.n	8005176 <HAL_SPI_TransmitReceive_DMA+0x52>
 8005170:	7dbb      	ldrb	r3, [r7, #22]
 8005172:	2b04      	cmp	r3, #4
 8005174:	d002      	beq.n	800517c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005176:	2302      	movs	r3, #2
 8005178:	75fb      	strb	r3, [r7, #23]
    goto error;
 800517a:	e0c2      	b.n	8005302 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005188:	887b      	ldrh	r3, [r7, #2]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d102      	bne.n	8005194 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005192:	e0b6      	b.n	8005302 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b04      	cmp	r3, #4
 800519e:	d003      	beq.n	80051a8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2205      	movs	r2, #5
 80051a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	887a      	ldrh	r2, [r7, #2]
 80051b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	887a      	ldrh	r2, [r7, #2]
 80051be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	887a      	ldrh	r2, [r7, #2]
 80051ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	887a      	ldrh	r2, [r7, #2]
 80051d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d108      	bne.n	80051fc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ee:	4a49      	ldr	r2, [pc, #292]	; (8005314 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f6:	4a48      	ldr	r2, [pc, #288]	; (8005318 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80051f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80051fa:	e007      	b.n	800520c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005200:	4a46      	ldr	r2, [pc, #280]	; (800531c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8005202:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005208:	4a45      	ldr	r2, [pc, #276]	; (8005320 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800520a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005210:	4a44      	ldr	r2, [pc, #272]	; (8005324 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8005212:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005218:	2200      	movs	r2, #0
 800521a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	4619      	mov	r1, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005232:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005234:	f7fd f98a 	bl	800254c <HAL_DMA_Start_IT>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00c      	beq.n	8005258 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005242:	f043 0210 	orr.w	r2, r3, #16
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005256:	e054      	b.n	8005302 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0201 	orr.w	r2, r2, #1
 8005266:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800526c:	2200      	movs	r2, #0
 800526e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005274:	2200      	movs	r2, #0
 8005276:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527c:	2200      	movs	r2, #0
 800527e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005284:	2200      	movs	r2, #0
 8005286:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005290:	4619      	mov	r1, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	330c      	adds	r3, #12
 8005298:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800529e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80052a0:	f7fd f954 	bl	800254c <HAL_DMA_Start_IT>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00c      	beq.n	80052c4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ae:	f043 0210 	orr.w	r2, r3, #16
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80052c2:	e01e      	b.n	8005302 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ce:	2b40      	cmp	r3, #64	; 0x40
 80052d0:	d007      	beq.n	80052e2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052e0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0220 	orr.w	r2, r2, #32
 80052f0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0202 	orr.w	r2, r2, #2
 8005300:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800530a:	7dfb      	ldrb	r3, [r7, #23]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	080055b1 	.word	0x080055b1
 8005318:	0800545d 	.word	0x0800545d
 800531c:	080055cd 	.word	0x080055cd
 8005320:	08005505 	.word	0x08005505
 8005324:	080055e9 	.word	0x080055e9

08005328 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053c2:	f7fc ff03 	bl	80021cc <HAL_GetTick>
 80053c6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d6:	d03b      	beq.n	8005450 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0220 	bic.w	r2, r2, #32
 80053e6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0202 	bic.w	r2, r2, #2
 80053f6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	2164      	movs	r1, #100	; 0x64
 80053fc:	6978      	ldr	r0, [r7, #20]
 80053fe:	f000 fa01 	bl	8005804 <SPI_EndRxTxTransaction>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d005      	beq.n	8005414 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540c:	f043 0220 	orr.w	r2, r3, #32
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10a      	bne.n	8005432 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2200      	movs	r2, #0
 8005436:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005448:	6978      	ldr	r0, [r7, #20]
 800544a:	f7ff ffa9 	bl	80053a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800544e:	e002      	b.n	8005456 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005450:	6978      	ldr	r0, [r7, #20]
 8005452:	f7ff ff69 	bl	8005328 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005468:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800546a:	f7fc feaf 	bl	80021cc <HAL_GetTick>
 800546e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547e:	d03b      	beq.n	80054f8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0220 	bic.w	r2, r2, #32
 800548e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10d      	bne.n	80054b4 <SPI_DMAReceiveCplt+0x58>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a0:	d108      	bne.n	80054b4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0203 	bic.w	r2, r2, #3
 80054b0:	605a      	str	r2, [r3, #4]
 80054b2:	e007      	b.n	80054c4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0201 	bic.w	r2, r2, #1
 80054c2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	2164      	movs	r1, #100	; 0x64
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 f935 	bl	8005738 <SPI_EndRxTransaction>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f7ff ff55 	bl	80053a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80054f6:	e002      	b.n	80054fe <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f7ff ff1f 	bl	800533c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005512:	f7fc fe5b 	bl	80021cc <HAL_GetTick>
 8005516:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005526:	d02f      	beq.n	8005588 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0220 	bic.w	r2, r2, #32
 8005536:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	2164      	movs	r1, #100	; 0x64
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f961 	bl	8005804 <SPI_EndRxTxTransaction>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554c:	f043 0220 	orr.w	r2, r3, #32
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0203 	bic.w	r2, r2, #3
 8005562:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f7ff ff0d 	bl	80053a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005586:	e002      	b.n	800558e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7ff fee1 	bl	8005350 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f7ff fede 	bl	8005364 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055a8:	bf00      	nop
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f7ff feda 	bl	8005378 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f7ff fed6 	bl	800538c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055e0:	bf00      	nop
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0203 	bic.w	r2, r2, #3
 8005604:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560a:	f043 0210 	orr.w	r2, r3, #16
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f7ff fec0 	bl	80053a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005620:	bf00      	nop
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	4613      	mov	r3, r2
 8005636:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005638:	f7fc fdc8 	bl	80021cc <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	4413      	add	r3, r2
 8005646:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005648:	f7fc fdc0 	bl	80021cc <HAL_GetTick>
 800564c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800564e:	4b39      	ldr	r3, [pc, #228]	; (8005734 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	015b      	lsls	r3, r3, #5
 8005654:	0d1b      	lsrs	r3, r3, #20
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	fb02 f303 	mul.w	r3, r2, r3
 800565c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800565e:	e054      	b.n	800570a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005666:	d050      	beq.n	800570a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005668:	f7fc fdb0 	bl	80021cc <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	429a      	cmp	r2, r3
 8005676:	d902      	bls.n	800567e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d13d      	bne.n	80056fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800568c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005696:	d111      	bne.n	80056bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a0:	d004      	beq.n	80056ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056aa:	d107      	bne.n	80056bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c4:	d10f      	bne.n	80056e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e017      	b.n	800572a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	3b01      	subs	r3, #1
 8005708:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4013      	ands	r3, r2
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	bf0c      	ite	eq
 800571a:	2301      	moveq	r3, #1
 800571c:	2300      	movne	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	429a      	cmp	r2, r3
 8005726:	d19b      	bne.n	8005660 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000000 	.word	0x20000000

08005738 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800574c:	d111      	bne.n	8005772 <SPI_EndRxTransaction+0x3a>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005756:	d004      	beq.n	8005762 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005760:	d107      	bne.n	8005772 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005770:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800577a:	d12a      	bne.n	80057d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005784:	d012      	beq.n	80057ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2200      	movs	r2, #0
 800578e:	2180      	movs	r1, #128	; 0x80
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f7ff ff49 	bl	8005628 <SPI_WaitFlagStateUntilTimeout>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d02d      	beq.n	80057f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a0:	f043 0220 	orr.w	r2, r3, #32
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e026      	b.n	80057fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2200      	movs	r2, #0
 80057b4:	2101      	movs	r1, #1
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f7ff ff36 	bl	8005628 <SPI_WaitFlagStateUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01a      	beq.n	80057f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c6:	f043 0220 	orr.w	r2, r3, #32
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e013      	b.n	80057fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2200      	movs	r2, #0
 80057da:	2101      	movs	r1, #1
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f7ff ff23 	bl	8005628 <SPI_WaitFlagStateUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ec:	f043 0220 	orr.w	r2, r3, #32
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e000      	b.n	80057fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af02      	add	r7, sp, #8
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005810:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <SPI_EndRxTxTransaction+0x7c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a1b      	ldr	r2, [pc, #108]	; (8005884 <SPI_EndRxTxTransaction+0x80>)
 8005816:	fba2 2303 	umull	r2, r3, r2, r3
 800581a:	0d5b      	lsrs	r3, r3, #21
 800581c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005820:	fb02 f303 	mul.w	r3, r2, r3
 8005824:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800582e:	d112      	bne.n	8005856 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2200      	movs	r2, #0
 8005838:	2180      	movs	r1, #128	; 0x80
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f7ff fef4 	bl	8005628 <SPI_WaitFlagStateUntilTimeout>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d016      	beq.n	8005874 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584a:	f043 0220 	orr.w	r2, r3, #32
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e00f      	b.n	8005876 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	3b01      	subs	r3, #1
 8005860:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586c:	2b80      	cmp	r3, #128	; 0x80
 800586e:	d0f2      	beq.n	8005856 <SPI_EndRxTxTransaction+0x52>
 8005870:	e000      	b.n	8005874 <SPI_EndRxTxTransaction+0x70>
        break;
 8005872:	bf00      	nop
  }

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000000 	.word	0x20000000
 8005884:	165e9f81 	.word	0x165e9f81

08005888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e041      	b.n	800591e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fc fa0c 	bl	8001ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4619      	mov	r1, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	f000 f9ce 	bl	8005c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b01      	cmp	r3, #1
 800593a:	d001      	beq.n	8005940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e04e      	b.n	80059de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a23      	ldr	r2, [pc, #140]	; (80059ec <HAL_TIM_Base_Start_IT+0xc4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d022      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596a:	d01d      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a1f      	ldr	r2, [pc, #124]	; (80059f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d018      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a1e      	ldr	r2, [pc, #120]	; (80059f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00e      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a1b      	ldr	r2, [pc, #108]	; (80059fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d009      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a19      	ldr	r2, [pc, #100]	; (8005a00 <HAL_TIM_Base_Start_IT+0xd8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d004      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x80>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a18      	ldr	r2, [pc, #96]	; (8005a04 <HAL_TIM_Base_Start_IT+0xdc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d111      	bne.n	80059cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b06      	cmp	r3, #6
 80059b8:	d010      	beq.n	80059dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f042 0201 	orr.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ca:	e007      	b.n	80059dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40010000 	.word	0x40010000
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40000800 	.word	0x40000800
 80059f8:	40000c00 	.word	0x40000c00
 80059fc:	40010400 	.word	0x40010400
 8005a00:	40014000 	.word	0x40014000
 8005a04:	40001800 	.word	0x40001800

08005a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d122      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d11b      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0202 	mvn.w	r2, #2
 8005a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f8ee 	bl	8005c2c <HAL_TIM_IC_CaptureCallback>
 8005a50:	e005      	b.n	8005a5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f8e0 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f8f1 	bl	8005c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d122      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	d11b      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0204 	mvn.w	r2, #4
 8005a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f8c4 	bl	8005c2c <HAL_TIM_IC_CaptureCallback>
 8005aa4:	e005      	b.n	8005ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f8b6 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f8c7 	bl	8005c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d122      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d11b      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f06f 0208 	mvn.w	r2, #8
 8005adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2204      	movs	r2, #4
 8005ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f89a 	bl	8005c2c <HAL_TIM_IC_CaptureCallback>
 8005af8:	e005      	b.n	8005b06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f88c 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f89d 	bl	8005c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	2b10      	cmp	r3, #16
 8005b18:	d122      	bne.n	8005b60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f003 0310 	and.w	r3, r3, #16
 8005b24:	2b10      	cmp	r3, #16
 8005b26:	d11b      	bne.n	8005b60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f06f 0210 	mvn.w	r2, #16
 8005b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2208      	movs	r2, #8
 8005b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f870 	bl	8005c2c <HAL_TIM_IC_CaptureCallback>
 8005b4c:	e005      	b.n	8005b5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f862 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f873 	bl	8005c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d10e      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d107      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f06f 0201 	mvn.w	r2, #1
 8005b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fb ffb0 	bl	8001aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b96:	2b80      	cmp	r3, #128	; 0x80
 8005b98:	d10e      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba4:	2b80      	cmp	r3, #128	; 0x80
 8005ba6:	d107      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f97e 	bl	8005eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc2:	2b40      	cmp	r3, #64	; 0x40
 8005bc4:	d10e      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd0:	2b40      	cmp	r3, #64	; 0x40
 8005bd2:	d107      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f838 	bl	8005c54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	d10e      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b20      	cmp	r3, #32
 8005bfe:	d107      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0220 	mvn.w	r2, #32
 8005c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f948 	bl	8005ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c10:	bf00      	nop
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a40      	ldr	r2, [pc, #256]	; (8005d7c <TIM_Base_SetConfig+0x114>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d013      	beq.n	8005ca8 <TIM_Base_SetConfig+0x40>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c86:	d00f      	beq.n	8005ca8 <TIM_Base_SetConfig+0x40>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a3d      	ldr	r2, [pc, #244]	; (8005d80 <TIM_Base_SetConfig+0x118>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d00b      	beq.n	8005ca8 <TIM_Base_SetConfig+0x40>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a3c      	ldr	r2, [pc, #240]	; (8005d84 <TIM_Base_SetConfig+0x11c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d007      	beq.n	8005ca8 <TIM_Base_SetConfig+0x40>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a3b      	ldr	r2, [pc, #236]	; (8005d88 <TIM_Base_SetConfig+0x120>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d003      	beq.n	8005ca8 <TIM_Base_SetConfig+0x40>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a3a      	ldr	r2, [pc, #232]	; (8005d8c <TIM_Base_SetConfig+0x124>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d108      	bne.n	8005cba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a2f      	ldr	r2, [pc, #188]	; (8005d7c <TIM_Base_SetConfig+0x114>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d02b      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc8:	d027      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a2c      	ldr	r2, [pc, #176]	; (8005d80 <TIM_Base_SetConfig+0x118>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d023      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a2b      	ldr	r2, [pc, #172]	; (8005d84 <TIM_Base_SetConfig+0x11c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d01f      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a2a      	ldr	r2, [pc, #168]	; (8005d88 <TIM_Base_SetConfig+0x120>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d01b      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a29      	ldr	r2, [pc, #164]	; (8005d8c <TIM_Base_SetConfig+0x124>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d017      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a28      	ldr	r2, [pc, #160]	; (8005d90 <TIM_Base_SetConfig+0x128>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d013      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a27      	ldr	r2, [pc, #156]	; (8005d94 <TIM_Base_SetConfig+0x12c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00f      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a26      	ldr	r2, [pc, #152]	; (8005d98 <TIM_Base_SetConfig+0x130>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00b      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a25      	ldr	r2, [pc, #148]	; (8005d9c <TIM_Base_SetConfig+0x134>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d007      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a24      	ldr	r2, [pc, #144]	; (8005da0 <TIM_Base_SetConfig+0x138>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d003      	beq.n	8005d1a <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a23      	ldr	r2, [pc, #140]	; (8005da4 <TIM_Base_SetConfig+0x13c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d108      	bne.n	8005d2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a0a      	ldr	r2, [pc, #40]	; (8005d7c <TIM_Base_SetConfig+0x114>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d003      	beq.n	8005d60 <TIM_Base_SetConfig+0xf8>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a0c      	ldr	r2, [pc, #48]	; (8005d8c <TIM_Base_SetConfig+0x124>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d103      	bne.n	8005d68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	615a      	str	r2, [r3, #20]
}
 8005d6e:	bf00      	nop
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40010000 	.word	0x40010000
 8005d80:	40000400 	.word	0x40000400
 8005d84:	40000800 	.word	0x40000800
 8005d88:	40000c00 	.word	0x40000c00
 8005d8c:	40010400 	.word	0x40010400
 8005d90:	40014000 	.word	0x40014000
 8005d94:	40014400 	.word	0x40014400
 8005d98:	40014800 	.word	0x40014800
 8005d9c:	40001800 	.word	0x40001800
 8005da0:	40001c00 	.word	0x40001c00
 8005da4:	40002000 	.word	0x40002000

08005da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e05a      	b.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a21      	ldr	r2, [pc, #132]	; (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d022      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e0c:	d01d      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a1d      	ldr	r2, [pc, #116]	; (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d018      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1b      	ldr	r2, [pc, #108]	; (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d013      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1a      	ldr	r2, [pc, #104]	; (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00e      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a18      	ldr	r2, [pc, #96]	; (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d009      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a17      	ldr	r2, [pc, #92]	; (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d004      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a15      	ldr	r2, [pc, #84]	; (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d10c      	bne.n	8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40010000 	.word	0x40010000
 8005e88:	40000400 	.word	0x40000400
 8005e8c:	40000800 	.word	0x40000800
 8005e90:	40000c00 	.word	0x40000c00
 8005e94:	40010400 	.word	0x40010400
 8005e98:	40014000 	.word	0x40014000
 8005e9c:	40001800 	.word	0x40001800

08005ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e03f      	b.n	8005f5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7fb ff14 	bl	8001d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2224      	movs	r2, #36	; 0x24
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f829 	bl	8005f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	691a      	ldr	r2, [r3, #16]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695a      	ldr	r2, [r3, #20]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f68:	b0c0      	sub	sp, #256	; 0x100
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f80:	68d9      	ldr	r1, [r3, #12]
 8005f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	ea40 0301 	orr.w	r3, r0, r1
 8005f8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fbc:	f021 010c 	bic.w	r1, r1, #12
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fca:	430b      	orrs	r3, r1
 8005fcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fde:	6999      	ldr	r1, [r3, #24]
 8005fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	ea40 0301 	orr.w	r3, r0, r1
 8005fea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4b8f      	ldr	r3, [pc, #572]	; (8006230 <UART_SetConfig+0x2cc>)
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d005      	beq.n	8006004 <UART_SetConfig+0xa0>
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	4b8d      	ldr	r3, [pc, #564]	; (8006234 <UART_SetConfig+0x2d0>)
 8006000:	429a      	cmp	r2, r3
 8006002:	d104      	bne.n	800600e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006004:	f7fe fe40 	bl	8004c88 <HAL_RCC_GetPCLK2Freq>
 8006008:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800600c:	e003      	b.n	8006016 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800600e:	f7fe fe27 	bl	8004c60 <HAL_RCC_GetPCLK1Freq>
 8006012:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006020:	f040 810c 	bne.w	800623c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006028:	2200      	movs	r2, #0
 800602a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800602e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006032:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006036:	4622      	mov	r2, r4
 8006038:	462b      	mov	r3, r5
 800603a:	1891      	adds	r1, r2, r2
 800603c:	65b9      	str	r1, [r7, #88]	; 0x58
 800603e:	415b      	adcs	r3, r3
 8006040:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006042:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006046:	4621      	mov	r1, r4
 8006048:	eb12 0801 	adds.w	r8, r2, r1
 800604c:	4629      	mov	r1, r5
 800604e:	eb43 0901 	adc.w	r9, r3, r1
 8006052:	f04f 0200 	mov.w	r2, #0
 8006056:	f04f 0300 	mov.w	r3, #0
 800605a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800605e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006066:	4690      	mov	r8, r2
 8006068:	4699      	mov	r9, r3
 800606a:	4623      	mov	r3, r4
 800606c:	eb18 0303 	adds.w	r3, r8, r3
 8006070:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006074:	462b      	mov	r3, r5
 8006076:	eb49 0303 	adc.w	r3, r9, r3
 800607a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800607e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800608a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800608e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006092:	460b      	mov	r3, r1
 8006094:	18db      	adds	r3, r3, r3
 8006096:	653b      	str	r3, [r7, #80]	; 0x50
 8006098:	4613      	mov	r3, r2
 800609a:	eb42 0303 	adc.w	r3, r2, r3
 800609e:	657b      	str	r3, [r7, #84]	; 0x54
 80060a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060a8:	f7fa fd7e 	bl	8000ba8 <__aeabi_uldivmod>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4b61      	ldr	r3, [pc, #388]	; (8006238 <UART_SetConfig+0x2d4>)
 80060b2:	fba3 2302 	umull	r2, r3, r3, r2
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	011c      	lsls	r4, r3, #4
 80060ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060be:	2200      	movs	r2, #0
 80060c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060cc:	4642      	mov	r2, r8
 80060ce:	464b      	mov	r3, r9
 80060d0:	1891      	adds	r1, r2, r2
 80060d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80060d4:	415b      	adcs	r3, r3
 80060d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060dc:	4641      	mov	r1, r8
 80060de:	eb12 0a01 	adds.w	sl, r2, r1
 80060e2:	4649      	mov	r1, r9
 80060e4:	eb43 0b01 	adc.w	fp, r3, r1
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060fc:	4692      	mov	sl, r2
 80060fe:	469b      	mov	fp, r3
 8006100:	4643      	mov	r3, r8
 8006102:	eb1a 0303 	adds.w	r3, sl, r3
 8006106:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800610a:	464b      	mov	r3, r9
 800610c:	eb4b 0303 	adc.w	r3, fp, r3
 8006110:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006120:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006124:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006128:	460b      	mov	r3, r1
 800612a:	18db      	adds	r3, r3, r3
 800612c:	643b      	str	r3, [r7, #64]	; 0x40
 800612e:	4613      	mov	r3, r2
 8006130:	eb42 0303 	adc.w	r3, r2, r3
 8006134:	647b      	str	r3, [r7, #68]	; 0x44
 8006136:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800613a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800613e:	f7fa fd33 	bl	8000ba8 <__aeabi_uldivmod>
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	4611      	mov	r1, r2
 8006148:	4b3b      	ldr	r3, [pc, #236]	; (8006238 <UART_SetConfig+0x2d4>)
 800614a:	fba3 2301 	umull	r2, r3, r3, r1
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	2264      	movs	r2, #100	; 0x64
 8006152:	fb02 f303 	mul.w	r3, r2, r3
 8006156:	1acb      	subs	r3, r1, r3
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800615e:	4b36      	ldr	r3, [pc, #216]	; (8006238 <UART_SetConfig+0x2d4>)
 8006160:	fba3 2302 	umull	r2, r3, r3, r2
 8006164:	095b      	lsrs	r3, r3, #5
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800616c:	441c      	add	r4, r3
 800616e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006172:	2200      	movs	r2, #0
 8006174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006178:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800617c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006180:	4642      	mov	r2, r8
 8006182:	464b      	mov	r3, r9
 8006184:	1891      	adds	r1, r2, r2
 8006186:	63b9      	str	r1, [r7, #56]	; 0x38
 8006188:	415b      	adcs	r3, r3
 800618a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800618c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006190:	4641      	mov	r1, r8
 8006192:	1851      	adds	r1, r2, r1
 8006194:	6339      	str	r1, [r7, #48]	; 0x30
 8006196:	4649      	mov	r1, r9
 8006198:	414b      	adcs	r3, r1
 800619a:	637b      	str	r3, [r7, #52]	; 0x34
 800619c:	f04f 0200 	mov.w	r2, #0
 80061a0:	f04f 0300 	mov.w	r3, #0
 80061a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061a8:	4659      	mov	r1, fp
 80061aa:	00cb      	lsls	r3, r1, #3
 80061ac:	4651      	mov	r1, sl
 80061ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061b2:	4651      	mov	r1, sl
 80061b4:	00ca      	lsls	r2, r1, #3
 80061b6:	4610      	mov	r0, r2
 80061b8:	4619      	mov	r1, r3
 80061ba:	4603      	mov	r3, r0
 80061bc:	4642      	mov	r2, r8
 80061be:	189b      	adds	r3, r3, r2
 80061c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061c4:	464b      	mov	r3, r9
 80061c6:	460a      	mov	r2, r1
 80061c8:	eb42 0303 	adc.w	r3, r2, r3
 80061cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80061e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061e4:	460b      	mov	r3, r1
 80061e6:	18db      	adds	r3, r3, r3
 80061e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ea:	4613      	mov	r3, r2
 80061ec:	eb42 0303 	adc.w	r3, r2, r3
 80061f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80061fa:	f7fa fcd5 	bl	8000ba8 <__aeabi_uldivmod>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	4b0d      	ldr	r3, [pc, #52]	; (8006238 <UART_SetConfig+0x2d4>)
 8006204:	fba3 1302 	umull	r1, r3, r3, r2
 8006208:	095b      	lsrs	r3, r3, #5
 800620a:	2164      	movs	r1, #100	; 0x64
 800620c:	fb01 f303 	mul.w	r3, r1, r3
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	3332      	adds	r3, #50	; 0x32
 8006216:	4a08      	ldr	r2, [pc, #32]	; (8006238 <UART_SetConfig+0x2d4>)
 8006218:	fba2 2303 	umull	r2, r3, r2, r3
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	f003 0207 	and.w	r2, r3, #7
 8006222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4422      	add	r2, r4
 800622a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800622c:	e105      	b.n	800643a <UART_SetConfig+0x4d6>
 800622e:	bf00      	nop
 8006230:	40011000 	.word	0x40011000
 8006234:	40011400 	.word	0x40011400
 8006238:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800623c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006240:	2200      	movs	r2, #0
 8006242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006246:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800624a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800624e:	4642      	mov	r2, r8
 8006250:	464b      	mov	r3, r9
 8006252:	1891      	adds	r1, r2, r2
 8006254:	6239      	str	r1, [r7, #32]
 8006256:	415b      	adcs	r3, r3
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
 800625a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800625e:	4641      	mov	r1, r8
 8006260:	1854      	adds	r4, r2, r1
 8006262:	4649      	mov	r1, r9
 8006264:	eb43 0501 	adc.w	r5, r3, r1
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	00eb      	lsls	r3, r5, #3
 8006272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006276:	00e2      	lsls	r2, r4, #3
 8006278:	4614      	mov	r4, r2
 800627a:	461d      	mov	r5, r3
 800627c:	4643      	mov	r3, r8
 800627e:	18e3      	adds	r3, r4, r3
 8006280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006284:	464b      	mov	r3, r9
 8006286:	eb45 0303 	adc.w	r3, r5, r3
 800628a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800628e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800629a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	f04f 0300 	mov.w	r3, #0
 80062a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062aa:	4629      	mov	r1, r5
 80062ac:	008b      	lsls	r3, r1, #2
 80062ae:	4621      	mov	r1, r4
 80062b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062b4:	4621      	mov	r1, r4
 80062b6:	008a      	lsls	r2, r1, #2
 80062b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062bc:	f7fa fc74 	bl	8000ba8 <__aeabi_uldivmod>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	4b60      	ldr	r3, [pc, #384]	; (8006448 <UART_SetConfig+0x4e4>)
 80062c6:	fba3 2302 	umull	r2, r3, r3, r2
 80062ca:	095b      	lsrs	r3, r3, #5
 80062cc:	011c      	lsls	r4, r3, #4
 80062ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80062dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80062e0:	4642      	mov	r2, r8
 80062e2:	464b      	mov	r3, r9
 80062e4:	1891      	adds	r1, r2, r2
 80062e6:	61b9      	str	r1, [r7, #24]
 80062e8:	415b      	adcs	r3, r3
 80062ea:	61fb      	str	r3, [r7, #28]
 80062ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062f0:	4641      	mov	r1, r8
 80062f2:	1851      	adds	r1, r2, r1
 80062f4:	6139      	str	r1, [r7, #16]
 80062f6:	4649      	mov	r1, r9
 80062f8:	414b      	adcs	r3, r1
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	f04f 0200 	mov.w	r2, #0
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006308:	4659      	mov	r1, fp
 800630a:	00cb      	lsls	r3, r1, #3
 800630c:	4651      	mov	r1, sl
 800630e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006312:	4651      	mov	r1, sl
 8006314:	00ca      	lsls	r2, r1, #3
 8006316:	4610      	mov	r0, r2
 8006318:	4619      	mov	r1, r3
 800631a:	4603      	mov	r3, r0
 800631c:	4642      	mov	r2, r8
 800631e:	189b      	adds	r3, r3, r2
 8006320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006324:	464b      	mov	r3, r9
 8006326:	460a      	mov	r2, r1
 8006328:	eb42 0303 	adc.w	r3, r2, r3
 800632c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	67bb      	str	r3, [r7, #120]	; 0x78
 800633a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	f04f 0300 	mov.w	r3, #0
 8006344:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006348:	4649      	mov	r1, r9
 800634a:	008b      	lsls	r3, r1, #2
 800634c:	4641      	mov	r1, r8
 800634e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006352:	4641      	mov	r1, r8
 8006354:	008a      	lsls	r2, r1, #2
 8006356:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800635a:	f7fa fc25 	bl	8000ba8 <__aeabi_uldivmod>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	4b39      	ldr	r3, [pc, #228]	; (8006448 <UART_SetConfig+0x4e4>)
 8006364:	fba3 1302 	umull	r1, r3, r3, r2
 8006368:	095b      	lsrs	r3, r3, #5
 800636a:	2164      	movs	r1, #100	; 0x64
 800636c:	fb01 f303 	mul.w	r3, r1, r3
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	3332      	adds	r3, #50	; 0x32
 8006376:	4a34      	ldr	r2, [pc, #208]	; (8006448 <UART_SetConfig+0x4e4>)
 8006378:	fba2 2303 	umull	r2, r3, r2, r3
 800637c:	095b      	lsrs	r3, r3, #5
 800637e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006382:	441c      	add	r4, r3
 8006384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006388:	2200      	movs	r2, #0
 800638a:	673b      	str	r3, [r7, #112]	; 0x70
 800638c:	677a      	str	r2, [r7, #116]	; 0x74
 800638e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006392:	4642      	mov	r2, r8
 8006394:	464b      	mov	r3, r9
 8006396:	1891      	adds	r1, r2, r2
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	415b      	adcs	r3, r3
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063a2:	4641      	mov	r1, r8
 80063a4:	1851      	adds	r1, r2, r1
 80063a6:	6039      	str	r1, [r7, #0]
 80063a8:	4649      	mov	r1, r9
 80063aa:	414b      	adcs	r3, r1
 80063ac:	607b      	str	r3, [r7, #4]
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	f04f 0300 	mov.w	r3, #0
 80063b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063ba:	4659      	mov	r1, fp
 80063bc:	00cb      	lsls	r3, r1, #3
 80063be:	4651      	mov	r1, sl
 80063c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063c4:	4651      	mov	r1, sl
 80063c6:	00ca      	lsls	r2, r1, #3
 80063c8:	4610      	mov	r0, r2
 80063ca:	4619      	mov	r1, r3
 80063cc:	4603      	mov	r3, r0
 80063ce:	4642      	mov	r2, r8
 80063d0:	189b      	adds	r3, r3, r2
 80063d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80063d4:	464b      	mov	r3, r9
 80063d6:	460a      	mov	r2, r1
 80063d8:	eb42 0303 	adc.w	r3, r2, r3
 80063dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	663b      	str	r3, [r7, #96]	; 0x60
 80063e8:	667a      	str	r2, [r7, #100]	; 0x64
 80063ea:	f04f 0200 	mov.w	r2, #0
 80063ee:	f04f 0300 	mov.w	r3, #0
 80063f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80063f6:	4649      	mov	r1, r9
 80063f8:	008b      	lsls	r3, r1, #2
 80063fa:	4641      	mov	r1, r8
 80063fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006400:	4641      	mov	r1, r8
 8006402:	008a      	lsls	r2, r1, #2
 8006404:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006408:	f7fa fbce 	bl	8000ba8 <__aeabi_uldivmod>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4b0d      	ldr	r3, [pc, #52]	; (8006448 <UART_SetConfig+0x4e4>)
 8006412:	fba3 1302 	umull	r1, r3, r3, r2
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	2164      	movs	r1, #100	; 0x64
 800641a:	fb01 f303 	mul.w	r3, r1, r3
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	011b      	lsls	r3, r3, #4
 8006422:	3332      	adds	r3, #50	; 0x32
 8006424:	4a08      	ldr	r2, [pc, #32]	; (8006448 <UART_SetConfig+0x4e4>)
 8006426:	fba2 2303 	umull	r2, r3, r2, r3
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	f003 020f 	and.w	r2, r3, #15
 8006430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4422      	add	r2, r4
 8006438:	609a      	str	r2, [r3, #8]
}
 800643a:	bf00      	nop
 800643c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006440:	46bd      	mov	sp, r7
 8006442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006446:	bf00      	nop
 8006448:	51eb851f 	.word	0x51eb851f

0800644c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800644c:	b084      	sub	sp, #16
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	f107 001c 	add.w	r0, r7, #28
 800645a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	2b01      	cmp	r3, #1
 8006462:	d122      	bne.n	80064aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800648c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648e:	2b01      	cmp	r3, #1
 8006490:	d105      	bne.n	800649e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 fbee 	bl	8007c80 <USB_CoreReset>
 80064a4:	4603      	mov	r3, r0
 80064a6:	73fb      	strb	r3, [r7, #15]
 80064a8:	e01a      	b.n	80064e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f001 fbe2 	bl	8007c80 <USB_CoreReset>
 80064bc:	4603      	mov	r3, r0
 80064be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d106      	bne.n	80064d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	639a      	str	r2, [r3, #56]	; 0x38
 80064d2:	e005      	b.n	80064e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d10b      	bne.n	80064fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f043 0206 	orr.w	r2, r3, #6
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f043 0220 	orr.w	r2, r3, #32
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800650a:	b004      	add	sp, #16
 800650c:	4770      	bx	lr
	...

08006510 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	4613      	mov	r3, r2
 800651c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800651e:	79fb      	ldrb	r3, [r7, #7]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d165      	bne.n	80065f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4a41      	ldr	r2, [pc, #260]	; (800662c <USB_SetTurnaroundTime+0x11c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d906      	bls.n	800653a <USB_SetTurnaroundTime+0x2a>
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	4a40      	ldr	r2, [pc, #256]	; (8006630 <USB_SetTurnaroundTime+0x120>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d202      	bcs.n	800653a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006534:	230f      	movs	r3, #15
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	e062      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4a3c      	ldr	r2, [pc, #240]	; (8006630 <USB_SetTurnaroundTime+0x120>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d306      	bcc.n	8006550 <USB_SetTurnaroundTime+0x40>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	4a3b      	ldr	r2, [pc, #236]	; (8006634 <USB_SetTurnaroundTime+0x124>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d202      	bcs.n	8006550 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800654a:	230e      	movs	r3, #14
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	e057      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	4a38      	ldr	r2, [pc, #224]	; (8006634 <USB_SetTurnaroundTime+0x124>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d306      	bcc.n	8006566 <USB_SetTurnaroundTime+0x56>
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4a37      	ldr	r2, [pc, #220]	; (8006638 <USB_SetTurnaroundTime+0x128>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d202      	bcs.n	8006566 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006560:	230d      	movs	r3, #13
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	e04c      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	4a33      	ldr	r2, [pc, #204]	; (8006638 <USB_SetTurnaroundTime+0x128>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d306      	bcc.n	800657c <USB_SetTurnaroundTime+0x6c>
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	4a32      	ldr	r2, [pc, #200]	; (800663c <USB_SetTurnaroundTime+0x12c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d802      	bhi.n	800657c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006576:	230c      	movs	r3, #12
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	e041      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4a2f      	ldr	r2, [pc, #188]	; (800663c <USB_SetTurnaroundTime+0x12c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d906      	bls.n	8006592 <USB_SetTurnaroundTime+0x82>
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4a2e      	ldr	r2, [pc, #184]	; (8006640 <USB_SetTurnaroundTime+0x130>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d802      	bhi.n	8006592 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800658c:	230b      	movs	r3, #11
 800658e:	617b      	str	r3, [r7, #20]
 8006590:	e036      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	4a2a      	ldr	r2, [pc, #168]	; (8006640 <USB_SetTurnaroundTime+0x130>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d906      	bls.n	80065a8 <USB_SetTurnaroundTime+0x98>
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4a29      	ldr	r2, [pc, #164]	; (8006644 <USB_SetTurnaroundTime+0x134>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d802      	bhi.n	80065a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80065a2:	230a      	movs	r3, #10
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	e02b      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	4a26      	ldr	r2, [pc, #152]	; (8006644 <USB_SetTurnaroundTime+0x134>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d906      	bls.n	80065be <USB_SetTurnaroundTime+0xae>
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4a25      	ldr	r2, [pc, #148]	; (8006648 <USB_SetTurnaroundTime+0x138>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d202      	bcs.n	80065be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80065b8:	2309      	movs	r3, #9
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	e020      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	4a21      	ldr	r2, [pc, #132]	; (8006648 <USB_SetTurnaroundTime+0x138>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d306      	bcc.n	80065d4 <USB_SetTurnaroundTime+0xc4>
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	4a20      	ldr	r2, [pc, #128]	; (800664c <USB_SetTurnaroundTime+0x13c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d802      	bhi.n	80065d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80065ce:	2308      	movs	r3, #8
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	e015      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4a1d      	ldr	r2, [pc, #116]	; (800664c <USB_SetTurnaroundTime+0x13c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d906      	bls.n	80065ea <USB_SetTurnaroundTime+0xda>
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4a1c      	ldr	r2, [pc, #112]	; (8006650 <USB_SetTurnaroundTime+0x140>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d202      	bcs.n	80065ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80065e4:	2307      	movs	r3, #7
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	e00a      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80065ea:	2306      	movs	r3, #6
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	e007      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80065f0:	79fb      	ldrb	r3, [r7, #7]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d102      	bne.n	80065fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80065f6:	2309      	movs	r3, #9
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	e001      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80065fc:	2309      	movs	r3, #9
 80065fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	029b      	lsls	r3, r3, #10
 8006614:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006618:	431a      	orrs	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	00d8acbf 	.word	0x00d8acbf
 8006630:	00e4e1c0 	.word	0x00e4e1c0
 8006634:	00f42400 	.word	0x00f42400
 8006638:	01067380 	.word	0x01067380
 800663c:	011a499f 	.word	0x011a499f
 8006640:	01312cff 	.word	0x01312cff
 8006644:	014ca43f 	.word	0x014ca43f
 8006648:	016e3600 	.word	0x016e3600
 800664c:	01a6ab1f 	.word	0x01a6ab1f
 8006650:	01e84800 	.word	0x01e84800

08006654 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f043 0201 	orr.w	r2, r3, #1
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f023 0201 	bic.w	r2, r3, #1
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d115      	bne.n	80066e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066c6:	2001      	movs	r0, #1
 80066c8:	f7fb fd8c 	bl	80021e4 <HAL_Delay>
      ms++;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3301      	adds	r3, #1
 80066d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f001 fa45 	bl	8007b62 <USB_GetMode>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d01e      	beq.n	800671c <USB_SetCurrentMode+0x84>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2b31      	cmp	r3, #49	; 0x31
 80066e2:	d9f0      	bls.n	80066c6 <USB_SetCurrentMode+0x2e>
 80066e4:	e01a      	b.n	800671c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066e6:	78fb      	ldrb	r3, [r7, #3]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d115      	bne.n	8006718 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066f8:	2001      	movs	r0, #1
 80066fa:	f7fb fd73 	bl	80021e4 <HAL_Delay>
      ms++;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3301      	adds	r3, #1
 8006702:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 fa2c 	bl	8007b62 <USB_GetMode>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d005      	beq.n	800671c <USB_SetCurrentMode+0x84>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2b31      	cmp	r3, #49	; 0x31
 8006714:	d9f0      	bls.n	80066f8 <USB_SetCurrentMode+0x60>
 8006716:	e001      	b.n	800671c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e005      	b.n	8006728 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b32      	cmp	r3, #50	; 0x32
 8006720:	d101      	bne.n	8006726 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006730:	b084      	sub	sp, #16
 8006732:	b580      	push	{r7, lr}
 8006734:	b086      	sub	sp, #24
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800673e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800674a:	2300      	movs	r3, #0
 800674c:	613b      	str	r3, [r7, #16]
 800674e:	e009      	b.n	8006764 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	3340      	adds	r3, #64	; 0x40
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	2200      	movs	r2, #0
 800675c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	3301      	adds	r3, #1
 8006762:	613b      	str	r3, [r7, #16]
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	2b0e      	cmp	r3, #14
 8006768:	d9f2      	bls.n	8006750 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800676a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d11c      	bne.n	80067aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800677e:	f043 0302 	orr.w	r3, r3, #2
 8006782:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006788:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	639a      	str	r2, [r3, #56]	; 0x38
 80067a8:	e00b      	b.n	80067c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067c8:	461a      	mov	r2, r3
 80067ca:	2300      	movs	r3, #0
 80067cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d4:	4619      	mov	r1, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067dc:	461a      	mov	r2, r3
 80067de:	680b      	ldr	r3, [r1, #0]
 80067e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d10c      	bne.n	8006802 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80067e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d104      	bne.n	80067f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80067ee:	2100      	movs	r1, #0
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f965 	bl	8006ac0 <USB_SetDevSpeed>
 80067f6:	e008      	b.n	800680a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067f8:	2101      	movs	r1, #1
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f960 	bl	8006ac0 <USB_SetDevSpeed>
 8006800:	e003      	b.n	800680a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006802:	2103      	movs	r1, #3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f95b 	bl	8006ac0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800680a:	2110      	movs	r1, #16
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f8f3 	bl	80069f8 <USB_FlushTxFifo>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 f91f 	bl	8006a60 <USB_FlushRxFifo>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006832:	461a      	mov	r2, r3
 8006834:	2300      	movs	r3, #0
 8006836:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683e:	461a      	mov	r2, r3
 8006840:	2300      	movs	r3, #0
 8006842:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684a:	461a      	mov	r2, r3
 800684c:	2300      	movs	r3, #0
 800684e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006850:	2300      	movs	r3, #0
 8006852:	613b      	str	r3, [r7, #16]
 8006854:	e043      	b.n	80068de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800686c:	d118      	bne.n	80068a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10a      	bne.n	800688a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006880:	461a      	mov	r2, r3
 8006882:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	e013      	b.n	80068b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006896:	461a      	mov	r2, r3
 8006898:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	e008      	b.n	80068b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ac:	461a      	mov	r2, r3
 80068ae:	2300      	movs	r3, #0
 80068b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068be:	461a      	mov	r2, r3
 80068c0:	2300      	movs	r3, #0
 80068c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d0:	461a      	mov	r2, r3
 80068d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	3301      	adds	r3, #1
 80068dc:	613b      	str	r3, [r7, #16]
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d3b7      	bcc.n	8006856 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068e6:	2300      	movs	r3, #0
 80068e8:	613b      	str	r3, [r7, #16]
 80068ea:	e043      	b.n	8006974 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006902:	d118      	bne.n	8006936 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10a      	bne.n	8006920 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006916:	461a      	mov	r2, r3
 8006918:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	e013      	b.n	8006948 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692c:	461a      	mov	r2, r3
 800692e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	e008      	b.n	8006948 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006942:	461a      	mov	r2, r3
 8006944:	2300      	movs	r3, #0
 8006946:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006954:	461a      	mov	r2, r3
 8006956:	2300      	movs	r3, #0
 8006958:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006966:	461a      	mov	r2, r3
 8006968:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800696c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	3301      	adds	r3, #1
 8006972:	613b      	str	r3, [r7, #16]
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	429a      	cmp	r2, r3
 800697a:	d3b7      	bcc.n	80068ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800698a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800698e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800699c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d105      	bne.n	80069b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	f043 0210 	orr.w	r2, r3, #16
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	699a      	ldr	r2, [r3, #24]
 80069b4:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <USB_DevInit+0x2c4>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d005      	beq.n	80069ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	f043 0208 	orr.w	r2, r3, #8
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d107      	bne.n	80069e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069dc:	f043 0304 	orr.w	r3, r3, #4
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069f0:	b004      	add	sp, #16
 80069f2:	4770      	bx	lr
 80069f4:	803c3800 	.word	0x803c3800

080069f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4a13      	ldr	r2, [pc, #76]	; (8006a5c <USB_FlushTxFifo+0x64>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d901      	bls.n	8006a18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e01b      	b.n	8006a50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	daf2      	bge.n	8006a06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	019b      	lsls	r3, r3, #6
 8006a28:	f043 0220 	orr.w	r2, r3, #32
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3301      	adds	r3, #1
 8006a34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4a08      	ldr	r2, [pc, #32]	; (8006a5c <USB_FlushTxFifo+0x64>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d901      	bls.n	8006a42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e006      	b.n	8006a50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	d0f0      	beq.n	8006a30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	00030d40 	.word	0x00030d40

08006a60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4a11      	ldr	r2, [pc, #68]	; (8006abc <USB_FlushRxFifo+0x5c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d901      	bls.n	8006a7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e018      	b.n	8006ab0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	daf2      	bge.n	8006a6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2210      	movs	r2, #16
 8006a8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3301      	adds	r3, #1
 8006a94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4a08      	ldr	r2, [pc, #32]	; (8006abc <USB_FlushRxFifo+0x5c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d901      	bls.n	8006aa2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e006      	b.n	8006ab0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	f003 0310 	and.w	r3, r3, #16
 8006aaa:	2b10      	cmp	r3, #16
 8006aac:	d0f0      	beq.n	8006a90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	00030d40 	.word	0x00030d40

08006ac0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	68f9      	ldr	r1, [r7, #12]
 8006adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b087      	sub	sp, #28
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 0306 	and.w	r3, r3, #6
 8006b0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d102      	bne.n	8006b18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006b12:	2300      	movs	r3, #0
 8006b14:	75fb      	strb	r3, [r7, #23]
 8006b16:	e00a      	b.n	8006b2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d002      	beq.n	8006b24 <USB_GetDevSpeed+0x32>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2b06      	cmp	r3, #6
 8006b22:	d102      	bne.n	8006b2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006b24:	2302      	movs	r3, #2
 8006b26:	75fb      	strb	r3, [r7, #23]
 8006b28:	e001      	b.n	8006b2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006b2a:	230f      	movs	r3, #15
 8006b2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	371c      	adds	r7, #28
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	785b      	ldrb	r3, [r3, #1]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d13a      	bne.n	8006bce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5e:	69da      	ldr	r2, [r3, #28]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	f003 030f 	and.w	r3, r3, #15
 8006b68:	2101      	movs	r1, #1
 8006b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	68f9      	ldr	r1, [r7, #12]
 8006b72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b76:	4313      	orrs	r3, r2
 8006b78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d155      	bne.n	8006c3c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	791b      	ldrb	r3, [r3, #4]
 8006baa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006bac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	059b      	lsls	r3, r3, #22
 8006bb2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	0151      	lsls	r1, r2, #5
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	440a      	add	r2, r1
 8006bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	e036      	b.n	8006c3c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd4:	69da      	ldr	r2, [r3, #28]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	f003 030f 	and.w	r3, r3, #15
 8006bde:	2101      	movs	r1, #1
 8006be0:	fa01 f303 	lsl.w	r3, r1, r3
 8006be4:	041b      	lsls	r3, r3, #16
 8006be6:	68f9      	ldr	r1, [r7, #12]
 8006be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bec:	4313      	orrs	r3, r2
 8006bee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d11a      	bne.n	8006c3c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	791b      	ldrb	r3, [r3, #4]
 8006c20:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c22:	430b      	orrs	r3, r1
 8006c24:	4313      	orrs	r3, r2
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	0151      	lsls	r1, r2, #5
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	440a      	add	r2, r1
 8006c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c3a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
	...

08006c4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	785b      	ldrb	r3, [r3, #1]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d161      	bne.n	8006d2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c7e:	d11f      	bne.n	8006cc0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	0151      	lsls	r1, r2, #5
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	440a      	add	r2, r1
 8006c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	0151      	lsls	r1, r2, #5
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	440a      	add	r2, r1
 8006cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	f003 030f 	and.w	r3, r3, #15
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	43db      	mvns	r3, r3
 8006cda:	68f9      	ldr	r1, [r7, #12]
 8006cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cea:	69da      	ldr	r2, [r3, #28]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	f003 030f 	and.w	r3, r3, #15
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	43db      	mvns	r3, r3
 8006cfe:	68f9      	ldr	r1, [r7, #12]
 8006d00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d04:	4013      	ands	r3, r2
 8006d06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	0159      	lsls	r1, r3, #5
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	440b      	add	r3, r1
 8006d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d22:	4619      	mov	r1, r3
 8006d24:	4b35      	ldr	r3, [pc, #212]	; (8006dfc <USB_DeactivateEndpoint+0x1b0>)
 8006d26:	4013      	ands	r3, r2
 8006d28:	600b      	str	r3, [r1, #0]
 8006d2a:	e060      	b.n	8006dee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d42:	d11f      	bne.n	8006d84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	0151      	lsls	r1, r2, #5
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	440a      	add	r2, r1
 8006d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	0151      	lsls	r1, r2, #5
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	440a      	add	r2, r1
 8006d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	f003 030f 	and.w	r3, r3, #15
 8006d94:	2101      	movs	r1, #1
 8006d96:	fa01 f303 	lsl.w	r3, r1, r3
 8006d9a:	041b      	lsls	r3, r3, #16
 8006d9c:	43db      	mvns	r3, r3
 8006d9e:	68f9      	ldr	r1, [r7, #12]
 8006da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006da4:	4013      	ands	r3, r2
 8006da6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dae:	69da      	ldr	r2, [r3, #28]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	f003 030f 	and.w	r3, r3, #15
 8006db8:	2101      	movs	r1, #1
 8006dba:	fa01 f303 	lsl.w	r3, r1, r3
 8006dbe:	041b      	lsls	r3, r3, #16
 8006dc0:	43db      	mvns	r3, r3
 8006dc2:	68f9      	ldr	r1, [r7, #12]
 8006dc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dc8:	4013      	ands	r3, r2
 8006dca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	0159      	lsls	r1, r3, #5
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	440b      	add	r3, r1
 8006de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de6:	4619      	mov	r1, r3
 8006de8:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <USB_DeactivateEndpoint+0x1b4>)
 8006dea:	4013      	ands	r3, r2
 8006dec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	ec337800 	.word	0xec337800
 8006e00:	eff37800 	.word	0xeff37800

08006e04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b08a      	sub	sp, #40	; 0x28
 8006e08:	af02      	add	r7, sp, #8
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	785b      	ldrb	r3, [r3, #1]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	f040 815c 	bne.w	80070de <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d132      	bne.n	8006e94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	0151      	lsls	r1, r2, #5
 8006e40:	69fa      	ldr	r2, [r7, #28]
 8006e42:	440a      	add	r2, r1
 8006e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	0151      	lsls	r1, r2, #5
 8006e64:	69fa      	ldr	r2, [r7, #28]
 8006e66:	440a      	add	r2, r1
 8006e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	0151      	lsls	r1, r2, #5
 8006e84:	69fa      	ldr	r2, [r7, #28]
 8006e86:	440a      	add	r2, r1
 8006e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e8c:	0cdb      	lsrs	r3, r3, #19
 8006e8e:	04db      	lsls	r3, r3, #19
 8006e90:	6113      	str	r3, [r2, #16]
 8006e92:	e074      	b.n	8006f7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	0151      	lsls	r1, r2, #5
 8006ea6:	69fa      	ldr	r2, [r7, #28]
 8006ea8:	440a      	add	r2, r1
 8006eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eae:	0cdb      	lsrs	r3, r3, #19
 8006eb0:	04db      	lsls	r3, r3, #19
 8006eb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	0151      	lsls	r1, r2, #5
 8006ec6:	69fa      	ldr	r2, [r7, #28]
 8006ec8:	440a      	add	r2, r1
 8006eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ece:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ed2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ed6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	6999      	ldr	r1, [r3, #24]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	440b      	add	r3, r1
 8006ef0:	1e59      	subs	r1, r3, #1
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006efa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006efc:	4b9d      	ldr	r3, [pc, #628]	; (8007174 <USB_EPStartXfer+0x370>)
 8006efe:	400b      	ands	r3, r1
 8006f00:	69b9      	ldr	r1, [r7, #24]
 8006f02:	0148      	lsls	r0, r1, #5
 8006f04:	69f9      	ldr	r1, [r7, #28]
 8006f06:	4401      	add	r1, r0
 8006f08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1c:	691a      	ldr	r2, [r3, #16]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f26:	69b9      	ldr	r1, [r7, #24]
 8006f28:	0148      	lsls	r0, r1, #5
 8006f2a:	69f9      	ldr	r1, [r7, #28]
 8006f2c:	4401      	add	r1, r0
 8006f2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f32:	4313      	orrs	r3, r2
 8006f34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	791b      	ldrb	r3, [r3, #4]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d11f      	bne.n	8006f7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	69fa      	ldr	r2, [r7, #28]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006f5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	0151      	lsls	r1, r2, #5
 8006f70:	69fa      	ldr	r2, [r7, #28]
 8006f72:	440a      	add	r2, r1
 8006f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006f7e:	79fb      	ldrb	r3, [r7, #7]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d14b      	bne.n	800701c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d009      	beq.n	8006fa0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f98:	461a      	mov	r2, r3
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	791b      	ldrb	r3, [r3, #4]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d128      	bne.n	8006ffa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d110      	bne.n	8006fda <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	0151      	lsls	r1, r2, #5
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	440a      	add	r2, r1
 8006fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	e00f      	b.n	8006ffa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	0151      	lsls	r1, r2, #5
 8006fec:	69fa      	ldr	r2, [r7, #28]
 8006fee:	440a      	add	r2, r1
 8006ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ff8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	0151      	lsls	r1, r2, #5
 800700c:	69fa      	ldr	r2, [r7, #28]
 800700e:	440a      	add	r2, r1
 8007010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007014:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	e133      	b.n	8007284 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	69fa      	ldr	r2, [r7, #28]
 8007030:	440a      	add	r2, r1
 8007032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007036:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800703a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	791b      	ldrb	r3, [r3, #4]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d015      	beq.n	8007070 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 811b 	beq.w	8007284 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	f003 030f 	and.w	r3, r3, #15
 800705e:	2101      	movs	r1, #1
 8007060:	fa01 f303 	lsl.w	r3, r1, r3
 8007064:	69f9      	ldr	r1, [r7, #28]
 8007066:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800706a:	4313      	orrs	r3, r2
 800706c:	634b      	str	r3, [r1, #52]	; 0x34
 800706e:	e109      	b.n	8007284 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800707c:	2b00      	cmp	r3, #0
 800707e:	d110      	bne.n	80070a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	0151      	lsls	r1, r2, #5
 8007092:	69fa      	ldr	r2, [r7, #28]
 8007094:	440a      	add	r2, r1
 8007096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800709a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	e00f      	b.n	80070c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	0151      	lsls	r1, r2, #5
 80070b4:	69fa      	ldr	r2, [r7, #28]
 80070b6:	440a      	add	r2, r1
 80070b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	6919      	ldr	r1, [r3, #16]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	781a      	ldrb	r2, [r3, #0]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	b298      	uxth	r0, r3
 80070d0:	79fb      	ldrb	r3, [r7, #7]
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	4603      	mov	r3, r0
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 fade 	bl	8007698 <USB_WritePacket>
 80070dc:	e0d2      	b.n	8007284 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	0151      	lsls	r1, r2, #5
 80070f0:	69fa      	ldr	r2, [r7, #28]
 80070f2:	440a      	add	r2, r1
 80070f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070f8:	0cdb      	lsrs	r3, r3, #19
 80070fa:	04db      	lsls	r3, r3, #19
 80070fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	0151      	lsls	r1, r2, #5
 8007110:	69fa      	ldr	r2, [r7, #28]
 8007112:	440a      	add	r2, r1
 8007114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007118:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800711c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007120:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d126      	bne.n	8007178 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007136:	691a      	ldr	r2, [r3, #16]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007140:	69b9      	ldr	r1, [r7, #24]
 8007142:	0148      	lsls	r0, r1, #5
 8007144:	69f9      	ldr	r1, [r7, #28]
 8007146:	4401      	add	r1, r0
 8007148:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800714c:	4313      	orrs	r3, r2
 800714e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	0151      	lsls	r1, r2, #5
 8007162:	69fa      	ldr	r2, [r7, #28]
 8007164:	440a      	add	r2, r1
 8007166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800716a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800716e:	6113      	str	r3, [r2, #16]
 8007170:	e03a      	b.n	80071e8 <USB_EPStartXfer+0x3e4>
 8007172:	bf00      	nop
 8007174:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	699a      	ldr	r2, [r3, #24]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	4413      	add	r3, r2
 8007182:	1e5a      	subs	r2, r3, #1
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	fbb2 f3f3 	udiv	r3, r2, r3
 800718c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	8afa      	ldrh	r2, [r7, #22]
 8007194:	fb03 f202 	mul.w	r2, r3, r2
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a8:	691a      	ldr	r2, [r3, #16]
 80071aa:	8afb      	ldrh	r3, [r7, #22]
 80071ac:	04d9      	lsls	r1, r3, #19
 80071ae:	4b38      	ldr	r3, [pc, #224]	; (8007290 <USB_EPStartXfer+0x48c>)
 80071b0:	400b      	ands	r3, r1
 80071b2:	69b9      	ldr	r1, [r7, #24]
 80071b4:	0148      	lsls	r0, r1, #5
 80071b6:	69f9      	ldr	r1, [r7, #28]
 80071b8:	4401      	add	r1, r0
 80071ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071be:	4313      	orrs	r3, r2
 80071c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ce:	691a      	ldr	r2, [r3, #16]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071d8:	69b9      	ldr	r1, [r7, #24]
 80071da:	0148      	lsls	r0, r1, #5
 80071dc:	69f9      	ldr	r1, [r7, #28]
 80071de:	4401      	add	r1, r0
 80071e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071e4:	4313      	orrs	r3, r2
 80071e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80071e8:	79fb      	ldrb	r3, [r7, #7]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d10d      	bne.n	800720a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d009      	beq.n	800720a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	6919      	ldr	r1, [r3, #16]
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007206:	460a      	mov	r2, r1
 8007208:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	791b      	ldrb	r3, [r3, #4]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d128      	bne.n	8007264 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721e:	2b00      	cmp	r3, #0
 8007220:	d110      	bne.n	8007244 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	0151      	lsls	r1, r2, #5
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	440a      	add	r2, r1
 8007238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800723c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	e00f      	b.n	8007264 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	0151      	lsls	r1, r2, #5
 8007256:	69fa      	ldr	r2, [r7, #28]
 8007258:	440a      	add	r2, r1
 800725a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800725e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007262:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	0151      	lsls	r1, r2, #5
 8007276:	69fa      	ldr	r2, [r7, #28]
 8007278:	440a      	add	r2, r1
 800727a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800727e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007282:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3720      	adds	r7, #32
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	1ff80000 	.word	0x1ff80000

08007294 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	4613      	mov	r3, r2
 80072a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	785b      	ldrb	r3, [r3, #1]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	f040 80ce 	bne.w	8007452 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d132      	bne.n	8007324 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	0151      	lsls	r1, r2, #5
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	440a      	add	r2, r1
 80072d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	0151      	lsls	r1, r2, #5
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	440a      	add	r2, r1
 80072f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007300:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	0151      	lsls	r1, r2, #5
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	440a      	add	r2, r1
 8007318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800731c:	0cdb      	lsrs	r3, r3, #19
 800731e:	04db      	lsls	r3, r3, #19
 8007320:	6113      	str	r3, [r2, #16]
 8007322:	e04e      	b.n	80073c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	0151      	lsls	r1, r2, #5
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	440a      	add	r2, r1
 800733a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800733e:	0cdb      	lsrs	r3, r3, #19
 8007340:	04db      	lsls	r3, r3, #19
 8007342:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	0151      	lsls	r1, r2, #5
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	440a      	add	r2, r1
 800735a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800735e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007362:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007366:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	699a      	ldr	r2, [r3, #24]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	429a      	cmp	r2, r3
 8007372:	d903      	bls.n	800737c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	68da      	ldr	r2, [r3, #12]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	0151      	lsls	r1, r2, #5
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	440a      	add	r2, r1
 8007392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007396:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800739a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a8:	691a      	ldr	r2, [r3, #16]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073b2:	6939      	ldr	r1, [r7, #16]
 80073b4:	0148      	lsls	r0, r1, #5
 80073b6:	6979      	ldr	r1, [r7, #20]
 80073b8:	4401      	add	r1, r0
 80073ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80073be:	4313      	orrs	r3, r2
 80073c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80073c2:	79fb      	ldrb	r3, [r7, #7]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d11e      	bne.n	8007406 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d009      	beq.n	80073e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073dc:	461a      	mov	r2, r3
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	0151      	lsls	r1, r2, #5
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	440a      	add	r2, r1
 80073fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007402:	6013      	str	r3, [r2, #0]
 8007404:	e097      	b.n	8007536 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	0151      	lsls	r1, r2, #5
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	440a      	add	r2, r1
 800741c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007420:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007424:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 8083 	beq.w	8007536 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	f003 030f 	and.w	r3, r3, #15
 8007440:	2101      	movs	r1, #1
 8007442:	fa01 f303 	lsl.w	r3, r1, r3
 8007446:	6979      	ldr	r1, [r7, #20]
 8007448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800744c:	4313      	orrs	r3, r2
 800744e:	634b      	str	r3, [r1, #52]	; 0x34
 8007450:	e071      	b.n	8007536 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	440a      	add	r2, r1
 8007468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800746c:	0cdb      	lsrs	r3, r3, #19
 800746e:	04db      	lsls	r3, r3, #19
 8007470:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	4413      	add	r3, r2
 800747a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	0151      	lsls	r1, r2, #5
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	440a      	add	r2, r1
 8007488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800748c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007490:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007494:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	68da      	ldr	r2, [r3, #12]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	0151      	lsls	r1, r2, #5
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	440a      	add	r2, r1
 80074c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	015a      	lsls	r2, r3, #5
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074da:	691a      	ldr	r2, [r3, #16]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074e4:	6939      	ldr	r1, [r7, #16]
 80074e6:	0148      	lsls	r0, r1, #5
 80074e8:	6979      	ldr	r1, [r7, #20]
 80074ea:	4401      	add	r1, r0
 80074ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074f0:	4313      	orrs	r3, r2
 80074f2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80074f4:	79fb      	ldrb	r3, [r7, #7]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d10d      	bne.n	8007516 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d009      	beq.n	8007516 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	6919      	ldr	r1, [r3, #16]
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007512:	460a      	mov	r2, r1
 8007514:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	015a      	lsls	r2, r3, #5
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	4413      	add	r3, r2
 800751e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	0151      	lsls	r1, r2, #5
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	440a      	add	r2, r1
 800752c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007530:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007534:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	371c      	adds	r7, #28
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007544:	b480      	push	{r7}
 8007546:	b087      	sub	sp, #28
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800754e:	2300      	movs	r3, #0
 8007550:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	785b      	ldrb	r3, [r3, #1]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d14a      	bne.n	80075f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	4413      	add	r3, r2
 800756c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800757a:	f040 8086 	bne.w	800768a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	7812      	ldrb	r2, [r2, #0]
 8007592:	0151      	lsls	r1, r2, #5
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	440a      	add	r2, r1
 8007598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800759c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	7812      	ldrb	r2, [r2, #0]
 80075b6:	0151      	lsls	r1, r2, #5
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	440a      	add	r2, r1
 80075bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3301      	adds	r3, #1
 80075ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d902      	bls.n	80075dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	75fb      	strb	r3, [r7, #23]
          break;
 80075da:	e056      	b.n	800768a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	015a      	lsls	r2, r3, #5
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	4413      	add	r3, r2
 80075e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075f4:	d0e7      	beq.n	80075c6 <USB_EPStopXfer+0x82>
 80075f6:	e048      	b.n	800768a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	4413      	add	r3, r2
 8007602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800760c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007610:	d13b      	bne.n	800768a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	7812      	ldrb	r2, [r2, #0]
 8007626:	0151      	lsls	r1, r2, #5
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	440a      	add	r2, r1
 800762c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007630:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007634:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	4413      	add	r3, r2
 8007640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	7812      	ldrb	r2, [r2, #0]
 800764a:	0151      	lsls	r1, r2, #5
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	440a      	add	r2, r1
 8007650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007658:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3301      	adds	r3, #1
 800765e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f242 7210 	movw	r2, #10000	; 0x2710
 8007666:	4293      	cmp	r3, r2
 8007668:	d902      	bls.n	8007670 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	75fb      	strb	r3, [r7, #23]
          break;
 800766e:	e00c      	b.n	800768a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	4413      	add	r3, r2
 800767a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007688:	d0e7      	beq.n	800765a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800768a:	7dfb      	ldrb	r3, [r7, #23]
}
 800768c:	4618      	mov	r0, r3
 800768e:	371c      	adds	r7, #28
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007698:	b480      	push	{r7}
 800769a:	b089      	sub	sp, #36	; 0x24
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	4611      	mov	r1, r2
 80076a4:	461a      	mov	r2, r3
 80076a6:	460b      	mov	r3, r1
 80076a8:	71fb      	strb	r3, [r7, #7]
 80076aa:	4613      	mov	r3, r2
 80076ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80076b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d123      	bne.n	8007706 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80076be:	88bb      	ldrh	r3, [r7, #4]
 80076c0:	3303      	adds	r3, #3
 80076c2:	089b      	lsrs	r3, r3, #2
 80076c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80076c6:	2300      	movs	r3, #0
 80076c8:	61bb      	str	r3, [r7, #24]
 80076ca:	e018      	b.n	80076fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80076cc:	79fb      	ldrb	r3, [r7, #7]
 80076ce:	031a      	lsls	r2, r3, #12
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076d8:	461a      	mov	r2, r3
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	3301      	adds	r3, #1
 80076e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	3301      	adds	r3, #1
 80076ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	3301      	adds	r3, #1
 80076f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	3301      	adds	r3, #1
 80076f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	3301      	adds	r3, #1
 80076fc:	61bb      	str	r3, [r7, #24]
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	429a      	cmp	r2, r3
 8007704:	d3e2      	bcc.n	80076cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3724      	adds	r7, #36	; 0x24
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007714:	b480      	push	{r7}
 8007716:	b08b      	sub	sp, #44	; 0x2c
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	4613      	mov	r3, r2
 8007720:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800772a:	88fb      	ldrh	r3, [r7, #6]
 800772c:	089b      	lsrs	r3, r3, #2
 800772e:	b29b      	uxth	r3, r3
 8007730:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007732:	88fb      	ldrh	r3, [r7, #6]
 8007734:	f003 0303 	and.w	r3, r3, #3
 8007738:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800773a:	2300      	movs	r3, #0
 800773c:	623b      	str	r3, [r7, #32]
 800773e:	e014      	b.n	800776a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	601a      	str	r2, [r3, #0]
    pDest++;
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	3301      	adds	r3, #1
 8007750:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	3301      	adds	r3, #1
 8007756:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	3301      	adds	r3, #1
 800775c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	3301      	adds	r3, #1
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	3301      	adds	r3, #1
 8007768:	623b      	str	r3, [r7, #32]
 800776a:	6a3a      	ldr	r2, [r7, #32]
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	429a      	cmp	r2, r3
 8007770:	d3e6      	bcc.n	8007740 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007772:	8bfb      	ldrh	r3, [r7, #30]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d01e      	beq.n	80077b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007782:	461a      	mov	r2, r3
 8007784:	f107 0310 	add.w	r3, r7, #16
 8007788:	6812      	ldr	r2, [r2, #0]
 800778a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	b2db      	uxtb	r3, r3
 8007792:	00db      	lsls	r3, r3, #3
 8007794:	fa22 f303 	lsr.w	r3, r2, r3
 8007798:	b2da      	uxtb	r2, r3
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	701a      	strb	r2, [r3, #0]
      i++;
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	3301      	adds	r3, #1
 80077a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	3301      	adds	r3, #1
 80077a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80077aa:	8bfb      	ldrh	r3, [r7, #30]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80077b0:	8bfb      	ldrh	r3, [r7, #30]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1ea      	bne.n	800778c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	372c      	adds	r7, #44	; 0x2c
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	785b      	ldrb	r3, [r3, #1]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d12c      	bne.n	800783a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	db12      	blt.n	8007818 <USB_EPSetStall+0x54>
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00f      	beq.n	8007818 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	0151      	lsls	r1, r2, #5
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	440a      	add	r2, r1
 800780e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007812:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007816:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4413      	add	r3, r2
 8007820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	0151      	lsls	r1, r2, #5
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	440a      	add	r2, r1
 800782e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007836:	6013      	str	r3, [r2, #0]
 8007838:	e02b      	b.n	8007892 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4413      	add	r3, r2
 8007842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	db12      	blt.n	8007872 <USB_EPSetStall+0xae>
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00f      	beq.n	8007872 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	4413      	add	r3, r2
 800785a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	0151      	lsls	r1, r2, #5
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	440a      	add	r2, r1
 8007868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800786c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007870:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	0151      	lsls	r1, r2, #5
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	440a      	add	r2, r1
 8007888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800788c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007890:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d128      	bne.n	800790e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	0151      	lsls	r1, r2, #5
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	440a      	add	r2, r1
 80078d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	791b      	ldrb	r3, [r3, #4]
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d003      	beq.n	80078ec <USB_EPClearStall+0x4c>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	791b      	ldrb	r3, [r3, #4]
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d138      	bne.n	800795e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	0151      	lsls	r1, r2, #5
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	440a      	add	r2, r1
 8007902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	e027      	b.n	800795e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	4413      	add	r3, r2
 8007916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	0151      	lsls	r1, r2, #5
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	440a      	add	r2, r1
 8007924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007928:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800792c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	791b      	ldrb	r3, [r3, #4]
 8007932:	2b03      	cmp	r3, #3
 8007934:	d003      	beq.n	800793e <USB_EPClearStall+0x9e>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	791b      	ldrb	r3, [r3, #4]
 800793a:	2b02      	cmp	r3, #2
 800793c:	d10f      	bne.n	800795e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4413      	add	r3, r2
 8007946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	0151      	lsls	r1, r2, #5
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	440a      	add	r2, r1
 8007954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800795c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800798a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800798e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	78fb      	ldrb	r3, [r7, #3]
 800799a:	011b      	lsls	r3, r3, #4
 800799c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80079a0:	68f9      	ldr	r1, [r7, #12]
 80079a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079a6:	4313      	orrs	r3, r2
 80079a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079d2:	f023 0303 	bic.w	r3, r3, #3
 80079d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079e6:	f023 0302 	bic.w	r3, r3, #2
 80079ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b085      	sub	sp, #20
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a14:	f023 0303 	bic.w	r3, r3, #3
 8007a18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a28:	f043 0302 	orr.w	r3, r3, #2
 8007a2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	4013      	ands	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a54:	68fb      	ldr	r3, [r7, #12]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b085      	sub	sp, #20
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a7e:	69db      	ldr	r3, [r3, #28]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	4013      	ands	r3, r2
 8007a84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	0c1b      	lsrs	r3, r3, #16
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b085      	sub	sp, #20
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	b29b      	uxth	r3, r3
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b085      	sub	sp, #20
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007ada:	78fb      	ldrb	r3, [r7, #3]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	4013      	ands	r3, r2
 8007af6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007af8:	68bb      	ldr	r3, [r7, #8]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b087      	sub	sp, #28
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	f003 030f 	and.w	r3, r3, #15
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	fa22 f303 	lsr.w	r3, r2, r3
 8007b36:	01db      	lsls	r3, r3, #7
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	4013      	ands	r3, r2
 8007b52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b54:	68bb      	ldr	r3, [r7, #8]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	f003 0301 	and.w	r3, r3, #1
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b085      	sub	sp, #20
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007b9c:	f023 0307 	bic.w	r3, r3, #7
 8007ba0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	607a      	str	r2, [r7, #4]
 8007bd0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	333c      	adds	r3, #60	; 0x3c
 8007bda:	3304      	adds	r3, #4
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	4a26      	ldr	r2, [pc, #152]	; (8007c7c <USB_EP0_OutStart+0xb8>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d90a      	bls.n	8007bfe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bf8:	d101      	bne.n	8007bfe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	e037      	b.n	8007c6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c04:	461a      	mov	r2, r3
 8007c06:	2300      	movs	r3, #0
 8007c08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c2c:	f043 0318 	orr.w	r3, r3, #24
 8007c30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007c44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007c46:	7afb      	ldrb	r3, [r7, #11]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d10f      	bne.n	8007c6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c52:	461a      	mov	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007c6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	371c      	adds	r7, #28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	4f54300a 	.word	0x4f54300a

08007c80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	4a13      	ldr	r2, [pc, #76]	; (8007ce4 <USB_CoreReset+0x64>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d901      	bls.n	8007c9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e01b      	b.n	8007cd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	daf2      	bge.n	8007c8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	f043 0201 	orr.w	r2, r3, #1
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	4a09      	ldr	r2, [pc, #36]	; (8007ce4 <USB_CoreReset+0x64>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d901      	bls.n	8007cc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e006      	b.n	8007cd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d0f0      	beq.n	8007cb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	00030d40 	.word	0x00030d40

08007ce8 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007cf4:	2058      	movs	r0, #88	; 0x58
 8007cf6:	f005 fe95 	bl	800da24 <USBD_static_malloc>
 8007cfa:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d109      	bne.n	8007d16 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	32b0      	adds	r2, #176	; 0xb0
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007d12:	2302      	movs	r3, #2
 8007d14:	e08b      	b.n	8007e2e <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	32b0      	adds	r2, #176	; 0xb0
 8007d20:	68f9      	ldr	r1, [r7, #12]
 8007d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	32b0      	adds	r2, #176	; 0xb0
 8007d30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	7c1b      	ldrb	r3, [r3, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d11b      	bne.n	8007d7a <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007d42:	4b3d      	ldr	r3, [pc, #244]	; (8007e38 <USBD_CUSTOM_HID_Init+0x150>)
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	f003 020f 	and.w	r2, r3, #15
 8007d4a:	6879      	ldr	r1, [r7, #4]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	4413      	add	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	440b      	add	r3, r1
 8007d56:	3326      	adds	r3, #38	; 0x26
 8007d58:	2205      	movs	r2, #5
 8007d5a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007d5c:	4b37      	ldr	r3, [pc, #220]	; (8007e3c <USBD_CUSTOM_HID_Init+0x154>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	f003 020f 	and.w	r2, r3, #15
 8007d64:	6879      	ldr	r1, [r7, #4]
 8007d66:	4613      	mov	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	440b      	add	r3, r1
 8007d70:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007d74:	2205      	movs	r2, #5
 8007d76:	801a      	strh	r2, [r3, #0]
 8007d78:	e01a      	b.n	8007db0 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007d7a:	4b2f      	ldr	r3, [pc, #188]	; (8007e38 <USBD_CUSTOM_HID_Init+0x150>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	f003 020f 	and.w	r2, r3, #15
 8007d82:	6879      	ldr	r1, [r7, #4]
 8007d84:	4613      	mov	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	440b      	add	r3, r1
 8007d8e:	3326      	adds	r3, #38	; 0x26
 8007d90:	2205      	movs	r2, #5
 8007d92:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007d94:	4b29      	ldr	r3, [pc, #164]	; (8007e3c <USBD_CUSTOM_HID_Init+0x154>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	f003 020f 	and.w	r2, r3, #15
 8007d9c:	6879      	ldr	r1, [r7, #4]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	440b      	add	r3, r1
 8007da8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007dac:	2205      	movs	r2, #5
 8007dae:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8007db0:	4b21      	ldr	r3, [pc, #132]	; (8007e38 <USBD_CUSTOM_HID_Init+0x150>)
 8007db2:	7819      	ldrb	r1, [r3, #0]
 8007db4:	2340      	movs	r3, #64	; 0x40
 8007db6:	2203      	movs	r2, #3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f005 fd22 	bl	800d802 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8007dbe:	4b1e      	ldr	r3, [pc, #120]	; (8007e38 <USBD_CUSTOM_HID_Init+0x150>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	f003 020f 	and.w	r2, r3, #15
 8007dc6:	6879      	ldr	r1, [r7, #4]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	440b      	add	r3, r1
 8007dd2:	3324      	adds	r3, #36	; 0x24
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8007dd8:	4b18      	ldr	r3, [pc, #96]	; (8007e3c <USBD_CUSTOM_HID_Init+0x154>)
 8007dda:	7819      	ldrb	r1, [r3, #0]
 8007ddc:	2340      	movs	r3, #64	; 0x40
 8007dde:	2203      	movs	r2, #3
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f005 fd0e 	bl	800d802 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8007de6:	4b15      	ldr	r3, [pc, #84]	; (8007e3c <USBD_CUSTOM_HID_Init+0x154>)
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	f003 020f 	and.w	r2, r3, #15
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	4613      	mov	r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4413      	add	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	440b      	add	r3, r1
 8007dfa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007dfe:	2201      	movs	r2, #1
 8007e00:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	33b0      	adds	r3, #176	; 0xb0
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8007e1e:	4b07      	ldr	r3, [pc, #28]	; (8007e3c <USBD_CUSTOM_HID_Init+0x154>)
 8007e20:	7819      	ldrb	r1, [r3, #0]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	2341      	movs	r3, #65	; 0x41
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f005 fdda 	bl	800d9e0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20000086 	.word	0x20000086
 8007e3c:	20000087 	.word	0x20000087

08007e40 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8007e4c:	4b37      	ldr	r3, [pc, #220]	; (8007f2c <USBD_CUSTOM_HID_DeInit+0xec>)
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f005 fcfb 	bl	800d84e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8007e58:	4b34      	ldr	r3, [pc, #208]	; (8007f2c <USBD_CUSTOM_HID_DeInit+0xec>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	f003 020f 	and.w	r2, r3, #15
 8007e60:	6879      	ldr	r1, [r7, #4]
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	440b      	add	r3, r1
 8007e6c:	3324      	adds	r3, #36	; 0x24
 8007e6e:	2200      	movs	r2, #0
 8007e70:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8007e72:	4b2e      	ldr	r3, [pc, #184]	; (8007f2c <USBD_CUSTOM_HID_DeInit+0xec>)
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	f003 020f 	and.w	r2, r3, #15
 8007e7a:	6879      	ldr	r1, [r7, #4]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	440b      	add	r3, r1
 8007e86:	3326      	adds	r3, #38	; 0x26
 8007e88:	2200      	movs	r2, #0
 8007e8a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8007e8c:	4b28      	ldr	r3, [pc, #160]	; (8007f30 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f005 fcdb 	bl	800d84e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8007e98:	4b25      	ldr	r3, [pc, #148]	; (8007f30 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	f003 020f 	and.w	r2, r3, #15
 8007ea0:	6879      	ldr	r1, [r7, #4]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	440b      	add	r3, r1
 8007eac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8007eb4:	4b1e      	ldr	r3, [pc, #120]	; (8007f30 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	f003 020f 	and.w	r2, r3, #15
 8007ebc:	6879      	ldr	r1, [r7, #4]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	440b      	add	r3, r1
 8007ec8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007ecc:	2200      	movs	r2, #0
 8007ece:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	32b0      	adds	r2, #176	; 0xb0
 8007eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d01f      	beq.n	8007f22 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	33b0      	adds	r3, #176	; 0xb0
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	32b0      	adds	r2, #176	; 0xb0
 8007f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f005 fd9b 	bl	800da40 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	32b0      	adds	r2, #176	; 0xb0
 8007f14:	2100      	movs	r1, #0
 8007f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20000086 	.word	0x20000086
 8007f30:	20000087 	.word	0x20000087

08007f34 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b088      	sub	sp, #32
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	32b0      	adds	r2, #176	; 0xb0
 8007f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f4c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007f56:	2300      	movs	r3, #0
 8007f58:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e0f8      	b.n	800815a <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d056      	beq.n	8008022 <USBD_CUSTOM_HID_Setup+0xee>
 8007f74:	2b20      	cmp	r3, #32
 8007f76:	f040 80e8 	bne.w	800814a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	785b      	ldrb	r3, [r3, #1]
 8007f7e:	3b02      	subs	r3, #2
 8007f80:	2b09      	cmp	r3, #9
 8007f82:	d846      	bhi.n	8008012 <USBD_CUSTOM_HID_Setup+0xde>
 8007f84:	a201      	add	r2, pc, #4	; (adr r2, 8007f8c <USBD_CUSTOM_HID_Setup+0x58>)
 8007f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8a:	bf00      	nop
 8007f8c:	08007fe5 	.word	0x08007fe5
 8007f90:	08007fc3 	.word	0x08007fc3
 8007f94:	08008013 	.word	0x08008013
 8007f98:	08008013 	.word	0x08008013
 8007f9c:	08008013 	.word	0x08008013
 8007fa0:	08008013 	.word	0x08008013
 8007fa4:	08008013 	.word	0x08008013
 8007fa8:	08007ff5 	.word	0x08007ff5
 8007fac:	08007fd3 	.word	0x08007fd3
 8007fb0:	08007fb5 	.word	0x08007fb5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	885b      	ldrh	r3, [r3, #2]
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	461a      	mov	r2, r3
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8007fc0:	e02e      	b.n	8008020 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	3344      	adds	r3, #68	; 0x44
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f001 fcce 	bl	800996c <USBD_CtlSendData>
          break;
 8007fd0:	e026      	b.n	8008020 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	885b      	ldrh	r3, [r3, #2]
 8007fd6:	0a1b      	lsrs	r3, r3, #8
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	461a      	mov	r2, r3
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	649a      	str	r2, [r3, #72]	; 0x48
          break;
 8007fe2:	e01d      	b.n	8008020 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	3348      	adds	r3, #72	; 0x48
 8007fe8:	2201      	movs	r2, #1
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 fcbd 	bl	800996c <USBD_CtlSendData>
          break;
 8007ff2:	e015      	b.n	8008020 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	651a      	str	r2, [r3, #80]	; 0x50
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8007ffa:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	88db      	ldrh	r3, [r3, #6]
 8008000:	2b41      	cmp	r3, #65	; 0x41
 8008002:	bf28      	it	cs
 8008004:	2341      	movcs	r3, #65	; 0x41
 8008006:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008008:	461a      	mov	r2, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 fcda 	bl	80099c4 <USBD_CtlPrepareRx>
          break;
 8008010:	e006      	b.n	8008020 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f001 fc38 	bl	800988a <USBD_CtlError>
          ret = USBD_FAIL;
 800801a:	2303      	movs	r3, #3
 800801c:	75fb      	strb	r3, [r7, #23]
          break;
 800801e:	bf00      	nop
      }
      break;
 8008020:	e09a      	b.n	8008158 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	785b      	ldrb	r3, [r3, #1]
 8008026:	2b0b      	cmp	r3, #11
 8008028:	f200 8086 	bhi.w	8008138 <USBD_CUSTOM_HID_Setup+0x204>
 800802c:	a201      	add	r2, pc, #4	; (adr r2, 8008034 <USBD_CUSTOM_HID_Setup+0x100>)
 800802e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008032:	bf00      	nop
 8008034:	08008065 	.word	0x08008065
 8008038:	08008147 	.word	0x08008147
 800803c:	08008139 	.word	0x08008139
 8008040:	08008139 	.word	0x08008139
 8008044:	08008139 	.word	0x08008139
 8008048:	08008139 	.word	0x08008139
 800804c:	0800808f 	.word	0x0800808f
 8008050:	08008139 	.word	0x08008139
 8008054:	08008139 	.word	0x08008139
 8008058:	08008139 	.word	0x08008139
 800805c:	080080e7 	.word	0x080080e7
 8008060:	08008111 	.word	0x08008111
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b03      	cmp	r3, #3
 800806e:	d107      	bne.n	8008080 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008070:	f107 030e 	add.w	r3, r7, #14
 8008074:	2202      	movs	r2, #2
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f001 fc77 	bl	800996c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800807e:	e063      	b.n	8008148 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f001 fc01 	bl	800988a <USBD_CtlError>
            ret = USBD_FAIL;
 8008088:	2303      	movs	r3, #3
 800808a:	75fb      	strb	r3, [r7, #23]
          break;
 800808c:	e05c      	b.n	8008148 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	885b      	ldrh	r3, [r3, #2]
 8008092:	0a1b      	lsrs	r3, r3, #8
 8008094:	b29b      	uxth	r3, r3
 8008096:	2b22      	cmp	r3, #34	; 0x22
 8008098:	d110      	bne.n	80080bc <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	88db      	ldrh	r3, [r3, #6]
 800809e:	2b1c      	cmp	r3, #28
 80080a0:	bf28      	it	cs
 80080a2:	231c      	movcs	r3, #28
 80080a4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	33b0      	adds	r3, #176	; 0xb0
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	61bb      	str	r3, [r7, #24]
 80080ba:	e00d      	b.n	80080d8 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	885b      	ldrh	r3, [r3, #2]
 80080c0:	0a1b      	lsrs	r3, r3, #8
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	2b21      	cmp	r3, #33	; 0x21
 80080c6:	d107      	bne.n	80080d8 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80080c8:	4b26      	ldr	r3, [pc, #152]	; (8008164 <USBD_CUSTOM_HID_Setup+0x230>)
 80080ca:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	88db      	ldrh	r3, [r3, #6]
 80080d0:	2b09      	cmp	r3, #9
 80080d2:	bf28      	it	cs
 80080d4:	2309      	movcs	r3, #9
 80080d6:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80080d8:	8bfb      	ldrh	r3, [r7, #30]
 80080da:	461a      	mov	r2, r3
 80080dc:	69b9      	ldr	r1, [r7, #24]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 fc44 	bl	800996c <USBD_CtlSendData>
          break;
 80080e4:	e030      	b.n	8008148 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d107      	bne.n	8008102 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	334c      	adds	r3, #76	; 0x4c
 80080f6:	2201      	movs	r2, #1
 80080f8:	4619      	mov	r1, r3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f001 fc36 	bl	800996c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008100:	e022      	b.n	8008148 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 fbc0 	bl	800988a <USBD_CtlError>
            ret = USBD_FAIL;
 800810a:	2303      	movs	r3, #3
 800810c:	75fb      	strb	r3, [r7, #23]
          break;
 800810e:	e01b      	b.n	8008148 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b03      	cmp	r3, #3
 800811a:	d106      	bne.n	800812a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	885b      	ldrh	r3, [r3, #2]
 8008120:	b2db      	uxtb	r3, r3
 8008122:	461a      	mov	r2, r3
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	64da      	str	r2, [r3, #76]	; 0x4c
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008128:	e00e      	b.n	8008148 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f001 fbac 	bl	800988a <USBD_CtlError>
            ret = USBD_FAIL;
 8008132:	2303      	movs	r3, #3
 8008134:	75fb      	strb	r3, [r7, #23]
          break;
 8008136:	e007      	b.n	8008148 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f001 fba5 	bl	800988a <USBD_CtlError>
          ret = USBD_FAIL;
 8008140:	2303      	movs	r3, #3
 8008142:	75fb      	strb	r3, [r7, #23]
          break;
 8008144:	e000      	b.n	8008148 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8008146:	bf00      	nop
      }
      break;
 8008148:	e006      	b.n	8008158 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f001 fb9c 	bl	800988a <USBD_CtlError>
      ret = USBD_FAIL;
 8008152:	2303      	movs	r3, #3
 8008154:	75fb      	strb	r3, [r7, #23]
      break;
 8008156:	bf00      	nop
  }
  return (uint8_t)ret;
 8008158:	7dfb      	ldrb	r3, [r7, #23]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3720      	adds	r7, #32
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20000070 	.word	0x20000070

08008168 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	4613      	mov	r3, r2
 8008174:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	32b0      	adds	r2, #176	; 0xb0
 8008180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d101      	bne.n	800818c <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008188:	2303      	movs	r3, #3
 800818a:	e021      	b.n	80081d0 <USBD_CUSTOM_HID_SendReport+0x68>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	32b0      	adds	r2, #176	; 0xb0
 8008196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819a:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d112      	bne.n	80081ce <USBD_CUSTOM_HID_SendReport+0x66>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10b      	bne.n	80081ca <USBD_CUSTOM_HID_SendReport+0x62>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80081ba:	4b07      	ldr	r3, [pc, #28]	; (80081d8 <USBD_CUSTOM_HID_SendReport+0x70>)
 80081bc:	7819      	ldrb	r1, [r3, #0]
 80081be:	88fb      	ldrh	r3, [r7, #6]
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f005 fbeb 	bl	800d99e <USBD_LL_Transmit>
 80081c8:	e001      	b.n	80081ce <USBD_CUSTOM_HID_SendReport+0x66>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e000      	b.n	80081d0 <USBD_CUSTOM_HID_SendReport+0x68>
    }
  }
  return (uint8_t)USBD_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	20000086 	.word	0x20000086

080081dc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80081e4:	2181      	movs	r1, #129	; 0x81
 80081e6:	4815      	ldr	r0, [pc, #84]	; (800823c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80081e8:	f000 fd17 	bl	8008c1a <USBD_GetEpDesc>
 80081ec:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80081ee:	2101      	movs	r1, #1
 80081f0:	4812      	ldr	r0, [pc, #72]	; (800823c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80081f2:	f000 fd12 	bl	8008c1a <USBD_GetEpDesc>
 80081f6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d009      	beq.n	8008212 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008206:	711a      	strb	r2, [r3, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2205      	movs	r2, #5
 8008210:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d009      	beq.n	800822c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2200      	movs	r2, #0
 800821c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008220:	711a      	strb	r2, [r3, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2205      	movs	r2, #5
 800822a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2229      	movs	r2, #41	; 0x29
 8008230:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008232:	4b02      	ldr	r3, [pc, #8]	; (800823c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	20000044 	.word	0x20000044

08008240 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008248:	2181      	movs	r1, #129	; 0x81
 800824a:	4815      	ldr	r0, [pc, #84]	; (80082a0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800824c:	f000 fce5 	bl	8008c1a <USBD_GetEpDesc>
 8008250:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008252:	2101      	movs	r1, #1
 8008254:	4812      	ldr	r0, [pc, #72]	; (80082a0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008256:	f000 fce0 	bl	8008c1a <USBD_GetEpDesc>
 800825a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d009      	beq.n	8008276 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800826a:	711a      	strb	r2, [r3, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2205      	movs	r2, #5
 8008274:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d009      	beq.n	8008290 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2200      	movs	r2, #0
 8008280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008284:	711a      	strb	r2, [r3, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2205      	movs	r2, #5
 800828e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2229      	movs	r2, #41	; 0x29
 8008294:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008296:	4b02      	ldr	r3, [pc, #8]	; (80082a0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	20000044 	.word	0x20000044

080082a4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80082ac:	2181      	movs	r1, #129	; 0x81
 80082ae:	4815      	ldr	r0, [pc, #84]	; (8008304 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80082b0:	f000 fcb3 	bl	8008c1a <USBD_GetEpDesc>
 80082b4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80082b6:	2101      	movs	r1, #1
 80082b8:	4812      	ldr	r0, [pc, #72]	; (8008304 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80082ba:	f000 fcae 	bl	8008c1a <USBD_GetEpDesc>
 80082be:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d009      	beq.n	80082da <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082ce:	711a      	strb	r2, [r3, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2205      	movs	r2, #5
 80082d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d009      	beq.n	80082f4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082e8:	711a      	strb	r2, [r3, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2205      	movs	r2, #5
 80082f2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2229      	movs	r2, #41	; 0x29
 80082f8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80082fa:	4b02      	ldr	r3, [pc, #8]	; (8008304 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	20000044 	.word	0x20000044

08008308 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	32b0      	adds	r2, #176	; 0xb0
 800831e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return (uint8_t)USBD_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	460b      	mov	r3, r1
 8008340:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	32b0      	adds	r2, #176	; 0xb0
 800834c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008354:	2303      	movs	r3, #3
 8008356:	e017      	b.n	8008388 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	32b0      	adds	r2, #176	; 0xb0
 8008362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008366:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	33b0      	adds	r3, #176	; 0xb0
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	7810      	ldrb	r0, [r2, #0]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	7852      	ldrb	r2, [r2, #1]
 8008382:	4611      	mov	r1, r2
 8008384:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	32b0      	adds	r2, #176	; 0xb0
 80083a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e00f      	b.n	80083ce <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	32b0      	adds	r2, #176	; 0xb0
 80083b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083bc:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80083be:	4b06      	ldr	r3, [pc, #24]	; (80083d8 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 80083c0:	7819      	ldrb	r1, [r3, #0]
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	2341      	movs	r3, #65	; 0x41
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f005 fb0a 	bl	800d9e0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	20000087 	.word	0x20000087

080083dc <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	32b0      	adds	r2, #176	; 0xb0
 80083ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f2:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e016      	b.n	800842c <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008402:	2b01      	cmp	r3, #1
 8008404:	d111      	bne.n	800842a <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	33b0      	adds	r3, #176	; 0xb0
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	7810      	ldrb	r0, [r2, #0]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	7852      	ldrb	r2, [r2, #1]
 8008420:	4611      	mov	r1, r2
 8008422:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	651a      	str	r2, [r3, #80]	; 0x50
  }

  return (uint8_t)USBD_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	220a      	movs	r2, #10
 8008440:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008442:	4b03      	ldr	r3, [pc, #12]	; (8008450 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008444:	4618      	mov	r0, r3
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	2000007c 	.word	0x2000007c

08008454 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d101      	bne.n	8008468 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008464:	2303      	movs	r3, #3
 8008466:	e009      	b.n	800847c <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	33b0      	adds	r3, #176	; 0xb0
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	4613      	mov	r3, r2
 8008494:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800849c:	2303      	movs	r3, #3
 800849e:	e01f      	b.n	80084e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	79fa      	ldrb	r2, [r7, #7]
 80084d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f005 f92d 	bl	800d734 <USBD_LL_Init>
 80084da:	4603      	mov	r3, r0
 80084dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80084de:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3718      	adds	r7, #24
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d101      	bne.n	8008500 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084fc:	2303      	movs	r3, #3
 80084fe:	e025      	b.n	800854c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	32ae      	adds	r2, #174	; 0xae
 8008512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00f      	beq.n	800853c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	32ae      	adds	r2, #174	; 0xae
 8008526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	f107 020e 	add.w	r2, r7, #14
 8008530:	4610      	mov	r0, r2
 8008532:	4798      	blx	r3
 8008534:	4602      	mov	r2, r0
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008542:	1c5a      	adds	r2, r3, #1
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f005 f935 	bl	800d7cc <USBD_LL_Start>
 8008562:	4603      	mov	r3, r0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008574:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008576:	4618      	mov	r0, r3
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	460b      	mov	r3, r1
 800858c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008598:	2b00      	cmp	r3, #0
 800859a:	d009      	beq.n	80085b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	78fa      	ldrb	r2, [r7, #3]
 80085a6:	4611      	mov	r1, r2
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	4798      	blx	r3
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	460b      	mov	r3, r1
 80085c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	78fa      	ldrb	r2, [r7, #3]
 80085d4:	4611      	mov	r1, r2
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	4798      	blx	r3
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80085e0:	2303      	movs	r3, #3
 80085e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b084      	sub	sp, #16
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	4618      	mov	r0, r3
 8008602:	f001 f908 	bl	8009816 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008614:	461a      	mov	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008622:	f003 031f 	and.w	r3, r3, #31
 8008626:	2b02      	cmp	r3, #2
 8008628:	d01a      	beq.n	8008660 <USBD_LL_SetupStage+0x72>
 800862a:	2b02      	cmp	r3, #2
 800862c:	d822      	bhi.n	8008674 <USBD_LL_SetupStage+0x86>
 800862e:	2b00      	cmp	r3, #0
 8008630:	d002      	beq.n	8008638 <USBD_LL_SetupStage+0x4a>
 8008632:	2b01      	cmp	r3, #1
 8008634:	d00a      	beq.n	800864c <USBD_LL_SetupStage+0x5e>
 8008636:	e01d      	b.n	8008674 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fb5f 	bl	8008d04 <USBD_StdDevReq>
 8008646:	4603      	mov	r3, r0
 8008648:	73fb      	strb	r3, [r7, #15]
      break;
 800864a:	e020      	b.n	800868e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fbc7 	bl	8008de8 <USBD_StdItfReq>
 800865a:	4603      	mov	r3, r0
 800865c:	73fb      	strb	r3, [r7, #15]
      break;
 800865e:	e016      	b.n	800868e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fc29 	bl	8008ec0 <USBD_StdEPReq>
 800866e:	4603      	mov	r3, r0
 8008670:	73fb      	strb	r3, [r7, #15]
      break;
 8008672:	e00c      	b.n	800868e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800867a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800867e:	b2db      	uxtb	r3, r3
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f005 f902 	bl	800d88c <USBD_LL_StallEP>
 8008688:	4603      	mov	r3, r0
 800868a:	73fb      	strb	r3, [r7, #15]
      break;
 800868c:	bf00      	nop
  }

  return ret;
 800868e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	460b      	mov	r3, r1
 80086a2:	607a      	str	r2, [r7, #4]
 80086a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80086aa:	7afb      	ldrb	r3, [r7, #11]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d16e      	bne.n	800878e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80086b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086be:	2b03      	cmp	r3, #3
 80086c0:	f040 8098 	bne.w	80087f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	689a      	ldr	r2, [r3, #8]
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d913      	bls.n	80086f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	689a      	ldr	r2, [r3, #8]
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	1ad2      	subs	r2, r2, r3
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	68da      	ldr	r2, [r3, #12]
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	4293      	cmp	r3, r2
 80086e8:	bf28      	it	cs
 80086ea:	4613      	movcs	r3, r2
 80086ec:	461a      	mov	r2, r3
 80086ee:	6879      	ldr	r1, [r7, #4]
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f001 f984 	bl	80099fe <USBD_CtlContinueRx>
 80086f6:	e07d      	b.n	80087f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086fe:	f003 031f 	and.w	r3, r3, #31
 8008702:	2b02      	cmp	r3, #2
 8008704:	d014      	beq.n	8008730 <USBD_LL_DataOutStage+0x98>
 8008706:	2b02      	cmp	r3, #2
 8008708:	d81d      	bhi.n	8008746 <USBD_LL_DataOutStage+0xae>
 800870a:	2b00      	cmp	r3, #0
 800870c:	d002      	beq.n	8008714 <USBD_LL_DataOutStage+0x7c>
 800870e:	2b01      	cmp	r3, #1
 8008710:	d003      	beq.n	800871a <USBD_LL_DataOutStage+0x82>
 8008712:	e018      	b.n	8008746 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008714:	2300      	movs	r3, #0
 8008716:	75bb      	strb	r3, [r7, #22]
            break;
 8008718:	e018      	b.n	800874c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008720:	b2db      	uxtb	r3, r3
 8008722:	4619      	mov	r1, r3
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f000 fa5e 	bl	8008be6 <USBD_CoreFindIF>
 800872a:	4603      	mov	r3, r0
 800872c:	75bb      	strb	r3, [r7, #22]
            break;
 800872e:	e00d      	b.n	800874c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008736:	b2db      	uxtb	r3, r3
 8008738:	4619      	mov	r1, r3
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 fa60 	bl	8008c00 <USBD_CoreFindEP>
 8008740:	4603      	mov	r3, r0
 8008742:	75bb      	strb	r3, [r7, #22]
            break;
 8008744:	e002      	b.n	800874c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008746:	2300      	movs	r3, #0
 8008748:	75bb      	strb	r3, [r7, #22]
            break;
 800874a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800874c:	7dbb      	ldrb	r3, [r7, #22]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d119      	bne.n	8008786 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b03      	cmp	r3, #3
 800875c:	d113      	bne.n	8008786 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800875e:	7dba      	ldrb	r2, [r7, #22]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	32ae      	adds	r2, #174	; 0xae
 8008764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00b      	beq.n	8008786 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800876e:	7dba      	ldrb	r2, [r7, #22]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008776:	7dba      	ldrb	r2, [r7, #22]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	32ae      	adds	r2, #174	; 0xae
 800877c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f001 f94a 	bl	8009a20 <USBD_CtlSendStatus>
 800878c:	e032      	b.n	80087f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800878e:	7afb      	ldrb	r3, [r7, #11]
 8008790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008794:	b2db      	uxtb	r3, r3
 8008796:	4619      	mov	r1, r3
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f000 fa31 	bl	8008c00 <USBD_CoreFindEP>
 800879e:	4603      	mov	r3, r0
 80087a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087a2:	7dbb      	ldrb	r3, [r7, #22]
 80087a4:	2bff      	cmp	r3, #255	; 0xff
 80087a6:	d025      	beq.n	80087f4 <USBD_LL_DataOutStage+0x15c>
 80087a8:	7dbb      	ldrb	r3, [r7, #22]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d122      	bne.n	80087f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d117      	bne.n	80087ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80087ba:	7dba      	ldrb	r2, [r7, #22]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	32ae      	adds	r2, #174	; 0xae
 80087c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00f      	beq.n	80087ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80087ca:	7dba      	ldrb	r2, [r7, #22]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80087d2:	7dba      	ldrb	r2, [r7, #22]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	32ae      	adds	r2, #174	; 0xae
 80087d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	7afa      	ldrb	r2, [r7, #11]
 80087e0:	4611      	mov	r1, r2
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	4798      	blx	r3
 80087e6:	4603      	mov	r3, r0
 80087e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80087ea:	7dfb      	ldrb	r3, [r7, #23]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80087f0:	7dfb      	ldrb	r3, [r7, #23]
 80087f2:	e000      	b.n	80087f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3718      	adds	r7, #24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b086      	sub	sp, #24
 8008802:	af00      	add	r7, sp, #0
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	460b      	mov	r3, r1
 8008808:	607a      	str	r2, [r7, #4]
 800880a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800880c:	7afb      	ldrb	r3, [r7, #11]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d16f      	bne.n	80088f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3314      	adds	r3, #20
 8008816:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800881e:	2b02      	cmp	r3, #2
 8008820:	d15a      	bne.n	80088d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	689a      	ldr	r2, [r3, #8]
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	429a      	cmp	r2, r3
 800882c:	d914      	bls.n	8008858 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	689a      	ldr	r2, [r3, #8]
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	1ad2      	subs	r2, r2, r3
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	461a      	mov	r2, r3
 8008842:	6879      	ldr	r1, [r7, #4]
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f001 f8ac 	bl	80099a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800884a:	2300      	movs	r3, #0
 800884c:	2200      	movs	r2, #0
 800884e:	2100      	movs	r1, #0
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f005 f8c5 	bl	800d9e0 <USBD_LL_PrepareReceive>
 8008856:	e03f      	b.n	80088d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	68da      	ldr	r2, [r3, #12]
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	429a      	cmp	r2, r3
 8008862:	d11c      	bne.n	800889e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800886c:	429a      	cmp	r2, r3
 800886e:	d316      	bcc.n	800889e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	685a      	ldr	r2, [r3, #4]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800887a:	429a      	cmp	r2, r3
 800887c:	d20f      	bcs.n	800889e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800887e:	2200      	movs	r2, #0
 8008880:	2100      	movs	r1, #0
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f001 f88d 	bl	80099a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008890:	2300      	movs	r3, #0
 8008892:	2200      	movs	r2, #0
 8008894:	2100      	movs	r1, #0
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f005 f8a2 	bl	800d9e0 <USBD_LL_PrepareReceive>
 800889c:	e01c      	b.n	80088d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d10f      	bne.n	80088ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d009      	beq.n	80088ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ca:	2180      	movs	r1, #128	; 0x80
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f004 ffdd 	bl	800d88c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f001 f8b7 	bl	8009a46 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d03a      	beq.n	8008958 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f7ff fe42 	bl	800856c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80088f0:	e032      	b.n	8008958 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80088f2:	7afb      	ldrb	r3, [r7, #11]
 80088f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	4619      	mov	r1, r3
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f000 f97f 	bl	8008c00 <USBD_CoreFindEP>
 8008902:	4603      	mov	r3, r0
 8008904:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008906:	7dfb      	ldrb	r3, [r7, #23]
 8008908:	2bff      	cmp	r3, #255	; 0xff
 800890a:	d025      	beq.n	8008958 <USBD_LL_DataInStage+0x15a>
 800890c:	7dfb      	ldrb	r3, [r7, #23]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d122      	bne.n	8008958 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b03      	cmp	r3, #3
 800891c:	d11c      	bne.n	8008958 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800891e:	7dfa      	ldrb	r2, [r7, #23]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	32ae      	adds	r2, #174	; 0xae
 8008924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d014      	beq.n	8008958 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800892e:	7dfa      	ldrb	r2, [r7, #23]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008936:	7dfa      	ldrb	r2, [r7, #23]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	32ae      	adds	r2, #174	; 0xae
 800893c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	7afa      	ldrb	r2, [r7, #11]
 8008944:	4611      	mov	r1, r2
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	4798      	blx	r3
 800894a:	4603      	mov	r3, r0
 800894c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800894e:	7dbb      	ldrb	r3, [r7, #22]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008954:	7dbb      	ldrb	r3, [r7, #22]
 8008956:	e000      	b.n	800895a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800899a:	2b00      	cmp	r3, #0
 800899c:	d014      	beq.n	80089c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00e      	beq.n	80089c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	6852      	ldr	r2, [r2, #4]
 80089b6:	b2d2      	uxtb	r2, r2
 80089b8:	4611      	mov	r1, r2
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	4798      	blx	r3
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80089c4:	2303      	movs	r3, #3
 80089c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089c8:	2340      	movs	r3, #64	; 0x40
 80089ca:	2200      	movs	r2, #0
 80089cc:	2100      	movs	r1, #0
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f004 ff17 	bl	800d802 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2240      	movs	r2, #64	; 0x40
 80089e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089e4:	2340      	movs	r3, #64	; 0x40
 80089e6:	2200      	movs	r2, #0
 80089e8:	2180      	movs	r1, #128	; 0x80
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f004 ff09 	bl	800d802 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2240      	movs	r2, #64	; 0x40
 80089fa:	621a      	str	r2, [r3, #32]

  return ret;
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a06:	b480      	push	{r7}
 8008a08:	b083      	sub	sp, #12
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	460b      	mov	r3, r1
 8008a10:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	78fa      	ldrb	r2, [r7, #3]
 8008a16:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2204      	movs	r2, #4
 8008a40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b083      	sub	sp, #12
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	2b04      	cmp	r3, #4
 8008a64:	d106      	bne.n	8008a74 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008a6c:	b2da      	uxtb	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b082      	sub	sp, #8
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d110      	bne.n	8008ab8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00b      	beq.n	8008ab8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa6:	69db      	ldr	r3, [r3, #28]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d005      	beq.n	8008ab8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab2:	69db      	ldr	r3, [r3, #28]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	460b      	mov	r3, r1
 8008acc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	32ae      	adds	r2, #174	; 0xae
 8008ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e01c      	b.n	8008b1e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b03      	cmp	r3, #3
 8008aee:	d115      	bne.n	8008b1c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	32ae      	adds	r2, #174	; 0xae
 8008afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00b      	beq.n	8008b1c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	32ae      	adds	r2, #174	; 0xae
 8008b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b12:	6a1b      	ldr	r3, [r3, #32]
 8008b14:	78fa      	ldrb	r2, [r7, #3]
 8008b16:	4611      	mov	r1, r2
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b082      	sub	sp, #8
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	460b      	mov	r3, r1
 8008b30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	32ae      	adds	r2, #174	; 0xae
 8008b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e01c      	b.n	8008b82 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b03      	cmp	r3, #3
 8008b52:	d115      	bne.n	8008b80 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	32ae      	adds	r2, #174	; 0xae
 8008b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00b      	beq.n	8008b80 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	32ae      	adds	r2, #174	; 0xae
 8008b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b78:	78fa      	ldrb	r2, [r7, #3]
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b083      	sub	sp, #12
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00e      	beq.n	8008bdc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	6852      	ldr	r2, [r2, #4]
 8008bca:	b2d2      	uxtb	r2, r2
 8008bcc:	4611      	mov	r1, r2
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	4798      	blx	r3
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b083      	sub	sp, #12
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	460b      	mov	r3, r1
 8008bf0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008bf2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b086      	sub	sp, #24
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	460b      	mov	r3, r1
 8008c24:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	885b      	ldrh	r3, [r3, #2]
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d920      	bls.n	8008c84 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008c4a:	e013      	b.n	8008c74 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c4c:	f107 030a 	add.w	r3, r7, #10
 8008c50:	4619      	mov	r1, r3
 8008c52:	6978      	ldr	r0, [r7, #20]
 8008c54:	f000 f81b 	bl	8008c8e <USBD_GetNextDesc>
 8008c58:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	785b      	ldrb	r3, [r3, #1]
 8008c5e:	2b05      	cmp	r3, #5
 8008c60:	d108      	bne.n	8008c74 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	789b      	ldrb	r3, [r3, #2]
 8008c6a:	78fa      	ldrb	r2, [r7, #3]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d008      	beq.n	8008c82 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008c70:	2300      	movs	r3, #0
 8008c72:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	885b      	ldrh	r3, [r3, #2]
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	897b      	ldrh	r3, [r7, #10]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d8e5      	bhi.n	8008c4c <USBD_GetEpDesc+0x32>
 8008c80:	e000      	b.n	8008c84 <USBD_GetEpDesc+0x6a>
          break;
 8008c82:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008c84:	693b      	ldr	r3, [r7, #16]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3718      	adds	r7, #24
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b085      	sub	sp, #20
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	881a      	ldrh	r2, [r3, #0]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	4413      	add	r3, r2
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008cba:	68fb      	ldr	r3, [r7, #12]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b087      	sub	sp, #28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008ce6:	8a3b      	ldrh	r3, [r7, #16]
 8008ce8:	021b      	lsls	r3, r3, #8
 8008cea:	b21a      	sxth	r2, r3
 8008cec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	b21b      	sxth	r3, r3
 8008cf4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008cf6:	89fb      	ldrh	r3, [r7, #14]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	371c      	adds	r7, #28
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d1a:	2b40      	cmp	r3, #64	; 0x40
 8008d1c:	d005      	beq.n	8008d2a <USBD_StdDevReq+0x26>
 8008d1e:	2b40      	cmp	r3, #64	; 0x40
 8008d20:	d857      	bhi.n	8008dd2 <USBD_StdDevReq+0xce>
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00f      	beq.n	8008d46 <USBD_StdDevReq+0x42>
 8008d26:	2b20      	cmp	r3, #32
 8008d28:	d153      	bne.n	8008dd2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	32ae      	adds	r2, #174	; 0xae
 8008d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	4798      	blx	r3
 8008d40:	4603      	mov	r3, r0
 8008d42:	73fb      	strb	r3, [r7, #15]
      break;
 8008d44:	e04a      	b.n	8008ddc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	785b      	ldrb	r3, [r3, #1]
 8008d4a:	2b09      	cmp	r3, #9
 8008d4c:	d83b      	bhi.n	8008dc6 <USBD_StdDevReq+0xc2>
 8008d4e:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <USBD_StdDevReq+0x50>)
 8008d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d54:	08008da9 	.word	0x08008da9
 8008d58:	08008dbd 	.word	0x08008dbd
 8008d5c:	08008dc7 	.word	0x08008dc7
 8008d60:	08008db3 	.word	0x08008db3
 8008d64:	08008dc7 	.word	0x08008dc7
 8008d68:	08008d87 	.word	0x08008d87
 8008d6c:	08008d7d 	.word	0x08008d7d
 8008d70:	08008dc7 	.word	0x08008dc7
 8008d74:	08008d9f 	.word	0x08008d9f
 8008d78:	08008d91 	.word	0x08008d91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fa3c 	bl	80091fc <USBD_GetDescriptor>
          break;
 8008d84:	e024      	b.n	8008dd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fba1 	bl	80094d0 <USBD_SetAddress>
          break;
 8008d8e:	e01f      	b.n	8008dd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fbe0 	bl	8009558 <USBD_SetConfig>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73fb      	strb	r3, [r7, #15]
          break;
 8008d9c:	e018      	b.n	8008dd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fc83 	bl	80096ac <USBD_GetConfig>
          break;
 8008da6:	e013      	b.n	8008dd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008da8:	6839      	ldr	r1, [r7, #0]
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fcb4 	bl	8009718 <USBD_GetStatus>
          break;
 8008db0:	e00e      	b.n	8008dd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fce3 	bl	8009780 <USBD_SetFeature>
          break;
 8008dba:	e009      	b.n	8008dd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fd07 	bl	80097d2 <USBD_ClrFeature>
          break;
 8008dc4:	e004      	b.n	8008dd0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fd5e 	bl	800988a <USBD_CtlError>
          break;
 8008dce:	bf00      	nop
      }
      break;
 8008dd0:	e004      	b.n	8008ddc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fd58 	bl	800988a <USBD_CtlError>
      break;
 8008dda:	bf00      	nop
  }

  return ret;
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop

08008de8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dfe:	2b40      	cmp	r3, #64	; 0x40
 8008e00:	d005      	beq.n	8008e0e <USBD_StdItfReq+0x26>
 8008e02:	2b40      	cmp	r3, #64	; 0x40
 8008e04:	d852      	bhi.n	8008eac <USBD_StdItfReq+0xc4>
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <USBD_StdItfReq+0x26>
 8008e0a:	2b20      	cmp	r3, #32
 8008e0c:	d14e      	bne.n	8008eac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	3b01      	subs	r3, #1
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d840      	bhi.n	8008e9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	889b      	ldrh	r3, [r3, #4]
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d836      	bhi.n	8008e94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	889b      	ldrh	r3, [r3, #4]
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7ff fed9 	bl	8008be6 <USBD_CoreFindIF>
 8008e34:	4603      	mov	r3, r0
 8008e36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e38:	7bbb      	ldrb	r3, [r7, #14]
 8008e3a:	2bff      	cmp	r3, #255	; 0xff
 8008e3c:	d01d      	beq.n	8008e7a <USBD_StdItfReq+0x92>
 8008e3e:	7bbb      	ldrb	r3, [r7, #14]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d11a      	bne.n	8008e7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008e44:	7bba      	ldrb	r2, [r7, #14]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	32ae      	adds	r2, #174	; 0xae
 8008e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00f      	beq.n	8008e74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e54:	7bba      	ldrb	r2, [r7, #14]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e5c:	7bba      	ldrb	r2, [r7, #14]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	32ae      	adds	r2, #174	; 0xae
 8008e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	6839      	ldr	r1, [r7, #0]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	4798      	blx	r3
 8008e6e:	4603      	mov	r3, r0
 8008e70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e72:	e004      	b.n	8008e7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008e74:	2303      	movs	r3, #3
 8008e76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e78:	e001      	b.n	8008e7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	88db      	ldrh	r3, [r3, #6]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d110      	bne.n	8008ea8 <USBD_StdItfReq+0xc0>
 8008e86:	7bfb      	ldrb	r3, [r7, #15]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10d      	bne.n	8008ea8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fdc7 	bl	8009a20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e92:	e009      	b.n	8008ea8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fcf7 	bl	800988a <USBD_CtlError>
          break;
 8008e9c:	e004      	b.n	8008ea8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fcf2 	bl	800988a <USBD_CtlError>
          break;
 8008ea6:	e000      	b.n	8008eaa <USBD_StdItfReq+0xc2>
          break;
 8008ea8:	bf00      	nop
      }
      break;
 8008eaa:	e004      	b.n	8008eb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fceb 	bl	800988a <USBD_CtlError>
      break;
 8008eb4:	bf00      	nop
  }

  return ret;
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	889b      	ldrh	r3, [r3, #4]
 8008ed2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008edc:	2b40      	cmp	r3, #64	; 0x40
 8008ede:	d007      	beq.n	8008ef0 <USBD_StdEPReq+0x30>
 8008ee0:	2b40      	cmp	r3, #64	; 0x40
 8008ee2:	f200 817f 	bhi.w	80091e4 <USBD_StdEPReq+0x324>
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d02a      	beq.n	8008f40 <USBD_StdEPReq+0x80>
 8008eea:	2b20      	cmp	r3, #32
 8008eec:	f040 817a 	bne.w	80091e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ef0:	7bbb      	ldrb	r3, [r7, #14]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f7ff fe83 	bl	8008c00 <USBD_CoreFindEP>
 8008efa:	4603      	mov	r3, r0
 8008efc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008efe:	7b7b      	ldrb	r3, [r7, #13]
 8008f00:	2bff      	cmp	r3, #255	; 0xff
 8008f02:	f000 8174 	beq.w	80091ee <USBD_StdEPReq+0x32e>
 8008f06:	7b7b      	ldrb	r3, [r7, #13]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f040 8170 	bne.w	80091ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008f0e:	7b7a      	ldrb	r2, [r7, #13]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008f16:	7b7a      	ldrb	r2, [r7, #13]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	32ae      	adds	r2, #174	; 0xae
 8008f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f000 8163 	beq.w	80091ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008f28:	7b7a      	ldrb	r2, [r7, #13]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	32ae      	adds	r2, #174	; 0xae
 8008f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	4798      	blx	r3
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f3e:	e156      	b.n	80091ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	785b      	ldrb	r3, [r3, #1]
 8008f44:	2b03      	cmp	r3, #3
 8008f46:	d008      	beq.n	8008f5a <USBD_StdEPReq+0x9a>
 8008f48:	2b03      	cmp	r3, #3
 8008f4a:	f300 8145 	bgt.w	80091d8 <USBD_StdEPReq+0x318>
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 809b 	beq.w	800908a <USBD_StdEPReq+0x1ca>
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d03c      	beq.n	8008fd2 <USBD_StdEPReq+0x112>
 8008f58:	e13e      	b.n	80091d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d002      	beq.n	8008f6c <USBD_StdEPReq+0xac>
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	d016      	beq.n	8008f98 <USBD_StdEPReq+0xd8>
 8008f6a:	e02c      	b.n	8008fc6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00d      	beq.n	8008f8e <USBD_StdEPReq+0xce>
 8008f72:	7bbb      	ldrb	r3, [r7, #14]
 8008f74:	2b80      	cmp	r3, #128	; 0x80
 8008f76:	d00a      	beq.n	8008f8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f004 fc85 	bl	800d88c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f82:	2180      	movs	r1, #128	; 0x80
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f004 fc81 	bl	800d88c <USBD_LL_StallEP>
 8008f8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f8c:	e020      	b.n	8008fd0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fc7a 	bl	800988a <USBD_CtlError>
              break;
 8008f96:	e01b      	b.n	8008fd0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	885b      	ldrh	r3, [r3, #2]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10e      	bne.n	8008fbe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008fa0:	7bbb      	ldrb	r3, [r7, #14]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00b      	beq.n	8008fbe <USBD_StdEPReq+0xfe>
 8008fa6:	7bbb      	ldrb	r3, [r7, #14]
 8008fa8:	2b80      	cmp	r3, #128	; 0x80
 8008faa:	d008      	beq.n	8008fbe <USBD_StdEPReq+0xfe>
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	88db      	ldrh	r3, [r3, #6]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d104      	bne.n	8008fbe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f004 fc67 	bl	800d88c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fd2e 	bl	8009a20 <USBD_CtlSendStatus>

              break;
 8008fc4:	e004      	b.n	8008fd0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008fc6:	6839      	ldr	r1, [r7, #0]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fc5e 	bl	800988a <USBD_CtlError>
              break;
 8008fce:	bf00      	nop
          }
          break;
 8008fd0:	e107      	b.n	80091e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d002      	beq.n	8008fe4 <USBD_StdEPReq+0x124>
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d016      	beq.n	8009010 <USBD_StdEPReq+0x150>
 8008fe2:	e04b      	b.n	800907c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fe4:	7bbb      	ldrb	r3, [r7, #14]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00d      	beq.n	8009006 <USBD_StdEPReq+0x146>
 8008fea:	7bbb      	ldrb	r3, [r7, #14]
 8008fec:	2b80      	cmp	r3, #128	; 0x80
 8008fee:	d00a      	beq.n	8009006 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f004 fc49 	bl	800d88c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ffa:	2180      	movs	r1, #128	; 0x80
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f004 fc45 	bl	800d88c <USBD_LL_StallEP>
 8009002:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009004:	e040      	b.n	8009088 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fc3e 	bl	800988a <USBD_CtlError>
              break;
 800900e:	e03b      	b.n	8009088 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	885b      	ldrh	r3, [r3, #2]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d136      	bne.n	8009086 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800901e:	2b00      	cmp	r3, #0
 8009020:	d004      	beq.n	800902c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009022:	7bbb      	ldrb	r3, [r7, #14]
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f004 fc4f 	bl	800d8ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fcf7 	bl	8009a20 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009032:	7bbb      	ldrb	r3, [r7, #14]
 8009034:	4619      	mov	r1, r3
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7ff fde2 	bl	8008c00 <USBD_CoreFindEP>
 800903c:	4603      	mov	r3, r0
 800903e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009040:	7b7b      	ldrb	r3, [r7, #13]
 8009042:	2bff      	cmp	r3, #255	; 0xff
 8009044:	d01f      	beq.n	8009086 <USBD_StdEPReq+0x1c6>
 8009046:	7b7b      	ldrb	r3, [r7, #13]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d11c      	bne.n	8009086 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800904c:	7b7a      	ldrb	r2, [r7, #13]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009054:	7b7a      	ldrb	r2, [r7, #13]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	32ae      	adds	r2, #174	; 0xae
 800905a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d010      	beq.n	8009086 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009064:	7b7a      	ldrb	r2, [r7, #13]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	32ae      	adds	r2, #174	; 0xae
 800906a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	6839      	ldr	r1, [r7, #0]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	4798      	blx	r3
 8009076:	4603      	mov	r3, r0
 8009078:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800907a:	e004      	b.n	8009086 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fc03 	bl	800988a <USBD_CtlError>
              break;
 8009084:	e000      	b.n	8009088 <USBD_StdEPReq+0x1c8>
              break;
 8009086:	bf00      	nop
          }
          break;
 8009088:	e0ab      	b.n	80091e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b02      	cmp	r3, #2
 8009094:	d002      	beq.n	800909c <USBD_StdEPReq+0x1dc>
 8009096:	2b03      	cmp	r3, #3
 8009098:	d032      	beq.n	8009100 <USBD_StdEPReq+0x240>
 800909a:	e097      	b.n	80091cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800909c:	7bbb      	ldrb	r3, [r7, #14]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d007      	beq.n	80090b2 <USBD_StdEPReq+0x1f2>
 80090a2:	7bbb      	ldrb	r3, [r7, #14]
 80090a4:	2b80      	cmp	r3, #128	; 0x80
 80090a6:	d004      	beq.n	80090b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fbed 	bl	800988a <USBD_CtlError>
                break;
 80090b0:	e091      	b.n	80091d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	da0b      	bge.n	80090d2 <USBD_StdEPReq+0x212>
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
 80090bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090c0:	4613      	mov	r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	4413      	add	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	3310      	adds	r3, #16
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	4413      	add	r3, r2
 80090ce:	3304      	adds	r3, #4
 80090d0:	e00b      	b.n	80090ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090d2:	7bbb      	ldrb	r3, [r7, #14]
 80090d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090d8:	4613      	mov	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	4413      	add	r3, r2
 80090e8:	3304      	adds	r3, #4
 80090ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2200      	movs	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	2202      	movs	r2, #2
 80090f6:	4619      	mov	r1, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fc37 	bl	800996c <USBD_CtlSendData>
              break;
 80090fe:	e06a      	b.n	80091d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009104:	2b00      	cmp	r3, #0
 8009106:	da11      	bge.n	800912c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009108:	7bbb      	ldrb	r3, [r7, #14]
 800910a:	f003 020f 	and.w	r2, r3, #15
 800910e:	6879      	ldr	r1, [r7, #4]
 8009110:	4613      	mov	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	440b      	add	r3, r1
 800911a:	3324      	adds	r3, #36	; 0x24
 800911c:	881b      	ldrh	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d117      	bne.n	8009152 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fbb0 	bl	800988a <USBD_CtlError>
                  break;
 800912a:	e054      	b.n	80091d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800912c:	7bbb      	ldrb	r3, [r7, #14]
 800912e:	f003 020f 	and.w	r2, r3, #15
 8009132:	6879      	ldr	r1, [r7, #4]
 8009134:	4613      	mov	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	440b      	add	r3, r1
 800913e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d104      	bne.n	8009152 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fb9d 	bl	800988a <USBD_CtlError>
                  break;
 8009150:	e041      	b.n	80091d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009152:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009156:	2b00      	cmp	r3, #0
 8009158:	da0b      	bge.n	8009172 <USBD_StdEPReq+0x2b2>
 800915a:	7bbb      	ldrb	r3, [r7, #14]
 800915c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009160:	4613      	mov	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	3310      	adds	r3, #16
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	4413      	add	r3, r2
 800916e:	3304      	adds	r3, #4
 8009170:	e00b      	b.n	800918a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009172:	7bbb      	ldrb	r3, [r7, #14]
 8009174:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009178:	4613      	mov	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	4413      	add	r3, r2
 8009188:	3304      	adds	r3, #4
 800918a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800918c:	7bbb      	ldrb	r3, [r7, #14]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d002      	beq.n	8009198 <USBD_StdEPReq+0x2d8>
 8009192:	7bbb      	ldrb	r3, [r7, #14]
 8009194:	2b80      	cmp	r3, #128	; 0x80
 8009196:	d103      	bne.n	80091a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2200      	movs	r2, #0
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	e00e      	b.n	80091be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80091a0:	7bbb      	ldrb	r3, [r7, #14]
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f004 fbaf 	bl	800d908 <USBD_LL_IsStallEP>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d003      	beq.n	80091b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2201      	movs	r2, #1
 80091b4:	601a      	str	r2, [r3, #0]
 80091b6:	e002      	b.n	80091be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	2200      	movs	r2, #0
 80091bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2202      	movs	r2, #2
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fbd1 	bl	800996c <USBD_CtlSendData>
              break;
 80091ca:	e004      	b.n	80091d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80091cc:	6839      	ldr	r1, [r7, #0]
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fb5b 	bl	800988a <USBD_CtlError>
              break;
 80091d4:	bf00      	nop
          }
          break;
 80091d6:	e004      	b.n	80091e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80091d8:	6839      	ldr	r1, [r7, #0]
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fb55 	bl	800988a <USBD_CtlError>
          break;
 80091e0:	bf00      	nop
      }
      break;
 80091e2:	e005      	b.n	80091f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80091e4:	6839      	ldr	r1, [r7, #0]
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 fb4f 	bl	800988a <USBD_CtlError>
      break;
 80091ec:	e000      	b.n	80091f0 <USBD_StdEPReq+0x330>
      break;
 80091ee:	bf00      	nop
  }

  return ret;
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009206:	2300      	movs	r3, #0
 8009208:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800920a:	2300      	movs	r3, #0
 800920c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	885b      	ldrh	r3, [r3, #2]
 8009216:	0a1b      	lsrs	r3, r3, #8
 8009218:	b29b      	uxth	r3, r3
 800921a:	3b01      	subs	r3, #1
 800921c:	2b06      	cmp	r3, #6
 800921e:	f200 8128 	bhi.w	8009472 <USBD_GetDescriptor+0x276>
 8009222:	a201      	add	r2, pc, #4	; (adr r2, 8009228 <USBD_GetDescriptor+0x2c>)
 8009224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009228:	08009245 	.word	0x08009245
 800922c:	0800925d 	.word	0x0800925d
 8009230:	0800929d 	.word	0x0800929d
 8009234:	08009473 	.word	0x08009473
 8009238:	08009473 	.word	0x08009473
 800923c:	08009413 	.word	0x08009413
 8009240:	0800943f 	.word	0x0800943f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	7c12      	ldrb	r2, [r2, #16]
 8009250:	f107 0108 	add.w	r1, r7, #8
 8009254:	4610      	mov	r0, r2
 8009256:	4798      	blx	r3
 8009258:	60f8      	str	r0, [r7, #12]
      break;
 800925a:	e112      	b.n	8009482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	7c1b      	ldrb	r3, [r3, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10d      	bne.n	8009280 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800926a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926c:	f107 0208 	add.w	r2, r7, #8
 8009270:	4610      	mov	r0, r2
 8009272:	4798      	blx	r3
 8009274:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	3301      	adds	r3, #1
 800927a:	2202      	movs	r2, #2
 800927c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800927e:	e100      	b.n	8009482 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009288:	f107 0208 	add.w	r2, r7, #8
 800928c:	4610      	mov	r0, r2
 800928e:	4798      	blx	r3
 8009290:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	3301      	adds	r3, #1
 8009296:	2202      	movs	r2, #2
 8009298:	701a      	strb	r2, [r3, #0]
      break;
 800929a:	e0f2      	b.n	8009482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	885b      	ldrh	r3, [r3, #2]
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b05      	cmp	r3, #5
 80092a4:	f200 80ac 	bhi.w	8009400 <USBD_GetDescriptor+0x204>
 80092a8:	a201      	add	r2, pc, #4	; (adr r2, 80092b0 <USBD_GetDescriptor+0xb4>)
 80092aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ae:	bf00      	nop
 80092b0:	080092c9 	.word	0x080092c9
 80092b4:	080092fd 	.word	0x080092fd
 80092b8:	08009331 	.word	0x08009331
 80092bc:	08009365 	.word	0x08009365
 80092c0:	08009399 	.word	0x08009399
 80092c4:	080093cd 	.word	0x080093cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00b      	beq.n	80092ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	7c12      	ldrb	r2, [r2, #16]
 80092e0:	f107 0108 	add.w	r1, r7, #8
 80092e4:	4610      	mov	r0, r2
 80092e6:	4798      	blx	r3
 80092e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ea:	e091      	b.n	8009410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 facb 	bl	800988a <USBD_CtlError>
            err++;
 80092f4:	7afb      	ldrb	r3, [r7, #11]
 80092f6:	3301      	adds	r3, #1
 80092f8:	72fb      	strb	r3, [r7, #11]
          break;
 80092fa:	e089      	b.n	8009410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00b      	beq.n	8009320 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	7c12      	ldrb	r2, [r2, #16]
 8009314:	f107 0108 	add.w	r1, r7, #8
 8009318:	4610      	mov	r0, r2
 800931a:	4798      	blx	r3
 800931c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800931e:	e077      	b.n	8009410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fab1 	bl	800988a <USBD_CtlError>
            err++;
 8009328:	7afb      	ldrb	r3, [r7, #11]
 800932a:	3301      	adds	r3, #1
 800932c:	72fb      	strb	r3, [r7, #11]
          break;
 800932e:	e06f      	b.n	8009410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00b      	beq.n	8009354 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	7c12      	ldrb	r2, [r2, #16]
 8009348:	f107 0108 	add.w	r1, r7, #8
 800934c:	4610      	mov	r0, r2
 800934e:	4798      	blx	r3
 8009350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009352:	e05d      	b.n	8009410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fa97 	bl	800988a <USBD_CtlError>
            err++;
 800935c:	7afb      	ldrb	r3, [r7, #11]
 800935e:	3301      	adds	r3, #1
 8009360:	72fb      	strb	r3, [r7, #11]
          break;
 8009362:	e055      	b.n	8009410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00b      	beq.n	8009388 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	7c12      	ldrb	r2, [r2, #16]
 800937c:	f107 0108 	add.w	r1, r7, #8
 8009380:	4610      	mov	r0, r2
 8009382:	4798      	blx	r3
 8009384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009386:	e043      	b.n	8009410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fa7d 	bl	800988a <USBD_CtlError>
            err++;
 8009390:	7afb      	ldrb	r3, [r7, #11]
 8009392:	3301      	adds	r3, #1
 8009394:	72fb      	strb	r3, [r7, #11]
          break;
 8009396:	e03b      	b.n	8009410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00b      	beq.n	80093bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	7c12      	ldrb	r2, [r2, #16]
 80093b0:	f107 0108 	add.w	r1, r7, #8
 80093b4:	4610      	mov	r0, r2
 80093b6:	4798      	blx	r3
 80093b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ba:	e029      	b.n	8009410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fa63 	bl	800988a <USBD_CtlError>
            err++;
 80093c4:	7afb      	ldrb	r3, [r7, #11]
 80093c6:	3301      	adds	r3, #1
 80093c8:	72fb      	strb	r3, [r7, #11]
          break;
 80093ca:	e021      	b.n	8009410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00b      	beq.n	80093f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	7c12      	ldrb	r2, [r2, #16]
 80093e4:	f107 0108 	add.w	r1, r7, #8
 80093e8:	4610      	mov	r0, r2
 80093ea:	4798      	blx	r3
 80093ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ee:	e00f      	b.n	8009410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093f0:	6839      	ldr	r1, [r7, #0]
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fa49 	bl	800988a <USBD_CtlError>
            err++;
 80093f8:	7afb      	ldrb	r3, [r7, #11]
 80093fa:	3301      	adds	r3, #1
 80093fc:	72fb      	strb	r3, [r7, #11]
          break;
 80093fe:	e007      	b.n	8009410 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fa41 	bl	800988a <USBD_CtlError>
          err++;
 8009408:	7afb      	ldrb	r3, [r7, #11]
 800940a:	3301      	adds	r3, #1
 800940c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800940e:	bf00      	nop
      }
      break;
 8009410:	e037      	b.n	8009482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	7c1b      	ldrb	r3, [r3, #16]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d109      	bne.n	800942e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009422:	f107 0208 	add.w	r2, r7, #8
 8009426:	4610      	mov	r0, r2
 8009428:	4798      	blx	r3
 800942a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800942c:	e029      	b.n	8009482 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fa2a 	bl	800988a <USBD_CtlError>
        err++;
 8009436:	7afb      	ldrb	r3, [r7, #11]
 8009438:	3301      	adds	r3, #1
 800943a:	72fb      	strb	r3, [r7, #11]
      break;
 800943c:	e021      	b.n	8009482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	7c1b      	ldrb	r3, [r3, #16]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10d      	bne.n	8009462 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800944c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944e:	f107 0208 	add.w	r2, r7, #8
 8009452:	4610      	mov	r0, r2
 8009454:	4798      	blx	r3
 8009456:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	3301      	adds	r3, #1
 800945c:	2207      	movs	r2, #7
 800945e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009460:	e00f      	b.n	8009482 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009462:	6839      	ldr	r1, [r7, #0]
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fa10 	bl	800988a <USBD_CtlError>
        err++;
 800946a:	7afb      	ldrb	r3, [r7, #11]
 800946c:	3301      	adds	r3, #1
 800946e:	72fb      	strb	r3, [r7, #11]
      break;
 8009470:	e007      	b.n	8009482 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fa08 	bl	800988a <USBD_CtlError>
      err++;
 800947a:	7afb      	ldrb	r3, [r7, #11]
 800947c:	3301      	adds	r3, #1
 800947e:	72fb      	strb	r3, [r7, #11]
      break;
 8009480:	bf00      	nop
  }

  if (err != 0U)
 8009482:	7afb      	ldrb	r3, [r7, #11]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d11e      	bne.n	80094c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	88db      	ldrh	r3, [r3, #6]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d016      	beq.n	80094be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009490:	893b      	ldrh	r3, [r7, #8]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00e      	beq.n	80094b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	88da      	ldrh	r2, [r3, #6]
 800949a:	893b      	ldrh	r3, [r7, #8]
 800949c:	4293      	cmp	r3, r2
 800949e:	bf28      	it	cs
 80094a0:	4613      	movcs	r3, r2
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80094a6:	893b      	ldrh	r3, [r7, #8]
 80094a8:	461a      	mov	r2, r3
 80094aa:	68f9      	ldr	r1, [r7, #12]
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 fa5d 	bl	800996c <USBD_CtlSendData>
 80094b2:	e009      	b.n	80094c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f9e7 	bl	800988a <USBD_CtlError>
 80094bc:	e004      	b.n	80094c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 faae 	bl	8009a20 <USBD_CtlSendStatus>
 80094c4:	e000      	b.n	80094c8 <USBD_GetDescriptor+0x2cc>
    return;
 80094c6:	bf00      	nop
  }
}
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop

080094d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	889b      	ldrh	r3, [r3, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d131      	bne.n	8009546 <USBD_SetAddress+0x76>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	88db      	ldrh	r3, [r3, #6]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d12d      	bne.n	8009546 <USBD_SetAddress+0x76>
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	885b      	ldrh	r3, [r3, #2]
 80094ee:	2b7f      	cmp	r3, #127	; 0x7f
 80094f0:	d829      	bhi.n	8009546 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	885b      	ldrh	r3, [r3, #2]
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b03      	cmp	r3, #3
 8009508:	d104      	bne.n	8009514 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f9bc 	bl	800988a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009512:	e01d      	b.n	8009550 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	7bfa      	ldrb	r2, [r7, #15]
 8009518:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800951c:	7bfb      	ldrb	r3, [r7, #15]
 800951e:	4619      	mov	r1, r3
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f004 fa1d 	bl	800d960 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fa7a 	bl	8009a20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d004      	beq.n	800953c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2202      	movs	r2, #2
 8009536:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953a:	e009      	b.n	8009550 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009544:	e004      	b.n	8009550 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009546:	6839      	ldr	r1, [r7, #0]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 f99e 	bl	800988a <USBD_CtlError>
  }
}
 800954e:	bf00      	nop
 8009550:	bf00      	nop
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	885b      	ldrh	r3, [r3, #2]
 800956a:	b2da      	uxtb	r2, r3
 800956c:	4b4e      	ldr	r3, [pc, #312]	; (80096a8 <USBD_SetConfig+0x150>)
 800956e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009570:	4b4d      	ldr	r3, [pc, #308]	; (80096a8 <USBD_SetConfig+0x150>)
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d905      	bls.n	8009584 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f985 	bl	800988a <USBD_CtlError>
    return USBD_FAIL;
 8009580:	2303      	movs	r3, #3
 8009582:	e08c      	b.n	800969e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b02      	cmp	r3, #2
 800958e:	d002      	beq.n	8009596 <USBD_SetConfig+0x3e>
 8009590:	2b03      	cmp	r3, #3
 8009592:	d029      	beq.n	80095e8 <USBD_SetConfig+0x90>
 8009594:	e075      	b.n	8009682 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009596:	4b44      	ldr	r3, [pc, #272]	; (80096a8 <USBD_SetConfig+0x150>)
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d020      	beq.n	80095e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800959e:	4b42      	ldr	r3, [pc, #264]	; (80096a8 <USBD_SetConfig+0x150>)
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	461a      	mov	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095a8:	4b3f      	ldr	r3, [pc, #252]	; (80096a8 <USBD_SetConfig+0x150>)
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	4619      	mov	r1, r3
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7fe ffe7 	bl	8008582 <USBD_SetClassConfig>
 80095b4:	4603      	mov	r3, r0
 80095b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d008      	beq.n	80095d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f962 	bl	800988a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2202      	movs	r2, #2
 80095ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095ce:	e065      	b.n	800969c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fa25 	bl	8009a20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2203      	movs	r2, #3
 80095da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80095de:	e05d      	b.n	800969c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fa1d 	bl	8009a20 <USBD_CtlSendStatus>
      break;
 80095e6:	e059      	b.n	800969c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80095e8:	4b2f      	ldr	r3, [pc, #188]	; (80096a8 <USBD_SetConfig+0x150>)
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d112      	bne.n	8009616 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2202      	movs	r2, #2
 80095f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80095f8:	4b2b      	ldr	r3, [pc, #172]	; (80096a8 <USBD_SetConfig+0x150>)
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	461a      	mov	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009602:	4b29      	ldr	r3, [pc, #164]	; (80096a8 <USBD_SetConfig+0x150>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7fe ffd6 	bl	80085ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fa06 	bl	8009a20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009614:	e042      	b.n	800969c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009616:	4b24      	ldr	r3, [pc, #144]	; (80096a8 <USBD_SetConfig+0x150>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	461a      	mov	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	429a      	cmp	r2, r3
 8009622:	d02a      	beq.n	800967a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	b2db      	uxtb	r3, r3
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f7fe ffc4 	bl	80085ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009632:	4b1d      	ldr	r3, [pc, #116]	; (80096a8 <USBD_SetConfig+0x150>)
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800963c:	4b1a      	ldr	r3, [pc, #104]	; (80096a8 <USBD_SetConfig+0x150>)
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7fe ff9d 	bl	8008582 <USBD_SetClassConfig>
 8009648:	4603      	mov	r3, r0
 800964a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00f      	beq.n	8009672 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f918 	bl	800988a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	b2db      	uxtb	r3, r3
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f7fe ffa9 	bl	80085ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2202      	movs	r2, #2
 800966c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009670:	e014      	b.n	800969c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f9d4 	bl	8009a20 <USBD_CtlSendStatus>
      break;
 8009678:	e010      	b.n	800969c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f9d0 	bl	8009a20 <USBD_CtlSendStatus>
      break;
 8009680:	e00c      	b.n	800969c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009682:	6839      	ldr	r1, [r7, #0]
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f900 	bl	800988a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800968a:	4b07      	ldr	r3, [pc, #28]	; (80096a8 <USBD_SetConfig+0x150>)
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7fe ff92 	bl	80085ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009696:	2303      	movs	r3, #3
 8009698:	73fb      	strb	r3, [r7, #15]
      break;
 800969a:	bf00      	nop
  }

  return ret;
 800969c:	7bfb      	ldrb	r3, [r7, #15]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	200016d8 	.word	0x200016d8

080096ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	88db      	ldrh	r3, [r3, #6]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d004      	beq.n	80096c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 f8e2 	bl	800988a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80096c6:	e023      	b.n	8009710 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	dc02      	bgt.n	80096da <USBD_GetConfig+0x2e>
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	dc03      	bgt.n	80096e0 <USBD_GetConfig+0x34>
 80096d8:	e015      	b.n	8009706 <USBD_GetConfig+0x5a>
 80096da:	2b03      	cmp	r3, #3
 80096dc:	d00b      	beq.n	80096f6 <USBD_GetConfig+0x4a>
 80096de:	e012      	b.n	8009706 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	3308      	adds	r3, #8
 80096ea:	2201      	movs	r2, #1
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f93c 	bl	800996c <USBD_CtlSendData>
        break;
 80096f4:	e00c      	b.n	8009710 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	3304      	adds	r3, #4
 80096fa:	2201      	movs	r2, #1
 80096fc:	4619      	mov	r1, r3
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f934 	bl	800996c <USBD_CtlSendData>
        break;
 8009704:	e004      	b.n	8009710 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f8be 	bl	800988a <USBD_CtlError>
        break;
 800970e:	bf00      	nop
}
 8009710:	bf00      	nop
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009728:	b2db      	uxtb	r3, r3
 800972a:	3b01      	subs	r3, #1
 800972c:	2b02      	cmp	r3, #2
 800972e:	d81e      	bhi.n	800976e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	88db      	ldrh	r3, [r3, #6]
 8009734:	2b02      	cmp	r3, #2
 8009736:	d004      	beq.n	8009742 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009738:	6839      	ldr	r1, [r7, #0]
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f8a5 	bl	800988a <USBD_CtlError>
        break;
 8009740:	e01a      	b.n	8009778 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2201      	movs	r2, #1
 8009746:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800974e:	2b00      	cmp	r3, #0
 8009750:	d005      	beq.n	800975e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	f043 0202 	orr.w	r2, r3, #2
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	330c      	adds	r3, #12
 8009762:	2202      	movs	r2, #2
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f900 	bl	800996c <USBD_CtlSendData>
      break;
 800976c:	e004      	b.n	8009778 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f88a 	bl	800988a <USBD_CtlError>
      break;
 8009776:	bf00      	nop
  }
}
 8009778:	bf00      	nop
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	885b      	ldrh	r3, [r3, #2]
 800978e:	2b01      	cmp	r3, #1
 8009790:	d107      	bne.n	80097a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f940 	bl	8009a20 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80097a0:	e013      	b.n	80097ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	885b      	ldrh	r3, [r3, #2]
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d10b      	bne.n	80097c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	889b      	ldrh	r3, [r3, #4]
 80097ae:	0a1b      	lsrs	r3, r3, #8
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f930 	bl	8009a20 <USBD_CtlSendStatus>
}
 80097c0:	e003      	b.n	80097ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80097c2:	6839      	ldr	r1, [r7, #0]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f860 	bl	800988a <USBD_CtlError>
}
 80097ca:	bf00      	nop
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b082      	sub	sp, #8
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	3b01      	subs	r3, #1
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d80b      	bhi.n	8009802 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	885b      	ldrh	r3, [r3, #2]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d10c      	bne.n	800980c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f910 	bl	8009a20 <USBD_CtlSendStatus>
      }
      break;
 8009800:	e004      	b.n	800980c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009802:	6839      	ldr	r1, [r7, #0]
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 f840 	bl	800988a <USBD_CtlError>
      break;
 800980a:	e000      	b.n	800980e <USBD_ClrFeature+0x3c>
      break;
 800980c:	bf00      	nop
  }
}
 800980e:	bf00      	nop
 8009810:	3708      	adds	r7, #8
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b084      	sub	sp, #16
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	781a      	ldrb	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	3301      	adds	r3, #1
 8009830:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	781a      	ldrb	r2, [r3, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	3301      	adds	r3, #1
 800983e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f7ff fa41 	bl	8008cc8 <SWAPBYTE>
 8009846:	4603      	mov	r3, r0
 8009848:	461a      	mov	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	3301      	adds	r3, #1
 8009852:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	3301      	adds	r3, #1
 8009858:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f7ff fa34 	bl	8008cc8 <SWAPBYTE>
 8009860:	4603      	mov	r3, r0
 8009862:	461a      	mov	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	3301      	adds	r3, #1
 800986c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	3301      	adds	r3, #1
 8009872:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f7ff fa27 	bl	8008cc8 <SWAPBYTE>
 800987a:	4603      	mov	r3, r0
 800987c:	461a      	mov	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	80da      	strh	r2, [r3, #6]
}
 8009882:	bf00      	nop
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b082      	sub	sp, #8
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
 8009892:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009894:	2180      	movs	r1, #128	; 0x80
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f003 fff8 	bl	800d88c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800989c:	2100      	movs	r1, #0
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f003 fff4 	bl	800d88c <USBD_LL_StallEP>
}
 80098a4:	bf00      	nop
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80098b8:	2300      	movs	r3, #0
 80098ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d036      	beq.n	8009930 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80098c6:	6938      	ldr	r0, [r7, #16]
 80098c8:	f000 f836 	bl	8009938 <USBD_GetLen>
 80098cc:	4603      	mov	r3, r0
 80098ce:	3301      	adds	r3, #1
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	005b      	lsls	r3, r3, #1
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098da:	7dfb      	ldrb	r3, [r7, #23]
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	4413      	add	r3, r2
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	7812      	ldrb	r2, [r2, #0]
 80098e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
 80098e8:	3301      	adds	r3, #1
 80098ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	4413      	add	r3, r2
 80098f2:	2203      	movs	r2, #3
 80098f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
 80098f8:	3301      	adds	r3, #1
 80098fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80098fc:	e013      	b.n	8009926 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	4413      	add	r3, r2
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	7812      	ldrb	r2, [r2, #0]
 8009908:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	3301      	adds	r3, #1
 800990e:	613b      	str	r3, [r7, #16]
    idx++;
 8009910:	7dfb      	ldrb	r3, [r7, #23]
 8009912:	3301      	adds	r3, #1
 8009914:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009916:	7dfb      	ldrb	r3, [r7, #23]
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	4413      	add	r3, r2
 800991c:	2200      	movs	r2, #0
 800991e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009920:	7dfb      	ldrb	r3, [r7, #23]
 8009922:	3301      	adds	r3, #1
 8009924:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1e7      	bne.n	80098fe <USBD_GetString+0x52>
 800992e:	e000      	b.n	8009932 <USBD_GetString+0x86>
    return;
 8009930:	bf00      	nop
  }
}
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009940:	2300      	movs	r3, #0
 8009942:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009948:	e005      	b.n	8009956 <USBD_GetLen+0x1e>
  {
    len++;
 800994a:	7bfb      	ldrb	r3, [r7, #15]
 800994c:	3301      	adds	r3, #1
 800994e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	3301      	adds	r3, #1
 8009954:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1f5      	bne.n	800994a <USBD_GetLen+0x12>
  }

  return len;
 800995e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3714      	adds	r7, #20
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2202      	movs	r2, #2
 800997c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	2100      	movs	r1, #0
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f004 f803 	bl	800d99e <USBD_LL_Transmit>

  return USBD_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b084      	sub	sp, #16
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	60f8      	str	r0, [r7, #12]
 80099aa:	60b9      	str	r1, [r7, #8]
 80099ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	2100      	movs	r1, #0
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f003 fff2 	bl	800d99e <USBD_LL_Transmit>

  return USBD_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2203      	movs	r2, #3
 80099d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	2100      	movs	r1, #0
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f003 fff6 	bl	800d9e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b084      	sub	sp, #16
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	60f8      	str	r0, [r7, #12]
 8009a06:	60b9      	str	r1, [r7, #8]
 8009a08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	2100      	movs	r1, #0
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f003 ffe5 	bl	800d9e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2204      	movs	r2, #4
 8009a2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a30:	2300      	movs	r3, #0
 8009a32:	2200      	movs	r2, #0
 8009a34:	2100      	movs	r1, #0
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f003 ffb1 	bl	800d99e <USBD_LL_Transmit>

  return USBD_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b082      	sub	sp, #8
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2205      	movs	r2, #5
 8009a52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a56:	2300      	movs	r3, #0
 8009a58:	2200      	movs	r2, #0
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f003 ffbf 	bl	800d9e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <__NVIC_SetPriority>:
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	6039      	str	r1, [r7, #0]
 8009a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	db0a      	blt.n	8009a96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	b2da      	uxtb	r2, r3
 8009a84:	490c      	ldr	r1, [pc, #48]	; (8009ab8 <__NVIC_SetPriority+0x4c>)
 8009a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a8a:	0112      	lsls	r2, r2, #4
 8009a8c:	b2d2      	uxtb	r2, r2
 8009a8e:	440b      	add	r3, r1
 8009a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a94:	e00a      	b.n	8009aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	4908      	ldr	r1, [pc, #32]	; (8009abc <__NVIC_SetPriority+0x50>)
 8009a9c:	79fb      	ldrb	r3, [r7, #7]
 8009a9e:	f003 030f 	and.w	r3, r3, #15
 8009aa2:	3b04      	subs	r3, #4
 8009aa4:	0112      	lsls	r2, r2, #4
 8009aa6:	b2d2      	uxtb	r2, r2
 8009aa8:	440b      	add	r3, r1
 8009aaa:	761a      	strb	r2, [r3, #24]
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	e000e100 	.word	0xe000e100
 8009abc:	e000ed00 	.word	0xe000ed00

08009ac0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009ac4:	4b05      	ldr	r3, [pc, #20]	; (8009adc <SysTick_Handler+0x1c>)
 8009ac6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009ac8:	f002 fa06 	bl	800bed8 <xTaskGetSchedulerState>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d001      	beq.n	8009ad6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009ad2:	f003 f8e9 	bl	800cca8 <xPortSysTickHandler>
  }
}
 8009ad6:	bf00      	nop
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	e000e010 	.word	0xe000e010

08009ae0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	f06f 0004 	mvn.w	r0, #4
 8009aea:	f7ff ffbf 	bl	8009a6c <__NVIC_SetPriority>
#endif
}
 8009aee:	bf00      	nop
 8009af0:	bd80      	pop	{r7, pc}
	...

08009af4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009afa:	f3ef 8305 	mrs	r3, IPSR
 8009afe:	603b      	str	r3, [r7, #0]
  return(result);
 8009b00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d003      	beq.n	8009b0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009b06:	f06f 0305 	mvn.w	r3, #5
 8009b0a:	607b      	str	r3, [r7, #4]
 8009b0c:	e00c      	b.n	8009b28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009b0e:	4b0a      	ldr	r3, [pc, #40]	; (8009b38 <osKernelInitialize+0x44>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d105      	bne.n	8009b22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009b16:	4b08      	ldr	r3, [pc, #32]	; (8009b38 <osKernelInitialize+0x44>)
 8009b18:	2201      	movs	r2, #1
 8009b1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	607b      	str	r3, [r7, #4]
 8009b20:	e002      	b.n	8009b28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009b22:	f04f 33ff 	mov.w	r3, #4294967295
 8009b26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b28:	687b      	ldr	r3, [r7, #4]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	200016dc 	.word	0x200016dc

08009b3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b42:	f3ef 8305 	mrs	r3, IPSR
 8009b46:	603b      	str	r3, [r7, #0]
  return(result);
 8009b48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d003      	beq.n	8009b56 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009b4e:	f06f 0305 	mvn.w	r3, #5
 8009b52:	607b      	str	r3, [r7, #4]
 8009b54:	e010      	b.n	8009b78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b56:	4b0b      	ldr	r3, [pc, #44]	; (8009b84 <osKernelStart+0x48>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d109      	bne.n	8009b72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b5e:	f7ff ffbf 	bl	8009ae0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b62:	4b08      	ldr	r3, [pc, #32]	; (8009b84 <osKernelStart+0x48>)
 8009b64:	2202      	movs	r2, #2
 8009b66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b68:	f001 fd42 	bl	800b5f0 <vTaskStartScheduler>
      stat = osOK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	607b      	str	r3, [r7, #4]
 8009b70:	e002      	b.n	8009b78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009b72:	f04f 33ff 	mov.w	r3, #4294967295
 8009b76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b78:	687b      	ldr	r3, [r7, #4]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	200016dc 	.word	0x200016dc

08009b88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b08e      	sub	sp, #56	; 0x38
 8009b8c:	af04      	add	r7, sp, #16
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b94:	2300      	movs	r3, #0
 8009b96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b98:	f3ef 8305 	mrs	r3, IPSR
 8009b9c:	617b      	str	r3, [r7, #20]
  return(result);
 8009b9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d17e      	bne.n	8009ca2 <osThreadNew+0x11a>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d07b      	beq.n	8009ca2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009baa:	2380      	movs	r3, #128	; 0x80
 8009bac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009bae:	2318      	movs	r3, #24
 8009bb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d045      	beq.n	8009c4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d002      	beq.n	8009bd0 <osThreadNew+0x48>
        name = attr->name;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	699b      	ldr	r3, [r3, #24]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d002      	beq.n	8009bde <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d008      	beq.n	8009bf6 <osThreadNew+0x6e>
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	2b38      	cmp	r3, #56	; 0x38
 8009be8:	d805      	bhi.n	8009bf6 <osThreadNew+0x6e>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <osThreadNew+0x72>
        return (NULL);
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	e054      	b.n	8009ca4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	695b      	ldr	r3, [r3, #20]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d003      	beq.n	8009c0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	089b      	lsrs	r3, r3, #2
 8009c08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00e      	beq.n	8009c30 <osThreadNew+0xa8>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	2b63      	cmp	r3, #99	; 0x63
 8009c18:	d90a      	bls.n	8009c30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d006      	beq.n	8009c30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d002      	beq.n	8009c30 <osThreadNew+0xa8>
        mem = 1;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	61bb      	str	r3, [r7, #24]
 8009c2e:	e010      	b.n	8009c52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d10c      	bne.n	8009c52 <osThreadNew+0xca>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d108      	bne.n	8009c52 <osThreadNew+0xca>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d104      	bne.n	8009c52 <osThreadNew+0xca>
          mem = 0;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	61bb      	str	r3, [r7, #24]
 8009c4c:	e001      	b.n	8009c52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d110      	bne.n	8009c7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c60:	9202      	str	r2, [sp, #8]
 8009c62:	9301      	str	r3, [sp, #4]
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	6a3a      	ldr	r2, [r7, #32]
 8009c6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f001 fae2 	bl	800b238 <xTaskCreateStatic>
 8009c74:	4603      	mov	r3, r0
 8009c76:	613b      	str	r3, [r7, #16]
 8009c78:	e013      	b.n	8009ca2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d110      	bne.n	8009ca2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	f107 0310 	add.w	r3, r7, #16
 8009c88:	9301      	str	r3, [sp, #4]
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f001 fb2d 	bl	800b2f2 <xTaskCreate>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d001      	beq.n	8009ca2 <osThreadNew+0x11a>
            hTask = NULL;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009ca2:	693b      	ldr	r3, [r7, #16]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3728      	adds	r7, #40	; 0x28
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cb4:	f3ef 8305 	mrs	r3, IPSR
 8009cb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d003      	beq.n	8009cc8 <osDelay+0x1c>
    stat = osErrorISR;
 8009cc0:	f06f 0305 	mvn.w	r3, #5
 8009cc4:	60fb      	str	r3, [r7, #12]
 8009cc6:	e007      	b.n	8009cd8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d002      	beq.n	8009cd8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f001 fc58 	bl	800b588 <vTaskDelay>
    }
  }

  return (stat);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b088      	sub	sp, #32
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009cea:	2300      	movs	r3, #0
 8009cec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cee:	f3ef 8305 	mrs	r3, IPSR
 8009cf2:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cf4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d174      	bne.n	8009de4 <osMutexNew+0x102>
    if (attr != NULL) {
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d003      	beq.n	8009d08 <osMutexNew+0x26>
      type = attr->attr_bits;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	61bb      	str	r3, [r7, #24]
 8009d06:	e001      	b.n	8009d0c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d002      	beq.n	8009d1c <osMutexNew+0x3a>
      rmtx = 1U;
 8009d16:	2301      	movs	r3, #1
 8009d18:	617b      	str	r3, [r7, #20]
 8009d1a:	e001      	b.n	8009d20 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	f003 0308 	and.w	r3, r3, #8
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d15c      	bne.n	8009de4 <osMutexNew+0x102>
      mem = -1;
 8009d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d2e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d015      	beq.n	8009d62 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d006      	beq.n	8009d4c <osMutexNew+0x6a>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	2b4f      	cmp	r3, #79	; 0x4f
 8009d44:	d902      	bls.n	8009d4c <osMutexNew+0x6a>
          mem = 1;
 8009d46:	2301      	movs	r3, #1
 8009d48:	613b      	str	r3, [r7, #16]
 8009d4a:	e00c      	b.n	8009d66 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d108      	bne.n	8009d66 <osMutexNew+0x84>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d104      	bne.n	8009d66 <osMutexNew+0x84>
            mem = 0;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	613b      	str	r3, [r7, #16]
 8009d60:	e001      	b.n	8009d66 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009d62:	2300      	movs	r3, #0
 8009d64:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d112      	bne.n	8009d92 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d007      	beq.n	8009d82 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	4619      	mov	r1, r3
 8009d78:	2004      	movs	r0, #4
 8009d7a:	f000 fc14 	bl	800a5a6 <xQueueCreateMutexStatic>
 8009d7e:	61f8      	str	r0, [r7, #28]
 8009d80:	e016      	b.n	8009db0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	4619      	mov	r1, r3
 8009d88:	2001      	movs	r0, #1
 8009d8a:	f000 fc0c 	bl	800a5a6 <xQueueCreateMutexStatic>
 8009d8e:	61f8      	str	r0, [r7, #28]
 8009d90:	e00e      	b.n	8009db0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d10b      	bne.n	8009db0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d004      	beq.n	8009da8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009d9e:	2004      	movs	r0, #4
 8009da0:	f000 fbe9 	bl	800a576 <xQueueCreateMutex>
 8009da4:	61f8      	str	r0, [r7, #28]
 8009da6:	e003      	b.n	8009db0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009da8:	2001      	movs	r0, #1
 8009daa:	f000 fbe4 	bl	800a576 <xQueueCreateMutex>
 8009dae:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00c      	beq.n	8009dd0 <osMutexNew+0xee>
        if (attr != NULL) {
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d003      	beq.n	8009dc4 <osMutexNew+0xe2>
          name = attr->name;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	60fb      	str	r3, [r7, #12]
 8009dc2:	e001      	b.n	8009dc8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009dc8:	68f9      	ldr	r1, [r7, #12]
 8009dca:	69f8      	ldr	r0, [r7, #28]
 8009dcc:	f001 f9ac 	bl	800b128 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d006      	beq.n	8009de4 <osMutexNew+0x102>
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d003      	beq.n	8009de4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	f043 0301 	orr.w	r3, r3, #1
 8009de2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009de4:	69fb      	ldr	r3, [r7, #28]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3720      	adds	r7, #32
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b086      	sub	sp, #24
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f023 0301 	bic.w	r3, r3, #1
 8009dfe:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f003 0301 	and.w	r3, r3, #1
 8009e06:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e0c:	f3ef 8305 	mrs	r3, IPSR
 8009e10:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e12:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d003      	beq.n	8009e20 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8009e18:	f06f 0305 	mvn.w	r3, #5
 8009e1c:	617b      	str	r3, [r7, #20]
 8009e1e:	e02c      	b.n	8009e7a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d103      	bne.n	8009e2e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8009e26:	f06f 0303 	mvn.w	r3, #3
 8009e2a:	617b      	str	r3, [r7, #20]
 8009e2c:	e025      	b.n	8009e7a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d011      	beq.n	8009e58 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009e34:	6839      	ldr	r1, [r7, #0]
 8009e36:	6938      	ldr	r0, [r7, #16]
 8009e38:	f000 fc04 	bl	800a644 <xQueueTakeMutexRecursive>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d01b      	beq.n	8009e7a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d003      	beq.n	8009e50 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8009e48:	f06f 0301 	mvn.w	r3, #1
 8009e4c:	617b      	str	r3, [r7, #20]
 8009e4e:	e014      	b.n	8009e7a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009e50:	f06f 0302 	mvn.w	r3, #2
 8009e54:	617b      	str	r3, [r7, #20]
 8009e56:	e010      	b.n	8009e7a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009e58:	6839      	ldr	r1, [r7, #0]
 8009e5a:	6938      	ldr	r0, [r7, #16]
 8009e5c:	f000 ff0c 	bl	800ac78 <xQueueSemaphoreTake>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d009      	beq.n	8009e7a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d003      	beq.n	8009e74 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8009e6c:	f06f 0301 	mvn.w	r3, #1
 8009e70:	617b      	str	r3, [r7, #20]
 8009e72:	e002      	b.n	8009e7a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009e74:	f06f 0302 	mvn.w	r3, #2
 8009e78:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8009e7a:	697b      	ldr	r3, [r7, #20]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3718      	adds	r7, #24
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f023 0301 	bic.w	r3, r3, #1
 8009e92:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f003 0301 	and.w	r3, r3, #1
 8009e9a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ea0:	f3ef 8305 	mrs	r3, IPSR
 8009ea4:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ea6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d003      	beq.n	8009eb4 <osMutexRelease+0x30>
    stat = osErrorISR;
 8009eac:	f06f 0305 	mvn.w	r3, #5
 8009eb0:	617b      	str	r3, [r7, #20]
 8009eb2:	e01f      	b.n	8009ef4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d103      	bne.n	8009ec2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8009eba:	f06f 0303 	mvn.w	r3, #3
 8009ebe:	617b      	str	r3, [r7, #20]
 8009ec0:	e018      	b.n	8009ef4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d009      	beq.n	8009edc <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009ec8:	6938      	ldr	r0, [r7, #16]
 8009eca:	f000 fb87 	bl	800a5dc <xQueueGiveMutexRecursive>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d00f      	beq.n	8009ef4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009ed4:	f06f 0302 	mvn.w	r3, #2
 8009ed8:	617b      	str	r3, [r7, #20]
 8009eda:	e00b      	b.n	8009ef4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009edc:	2300      	movs	r3, #0
 8009ede:	2200      	movs	r2, #0
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	6938      	ldr	r0, [r7, #16]
 8009ee4:	f000 fc4e 	bl	800a784 <xQueueGenericSend>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d002      	beq.n	8009ef4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009eee:	f06f 0302 	mvn.w	r3, #2
 8009ef2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009ef4:	697b      	ldr	r3, [r7, #20]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b08a      	sub	sp, #40	; 0x28
 8009f02:	af02      	add	r7, sp, #8
 8009f04:	60f8      	str	r0, [r7, #12]
 8009f06:	60b9      	str	r1, [r7, #8]
 8009f08:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f0e:	f3ef 8305 	mrs	r3, IPSR
 8009f12:	613b      	str	r3, [r7, #16]
  return(result);
 8009f14:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d175      	bne.n	800a006 <osSemaphoreNew+0x108>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d072      	beq.n	800a006 <osSemaphoreNew+0x108>
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d86e      	bhi.n	800a006 <osSemaphoreNew+0x108>
    mem = -1;
 8009f28:	f04f 33ff 	mov.w	r3, #4294967295
 8009f2c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d015      	beq.n	8009f60 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d006      	beq.n	8009f4a <osSemaphoreNew+0x4c>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	2b4f      	cmp	r3, #79	; 0x4f
 8009f42:	d902      	bls.n	8009f4a <osSemaphoreNew+0x4c>
        mem = 1;
 8009f44:	2301      	movs	r3, #1
 8009f46:	61bb      	str	r3, [r7, #24]
 8009f48:	e00c      	b.n	8009f64 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d108      	bne.n	8009f64 <osSemaphoreNew+0x66>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d104      	bne.n	8009f64 <osSemaphoreNew+0x66>
          mem = 0;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	61bb      	str	r3, [r7, #24]
 8009f5e:	e001      	b.n	8009f64 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009f60:	2300      	movs	r3, #0
 8009f62:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f6a:	d04c      	beq.n	800a006 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d128      	bne.n	8009fc4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d10a      	bne.n	8009f8e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	2203      	movs	r2, #3
 8009f7e:	9200      	str	r2, [sp, #0]
 8009f80:	2200      	movs	r2, #0
 8009f82:	2100      	movs	r1, #0
 8009f84:	2001      	movs	r0, #1
 8009f86:	f000 fa07 	bl	800a398 <xQueueGenericCreateStatic>
 8009f8a:	61f8      	str	r0, [r7, #28]
 8009f8c:	e005      	b.n	8009f9a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009f8e:	2203      	movs	r2, #3
 8009f90:	2100      	movs	r1, #0
 8009f92:	2001      	movs	r0, #1
 8009f94:	f000 fa78 	bl	800a488 <xQueueGenericCreate>
 8009f98:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d022      	beq.n	8009fe6 <osSemaphoreNew+0xe8>
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d01f      	beq.n	8009fe6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	2200      	movs	r2, #0
 8009faa:	2100      	movs	r1, #0
 8009fac:	69f8      	ldr	r0, [r7, #28]
 8009fae:	f000 fbe9 	bl	800a784 <xQueueGenericSend>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d016      	beq.n	8009fe6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009fb8:	69f8      	ldr	r0, [r7, #28]
 8009fba:	f000 ff69 	bl	800ae90 <vQueueDelete>
            hSemaphore = NULL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	61fb      	str	r3, [r7, #28]
 8009fc2:	e010      	b.n	8009fe6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d108      	bne.n	8009fdc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	68b9      	ldr	r1, [r7, #8]
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f000 fb6c 	bl	800a6b0 <xQueueCreateCountingSemaphoreStatic>
 8009fd8:	61f8      	str	r0, [r7, #28]
 8009fda:	e004      	b.n	8009fe6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009fdc:	68b9      	ldr	r1, [r7, #8]
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f000 fb9d 	bl	800a71e <xQueueCreateCountingSemaphore>
 8009fe4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00c      	beq.n	800a006 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d003      	beq.n	8009ffa <osSemaphoreNew+0xfc>
          name = attr->name;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	617b      	str	r3, [r7, #20]
 8009ff8:	e001      	b.n	8009ffe <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009ffe:	6979      	ldr	r1, [r7, #20]
 800a000:	69f8      	ldr	r0, [r7, #28]
 800a002:	f001 f891 	bl	800b128 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a006:	69fb      	ldr	r3, [r7, #28]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3720      	adds	r7, #32
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a010:	b580      	push	{r7, lr}
 800a012:	b08a      	sub	sp, #40	; 0x28
 800a014:	af02      	add	r7, sp, #8
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a01c:	2300      	movs	r3, #0
 800a01e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a020:	f3ef 8305 	mrs	r3, IPSR
 800a024:	613b      	str	r3, [r7, #16]
  return(result);
 800a026:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d15f      	bne.n	800a0ec <osMessageQueueNew+0xdc>
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d05c      	beq.n	800a0ec <osMessageQueueNew+0xdc>
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d059      	beq.n	800a0ec <osMessageQueueNew+0xdc>
    mem = -1;
 800a038:	f04f 33ff 	mov.w	r3, #4294967295
 800a03c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d029      	beq.n	800a098 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d012      	beq.n	800a072 <osMessageQueueNew+0x62>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	2b4f      	cmp	r3, #79	; 0x4f
 800a052:	d90e      	bls.n	800a072 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00a      	beq.n	800a072 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	695a      	ldr	r2, [r3, #20]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	68b9      	ldr	r1, [r7, #8]
 800a064:	fb01 f303 	mul.w	r3, r1, r3
 800a068:	429a      	cmp	r2, r3
 800a06a:	d302      	bcc.n	800a072 <osMessageQueueNew+0x62>
        mem = 1;
 800a06c:	2301      	movs	r3, #1
 800a06e:	61bb      	str	r3, [r7, #24]
 800a070:	e014      	b.n	800a09c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d110      	bne.n	800a09c <osMessageQueueNew+0x8c>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10c      	bne.n	800a09c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a086:	2b00      	cmp	r3, #0
 800a088:	d108      	bne.n	800a09c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	695b      	ldr	r3, [r3, #20]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d104      	bne.n	800a09c <osMessageQueueNew+0x8c>
          mem = 0;
 800a092:	2300      	movs	r3, #0
 800a094:	61bb      	str	r3, [r7, #24]
 800a096:	e001      	b.n	800a09c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a098:	2300      	movs	r3, #0
 800a09a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d10b      	bne.n	800a0ba <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	691a      	ldr	r2, [r3, #16]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	9100      	str	r1, [sp, #0]
 800a0ae:	68b9      	ldr	r1, [r7, #8]
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 f971 	bl	800a398 <xQueueGenericCreateStatic>
 800a0b6:	61f8      	str	r0, [r7, #28]
 800a0b8:	e008      	b.n	800a0cc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d105      	bne.n	800a0cc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	68b9      	ldr	r1, [r7, #8]
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 f9df 	bl	800a488 <xQueueGenericCreate>
 800a0ca:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00c      	beq.n	800a0ec <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d003      	beq.n	800a0e0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	617b      	str	r3, [r7, #20]
 800a0de:	e001      	b.n	800a0e4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a0e4:	6979      	ldr	r1, [r7, #20]
 800a0e6:	69f8      	ldr	r0, [r7, #28]
 800a0e8:	f001 f81e 	bl	800b128 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a0ec:	69fb      	ldr	r3, [r7, #28]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3720      	adds	r7, #32
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
	...

0800a0f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	4a07      	ldr	r2, [pc, #28]	; (800a124 <vApplicationGetIdleTaskMemory+0x2c>)
 800a108:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	4a06      	ldr	r2, [pc, #24]	; (800a128 <vApplicationGetIdleTaskMemory+0x30>)
 800a10e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2280      	movs	r2, #128	; 0x80
 800a114:	601a      	str	r2, [r3, #0]
}
 800a116:	bf00      	nop
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	200016e0 	.word	0x200016e0
 800a128:	20001744 	.word	0x20001744

0800a12c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	4a07      	ldr	r2, [pc, #28]	; (800a158 <vApplicationGetTimerTaskMemory+0x2c>)
 800a13c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	4a06      	ldr	r2, [pc, #24]	; (800a15c <vApplicationGetTimerTaskMemory+0x30>)
 800a142:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a14a:	601a      	str	r2, [r3, #0]
}
 800a14c:	bf00      	nop
 800a14e:	3714      	adds	r7, #20
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr
 800a158:	20001944 	.word	0x20001944
 800a15c:	200019a8 	.word	0x200019a8

0800a160 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f103 0208 	add.w	r2, r3, #8
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f04f 32ff 	mov.w	r2, #4294967295
 800a178:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f103 0208 	add.w	r2, r3, #8
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f103 0208 	add.w	r2, r3, #8
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a194:	bf00      	nop
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a1ae:	bf00      	nop
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b085      	sub	sp, #20
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	689a      	ldr	r2, [r3, #8]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	1c5a      	adds	r2, r3, #1
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	601a      	str	r2, [r3, #0]
}
 800a1f6:	bf00      	nop
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a202:	b480      	push	{r7}
 800a204:	b085      	sub	sp, #20
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a218:	d103      	bne.n	800a222 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	60fb      	str	r3, [r7, #12]
 800a220:	e00c      	b.n	800a23c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	3308      	adds	r3, #8
 800a226:	60fb      	str	r3, [r7, #12]
 800a228:	e002      	b.n	800a230 <vListInsert+0x2e>
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d2f6      	bcs.n	800a22a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	683a      	ldr	r2, [r7, #0]
 800a24a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	683a      	ldr	r2, [r7, #0]
 800a256:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	601a      	str	r2, [r3, #0]
}
 800a268:	bf00      	nop
 800a26a:	3714      	adds	r7, #20
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	6892      	ldr	r2, [r2, #8]
 800a28a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	6852      	ldr	r2, [r2, #4]
 800a294:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d103      	bne.n	800a2a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	689a      	ldr	r2, [r3, #8]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	1e5a      	subs	r2, r3, #1
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3714      	adds	r7, #20
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d10a      	bne.n	800a2f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e0:	f383 8811 	msr	BASEPRI, r3
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a2ee:	bf00      	nop
 800a2f0:	e7fe      	b.n	800a2f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a2f2:	f002 fc47 	bl	800cb84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2fe:	68f9      	ldr	r1, [r7, #12]
 800a300:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a302:	fb01 f303 	mul.w	r3, r1, r3
 800a306:	441a      	add	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a322:	3b01      	subs	r3, #1
 800a324:	68f9      	ldr	r1, [r7, #12]
 800a326:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a328:	fb01 f303 	mul.w	r3, r1, r3
 800a32c:	441a      	add	r2, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	22ff      	movs	r2, #255	; 0xff
 800a336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	22ff      	movs	r2, #255	; 0xff
 800a33e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d114      	bne.n	800a372 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d01a      	beq.n	800a386 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	3310      	adds	r3, #16
 800a354:	4618      	mov	r0, r3
 800a356:	f001 fbf1 	bl	800bb3c <xTaskRemoveFromEventList>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d012      	beq.n	800a386 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a360:	4b0c      	ldr	r3, [pc, #48]	; (800a394 <xQueueGenericReset+0xcc>)
 800a362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a366:	601a      	str	r2, [r3, #0]
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	e009      	b.n	800a386 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	3310      	adds	r3, #16
 800a376:	4618      	mov	r0, r3
 800a378:	f7ff fef2 	bl	800a160 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	3324      	adds	r3, #36	; 0x24
 800a380:	4618      	mov	r0, r3
 800a382:	f7ff feed 	bl	800a160 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a386:	f002 fc2d 	bl	800cbe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a38a:	2301      	movs	r3, #1
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	e000ed04 	.word	0xe000ed04

0800a398 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b08e      	sub	sp, #56	; 0x38
 800a39c:	af02      	add	r7, sp, #8
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]
 800a3a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10a      	bne.n	800a3c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b0:	f383 8811 	msr	BASEPRI, r3
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a3be:	bf00      	nop
 800a3c0:	e7fe      	b.n	800a3c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10a      	bne.n	800a3de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a3da:	bf00      	nop
 800a3dc:	e7fe      	b.n	800a3dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d002      	beq.n	800a3ea <xQueueGenericCreateStatic+0x52>
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d001      	beq.n	800a3ee <xQueueGenericCreateStatic+0x56>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e000      	b.n	800a3f0 <xQueueGenericCreateStatic+0x58>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10a      	bne.n	800a40a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f8:	f383 8811 	msr	BASEPRI, r3
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	623b      	str	r3, [r7, #32]
}
 800a406:	bf00      	nop
 800a408:	e7fe      	b.n	800a408 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d102      	bne.n	800a416 <xQueueGenericCreateStatic+0x7e>
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d101      	bne.n	800a41a <xQueueGenericCreateStatic+0x82>
 800a416:	2301      	movs	r3, #1
 800a418:	e000      	b.n	800a41c <xQueueGenericCreateStatic+0x84>
 800a41a:	2300      	movs	r3, #0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10a      	bne.n	800a436 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	61fb      	str	r3, [r7, #28]
}
 800a432:	bf00      	nop
 800a434:	e7fe      	b.n	800a434 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a436:	2350      	movs	r3, #80	; 0x50
 800a438:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	2b50      	cmp	r3, #80	; 0x50
 800a43e:	d00a      	beq.n	800a456 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a444:	f383 8811 	msr	BASEPRI, r3
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	61bb      	str	r3, [r7, #24]
}
 800a452:	bf00      	nop
 800a454:	e7fe      	b.n	800a454 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a456:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00d      	beq.n	800a47e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a464:	2201      	movs	r2, #1
 800a466:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a46a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	4613      	mov	r3, r2
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	68b9      	ldr	r1, [r7, #8]
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f000 f83f 	bl	800a4fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a480:	4618      	mov	r0, r3
 800a482:	3730      	adds	r7, #48	; 0x30
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08a      	sub	sp, #40	; 0x28
 800a48c:	af02      	add	r7, sp, #8
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	4613      	mov	r3, r2
 800a494:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10a      	bne.n	800a4b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a0:	f383 8811 	msr	BASEPRI, r3
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	613b      	str	r3, [r7, #16]
}
 800a4ae:	bf00      	nop
 800a4b0:	e7fe      	b.n	800a4b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	fb02 f303 	mul.w	r3, r2, r3
 800a4ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	3350      	adds	r3, #80	; 0x50
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f002 fc81 	bl	800cdc8 <pvPortMalloc>
 800a4c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d011      	beq.n	800a4f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	3350      	adds	r3, #80	; 0x50
 800a4d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4e0:	79fa      	ldrb	r2, [r7, #7]
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	68b9      	ldr	r1, [r7, #8]
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f000 f805 	bl	800a4fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4f2:	69bb      	ldr	r3, [r7, #24]
	}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3720      	adds	r7, #32
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
 800a508:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d103      	bne.n	800a518 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	69ba      	ldr	r2, [r7, #24]
 800a514:	601a      	str	r2, [r3, #0]
 800a516:	e002      	b.n	800a51e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	68ba      	ldr	r2, [r7, #8]
 800a528:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a52a:	2101      	movs	r1, #1
 800a52c:	69b8      	ldr	r0, [r7, #24]
 800a52e:	f7ff fecb 	bl	800a2c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	78fa      	ldrb	r2, [r7, #3]
 800a536:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a53a:	bf00      	nop
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a542:	b580      	push	{r7, lr}
 800a544:	b082      	sub	sp, #8
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00e      	beq.n	800a56e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a562:	2300      	movs	r3, #0
 800a564:	2200      	movs	r2, #0
 800a566:	2100      	movs	r1, #0
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 f90b 	bl	800a784 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a56e:	bf00      	nop
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a576:	b580      	push	{r7, lr}
 800a578:	b086      	sub	sp, #24
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	4603      	mov	r3, r0
 800a57e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a580:	2301      	movs	r3, #1
 800a582:	617b      	str	r3, [r7, #20]
 800a584:	2300      	movs	r3, #0
 800a586:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a588:	79fb      	ldrb	r3, [r7, #7]
 800a58a:	461a      	mov	r2, r3
 800a58c:	6939      	ldr	r1, [r7, #16]
 800a58e:	6978      	ldr	r0, [r7, #20]
 800a590:	f7ff ff7a 	bl	800a488 <xQueueGenericCreate>
 800a594:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f7ff ffd3 	bl	800a542 <prvInitialiseMutex>

		return xNewQueue;
 800a59c:	68fb      	ldr	r3, [r7, #12]
	}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3718      	adds	r7, #24
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b088      	sub	sp, #32
 800a5aa:	af02      	add	r7, sp, #8
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	6039      	str	r1, [r7, #0]
 800a5b0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	617b      	str	r3, [r7, #20]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a5ba:	79fb      	ldrb	r3, [r7, #7]
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	6939      	ldr	r1, [r7, #16]
 800a5c4:	6978      	ldr	r0, [r7, #20]
 800a5c6:	f7ff fee7 	bl	800a398 <xQueueGenericCreateStatic>
 800a5ca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f7ff ffb8 	bl	800a542 <prvInitialiseMutex>

		return xNewQueue;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
	}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3718      	adds	r7, #24
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a5dc:	b590      	push	{r4, r7, lr}
 800a5de:	b087      	sub	sp, #28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d10a      	bne.n	800a604 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800a5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f2:	f383 8811 	msr	BASEPRI, r3
 800a5f6:	f3bf 8f6f 	isb	sy
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	60fb      	str	r3, [r7, #12]
}
 800a600:	bf00      	nop
 800a602:	e7fe      	b.n	800a602 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	689c      	ldr	r4, [r3, #8]
 800a608:	f001 fc56 	bl	800beb8 <xTaskGetCurrentTaskHandle>
 800a60c:	4603      	mov	r3, r0
 800a60e:	429c      	cmp	r4, r3
 800a610:	d111      	bne.n	800a636 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	1e5a      	subs	r2, r3, #1
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d105      	bne.n	800a630 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a624:	2300      	movs	r3, #0
 800a626:	2200      	movs	r2, #0
 800a628:	2100      	movs	r1, #0
 800a62a:	6938      	ldr	r0, [r7, #16]
 800a62c:	f000 f8aa 	bl	800a784 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a630:	2301      	movs	r3, #1
 800a632:	617b      	str	r3, [r7, #20]
 800a634:	e001      	b.n	800a63a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a636:	2300      	movs	r3, #0
 800a638:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a63a:	697b      	ldr	r3, [r7, #20]
	}
 800a63c:	4618      	mov	r0, r3
 800a63e:	371c      	adds	r7, #28
 800a640:	46bd      	mov	sp, r7
 800a642:	bd90      	pop	{r4, r7, pc}

0800a644 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a644:	b590      	push	{r4, r7, lr}
 800a646:	b087      	sub	sp, #28
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10a      	bne.n	800a66e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800a658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	60fb      	str	r3, [r7, #12]
}
 800a66a:	bf00      	nop
 800a66c:	e7fe      	b.n	800a66c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	689c      	ldr	r4, [r3, #8]
 800a672:	f001 fc21 	bl	800beb8 <xTaskGetCurrentTaskHandle>
 800a676:	4603      	mov	r3, r0
 800a678:	429c      	cmp	r4, r3
 800a67a:	d107      	bne.n	800a68c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	1c5a      	adds	r2, r3, #1
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a686:	2301      	movs	r3, #1
 800a688:	617b      	str	r3, [r7, #20]
 800a68a:	e00c      	b.n	800a6a6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a68c:	6839      	ldr	r1, [r7, #0]
 800a68e:	6938      	ldr	r0, [r7, #16]
 800a690:	f000 faf2 	bl	800ac78 <xQueueSemaphoreTake>
 800a694:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d004      	beq.n	800a6a6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	1c5a      	adds	r2, r3, #1
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a6a6:	697b      	ldr	r3, [r7, #20]
	}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	371c      	adds	r7, #28
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd90      	pop	{r4, r7, pc}

0800a6b0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b08a      	sub	sp, #40	; 0x28
 800a6b4:	af02      	add	r7, sp, #8
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d10a      	bne.n	800a6d8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c6:	f383 8811 	msr	BASEPRI, r3
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	61bb      	str	r3, [r7, #24]
}
 800a6d4:	bf00      	nop
 800a6d6:	e7fe      	b.n	800a6d6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a6d8:	68ba      	ldr	r2, [r7, #8]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d90a      	bls.n	800a6f6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	617b      	str	r3, [r7, #20]
}
 800a6f2:	bf00      	nop
 800a6f4:	e7fe      	b.n	800a6f4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a6f6:	2302      	movs	r3, #2
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	2100      	movs	r1, #0
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f7ff fe49 	bl	800a398 <xQueueGenericCreateStatic>
 800a706:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d002      	beq.n	800a714 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a714:	69fb      	ldr	r3, [r7, #28]
	}
 800a716:	4618      	mov	r0, r3
 800a718:	3720      	adds	r7, #32
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b086      	sub	sp, #24
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10a      	bne.n	800a744 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	613b      	str	r3, [r7, #16]
}
 800a740:	bf00      	nop
 800a742:	e7fe      	b.n	800a742 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a744:	683a      	ldr	r2, [r7, #0]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d90a      	bls.n	800a762 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	60fb      	str	r3, [r7, #12]
}
 800a75e:	bf00      	nop
 800a760:	e7fe      	b.n	800a760 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a762:	2202      	movs	r2, #2
 800a764:	2100      	movs	r1, #0
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f7ff fe8e 	bl	800a488 <xQueueGenericCreate>
 800a76c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d002      	beq.n	800a77a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	683a      	ldr	r2, [r7, #0]
 800a778:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a77a:	697b      	ldr	r3, [r7, #20]
	}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3718      	adds	r7, #24
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b08e      	sub	sp, #56	; 0x38
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
 800a790:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a792:	2300      	movs	r3, #0
 800a794:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d10a      	bne.n	800a7b6 <xQueueGenericSend+0x32>
	__asm volatile
 800a7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a7b2:	bf00      	nop
 800a7b4:	e7fe      	b.n	800a7b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d103      	bne.n	800a7c4 <xQueueGenericSend+0x40>
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d101      	bne.n	800a7c8 <xQueueGenericSend+0x44>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e000      	b.n	800a7ca <xQueueGenericSend+0x46>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10a      	bne.n	800a7e4 <xQueueGenericSend+0x60>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a7e0:	bf00      	nop
 800a7e2:	e7fe      	b.n	800a7e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d103      	bne.n	800a7f2 <xQueueGenericSend+0x6e>
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d101      	bne.n	800a7f6 <xQueueGenericSend+0x72>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e000      	b.n	800a7f8 <xQueueGenericSend+0x74>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10a      	bne.n	800a812 <xQueueGenericSend+0x8e>
	__asm volatile
 800a7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a800:	f383 8811 	msr	BASEPRI, r3
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	f3bf 8f4f 	dsb	sy
 800a80c:	623b      	str	r3, [r7, #32]
}
 800a80e:	bf00      	nop
 800a810:	e7fe      	b.n	800a810 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a812:	f001 fb61 	bl	800bed8 <xTaskGetSchedulerState>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d102      	bne.n	800a822 <xQueueGenericSend+0x9e>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d101      	bne.n	800a826 <xQueueGenericSend+0xa2>
 800a822:	2301      	movs	r3, #1
 800a824:	e000      	b.n	800a828 <xQueueGenericSend+0xa4>
 800a826:	2300      	movs	r3, #0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10a      	bne.n	800a842 <xQueueGenericSend+0xbe>
	__asm volatile
 800a82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a830:	f383 8811 	msr	BASEPRI, r3
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	61fb      	str	r3, [r7, #28]
}
 800a83e:	bf00      	nop
 800a840:	e7fe      	b.n	800a840 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a842:	f002 f99f 	bl	800cb84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a84e:	429a      	cmp	r2, r3
 800a850:	d302      	bcc.n	800a858 <xQueueGenericSend+0xd4>
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	2b02      	cmp	r3, #2
 800a856:	d129      	bne.n	800a8ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a858:	683a      	ldr	r2, [r7, #0]
 800a85a:	68b9      	ldr	r1, [r7, #8]
 800a85c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a85e:	f000 fb52 	bl	800af06 <prvCopyDataToQueue>
 800a862:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d010      	beq.n	800a88e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86e:	3324      	adds	r3, #36	; 0x24
 800a870:	4618      	mov	r0, r3
 800a872:	f001 f963 	bl	800bb3c <xTaskRemoveFromEventList>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d013      	beq.n	800a8a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a87c:	4b3f      	ldr	r3, [pc, #252]	; (800a97c <xQueueGenericSend+0x1f8>)
 800a87e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a882:	601a      	str	r2, [r3, #0]
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	e00a      	b.n	800a8a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a890:	2b00      	cmp	r3, #0
 800a892:	d007      	beq.n	800a8a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a894:	4b39      	ldr	r3, [pc, #228]	; (800a97c <xQueueGenericSend+0x1f8>)
 800a896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	f3bf 8f4f 	dsb	sy
 800a8a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a8a4:	f002 f99e 	bl	800cbe4 <vPortExitCritical>
				return pdPASS;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e063      	b.n	800a974 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d103      	bne.n	800a8ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a8b2:	f002 f997 	bl	800cbe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e05c      	b.n	800a974 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d106      	bne.n	800a8ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8c0:	f107 0314 	add.w	r3, r7, #20
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f001 f99d 	bl	800bc04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8ce:	f002 f989 	bl	800cbe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8d2:	f000 fef5 	bl	800b6c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8d6:	f002 f955 	bl	800cb84 <vPortEnterCritical>
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8e0:	b25b      	sxtb	r3, r3
 800a8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e6:	d103      	bne.n	800a8f0 <xQueueGenericSend+0x16c>
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8f6:	b25b      	sxtb	r3, r3
 800a8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8fc:	d103      	bne.n	800a906 <xQueueGenericSend+0x182>
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a906:	f002 f96d 	bl	800cbe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a90a:	1d3a      	adds	r2, r7, #4
 800a90c:	f107 0314 	add.w	r3, r7, #20
 800a910:	4611      	mov	r1, r2
 800a912:	4618      	mov	r0, r3
 800a914:	f001 f98c 	bl	800bc30 <xTaskCheckForTimeOut>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d124      	bne.n	800a968 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a91e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a920:	f000 fbe9 	bl	800b0f6 <prvIsQueueFull>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d018      	beq.n	800a95c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92c:	3310      	adds	r3, #16
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	4611      	mov	r1, r2
 800a932:	4618      	mov	r0, r3
 800a934:	f001 f8b2 	bl	800ba9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a93a:	f000 fb74 	bl	800b026 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a93e:	f000 fecd 	bl	800b6dc <xTaskResumeAll>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	f47f af7c 	bne.w	800a842 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a94a:	4b0c      	ldr	r3, [pc, #48]	; (800a97c <xQueueGenericSend+0x1f8>)
 800a94c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a950:	601a      	str	r2, [r3, #0]
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	e772      	b.n	800a842 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a95c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a95e:	f000 fb62 	bl	800b026 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a962:	f000 febb 	bl	800b6dc <xTaskResumeAll>
 800a966:	e76c      	b.n	800a842 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a96a:	f000 fb5c 	bl	800b026 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a96e:	f000 feb5 	bl	800b6dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a972:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a974:	4618      	mov	r0, r3
 800a976:	3738      	adds	r7, #56	; 0x38
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	e000ed04 	.word	0xe000ed04

0800a980 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b090      	sub	sp, #64	; 0x40
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	607a      	str	r2, [r7, #4]
 800a98c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10a      	bne.n	800a9ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99c:	f383 8811 	msr	BASEPRI, r3
 800a9a0:	f3bf 8f6f 	isb	sy
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a9aa:	bf00      	nop
 800a9ac:	e7fe      	b.n	800a9ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d103      	bne.n	800a9bc <xQueueGenericSendFromISR+0x3c>
 800a9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d101      	bne.n	800a9c0 <xQueueGenericSendFromISR+0x40>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e000      	b.n	800a9c2 <xQueueGenericSendFromISR+0x42>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10a      	bne.n	800a9dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ca:	f383 8811 	msr	BASEPRI, r3
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a9d8:	bf00      	nop
 800a9da:	e7fe      	b.n	800a9da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d103      	bne.n	800a9ea <xQueueGenericSendFromISR+0x6a>
 800a9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d101      	bne.n	800a9ee <xQueueGenericSendFromISR+0x6e>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e000      	b.n	800a9f0 <xQueueGenericSendFromISR+0x70>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d10a      	bne.n	800aa0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f8:	f383 8811 	msr	BASEPRI, r3
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	623b      	str	r3, [r7, #32]
}
 800aa06:	bf00      	nop
 800aa08:	e7fe      	b.n	800aa08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa0a:	f002 f99d 	bl	800cd48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aa0e:	f3ef 8211 	mrs	r2, BASEPRI
 800aa12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa16:	f383 8811 	msr	BASEPRI, r3
 800aa1a:	f3bf 8f6f 	isb	sy
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	61fa      	str	r2, [r7, #28]
 800aa24:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aa26:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa28:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d302      	bcc.n	800aa3c <xQueueGenericSendFromISR+0xbc>
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	d12f      	bne.n	800aa9c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	68b9      	ldr	r1, [r7, #8]
 800aa50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa52:	f000 fa58 	bl	800af06 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800aa5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa5e:	d112      	bne.n	800aa86 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d016      	beq.n	800aa96 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6a:	3324      	adds	r3, #36	; 0x24
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f001 f865 	bl	800bb3c <xTaskRemoveFromEventList>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00e      	beq.n	800aa96 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00b      	beq.n	800aa96 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2201      	movs	r2, #1
 800aa82:	601a      	str	r2, [r3, #0]
 800aa84:	e007      	b.n	800aa96 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	b25a      	sxtb	r2, r3
 800aa90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa96:	2301      	movs	r3, #1
 800aa98:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800aa9a:	e001      	b.n	800aaa0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aaaa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aaac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3740      	adds	r7, #64	; 0x40
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
	...

0800aab8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b08c      	sub	sp, #48	; 0x30
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aac4:	2300      	movs	r3, #0
 800aac6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d10a      	bne.n	800aae8 <xQueueReceive+0x30>
	__asm volatile
 800aad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad6:	f383 8811 	msr	BASEPRI, r3
 800aada:	f3bf 8f6f 	isb	sy
 800aade:	f3bf 8f4f 	dsb	sy
 800aae2:	623b      	str	r3, [r7, #32]
}
 800aae4:	bf00      	nop
 800aae6:	e7fe      	b.n	800aae6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d103      	bne.n	800aaf6 <xQueueReceive+0x3e>
 800aaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d101      	bne.n	800aafa <xQueueReceive+0x42>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e000      	b.n	800aafc <xQueueReceive+0x44>
 800aafa:	2300      	movs	r3, #0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10a      	bne.n	800ab16 <xQueueReceive+0x5e>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	61fb      	str	r3, [r7, #28]
}
 800ab12:	bf00      	nop
 800ab14:	e7fe      	b.n	800ab14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab16:	f001 f9df 	bl	800bed8 <xTaskGetSchedulerState>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d102      	bne.n	800ab26 <xQueueReceive+0x6e>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d101      	bne.n	800ab2a <xQueueReceive+0x72>
 800ab26:	2301      	movs	r3, #1
 800ab28:	e000      	b.n	800ab2c <xQueueReceive+0x74>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10a      	bne.n	800ab46 <xQueueReceive+0x8e>
	__asm volatile
 800ab30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	61bb      	str	r3, [r7, #24]
}
 800ab42:	bf00      	nop
 800ab44:	e7fe      	b.n	800ab44 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab46:	f002 f81d 	bl	800cb84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d01f      	beq.n	800ab96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab56:	68b9      	ldr	r1, [r7, #8]
 800ab58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab5a:	f000 fa3e 	bl	800afda <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab60:	1e5a      	subs	r2, r3, #1
 800ab62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00f      	beq.n	800ab8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab70:	3310      	adds	r3, #16
 800ab72:	4618      	mov	r0, r3
 800ab74:	f000 ffe2 	bl	800bb3c <xTaskRemoveFromEventList>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d007      	beq.n	800ab8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab7e:	4b3d      	ldr	r3, [pc, #244]	; (800ac74 <xQueueReceive+0x1bc>)
 800ab80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab84:	601a      	str	r2, [r3, #0]
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab8e:	f002 f829 	bl	800cbe4 <vPortExitCritical>
				return pdPASS;
 800ab92:	2301      	movs	r3, #1
 800ab94:	e069      	b.n	800ac6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d103      	bne.n	800aba4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab9c:	f002 f822 	bl	800cbe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aba0:	2300      	movs	r3, #0
 800aba2:	e062      	b.n	800ac6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d106      	bne.n	800abb8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abaa:	f107 0310 	add.w	r3, r7, #16
 800abae:	4618      	mov	r0, r3
 800abb0:	f001 f828 	bl	800bc04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abb4:	2301      	movs	r3, #1
 800abb6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abb8:	f002 f814 	bl	800cbe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abbc:	f000 fd80 	bl	800b6c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abc0:	f001 ffe0 	bl	800cb84 <vPortEnterCritical>
 800abc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abca:	b25b      	sxtb	r3, r3
 800abcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd0:	d103      	bne.n	800abda <xQueueReceive+0x122>
 800abd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abe0:	b25b      	sxtb	r3, r3
 800abe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe6:	d103      	bne.n	800abf0 <xQueueReceive+0x138>
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	2200      	movs	r2, #0
 800abec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abf0:	f001 fff8 	bl	800cbe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abf4:	1d3a      	adds	r2, r7, #4
 800abf6:	f107 0310 	add.w	r3, r7, #16
 800abfa:	4611      	mov	r1, r2
 800abfc:	4618      	mov	r0, r3
 800abfe:	f001 f817 	bl	800bc30 <xTaskCheckForTimeOut>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d123      	bne.n	800ac50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac0a:	f000 fa5e 	bl	800b0ca <prvIsQueueEmpty>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d017      	beq.n	800ac44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac16:	3324      	adds	r3, #36	; 0x24
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	4611      	mov	r1, r2
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 ff3d 	bl	800ba9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac24:	f000 f9ff 	bl	800b026 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac28:	f000 fd58 	bl	800b6dc <xTaskResumeAll>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d189      	bne.n	800ab46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ac32:	4b10      	ldr	r3, [pc, #64]	; (800ac74 <xQueueReceive+0x1bc>)
 800ac34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac38:	601a      	str	r2, [r3, #0]
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	f3bf 8f6f 	isb	sy
 800ac42:	e780      	b.n	800ab46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ac44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac46:	f000 f9ee 	bl	800b026 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac4a:	f000 fd47 	bl	800b6dc <xTaskResumeAll>
 800ac4e:	e77a      	b.n	800ab46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ac50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac52:	f000 f9e8 	bl	800b026 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac56:	f000 fd41 	bl	800b6dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac5c:	f000 fa35 	bl	800b0ca <prvIsQueueEmpty>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f43f af6f 	beq.w	800ab46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3730      	adds	r7, #48	; 0x30
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	e000ed04 	.word	0xe000ed04

0800ac78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b08e      	sub	sp, #56	; 0x38
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac82:	2300      	movs	r3, #0
 800ac84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10a      	bne.n	800acaa <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ac94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac98:	f383 8811 	msr	BASEPRI, r3
 800ac9c:	f3bf 8f6f 	isb	sy
 800aca0:	f3bf 8f4f 	dsb	sy
 800aca4:	623b      	str	r3, [r7, #32]
}
 800aca6:	bf00      	nop
 800aca8:	e7fe      	b.n	800aca8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800acaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00a      	beq.n	800acc8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800acb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb6:	f383 8811 	msr	BASEPRI, r3
 800acba:	f3bf 8f6f 	isb	sy
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	61fb      	str	r3, [r7, #28]
}
 800acc4:	bf00      	nop
 800acc6:	e7fe      	b.n	800acc6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acc8:	f001 f906 	bl	800bed8 <xTaskGetSchedulerState>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d102      	bne.n	800acd8 <xQueueSemaphoreTake+0x60>
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d101      	bne.n	800acdc <xQueueSemaphoreTake+0x64>
 800acd8:	2301      	movs	r3, #1
 800acda:	e000      	b.n	800acde <xQueueSemaphoreTake+0x66>
 800acdc:	2300      	movs	r3, #0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d10a      	bne.n	800acf8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ace2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace6:	f383 8811 	msr	BASEPRI, r3
 800acea:	f3bf 8f6f 	isb	sy
 800acee:	f3bf 8f4f 	dsb	sy
 800acf2:	61bb      	str	r3, [r7, #24]
}
 800acf4:	bf00      	nop
 800acf6:	e7fe      	b.n	800acf6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acf8:	f001 ff44 	bl	800cb84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800acfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad00:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ad02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d024      	beq.n	800ad52 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ad08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0a:	1e5a      	subs	r2, r3, #1
 800ad0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d104      	bne.n	800ad22 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ad18:	f001 fa54 	bl	800c1c4 <pvTaskIncrementMutexHeldCount>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad20:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00f      	beq.n	800ad4a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2c:	3310      	adds	r3, #16
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f000 ff04 	bl	800bb3c <xTaskRemoveFromEventList>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d007      	beq.n	800ad4a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad3a:	4b54      	ldr	r3, [pc, #336]	; (800ae8c <xQueueSemaphoreTake+0x214>)
 800ad3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad40:	601a      	str	r2, [r3, #0]
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad4a:	f001 ff4b 	bl	800cbe4 <vPortExitCritical>
				return pdPASS;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e097      	b.n	800ae82 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d111      	bne.n	800ad7c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ad58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00a      	beq.n	800ad74 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	617b      	str	r3, [r7, #20]
}
 800ad70:	bf00      	nop
 800ad72:	e7fe      	b.n	800ad72 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ad74:	f001 ff36 	bl	800cbe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	e082      	b.n	800ae82 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d106      	bne.n	800ad90 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad82:	f107 030c 	add.w	r3, r7, #12
 800ad86:	4618      	mov	r0, r3
 800ad88:	f000 ff3c 	bl	800bc04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad90:	f001 ff28 	bl	800cbe4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad94:	f000 fc94 	bl	800b6c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad98:	f001 fef4 	bl	800cb84 <vPortEnterCritical>
 800ad9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ada2:	b25b      	sxtb	r3, r3
 800ada4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada8:	d103      	bne.n	800adb2 <xQueueSemaphoreTake+0x13a>
 800adaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adac:	2200      	movs	r2, #0
 800adae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adb8:	b25b      	sxtb	r3, r3
 800adba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adbe:	d103      	bne.n	800adc8 <xQueueSemaphoreTake+0x150>
 800adc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adc8:	f001 ff0c 	bl	800cbe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800adcc:	463a      	mov	r2, r7
 800adce:	f107 030c 	add.w	r3, r7, #12
 800add2:	4611      	mov	r1, r2
 800add4:	4618      	mov	r0, r3
 800add6:	f000 ff2b 	bl	800bc30 <xTaskCheckForTimeOut>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d132      	bne.n	800ae46 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ade0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ade2:	f000 f972 	bl	800b0ca <prvIsQueueEmpty>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d026      	beq.n	800ae3a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d109      	bne.n	800ae08 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800adf4:	f001 fec6 	bl	800cb84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800adf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f001 f889 	bl	800bf14 <xTaskPriorityInherit>
 800ae02:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ae04:	f001 feee 	bl	800cbe4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0a:	3324      	adds	r3, #36	; 0x24
 800ae0c:	683a      	ldr	r2, [r7, #0]
 800ae0e:	4611      	mov	r1, r2
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 fe43 	bl	800ba9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae18:	f000 f905 	bl	800b026 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae1c:	f000 fc5e 	bl	800b6dc <xTaskResumeAll>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f47f af68 	bne.w	800acf8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ae28:	4b18      	ldr	r3, [pc, #96]	; (800ae8c <xQueueSemaphoreTake+0x214>)
 800ae2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae2e:	601a      	str	r2, [r3, #0]
 800ae30:	f3bf 8f4f 	dsb	sy
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	e75e      	b.n	800acf8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ae3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae3c:	f000 f8f3 	bl	800b026 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae40:	f000 fc4c 	bl	800b6dc <xTaskResumeAll>
 800ae44:	e758      	b.n	800acf8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ae46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae48:	f000 f8ed 	bl	800b026 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae4c:	f000 fc46 	bl	800b6dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae52:	f000 f93a 	bl	800b0ca <prvIsQueueEmpty>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f43f af4d 	beq.w	800acf8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00d      	beq.n	800ae80 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ae64:	f001 fe8e 	bl	800cb84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ae68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae6a:	f000 f834 	bl	800aed6 <prvGetDisinheritPriorityAfterTimeout>
 800ae6e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ae70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae76:	4618      	mov	r0, r3
 800ae78:	f001 f922 	bl	800c0c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ae7c:	f001 feb2 	bl	800cbe4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3738      	adds	r7, #56	; 0x38
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	e000ed04 	.word	0xe000ed04

0800ae90 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10a      	bne.n	800aeb8 <vQueueDelete+0x28>
	__asm volatile
 800aea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	60bb      	str	r3, [r7, #8]
}
 800aeb4:	bf00      	nop
 800aeb6:	e7fe      	b.n	800aeb6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f000 f95f 	bl	800b17c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d102      	bne.n	800aece <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f002 f849 	bl	800cf60 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aece:	bf00      	nop
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aed6:	b480      	push	{r7}
 800aed8:	b085      	sub	sp, #20
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d006      	beq.n	800aef4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800aef0:	60fb      	str	r3, [r7, #12]
 800aef2:	e001      	b.n	800aef8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aef4:	2300      	movs	r3, #0
 800aef6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aef8:	68fb      	ldr	r3, [r7, #12]
	}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3714      	adds	r7, #20
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr

0800af06 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b086      	sub	sp, #24
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	60f8      	str	r0, [r7, #12]
 800af0e:	60b9      	str	r1, [r7, #8]
 800af10:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af12:	2300      	movs	r3, #0
 800af14:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af1a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af20:	2b00      	cmp	r3, #0
 800af22:	d10d      	bne.n	800af40 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d14d      	bne.n	800afc8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	4618      	mov	r0, r3
 800af32:	f001 f857 	bl	800bfe4 <xTaskPriorityDisinherit>
 800af36:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2200      	movs	r2, #0
 800af3c:	609a      	str	r2, [r3, #8]
 800af3e:	e043      	b.n	800afc8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d119      	bne.n	800af7a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	6858      	ldr	r0, [r3, #4]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4e:	461a      	mov	r2, r3
 800af50:	68b9      	ldr	r1, [r7, #8]
 800af52:	f002 fdd5 	bl	800db00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	685a      	ldr	r2, [r3, #4]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af5e:	441a      	add	r2, r3
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	685a      	ldr	r2, [r3, #4]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d32b      	bcc.n	800afc8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	605a      	str	r2, [r3, #4]
 800af78:	e026      	b.n	800afc8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	68d8      	ldr	r0, [r3, #12]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af82:	461a      	mov	r2, r3
 800af84:	68b9      	ldr	r1, [r7, #8]
 800af86:	f002 fdbb 	bl	800db00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	68da      	ldr	r2, [r3, #12]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af92:	425b      	negs	r3, r3
 800af94:	441a      	add	r2, r3
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	68da      	ldr	r2, [r3, #12]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d207      	bcs.n	800afb6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	689a      	ldr	r2, [r3, #8]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afae:	425b      	negs	r3, r3
 800afb0:	441a      	add	r2, r3
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2b02      	cmp	r3, #2
 800afba:	d105      	bne.n	800afc8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d002      	beq.n	800afc8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	3b01      	subs	r3, #1
 800afc6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	1c5a      	adds	r2, r3, #1
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800afd0:	697b      	ldr	r3, [r7, #20]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b082      	sub	sp, #8
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
 800afe2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d018      	beq.n	800b01e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	68da      	ldr	r2, [r3, #12]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff4:	441a      	add	r2, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	68da      	ldr	r2, [r3, #12]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	429a      	cmp	r2, r3
 800b004:	d303      	bcc.n	800b00e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	68d9      	ldr	r1, [r3, #12]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b016:	461a      	mov	r2, r3
 800b018:	6838      	ldr	r0, [r7, #0]
 800b01a:	f002 fd71 	bl	800db00 <memcpy>
	}
}
 800b01e:	bf00      	nop
 800b020:	3708      	adds	r7, #8
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b084      	sub	sp, #16
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b02e:	f001 fda9 	bl	800cb84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b038:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b03a:	e011      	b.n	800b060 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b040:	2b00      	cmp	r3, #0
 800b042:	d012      	beq.n	800b06a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	3324      	adds	r3, #36	; 0x24
 800b048:	4618      	mov	r0, r3
 800b04a:	f000 fd77 	bl	800bb3c <xTaskRemoveFromEventList>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d001      	beq.n	800b058 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b054:	f000 fe4e 	bl	800bcf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b058:	7bfb      	ldrb	r3, [r7, #15]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b064:	2b00      	cmp	r3, #0
 800b066:	dce9      	bgt.n	800b03c <prvUnlockQueue+0x16>
 800b068:	e000      	b.n	800b06c <prvUnlockQueue+0x46>
					break;
 800b06a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	22ff      	movs	r2, #255	; 0xff
 800b070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b074:	f001 fdb6 	bl	800cbe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b078:	f001 fd84 	bl	800cb84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b082:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b084:	e011      	b.n	800b0aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	691b      	ldr	r3, [r3, #16]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d012      	beq.n	800b0b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	3310      	adds	r3, #16
 800b092:	4618      	mov	r0, r3
 800b094:	f000 fd52 	bl	800bb3c <xTaskRemoveFromEventList>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d001      	beq.n	800b0a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b09e:	f000 fe29 	bl	800bcf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b0a2:	7bbb      	ldrb	r3, [r7, #14]
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	dce9      	bgt.n	800b086 <prvUnlockQueue+0x60>
 800b0b2:	e000      	b.n	800b0b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b0b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	22ff      	movs	r2, #255	; 0xff
 800b0ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b0be:	f001 fd91 	bl	800cbe4 <vPortExitCritical>
}
 800b0c2:	bf00      	nop
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b084      	sub	sp, #16
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0d2:	f001 fd57 	bl	800cb84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d102      	bne.n	800b0e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	60fb      	str	r3, [r7, #12]
 800b0e2:	e001      	b.n	800b0e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0e8:	f001 fd7c 	bl	800cbe4 <vPortExitCritical>

	return xReturn;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b084      	sub	sp, #16
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0fe:	f001 fd41 	bl	800cb84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d102      	bne.n	800b114 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b10e:	2301      	movs	r3, #1
 800b110:	60fb      	str	r3, [r7, #12]
 800b112:	e001      	b.n	800b118 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b114:	2300      	movs	r3, #0
 800b116:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b118:	f001 fd64 	bl	800cbe4 <vPortExitCritical>

	return xReturn;
 800b11c:	68fb      	ldr	r3, [r7, #12]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
	...

0800b128 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b128:	b480      	push	{r7}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b132:	2300      	movs	r3, #0
 800b134:	60fb      	str	r3, [r7, #12]
 800b136:	e014      	b.n	800b162 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b138:	4a0f      	ldr	r2, [pc, #60]	; (800b178 <vQueueAddToRegistry+0x50>)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d10b      	bne.n	800b15c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b144:	490c      	ldr	r1, [pc, #48]	; (800b178 <vQueueAddToRegistry+0x50>)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	683a      	ldr	r2, [r7, #0]
 800b14a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b14e:	4a0a      	ldr	r2, [pc, #40]	; (800b178 <vQueueAddToRegistry+0x50>)
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	00db      	lsls	r3, r3, #3
 800b154:	4413      	add	r3, r2
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b15a:	e006      	b.n	800b16a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	3301      	adds	r3, #1
 800b160:	60fb      	str	r3, [r7, #12]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2b07      	cmp	r3, #7
 800b166:	d9e7      	bls.n	800b138 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b168:	bf00      	nop
 800b16a:	bf00      	nop
 800b16c:	3714      	adds	r7, #20
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	20001da8 	.word	0x20001da8

0800b17c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b184:	2300      	movs	r3, #0
 800b186:	60fb      	str	r3, [r7, #12]
 800b188:	e016      	b.n	800b1b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b18a:	4a10      	ldr	r2, [pc, #64]	; (800b1cc <vQueueUnregisterQueue+0x50>)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	00db      	lsls	r3, r3, #3
 800b190:	4413      	add	r3, r2
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	429a      	cmp	r2, r3
 800b198:	d10b      	bne.n	800b1b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b19a:	4a0c      	ldr	r2, [pc, #48]	; (800b1cc <vQueueUnregisterQueue+0x50>)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2100      	movs	r1, #0
 800b1a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b1a4:	4a09      	ldr	r2, [pc, #36]	; (800b1cc <vQueueUnregisterQueue+0x50>)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	00db      	lsls	r3, r3, #3
 800b1aa:	4413      	add	r3, r2
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	605a      	str	r2, [r3, #4]
				break;
 800b1b0:	e006      	b.n	800b1c0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	60fb      	str	r3, [r7, #12]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2b07      	cmp	r3, #7
 800b1bc:	d9e5      	bls.n	800b18a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b1be:	bf00      	nop
 800b1c0:	bf00      	nop
 800b1c2:	3714      	adds	r7, #20
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr
 800b1cc:	20001da8 	.word	0x20001da8

0800b1d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b1e0:	f001 fcd0 	bl	800cb84 <vPortEnterCritical>
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1ea:	b25b      	sxtb	r3, r3
 800b1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f0:	d103      	bne.n	800b1fa <vQueueWaitForMessageRestricted+0x2a>
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b200:	b25b      	sxtb	r3, r3
 800b202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b206:	d103      	bne.n	800b210 <vQueueWaitForMessageRestricted+0x40>
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b210:	f001 fce8 	bl	800cbe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d106      	bne.n	800b22a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	3324      	adds	r3, #36	; 0x24
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	68b9      	ldr	r1, [r7, #8]
 800b224:	4618      	mov	r0, r3
 800b226:	f000 fc5d 	bl	800bae4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b22a:	6978      	ldr	r0, [r7, #20]
 800b22c:	f7ff fefb 	bl	800b026 <prvUnlockQueue>
	}
 800b230:	bf00      	nop
 800b232:	3718      	adds	r7, #24
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b08e      	sub	sp, #56	; 0x38
 800b23c:	af04      	add	r7, sp, #16
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
 800b244:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10a      	bne.n	800b262 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b250:	f383 8811 	msr	BASEPRI, r3
 800b254:	f3bf 8f6f 	isb	sy
 800b258:	f3bf 8f4f 	dsb	sy
 800b25c:	623b      	str	r3, [r7, #32]
}
 800b25e:	bf00      	nop
 800b260:	e7fe      	b.n	800b260 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b264:	2b00      	cmp	r3, #0
 800b266:	d10a      	bne.n	800b27e <xTaskCreateStatic+0x46>
	__asm volatile
 800b268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26c:	f383 8811 	msr	BASEPRI, r3
 800b270:	f3bf 8f6f 	isb	sy
 800b274:	f3bf 8f4f 	dsb	sy
 800b278:	61fb      	str	r3, [r7, #28]
}
 800b27a:	bf00      	nop
 800b27c:	e7fe      	b.n	800b27c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b27e:	2364      	movs	r3, #100	; 0x64
 800b280:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	2b64      	cmp	r3, #100	; 0x64
 800b286:	d00a      	beq.n	800b29e <xTaskCreateStatic+0x66>
	__asm volatile
 800b288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28c:	f383 8811 	msr	BASEPRI, r3
 800b290:	f3bf 8f6f 	isb	sy
 800b294:	f3bf 8f4f 	dsb	sy
 800b298:	61bb      	str	r3, [r7, #24]
}
 800b29a:	bf00      	nop
 800b29c:	e7fe      	b.n	800b29c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b29e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d01e      	beq.n	800b2e4 <xTaskCreateStatic+0xac>
 800b2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d01b      	beq.n	800b2e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b8:	2202      	movs	r2, #2
 800b2ba:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b2be:	2300      	movs	r3, #0
 800b2c0:	9303      	str	r3, [sp, #12]
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c4:	9302      	str	r3, [sp, #8]
 800b2c6:	f107 0314 	add.w	r3, r7, #20
 800b2ca:	9301      	str	r3, [sp, #4]
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	68b9      	ldr	r1, [r7, #8]
 800b2d6:	68f8      	ldr	r0, [r7, #12]
 800b2d8:	f000 f850 	bl	800b37c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2de:	f000 f8e3 	bl	800b4a8 <prvAddNewTaskToReadyList>
 800b2e2:	e001      	b.n	800b2e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b2e8:	697b      	ldr	r3, [r7, #20]
	}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3728      	adds	r7, #40	; 0x28
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b08c      	sub	sp, #48	; 0x30
 800b2f6:	af04      	add	r7, sp, #16
 800b2f8:	60f8      	str	r0, [r7, #12]
 800b2fa:	60b9      	str	r1, [r7, #8]
 800b2fc:	603b      	str	r3, [r7, #0]
 800b2fe:	4613      	mov	r3, r2
 800b300:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b302:	88fb      	ldrh	r3, [r7, #6]
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	4618      	mov	r0, r3
 800b308:	f001 fd5e 	bl	800cdc8 <pvPortMalloc>
 800b30c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00e      	beq.n	800b332 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b314:	2064      	movs	r0, #100	; 0x64
 800b316:	f001 fd57 	bl	800cdc8 <pvPortMalloc>
 800b31a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	697a      	ldr	r2, [r7, #20]
 800b326:	631a      	str	r2, [r3, #48]	; 0x30
 800b328:	e005      	b.n	800b336 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b32a:	6978      	ldr	r0, [r7, #20]
 800b32c:	f001 fe18 	bl	800cf60 <vPortFree>
 800b330:	e001      	b.n	800b336 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b332:	2300      	movs	r3, #0
 800b334:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d017      	beq.n	800b36c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	2200      	movs	r2, #0
 800b340:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b344:	88fa      	ldrh	r2, [r7, #6]
 800b346:	2300      	movs	r3, #0
 800b348:	9303      	str	r3, [sp, #12]
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	9302      	str	r3, [sp, #8]
 800b34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b350:	9301      	str	r3, [sp, #4]
 800b352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	68b9      	ldr	r1, [r7, #8]
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f000 f80e 	bl	800b37c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b360:	69f8      	ldr	r0, [r7, #28]
 800b362:	f000 f8a1 	bl	800b4a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b366:	2301      	movs	r3, #1
 800b368:	61bb      	str	r3, [r7, #24]
 800b36a:	e002      	b.n	800b372 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b36c:	f04f 33ff 	mov.w	r3, #4294967295
 800b370:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b372:	69bb      	ldr	r3, [r7, #24]
	}
 800b374:	4618      	mov	r0, r3
 800b376:	3720      	adds	r7, #32
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b088      	sub	sp, #32
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
 800b388:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	461a      	mov	r2, r3
 800b394:	21a5      	movs	r1, #165	; 0xa5
 800b396:	f002 fbc1 	bl	800db1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	4413      	add	r3, r2
 800b3aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	f023 0307 	bic.w	r3, r3, #7
 800b3b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b3b4:	69bb      	ldr	r3, [r7, #24]
 800b3b6:	f003 0307 	and.w	r3, r3, #7
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00a      	beq.n	800b3d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	617b      	str	r3, [r7, #20]
}
 800b3d0:	bf00      	nop
 800b3d2:	e7fe      	b.n	800b3d2 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800b3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d6:	69ba      	ldr	r2, [r7, #24]
 800b3d8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d01f      	beq.n	800b420 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	61fb      	str	r3, [r7, #28]
 800b3e4:	e012      	b.n	800b40c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	7819      	ldrb	r1, [r3, #0]
 800b3ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	3334      	adds	r3, #52	; 0x34
 800b3f6:	460a      	mov	r2, r1
 800b3f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b3fa:	68ba      	ldr	r2, [r7, #8]
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	4413      	add	r3, r2
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d006      	beq.n	800b414 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	3301      	adds	r3, #1
 800b40a:	61fb      	str	r3, [r7, #28]
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	2b0f      	cmp	r3, #15
 800b410:	d9e9      	bls.n	800b3e6 <prvInitialiseNewTask+0x6a>
 800b412:	e000      	b.n	800b416 <prvInitialiseNewTask+0x9a>
			{
				break;
 800b414:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b418:	2200      	movs	r2, #0
 800b41a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b41e:	e003      	b.n	800b428 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b422:	2200      	movs	r2, #0
 800b424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b42a:	2b37      	cmp	r3, #55	; 0x37
 800b42c:	d901      	bls.n	800b432 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b42e:	2337      	movs	r3, #55	; 0x37
 800b430:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b436:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b43c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800b43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b440:	2200      	movs	r2, #0
 800b442:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b446:	3304      	adds	r3, #4
 800b448:	4618      	mov	r0, r3
 800b44a:	f7fe fea9 	bl	800a1a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b450:	3318      	adds	r3, #24
 800b452:	4618      	mov	r0, r3
 800b454:	f7fe fea4 	bl	800a1a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b45c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b460:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b466:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b46c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	2200      	movs	r2, #0
 800b472:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b476:	2200      	movs	r2, #0
 800b478:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	2200      	movs	r2, #0
 800b47e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b482:	683a      	ldr	r2, [r7, #0]
 800b484:	68f9      	ldr	r1, [r7, #12]
 800b486:	69b8      	ldr	r0, [r7, #24]
 800b488:	f001 fa52 	bl	800c930 <pxPortInitialiseStack>
 800b48c:	4602      	mov	r2, r0
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b49c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b49e:	bf00      	nop
 800b4a0:	3720      	adds	r7, #32
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
	...

0800b4a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b4b0:	f001 fb68 	bl	800cb84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b4b4:	4b2d      	ldr	r3, [pc, #180]	; (800b56c <prvAddNewTaskToReadyList+0xc4>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	4a2c      	ldr	r2, [pc, #176]	; (800b56c <prvAddNewTaskToReadyList+0xc4>)
 800b4bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b4be:	4b2c      	ldr	r3, [pc, #176]	; (800b570 <prvAddNewTaskToReadyList+0xc8>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d109      	bne.n	800b4da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b4c6:	4a2a      	ldr	r2, [pc, #168]	; (800b570 <prvAddNewTaskToReadyList+0xc8>)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b4cc:	4b27      	ldr	r3, [pc, #156]	; (800b56c <prvAddNewTaskToReadyList+0xc4>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d110      	bne.n	800b4f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b4d4:	f000 fc32 	bl	800bd3c <prvInitialiseTaskLists>
 800b4d8:	e00d      	b.n	800b4f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b4da:	4b26      	ldr	r3, [pc, #152]	; (800b574 <prvAddNewTaskToReadyList+0xcc>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d109      	bne.n	800b4f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b4e2:	4b23      	ldr	r3, [pc, #140]	; (800b570 <prvAddNewTaskToReadyList+0xc8>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d802      	bhi.n	800b4f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b4f0:	4a1f      	ldr	r2, [pc, #124]	; (800b570 <prvAddNewTaskToReadyList+0xc8>)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b4f6:	4b20      	ldr	r3, [pc, #128]	; (800b578 <prvAddNewTaskToReadyList+0xd0>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	4a1e      	ldr	r2, [pc, #120]	; (800b578 <prvAddNewTaskToReadyList+0xd0>)
 800b4fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b500:	4b1d      	ldr	r3, [pc, #116]	; (800b578 <prvAddNewTaskToReadyList+0xd0>)
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b50c:	4b1b      	ldr	r3, [pc, #108]	; (800b57c <prvAddNewTaskToReadyList+0xd4>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	429a      	cmp	r2, r3
 800b512:	d903      	bls.n	800b51c <prvAddNewTaskToReadyList+0x74>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b518:	4a18      	ldr	r2, [pc, #96]	; (800b57c <prvAddNewTaskToReadyList+0xd4>)
 800b51a:	6013      	str	r3, [r2, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b520:	4613      	mov	r3, r2
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	4413      	add	r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	4a15      	ldr	r2, [pc, #84]	; (800b580 <prvAddNewTaskToReadyList+0xd8>)
 800b52a:	441a      	add	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	3304      	adds	r3, #4
 800b530:	4619      	mov	r1, r3
 800b532:	4610      	mov	r0, r2
 800b534:	f7fe fe41 	bl	800a1ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b538:	f001 fb54 	bl	800cbe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b53c:	4b0d      	ldr	r3, [pc, #52]	; (800b574 <prvAddNewTaskToReadyList+0xcc>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d00e      	beq.n	800b562 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b544:	4b0a      	ldr	r3, [pc, #40]	; (800b570 <prvAddNewTaskToReadyList+0xc8>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54e:	429a      	cmp	r2, r3
 800b550:	d207      	bcs.n	800b562 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b552:	4b0c      	ldr	r3, [pc, #48]	; (800b584 <prvAddNewTaskToReadyList+0xdc>)
 800b554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b558:	601a      	str	r2, [r3, #0]
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b562:	bf00      	nop
 800b564:	3708      	adds	r7, #8
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	200022bc 	.word	0x200022bc
 800b570:	20001de8 	.word	0x20001de8
 800b574:	200022c8 	.word	0x200022c8
 800b578:	200022d8 	.word	0x200022d8
 800b57c:	200022c4 	.word	0x200022c4
 800b580:	20001dec 	.word	0x20001dec
 800b584:	e000ed04 	.word	0xe000ed04

0800b588 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b590:	2300      	movs	r3, #0
 800b592:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d017      	beq.n	800b5ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b59a:	4b13      	ldr	r3, [pc, #76]	; (800b5e8 <vTaskDelay+0x60>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00a      	beq.n	800b5b8 <vTaskDelay+0x30>
	__asm volatile
 800b5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	60bb      	str	r3, [r7, #8]
}
 800b5b4:	bf00      	nop
 800b5b6:	e7fe      	b.n	800b5b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b5b8:	f000 f882 	bl	800b6c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b5bc:	2100      	movs	r1, #0
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 fe14 	bl	800c1ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b5c4:	f000 f88a 	bl	800b6dc <xTaskResumeAll>
 800b5c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d107      	bne.n	800b5e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b5d0:	4b06      	ldr	r3, [pc, #24]	; (800b5ec <vTaskDelay+0x64>)
 800b5d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d6:	601a      	str	r2, [r3, #0]
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5e0:	bf00      	nop
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	200022e4 	.word	0x200022e4
 800b5ec:	e000ed04 	.word	0xe000ed04

0800b5f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b08a      	sub	sp, #40	; 0x28
 800b5f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b5fe:	463a      	mov	r2, r7
 800b600:	1d39      	adds	r1, r7, #4
 800b602:	f107 0308 	add.w	r3, r7, #8
 800b606:	4618      	mov	r0, r3
 800b608:	f7fe fd76 	bl	800a0f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b60c:	6839      	ldr	r1, [r7, #0]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	9202      	str	r2, [sp, #8]
 800b614:	9301      	str	r3, [sp, #4]
 800b616:	2300      	movs	r3, #0
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	2300      	movs	r3, #0
 800b61c:	460a      	mov	r2, r1
 800b61e:	4922      	ldr	r1, [pc, #136]	; (800b6a8 <vTaskStartScheduler+0xb8>)
 800b620:	4822      	ldr	r0, [pc, #136]	; (800b6ac <vTaskStartScheduler+0xbc>)
 800b622:	f7ff fe09 	bl	800b238 <xTaskCreateStatic>
 800b626:	4603      	mov	r3, r0
 800b628:	4a21      	ldr	r2, [pc, #132]	; (800b6b0 <vTaskStartScheduler+0xc0>)
 800b62a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b62c:	4b20      	ldr	r3, [pc, #128]	; (800b6b0 <vTaskStartScheduler+0xc0>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b634:	2301      	movs	r3, #1
 800b636:	617b      	str	r3, [r7, #20]
 800b638:	e001      	b.n	800b63e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b63a:	2300      	movs	r3, #0
 800b63c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d102      	bne.n	800b64a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b644:	f000 fe26 	bl	800c294 <xTimerCreateTimerTask>
 800b648:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d118      	bne.n	800b682 <vTaskStartScheduler+0x92>
	__asm volatile
 800b650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b654:	f383 8811 	msr	BASEPRI, r3
 800b658:	f3bf 8f6f 	isb	sy
 800b65c:	f3bf 8f4f 	dsb	sy
 800b660:	613b      	str	r3, [r7, #16]
}
 800b662:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b664:	4b13      	ldr	r3, [pc, #76]	; (800b6b4 <vTaskStartScheduler+0xc4>)
 800b666:	f04f 32ff 	mov.w	r2, #4294967295
 800b66a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b66c:	4b12      	ldr	r3, [pc, #72]	; (800b6b8 <vTaskStartScheduler+0xc8>)
 800b66e:	2201      	movs	r2, #1
 800b670:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b672:	4b12      	ldr	r3, [pc, #72]	; (800b6bc <vTaskStartScheduler+0xcc>)
 800b674:	2200      	movs	r2, #0
 800b676:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b678:	f7f5 fc18 	bl	8000eac <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b67c:	f001 f9e0 	bl	800ca40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b680:	e00e      	b.n	800b6a0 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b688:	d10a      	bne.n	800b6a0 <vTaskStartScheduler+0xb0>
	__asm volatile
 800b68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68e:	f383 8811 	msr	BASEPRI, r3
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	60fb      	str	r3, [r7, #12]
}
 800b69c:	bf00      	nop
 800b69e:	e7fe      	b.n	800b69e <vTaskStartScheduler+0xae>
}
 800b6a0:	bf00      	nop
 800b6a2:	3718      	adds	r7, #24
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	08011bbc 	.word	0x08011bbc
 800b6ac:	0800bd0d 	.word	0x0800bd0d
 800b6b0:	200022e0 	.word	0x200022e0
 800b6b4:	200022dc 	.word	0x200022dc
 800b6b8:	200022c8 	.word	0x200022c8
 800b6bc:	200022c0 	.word	0x200022c0

0800b6c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b6c4:	4b04      	ldr	r3, [pc, #16]	; (800b6d8 <vTaskSuspendAll+0x18>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	4a03      	ldr	r2, [pc, #12]	; (800b6d8 <vTaskSuspendAll+0x18>)
 800b6cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b6ce:	bf00      	nop
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr
 800b6d8:	200022e4 	.word	0x200022e4

0800b6dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b6ea:	4b42      	ldr	r3, [pc, #264]	; (800b7f4 <xTaskResumeAll+0x118>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d10a      	bne.n	800b708 <xTaskResumeAll+0x2c>
	__asm volatile
 800b6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f6:	f383 8811 	msr	BASEPRI, r3
 800b6fa:	f3bf 8f6f 	isb	sy
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	603b      	str	r3, [r7, #0]
}
 800b704:	bf00      	nop
 800b706:	e7fe      	b.n	800b706 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b708:	f001 fa3c 	bl	800cb84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b70c:	4b39      	ldr	r3, [pc, #228]	; (800b7f4 <xTaskResumeAll+0x118>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	3b01      	subs	r3, #1
 800b712:	4a38      	ldr	r2, [pc, #224]	; (800b7f4 <xTaskResumeAll+0x118>)
 800b714:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b716:	4b37      	ldr	r3, [pc, #220]	; (800b7f4 <xTaskResumeAll+0x118>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d162      	bne.n	800b7e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b71e:	4b36      	ldr	r3, [pc, #216]	; (800b7f8 <xTaskResumeAll+0x11c>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d05e      	beq.n	800b7e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b726:	e02f      	b.n	800b788 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b728:	4b34      	ldr	r3, [pc, #208]	; (800b7fc <xTaskResumeAll+0x120>)
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	3318      	adds	r3, #24
 800b734:	4618      	mov	r0, r3
 800b736:	f7fe fd9d 	bl	800a274 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	3304      	adds	r3, #4
 800b73e:	4618      	mov	r0, r3
 800b740:	f7fe fd98 	bl	800a274 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b748:	4b2d      	ldr	r3, [pc, #180]	; (800b800 <xTaskResumeAll+0x124>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d903      	bls.n	800b758 <xTaskResumeAll+0x7c>
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b754:	4a2a      	ldr	r2, [pc, #168]	; (800b800 <xTaskResumeAll+0x124>)
 800b756:	6013      	str	r3, [r2, #0]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b75c:	4613      	mov	r3, r2
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	4413      	add	r3, r2
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	4a27      	ldr	r2, [pc, #156]	; (800b804 <xTaskResumeAll+0x128>)
 800b766:	441a      	add	r2, r3
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	3304      	adds	r3, #4
 800b76c:	4619      	mov	r1, r3
 800b76e:	4610      	mov	r0, r2
 800b770:	f7fe fd23 	bl	800a1ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b778:	4b23      	ldr	r3, [pc, #140]	; (800b808 <xTaskResumeAll+0x12c>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b77e:	429a      	cmp	r2, r3
 800b780:	d302      	bcc.n	800b788 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b782:	4b22      	ldr	r3, [pc, #136]	; (800b80c <xTaskResumeAll+0x130>)
 800b784:	2201      	movs	r2, #1
 800b786:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b788:	4b1c      	ldr	r3, [pc, #112]	; (800b7fc <xTaskResumeAll+0x120>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1cb      	bne.n	800b728 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b796:	f000 fb6f 	bl	800be78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b79a:	4b1d      	ldr	r3, [pc, #116]	; (800b810 <xTaskResumeAll+0x134>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d010      	beq.n	800b7c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b7a6:	f000 f847 	bl	800b838 <xTaskIncrementTick>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b7b0:	4b16      	ldr	r3, [pc, #88]	; (800b80c <xTaskResumeAll+0x130>)
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d1f1      	bne.n	800b7a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b7c2:	4b13      	ldr	r3, [pc, #76]	; (800b810 <xTaskResumeAll+0x134>)
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b7c8:	4b10      	ldr	r3, [pc, #64]	; (800b80c <xTaskResumeAll+0x130>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d009      	beq.n	800b7e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b7d4:	4b0f      	ldr	r3, [pc, #60]	; (800b814 <xTaskResumeAll+0x138>)
 800b7d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7da:	601a      	str	r2, [r3, #0]
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b7e4:	f001 f9fe 	bl	800cbe4 <vPortExitCritical>

	return xAlreadyYielded;
 800b7e8:	68bb      	ldr	r3, [r7, #8]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	200022e4 	.word	0x200022e4
 800b7f8:	200022bc 	.word	0x200022bc
 800b7fc:	2000227c 	.word	0x2000227c
 800b800:	200022c4 	.word	0x200022c4
 800b804:	20001dec 	.word	0x20001dec
 800b808:	20001de8 	.word	0x20001de8
 800b80c:	200022d0 	.word	0x200022d0
 800b810:	200022cc 	.word	0x200022cc
 800b814:	e000ed04 	.word	0xe000ed04

0800b818 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b81e:	4b05      	ldr	r3, [pc, #20]	; (800b834 <xTaskGetTickCount+0x1c>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b824:	687b      	ldr	r3, [r7, #4]
}
 800b826:	4618      	mov	r0, r3
 800b828:	370c      	adds	r7, #12
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	200022c0 	.word	0x200022c0

0800b838 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b83e:	2300      	movs	r3, #0
 800b840:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b842:	4b4f      	ldr	r3, [pc, #316]	; (800b980 <xTaskIncrementTick+0x148>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	f040 808f 	bne.w	800b96a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b84c:	4b4d      	ldr	r3, [pc, #308]	; (800b984 <xTaskIncrementTick+0x14c>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	3301      	adds	r3, #1
 800b852:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b854:	4a4b      	ldr	r2, [pc, #300]	; (800b984 <xTaskIncrementTick+0x14c>)
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d120      	bne.n	800b8a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b860:	4b49      	ldr	r3, [pc, #292]	; (800b988 <xTaskIncrementTick+0x150>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d00a      	beq.n	800b880 <xTaskIncrementTick+0x48>
	__asm volatile
 800b86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b86e:	f383 8811 	msr	BASEPRI, r3
 800b872:	f3bf 8f6f 	isb	sy
 800b876:	f3bf 8f4f 	dsb	sy
 800b87a:	603b      	str	r3, [r7, #0]
}
 800b87c:	bf00      	nop
 800b87e:	e7fe      	b.n	800b87e <xTaskIncrementTick+0x46>
 800b880:	4b41      	ldr	r3, [pc, #260]	; (800b988 <xTaskIncrementTick+0x150>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	60fb      	str	r3, [r7, #12]
 800b886:	4b41      	ldr	r3, [pc, #260]	; (800b98c <xTaskIncrementTick+0x154>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a3f      	ldr	r2, [pc, #252]	; (800b988 <xTaskIncrementTick+0x150>)
 800b88c:	6013      	str	r3, [r2, #0]
 800b88e:	4a3f      	ldr	r2, [pc, #252]	; (800b98c <xTaskIncrementTick+0x154>)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6013      	str	r3, [r2, #0]
 800b894:	4b3e      	ldr	r3, [pc, #248]	; (800b990 <xTaskIncrementTick+0x158>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	3301      	adds	r3, #1
 800b89a:	4a3d      	ldr	r2, [pc, #244]	; (800b990 <xTaskIncrementTick+0x158>)
 800b89c:	6013      	str	r3, [r2, #0]
 800b89e:	f000 faeb 	bl	800be78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b8a2:	4b3c      	ldr	r3, [pc, #240]	; (800b994 <xTaskIncrementTick+0x15c>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	693a      	ldr	r2, [r7, #16]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d349      	bcc.n	800b940 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8ac:	4b36      	ldr	r3, [pc, #216]	; (800b988 <xTaskIncrementTick+0x150>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d104      	bne.n	800b8c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8b6:	4b37      	ldr	r3, [pc, #220]	; (800b994 <xTaskIncrementTick+0x15c>)
 800b8b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8bc:	601a      	str	r2, [r3, #0]
					break;
 800b8be:	e03f      	b.n	800b940 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8c0:	4b31      	ldr	r3, [pc, #196]	; (800b988 <xTaskIncrementTick+0x150>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b8d0:	693a      	ldr	r2, [r7, #16]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d203      	bcs.n	800b8e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b8d8:	4a2e      	ldr	r2, [pc, #184]	; (800b994 <xTaskIncrementTick+0x15c>)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b8de:	e02f      	b.n	800b940 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	3304      	adds	r3, #4
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fe fcc5 	bl	800a274 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d004      	beq.n	800b8fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	3318      	adds	r3, #24
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7fe fcbc 	bl	800a274 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b900:	4b25      	ldr	r3, [pc, #148]	; (800b998 <xTaskIncrementTick+0x160>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	429a      	cmp	r2, r3
 800b906:	d903      	bls.n	800b910 <xTaskIncrementTick+0xd8>
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b90c:	4a22      	ldr	r2, [pc, #136]	; (800b998 <xTaskIncrementTick+0x160>)
 800b90e:	6013      	str	r3, [r2, #0]
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b914:	4613      	mov	r3, r2
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	4413      	add	r3, r2
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	4a1f      	ldr	r2, [pc, #124]	; (800b99c <xTaskIncrementTick+0x164>)
 800b91e:	441a      	add	r2, r3
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	3304      	adds	r3, #4
 800b924:	4619      	mov	r1, r3
 800b926:	4610      	mov	r0, r2
 800b928:	f7fe fc47 	bl	800a1ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b930:	4b1b      	ldr	r3, [pc, #108]	; (800b9a0 <xTaskIncrementTick+0x168>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b936:	429a      	cmp	r2, r3
 800b938:	d3b8      	bcc.n	800b8ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b93a:	2301      	movs	r3, #1
 800b93c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b93e:	e7b5      	b.n	800b8ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b940:	4b17      	ldr	r3, [pc, #92]	; (800b9a0 <xTaskIncrementTick+0x168>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b946:	4915      	ldr	r1, [pc, #84]	; (800b99c <xTaskIncrementTick+0x164>)
 800b948:	4613      	mov	r3, r2
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4413      	add	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	440b      	add	r3, r1
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b01      	cmp	r3, #1
 800b956:	d901      	bls.n	800b95c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b958:	2301      	movs	r3, #1
 800b95a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b95c:	4b11      	ldr	r3, [pc, #68]	; (800b9a4 <xTaskIncrementTick+0x16c>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d007      	beq.n	800b974 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b964:	2301      	movs	r3, #1
 800b966:	617b      	str	r3, [r7, #20]
 800b968:	e004      	b.n	800b974 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b96a:	4b0f      	ldr	r3, [pc, #60]	; (800b9a8 <xTaskIncrementTick+0x170>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	3301      	adds	r3, #1
 800b970:	4a0d      	ldr	r2, [pc, #52]	; (800b9a8 <xTaskIncrementTick+0x170>)
 800b972:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b974:	697b      	ldr	r3, [r7, #20]
}
 800b976:	4618      	mov	r0, r3
 800b978:	3718      	adds	r7, #24
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	200022e4 	.word	0x200022e4
 800b984:	200022c0 	.word	0x200022c0
 800b988:	20002274 	.word	0x20002274
 800b98c:	20002278 	.word	0x20002278
 800b990:	200022d4 	.word	0x200022d4
 800b994:	200022dc 	.word	0x200022dc
 800b998:	200022c4 	.word	0x200022c4
 800b99c:	20001dec 	.word	0x20001dec
 800b9a0:	20001de8 	.word	0x20001de8
 800b9a4:	200022d0 	.word	0x200022d0
 800b9a8:	200022cc 	.word	0x200022cc

0800b9ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b9b2:	4b33      	ldr	r3, [pc, #204]	; (800ba80 <vTaskSwitchContext+0xd4>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d003      	beq.n	800b9c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b9ba:	4b32      	ldr	r3, [pc, #200]	; (800ba84 <vTaskSwitchContext+0xd8>)
 800b9bc:	2201      	movs	r2, #1
 800b9be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b9c0:	e05a      	b.n	800ba78 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 800b9c2:	4b30      	ldr	r3, [pc, #192]	; (800ba84 <vTaskSwitchContext+0xd8>)
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b9c8:	f7f5 fa7e 	bl	8000ec8 <getRunTimeCounterValue>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	4a2e      	ldr	r2, [pc, #184]	; (800ba88 <vTaskSwitchContext+0xdc>)
 800b9d0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b9d2:	4b2d      	ldr	r3, [pc, #180]	; (800ba88 <vTaskSwitchContext+0xdc>)
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	4b2d      	ldr	r3, [pc, #180]	; (800ba8c <vTaskSwitchContext+0xe0>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d909      	bls.n	800b9f2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b9de:	4b2c      	ldr	r3, [pc, #176]	; (800ba90 <vTaskSwitchContext+0xe4>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800b9e4:	4a28      	ldr	r2, [pc, #160]	; (800ba88 <vTaskSwitchContext+0xdc>)
 800b9e6:	6810      	ldr	r0, [r2, #0]
 800b9e8:	4a28      	ldr	r2, [pc, #160]	; (800ba8c <vTaskSwitchContext+0xe0>)
 800b9ea:	6812      	ldr	r2, [r2, #0]
 800b9ec:	1a82      	subs	r2, r0, r2
 800b9ee:	440a      	add	r2, r1
 800b9f0:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b9f2:	4b25      	ldr	r3, [pc, #148]	; (800ba88 <vTaskSwitchContext+0xdc>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a25      	ldr	r2, [pc, #148]	; (800ba8c <vTaskSwitchContext+0xe0>)
 800b9f8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9fa:	4b26      	ldr	r3, [pc, #152]	; (800ba94 <vTaskSwitchContext+0xe8>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	e010      	b.n	800ba24 <vTaskSwitchContext+0x78>
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d10a      	bne.n	800ba1e <vTaskSwitchContext+0x72>
	__asm volatile
 800ba08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0c:	f383 8811 	msr	BASEPRI, r3
 800ba10:	f3bf 8f6f 	isb	sy
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	607b      	str	r3, [r7, #4]
}
 800ba1a:	bf00      	nop
 800ba1c:	e7fe      	b.n	800ba1c <vTaskSwitchContext+0x70>
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	3b01      	subs	r3, #1
 800ba22:	60fb      	str	r3, [r7, #12]
 800ba24:	491c      	ldr	r1, [pc, #112]	; (800ba98 <vTaskSwitchContext+0xec>)
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	4613      	mov	r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4413      	add	r3, r2
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	440b      	add	r3, r1
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d0e4      	beq.n	800ba02 <vTaskSwitchContext+0x56>
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	4413      	add	r3, r2
 800ba40:	009b      	lsls	r3, r3, #2
 800ba42:	4a15      	ldr	r2, [pc, #84]	; (800ba98 <vTaskSwitchContext+0xec>)
 800ba44:	4413      	add	r3, r2
 800ba46:	60bb      	str	r3, [r7, #8]
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	685a      	ldr	r2, [r3, #4]
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	605a      	str	r2, [r3, #4]
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	685a      	ldr	r2, [r3, #4]
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	3308      	adds	r3, #8
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d104      	bne.n	800ba68 <vTaskSwitchContext+0xbc>
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	685a      	ldr	r2, [r3, #4]
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	605a      	str	r2, [r3, #4]
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	4a08      	ldr	r2, [pc, #32]	; (800ba90 <vTaskSwitchContext+0xe4>)
 800ba70:	6013      	str	r3, [r2, #0]
 800ba72:	4a08      	ldr	r2, [pc, #32]	; (800ba94 <vTaskSwitchContext+0xe8>)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6013      	str	r3, [r2, #0]
}
 800ba78:	bf00      	nop
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	200022e4 	.word	0x200022e4
 800ba84:	200022d0 	.word	0x200022d0
 800ba88:	200022ec 	.word	0x200022ec
 800ba8c:	200022e8 	.word	0x200022e8
 800ba90:	20001de8 	.word	0x20001de8
 800ba94:	200022c4 	.word	0x200022c4
 800ba98:	20001dec 	.word	0x20001dec

0800ba9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10a      	bne.n	800bac2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800baac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab0:	f383 8811 	msr	BASEPRI, r3
 800bab4:	f3bf 8f6f 	isb	sy
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	60fb      	str	r3, [r7, #12]
}
 800babe:	bf00      	nop
 800bac0:	e7fe      	b.n	800bac0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bac2:	4b07      	ldr	r3, [pc, #28]	; (800bae0 <vTaskPlaceOnEventList+0x44>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	3318      	adds	r3, #24
 800bac8:	4619      	mov	r1, r3
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f7fe fb99 	bl	800a202 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bad0:	2101      	movs	r1, #1
 800bad2:	6838      	ldr	r0, [r7, #0]
 800bad4:	f000 fb8a 	bl	800c1ec <prvAddCurrentTaskToDelayedList>
}
 800bad8:	bf00      	nop
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	20001de8 	.word	0x20001de8

0800bae4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b086      	sub	sp, #24
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d10a      	bne.n	800bb0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800baf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafa:	f383 8811 	msr	BASEPRI, r3
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	f3bf 8f4f 	dsb	sy
 800bb06:	617b      	str	r3, [r7, #20]
}
 800bb08:	bf00      	nop
 800bb0a:	e7fe      	b.n	800bb0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb0c:	4b0a      	ldr	r3, [pc, #40]	; (800bb38 <vTaskPlaceOnEventListRestricted+0x54>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	3318      	adds	r3, #24
 800bb12:	4619      	mov	r1, r3
 800bb14:	68f8      	ldr	r0, [r7, #12]
 800bb16:	f7fe fb50 	bl	800a1ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d002      	beq.n	800bb26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bb20:	f04f 33ff 	mov.w	r3, #4294967295
 800bb24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb26:	6879      	ldr	r1, [r7, #4]
 800bb28:	68b8      	ldr	r0, [r7, #8]
 800bb2a:	f000 fb5f 	bl	800c1ec <prvAddCurrentTaskToDelayedList>
	}
 800bb2e:	bf00      	nop
 800bb30:	3718      	adds	r7, #24
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	20001de8 	.word	0x20001de8

0800bb3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d10a      	bne.n	800bb68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	60fb      	str	r3, [r7, #12]
}
 800bb64:	bf00      	nop
 800bb66:	e7fe      	b.n	800bb66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	3318      	adds	r3, #24
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7fe fb81 	bl	800a274 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb72:	4b1e      	ldr	r3, [pc, #120]	; (800bbec <xTaskRemoveFromEventList+0xb0>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d11d      	bne.n	800bbb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fe fb78 	bl	800a274 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb88:	4b19      	ldr	r3, [pc, #100]	; (800bbf0 <xTaskRemoveFromEventList+0xb4>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d903      	bls.n	800bb98 <xTaskRemoveFromEventList+0x5c>
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb94:	4a16      	ldr	r2, [pc, #88]	; (800bbf0 <xTaskRemoveFromEventList+0xb4>)
 800bb96:	6013      	str	r3, [r2, #0]
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb9c:	4613      	mov	r3, r2
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	4413      	add	r3, r2
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	4a13      	ldr	r2, [pc, #76]	; (800bbf4 <xTaskRemoveFromEventList+0xb8>)
 800bba6:	441a      	add	r2, r3
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	3304      	adds	r3, #4
 800bbac:	4619      	mov	r1, r3
 800bbae:	4610      	mov	r0, r2
 800bbb0:	f7fe fb03 	bl	800a1ba <vListInsertEnd>
 800bbb4:	e005      	b.n	800bbc2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	3318      	adds	r3, #24
 800bbba:	4619      	mov	r1, r3
 800bbbc:	480e      	ldr	r0, [pc, #56]	; (800bbf8 <xTaskRemoveFromEventList+0xbc>)
 800bbbe:	f7fe fafc 	bl	800a1ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc6:	4b0d      	ldr	r3, [pc, #52]	; (800bbfc <xTaskRemoveFromEventList+0xc0>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d905      	bls.n	800bbdc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bbd4:	4b0a      	ldr	r3, [pc, #40]	; (800bc00 <xTaskRemoveFromEventList+0xc4>)
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	601a      	str	r2, [r3, #0]
 800bbda:	e001      	b.n	800bbe0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bbe0:	697b      	ldr	r3, [r7, #20]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3718      	adds	r7, #24
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	200022e4 	.word	0x200022e4
 800bbf0:	200022c4 	.word	0x200022c4
 800bbf4:	20001dec 	.word	0x20001dec
 800bbf8:	2000227c 	.word	0x2000227c
 800bbfc:	20001de8 	.word	0x20001de8
 800bc00:	200022d0 	.word	0x200022d0

0800bc04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc0c:	4b06      	ldr	r3, [pc, #24]	; (800bc28 <vTaskInternalSetTimeOutState+0x24>)
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc14:	4b05      	ldr	r3, [pc, #20]	; (800bc2c <vTaskInternalSetTimeOutState+0x28>)
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	605a      	str	r2, [r3, #4]
}
 800bc1c:	bf00      	nop
 800bc1e:	370c      	adds	r7, #12
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr
 800bc28:	200022d4 	.word	0x200022d4
 800bc2c:	200022c0 	.word	0x200022c0

0800bc30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b088      	sub	sp, #32
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d10a      	bne.n	800bc56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc44:	f383 8811 	msr	BASEPRI, r3
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	613b      	str	r3, [r7, #16]
}
 800bc52:	bf00      	nop
 800bc54:	e7fe      	b.n	800bc54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10a      	bne.n	800bc72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc60:	f383 8811 	msr	BASEPRI, r3
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	60fb      	str	r3, [r7, #12]
}
 800bc6e:	bf00      	nop
 800bc70:	e7fe      	b.n	800bc70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bc72:	f000 ff87 	bl	800cb84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc76:	4b1d      	ldr	r3, [pc, #116]	; (800bcec <xTaskCheckForTimeOut+0xbc>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	69ba      	ldr	r2, [r7, #24]
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc8e:	d102      	bne.n	800bc96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc90:	2300      	movs	r3, #0
 800bc92:	61fb      	str	r3, [r7, #28]
 800bc94:	e023      	b.n	800bcde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	4b15      	ldr	r3, [pc, #84]	; (800bcf0 <xTaskCheckForTimeOut+0xc0>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d007      	beq.n	800bcb2 <xTaskCheckForTimeOut+0x82>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	69ba      	ldr	r2, [r7, #24]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d302      	bcc.n	800bcb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bcac:	2301      	movs	r3, #1
 800bcae:	61fb      	str	r3, [r7, #28]
 800bcb0:	e015      	b.n	800bcde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	697a      	ldr	r2, [r7, #20]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d20b      	bcs.n	800bcd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	1ad2      	subs	r2, r2, r3
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f7ff ff9b 	bl	800bc04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	61fb      	str	r3, [r7, #28]
 800bcd2:	e004      	b.n	800bcde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bcde:	f000 ff81 	bl	800cbe4 <vPortExitCritical>

	return xReturn;
 800bce2:	69fb      	ldr	r3, [r7, #28]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3720      	adds	r7, #32
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	200022c0 	.word	0x200022c0
 800bcf0:	200022d4 	.word	0x200022d4

0800bcf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bcf8:	4b03      	ldr	r3, [pc, #12]	; (800bd08 <vTaskMissedYield+0x14>)
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	601a      	str	r2, [r3, #0]
}
 800bcfe:	bf00      	nop
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr
 800bd08:	200022d0 	.word	0x200022d0

0800bd0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd14:	f000 f852 	bl	800bdbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd18:	4b06      	ldr	r3, [pc, #24]	; (800bd34 <prvIdleTask+0x28>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d9f9      	bls.n	800bd14 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd20:	4b05      	ldr	r3, [pc, #20]	; (800bd38 <prvIdleTask+0x2c>)
 800bd22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd26:	601a      	str	r2, [r3, #0]
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd30:	e7f0      	b.n	800bd14 <prvIdleTask+0x8>
 800bd32:	bf00      	nop
 800bd34:	20001dec 	.word	0x20001dec
 800bd38:	e000ed04 	.word	0xe000ed04

0800bd3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd42:	2300      	movs	r3, #0
 800bd44:	607b      	str	r3, [r7, #4]
 800bd46:	e00c      	b.n	800bd62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	4413      	add	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4a12      	ldr	r2, [pc, #72]	; (800bd9c <prvInitialiseTaskLists+0x60>)
 800bd54:	4413      	add	r3, r2
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fe fa02 	bl	800a160 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	607b      	str	r3, [r7, #4]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2b37      	cmp	r3, #55	; 0x37
 800bd66:	d9ef      	bls.n	800bd48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd68:	480d      	ldr	r0, [pc, #52]	; (800bda0 <prvInitialiseTaskLists+0x64>)
 800bd6a:	f7fe f9f9 	bl	800a160 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd6e:	480d      	ldr	r0, [pc, #52]	; (800bda4 <prvInitialiseTaskLists+0x68>)
 800bd70:	f7fe f9f6 	bl	800a160 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd74:	480c      	ldr	r0, [pc, #48]	; (800bda8 <prvInitialiseTaskLists+0x6c>)
 800bd76:	f7fe f9f3 	bl	800a160 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd7a:	480c      	ldr	r0, [pc, #48]	; (800bdac <prvInitialiseTaskLists+0x70>)
 800bd7c:	f7fe f9f0 	bl	800a160 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd80:	480b      	ldr	r0, [pc, #44]	; (800bdb0 <prvInitialiseTaskLists+0x74>)
 800bd82:	f7fe f9ed 	bl	800a160 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd86:	4b0b      	ldr	r3, [pc, #44]	; (800bdb4 <prvInitialiseTaskLists+0x78>)
 800bd88:	4a05      	ldr	r2, [pc, #20]	; (800bda0 <prvInitialiseTaskLists+0x64>)
 800bd8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd8c:	4b0a      	ldr	r3, [pc, #40]	; (800bdb8 <prvInitialiseTaskLists+0x7c>)
 800bd8e:	4a05      	ldr	r2, [pc, #20]	; (800bda4 <prvInitialiseTaskLists+0x68>)
 800bd90:	601a      	str	r2, [r3, #0]
}
 800bd92:	bf00      	nop
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	20001dec 	.word	0x20001dec
 800bda0:	2000224c 	.word	0x2000224c
 800bda4:	20002260 	.word	0x20002260
 800bda8:	2000227c 	.word	0x2000227c
 800bdac:	20002290 	.word	0x20002290
 800bdb0:	200022a8 	.word	0x200022a8
 800bdb4:	20002274 	.word	0x20002274
 800bdb8:	20002278 	.word	0x20002278

0800bdbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdc2:	e019      	b.n	800bdf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bdc4:	f000 fede 	bl	800cb84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdc8:	4b10      	ldr	r3, [pc, #64]	; (800be0c <prvCheckTasksWaitingTermination+0x50>)
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	3304      	adds	r3, #4
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fe fa4d 	bl	800a274 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bdda:	4b0d      	ldr	r3, [pc, #52]	; (800be10 <prvCheckTasksWaitingTermination+0x54>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	3b01      	subs	r3, #1
 800bde0:	4a0b      	ldr	r2, [pc, #44]	; (800be10 <prvCheckTasksWaitingTermination+0x54>)
 800bde2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bde4:	4b0b      	ldr	r3, [pc, #44]	; (800be14 <prvCheckTasksWaitingTermination+0x58>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	3b01      	subs	r3, #1
 800bdea:	4a0a      	ldr	r2, [pc, #40]	; (800be14 <prvCheckTasksWaitingTermination+0x58>)
 800bdec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bdee:	f000 fef9 	bl	800cbe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f810 	bl	800be18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdf8:	4b06      	ldr	r3, [pc, #24]	; (800be14 <prvCheckTasksWaitingTermination+0x58>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d1e1      	bne.n	800bdc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be00:	bf00      	nop
 800be02:	bf00      	nop
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	20002290 	.word	0x20002290
 800be10:	200022bc 	.word	0x200022bc
 800be14:	200022a4 	.word	0x200022a4

0800be18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800be26:	2b00      	cmp	r3, #0
 800be28:	d108      	bne.n	800be3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be2e:	4618      	mov	r0, r3
 800be30:	f001 f896 	bl	800cf60 <vPortFree>
				vPortFree( pxTCB );
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f001 f893 	bl	800cf60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be3a:	e018      	b.n	800be6e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800be42:	2b01      	cmp	r3, #1
 800be44:	d103      	bne.n	800be4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f001 f88a 	bl	800cf60 <vPortFree>
	}
 800be4c:	e00f      	b.n	800be6e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800be54:	2b02      	cmp	r3, #2
 800be56:	d00a      	beq.n	800be6e <prvDeleteTCB+0x56>
	__asm volatile
 800be58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5c:	f383 8811 	msr	BASEPRI, r3
 800be60:	f3bf 8f6f 	isb	sy
 800be64:	f3bf 8f4f 	dsb	sy
 800be68:	60fb      	str	r3, [r7, #12]
}
 800be6a:	bf00      	nop
 800be6c:	e7fe      	b.n	800be6c <prvDeleteTCB+0x54>
	}
 800be6e:	bf00      	nop
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
	...

0800be78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be7e:	4b0c      	ldr	r3, [pc, #48]	; (800beb0 <prvResetNextTaskUnblockTime+0x38>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d104      	bne.n	800be92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be88:	4b0a      	ldr	r3, [pc, #40]	; (800beb4 <prvResetNextTaskUnblockTime+0x3c>)
 800be8a:	f04f 32ff 	mov.w	r2, #4294967295
 800be8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be90:	e008      	b.n	800bea4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be92:	4b07      	ldr	r3, [pc, #28]	; (800beb0 <prvResetNextTaskUnblockTime+0x38>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	4a04      	ldr	r2, [pc, #16]	; (800beb4 <prvResetNextTaskUnblockTime+0x3c>)
 800bea2:	6013      	str	r3, [r2, #0]
}
 800bea4:	bf00      	nop
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr
 800beb0:	20002274 	.word	0x20002274
 800beb4:	200022dc 	.word	0x200022dc

0800beb8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800bebe:	4b05      	ldr	r3, [pc, #20]	; (800bed4 <xTaskGetCurrentTaskHandle+0x1c>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800bec4:	687b      	ldr	r3, [r7, #4]
	}
 800bec6:	4618      	mov	r0, r3
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	20001de8 	.word	0x20001de8

0800bed8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bede:	4b0b      	ldr	r3, [pc, #44]	; (800bf0c <xTaskGetSchedulerState+0x34>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d102      	bne.n	800beec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bee6:	2301      	movs	r3, #1
 800bee8:	607b      	str	r3, [r7, #4]
 800beea:	e008      	b.n	800befe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beec:	4b08      	ldr	r3, [pc, #32]	; (800bf10 <xTaskGetSchedulerState+0x38>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d102      	bne.n	800befa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bef4:	2302      	movs	r3, #2
 800bef6:	607b      	str	r3, [r7, #4]
 800bef8:	e001      	b.n	800befe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800befa:	2300      	movs	r3, #0
 800befc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800befe:	687b      	ldr	r3, [r7, #4]
	}
 800bf00:	4618      	mov	r0, r3
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr
 800bf0c:	200022c8 	.word	0x200022c8
 800bf10:	200022e4 	.word	0x200022e4

0800bf14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bf20:	2300      	movs	r3, #0
 800bf22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d051      	beq.n	800bfce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf2e:	4b2a      	ldr	r3, [pc, #168]	; (800bfd8 <xTaskPriorityInherit+0xc4>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d241      	bcs.n	800bfbc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	699b      	ldr	r3, [r3, #24]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	db06      	blt.n	800bf4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf40:	4b25      	ldr	r3, [pc, #148]	; (800bfd8 <xTaskPriorityInherit+0xc4>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	6959      	ldr	r1, [r3, #20]
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf56:	4613      	mov	r3, r2
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	4413      	add	r3, r2
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	4a1f      	ldr	r2, [pc, #124]	; (800bfdc <xTaskPriorityInherit+0xc8>)
 800bf60:	4413      	add	r3, r2
 800bf62:	4299      	cmp	r1, r3
 800bf64:	d122      	bne.n	800bfac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	3304      	adds	r3, #4
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7fe f982 	bl	800a274 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf70:	4b19      	ldr	r3, [pc, #100]	; (800bfd8 <xTaskPriorityInherit+0xc4>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf7e:	4b18      	ldr	r3, [pc, #96]	; (800bfe0 <xTaskPriorityInherit+0xcc>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d903      	bls.n	800bf8e <xTaskPriorityInherit+0x7a>
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8a:	4a15      	ldr	r2, [pc, #84]	; (800bfe0 <xTaskPriorityInherit+0xcc>)
 800bf8c:	6013      	str	r3, [r2, #0]
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf92:	4613      	mov	r3, r2
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	4413      	add	r3, r2
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	4a10      	ldr	r2, [pc, #64]	; (800bfdc <xTaskPriorityInherit+0xc8>)
 800bf9c:	441a      	add	r2, r3
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	3304      	adds	r3, #4
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	4610      	mov	r0, r2
 800bfa6:	f7fe f908 	bl	800a1ba <vListInsertEnd>
 800bfaa:	e004      	b.n	800bfb6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfac:	4b0a      	ldr	r3, [pc, #40]	; (800bfd8 <xTaskPriorityInherit+0xc4>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	60fb      	str	r3, [r7, #12]
 800bfba:	e008      	b.n	800bfce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bfc0:	4b05      	ldr	r3, [pc, #20]	; (800bfd8 <xTaskPriorityInherit+0xc4>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d201      	bcs.n	800bfce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bfce:	68fb      	ldr	r3, [r7, #12]
	}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	20001de8 	.word	0x20001de8
 800bfdc:	20001dec 	.word	0x20001dec
 800bfe0:	200022c4 	.word	0x200022c4

0800bfe4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b086      	sub	sp, #24
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bff0:	2300      	movs	r3, #0
 800bff2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d056      	beq.n	800c0a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bffa:	4b2e      	ldr	r3, [pc, #184]	; (800c0b4 <xTaskPriorityDisinherit+0xd0>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	693a      	ldr	r2, [r7, #16]
 800c000:	429a      	cmp	r2, r3
 800c002:	d00a      	beq.n	800c01a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c008:	f383 8811 	msr	BASEPRI, r3
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	f3bf 8f4f 	dsb	sy
 800c014:	60fb      	str	r3, [r7, #12]
}
 800c016:	bf00      	nop
 800c018:	e7fe      	b.n	800c018 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d10a      	bne.n	800c038 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c026:	f383 8811 	msr	BASEPRI, r3
 800c02a:	f3bf 8f6f 	isb	sy
 800c02e:	f3bf 8f4f 	dsb	sy
 800c032:	60bb      	str	r3, [r7, #8]
}
 800c034:	bf00      	nop
 800c036:	e7fe      	b.n	800c036 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c03c:	1e5a      	subs	r2, r3, #1
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d02c      	beq.n	800c0a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c052:	2b00      	cmp	r3, #0
 800c054:	d128      	bne.n	800c0a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	3304      	adds	r3, #4
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fe f90a 	bl	800a274 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c078:	4b0f      	ldr	r3, [pc, #60]	; (800c0b8 <xTaskPriorityDisinherit+0xd4>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d903      	bls.n	800c088 <xTaskPriorityDisinherit+0xa4>
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c084:	4a0c      	ldr	r2, [pc, #48]	; (800c0b8 <xTaskPriorityDisinherit+0xd4>)
 800c086:	6013      	str	r3, [r2, #0]
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c08c:	4613      	mov	r3, r2
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4413      	add	r3, r2
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	4a09      	ldr	r2, [pc, #36]	; (800c0bc <xTaskPriorityDisinherit+0xd8>)
 800c096:	441a      	add	r2, r3
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	3304      	adds	r3, #4
 800c09c:	4619      	mov	r1, r3
 800c09e:	4610      	mov	r0, r2
 800c0a0:	f7fe f88b 	bl	800a1ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c0a8:	697b      	ldr	r3, [r7, #20]
	}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3718      	adds	r7, #24
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	20001de8 	.word	0x20001de8
 800c0b8:	200022c4 	.word	0x200022c4
 800c0bc:	20001dec 	.word	0x20001dec

0800c0c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b088      	sub	sp, #32
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d06a      	beq.n	800c1ae <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d10a      	bne.n	800c0f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	60fb      	str	r3, [r7, #12]
}
 800c0f2:	bf00      	nop
 800c0f4:	e7fe      	b.n	800c0f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d902      	bls.n	800c106 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	61fb      	str	r3, [r7, #28]
 800c104:	e002      	b.n	800c10c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c10a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c110:	69fa      	ldr	r2, [r7, #28]
 800c112:	429a      	cmp	r2, r3
 800c114:	d04b      	beq.n	800c1ae <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c116:	69bb      	ldr	r3, [r7, #24]
 800c118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c11a:	697a      	ldr	r2, [r7, #20]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d146      	bne.n	800c1ae <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c120:	4b25      	ldr	r3, [pc, #148]	; (800c1b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	69ba      	ldr	r2, [r7, #24]
 800c126:	429a      	cmp	r2, r3
 800c128:	d10a      	bne.n	800c140 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12e:	f383 8811 	msr	BASEPRI, r3
 800c132:	f3bf 8f6f 	isb	sy
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	60bb      	str	r3, [r7, #8]
}
 800c13c:	bf00      	nop
 800c13e:	e7fe      	b.n	800c13e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c144:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	69fa      	ldr	r2, [r7, #28]
 800c14a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	699b      	ldr	r3, [r3, #24]
 800c150:	2b00      	cmp	r3, #0
 800c152:	db04      	blt.n	800c15e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	6959      	ldr	r1, [r3, #20]
 800c162:	693a      	ldr	r2, [r7, #16]
 800c164:	4613      	mov	r3, r2
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	4413      	add	r3, r2
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	4a13      	ldr	r2, [pc, #76]	; (800c1bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c16e:	4413      	add	r3, r2
 800c170:	4299      	cmp	r1, r3
 800c172:	d11c      	bne.n	800c1ae <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	3304      	adds	r3, #4
 800c178:	4618      	mov	r0, r3
 800c17a:	f7fe f87b 	bl	800a274 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c17e:	69bb      	ldr	r3, [r7, #24]
 800c180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c182:	4b0f      	ldr	r3, [pc, #60]	; (800c1c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	429a      	cmp	r2, r3
 800c188:	d903      	bls.n	800c192 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18e:	4a0c      	ldr	r2, [pc, #48]	; (800c1c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c190:	6013      	str	r3, [r2, #0]
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c196:	4613      	mov	r3, r2
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	4413      	add	r3, r2
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	4a07      	ldr	r2, [pc, #28]	; (800c1bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c1a0:	441a      	add	r2, r3
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	3304      	adds	r3, #4
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	4610      	mov	r0, r2
 800c1aa:	f7fe f806 	bl	800a1ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1ae:	bf00      	nop
 800c1b0:	3720      	adds	r7, #32
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	20001de8 	.word	0x20001de8
 800c1bc:	20001dec 	.word	0x20001dec
 800c1c0:	200022c4 	.word	0x200022c4

0800c1c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c1c4:	b480      	push	{r7}
 800c1c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c1c8:	4b07      	ldr	r3, [pc, #28]	; (800c1e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d004      	beq.n	800c1da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c1d0:	4b05      	ldr	r3, [pc, #20]	; (800c1e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1d6:	3201      	adds	r2, #1
 800c1d8:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800c1da:	4b03      	ldr	r3, [pc, #12]	; (800c1e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
	}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr
 800c1e8:	20001de8 	.word	0x20001de8

0800c1ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c1f6:	4b21      	ldr	r3, [pc, #132]	; (800c27c <prvAddCurrentTaskToDelayedList+0x90>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1fc:	4b20      	ldr	r3, [pc, #128]	; (800c280 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	3304      	adds	r3, #4
 800c202:	4618      	mov	r0, r3
 800c204:	f7fe f836 	bl	800a274 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20e:	d10a      	bne.n	800c226 <prvAddCurrentTaskToDelayedList+0x3a>
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d007      	beq.n	800c226 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c216:	4b1a      	ldr	r3, [pc, #104]	; (800c280 <prvAddCurrentTaskToDelayedList+0x94>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	3304      	adds	r3, #4
 800c21c:	4619      	mov	r1, r3
 800c21e:	4819      	ldr	r0, [pc, #100]	; (800c284 <prvAddCurrentTaskToDelayedList+0x98>)
 800c220:	f7fd ffcb 	bl	800a1ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c224:	e026      	b.n	800c274 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4413      	add	r3, r2
 800c22c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c22e:	4b14      	ldr	r3, [pc, #80]	; (800c280 <prvAddCurrentTaskToDelayedList+0x94>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	68ba      	ldr	r2, [r7, #8]
 800c234:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c236:	68ba      	ldr	r2, [r7, #8]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d209      	bcs.n	800c252 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c23e:	4b12      	ldr	r3, [pc, #72]	; (800c288 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	4b0f      	ldr	r3, [pc, #60]	; (800c280 <prvAddCurrentTaskToDelayedList+0x94>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	3304      	adds	r3, #4
 800c248:	4619      	mov	r1, r3
 800c24a:	4610      	mov	r0, r2
 800c24c:	f7fd ffd9 	bl	800a202 <vListInsert>
}
 800c250:	e010      	b.n	800c274 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c252:	4b0e      	ldr	r3, [pc, #56]	; (800c28c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	4b0a      	ldr	r3, [pc, #40]	; (800c280 <prvAddCurrentTaskToDelayedList+0x94>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	3304      	adds	r3, #4
 800c25c:	4619      	mov	r1, r3
 800c25e:	4610      	mov	r0, r2
 800c260:	f7fd ffcf 	bl	800a202 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c264:	4b0a      	ldr	r3, [pc, #40]	; (800c290 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	68ba      	ldr	r2, [r7, #8]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d202      	bcs.n	800c274 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c26e:	4a08      	ldr	r2, [pc, #32]	; (800c290 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	6013      	str	r3, [r2, #0]
}
 800c274:	bf00      	nop
 800c276:	3710      	adds	r7, #16
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	200022c0 	.word	0x200022c0
 800c280:	20001de8 	.word	0x20001de8
 800c284:	200022a8 	.word	0x200022a8
 800c288:	20002278 	.word	0x20002278
 800c28c:	20002274 	.word	0x20002274
 800c290:	200022dc 	.word	0x200022dc

0800c294 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b08a      	sub	sp, #40	; 0x28
 800c298:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c29a:	2300      	movs	r3, #0
 800c29c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c29e:	f000 fb07 	bl	800c8b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c2a2:	4b1c      	ldr	r3, [pc, #112]	; (800c314 <xTimerCreateTimerTask+0x80>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d021      	beq.n	800c2ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c2b2:	1d3a      	adds	r2, r7, #4
 800c2b4:	f107 0108 	add.w	r1, r7, #8
 800c2b8:	f107 030c 	add.w	r3, r7, #12
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7fd ff35 	bl	800a12c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c2c2:	6879      	ldr	r1, [r7, #4]
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	9202      	str	r2, [sp, #8]
 800c2ca:	9301      	str	r3, [sp, #4]
 800c2cc:	2302      	movs	r3, #2
 800c2ce:	9300      	str	r3, [sp, #0]
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	460a      	mov	r2, r1
 800c2d4:	4910      	ldr	r1, [pc, #64]	; (800c318 <xTimerCreateTimerTask+0x84>)
 800c2d6:	4811      	ldr	r0, [pc, #68]	; (800c31c <xTimerCreateTimerTask+0x88>)
 800c2d8:	f7fe ffae 	bl	800b238 <xTaskCreateStatic>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	4a10      	ldr	r2, [pc, #64]	; (800c320 <xTimerCreateTimerTask+0x8c>)
 800c2e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c2e2:	4b0f      	ldr	r3, [pc, #60]	; (800c320 <xTimerCreateTimerTask+0x8c>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d001      	beq.n	800c2ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10a      	bne.n	800c30a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f8:	f383 8811 	msr	BASEPRI, r3
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	613b      	str	r3, [r7, #16]
}
 800c306:	bf00      	nop
 800c308:	e7fe      	b.n	800c308 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c30a:	697b      	ldr	r3, [r7, #20]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3718      	adds	r7, #24
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	20002320 	.word	0x20002320
 800c318:	08011bec 	.word	0x08011bec
 800c31c:	0800c459 	.word	0x0800c459
 800c320:	20002324 	.word	0x20002324

0800c324 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b08a      	sub	sp, #40	; 0x28
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
 800c330:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c332:	2300      	movs	r3, #0
 800c334:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d10a      	bne.n	800c352 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c340:	f383 8811 	msr	BASEPRI, r3
 800c344:	f3bf 8f6f 	isb	sy
 800c348:	f3bf 8f4f 	dsb	sy
 800c34c:	623b      	str	r3, [r7, #32]
}
 800c34e:	bf00      	nop
 800c350:	e7fe      	b.n	800c350 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c352:	4b1a      	ldr	r3, [pc, #104]	; (800c3bc <xTimerGenericCommand+0x98>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d02a      	beq.n	800c3b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	2b05      	cmp	r3, #5
 800c36a:	dc18      	bgt.n	800c39e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c36c:	f7ff fdb4 	bl	800bed8 <xTaskGetSchedulerState>
 800c370:	4603      	mov	r3, r0
 800c372:	2b02      	cmp	r3, #2
 800c374:	d109      	bne.n	800c38a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c376:	4b11      	ldr	r3, [pc, #68]	; (800c3bc <xTimerGenericCommand+0x98>)
 800c378:	6818      	ldr	r0, [r3, #0]
 800c37a:	f107 0110 	add.w	r1, r7, #16
 800c37e:	2300      	movs	r3, #0
 800c380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c382:	f7fe f9ff 	bl	800a784 <xQueueGenericSend>
 800c386:	6278      	str	r0, [r7, #36]	; 0x24
 800c388:	e012      	b.n	800c3b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c38a:	4b0c      	ldr	r3, [pc, #48]	; (800c3bc <xTimerGenericCommand+0x98>)
 800c38c:	6818      	ldr	r0, [r3, #0]
 800c38e:	f107 0110 	add.w	r1, r7, #16
 800c392:	2300      	movs	r3, #0
 800c394:	2200      	movs	r2, #0
 800c396:	f7fe f9f5 	bl	800a784 <xQueueGenericSend>
 800c39a:	6278      	str	r0, [r7, #36]	; 0x24
 800c39c:	e008      	b.n	800c3b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c39e:	4b07      	ldr	r3, [pc, #28]	; (800c3bc <xTimerGenericCommand+0x98>)
 800c3a0:	6818      	ldr	r0, [r3, #0]
 800c3a2:	f107 0110 	add.w	r1, r7, #16
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	683a      	ldr	r2, [r7, #0]
 800c3aa:	f7fe fae9 	bl	800a980 <xQueueGenericSendFromISR>
 800c3ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3728      	adds	r7, #40	; 0x28
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	20002320 	.word	0x20002320

0800c3c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b088      	sub	sp, #32
 800c3c4:	af02      	add	r7, sp, #8
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3ca:	4b22      	ldr	r3, [pc, #136]	; (800c454 <prvProcessExpiredTimer+0x94>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	3304      	adds	r3, #4
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7fd ff4b 	bl	800a274 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3e4:	f003 0304 	and.w	r3, r3, #4
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d022      	beq.n	800c432 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	699a      	ldr	r2, [r3, #24]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	18d1      	adds	r1, r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	683a      	ldr	r2, [r7, #0]
 800c3f8:	6978      	ldr	r0, [r7, #20]
 800c3fa:	f000 f8d1 	bl	800c5a0 <prvInsertTimerInActiveList>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b00      	cmp	r3, #0
 800c402:	d01f      	beq.n	800c444 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c404:	2300      	movs	r3, #0
 800c406:	9300      	str	r3, [sp, #0]
 800c408:	2300      	movs	r3, #0
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	2100      	movs	r1, #0
 800c40e:	6978      	ldr	r0, [r7, #20]
 800c410:	f7ff ff88 	bl	800c324 <xTimerGenericCommand>
 800c414:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d113      	bne.n	800c444 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c420:	f383 8811 	msr	BASEPRI, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	60fb      	str	r3, [r7, #12]
}
 800c42e:	bf00      	nop
 800c430:	e7fe      	b.n	800c430 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c438:	f023 0301 	bic.w	r3, r3, #1
 800c43c:	b2da      	uxtb	r2, r3
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	6a1b      	ldr	r3, [r3, #32]
 800c448:	6978      	ldr	r0, [r7, #20]
 800c44a:	4798      	blx	r3
}
 800c44c:	bf00      	nop
 800c44e:	3718      	adds	r7, #24
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	20002318 	.word	0x20002318

0800c458 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c460:	f107 0308 	add.w	r3, r7, #8
 800c464:	4618      	mov	r0, r3
 800c466:	f000 f857 	bl	800c518 <prvGetNextExpireTime>
 800c46a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	4619      	mov	r1, r3
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	f000 f803 	bl	800c47c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c476:	f000 f8d5 	bl	800c624 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c47a:	e7f1      	b.n	800c460 <prvTimerTask+0x8>

0800c47c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c486:	f7ff f91b 	bl	800b6c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c48a:	f107 0308 	add.w	r3, r7, #8
 800c48e:	4618      	mov	r0, r3
 800c490:	f000 f866 	bl	800c560 <prvSampleTimeNow>
 800c494:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d130      	bne.n	800c4fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d10a      	bne.n	800c4b8 <prvProcessTimerOrBlockTask+0x3c>
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d806      	bhi.n	800c4b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c4aa:	f7ff f917 	bl	800b6dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c4ae:	68f9      	ldr	r1, [r7, #12]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f7ff ff85 	bl	800c3c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c4b6:	e024      	b.n	800c502 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d008      	beq.n	800c4d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c4be:	4b13      	ldr	r3, [pc, #76]	; (800c50c <prvProcessTimerOrBlockTask+0x90>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d101      	bne.n	800c4cc <prvProcessTimerOrBlockTask+0x50>
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	e000      	b.n	800c4ce <prvProcessTimerOrBlockTask+0x52>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c4d0:	4b0f      	ldr	r3, [pc, #60]	; (800c510 <prvProcessTimerOrBlockTask+0x94>)
 800c4d2:	6818      	ldr	r0, [r3, #0]
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	683a      	ldr	r2, [r7, #0]
 800c4dc:	4619      	mov	r1, r3
 800c4de:	f7fe fe77 	bl	800b1d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c4e2:	f7ff f8fb 	bl	800b6dc <xTaskResumeAll>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d10a      	bne.n	800c502 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c4ec:	4b09      	ldr	r3, [pc, #36]	; (800c514 <prvProcessTimerOrBlockTask+0x98>)
 800c4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4f2:	601a      	str	r2, [r3, #0]
 800c4f4:	f3bf 8f4f 	dsb	sy
 800c4f8:	f3bf 8f6f 	isb	sy
}
 800c4fc:	e001      	b.n	800c502 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c4fe:	f7ff f8ed 	bl	800b6dc <xTaskResumeAll>
}
 800c502:	bf00      	nop
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	2000231c 	.word	0x2000231c
 800c510:	20002320 	.word	0x20002320
 800c514:	e000ed04 	.word	0xe000ed04

0800c518 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c518:	b480      	push	{r7}
 800c51a:	b085      	sub	sp, #20
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c520:	4b0e      	ldr	r3, [pc, #56]	; (800c55c <prvGetNextExpireTime+0x44>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d101      	bne.n	800c52e <prvGetNextExpireTime+0x16>
 800c52a:	2201      	movs	r2, #1
 800c52c:	e000      	b.n	800c530 <prvGetNextExpireTime+0x18>
 800c52e:	2200      	movs	r2, #0
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d105      	bne.n	800c548 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c53c:	4b07      	ldr	r3, [pc, #28]	; (800c55c <prvGetNextExpireTime+0x44>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	68db      	ldr	r3, [r3, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	60fb      	str	r3, [r7, #12]
 800c546:	e001      	b.n	800c54c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c548:	2300      	movs	r3, #0
 800c54a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c54c:	68fb      	ldr	r3, [r7, #12]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3714      	adds	r7, #20
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	20002318 	.word	0x20002318

0800c560 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c568:	f7ff f956 	bl	800b818 <xTaskGetTickCount>
 800c56c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c56e:	4b0b      	ldr	r3, [pc, #44]	; (800c59c <prvSampleTimeNow+0x3c>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	429a      	cmp	r2, r3
 800c576:	d205      	bcs.n	800c584 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c578:	f000 f936 	bl	800c7e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	601a      	str	r2, [r3, #0]
 800c582:	e002      	b.n	800c58a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c58a:	4a04      	ldr	r2, [pc, #16]	; (800c59c <prvSampleTimeNow+0x3c>)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c590:	68fb      	ldr	r3, [r7, #12]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	20002328 	.word	0x20002328

0800c5a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b086      	sub	sp, #24
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	607a      	str	r2, [r7, #4]
 800c5ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c5be:	68ba      	ldr	r2, [r7, #8]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d812      	bhi.n	800c5ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	1ad2      	subs	r2, r2, r3
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	699b      	ldr	r3, [r3, #24]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d302      	bcc.n	800c5da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	617b      	str	r3, [r7, #20]
 800c5d8:	e01b      	b.n	800c612 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c5da:	4b10      	ldr	r3, [pc, #64]	; (800c61c <prvInsertTimerInActiveList+0x7c>)
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	3304      	adds	r3, #4
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	4610      	mov	r0, r2
 800c5e6:	f7fd fe0c 	bl	800a202 <vListInsert>
 800c5ea:	e012      	b.n	800c612 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d206      	bcs.n	800c602 <prvInsertTimerInActiveList+0x62>
 800c5f4:	68ba      	ldr	r2, [r7, #8]
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d302      	bcc.n	800c602 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	617b      	str	r3, [r7, #20]
 800c600:	e007      	b.n	800c612 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c602:	4b07      	ldr	r3, [pc, #28]	; (800c620 <prvInsertTimerInActiveList+0x80>)
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	3304      	adds	r3, #4
 800c60a:	4619      	mov	r1, r3
 800c60c:	4610      	mov	r0, r2
 800c60e:	f7fd fdf8 	bl	800a202 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c612:	697b      	ldr	r3, [r7, #20]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3718      	adds	r7, #24
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	2000231c 	.word	0x2000231c
 800c620:	20002318 	.word	0x20002318

0800c624 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b08e      	sub	sp, #56	; 0x38
 800c628:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c62a:	e0ca      	b.n	800c7c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	da18      	bge.n	800c664 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c632:	1d3b      	adds	r3, r7, #4
 800c634:	3304      	adds	r3, #4
 800c636:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d10a      	bne.n	800c654 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	61fb      	str	r3, [r7, #28]
}
 800c650:	bf00      	nop
 800c652:	e7fe      	b.n	800c652 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c65a:	6850      	ldr	r0, [r2, #4]
 800c65c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c65e:	6892      	ldr	r2, [r2, #8]
 800c660:	4611      	mov	r1, r2
 800c662:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2b00      	cmp	r3, #0
 800c668:	f2c0 80aa 	blt.w	800c7c0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c672:	695b      	ldr	r3, [r3, #20]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d004      	beq.n	800c682 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67a:	3304      	adds	r3, #4
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7fd fdf9 	bl	800a274 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c682:	463b      	mov	r3, r7
 800c684:	4618      	mov	r0, r3
 800c686:	f7ff ff6b 	bl	800c560 <prvSampleTimeNow>
 800c68a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b09      	cmp	r3, #9
 800c690:	f200 8097 	bhi.w	800c7c2 <prvProcessReceivedCommands+0x19e>
 800c694:	a201      	add	r2, pc, #4	; (adr r2, 800c69c <prvProcessReceivedCommands+0x78>)
 800c696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c69a:	bf00      	nop
 800c69c:	0800c6c5 	.word	0x0800c6c5
 800c6a0:	0800c6c5 	.word	0x0800c6c5
 800c6a4:	0800c6c5 	.word	0x0800c6c5
 800c6a8:	0800c739 	.word	0x0800c739
 800c6ac:	0800c74d 	.word	0x0800c74d
 800c6b0:	0800c797 	.word	0x0800c797
 800c6b4:	0800c6c5 	.word	0x0800c6c5
 800c6b8:	0800c6c5 	.word	0x0800c6c5
 800c6bc:	0800c739 	.word	0x0800c739
 800c6c0:	0800c74d 	.word	0x0800c74d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6ca:	f043 0301 	orr.w	r3, r3, #1
 800c6ce:	b2da      	uxtb	r2, r3
 800c6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c6d6:	68ba      	ldr	r2, [r7, #8]
 800c6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6da:	699b      	ldr	r3, [r3, #24]
 800c6dc:	18d1      	adds	r1, r2, r3
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6e4:	f7ff ff5c 	bl	800c5a0 <prvInsertTimerInActiveList>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d069      	beq.n	800c7c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f0:	6a1b      	ldr	r3, [r3, #32]
 800c6f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6fc:	f003 0304 	and.w	r3, r3, #4
 800c700:	2b00      	cmp	r3, #0
 800c702:	d05e      	beq.n	800c7c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c704:	68ba      	ldr	r2, [r7, #8]
 800c706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c708:	699b      	ldr	r3, [r3, #24]
 800c70a:	441a      	add	r2, r3
 800c70c:	2300      	movs	r3, #0
 800c70e:	9300      	str	r3, [sp, #0]
 800c710:	2300      	movs	r3, #0
 800c712:	2100      	movs	r1, #0
 800c714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c716:	f7ff fe05 	bl	800c324 <xTimerGenericCommand>
 800c71a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c71c:	6a3b      	ldr	r3, [r7, #32]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d14f      	bne.n	800c7c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	61bb      	str	r3, [r7, #24]
}
 800c734:	bf00      	nop
 800c736:	e7fe      	b.n	800c736 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c73e:	f023 0301 	bic.w	r3, r3, #1
 800c742:	b2da      	uxtb	r2, r3
 800c744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c746:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c74a:	e03a      	b.n	800c7c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c752:	f043 0301 	orr.w	r3, r3, #1
 800c756:	b2da      	uxtb	r2, r3
 800c758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c75e:	68ba      	ldr	r2, [r7, #8]
 800c760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c762:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c766:	699b      	ldr	r3, [r3, #24]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d10a      	bne.n	800c782 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c770:	f383 8811 	msr	BASEPRI, r3
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	f3bf 8f4f 	dsb	sy
 800c77c:	617b      	str	r3, [r7, #20]
}
 800c77e:	bf00      	nop
 800c780:	e7fe      	b.n	800c780 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c784:	699a      	ldr	r2, [r3, #24]
 800c786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c788:	18d1      	adds	r1, r2, r3
 800c78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c78e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c790:	f7ff ff06 	bl	800c5a0 <prvInsertTimerInActiveList>
					break;
 800c794:	e015      	b.n	800c7c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c79c:	f003 0302 	and.w	r3, r3, #2
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d103      	bne.n	800c7ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c7a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7a6:	f000 fbdb 	bl	800cf60 <vPortFree>
 800c7aa:	e00a      	b.n	800c7c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7b2:	f023 0301 	bic.w	r3, r3, #1
 800c7b6:	b2da      	uxtb	r2, r3
 800c7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c7be:	e000      	b.n	800c7c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c7c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7c2:	4b08      	ldr	r3, [pc, #32]	; (800c7e4 <prvProcessReceivedCommands+0x1c0>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	1d39      	adds	r1, r7, #4
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7fe f974 	bl	800aab8 <xQueueReceive>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f47f af2a 	bne.w	800c62c <prvProcessReceivedCommands+0x8>
	}
}
 800c7d8:	bf00      	nop
 800c7da:	bf00      	nop
 800c7dc:	3730      	adds	r7, #48	; 0x30
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	20002320 	.word	0x20002320

0800c7e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b088      	sub	sp, #32
 800c7ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c7ee:	e048      	b.n	800c882 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7f0:	4b2d      	ldr	r3, [pc, #180]	; (800c8a8 <prvSwitchTimerLists+0xc0>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7fa:	4b2b      	ldr	r3, [pc, #172]	; (800c8a8 <prvSwitchTimerLists+0xc0>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	3304      	adds	r3, #4
 800c808:	4618      	mov	r0, r3
 800c80a:	f7fd fd33 	bl	800a274 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6a1b      	ldr	r3, [r3, #32]
 800c812:	68f8      	ldr	r0, [r7, #12]
 800c814:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c81c:	f003 0304 	and.w	r3, r3, #4
 800c820:	2b00      	cmp	r3, #0
 800c822:	d02e      	beq.n	800c882 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	699b      	ldr	r3, [r3, #24]
 800c828:	693a      	ldr	r2, [r7, #16]
 800c82a:	4413      	add	r3, r2
 800c82c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c82e:	68ba      	ldr	r2, [r7, #8]
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	429a      	cmp	r2, r3
 800c834:	d90e      	bls.n	800c854 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	68fa      	ldr	r2, [r7, #12]
 800c840:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c842:	4b19      	ldr	r3, [pc, #100]	; (800c8a8 <prvSwitchTimerLists+0xc0>)
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	3304      	adds	r3, #4
 800c84a:	4619      	mov	r1, r3
 800c84c:	4610      	mov	r0, r2
 800c84e:	f7fd fcd8 	bl	800a202 <vListInsert>
 800c852:	e016      	b.n	800c882 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c854:	2300      	movs	r3, #0
 800c856:	9300      	str	r3, [sp, #0]
 800c858:	2300      	movs	r3, #0
 800c85a:	693a      	ldr	r2, [r7, #16]
 800c85c:	2100      	movs	r1, #0
 800c85e:	68f8      	ldr	r0, [r7, #12]
 800c860:	f7ff fd60 	bl	800c324 <xTimerGenericCommand>
 800c864:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d10a      	bne.n	800c882 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c870:	f383 8811 	msr	BASEPRI, r3
 800c874:	f3bf 8f6f 	isb	sy
 800c878:	f3bf 8f4f 	dsb	sy
 800c87c:	603b      	str	r3, [r7, #0]
}
 800c87e:	bf00      	nop
 800c880:	e7fe      	b.n	800c880 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c882:	4b09      	ldr	r3, [pc, #36]	; (800c8a8 <prvSwitchTimerLists+0xc0>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d1b1      	bne.n	800c7f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c88c:	4b06      	ldr	r3, [pc, #24]	; (800c8a8 <prvSwitchTimerLists+0xc0>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c892:	4b06      	ldr	r3, [pc, #24]	; (800c8ac <prvSwitchTimerLists+0xc4>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4a04      	ldr	r2, [pc, #16]	; (800c8a8 <prvSwitchTimerLists+0xc0>)
 800c898:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c89a:	4a04      	ldr	r2, [pc, #16]	; (800c8ac <prvSwitchTimerLists+0xc4>)
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	6013      	str	r3, [r2, #0]
}
 800c8a0:	bf00      	nop
 800c8a2:	3718      	adds	r7, #24
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	20002318 	.word	0x20002318
 800c8ac:	2000231c 	.word	0x2000231c

0800c8b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c8b6:	f000 f965 	bl	800cb84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c8ba:	4b15      	ldr	r3, [pc, #84]	; (800c910 <prvCheckForValidListAndQueue+0x60>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d120      	bne.n	800c904 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c8c2:	4814      	ldr	r0, [pc, #80]	; (800c914 <prvCheckForValidListAndQueue+0x64>)
 800c8c4:	f7fd fc4c 	bl	800a160 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c8c8:	4813      	ldr	r0, [pc, #76]	; (800c918 <prvCheckForValidListAndQueue+0x68>)
 800c8ca:	f7fd fc49 	bl	800a160 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c8ce:	4b13      	ldr	r3, [pc, #76]	; (800c91c <prvCheckForValidListAndQueue+0x6c>)
 800c8d0:	4a10      	ldr	r2, [pc, #64]	; (800c914 <prvCheckForValidListAndQueue+0x64>)
 800c8d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c8d4:	4b12      	ldr	r3, [pc, #72]	; (800c920 <prvCheckForValidListAndQueue+0x70>)
 800c8d6:	4a10      	ldr	r2, [pc, #64]	; (800c918 <prvCheckForValidListAndQueue+0x68>)
 800c8d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c8da:	2300      	movs	r3, #0
 800c8dc:	9300      	str	r3, [sp, #0]
 800c8de:	4b11      	ldr	r3, [pc, #68]	; (800c924 <prvCheckForValidListAndQueue+0x74>)
 800c8e0:	4a11      	ldr	r2, [pc, #68]	; (800c928 <prvCheckForValidListAndQueue+0x78>)
 800c8e2:	2110      	movs	r1, #16
 800c8e4:	200a      	movs	r0, #10
 800c8e6:	f7fd fd57 	bl	800a398 <xQueueGenericCreateStatic>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	4a08      	ldr	r2, [pc, #32]	; (800c910 <prvCheckForValidListAndQueue+0x60>)
 800c8ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c8f0:	4b07      	ldr	r3, [pc, #28]	; (800c910 <prvCheckForValidListAndQueue+0x60>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d005      	beq.n	800c904 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c8f8:	4b05      	ldr	r3, [pc, #20]	; (800c910 <prvCheckForValidListAndQueue+0x60>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	490b      	ldr	r1, [pc, #44]	; (800c92c <prvCheckForValidListAndQueue+0x7c>)
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7fe fc12 	bl	800b128 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c904:	f000 f96e 	bl	800cbe4 <vPortExitCritical>
}
 800c908:	bf00      	nop
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	20002320 	.word	0x20002320
 800c914:	200022f0 	.word	0x200022f0
 800c918:	20002304 	.word	0x20002304
 800c91c:	20002318 	.word	0x20002318
 800c920:	2000231c 	.word	0x2000231c
 800c924:	200023cc 	.word	0x200023cc
 800c928:	2000232c 	.word	0x2000232c
 800c92c:	08011bf4 	.word	0x08011bf4

0800c930 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	3b04      	subs	r3, #4
 800c940:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c948:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	3b04      	subs	r3, #4
 800c94e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	f023 0201 	bic.w	r2, r3, #1
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	3b04      	subs	r3, #4
 800c95e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c960:	4a0c      	ldr	r2, [pc, #48]	; (800c994 <pxPortInitialiseStack+0x64>)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	3b14      	subs	r3, #20
 800c96a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	3b04      	subs	r3, #4
 800c976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f06f 0202 	mvn.w	r2, #2
 800c97e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	3b20      	subs	r3, #32
 800c984:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c986:	68fb      	ldr	r3, [r7, #12]
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3714      	adds	r7, #20
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr
 800c994:	0800c999 	.word	0x0800c999

0800c998 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c998:	b480      	push	{r7}
 800c99a:	b085      	sub	sp, #20
 800c99c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c9a2:	4b12      	ldr	r3, [pc, #72]	; (800c9ec <prvTaskExitError+0x54>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9aa:	d00a      	beq.n	800c9c2 <prvTaskExitError+0x2a>
	__asm volatile
 800c9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b0:	f383 8811 	msr	BASEPRI, r3
 800c9b4:	f3bf 8f6f 	isb	sy
 800c9b8:	f3bf 8f4f 	dsb	sy
 800c9bc:	60fb      	str	r3, [r7, #12]
}
 800c9be:	bf00      	nop
 800c9c0:	e7fe      	b.n	800c9c0 <prvTaskExitError+0x28>
	__asm volatile
 800c9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c6:	f383 8811 	msr	BASEPRI, r3
 800c9ca:	f3bf 8f6f 	isb	sy
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	60bb      	str	r3, [r7, #8]
}
 800c9d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c9d6:	bf00      	nop
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d0fc      	beq.n	800c9d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c9de:	bf00      	nop
 800c9e0:	bf00      	nop
 800c9e2:	3714      	adds	r7, #20
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr
 800c9ec:	20000088 	.word	0x20000088

0800c9f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c9f0:	4b07      	ldr	r3, [pc, #28]	; (800ca10 <pxCurrentTCBConst2>)
 800c9f2:	6819      	ldr	r1, [r3, #0]
 800c9f4:	6808      	ldr	r0, [r1, #0]
 800c9f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9fa:	f380 8809 	msr	PSP, r0
 800c9fe:	f3bf 8f6f 	isb	sy
 800ca02:	f04f 0000 	mov.w	r0, #0
 800ca06:	f380 8811 	msr	BASEPRI, r0
 800ca0a:	4770      	bx	lr
 800ca0c:	f3af 8000 	nop.w

0800ca10 <pxCurrentTCBConst2>:
 800ca10:	20001de8 	.word	0x20001de8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca14:	bf00      	nop
 800ca16:	bf00      	nop

0800ca18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ca18:	4808      	ldr	r0, [pc, #32]	; (800ca3c <prvPortStartFirstTask+0x24>)
 800ca1a:	6800      	ldr	r0, [r0, #0]
 800ca1c:	6800      	ldr	r0, [r0, #0]
 800ca1e:	f380 8808 	msr	MSP, r0
 800ca22:	f04f 0000 	mov.w	r0, #0
 800ca26:	f380 8814 	msr	CONTROL, r0
 800ca2a:	b662      	cpsie	i
 800ca2c:	b661      	cpsie	f
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	f3bf 8f6f 	isb	sy
 800ca36:	df00      	svc	0
 800ca38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ca3a:	bf00      	nop
 800ca3c:	e000ed08 	.word	0xe000ed08

0800ca40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b086      	sub	sp, #24
 800ca44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ca46:	4b46      	ldr	r3, [pc, #280]	; (800cb60 <xPortStartScheduler+0x120>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a46      	ldr	r2, [pc, #280]	; (800cb64 <xPortStartScheduler+0x124>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d10a      	bne.n	800ca66 <xPortStartScheduler+0x26>
	__asm volatile
 800ca50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	613b      	str	r3, [r7, #16]
}
 800ca62:	bf00      	nop
 800ca64:	e7fe      	b.n	800ca64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ca66:	4b3e      	ldr	r3, [pc, #248]	; (800cb60 <xPortStartScheduler+0x120>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a3f      	ldr	r2, [pc, #252]	; (800cb68 <xPortStartScheduler+0x128>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d10a      	bne.n	800ca86 <xPortStartScheduler+0x46>
	__asm volatile
 800ca70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca74:	f383 8811 	msr	BASEPRI, r3
 800ca78:	f3bf 8f6f 	isb	sy
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	60fb      	str	r3, [r7, #12]
}
 800ca82:	bf00      	nop
 800ca84:	e7fe      	b.n	800ca84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ca86:	4b39      	ldr	r3, [pc, #228]	; (800cb6c <xPortStartScheduler+0x12c>)
 800ca88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	22ff      	movs	r2, #255	; 0xff
 800ca96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800caa0:	78fb      	ldrb	r3, [r7, #3]
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800caa8:	b2da      	uxtb	r2, r3
 800caaa:	4b31      	ldr	r3, [pc, #196]	; (800cb70 <xPortStartScheduler+0x130>)
 800caac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800caae:	4b31      	ldr	r3, [pc, #196]	; (800cb74 <xPortStartScheduler+0x134>)
 800cab0:	2207      	movs	r2, #7
 800cab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cab4:	e009      	b.n	800caca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cab6:	4b2f      	ldr	r3, [pc, #188]	; (800cb74 <xPortStartScheduler+0x134>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	3b01      	subs	r3, #1
 800cabc:	4a2d      	ldr	r2, [pc, #180]	; (800cb74 <xPortStartScheduler+0x134>)
 800cabe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cac0:	78fb      	ldrb	r3, [r7, #3]
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	005b      	lsls	r3, r3, #1
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800caca:	78fb      	ldrb	r3, [r7, #3]
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cad2:	2b80      	cmp	r3, #128	; 0x80
 800cad4:	d0ef      	beq.n	800cab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cad6:	4b27      	ldr	r3, [pc, #156]	; (800cb74 <xPortStartScheduler+0x134>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f1c3 0307 	rsb	r3, r3, #7
 800cade:	2b04      	cmp	r3, #4
 800cae0:	d00a      	beq.n	800caf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae6:	f383 8811 	msr	BASEPRI, r3
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	60bb      	str	r3, [r7, #8]
}
 800caf4:	bf00      	nop
 800caf6:	e7fe      	b.n	800caf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800caf8:	4b1e      	ldr	r3, [pc, #120]	; (800cb74 <xPortStartScheduler+0x134>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	021b      	lsls	r3, r3, #8
 800cafe:	4a1d      	ldr	r2, [pc, #116]	; (800cb74 <xPortStartScheduler+0x134>)
 800cb00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb02:	4b1c      	ldr	r3, [pc, #112]	; (800cb74 <xPortStartScheduler+0x134>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cb0a:	4a1a      	ldr	r2, [pc, #104]	; (800cb74 <xPortStartScheduler+0x134>)
 800cb0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	b2da      	uxtb	r2, r3
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb16:	4b18      	ldr	r3, [pc, #96]	; (800cb78 <xPortStartScheduler+0x138>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4a17      	ldr	r2, [pc, #92]	; (800cb78 <xPortStartScheduler+0x138>)
 800cb1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cb20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb22:	4b15      	ldr	r3, [pc, #84]	; (800cb78 <xPortStartScheduler+0x138>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4a14      	ldr	r2, [pc, #80]	; (800cb78 <xPortStartScheduler+0x138>)
 800cb28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cb2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cb2e:	f000 f8dd 	bl	800ccec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cb32:	4b12      	ldr	r3, [pc, #72]	; (800cb7c <xPortStartScheduler+0x13c>)
 800cb34:	2200      	movs	r2, #0
 800cb36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cb38:	f000 f8fc 	bl	800cd34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cb3c:	4b10      	ldr	r3, [pc, #64]	; (800cb80 <xPortStartScheduler+0x140>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a0f      	ldr	r2, [pc, #60]	; (800cb80 <xPortStartScheduler+0x140>)
 800cb42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cb46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cb48:	f7ff ff66 	bl	800ca18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cb4c:	f7fe ff2e 	bl	800b9ac <vTaskSwitchContext>
	prvTaskExitError();
 800cb50:	f7ff ff22 	bl	800c998 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3718      	adds	r7, #24
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	e000ed00 	.word	0xe000ed00
 800cb64:	410fc271 	.word	0x410fc271
 800cb68:	410fc270 	.word	0x410fc270
 800cb6c:	e000e400 	.word	0xe000e400
 800cb70:	2000241c 	.word	0x2000241c
 800cb74:	20002420 	.word	0x20002420
 800cb78:	e000ed20 	.word	0xe000ed20
 800cb7c:	20000088 	.word	0x20000088
 800cb80:	e000ef34 	.word	0xe000ef34

0800cb84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
	__asm volatile
 800cb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8e:	f383 8811 	msr	BASEPRI, r3
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	f3bf 8f4f 	dsb	sy
 800cb9a:	607b      	str	r3, [r7, #4]
}
 800cb9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cb9e:	4b0f      	ldr	r3, [pc, #60]	; (800cbdc <vPortEnterCritical+0x58>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	3301      	adds	r3, #1
 800cba4:	4a0d      	ldr	r2, [pc, #52]	; (800cbdc <vPortEnterCritical+0x58>)
 800cba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cba8:	4b0c      	ldr	r3, [pc, #48]	; (800cbdc <vPortEnterCritical+0x58>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d10f      	bne.n	800cbd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cbb0:	4b0b      	ldr	r3, [pc, #44]	; (800cbe0 <vPortEnterCritical+0x5c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d00a      	beq.n	800cbd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbbe:	f383 8811 	msr	BASEPRI, r3
 800cbc2:	f3bf 8f6f 	isb	sy
 800cbc6:	f3bf 8f4f 	dsb	sy
 800cbca:	603b      	str	r3, [r7, #0]
}
 800cbcc:	bf00      	nop
 800cbce:	e7fe      	b.n	800cbce <vPortEnterCritical+0x4a>
	}
}
 800cbd0:	bf00      	nop
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr
 800cbdc:	20000088 	.word	0x20000088
 800cbe0:	e000ed04 	.word	0xe000ed04

0800cbe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cbea:	4b12      	ldr	r3, [pc, #72]	; (800cc34 <vPortExitCritical+0x50>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d10a      	bne.n	800cc08 <vPortExitCritical+0x24>
	__asm volatile
 800cbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf6:	f383 8811 	msr	BASEPRI, r3
 800cbfa:	f3bf 8f6f 	isb	sy
 800cbfe:	f3bf 8f4f 	dsb	sy
 800cc02:	607b      	str	r3, [r7, #4]
}
 800cc04:	bf00      	nop
 800cc06:	e7fe      	b.n	800cc06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cc08:	4b0a      	ldr	r3, [pc, #40]	; (800cc34 <vPortExitCritical+0x50>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	4a09      	ldr	r2, [pc, #36]	; (800cc34 <vPortExitCritical+0x50>)
 800cc10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc12:	4b08      	ldr	r3, [pc, #32]	; (800cc34 <vPortExitCritical+0x50>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d105      	bne.n	800cc26 <vPortExitCritical+0x42>
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	f383 8811 	msr	BASEPRI, r3
}
 800cc24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc26:	bf00      	nop
 800cc28:	370c      	adds	r7, #12
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
 800cc34:	20000088 	.word	0x20000088
	...

0800cc40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cc40:	f3ef 8009 	mrs	r0, PSP
 800cc44:	f3bf 8f6f 	isb	sy
 800cc48:	4b15      	ldr	r3, [pc, #84]	; (800cca0 <pxCurrentTCBConst>)
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	f01e 0f10 	tst.w	lr, #16
 800cc50:	bf08      	it	eq
 800cc52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cc56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5a:	6010      	str	r0, [r2, #0]
 800cc5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cc60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cc64:	f380 8811 	msr	BASEPRI, r0
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	f3bf 8f6f 	isb	sy
 800cc70:	f7fe fe9c 	bl	800b9ac <vTaskSwitchContext>
 800cc74:	f04f 0000 	mov.w	r0, #0
 800cc78:	f380 8811 	msr	BASEPRI, r0
 800cc7c:	bc09      	pop	{r0, r3}
 800cc7e:	6819      	ldr	r1, [r3, #0]
 800cc80:	6808      	ldr	r0, [r1, #0]
 800cc82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc86:	f01e 0f10 	tst.w	lr, #16
 800cc8a:	bf08      	it	eq
 800cc8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cc90:	f380 8809 	msr	PSP, r0
 800cc94:	f3bf 8f6f 	isb	sy
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	f3af 8000 	nop.w

0800cca0 <pxCurrentTCBConst>:
 800cca0:	20001de8 	.word	0x20001de8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cca4:	bf00      	nop
 800cca6:	bf00      	nop

0800cca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
	__asm volatile
 800ccae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb2:	f383 8811 	msr	BASEPRI, r3
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	607b      	str	r3, [r7, #4]
}
 800ccc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ccc2:	f7fe fdb9 	bl	800b838 <xTaskIncrementTick>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d003      	beq.n	800ccd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cccc:	4b06      	ldr	r3, [pc, #24]	; (800cce8 <xPortSysTickHandler+0x40>)
 800ccce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccd2:	601a      	str	r2, [r3, #0]
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	f383 8811 	msr	BASEPRI, r3
}
 800ccde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cce0:	bf00      	nop
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	e000ed04 	.word	0xe000ed04

0800ccec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ccec:	b480      	push	{r7}
 800ccee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ccf0:	4b0b      	ldr	r3, [pc, #44]	; (800cd20 <vPortSetupTimerInterrupt+0x34>)
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ccf6:	4b0b      	ldr	r3, [pc, #44]	; (800cd24 <vPortSetupTimerInterrupt+0x38>)
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ccfc:	4b0a      	ldr	r3, [pc, #40]	; (800cd28 <vPortSetupTimerInterrupt+0x3c>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a0a      	ldr	r2, [pc, #40]	; (800cd2c <vPortSetupTimerInterrupt+0x40>)
 800cd02:	fba2 2303 	umull	r2, r3, r2, r3
 800cd06:	099b      	lsrs	r3, r3, #6
 800cd08:	4a09      	ldr	r2, [pc, #36]	; (800cd30 <vPortSetupTimerInterrupt+0x44>)
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cd0e:	4b04      	ldr	r3, [pc, #16]	; (800cd20 <vPortSetupTimerInterrupt+0x34>)
 800cd10:	2207      	movs	r2, #7
 800cd12:	601a      	str	r2, [r3, #0]
}
 800cd14:	bf00      	nop
 800cd16:	46bd      	mov	sp, r7
 800cd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1c:	4770      	bx	lr
 800cd1e:	bf00      	nop
 800cd20:	e000e010 	.word	0xe000e010
 800cd24:	e000e018 	.word	0xe000e018
 800cd28:	20000000 	.word	0x20000000
 800cd2c:	10624dd3 	.word	0x10624dd3
 800cd30:	e000e014 	.word	0xe000e014

0800cd34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cd34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cd44 <vPortEnableVFP+0x10>
 800cd38:	6801      	ldr	r1, [r0, #0]
 800cd3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cd3e:	6001      	str	r1, [r0, #0]
 800cd40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cd42:	bf00      	nop
 800cd44:	e000ed88 	.word	0xe000ed88

0800cd48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cd48:	b480      	push	{r7}
 800cd4a:	b085      	sub	sp, #20
 800cd4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cd4e:	f3ef 8305 	mrs	r3, IPSR
 800cd52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2b0f      	cmp	r3, #15
 800cd58:	d914      	bls.n	800cd84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cd5a:	4a17      	ldr	r2, [pc, #92]	; (800cdb8 <vPortValidateInterruptPriority+0x70>)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	4413      	add	r3, r2
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cd64:	4b15      	ldr	r3, [pc, #84]	; (800cdbc <vPortValidateInterruptPriority+0x74>)
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	7afa      	ldrb	r2, [r7, #11]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d20a      	bcs.n	800cd84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd72:	f383 8811 	msr	BASEPRI, r3
 800cd76:	f3bf 8f6f 	isb	sy
 800cd7a:	f3bf 8f4f 	dsb	sy
 800cd7e:	607b      	str	r3, [r7, #4]
}
 800cd80:	bf00      	nop
 800cd82:	e7fe      	b.n	800cd82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cd84:	4b0e      	ldr	r3, [pc, #56]	; (800cdc0 <vPortValidateInterruptPriority+0x78>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cd8c:	4b0d      	ldr	r3, [pc, #52]	; (800cdc4 <vPortValidateInterruptPriority+0x7c>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d90a      	bls.n	800cdaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd98:	f383 8811 	msr	BASEPRI, r3
 800cd9c:	f3bf 8f6f 	isb	sy
 800cda0:	f3bf 8f4f 	dsb	sy
 800cda4:	603b      	str	r3, [r7, #0]
}
 800cda6:	bf00      	nop
 800cda8:	e7fe      	b.n	800cda8 <vPortValidateInterruptPriority+0x60>
	}
 800cdaa:	bf00      	nop
 800cdac:	3714      	adds	r7, #20
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop
 800cdb8:	e000e3f0 	.word	0xe000e3f0
 800cdbc:	2000241c 	.word	0x2000241c
 800cdc0:	e000ed0c 	.word	0xe000ed0c
 800cdc4:	20002420 	.word	0x20002420

0800cdc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b08a      	sub	sp, #40	; 0x28
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cdd4:	f7fe fc74 	bl	800b6c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cdd8:	4b5b      	ldr	r3, [pc, #364]	; (800cf48 <pvPortMalloc+0x180>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d101      	bne.n	800cde4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cde0:	f000 f920 	bl	800d024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cde4:	4b59      	ldr	r3, [pc, #356]	; (800cf4c <pvPortMalloc+0x184>)
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	4013      	ands	r3, r2
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	f040 8093 	bne.w	800cf18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d01d      	beq.n	800ce34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cdf8:	2208      	movs	r2, #8
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f003 0307 	and.w	r3, r3, #7
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d014      	beq.n	800ce34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f023 0307 	bic.w	r3, r3, #7
 800ce10:	3308      	adds	r3, #8
 800ce12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f003 0307 	and.w	r3, r3, #7
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00a      	beq.n	800ce34 <pvPortMalloc+0x6c>
	__asm volatile
 800ce1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	617b      	str	r3, [r7, #20]
}
 800ce30:	bf00      	nop
 800ce32:	e7fe      	b.n	800ce32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d06e      	beq.n	800cf18 <pvPortMalloc+0x150>
 800ce3a:	4b45      	ldr	r3, [pc, #276]	; (800cf50 <pvPortMalloc+0x188>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d869      	bhi.n	800cf18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ce44:	4b43      	ldr	r3, [pc, #268]	; (800cf54 <pvPortMalloc+0x18c>)
 800ce46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ce48:	4b42      	ldr	r3, [pc, #264]	; (800cf54 <pvPortMalloc+0x18c>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce4e:	e004      	b.n	800ce5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ce50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ce54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d903      	bls.n	800ce6c <pvPortMalloc+0xa4>
 800ce64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d1f1      	bne.n	800ce50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ce6c:	4b36      	ldr	r3, [pc, #216]	; (800cf48 <pvPortMalloc+0x180>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d050      	beq.n	800cf18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ce76:	6a3b      	ldr	r3, [r7, #32]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2208      	movs	r2, #8
 800ce7c:	4413      	add	r3, r2
 800ce7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ce80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	6a3b      	ldr	r3, [r7, #32]
 800ce86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ce88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8a:	685a      	ldr	r2, [r3, #4]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	1ad2      	subs	r2, r2, r3
 800ce90:	2308      	movs	r3, #8
 800ce92:	005b      	lsls	r3, r3, #1
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d91f      	bls.n	800ced8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ce98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	f003 0307 	and.w	r3, r3, #7
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00a      	beq.n	800cec0 <pvPortMalloc+0xf8>
	__asm volatile
 800ceaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceae:	f383 8811 	msr	BASEPRI, r3
 800ceb2:	f3bf 8f6f 	isb	sy
 800ceb6:	f3bf 8f4f 	dsb	sy
 800ceba:	613b      	str	r3, [r7, #16]
}
 800cebc:	bf00      	nop
 800cebe:	e7fe      	b.n	800cebe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec2:	685a      	ldr	r2, [r3, #4]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	1ad2      	subs	r2, r2, r3
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ced2:	69b8      	ldr	r0, [r7, #24]
 800ced4:	f000 f908 	bl	800d0e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ced8:	4b1d      	ldr	r3, [pc, #116]	; (800cf50 <pvPortMalloc+0x188>)
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	1ad3      	subs	r3, r2, r3
 800cee2:	4a1b      	ldr	r2, [pc, #108]	; (800cf50 <pvPortMalloc+0x188>)
 800cee4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cee6:	4b1a      	ldr	r3, [pc, #104]	; (800cf50 <pvPortMalloc+0x188>)
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	4b1b      	ldr	r3, [pc, #108]	; (800cf58 <pvPortMalloc+0x190>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d203      	bcs.n	800cefa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cef2:	4b17      	ldr	r3, [pc, #92]	; (800cf50 <pvPortMalloc+0x188>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4a18      	ldr	r2, [pc, #96]	; (800cf58 <pvPortMalloc+0x190>)
 800cef8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefc:	685a      	ldr	r2, [r3, #4]
 800cefe:	4b13      	ldr	r3, [pc, #76]	; (800cf4c <pvPortMalloc+0x184>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	431a      	orrs	r2, r3
 800cf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cf0e:	4b13      	ldr	r3, [pc, #76]	; (800cf5c <pvPortMalloc+0x194>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	3301      	adds	r3, #1
 800cf14:	4a11      	ldr	r2, [pc, #68]	; (800cf5c <pvPortMalloc+0x194>)
 800cf16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf18:	f7fe fbe0 	bl	800b6dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	f003 0307 	and.w	r3, r3, #7
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00a      	beq.n	800cf3c <pvPortMalloc+0x174>
	__asm volatile
 800cf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2a:	f383 8811 	msr	BASEPRI, r3
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	f3bf 8f4f 	dsb	sy
 800cf36:	60fb      	str	r3, [r7, #12]
}
 800cf38:	bf00      	nop
 800cf3a:	e7fe      	b.n	800cf3a <pvPortMalloc+0x172>
	return pvReturn;
 800cf3c:	69fb      	ldr	r3, [r7, #28]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3728      	adds	r7, #40	; 0x28
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	2000602c 	.word	0x2000602c
 800cf4c:	20006040 	.word	0x20006040
 800cf50:	20006030 	.word	0x20006030
 800cf54:	20006024 	.word	0x20006024
 800cf58:	20006034 	.word	0x20006034
 800cf5c:	20006038 	.word	0x20006038

0800cf60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b086      	sub	sp, #24
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d04d      	beq.n	800d00e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cf72:	2308      	movs	r3, #8
 800cf74:	425b      	negs	r3, r3
 800cf76:	697a      	ldr	r2, [r7, #20]
 800cf78:	4413      	add	r3, r2
 800cf7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	685a      	ldr	r2, [r3, #4]
 800cf84:	4b24      	ldr	r3, [pc, #144]	; (800d018 <vPortFree+0xb8>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4013      	ands	r3, r2
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d10a      	bne.n	800cfa4 <vPortFree+0x44>
	__asm volatile
 800cf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf92:	f383 8811 	msr	BASEPRI, r3
 800cf96:	f3bf 8f6f 	isb	sy
 800cf9a:	f3bf 8f4f 	dsb	sy
 800cf9e:	60fb      	str	r3, [r7, #12]
}
 800cfa0:	bf00      	nop
 800cfa2:	e7fe      	b.n	800cfa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d00a      	beq.n	800cfc2 <vPortFree+0x62>
	__asm volatile
 800cfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb0:	f383 8811 	msr	BASEPRI, r3
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	f3bf 8f4f 	dsb	sy
 800cfbc:	60bb      	str	r3, [r7, #8]
}
 800cfbe:	bf00      	nop
 800cfc0:	e7fe      	b.n	800cfc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	685a      	ldr	r2, [r3, #4]
 800cfc6:	4b14      	ldr	r3, [pc, #80]	; (800d018 <vPortFree+0xb8>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4013      	ands	r3, r2
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d01e      	beq.n	800d00e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d11a      	bne.n	800d00e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	685a      	ldr	r2, [r3, #4]
 800cfdc:	4b0e      	ldr	r3, [pc, #56]	; (800d018 <vPortFree+0xb8>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	43db      	mvns	r3, r3
 800cfe2:	401a      	ands	r2, r3
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cfe8:	f7fe fb6a 	bl	800b6c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	685a      	ldr	r2, [r3, #4]
 800cff0:	4b0a      	ldr	r3, [pc, #40]	; (800d01c <vPortFree+0xbc>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4413      	add	r3, r2
 800cff6:	4a09      	ldr	r2, [pc, #36]	; (800d01c <vPortFree+0xbc>)
 800cff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cffa:	6938      	ldr	r0, [r7, #16]
 800cffc:	f000 f874 	bl	800d0e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d000:	4b07      	ldr	r3, [pc, #28]	; (800d020 <vPortFree+0xc0>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	3301      	adds	r3, #1
 800d006:	4a06      	ldr	r2, [pc, #24]	; (800d020 <vPortFree+0xc0>)
 800d008:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d00a:	f7fe fb67 	bl	800b6dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d00e:	bf00      	nop
 800d010:	3718      	adds	r7, #24
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	20006040 	.word	0x20006040
 800d01c:	20006030 	.word	0x20006030
 800d020:	2000603c 	.word	0x2000603c

0800d024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d024:	b480      	push	{r7}
 800d026:	b085      	sub	sp, #20
 800d028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d02a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d02e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d030:	4b27      	ldr	r3, [pc, #156]	; (800d0d0 <prvHeapInit+0xac>)
 800d032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f003 0307 	and.w	r3, r3, #7
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00c      	beq.n	800d058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	3307      	adds	r3, #7
 800d042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f023 0307 	bic.w	r3, r3, #7
 800d04a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	1ad3      	subs	r3, r2, r3
 800d052:	4a1f      	ldr	r2, [pc, #124]	; (800d0d0 <prvHeapInit+0xac>)
 800d054:	4413      	add	r3, r2
 800d056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d05c:	4a1d      	ldr	r2, [pc, #116]	; (800d0d4 <prvHeapInit+0xb0>)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d062:	4b1c      	ldr	r3, [pc, #112]	; (800d0d4 <prvHeapInit+0xb0>)
 800d064:	2200      	movs	r2, #0
 800d066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	68ba      	ldr	r2, [r7, #8]
 800d06c:	4413      	add	r3, r2
 800d06e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d070:	2208      	movs	r2, #8
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	1a9b      	subs	r3, r3, r2
 800d076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f023 0307 	bic.w	r3, r3, #7
 800d07e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	4a15      	ldr	r2, [pc, #84]	; (800d0d8 <prvHeapInit+0xb4>)
 800d084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d086:	4b14      	ldr	r3, [pc, #80]	; (800d0d8 <prvHeapInit+0xb4>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2200      	movs	r2, #0
 800d08c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d08e:	4b12      	ldr	r3, [pc, #72]	; (800d0d8 <prvHeapInit+0xb4>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2200      	movs	r2, #0
 800d094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	68fa      	ldr	r2, [r7, #12]
 800d09e:	1ad2      	subs	r2, r2, r3
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d0a4:	4b0c      	ldr	r3, [pc, #48]	; (800d0d8 <prvHeapInit+0xb4>)
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	4a0a      	ldr	r2, [pc, #40]	; (800d0dc <prvHeapInit+0xb8>)
 800d0b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	4a09      	ldr	r2, [pc, #36]	; (800d0e0 <prvHeapInit+0xbc>)
 800d0ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d0bc:	4b09      	ldr	r3, [pc, #36]	; (800d0e4 <prvHeapInit+0xc0>)
 800d0be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d0c2:	601a      	str	r2, [r3, #0]
}
 800d0c4:	bf00      	nop
 800d0c6:	3714      	adds	r7, #20
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr
 800d0d0:	20002424 	.word	0x20002424
 800d0d4:	20006024 	.word	0x20006024
 800d0d8:	2000602c 	.word	0x2000602c
 800d0dc:	20006034 	.word	0x20006034
 800d0e0:	20006030 	.word	0x20006030
 800d0e4:	20006040 	.word	0x20006040

0800d0e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b085      	sub	sp, #20
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d0f0:	4b28      	ldr	r3, [pc, #160]	; (800d194 <prvInsertBlockIntoFreeList+0xac>)
 800d0f2:	60fb      	str	r3, [r7, #12]
 800d0f4:	e002      	b.n	800d0fc <prvInsertBlockIntoFreeList+0x14>
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	60fb      	str	r3, [r7, #12]
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	429a      	cmp	r2, r3
 800d104:	d8f7      	bhi.n	800d0f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	68ba      	ldr	r2, [r7, #8]
 800d110:	4413      	add	r3, r2
 800d112:	687a      	ldr	r2, [r7, #4]
 800d114:	429a      	cmp	r2, r3
 800d116:	d108      	bne.n	800d12a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	685a      	ldr	r2, [r3, #4]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	441a      	add	r2, r3
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	68ba      	ldr	r2, [r7, #8]
 800d134:	441a      	add	r2, r3
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d118      	bne.n	800d170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	4b15      	ldr	r3, [pc, #84]	; (800d198 <prvInsertBlockIntoFreeList+0xb0>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	429a      	cmp	r2, r3
 800d148:	d00d      	beq.n	800d166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	685a      	ldr	r2, [r3, #4]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	441a      	add	r2, r3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	601a      	str	r2, [r3, #0]
 800d164:	e008      	b.n	800d178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d166:	4b0c      	ldr	r3, [pc, #48]	; (800d198 <prvInsertBlockIntoFreeList+0xb0>)
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	601a      	str	r2, [r3, #0]
 800d16e:	e003      	b.n	800d178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d178:	68fa      	ldr	r2, [r7, #12]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d002      	beq.n	800d186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d186:	bf00      	nop
 800d188:	3714      	adds	r7, #20
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop
 800d194:	20006024 	.word	0x20006024
 800d198:	2000602c 	.word	0x2000602c

0800d19c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	4912      	ldr	r1, [pc, #72]	; (800d1ec <MX_USB_DEVICE_Init+0x50>)
 800d1a4:	4812      	ldr	r0, [pc, #72]	; (800d1f0 <MX_USB_DEVICE_Init+0x54>)
 800d1a6:	f7fb f96f 	bl	8008488 <USBD_Init>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d001      	beq.n	800d1b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d1b0:	f7f4 fcae 	bl	8001b10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800d1b4:	490f      	ldr	r1, [pc, #60]	; (800d1f4 <MX_USB_DEVICE_Init+0x58>)
 800d1b6:	480e      	ldr	r0, [pc, #56]	; (800d1f0 <MX_USB_DEVICE_Init+0x54>)
 800d1b8:	f7fb f996 	bl	80084e8 <USBD_RegisterClass>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d001      	beq.n	800d1c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d1c2:	f7f4 fca5 	bl	8001b10 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800d1c6:	490c      	ldr	r1, [pc, #48]	; (800d1f8 <MX_USB_DEVICE_Init+0x5c>)
 800d1c8:	4809      	ldr	r0, [pc, #36]	; (800d1f0 <MX_USB_DEVICE_Init+0x54>)
 800d1ca:	f7fb f943 	bl	8008454 <USBD_CUSTOM_HID_RegisterInterface>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d001      	beq.n	800d1d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d1d4:	f7f4 fc9c 	bl	8001b10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d1d8:	4805      	ldr	r0, [pc, #20]	; (800d1f0 <MX_USB_DEVICE_Init+0x54>)
 800d1da:	f7fb f9bb 	bl	8008554 <USBD_Start>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d001      	beq.n	800d1e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d1e4:	f7f4 fc94 	bl	8001b10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d1e8:	bf00      	nop
 800d1ea:	bd80      	pop	{r7, pc}
 800d1ec:	200000b8 	.word	0x200000b8
 800d1f0:	20006044 	.word	0x20006044
 800d1f4:	2000000c 	.word	0x2000000c
 800d1f8:	200000a8 	.word	0x200000a8

0800d1fc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d200:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d202:	4618      	mov	r0, r3
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr

0800d20c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800d20c:	b480      	push	{r7}
 800d20e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800d210:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d212:	4618      	mov	r0, r3
 800d214:	46bd      	mov	sp, r7
 800d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21a:	4770      	bx	lr

0800d21c <CUSTOM_HID_OutEvent_FS>:

extern uint8_t USB_RX_Buffer[65];

extern int USB_packet_enable;
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	4603      	mov	r3, r0
 800d224:	460a      	mov	r2, r1
 800d226:	71fb      	strb	r3, [r7, #7]
 800d228:	4613      	mov	r3, r2
 800d22a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
	  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d22c:	4b13      	ldr	r3, [pc, #76]	; (800d27c <CUSTOM_HID_OutEvent_FS+0x60>)
 800d22e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d232:	60bb      	str	r3, [r7, #8]

	  for (int i =  0; i < 65 ; i++)
 800d234:	2300      	movs	r3, #0
 800d236:	60fb      	str	r3, [r7, #12]
 800d238:	e00b      	b.n	800d252 <CUSTOM_HID_OutEvent_FS+0x36>
	  {
	    USB_RX_Buffer[i] = hhid->Report_buf[i]; // To read usb data from PC
 800d23a:	68ba      	ldr	r2, [r7, #8]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	4413      	add	r3, r2
 800d240:	7819      	ldrb	r1, [r3, #0]
 800d242:	4a0f      	ldr	r2, [pc, #60]	; (800d280 <CUSTOM_HID_OutEvent_FS+0x64>)
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	4413      	add	r3, r2
 800d248:	460a      	mov	r2, r1
 800d24a:	701a      	strb	r2, [r3, #0]
	  for (int i =  0; i < 65 ; i++)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	3301      	adds	r3, #1
 800d250:	60fb      	str	r3, [r7, #12]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2b40      	cmp	r3, #64	; 0x40
 800d256:	ddf0      	ble.n	800d23a <CUSTOM_HID_OutEvent_FS+0x1e>
	  }
	  USB_packet_enable=1;
 800d258:	4b0a      	ldr	r3, [pc, #40]	; (800d284 <CUSTOM_HID_OutEvent_FS+0x68>)
 800d25a:	2201      	movs	r2, #1
 800d25c:	601a      	str	r2, [r3, #0]
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800d25e:	4807      	ldr	r0, [pc, #28]	; (800d27c <CUSTOM_HID_OutEvent_FS+0x60>)
 800d260:	f7fb f896 	bl	8008390 <USBD_CUSTOM_HID_ReceivePacket>
 800d264:	4603      	mov	r3, r0
 800d266:	2b00      	cmp	r3, #0
 800d268:	d002      	beq.n	800d270 <CUSTOM_HID_OutEvent_FS+0x54>
  {
    return -1;
 800d26a:	f04f 33ff 	mov.w	r3, #4294967295
 800d26e:	e000      	b.n	800d272 <CUSTOM_HID_OutEvent_FS+0x56>
  }

  return (USBD_OK);
 800d270:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d272:	4618      	mov	r0, r3
 800d274:	3710      	adds	r7, #16
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	20006044 	.word	0x20006044
 800d280:	20001640 	.word	0x20001640
 800d284:	20001684 	.word	0x20001684

0800d288 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	4603      	mov	r3, r0
 800d290:	6039      	str	r1, [r7, #0]
 800d292:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	2212      	movs	r2, #18
 800d298:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d29a:	4b03      	ldr	r3, [pc, #12]	; (800d2a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	370c      	adds	r7, #12
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr
 800d2a8:	200000d4 	.word	0x200000d4

0800d2ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b083      	sub	sp, #12
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	6039      	str	r1, [r7, #0]
 800d2b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	2204      	movs	r2, #4
 800d2bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d2be:	4b03      	ldr	r3, [pc, #12]	; (800d2cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	370c      	adds	r7, #12
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr
 800d2cc:	200000e8 	.word	0x200000e8

0800d2d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	6039      	str	r1, [r7, #0]
 800d2da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d2dc:	79fb      	ldrb	r3, [r7, #7]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d105      	bne.n	800d2ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d2e2:	683a      	ldr	r2, [r7, #0]
 800d2e4:	4907      	ldr	r1, [pc, #28]	; (800d304 <USBD_FS_ProductStrDescriptor+0x34>)
 800d2e6:	4808      	ldr	r0, [pc, #32]	; (800d308 <USBD_FS_ProductStrDescriptor+0x38>)
 800d2e8:	f7fc fae0 	bl	80098ac <USBD_GetString>
 800d2ec:	e004      	b.n	800d2f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d2ee:	683a      	ldr	r2, [r7, #0]
 800d2f0:	4904      	ldr	r1, [pc, #16]	; (800d304 <USBD_FS_ProductStrDescriptor+0x34>)
 800d2f2:	4805      	ldr	r0, [pc, #20]	; (800d308 <USBD_FS_ProductStrDescriptor+0x38>)
 800d2f4:	f7fc fada 	bl	80098ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2f8:	4b02      	ldr	r3, [pc, #8]	; (800d304 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3708      	adds	r7, #8
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	20006320 	.word	0x20006320
 800d308:	08011bfc 	.word	0x08011bfc

0800d30c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	4603      	mov	r3, r0
 800d314:	6039      	str	r1, [r7, #0]
 800d316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d318:	683a      	ldr	r2, [r7, #0]
 800d31a:	4904      	ldr	r1, [pc, #16]	; (800d32c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d31c:	4804      	ldr	r0, [pc, #16]	; (800d330 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d31e:	f7fc fac5 	bl	80098ac <USBD_GetString>
  return USBD_StrDesc;
 800d322:	4b02      	ldr	r3, [pc, #8]	; (800d32c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d324:	4618      	mov	r0, r3
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}
 800d32c:	20006320 	.word	0x20006320
 800d330:	08011c1c 	.word	0x08011c1c

0800d334 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	4603      	mov	r3, r0
 800d33c:	6039      	str	r1, [r7, #0]
 800d33e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	221a      	movs	r2, #26
 800d344:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d346:	f000 f843 	bl	800d3d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d34a:	4b02      	ldr	r3, [pc, #8]	; (800d354 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	200000ec 	.word	0x200000ec

0800d358 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	4603      	mov	r3, r0
 800d360:	6039      	str	r1, [r7, #0]
 800d362:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d364:	79fb      	ldrb	r3, [r7, #7]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d105      	bne.n	800d376 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d36a:	683a      	ldr	r2, [r7, #0]
 800d36c:	4907      	ldr	r1, [pc, #28]	; (800d38c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d36e:	4808      	ldr	r0, [pc, #32]	; (800d390 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d370:	f7fc fa9c 	bl	80098ac <USBD_GetString>
 800d374:	e004      	b.n	800d380 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d376:	683a      	ldr	r2, [r7, #0]
 800d378:	4904      	ldr	r1, [pc, #16]	; (800d38c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d37a:	4805      	ldr	r0, [pc, #20]	; (800d390 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d37c:	f7fc fa96 	bl	80098ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800d380:	4b02      	ldr	r3, [pc, #8]	; (800d38c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d382:	4618      	mov	r0, r3
 800d384:	3708      	adds	r7, #8
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}
 800d38a:	bf00      	nop
 800d38c:	20006320 	.word	0x20006320
 800d390:	08011c30 	.word	0x08011c30

0800d394 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
 800d39a:	4603      	mov	r3, r0
 800d39c:	6039      	str	r1, [r7, #0]
 800d39e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d3a0:	79fb      	ldrb	r3, [r7, #7]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d105      	bne.n	800d3b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3a6:	683a      	ldr	r2, [r7, #0]
 800d3a8:	4907      	ldr	r1, [pc, #28]	; (800d3c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3aa:	4808      	ldr	r0, [pc, #32]	; (800d3cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3ac:	f7fc fa7e 	bl	80098ac <USBD_GetString>
 800d3b0:	e004      	b.n	800d3bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3b2:	683a      	ldr	r2, [r7, #0]
 800d3b4:	4904      	ldr	r1, [pc, #16]	; (800d3c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3b6:	4805      	ldr	r0, [pc, #20]	; (800d3cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3b8:	f7fc fa78 	bl	80098ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3bc:	4b02      	ldr	r3, [pc, #8]	; (800d3c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3708      	adds	r7, #8
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	20006320 	.word	0x20006320
 800d3cc:	08011c44 	.word	0x08011c44

0800d3d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d3d6:	4b0f      	ldr	r3, [pc, #60]	; (800d414 <Get_SerialNum+0x44>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d3dc:	4b0e      	ldr	r3, [pc, #56]	; (800d418 <Get_SerialNum+0x48>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d3e2:	4b0e      	ldr	r3, [pc, #56]	; (800d41c <Get_SerialNum+0x4c>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d3e8:	68fa      	ldr	r2, [r7, #12]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d009      	beq.n	800d40a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d3f6:	2208      	movs	r2, #8
 800d3f8:	4909      	ldr	r1, [pc, #36]	; (800d420 <Get_SerialNum+0x50>)
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	f000 f814 	bl	800d428 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d400:	2204      	movs	r2, #4
 800d402:	4908      	ldr	r1, [pc, #32]	; (800d424 <Get_SerialNum+0x54>)
 800d404:	68b8      	ldr	r0, [r7, #8]
 800d406:	f000 f80f 	bl	800d428 <IntToUnicode>
  }
}
 800d40a:	bf00      	nop
 800d40c:	3710      	adds	r7, #16
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	1fff7a10 	.word	0x1fff7a10
 800d418:	1fff7a14 	.word	0x1fff7a14
 800d41c:	1fff7a18 	.word	0x1fff7a18
 800d420:	200000ee 	.word	0x200000ee
 800d424:	200000fe 	.word	0x200000fe

0800d428 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d428:	b480      	push	{r7}
 800d42a:	b087      	sub	sp, #28
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	4613      	mov	r3, r2
 800d434:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d436:	2300      	movs	r3, #0
 800d438:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d43a:	2300      	movs	r3, #0
 800d43c:	75fb      	strb	r3, [r7, #23]
 800d43e:	e027      	b.n	800d490 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	0f1b      	lsrs	r3, r3, #28
 800d444:	2b09      	cmp	r3, #9
 800d446:	d80b      	bhi.n	800d460 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	0f1b      	lsrs	r3, r3, #28
 800d44c:	b2da      	uxtb	r2, r3
 800d44e:	7dfb      	ldrb	r3, [r7, #23]
 800d450:	005b      	lsls	r3, r3, #1
 800d452:	4619      	mov	r1, r3
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	440b      	add	r3, r1
 800d458:	3230      	adds	r2, #48	; 0x30
 800d45a:	b2d2      	uxtb	r2, r2
 800d45c:	701a      	strb	r2, [r3, #0]
 800d45e:	e00a      	b.n	800d476 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	0f1b      	lsrs	r3, r3, #28
 800d464:	b2da      	uxtb	r2, r3
 800d466:	7dfb      	ldrb	r3, [r7, #23]
 800d468:	005b      	lsls	r3, r3, #1
 800d46a:	4619      	mov	r1, r3
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	440b      	add	r3, r1
 800d470:	3237      	adds	r2, #55	; 0x37
 800d472:	b2d2      	uxtb	r2, r2
 800d474:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	011b      	lsls	r3, r3, #4
 800d47a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d47c:	7dfb      	ldrb	r3, [r7, #23]
 800d47e:	005b      	lsls	r3, r3, #1
 800d480:	3301      	adds	r3, #1
 800d482:	68ba      	ldr	r2, [r7, #8]
 800d484:	4413      	add	r3, r2
 800d486:	2200      	movs	r2, #0
 800d488:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d48a:	7dfb      	ldrb	r3, [r7, #23]
 800d48c:	3301      	adds	r3, #1
 800d48e:	75fb      	strb	r3, [r7, #23]
 800d490:	7dfa      	ldrb	r2, [r7, #23]
 800d492:	79fb      	ldrb	r3, [r7, #7]
 800d494:	429a      	cmp	r2, r3
 800d496:	d3d3      	bcc.n	800d440 <IntToUnicode+0x18>
  }
}
 800d498:	bf00      	nop
 800d49a:	bf00      	nop
 800d49c:	371c      	adds	r7, #28
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
	...

0800d4a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b08a      	sub	sp, #40	; 0x28
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4b0:	f107 0314 	add.w	r3, r7, #20
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	601a      	str	r2, [r3, #0]
 800d4b8:	605a      	str	r2, [r3, #4]
 800d4ba:	609a      	str	r2, [r3, #8]
 800d4bc:	60da      	str	r2, [r3, #12]
 800d4be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d4c8:	d13a      	bne.n	800d540 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	613b      	str	r3, [r7, #16]
 800d4ce:	4b1e      	ldr	r3, [pc, #120]	; (800d548 <HAL_PCD_MspInit+0xa0>)
 800d4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4d2:	4a1d      	ldr	r2, [pc, #116]	; (800d548 <HAL_PCD_MspInit+0xa0>)
 800d4d4:	f043 0301 	orr.w	r3, r3, #1
 800d4d8:	6313      	str	r3, [r2, #48]	; 0x30
 800d4da:	4b1b      	ldr	r3, [pc, #108]	; (800d548 <HAL_PCD_MspInit+0xa0>)
 800d4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4de:	f003 0301 	and.w	r3, r3, #1
 800d4e2:	613b      	str	r3, [r7, #16]
 800d4e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d4e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d4ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4ec:	2302      	movs	r3, #2
 800d4ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4f4:	2303      	movs	r3, #3
 800d4f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d4f8:	230a      	movs	r3, #10
 800d4fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4fc:	f107 0314 	add.w	r3, r7, #20
 800d500:	4619      	mov	r1, r3
 800d502:	4812      	ldr	r0, [pc, #72]	; (800d54c <HAL_PCD_MspInit+0xa4>)
 800d504:	f7f5 fae4 	bl	8002ad0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d508:	4b0f      	ldr	r3, [pc, #60]	; (800d548 <HAL_PCD_MspInit+0xa0>)
 800d50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d50c:	4a0e      	ldr	r2, [pc, #56]	; (800d548 <HAL_PCD_MspInit+0xa0>)
 800d50e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d512:	6353      	str	r3, [r2, #52]	; 0x34
 800d514:	2300      	movs	r3, #0
 800d516:	60fb      	str	r3, [r7, #12]
 800d518:	4b0b      	ldr	r3, [pc, #44]	; (800d548 <HAL_PCD_MspInit+0xa0>)
 800d51a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d51c:	4a0a      	ldr	r2, [pc, #40]	; (800d548 <HAL_PCD_MspInit+0xa0>)
 800d51e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d522:	6453      	str	r3, [r2, #68]	; 0x44
 800d524:	4b08      	ldr	r3, [pc, #32]	; (800d548 <HAL_PCD_MspInit+0xa0>)
 800d526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d52c:	60fb      	str	r3, [r7, #12]
 800d52e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d530:	2200      	movs	r2, #0
 800d532:	2105      	movs	r1, #5
 800d534:	2043      	movs	r0, #67	; 0x43
 800d536:	f7f4 ff31 	bl	800239c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d53a:	2043      	movs	r0, #67	; 0x43
 800d53c:	f7f4 ff4a 	bl	80023d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d540:	bf00      	nop
 800d542:	3728      	adds	r7, #40	; 0x28
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	40023800 	.word	0x40023800
 800d54c:	40020000 	.word	0x40020000

0800d550 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d564:	4619      	mov	r1, r3
 800d566:	4610      	mov	r0, r2
 800d568:	f7fb f841 	bl	80085ee <USBD_LL_SetupStage>
}
 800d56c:	bf00      	nop
 800d56e:	3708      	adds	r7, #8
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	460b      	mov	r3, r1
 800d57e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d586:	78fa      	ldrb	r2, [r7, #3]
 800d588:	6879      	ldr	r1, [r7, #4]
 800d58a:	4613      	mov	r3, r2
 800d58c:	00db      	lsls	r3, r3, #3
 800d58e:	4413      	add	r3, r2
 800d590:	009b      	lsls	r3, r3, #2
 800d592:	440b      	add	r3, r1
 800d594:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	78fb      	ldrb	r3, [r7, #3]
 800d59c:	4619      	mov	r1, r3
 800d59e:	f7fb f87b 	bl	8008698 <USBD_LL_DataOutStage>
}
 800d5a2:	bf00      	nop
 800d5a4:	3708      	adds	r7, #8
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b082      	sub	sp, #8
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d5bc:	78fa      	ldrb	r2, [r7, #3]
 800d5be:	6879      	ldr	r1, [r7, #4]
 800d5c0:	4613      	mov	r3, r2
 800d5c2:	00db      	lsls	r3, r3, #3
 800d5c4:	4413      	add	r3, r2
 800d5c6:	009b      	lsls	r3, r3, #2
 800d5c8:	440b      	add	r3, r1
 800d5ca:	334c      	adds	r3, #76	; 0x4c
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	78fb      	ldrb	r3, [r7, #3]
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	f7fb f914 	bl	80087fe <USBD_LL_DataInStage>
}
 800d5d6:	bf00      	nop
 800d5d8:	3708      	adds	r7, #8
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}

0800d5de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5de:	b580      	push	{r7, lr}
 800d5e0:	b082      	sub	sp, #8
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fb fa48 	bl	8008a82 <USBD_LL_SOF>
}
 800d5f2:	bf00      	nop
 800d5f4:	3708      	adds	r7, #8
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}

0800d5fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5fa:	b580      	push	{r7, lr}
 800d5fc:	b084      	sub	sp, #16
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d602:	2301      	movs	r3, #1
 800d604:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	68db      	ldr	r3, [r3, #12]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d102      	bne.n	800d614 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d60e:	2300      	movs	r3, #0
 800d610:	73fb      	strb	r3, [r7, #15]
 800d612:	e008      	b.n	800d626 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	68db      	ldr	r3, [r3, #12]
 800d618:	2b02      	cmp	r3, #2
 800d61a:	d102      	bne.n	800d622 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d61c:	2301      	movs	r3, #1
 800d61e:	73fb      	strb	r3, [r7, #15]
 800d620:	e001      	b.n	800d626 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d622:	f7f4 fa75 	bl	8001b10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d62c:	7bfa      	ldrb	r2, [r7, #15]
 800d62e:	4611      	mov	r1, r2
 800d630:	4618      	mov	r0, r3
 800d632:	f7fb f9e8 	bl	8008a06 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7fb f990 	bl	8008962 <USBD_LL_Reset>
}
 800d642:	bf00      	nop
 800d644:	3710      	adds	r7, #16
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
	...

0800d64c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fb f9e3 	bl	8008a26 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	687a      	ldr	r2, [r7, #4]
 800d66c:	6812      	ldr	r2, [r2, #0]
 800d66e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d672:	f043 0301 	orr.w	r3, r3, #1
 800d676:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6a1b      	ldr	r3, [r3, #32]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d005      	beq.n	800d68c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d680:	4b04      	ldr	r3, [pc, #16]	; (800d694 <HAL_PCD_SuspendCallback+0x48>)
 800d682:	691b      	ldr	r3, [r3, #16]
 800d684:	4a03      	ldr	r2, [pc, #12]	; (800d694 <HAL_PCD_SuspendCallback+0x48>)
 800d686:	f043 0306 	orr.w	r3, r3, #6
 800d68a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d68c:	bf00      	nop
 800d68e:	3708      	adds	r7, #8
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	e000ed00 	.word	0xe000ed00

0800d698 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7fb f9d3 	bl	8008a52 <USBD_LL_Resume>
}
 800d6ac:	bf00      	nop
 800d6ae:	3708      	adds	r7, #8
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b082      	sub	sp, #8
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	460b      	mov	r3, r1
 800d6be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d6c6:	78fa      	ldrb	r2, [r7, #3]
 800d6c8:	4611      	mov	r1, r2
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7fb fa2b 	bl	8008b26 <USBD_LL_IsoOUTIncomplete>
}
 800d6d0:	bf00      	nop
 800d6d2:	3708      	adds	r7, #8
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d6ea:	78fa      	ldrb	r2, [r7, #3]
 800d6ec:	4611      	mov	r1, r2
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7fb f9e7 	bl	8008ac2 <USBD_LL_IsoINIncomplete>
}
 800d6f4:	bf00      	nop
 800d6f6:	3708      	adds	r7, #8
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fb fa3d 	bl	8008b8a <USBD_LL_DevConnected>
}
 800d710:	bf00      	nop
 800d712:	3708      	adds	r7, #8
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d726:	4618      	mov	r0, r3
 800d728:	f7fb fa3a 	bl	8008ba0 <USBD_LL_DevDisconnected>
}
 800d72c:	bf00      	nop
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d13c      	bne.n	800d7be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d744:	4a20      	ldr	r2, [pc, #128]	; (800d7c8 <USBD_LL_Init+0x94>)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	4a1e      	ldr	r2, [pc, #120]	; (800d7c8 <USBD_LL_Init+0x94>)
 800d750:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d754:	4b1c      	ldr	r3, [pc, #112]	; (800d7c8 <USBD_LL_Init+0x94>)
 800d756:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d75a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d75c:	4b1a      	ldr	r3, [pc, #104]	; (800d7c8 <USBD_LL_Init+0x94>)
 800d75e:	2204      	movs	r2, #4
 800d760:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d762:	4b19      	ldr	r3, [pc, #100]	; (800d7c8 <USBD_LL_Init+0x94>)
 800d764:	2202      	movs	r2, #2
 800d766:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d768:	4b17      	ldr	r3, [pc, #92]	; (800d7c8 <USBD_LL_Init+0x94>)
 800d76a:	2200      	movs	r2, #0
 800d76c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d76e:	4b16      	ldr	r3, [pc, #88]	; (800d7c8 <USBD_LL_Init+0x94>)
 800d770:	2202      	movs	r2, #2
 800d772:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d774:	4b14      	ldr	r3, [pc, #80]	; (800d7c8 <USBD_LL_Init+0x94>)
 800d776:	2200      	movs	r2, #0
 800d778:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d77a:	4b13      	ldr	r3, [pc, #76]	; (800d7c8 <USBD_LL_Init+0x94>)
 800d77c:	2200      	movs	r2, #0
 800d77e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d780:	4b11      	ldr	r3, [pc, #68]	; (800d7c8 <USBD_LL_Init+0x94>)
 800d782:	2200      	movs	r2, #0
 800d784:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d786:	4b10      	ldr	r3, [pc, #64]	; (800d7c8 <USBD_LL_Init+0x94>)
 800d788:	2200      	movs	r2, #0
 800d78a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d78c:	4b0e      	ldr	r3, [pc, #56]	; (800d7c8 <USBD_LL_Init+0x94>)
 800d78e:	2200      	movs	r2, #0
 800d790:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d792:	480d      	ldr	r0, [pc, #52]	; (800d7c8 <USBD_LL_Init+0x94>)
 800d794:	f7f5 fb8f 	bl	8002eb6 <HAL_PCD_Init>
 800d798:	4603      	mov	r3, r0
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d001      	beq.n	800d7a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d79e:	f7f4 f9b7 	bl	8001b10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d7a2:	2180      	movs	r1, #128	; 0x80
 800d7a4:	4808      	ldr	r0, [pc, #32]	; (800d7c8 <USBD_LL_Init+0x94>)
 800d7a6:	f7f6 fdce 	bl	8004346 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d7aa:	2240      	movs	r2, #64	; 0x40
 800d7ac:	2100      	movs	r1, #0
 800d7ae:	4806      	ldr	r0, [pc, #24]	; (800d7c8 <USBD_LL_Init+0x94>)
 800d7b0:	f7f6 fd82 	bl	80042b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d7b4:	2280      	movs	r2, #128	; 0x80
 800d7b6:	2101      	movs	r1, #1
 800d7b8:	4803      	ldr	r0, [pc, #12]	; (800d7c8 <USBD_LL_Init+0x94>)
 800d7ba:	f7f6 fd7d 	bl	80042b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d7be:	2300      	movs	r3, #0
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3708      	adds	r7, #8
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	20006520 	.word	0x20006520

0800d7cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b084      	sub	sp, #16
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f7f5 fc84 	bl	80030f0 <HAL_PCD_Start>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7ec:	7bfb      	ldrb	r3, [r7, #15]
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f000 f930 	bl	800da54 <USBD_Get_USB_Status>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3710      	adds	r7, #16
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b084      	sub	sp, #16
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
 800d80a:	4608      	mov	r0, r1
 800d80c:	4611      	mov	r1, r2
 800d80e:	461a      	mov	r2, r3
 800d810:	4603      	mov	r3, r0
 800d812:	70fb      	strb	r3, [r7, #3]
 800d814:	460b      	mov	r3, r1
 800d816:	70bb      	strb	r3, [r7, #2]
 800d818:	4613      	mov	r3, r2
 800d81a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d81c:	2300      	movs	r3, #0
 800d81e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d820:	2300      	movs	r3, #0
 800d822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d82a:	78bb      	ldrb	r3, [r7, #2]
 800d82c:	883a      	ldrh	r2, [r7, #0]
 800d82e:	78f9      	ldrb	r1, [r7, #3]
 800d830:	f7f6 f955 	bl	8003ade <HAL_PCD_EP_Open>
 800d834:	4603      	mov	r3, r0
 800d836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d838:	7bfb      	ldrb	r3, [r7, #15]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f000 f90a 	bl	800da54 <USBD_Get_USB_Status>
 800d840:	4603      	mov	r3, r0
 800d842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d844:	7bbb      	ldrb	r3, [r7, #14]
}
 800d846:	4618      	mov	r0, r3
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}

0800d84e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d84e:	b580      	push	{r7, lr}
 800d850:	b084      	sub	sp, #16
 800d852:	af00      	add	r7, sp, #0
 800d854:	6078      	str	r0, [r7, #4]
 800d856:	460b      	mov	r3, r1
 800d858:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d85a:	2300      	movs	r3, #0
 800d85c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d85e:	2300      	movs	r3, #0
 800d860:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d868:	78fa      	ldrb	r2, [r7, #3]
 800d86a:	4611      	mov	r1, r2
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7f6 f99e 	bl	8003bae <HAL_PCD_EP_Close>
 800d872:	4603      	mov	r3, r0
 800d874:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d876:	7bfb      	ldrb	r3, [r7, #15]
 800d878:	4618      	mov	r0, r3
 800d87a:	f000 f8eb 	bl	800da54 <USBD_Get_USB_Status>
 800d87e:	4603      	mov	r3, r0
 800d880:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d882:	7bbb      	ldrb	r3, [r7, #14]
}
 800d884:	4618      	mov	r0, r3
 800d886:	3710      	adds	r7, #16
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	460b      	mov	r3, r1
 800d896:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d898:	2300      	movs	r3, #0
 800d89a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d89c:	2300      	movs	r3, #0
 800d89e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d8a6:	78fa      	ldrb	r2, [r7, #3]
 800d8a8:	4611      	mov	r1, r2
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7f6 fa5e 	bl	8003d6c <HAL_PCD_EP_SetStall>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8b4:	7bfb      	ldrb	r3, [r7, #15]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f000 f8cc 	bl	800da54 <USBD_Get_USB_Status>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3710      	adds	r7, #16
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8ca:	b580      	push	{r7, lr}
 800d8cc:	b084      	sub	sp, #16
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d8e4:	78fa      	ldrb	r2, [r7, #3]
 800d8e6:	4611      	mov	r1, r2
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7f6 faa3 	bl	8003e34 <HAL_PCD_EP_ClrStall>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8f2:	7bfb      	ldrb	r3, [r7, #15]
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f000 f8ad 	bl	800da54 <USBD_Get_USB_Status>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3710      	adds	r7, #16
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d908:	b480      	push	{r7}
 800d90a:	b085      	sub	sp, #20
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	460b      	mov	r3, r1
 800d912:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d91a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d91c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d920:	2b00      	cmp	r3, #0
 800d922:	da0b      	bge.n	800d93c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d924:	78fb      	ldrb	r3, [r7, #3]
 800d926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d92a:	68f9      	ldr	r1, [r7, #12]
 800d92c:	4613      	mov	r3, r2
 800d92e:	00db      	lsls	r3, r3, #3
 800d930:	4413      	add	r3, r2
 800d932:	009b      	lsls	r3, r3, #2
 800d934:	440b      	add	r3, r1
 800d936:	333e      	adds	r3, #62	; 0x3e
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	e00b      	b.n	800d954 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d93c:	78fb      	ldrb	r3, [r7, #3]
 800d93e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d942:	68f9      	ldr	r1, [r7, #12]
 800d944:	4613      	mov	r3, r2
 800d946:	00db      	lsls	r3, r3, #3
 800d948:	4413      	add	r3, r2
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	440b      	add	r3, r1
 800d94e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d952:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d954:	4618      	mov	r0, r3
 800d956:	3714      	adds	r7, #20
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr

0800d960 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	460b      	mov	r3, r1
 800d96a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d96c:	2300      	movs	r3, #0
 800d96e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d970:	2300      	movs	r3, #0
 800d972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d97a:	78fa      	ldrb	r2, [r7, #3]
 800d97c:	4611      	mov	r1, r2
 800d97e:	4618      	mov	r0, r3
 800d980:	f7f6 f888 	bl	8003a94 <HAL_PCD_SetAddress>
 800d984:	4603      	mov	r3, r0
 800d986:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d988:	7bfb      	ldrb	r3, [r7, #15]
 800d98a:	4618      	mov	r0, r3
 800d98c:	f000 f862 	bl	800da54 <USBD_Get_USB_Status>
 800d990:	4603      	mov	r3, r0
 800d992:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d994:	7bbb      	ldrb	r3, [r7, #14]
}
 800d996:	4618      	mov	r0, r3
 800d998:	3710      	adds	r7, #16
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}

0800d99e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b086      	sub	sp, #24
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	60f8      	str	r0, [r7, #12]
 800d9a6:	607a      	str	r2, [r7, #4]
 800d9a8:	603b      	str	r3, [r7, #0]
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d9bc:	7af9      	ldrb	r1, [r7, #11]
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	f7f6 f989 	bl	8003cd8 <HAL_PCD_EP_Transmit>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9ca:	7dfb      	ldrb	r3, [r7, #23]
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f000 f841 	bl	800da54 <USBD_Get_USB_Status>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d9d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3718      	adds	r7, #24
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b086      	sub	sp, #24
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	607a      	str	r2, [r7, #4]
 800d9ea:	603b      	str	r3, [r7, #0]
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d9fe:	7af9      	ldrb	r1, [r7, #11]
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	687a      	ldr	r2, [r7, #4]
 800da04:	f7f6 f91d 	bl	8003c42 <HAL_PCD_EP_Receive>
 800da08:	4603      	mov	r3, r0
 800da0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da0c:	7dfb      	ldrb	r3, [r7, #23]
 800da0e:	4618      	mov	r0, r3
 800da10:	f000 f820 	bl	800da54 <USBD_Get_USB_Status>
 800da14:	4603      	mov	r3, r0
 800da16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da18:	7dbb      	ldrb	r3, [r7, #22]
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3718      	adds	r7, #24
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
	...

0800da24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800da2c:	4b03      	ldr	r3, [pc, #12]	; (800da3c <USBD_static_malloc+0x18>)
}
 800da2e:	4618      	mov	r0, r3
 800da30:	370c      	adds	r7, #12
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	20006a2c 	.word	0x20006a2c

0800da40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]

}
 800da48:	bf00      	nop
 800da4a:	370c      	adds	r7, #12
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800da54:	b480      	push	{r7}
 800da56:	b085      	sub	sp, #20
 800da58:	af00      	add	r7, sp, #0
 800da5a:	4603      	mov	r3, r0
 800da5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da5e:	2300      	movs	r3, #0
 800da60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800da62:	79fb      	ldrb	r3, [r7, #7]
 800da64:	2b03      	cmp	r3, #3
 800da66:	d817      	bhi.n	800da98 <USBD_Get_USB_Status+0x44>
 800da68:	a201      	add	r2, pc, #4	; (adr r2, 800da70 <USBD_Get_USB_Status+0x1c>)
 800da6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da6e:	bf00      	nop
 800da70:	0800da81 	.word	0x0800da81
 800da74:	0800da87 	.word	0x0800da87
 800da78:	0800da8d 	.word	0x0800da8d
 800da7c:	0800da93 	.word	0x0800da93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800da80:	2300      	movs	r3, #0
 800da82:	73fb      	strb	r3, [r7, #15]
    break;
 800da84:	e00b      	b.n	800da9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800da86:	2303      	movs	r3, #3
 800da88:	73fb      	strb	r3, [r7, #15]
    break;
 800da8a:	e008      	b.n	800da9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800da8c:	2301      	movs	r3, #1
 800da8e:	73fb      	strb	r3, [r7, #15]
    break;
 800da90:	e005      	b.n	800da9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800da92:	2303      	movs	r3, #3
 800da94:	73fb      	strb	r3, [r7, #15]
    break;
 800da96:	e002      	b.n	800da9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800da98:	2303      	movs	r3, #3
 800da9a:	73fb      	strb	r3, [r7, #15]
    break;
 800da9c:	bf00      	nop
  }
  return usb_status;
 800da9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3714      	adds	r7, #20
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <__errno>:
 800daac:	4b01      	ldr	r3, [pc, #4]	; (800dab4 <__errno+0x8>)
 800daae:	6818      	ldr	r0, [r3, #0]
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop
 800dab4:	20000108 	.word	0x20000108

0800dab8 <__libc_init_array>:
 800dab8:	b570      	push	{r4, r5, r6, lr}
 800daba:	4d0d      	ldr	r5, [pc, #52]	; (800daf0 <__libc_init_array+0x38>)
 800dabc:	4c0d      	ldr	r4, [pc, #52]	; (800daf4 <__libc_init_array+0x3c>)
 800dabe:	1b64      	subs	r4, r4, r5
 800dac0:	10a4      	asrs	r4, r4, #2
 800dac2:	2600      	movs	r6, #0
 800dac4:	42a6      	cmp	r6, r4
 800dac6:	d109      	bne.n	800dadc <__libc_init_array+0x24>
 800dac8:	4d0b      	ldr	r5, [pc, #44]	; (800daf8 <__libc_init_array+0x40>)
 800daca:	4c0c      	ldr	r4, [pc, #48]	; (800dafc <__libc_init_array+0x44>)
 800dacc:	f004 f822 	bl	8011b14 <_init>
 800dad0:	1b64      	subs	r4, r4, r5
 800dad2:	10a4      	asrs	r4, r4, #2
 800dad4:	2600      	movs	r6, #0
 800dad6:	42a6      	cmp	r6, r4
 800dad8:	d105      	bne.n	800dae6 <__libc_init_array+0x2e>
 800dada:	bd70      	pop	{r4, r5, r6, pc}
 800dadc:	f855 3b04 	ldr.w	r3, [r5], #4
 800dae0:	4798      	blx	r3
 800dae2:	3601      	adds	r6, #1
 800dae4:	e7ee      	b.n	800dac4 <__libc_init_array+0xc>
 800dae6:	f855 3b04 	ldr.w	r3, [r5], #4
 800daea:	4798      	blx	r3
 800daec:	3601      	adds	r6, #1
 800daee:	e7f2      	b.n	800dad6 <__libc_init_array+0x1e>
 800daf0:	080121b0 	.word	0x080121b0
 800daf4:	080121b0 	.word	0x080121b0
 800daf8:	080121b0 	.word	0x080121b0
 800dafc:	080121b4 	.word	0x080121b4

0800db00 <memcpy>:
 800db00:	440a      	add	r2, r1
 800db02:	4291      	cmp	r1, r2
 800db04:	f100 33ff 	add.w	r3, r0, #4294967295
 800db08:	d100      	bne.n	800db0c <memcpy+0xc>
 800db0a:	4770      	bx	lr
 800db0c:	b510      	push	{r4, lr}
 800db0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db16:	4291      	cmp	r1, r2
 800db18:	d1f9      	bne.n	800db0e <memcpy+0xe>
 800db1a:	bd10      	pop	{r4, pc}

0800db1c <memset>:
 800db1c:	4402      	add	r2, r0
 800db1e:	4603      	mov	r3, r0
 800db20:	4293      	cmp	r3, r2
 800db22:	d100      	bne.n	800db26 <memset+0xa>
 800db24:	4770      	bx	lr
 800db26:	f803 1b01 	strb.w	r1, [r3], #1
 800db2a:	e7f9      	b.n	800db20 <memset+0x4>

0800db2c <__cvt>:
 800db2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db30:	ec55 4b10 	vmov	r4, r5, d0
 800db34:	2d00      	cmp	r5, #0
 800db36:	460e      	mov	r6, r1
 800db38:	4619      	mov	r1, r3
 800db3a:	462b      	mov	r3, r5
 800db3c:	bfbb      	ittet	lt
 800db3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800db42:	461d      	movlt	r5, r3
 800db44:	2300      	movge	r3, #0
 800db46:	232d      	movlt	r3, #45	; 0x2d
 800db48:	700b      	strb	r3, [r1, #0]
 800db4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800db50:	4691      	mov	r9, r2
 800db52:	f023 0820 	bic.w	r8, r3, #32
 800db56:	bfbc      	itt	lt
 800db58:	4622      	movlt	r2, r4
 800db5a:	4614      	movlt	r4, r2
 800db5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800db60:	d005      	beq.n	800db6e <__cvt+0x42>
 800db62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800db66:	d100      	bne.n	800db6a <__cvt+0x3e>
 800db68:	3601      	adds	r6, #1
 800db6a:	2102      	movs	r1, #2
 800db6c:	e000      	b.n	800db70 <__cvt+0x44>
 800db6e:	2103      	movs	r1, #3
 800db70:	ab03      	add	r3, sp, #12
 800db72:	9301      	str	r3, [sp, #4]
 800db74:	ab02      	add	r3, sp, #8
 800db76:	9300      	str	r3, [sp, #0]
 800db78:	ec45 4b10 	vmov	d0, r4, r5
 800db7c:	4653      	mov	r3, sl
 800db7e:	4632      	mov	r2, r6
 800db80:	f000 fd1e 	bl	800e5c0 <_dtoa_r>
 800db84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800db88:	4607      	mov	r7, r0
 800db8a:	d102      	bne.n	800db92 <__cvt+0x66>
 800db8c:	f019 0f01 	tst.w	r9, #1
 800db90:	d022      	beq.n	800dbd8 <__cvt+0xac>
 800db92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800db96:	eb07 0906 	add.w	r9, r7, r6
 800db9a:	d110      	bne.n	800dbbe <__cvt+0x92>
 800db9c:	783b      	ldrb	r3, [r7, #0]
 800db9e:	2b30      	cmp	r3, #48	; 0x30
 800dba0:	d10a      	bne.n	800dbb8 <__cvt+0x8c>
 800dba2:	2200      	movs	r2, #0
 800dba4:	2300      	movs	r3, #0
 800dba6:	4620      	mov	r0, r4
 800dba8:	4629      	mov	r1, r5
 800dbaa:	f7f2 ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800dbae:	b918      	cbnz	r0, 800dbb8 <__cvt+0x8c>
 800dbb0:	f1c6 0601 	rsb	r6, r6, #1
 800dbb4:	f8ca 6000 	str.w	r6, [sl]
 800dbb8:	f8da 3000 	ldr.w	r3, [sl]
 800dbbc:	4499      	add	r9, r3
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	4629      	mov	r1, r5
 800dbc6:	f7f2 ff7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800dbca:	b108      	cbz	r0, 800dbd0 <__cvt+0xa4>
 800dbcc:	f8cd 900c 	str.w	r9, [sp, #12]
 800dbd0:	2230      	movs	r2, #48	; 0x30
 800dbd2:	9b03      	ldr	r3, [sp, #12]
 800dbd4:	454b      	cmp	r3, r9
 800dbd6:	d307      	bcc.n	800dbe8 <__cvt+0xbc>
 800dbd8:	9b03      	ldr	r3, [sp, #12]
 800dbda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbdc:	1bdb      	subs	r3, r3, r7
 800dbde:	4638      	mov	r0, r7
 800dbe0:	6013      	str	r3, [r2, #0]
 800dbe2:	b004      	add	sp, #16
 800dbe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbe8:	1c59      	adds	r1, r3, #1
 800dbea:	9103      	str	r1, [sp, #12]
 800dbec:	701a      	strb	r2, [r3, #0]
 800dbee:	e7f0      	b.n	800dbd2 <__cvt+0xa6>

0800dbf0 <__exponent>:
 800dbf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2900      	cmp	r1, #0
 800dbf6:	bfb8      	it	lt
 800dbf8:	4249      	neglt	r1, r1
 800dbfa:	f803 2b02 	strb.w	r2, [r3], #2
 800dbfe:	bfb4      	ite	lt
 800dc00:	222d      	movlt	r2, #45	; 0x2d
 800dc02:	222b      	movge	r2, #43	; 0x2b
 800dc04:	2909      	cmp	r1, #9
 800dc06:	7042      	strb	r2, [r0, #1]
 800dc08:	dd2a      	ble.n	800dc60 <__exponent+0x70>
 800dc0a:	f10d 0407 	add.w	r4, sp, #7
 800dc0e:	46a4      	mov	ip, r4
 800dc10:	270a      	movs	r7, #10
 800dc12:	46a6      	mov	lr, r4
 800dc14:	460a      	mov	r2, r1
 800dc16:	fb91 f6f7 	sdiv	r6, r1, r7
 800dc1a:	fb07 1516 	mls	r5, r7, r6, r1
 800dc1e:	3530      	adds	r5, #48	; 0x30
 800dc20:	2a63      	cmp	r2, #99	; 0x63
 800dc22:	f104 34ff 	add.w	r4, r4, #4294967295
 800dc26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800dc2a:	4631      	mov	r1, r6
 800dc2c:	dcf1      	bgt.n	800dc12 <__exponent+0x22>
 800dc2e:	3130      	adds	r1, #48	; 0x30
 800dc30:	f1ae 0502 	sub.w	r5, lr, #2
 800dc34:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dc38:	1c44      	adds	r4, r0, #1
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	4561      	cmp	r1, ip
 800dc3e:	d30a      	bcc.n	800dc56 <__exponent+0x66>
 800dc40:	f10d 0209 	add.w	r2, sp, #9
 800dc44:	eba2 020e 	sub.w	r2, r2, lr
 800dc48:	4565      	cmp	r5, ip
 800dc4a:	bf88      	it	hi
 800dc4c:	2200      	movhi	r2, #0
 800dc4e:	4413      	add	r3, r2
 800dc50:	1a18      	subs	r0, r3, r0
 800dc52:	b003      	add	sp, #12
 800dc54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dc5e:	e7ed      	b.n	800dc3c <__exponent+0x4c>
 800dc60:	2330      	movs	r3, #48	; 0x30
 800dc62:	3130      	adds	r1, #48	; 0x30
 800dc64:	7083      	strb	r3, [r0, #2]
 800dc66:	70c1      	strb	r1, [r0, #3]
 800dc68:	1d03      	adds	r3, r0, #4
 800dc6a:	e7f1      	b.n	800dc50 <__exponent+0x60>

0800dc6c <_printf_float>:
 800dc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc70:	ed2d 8b02 	vpush	{d8}
 800dc74:	b08d      	sub	sp, #52	; 0x34
 800dc76:	460c      	mov	r4, r1
 800dc78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dc7c:	4616      	mov	r6, r2
 800dc7e:	461f      	mov	r7, r3
 800dc80:	4605      	mov	r5, r0
 800dc82:	f001 fa8b 	bl	800f19c <_localeconv_r>
 800dc86:	f8d0 a000 	ldr.w	sl, [r0]
 800dc8a:	4650      	mov	r0, sl
 800dc8c:	f7f2 faa0 	bl	80001d0 <strlen>
 800dc90:	2300      	movs	r3, #0
 800dc92:	930a      	str	r3, [sp, #40]	; 0x28
 800dc94:	6823      	ldr	r3, [r4, #0]
 800dc96:	9305      	str	r3, [sp, #20]
 800dc98:	f8d8 3000 	ldr.w	r3, [r8]
 800dc9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dca0:	3307      	adds	r3, #7
 800dca2:	f023 0307 	bic.w	r3, r3, #7
 800dca6:	f103 0208 	add.w	r2, r3, #8
 800dcaa:	f8c8 2000 	str.w	r2, [r8]
 800dcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dcb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dcba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dcbe:	9307      	str	r3, [sp, #28]
 800dcc0:	f8cd 8018 	str.w	r8, [sp, #24]
 800dcc4:	ee08 0a10 	vmov	s16, r0
 800dcc8:	4b9f      	ldr	r3, [pc, #636]	; (800df48 <_printf_float+0x2dc>)
 800dcca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dcce:	f04f 32ff 	mov.w	r2, #4294967295
 800dcd2:	f7f2 ff2b 	bl	8000b2c <__aeabi_dcmpun>
 800dcd6:	bb88      	cbnz	r0, 800dd3c <_printf_float+0xd0>
 800dcd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dcdc:	4b9a      	ldr	r3, [pc, #616]	; (800df48 <_printf_float+0x2dc>)
 800dcde:	f04f 32ff 	mov.w	r2, #4294967295
 800dce2:	f7f2 ff05 	bl	8000af0 <__aeabi_dcmple>
 800dce6:	bb48      	cbnz	r0, 800dd3c <_printf_float+0xd0>
 800dce8:	2200      	movs	r2, #0
 800dcea:	2300      	movs	r3, #0
 800dcec:	4640      	mov	r0, r8
 800dcee:	4649      	mov	r1, r9
 800dcf0:	f7f2 fef4 	bl	8000adc <__aeabi_dcmplt>
 800dcf4:	b110      	cbz	r0, 800dcfc <_printf_float+0x90>
 800dcf6:	232d      	movs	r3, #45	; 0x2d
 800dcf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcfc:	4b93      	ldr	r3, [pc, #588]	; (800df4c <_printf_float+0x2e0>)
 800dcfe:	4894      	ldr	r0, [pc, #592]	; (800df50 <_printf_float+0x2e4>)
 800dd00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dd04:	bf94      	ite	ls
 800dd06:	4698      	movls	r8, r3
 800dd08:	4680      	movhi	r8, r0
 800dd0a:	2303      	movs	r3, #3
 800dd0c:	6123      	str	r3, [r4, #16]
 800dd0e:	9b05      	ldr	r3, [sp, #20]
 800dd10:	f023 0204 	bic.w	r2, r3, #4
 800dd14:	6022      	str	r2, [r4, #0]
 800dd16:	f04f 0900 	mov.w	r9, #0
 800dd1a:	9700      	str	r7, [sp, #0]
 800dd1c:	4633      	mov	r3, r6
 800dd1e:	aa0b      	add	r2, sp, #44	; 0x2c
 800dd20:	4621      	mov	r1, r4
 800dd22:	4628      	mov	r0, r5
 800dd24:	f000 f9d8 	bl	800e0d8 <_printf_common>
 800dd28:	3001      	adds	r0, #1
 800dd2a:	f040 8090 	bne.w	800de4e <_printf_float+0x1e2>
 800dd2e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd32:	b00d      	add	sp, #52	; 0x34
 800dd34:	ecbd 8b02 	vpop	{d8}
 800dd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd3c:	4642      	mov	r2, r8
 800dd3e:	464b      	mov	r3, r9
 800dd40:	4640      	mov	r0, r8
 800dd42:	4649      	mov	r1, r9
 800dd44:	f7f2 fef2 	bl	8000b2c <__aeabi_dcmpun>
 800dd48:	b140      	cbz	r0, 800dd5c <_printf_float+0xf0>
 800dd4a:	464b      	mov	r3, r9
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	bfbc      	itt	lt
 800dd50:	232d      	movlt	r3, #45	; 0x2d
 800dd52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dd56:	487f      	ldr	r0, [pc, #508]	; (800df54 <_printf_float+0x2e8>)
 800dd58:	4b7f      	ldr	r3, [pc, #508]	; (800df58 <_printf_float+0x2ec>)
 800dd5a:	e7d1      	b.n	800dd00 <_printf_float+0x94>
 800dd5c:	6863      	ldr	r3, [r4, #4]
 800dd5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dd62:	9206      	str	r2, [sp, #24]
 800dd64:	1c5a      	adds	r2, r3, #1
 800dd66:	d13f      	bne.n	800dde8 <_printf_float+0x17c>
 800dd68:	2306      	movs	r3, #6
 800dd6a:	6063      	str	r3, [r4, #4]
 800dd6c:	9b05      	ldr	r3, [sp, #20]
 800dd6e:	6861      	ldr	r1, [r4, #4]
 800dd70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dd74:	2300      	movs	r3, #0
 800dd76:	9303      	str	r3, [sp, #12]
 800dd78:	ab0a      	add	r3, sp, #40	; 0x28
 800dd7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dd7e:	ab09      	add	r3, sp, #36	; 0x24
 800dd80:	ec49 8b10 	vmov	d0, r8, r9
 800dd84:	9300      	str	r3, [sp, #0]
 800dd86:	6022      	str	r2, [r4, #0]
 800dd88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dd8c:	4628      	mov	r0, r5
 800dd8e:	f7ff fecd 	bl	800db2c <__cvt>
 800dd92:	9b06      	ldr	r3, [sp, #24]
 800dd94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd96:	2b47      	cmp	r3, #71	; 0x47
 800dd98:	4680      	mov	r8, r0
 800dd9a:	d108      	bne.n	800ddae <_printf_float+0x142>
 800dd9c:	1cc8      	adds	r0, r1, #3
 800dd9e:	db02      	blt.n	800dda6 <_printf_float+0x13a>
 800dda0:	6863      	ldr	r3, [r4, #4]
 800dda2:	4299      	cmp	r1, r3
 800dda4:	dd41      	ble.n	800de2a <_printf_float+0x1be>
 800dda6:	f1ab 0b02 	sub.w	fp, fp, #2
 800ddaa:	fa5f fb8b 	uxtb.w	fp, fp
 800ddae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ddb2:	d820      	bhi.n	800ddf6 <_printf_float+0x18a>
 800ddb4:	3901      	subs	r1, #1
 800ddb6:	465a      	mov	r2, fp
 800ddb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ddbc:	9109      	str	r1, [sp, #36]	; 0x24
 800ddbe:	f7ff ff17 	bl	800dbf0 <__exponent>
 800ddc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ddc4:	1813      	adds	r3, r2, r0
 800ddc6:	2a01      	cmp	r2, #1
 800ddc8:	4681      	mov	r9, r0
 800ddca:	6123      	str	r3, [r4, #16]
 800ddcc:	dc02      	bgt.n	800ddd4 <_printf_float+0x168>
 800ddce:	6822      	ldr	r2, [r4, #0]
 800ddd0:	07d2      	lsls	r2, r2, #31
 800ddd2:	d501      	bpl.n	800ddd8 <_printf_float+0x16c>
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	6123      	str	r3, [r4, #16]
 800ddd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d09c      	beq.n	800dd1a <_printf_float+0xae>
 800dde0:	232d      	movs	r3, #45	; 0x2d
 800dde2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dde6:	e798      	b.n	800dd1a <_printf_float+0xae>
 800dde8:	9a06      	ldr	r2, [sp, #24]
 800ddea:	2a47      	cmp	r2, #71	; 0x47
 800ddec:	d1be      	bne.n	800dd6c <_printf_float+0x100>
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d1bc      	bne.n	800dd6c <_printf_float+0x100>
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e7b9      	b.n	800dd6a <_printf_float+0xfe>
 800ddf6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ddfa:	d118      	bne.n	800de2e <_printf_float+0x1c2>
 800ddfc:	2900      	cmp	r1, #0
 800ddfe:	6863      	ldr	r3, [r4, #4]
 800de00:	dd0b      	ble.n	800de1a <_printf_float+0x1ae>
 800de02:	6121      	str	r1, [r4, #16]
 800de04:	b913      	cbnz	r3, 800de0c <_printf_float+0x1a0>
 800de06:	6822      	ldr	r2, [r4, #0]
 800de08:	07d0      	lsls	r0, r2, #31
 800de0a:	d502      	bpl.n	800de12 <_printf_float+0x1a6>
 800de0c:	3301      	adds	r3, #1
 800de0e:	440b      	add	r3, r1
 800de10:	6123      	str	r3, [r4, #16]
 800de12:	65a1      	str	r1, [r4, #88]	; 0x58
 800de14:	f04f 0900 	mov.w	r9, #0
 800de18:	e7de      	b.n	800ddd8 <_printf_float+0x16c>
 800de1a:	b913      	cbnz	r3, 800de22 <_printf_float+0x1b6>
 800de1c:	6822      	ldr	r2, [r4, #0]
 800de1e:	07d2      	lsls	r2, r2, #31
 800de20:	d501      	bpl.n	800de26 <_printf_float+0x1ba>
 800de22:	3302      	adds	r3, #2
 800de24:	e7f4      	b.n	800de10 <_printf_float+0x1a4>
 800de26:	2301      	movs	r3, #1
 800de28:	e7f2      	b.n	800de10 <_printf_float+0x1a4>
 800de2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800de2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de30:	4299      	cmp	r1, r3
 800de32:	db05      	blt.n	800de40 <_printf_float+0x1d4>
 800de34:	6823      	ldr	r3, [r4, #0]
 800de36:	6121      	str	r1, [r4, #16]
 800de38:	07d8      	lsls	r0, r3, #31
 800de3a:	d5ea      	bpl.n	800de12 <_printf_float+0x1a6>
 800de3c:	1c4b      	adds	r3, r1, #1
 800de3e:	e7e7      	b.n	800de10 <_printf_float+0x1a4>
 800de40:	2900      	cmp	r1, #0
 800de42:	bfd4      	ite	le
 800de44:	f1c1 0202 	rsble	r2, r1, #2
 800de48:	2201      	movgt	r2, #1
 800de4a:	4413      	add	r3, r2
 800de4c:	e7e0      	b.n	800de10 <_printf_float+0x1a4>
 800de4e:	6823      	ldr	r3, [r4, #0]
 800de50:	055a      	lsls	r2, r3, #21
 800de52:	d407      	bmi.n	800de64 <_printf_float+0x1f8>
 800de54:	6923      	ldr	r3, [r4, #16]
 800de56:	4642      	mov	r2, r8
 800de58:	4631      	mov	r1, r6
 800de5a:	4628      	mov	r0, r5
 800de5c:	47b8      	blx	r7
 800de5e:	3001      	adds	r0, #1
 800de60:	d12c      	bne.n	800debc <_printf_float+0x250>
 800de62:	e764      	b.n	800dd2e <_printf_float+0xc2>
 800de64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800de68:	f240 80e0 	bls.w	800e02c <_printf_float+0x3c0>
 800de6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800de70:	2200      	movs	r2, #0
 800de72:	2300      	movs	r3, #0
 800de74:	f7f2 fe28 	bl	8000ac8 <__aeabi_dcmpeq>
 800de78:	2800      	cmp	r0, #0
 800de7a:	d034      	beq.n	800dee6 <_printf_float+0x27a>
 800de7c:	4a37      	ldr	r2, [pc, #220]	; (800df5c <_printf_float+0x2f0>)
 800de7e:	2301      	movs	r3, #1
 800de80:	4631      	mov	r1, r6
 800de82:	4628      	mov	r0, r5
 800de84:	47b8      	blx	r7
 800de86:	3001      	adds	r0, #1
 800de88:	f43f af51 	beq.w	800dd2e <_printf_float+0xc2>
 800de8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de90:	429a      	cmp	r2, r3
 800de92:	db02      	blt.n	800de9a <_printf_float+0x22e>
 800de94:	6823      	ldr	r3, [r4, #0]
 800de96:	07d8      	lsls	r0, r3, #31
 800de98:	d510      	bpl.n	800debc <_printf_float+0x250>
 800de9a:	ee18 3a10 	vmov	r3, s16
 800de9e:	4652      	mov	r2, sl
 800dea0:	4631      	mov	r1, r6
 800dea2:	4628      	mov	r0, r5
 800dea4:	47b8      	blx	r7
 800dea6:	3001      	adds	r0, #1
 800dea8:	f43f af41 	beq.w	800dd2e <_printf_float+0xc2>
 800deac:	f04f 0800 	mov.w	r8, #0
 800deb0:	f104 091a 	add.w	r9, r4, #26
 800deb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deb6:	3b01      	subs	r3, #1
 800deb8:	4543      	cmp	r3, r8
 800deba:	dc09      	bgt.n	800ded0 <_printf_float+0x264>
 800debc:	6823      	ldr	r3, [r4, #0]
 800debe:	079b      	lsls	r3, r3, #30
 800dec0:	f100 8105 	bmi.w	800e0ce <_printf_float+0x462>
 800dec4:	68e0      	ldr	r0, [r4, #12]
 800dec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dec8:	4298      	cmp	r0, r3
 800deca:	bfb8      	it	lt
 800decc:	4618      	movlt	r0, r3
 800dece:	e730      	b.n	800dd32 <_printf_float+0xc6>
 800ded0:	2301      	movs	r3, #1
 800ded2:	464a      	mov	r2, r9
 800ded4:	4631      	mov	r1, r6
 800ded6:	4628      	mov	r0, r5
 800ded8:	47b8      	blx	r7
 800deda:	3001      	adds	r0, #1
 800dedc:	f43f af27 	beq.w	800dd2e <_printf_float+0xc2>
 800dee0:	f108 0801 	add.w	r8, r8, #1
 800dee4:	e7e6      	b.n	800deb4 <_printf_float+0x248>
 800dee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dee8:	2b00      	cmp	r3, #0
 800deea:	dc39      	bgt.n	800df60 <_printf_float+0x2f4>
 800deec:	4a1b      	ldr	r2, [pc, #108]	; (800df5c <_printf_float+0x2f0>)
 800deee:	2301      	movs	r3, #1
 800def0:	4631      	mov	r1, r6
 800def2:	4628      	mov	r0, r5
 800def4:	47b8      	blx	r7
 800def6:	3001      	adds	r0, #1
 800def8:	f43f af19 	beq.w	800dd2e <_printf_float+0xc2>
 800defc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df00:	4313      	orrs	r3, r2
 800df02:	d102      	bne.n	800df0a <_printf_float+0x29e>
 800df04:	6823      	ldr	r3, [r4, #0]
 800df06:	07d9      	lsls	r1, r3, #31
 800df08:	d5d8      	bpl.n	800debc <_printf_float+0x250>
 800df0a:	ee18 3a10 	vmov	r3, s16
 800df0e:	4652      	mov	r2, sl
 800df10:	4631      	mov	r1, r6
 800df12:	4628      	mov	r0, r5
 800df14:	47b8      	blx	r7
 800df16:	3001      	adds	r0, #1
 800df18:	f43f af09 	beq.w	800dd2e <_printf_float+0xc2>
 800df1c:	f04f 0900 	mov.w	r9, #0
 800df20:	f104 0a1a 	add.w	sl, r4, #26
 800df24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df26:	425b      	negs	r3, r3
 800df28:	454b      	cmp	r3, r9
 800df2a:	dc01      	bgt.n	800df30 <_printf_float+0x2c4>
 800df2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df2e:	e792      	b.n	800de56 <_printf_float+0x1ea>
 800df30:	2301      	movs	r3, #1
 800df32:	4652      	mov	r2, sl
 800df34:	4631      	mov	r1, r6
 800df36:	4628      	mov	r0, r5
 800df38:	47b8      	blx	r7
 800df3a:	3001      	adds	r0, #1
 800df3c:	f43f aef7 	beq.w	800dd2e <_printf_float+0xc2>
 800df40:	f109 0901 	add.w	r9, r9, #1
 800df44:	e7ee      	b.n	800df24 <_printf_float+0x2b8>
 800df46:	bf00      	nop
 800df48:	7fefffff 	.word	0x7fefffff
 800df4c:	08011d60 	.word	0x08011d60
 800df50:	08011d64 	.word	0x08011d64
 800df54:	08011d6c 	.word	0x08011d6c
 800df58:	08011d68 	.word	0x08011d68
 800df5c:	08011d70 	.word	0x08011d70
 800df60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df64:	429a      	cmp	r2, r3
 800df66:	bfa8      	it	ge
 800df68:	461a      	movge	r2, r3
 800df6a:	2a00      	cmp	r2, #0
 800df6c:	4691      	mov	r9, r2
 800df6e:	dc37      	bgt.n	800dfe0 <_printf_float+0x374>
 800df70:	f04f 0b00 	mov.w	fp, #0
 800df74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df78:	f104 021a 	add.w	r2, r4, #26
 800df7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df7e:	9305      	str	r3, [sp, #20]
 800df80:	eba3 0309 	sub.w	r3, r3, r9
 800df84:	455b      	cmp	r3, fp
 800df86:	dc33      	bgt.n	800dff0 <_printf_float+0x384>
 800df88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df8c:	429a      	cmp	r2, r3
 800df8e:	db3b      	blt.n	800e008 <_printf_float+0x39c>
 800df90:	6823      	ldr	r3, [r4, #0]
 800df92:	07da      	lsls	r2, r3, #31
 800df94:	d438      	bmi.n	800e008 <_printf_float+0x39c>
 800df96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df98:	9a05      	ldr	r2, [sp, #20]
 800df9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df9c:	1a9a      	subs	r2, r3, r2
 800df9e:	eba3 0901 	sub.w	r9, r3, r1
 800dfa2:	4591      	cmp	r9, r2
 800dfa4:	bfa8      	it	ge
 800dfa6:	4691      	movge	r9, r2
 800dfa8:	f1b9 0f00 	cmp.w	r9, #0
 800dfac:	dc35      	bgt.n	800e01a <_printf_float+0x3ae>
 800dfae:	f04f 0800 	mov.w	r8, #0
 800dfb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dfb6:	f104 0a1a 	add.w	sl, r4, #26
 800dfba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dfbe:	1a9b      	subs	r3, r3, r2
 800dfc0:	eba3 0309 	sub.w	r3, r3, r9
 800dfc4:	4543      	cmp	r3, r8
 800dfc6:	f77f af79 	ble.w	800debc <_printf_float+0x250>
 800dfca:	2301      	movs	r3, #1
 800dfcc:	4652      	mov	r2, sl
 800dfce:	4631      	mov	r1, r6
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	47b8      	blx	r7
 800dfd4:	3001      	adds	r0, #1
 800dfd6:	f43f aeaa 	beq.w	800dd2e <_printf_float+0xc2>
 800dfda:	f108 0801 	add.w	r8, r8, #1
 800dfde:	e7ec      	b.n	800dfba <_printf_float+0x34e>
 800dfe0:	4613      	mov	r3, r2
 800dfe2:	4631      	mov	r1, r6
 800dfe4:	4642      	mov	r2, r8
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	47b8      	blx	r7
 800dfea:	3001      	adds	r0, #1
 800dfec:	d1c0      	bne.n	800df70 <_printf_float+0x304>
 800dfee:	e69e      	b.n	800dd2e <_printf_float+0xc2>
 800dff0:	2301      	movs	r3, #1
 800dff2:	4631      	mov	r1, r6
 800dff4:	4628      	mov	r0, r5
 800dff6:	9205      	str	r2, [sp, #20]
 800dff8:	47b8      	blx	r7
 800dffa:	3001      	adds	r0, #1
 800dffc:	f43f ae97 	beq.w	800dd2e <_printf_float+0xc2>
 800e000:	9a05      	ldr	r2, [sp, #20]
 800e002:	f10b 0b01 	add.w	fp, fp, #1
 800e006:	e7b9      	b.n	800df7c <_printf_float+0x310>
 800e008:	ee18 3a10 	vmov	r3, s16
 800e00c:	4652      	mov	r2, sl
 800e00e:	4631      	mov	r1, r6
 800e010:	4628      	mov	r0, r5
 800e012:	47b8      	blx	r7
 800e014:	3001      	adds	r0, #1
 800e016:	d1be      	bne.n	800df96 <_printf_float+0x32a>
 800e018:	e689      	b.n	800dd2e <_printf_float+0xc2>
 800e01a:	9a05      	ldr	r2, [sp, #20]
 800e01c:	464b      	mov	r3, r9
 800e01e:	4442      	add	r2, r8
 800e020:	4631      	mov	r1, r6
 800e022:	4628      	mov	r0, r5
 800e024:	47b8      	blx	r7
 800e026:	3001      	adds	r0, #1
 800e028:	d1c1      	bne.n	800dfae <_printf_float+0x342>
 800e02a:	e680      	b.n	800dd2e <_printf_float+0xc2>
 800e02c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e02e:	2a01      	cmp	r2, #1
 800e030:	dc01      	bgt.n	800e036 <_printf_float+0x3ca>
 800e032:	07db      	lsls	r3, r3, #31
 800e034:	d538      	bpl.n	800e0a8 <_printf_float+0x43c>
 800e036:	2301      	movs	r3, #1
 800e038:	4642      	mov	r2, r8
 800e03a:	4631      	mov	r1, r6
 800e03c:	4628      	mov	r0, r5
 800e03e:	47b8      	blx	r7
 800e040:	3001      	adds	r0, #1
 800e042:	f43f ae74 	beq.w	800dd2e <_printf_float+0xc2>
 800e046:	ee18 3a10 	vmov	r3, s16
 800e04a:	4652      	mov	r2, sl
 800e04c:	4631      	mov	r1, r6
 800e04e:	4628      	mov	r0, r5
 800e050:	47b8      	blx	r7
 800e052:	3001      	adds	r0, #1
 800e054:	f43f ae6b 	beq.w	800dd2e <_printf_float+0xc2>
 800e058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e05c:	2200      	movs	r2, #0
 800e05e:	2300      	movs	r3, #0
 800e060:	f7f2 fd32 	bl	8000ac8 <__aeabi_dcmpeq>
 800e064:	b9d8      	cbnz	r0, 800e09e <_printf_float+0x432>
 800e066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e068:	f108 0201 	add.w	r2, r8, #1
 800e06c:	3b01      	subs	r3, #1
 800e06e:	4631      	mov	r1, r6
 800e070:	4628      	mov	r0, r5
 800e072:	47b8      	blx	r7
 800e074:	3001      	adds	r0, #1
 800e076:	d10e      	bne.n	800e096 <_printf_float+0x42a>
 800e078:	e659      	b.n	800dd2e <_printf_float+0xc2>
 800e07a:	2301      	movs	r3, #1
 800e07c:	4652      	mov	r2, sl
 800e07e:	4631      	mov	r1, r6
 800e080:	4628      	mov	r0, r5
 800e082:	47b8      	blx	r7
 800e084:	3001      	adds	r0, #1
 800e086:	f43f ae52 	beq.w	800dd2e <_printf_float+0xc2>
 800e08a:	f108 0801 	add.w	r8, r8, #1
 800e08e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e090:	3b01      	subs	r3, #1
 800e092:	4543      	cmp	r3, r8
 800e094:	dcf1      	bgt.n	800e07a <_printf_float+0x40e>
 800e096:	464b      	mov	r3, r9
 800e098:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e09c:	e6dc      	b.n	800de58 <_printf_float+0x1ec>
 800e09e:	f04f 0800 	mov.w	r8, #0
 800e0a2:	f104 0a1a 	add.w	sl, r4, #26
 800e0a6:	e7f2      	b.n	800e08e <_printf_float+0x422>
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	4642      	mov	r2, r8
 800e0ac:	e7df      	b.n	800e06e <_printf_float+0x402>
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	464a      	mov	r2, r9
 800e0b2:	4631      	mov	r1, r6
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	47b8      	blx	r7
 800e0b8:	3001      	adds	r0, #1
 800e0ba:	f43f ae38 	beq.w	800dd2e <_printf_float+0xc2>
 800e0be:	f108 0801 	add.w	r8, r8, #1
 800e0c2:	68e3      	ldr	r3, [r4, #12]
 800e0c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0c6:	1a5b      	subs	r3, r3, r1
 800e0c8:	4543      	cmp	r3, r8
 800e0ca:	dcf0      	bgt.n	800e0ae <_printf_float+0x442>
 800e0cc:	e6fa      	b.n	800dec4 <_printf_float+0x258>
 800e0ce:	f04f 0800 	mov.w	r8, #0
 800e0d2:	f104 0919 	add.w	r9, r4, #25
 800e0d6:	e7f4      	b.n	800e0c2 <_printf_float+0x456>

0800e0d8 <_printf_common>:
 800e0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0dc:	4616      	mov	r6, r2
 800e0de:	4699      	mov	r9, r3
 800e0e0:	688a      	ldr	r2, [r1, #8]
 800e0e2:	690b      	ldr	r3, [r1, #16]
 800e0e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	bfb8      	it	lt
 800e0ec:	4613      	movlt	r3, r2
 800e0ee:	6033      	str	r3, [r6, #0]
 800e0f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e0f4:	4607      	mov	r7, r0
 800e0f6:	460c      	mov	r4, r1
 800e0f8:	b10a      	cbz	r2, 800e0fe <_printf_common+0x26>
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	6033      	str	r3, [r6, #0]
 800e0fe:	6823      	ldr	r3, [r4, #0]
 800e100:	0699      	lsls	r1, r3, #26
 800e102:	bf42      	ittt	mi
 800e104:	6833      	ldrmi	r3, [r6, #0]
 800e106:	3302      	addmi	r3, #2
 800e108:	6033      	strmi	r3, [r6, #0]
 800e10a:	6825      	ldr	r5, [r4, #0]
 800e10c:	f015 0506 	ands.w	r5, r5, #6
 800e110:	d106      	bne.n	800e120 <_printf_common+0x48>
 800e112:	f104 0a19 	add.w	sl, r4, #25
 800e116:	68e3      	ldr	r3, [r4, #12]
 800e118:	6832      	ldr	r2, [r6, #0]
 800e11a:	1a9b      	subs	r3, r3, r2
 800e11c:	42ab      	cmp	r3, r5
 800e11e:	dc26      	bgt.n	800e16e <_printf_common+0x96>
 800e120:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e124:	1e13      	subs	r3, r2, #0
 800e126:	6822      	ldr	r2, [r4, #0]
 800e128:	bf18      	it	ne
 800e12a:	2301      	movne	r3, #1
 800e12c:	0692      	lsls	r2, r2, #26
 800e12e:	d42b      	bmi.n	800e188 <_printf_common+0xb0>
 800e130:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e134:	4649      	mov	r1, r9
 800e136:	4638      	mov	r0, r7
 800e138:	47c0      	blx	r8
 800e13a:	3001      	adds	r0, #1
 800e13c:	d01e      	beq.n	800e17c <_printf_common+0xa4>
 800e13e:	6823      	ldr	r3, [r4, #0]
 800e140:	68e5      	ldr	r5, [r4, #12]
 800e142:	6832      	ldr	r2, [r6, #0]
 800e144:	f003 0306 	and.w	r3, r3, #6
 800e148:	2b04      	cmp	r3, #4
 800e14a:	bf08      	it	eq
 800e14c:	1aad      	subeq	r5, r5, r2
 800e14e:	68a3      	ldr	r3, [r4, #8]
 800e150:	6922      	ldr	r2, [r4, #16]
 800e152:	bf0c      	ite	eq
 800e154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e158:	2500      	movne	r5, #0
 800e15a:	4293      	cmp	r3, r2
 800e15c:	bfc4      	itt	gt
 800e15e:	1a9b      	subgt	r3, r3, r2
 800e160:	18ed      	addgt	r5, r5, r3
 800e162:	2600      	movs	r6, #0
 800e164:	341a      	adds	r4, #26
 800e166:	42b5      	cmp	r5, r6
 800e168:	d11a      	bne.n	800e1a0 <_printf_common+0xc8>
 800e16a:	2000      	movs	r0, #0
 800e16c:	e008      	b.n	800e180 <_printf_common+0xa8>
 800e16e:	2301      	movs	r3, #1
 800e170:	4652      	mov	r2, sl
 800e172:	4649      	mov	r1, r9
 800e174:	4638      	mov	r0, r7
 800e176:	47c0      	blx	r8
 800e178:	3001      	adds	r0, #1
 800e17a:	d103      	bne.n	800e184 <_printf_common+0xac>
 800e17c:	f04f 30ff 	mov.w	r0, #4294967295
 800e180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e184:	3501      	adds	r5, #1
 800e186:	e7c6      	b.n	800e116 <_printf_common+0x3e>
 800e188:	18e1      	adds	r1, r4, r3
 800e18a:	1c5a      	adds	r2, r3, #1
 800e18c:	2030      	movs	r0, #48	; 0x30
 800e18e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e192:	4422      	add	r2, r4
 800e194:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e198:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e19c:	3302      	adds	r3, #2
 800e19e:	e7c7      	b.n	800e130 <_printf_common+0x58>
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	4622      	mov	r2, r4
 800e1a4:	4649      	mov	r1, r9
 800e1a6:	4638      	mov	r0, r7
 800e1a8:	47c0      	blx	r8
 800e1aa:	3001      	adds	r0, #1
 800e1ac:	d0e6      	beq.n	800e17c <_printf_common+0xa4>
 800e1ae:	3601      	adds	r6, #1
 800e1b0:	e7d9      	b.n	800e166 <_printf_common+0x8e>
	...

0800e1b4 <_printf_i>:
 800e1b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e1b8:	7e0f      	ldrb	r7, [r1, #24]
 800e1ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e1bc:	2f78      	cmp	r7, #120	; 0x78
 800e1be:	4691      	mov	r9, r2
 800e1c0:	4680      	mov	r8, r0
 800e1c2:	460c      	mov	r4, r1
 800e1c4:	469a      	mov	sl, r3
 800e1c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e1ca:	d807      	bhi.n	800e1dc <_printf_i+0x28>
 800e1cc:	2f62      	cmp	r7, #98	; 0x62
 800e1ce:	d80a      	bhi.n	800e1e6 <_printf_i+0x32>
 800e1d0:	2f00      	cmp	r7, #0
 800e1d2:	f000 80d8 	beq.w	800e386 <_printf_i+0x1d2>
 800e1d6:	2f58      	cmp	r7, #88	; 0x58
 800e1d8:	f000 80a3 	beq.w	800e322 <_printf_i+0x16e>
 800e1dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e1e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e1e4:	e03a      	b.n	800e25c <_printf_i+0xa8>
 800e1e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e1ea:	2b15      	cmp	r3, #21
 800e1ec:	d8f6      	bhi.n	800e1dc <_printf_i+0x28>
 800e1ee:	a101      	add	r1, pc, #4	; (adr r1, 800e1f4 <_printf_i+0x40>)
 800e1f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e1f4:	0800e24d 	.word	0x0800e24d
 800e1f8:	0800e261 	.word	0x0800e261
 800e1fc:	0800e1dd 	.word	0x0800e1dd
 800e200:	0800e1dd 	.word	0x0800e1dd
 800e204:	0800e1dd 	.word	0x0800e1dd
 800e208:	0800e1dd 	.word	0x0800e1dd
 800e20c:	0800e261 	.word	0x0800e261
 800e210:	0800e1dd 	.word	0x0800e1dd
 800e214:	0800e1dd 	.word	0x0800e1dd
 800e218:	0800e1dd 	.word	0x0800e1dd
 800e21c:	0800e1dd 	.word	0x0800e1dd
 800e220:	0800e36d 	.word	0x0800e36d
 800e224:	0800e291 	.word	0x0800e291
 800e228:	0800e34f 	.word	0x0800e34f
 800e22c:	0800e1dd 	.word	0x0800e1dd
 800e230:	0800e1dd 	.word	0x0800e1dd
 800e234:	0800e38f 	.word	0x0800e38f
 800e238:	0800e1dd 	.word	0x0800e1dd
 800e23c:	0800e291 	.word	0x0800e291
 800e240:	0800e1dd 	.word	0x0800e1dd
 800e244:	0800e1dd 	.word	0x0800e1dd
 800e248:	0800e357 	.word	0x0800e357
 800e24c:	682b      	ldr	r3, [r5, #0]
 800e24e:	1d1a      	adds	r2, r3, #4
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	602a      	str	r2, [r5, #0]
 800e254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e25c:	2301      	movs	r3, #1
 800e25e:	e0a3      	b.n	800e3a8 <_printf_i+0x1f4>
 800e260:	6820      	ldr	r0, [r4, #0]
 800e262:	6829      	ldr	r1, [r5, #0]
 800e264:	0606      	lsls	r6, r0, #24
 800e266:	f101 0304 	add.w	r3, r1, #4
 800e26a:	d50a      	bpl.n	800e282 <_printf_i+0xce>
 800e26c:	680e      	ldr	r6, [r1, #0]
 800e26e:	602b      	str	r3, [r5, #0]
 800e270:	2e00      	cmp	r6, #0
 800e272:	da03      	bge.n	800e27c <_printf_i+0xc8>
 800e274:	232d      	movs	r3, #45	; 0x2d
 800e276:	4276      	negs	r6, r6
 800e278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e27c:	485e      	ldr	r0, [pc, #376]	; (800e3f8 <_printf_i+0x244>)
 800e27e:	230a      	movs	r3, #10
 800e280:	e019      	b.n	800e2b6 <_printf_i+0x102>
 800e282:	680e      	ldr	r6, [r1, #0]
 800e284:	602b      	str	r3, [r5, #0]
 800e286:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e28a:	bf18      	it	ne
 800e28c:	b236      	sxthne	r6, r6
 800e28e:	e7ef      	b.n	800e270 <_printf_i+0xbc>
 800e290:	682b      	ldr	r3, [r5, #0]
 800e292:	6820      	ldr	r0, [r4, #0]
 800e294:	1d19      	adds	r1, r3, #4
 800e296:	6029      	str	r1, [r5, #0]
 800e298:	0601      	lsls	r1, r0, #24
 800e29a:	d501      	bpl.n	800e2a0 <_printf_i+0xec>
 800e29c:	681e      	ldr	r6, [r3, #0]
 800e29e:	e002      	b.n	800e2a6 <_printf_i+0xf2>
 800e2a0:	0646      	lsls	r6, r0, #25
 800e2a2:	d5fb      	bpl.n	800e29c <_printf_i+0xe8>
 800e2a4:	881e      	ldrh	r6, [r3, #0]
 800e2a6:	4854      	ldr	r0, [pc, #336]	; (800e3f8 <_printf_i+0x244>)
 800e2a8:	2f6f      	cmp	r7, #111	; 0x6f
 800e2aa:	bf0c      	ite	eq
 800e2ac:	2308      	moveq	r3, #8
 800e2ae:	230a      	movne	r3, #10
 800e2b0:	2100      	movs	r1, #0
 800e2b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e2b6:	6865      	ldr	r5, [r4, #4]
 800e2b8:	60a5      	str	r5, [r4, #8]
 800e2ba:	2d00      	cmp	r5, #0
 800e2bc:	bfa2      	ittt	ge
 800e2be:	6821      	ldrge	r1, [r4, #0]
 800e2c0:	f021 0104 	bicge.w	r1, r1, #4
 800e2c4:	6021      	strge	r1, [r4, #0]
 800e2c6:	b90e      	cbnz	r6, 800e2cc <_printf_i+0x118>
 800e2c8:	2d00      	cmp	r5, #0
 800e2ca:	d04d      	beq.n	800e368 <_printf_i+0x1b4>
 800e2cc:	4615      	mov	r5, r2
 800e2ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800e2d2:	fb03 6711 	mls	r7, r3, r1, r6
 800e2d6:	5dc7      	ldrb	r7, [r0, r7]
 800e2d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e2dc:	4637      	mov	r7, r6
 800e2de:	42bb      	cmp	r3, r7
 800e2e0:	460e      	mov	r6, r1
 800e2e2:	d9f4      	bls.n	800e2ce <_printf_i+0x11a>
 800e2e4:	2b08      	cmp	r3, #8
 800e2e6:	d10b      	bne.n	800e300 <_printf_i+0x14c>
 800e2e8:	6823      	ldr	r3, [r4, #0]
 800e2ea:	07de      	lsls	r6, r3, #31
 800e2ec:	d508      	bpl.n	800e300 <_printf_i+0x14c>
 800e2ee:	6923      	ldr	r3, [r4, #16]
 800e2f0:	6861      	ldr	r1, [r4, #4]
 800e2f2:	4299      	cmp	r1, r3
 800e2f4:	bfde      	ittt	le
 800e2f6:	2330      	movle	r3, #48	; 0x30
 800e2f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e2fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e300:	1b52      	subs	r2, r2, r5
 800e302:	6122      	str	r2, [r4, #16]
 800e304:	f8cd a000 	str.w	sl, [sp]
 800e308:	464b      	mov	r3, r9
 800e30a:	aa03      	add	r2, sp, #12
 800e30c:	4621      	mov	r1, r4
 800e30e:	4640      	mov	r0, r8
 800e310:	f7ff fee2 	bl	800e0d8 <_printf_common>
 800e314:	3001      	adds	r0, #1
 800e316:	d14c      	bne.n	800e3b2 <_printf_i+0x1fe>
 800e318:	f04f 30ff 	mov.w	r0, #4294967295
 800e31c:	b004      	add	sp, #16
 800e31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e322:	4835      	ldr	r0, [pc, #212]	; (800e3f8 <_printf_i+0x244>)
 800e324:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e328:	6829      	ldr	r1, [r5, #0]
 800e32a:	6823      	ldr	r3, [r4, #0]
 800e32c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e330:	6029      	str	r1, [r5, #0]
 800e332:	061d      	lsls	r5, r3, #24
 800e334:	d514      	bpl.n	800e360 <_printf_i+0x1ac>
 800e336:	07df      	lsls	r7, r3, #31
 800e338:	bf44      	itt	mi
 800e33a:	f043 0320 	orrmi.w	r3, r3, #32
 800e33e:	6023      	strmi	r3, [r4, #0]
 800e340:	b91e      	cbnz	r6, 800e34a <_printf_i+0x196>
 800e342:	6823      	ldr	r3, [r4, #0]
 800e344:	f023 0320 	bic.w	r3, r3, #32
 800e348:	6023      	str	r3, [r4, #0]
 800e34a:	2310      	movs	r3, #16
 800e34c:	e7b0      	b.n	800e2b0 <_printf_i+0xfc>
 800e34e:	6823      	ldr	r3, [r4, #0]
 800e350:	f043 0320 	orr.w	r3, r3, #32
 800e354:	6023      	str	r3, [r4, #0]
 800e356:	2378      	movs	r3, #120	; 0x78
 800e358:	4828      	ldr	r0, [pc, #160]	; (800e3fc <_printf_i+0x248>)
 800e35a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e35e:	e7e3      	b.n	800e328 <_printf_i+0x174>
 800e360:	0659      	lsls	r1, r3, #25
 800e362:	bf48      	it	mi
 800e364:	b2b6      	uxthmi	r6, r6
 800e366:	e7e6      	b.n	800e336 <_printf_i+0x182>
 800e368:	4615      	mov	r5, r2
 800e36a:	e7bb      	b.n	800e2e4 <_printf_i+0x130>
 800e36c:	682b      	ldr	r3, [r5, #0]
 800e36e:	6826      	ldr	r6, [r4, #0]
 800e370:	6961      	ldr	r1, [r4, #20]
 800e372:	1d18      	adds	r0, r3, #4
 800e374:	6028      	str	r0, [r5, #0]
 800e376:	0635      	lsls	r5, r6, #24
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	d501      	bpl.n	800e380 <_printf_i+0x1cc>
 800e37c:	6019      	str	r1, [r3, #0]
 800e37e:	e002      	b.n	800e386 <_printf_i+0x1d2>
 800e380:	0670      	lsls	r0, r6, #25
 800e382:	d5fb      	bpl.n	800e37c <_printf_i+0x1c8>
 800e384:	8019      	strh	r1, [r3, #0]
 800e386:	2300      	movs	r3, #0
 800e388:	6123      	str	r3, [r4, #16]
 800e38a:	4615      	mov	r5, r2
 800e38c:	e7ba      	b.n	800e304 <_printf_i+0x150>
 800e38e:	682b      	ldr	r3, [r5, #0]
 800e390:	1d1a      	adds	r2, r3, #4
 800e392:	602a      	str	r2, [r5, #0]
 800e394:	681d      	ldr	r5, [r3, #0]
 800e396:	6862      	ldr	r2, [r4, #4]
 800e398:	2100      	movs	r1, #0
 800e39a:	4628      	mov	r0, r5
 800e39c:	f7f1 ff20 	bl	80001e0 <memchr>
 800e3a0:	b108      	cbz	r0, 800e3a6 <_printf_i+0x1f2>
 800e3a2:	1b40      	subs	r0, r0, r5
 800e3a4:	6060      	str	r0, [r4, #4]
 800e3a6:	6863      	ldr	r3, [r4, #4]
 800e3a8:	6123      	str	r3, [r4, #16]
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3b0:	e7a8      	b.n	800e304 <_printf_i+0x150>
 800e3b2:	6923      	ldr	r3, [r4, #16]
 800e3b4:	462a      	mov	r2, r5
 800e3b6:	4649      	mov	r1, r9
 800e3b8:	4640      	mov	r0, r8
 800e3ba:	47d0      	blx	sl
 800e3bc:	3001      	adds	r0, #1
 800e3be:	d0ab      	beq.n	800e318 <_printf_i+0x164>
 800e3c0:	6823      	ldr	r3, [r4, #0]
 800e3c2:	079b      	lsls	r3, r3, #30
 800e3c4:	d413      	bmi.n	800e3ee <_printf_i+0x23a>
 800e3c6:	68e0      	ldr	r0, [r4, #12]
 800e3c8:	9b03      	ldr	r3, [sp, #12]
 800e3ca:	4298      	cmp	r0, r3
 800e3cc:	bfb8      	it	lt
 800e3ce:	4618      	movlt	r0, r3
 800e3d0:	e7a4      	b.n	800e31c <_printf_i+0x168>
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	4632      	mov	r2, r6
 800e3d6:	4649      	mov	r1, r9
 800e3d8:	4640      	mov	r0, r8
 800e3da:	47d0      	blx	sl
 800e3dc:	3001      	adds	r0, #1
 800e3de:	d09b      	beq.n	800e318 <_printf_i+0x164>
 800e3e0:	3501      	adds	r5, #1
 800e3e2:	68e3      	ldr	r3, [r4, #12]
 800e3e4:	9903      	ldr	r1, [sp, #12]
 800e3e6:	1a5b      	subs	r3, r3, r1
 800e3e8:	42ab      	cmp	r3, r5
 800e3ea:	dcf2      	bgt.n	800e3d2 <_printf_i+0x21e>
 800e3ec:	e7eb      	b.n	800e3c6 <_printf_i+0x212>
 800e3ee:	2500      	movs	r5, #0
 800e3f0:	f104 0619 	add.w	r6, r4, #25
 800e3f4:	e7f5      	b.n	800e3e2 <_printf_i+0x22e>
 800e3f6:	bf00      	nop
 800e3f8:	08011d72 	.word	0x08011d72
 800e3fc:	08011d83 	.word	0x08011d83

0800e400 <sniprintf>:
 800e400:	b40c      	push	{r2, r3}
 800e402:	b530      	push	{r4, r5, lr}
 800e404:	4b17      	ldr	r3, [pc, #92]	; (800e464 <sniprintf+0x64>)
 800e406:	1e0c      	subs	r4, r1, #0
 800e408:	681d      	ldr	r5, [r3, #0]
 800e40a:	b09d      	sub	sp, #116	; 0x74
 800e40c:	da08      	bge.n	800e420 <sniprintf+0x20>
 800e40e:	238b      	movs	r3, #139	; 0x8b
 800e410:	602b      	str	r3, [r5, #0]
 800e412:	f04f 30ff 	mov.w	r0, #4294967295
 800e416:	b01d      	add	sp, #116	; 0x74
 800e418:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e41c:	b002      	add	sp, #8
 800e41e:	4770      	bx	lr
 800e420:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e424:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e428:	bf14      	ite	ne
 800e42a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e42e:	4623      	moveq	r3, r4
 800e430:	9304      	str	r3, [sp, #16]
 800e432:	9307      	str	r3, [sp, #28]
 800e434:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e438:	9002      	str	r0, [sp, #8]
 800e43a:	9006      	str	r0, [sp, #24]
 800e43c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e440:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e442:	ab21      	add	r3, sp, #132	; 0x84
 800e444:	a902      	add	r1, sp, #8
 800e446:	4628      	mov	r0, r5
 800e448:	9301      	str	r3, [sp, #4]
 800e44a:	f001 fb89 	bl	800fb60 <_svfiprintf_r>
 800e44e:	1c43      	adds	r3, r0, #1
 800e450:	bfbc      	itt	lt
 800e452:	238b      	movlt	r3, #139	; 0x8b
 800e454:	602b      	strlt	r3, [r5, #0]
 800e456:	2c00      	cmp	r4, #0
 800e458:	d0dd      	beq.n	800e416 <sniprintf+0x16>
 800e45a:	9b02      	ldr	r3, [sp, #8]
 800e45c:	2200      	movs	r2, #0
 800e45e:	701a      	strb	r2, [r3, #0]
 800e460:	e7d9      	b.n	800e416 <sniprintf+0x16>
 800e462:	bf00      	nop
 800e464:	20000108 	.word	0x20000108

0800e468 <siprintf>:
 800e468:	b40e      	push	{r1, r2, r3}
 800e46a:	b500      	push	{lr}
 800e46c:	b09c      	sub	sp, #112	; 0x70
 800e46e:	ab1d      	add	r3, sp, #116	; 0x74
 800e470:	9002      	str	r0, [sp, #8]
 800e472:	9006      	str	r0, [sp, #24]
 800e474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e478:	4809      	ldr	r0, [pc, #36]	; (800e4a0 <siprintf+0x38>)
 800e47a:	9107      	str	r1, [sp, #28]
 800e47c:	9104      	str	r1, [sp, #16]
 800e47e:	4909      	ldr	r1, [pc, #36]	; (800e4a4 <siprintf+0x3c>)
 800e480:	f853 2b04 	ldr.w	r2, [r3], #4
 800e484:	9105      	str	r1, [sp, #20]
 800e486:	6800      	ldr	r0, [r0, #0]
 800e488:	9301      	str	r3, [sp, #4]
 800e48a:	a902      	add	r1, sp, #8
 800e48c:	f001 fb68 	bl	800fb60 <_svfiprintf_r>
 800e490:	9b02      	ldr	r3, [sp, #8]
 800e492:	2200      	movs	r2, #0
 800e494:	701a      	strb	r2, [r3, #0]
 800e496:	b01c      	add	sp, #112	; 0x70
 800e498:	f85d eb04 	ldr.w	lr, [sp], #4
 800e49c:	b003      	add	sp, #12
 800e49e:	4770      	bx	lr
 800e4a0:	20000108 	.word	0x20000108
 800e4a4:	ffff0208 	.word	0xffff0208

0800e4a8 <quorem>:
 800e4a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ac:	6903      	ldr	r3, [r0, #16]
 800e4ae:	690c      	ldr	r4, [r1, #16]
 800e4b0:	42a3      	cmp	r3, r4
 800e4b2:	4607      	mov	r7, r0
 800e4b4:	f2c0 8081 	blt.w	800e5ba <quorem+0x112>
 800e4b8:	3c01      	subs	r4, #1
 800e4ba:	f101 0814 	add.w	r8, r1, #20
 800e4be:	f100 0514 	add.w	r5, r0, #20
 800e4c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e4c6:	9301      	str	r3, [sp, #4]
 800e4c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e4cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e4d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e4dc:	fbb2 f6f3 	udiv	r6, r2, r3
 800e4e0:	d331      	bcc.n	800e546 <quorem+0x9e>
 800e4e2:	f04f 0e00 	mov.w	lr, #0
 800e4e6:	4640      	mov	r0, r8
 800e4e8:	46ac      	mov	ip, r5
 800e4ea:	46f2      	mov	sl, lr
 800e4ec:	f850 2b04 	ldr.w	r2, [r0], #4
 800e4f0:	b293      	uxth	r3, r2
 800e4f2:	fb06 e303 	mla	r3, r6, r3, lr
 800e4f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	ebaa 0303 	sub.w	r3, sl, r3
 800e500:	f8dc a000 	ldr.w	sl, [ip]
 800e504:	0c12      	lsrs	r2, r2, #16
 800e506:	fa13 f38a 	uxtah	r3, r3, sl
 800e50a:	fb06 e202 	mla	r2, r6, r2, lr
 800e50e:	9300      	str	r3, [sp, #0]
 800e510:	9b00      	ldr	r3, [sp, #0]
 800e512:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e516:	b292      	uxth	r2, r2
 800e518:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e51c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e520:	f8bd 3000 	ldrh.w	r3, [sp]
 800e524:	4581      	cmp	r9, r0
 800e526:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e52a:	f84c 3b04 	str.w	r3, [ip], #4
 800e52e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e532:	d2db      	bcs.n	800e4ec <quorem+0x44>
 800e534:	f855 300b 	ldr.w	r3, [r5, fp]
 800e538:	b92b      	cbnz	r3, 800e546 <quorem+0x9e>
 800e53a:	9b01      	ldr	r3, [sp, #4]
 800e53c:	3b04      	subs	r3, #4
 800e53e:	429d      	cmp	r5, r3
 800e540:	461a      	mov	r2, r3
 800e542:	d32e      	bcc.n	800e5a2 <quorem+0xfa>
 800e544:	613c      	str	r4, [r7, #16]
 800e546:	4638      	mov	r0, r7
 800e548:	f001 f8b6 	bl	800f6b8 <__mcmp>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	db24      	blt.n	800e59a <quorem+0xf2>
 800e550:	3601      	adds	r6, #1
 800e552:	4628      	mov	r0, r5
 800e554:	f04f 0c00 	mov.w	ip, #0
 800e558:	f858 2b04 	ldr.w	r2, [r8], #4
 800e55c:	f8d0 e000 	ldr.w	lr, [r0]
 800e560:	b293      	uxth	r3, r2
 800e562:	ebac 0303 	sub.w	r3, ip, r3
 800e566:	0c12      	lsrs	r2, r2, #16
 800e568:	fa13 f38e 	uxtah	r3, r3, lr
 800e56c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e570:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e574:	b29b      	uxth	r3, r3
 800e576:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e57a:	45c1      	cmp	r9, r8
 800e57c:	f840 3b04 	str.w	r3, [r0], #4
 800e580:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e584:	d2e8      	bcs.n	800e558 <quorem+0xb0>
 800e586:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e58a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e58e:	b922      	cbnz	r2, 800e59a <quorem+0xf2>
 800e590:	3b04      	subs	r3, #4
 800e592:	429d      	cmp	r5, r3
 800e594:	461a      	mov	r2, r3
 800e596:	d30a      	bcc.n	800e5ae <quorem+0x106>
 800e598:	613c      	str	r4, [r7, #16]
 800e59a:	4630      	mov	r0, r6
 800e59c:	b003      	add	sp, #12
 800e59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a2:	6812      	ldr	r2, [r2, #0]
 800e5a4:	3b04      	subs	r3, #4
 800e5a6:	2a00      	cmp	r2, #0
 800e5a8:	d1cc      	bne.n	800e544 <quorem+0x9c>
 800e5aa:	3c01      	subs	r4, #1
 800e5ac:	e7c7      	b.n	800e53e <quorem+0x96>
 800e5ae:	6812      	ldr	r2, [r2, #0]
 800e5b0:	3b04      	subs	r3, #4
 800e5b2:	2a00      	cmp	r2, #0
 800e5b4:	d1f0      	bne.n	800e598 <quorem+0xf0>
 800e5b6:	3c01      	subs	r4, #1
 800e5b8:	e7eb      	b.n	800e592 <quorem+0xea>
 800e5ba:	2000      	movs	r0, #0
 800e5bc:	e7ee      	b.n	800e59c <quorem+0xf4>
	...

0800e5c0 <_dtoa_r>:
 800e5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5c4:	ed2d 8b04 	vpush	{d8-d9}
 800e5c8:	ec57 6b10 	vmov	r6, r7, d0
 800e5cc:	b093      	sub	sp, #76	; 0x4c
 800e5ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e5d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e5d4:	9106      	str	r1, [sp, #24]
 800e5d6:	ee10 aa10 	vmov	sl, s0
 800e5da:	4604      	mov	r4, r0
 800e5dc:	9209      	str	r2, [sp, #36]	; 0x24
 800e5de:	930c      	str	r3, [sp, #48]	; 0x30
 800e5e0:	46bb      	mov	fp, r7
 800e5e2:	b975      	cbnz	r5, 800e602 <_dtoa_r+0x42>
 800e5e4:	2010      	movs	r0, #16
 800e5e6:	f000 fddd 	bl	800f1a4 <malloc>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	6260      	str	r0, [r4, #36]	; 0x24
 800e5ee:	b920      	cbnz	r0, 800e5fa <_dtoa_r+0x3a>
 800e5f0:	4ba7      	ldr	r3, [pc, #668]	; (800e890 <_dtoa_r+0x2d0>)
 800e5f2:	21ea      	movs	r1, #234	; 0xea
 800e5f4:	48a7      	ldr	r0, [pc, #668]	; (800e894 <_dtoa_r+0x2d4>)
 800e5f6:	f001 fbc3 	bl	800fd80 <__assert_func>
 800e5fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e5fe:	6005      	str	r5, [r0, #0]
 800e600:	60c5      	str	r5, [r0, #12]
 800e602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e604:	6819      	ldr	r1, [r3, #0]
 800e606:	b151      	cbz	r1, 800e61e <_dtoa_r+0x5e>
 800e608:	685a      	ldr	r2, [r3, #4]
 800e60a:	604a      	str	r2, [r1, #4]
 800e60c:	2301      	movs	r3, #1
 800e60e:	4093      	lsls	r3, r2
 800e610:	608b      	str	r3, [r1, #8]
 800e612:	4620      	mov	r0, r4
 800e614:	f000 fe0e 	bl	800f234 <_Bfree>
 800e618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e61a:	2200      	movs	r2, #0
 800e61c:	601a      	str	r2, [r3, #0]
 800e61e:	1e3b      	subs	r3, r7, #0
 800e620:	bfaa      	itet	ge
 800e622:	2300      	movge	r3, #0
 800e624:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e628:	f8c8 3000 	strge.w	r3, [r8]
 800e62c:	4b9a      	ldr	r3, [pc, #616]	; (800e898 <_dtoa_r+0x2d8>)
 800e62e:	bfbc      	itt	lt
 800e630:	2201      	movlt	r2, #1
 800e632:	f8c8 2000 	strlt.w	r2, [r8]
 800e636:	ea33 030b 	bics.w	r3, r3, fp
 800e63a:	d11b      	bne.n	800e674 <_dtoa_r+0xb4>
 800e63c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e63e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e642:	6013      	str	r3, [r2, #0]
 800e644:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e648:	4333      	orrs	r3, r6
 800e64a:	f000 8592 	beq.w	800f172 <_dtoa_r+0xbb2>
 800e64e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e650:	b963      	cbnz	r3, 800e66c <_dtoa_r+0xac>
 800e652:	4b92      	ldr	r3, [pc, #584]	; (800e89c <_dtoa_r+0x2dc>)
 800e654:	e022      	b.n	800e69c <_dtoa_r+0xdc>
 800e656:	4b92      	ldr	r3, [pc, #584]	; (800e8a0 <_dtoa_r+0x2e0>)
 800e658:	9301      	str	r3, [sp, #4]
 800e65a:	3308      	adds	r3, #8
 800e65c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e65e:	6013      	str	r3, [r2, #0]
 800e660:	9801      	ldr	r0, [sp, #4]
 800e662:	b013      	add	sp, #76	; 0x4c
 800e664:	ecbd 8b04 	vpop	{d8-d9}
 800e668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e66c:	4b8b      	ldr	r3, [pc, #556]	; (800e89c <_dtoa_r+0x2dc>)
 800e66e:	9301      	str	r3, [sp, #4]
 800e670:	3303      	adds	r3, #3
 800e672:	e7f3      	b.n	800e65c <_dtoa_r+0x9c>
 800e674:	2200      	movs	r2, #0
 800e676:	2300      	movs	r3, #0
 800e678:	4650      	mov	r0, sl
 800e67a:	4659      	mov	r1, fp
 800e67c:	f7f2 fa24 	bl	8000ac8 <__aeabi_dcmpeq>
 800e680:	ec4b ab19 	vmov	d9, sl, fp
 800e684:	4680      	mov	r8, r0
 800e686:	b158      	cbz	r0, 800e6a0 <_dtoa_r+0xe0>
 800e688:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e68a:	2301      	movs	r3, #1
 800e68c:	6013      	str	r3, [r2, #0]
 800e68e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e690:	2b00      	cmp	r3, #0
 800e692:	f000 856b 	beq.w	800f16c <_dtoa_r+0xbac>
 800e696:	4883      	ldr	r0, [pc, #524]	; (800e8a4 <_dtoa_r+0x2e4>)
 800e698:	6018      	str	r0, [r3, #0]
 800e69a:	1e43      	subs	r3, r0, #1
 800e69c:	9301      	str	r3, [sp, #4]
 800e69e:	e7df      	b.n	800e660 <_dtoa_r+0xa0>
 800e6a0:	ec4b ab10 	vmov	d0, sl, fp
 800e6a4:	aa10      	add	r2, sp, #64	; 0x40
 800e6a6:	a911      	add	r1, sp, #68	; 0x44
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	f001 f8ab 	bl	800f804 <__d2b>
 800e6ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e6b2:	ee08 0a10 	vmov	s16, r0
 800e6b6:	2d00      	cmp	r5, #0
 800e6b8:	f000 8084 	beq.w	800e7c4 <_dtoa_r+0x204>
 800e6bc:	ee19 3a90 	vmov	r3, s19
 800e6c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e6c8:	4656      	mov	r6, sl
 800e6ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e6ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e6d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e6d6:	4b74      	ldr	r3, [pc, #464]	; (800e8a8 <_dtoa_r+0x2e8>)
 800e6d8:	2200      	movs	r2, #0
 800e6da:	4630      	mov	r0, r6
 800e6dc:	4639      	mov	r1, r7
 800e6de:	f7f1 fdd3 	bl	8000288 <__aeabi_dsub>
 800e6e2:	a365      	add	r3, pc, #404	; (adr r3, 800e878 <_dtoa_r+0x2b8>)
 800e6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e8:	f7f1 ff86 	bl	80005f8 <__aeabi_dmul>
 800e6ec:	a364      	add	r3, pc, #400	; (adr r3, 800e880 <_dtoa_r+0x2c0>)
 800e6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f2:	f7f1 fdcb 	bl	800028c <__adddf3>
 800e6f6:	4606      	mov	r6, r0
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	460f      	mov	r7, r1
 800e6fc:	f7f1 ff12 	bl	8000524 <__aeabi_i2d>
 800e700:	a361      	add	r3, pc, #388	; (adr r3, 800e888 <_dtoa_r+0x2c8>)
 800e702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e706:	f7f1 ff77 	bl	80005f8 <__aeabi_dmul>
 800e70a:	4602      	mov	r2, r0
 800e70c:	460b      	mov	r3, r1
 800e70e:	4630      	mov	r0, r6
 800e710:	4639      	mov	r1, r7
 800e712:	f7f1 fdbb 	bl	800028c <__adddf3>
 800e716:	4606      	mov	r6, r0
 800e718:	460f      	mov	r7, r1
 800e71a:	f7f2 fa1d 	bl	8000b58 <__aeabi_d2iz>
 800e71e:	2200      	movs	r2, #0
 800e720:	9000      	str	r0, [sp, #0]
 800e722:	2300      	movs	r3, #0
 800e724:	4630      	mov	r0, r6
 800e726:	4639      	mov	r1, r7
 800e728:	f7f2 f9d8 	bl	8000adc <__aeabi_dcmplt>
 800e72c:	b150      	cbz	r0, 800e744 <_dtoa_r+0x184>
 800e72e:	9800      	ldr	r0, [sp, #0]
 800e730:	f7f1 fef8 	bl	8000524 <__aeabi_i2d>
 800e734:	4632      	mov	r2, r6
 800e736:	463b      	mov	r3, r7
 800e738:	f7f2 f9c6 	bl	8000ac8 <__aeabi_dcmpeq>
 800e73c:	b910      	cbnz	r0, 800e744 <_dtoa_r+0x184>
 800e73e:	9b00      	ldr	r3, [sp, #0]
 800e740:	3b01      	subs	r3, #1
 800e742:	9300      	str	r3, [sp, #0]
 800e744:	9b00      	ldr	r3, [sp, #0]
 800e746:	2b16      	cmp	r3, #22
 800e748:	d85a      	bhi.n	800e800 <_dtoa_r+0x240>
 800e74a:	9a00      	ldr	r2, [sp, #0]
 800e74c:	4b57      	ldr	r3, [pc, #348]	; (800e8ac <_dtoa_r+0x2ec>)
 800e74e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e756:	ec51 0b19 	vmov	r0, r1, d9
 800e75a:	f7f2 f9bf 	bl	8000adc <__aeabi_dcmplt>
 800e75e:	2800      	cmp	r0, #0
 800e760:	d050      	beq.n	800e804 <_dtoa_r+0x244>
 800e762:	9b00      	ldr	r3, [sp, #0]
 800e764:	3b01      	subs	r3, #1
 800e766:	9300      	str	r3, [sp, #0]
 800e768:	2300      	movs	r3, #0
 800e76a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e76c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e76e:	1b5d      	subs	r5, r3, r5
 800e770:	1e6b      	subs	r3, r5, #1
 800e772:	9305      	str	r3, [sp, #20]
 800e774:	bf45      	ittet	mi
 800e776:	f1c5 0301 	rsbmi	r3, r5, #1
 800e77a:	9304      	strmi	r3, [sp, #16]
 800e77c:	2300      	movpl	r3, #0
 800e77e:	2300      	movmi	r3, #0
 800e780:	bf4c      	ite	mi
 800e782:	9305      	strmi	r3, [sp, #20]
 800e784:	9304      	strpl	r3, [sp, #16]
 800e786:	9b00      	ldr	r3, [sp, #0]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	db3d      	blt.n	800e808 <_dtoa_r+0x248>
 800e78c:	9b05      	ldr	r3, [sp, #20]
 800e78e:	9a00      	ldr	r2, [sp, #0]
 800e790:	920a      	str	r2, [sp, #40]	; 0x28
 800e792:	4413      	add	r3, r2
 800e794:	9305      	str	r3, [sp, #20]
 800e796:	2300      	movs	r3, #0
 800e798:	9307      	str	r3, [sp, #28]
 800e79a:	9b06      	ldr	r3, [sp, #24]
 800e79c:	2b09      	cmp	r3, #9
 800e79e:	f200 8089 	bhi.w	800e8b4 <_dtoa_r+0x2f4>
 800e7a2:	2b05      	cmp	r3, #5
 800e7a4:	bfc4      	itt	gt
 800e7a6:	3b04      	subgt	r3, #4
 800e7a8:	9306      	strgt	r3, [sp, #24]
 800e7aa:	9b06      	ldr	r3, [sp, #24]
 800e7ac:	f1a3 0302 	sub.w	r3, r3, #2
 800e7b0:	bfcc      	ite	gt
 800e7b2:	2500      	movgt	r5, #0
 800e7b4:	2501      	movle	r5, #1
 800e7b6:	2b03      	cmp	r3, #3
 800e7b8:	f200 8087 	bhi.w	800e8ca <_dtoa_r+0x30a>
 800e7bc:	e8df f003 	tbb	[pc, r3]
 800e7c0:	59383a2d 	.word	0x59383a2d
 800e7c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e7c8:	441d      	add	r5, r3
 800e7ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e7ce:	2b20      	cmp	r3, #32
 800e7d0:	bfc1      	itttt	gt
 800e7d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e7d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e7da:	fa0b f303 	lslgt.w	r3, fp, r3
 800e7de:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e7e2:	bfda      	itte	le
 800e7e4:	f1c3 0320 	rsble	r3, r3, #32
 800e7e8:	fa06 f003 	lslle.w	r0, r6, r3
 800e7ec:	4318      	orrgt	r0, r3
 800e7ee:	f7f1 fe89 	bl	8000504 <__aeabi_ui2d>
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	4606      	mov	r6, r0
 800e7f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e7fa:	3d01      	subs	r5, #1
 800e7fc:	930e      	str	r3, [sp, #56]	; 0x38
 800e7fe:	e76a      	b.n	800e6d6 <_dtoa_r+0x116>
 800e800:	2301      	movs	r3, #1
 800e802:	e7b2      	b.n	800e76a <_dtoa_r+0x1aa>
 800e804:	900b      	str	r0, [sp, #44]	; 0x2c
 800e806:	e7b1      	b.n	800e76c <_dtoa_r+0x1ac>
 800e808:	9b04      	ldr	r3, [sp, #16]
 800e80a:	9a00      	ldr	r2, [sp, #0]
 800e80c:	1a9b      	subs	r3, r3, r2
 800e80e:	9304      	str	r3, [sp, #16]
 800e810:	4253      	negs	r3, r2
 800e812:	9307      	str	r3, [sp, #28]
 800e814:	2300      	movs	r3, #0
 800e816:	930a      	str	r3, [sp, #40]	; 0x28
 800e818:	e7bf      	b.n	800e79a <_dtoa_r+0x1da>
 800e81a:	2300      	movs	r3, #0
 800e81c:	9308      	str	r3, [sp, #32]
 800e81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e820:	2b00      	cmp	r3, #0
 800e822:	dc55      	bgt.n	800e8d0 <_dtoa_r+0x310>
 800e824:	2301      	movs	r3, #1
 800e826:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e82a:	461a      	mov	r2, r3
 800e82c:	9209      	str	r2, [sp, #36]	; 0x24
 800e82e:	e00c      	b.n	800e84a <_dtoa_r+0x28a>
 800e830:	2301      	movs	r3, #1
 800e832:	e7f3      	b.n	800e81c <_dtoa_r+0x25c>
 800e834:	2300      	movs	r3, #0
 800e836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e838:	9308      	str	r3, [sp, #32]
 800e83a:	9b00      	ldr	r3, [sp, #0]
 800e83c:	4413      	add	r3, r2
 800e83e:	9302      	str	r3, [sp, #8]
 800e840:	3301      	adds	r3, #1
 800e842:	2b01      	cmp	r3, #1
 800e844:	9303      	str	r3, [sp, #12]
 800e846:	bfb8      	it	lt
 800e848:	2301      	movlt	r3, #1
 800e84a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e84c:	2200      	movs	r2, #0
 800e84e:	6042      	str	r2, [r0, #4]
 800e850:	2204      	movs	r2, #4
 800e852:	f102 0614 	add.w	r6, r2, #20
 800e856:	429e      	cmp	r6, r3
 800e858:	6841      	ldr	r1, [r0, #4]
 800e85a:	d93d      	bls.n	800e8d8 <_dtoa_r+0x318>
 800e85c:	4620      	mov	r0, r4
 800e85e:	f000 fca9 	bl	800f1b4 <_Balloc>
 800e862:	9001      	str	r0, [sp, #4]
 800e864:	2800      	cmp	r0, #0
 800e866:	d13b      	bne.n	800e8e0 <_dtoa_r+0x320>
 800e868:	4b11      	ldr	r3, [pc, #68]	; (800e8b0 <_dtoa_r+0x2f0>)
 800e86a:	4602      	mov	r2, r0
 800e86c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e870:	e6c0      	b.n	800e5f4 <_dtoa_r+0x34>
 800e872:	2301      	movs	r3, #1
 800e874:	e7df      	b.n	800e836 <_dtoa_r+0x276>
 800e876:	bf00      	nop
 800e878:	636f4361 	.word	0x636f4361
 800e87c:	3fd287a7 	.word	0x3fd287a7
 800e880:	8b60c8b3 	.word	0x8b60c8b3
 800e884:	3fc68a28 	.word	0x3fc68a28
 800e888:	509f79fb 	.word	0x509f79fb
 800e88c:	3fd34413 	.word	0x3fd34413
 800e890:	08011da1 	.word	0x08011da1
 800e894:	08011db8 	.word	0x08011db8
 800e898:	7ff00000 	.word	0x7ff00000
 800e89c:	08011d9d 	.word	0x08011d9d
 800e8a0:	08011d94 	.word	0x08011d94
 800e8a4:	08011d71 	.word	0x08011d71
 800e8a8:	3ff80000 	.word	0x3ff80000
 800e8ac:	08011ea8 	.word	0x08011ea8
 800e8b0:	08011e13 	.word	0x08011e13
 800e8b4:	2501      	movs	r5, #1
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	9306      	str	r3, [sp, #24]
 800e8ba:	9508      	str	r5, [sp, #32]
 800e8bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e8c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	2312      	movs	r3, #18
 800e8c8:	e7b0      	b.n	800e82c <_dtoa_r+0x26c>
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	9308      	str	r3, [sp, #32]
 800e8ce:	e7f5      	b.n	800e8bc <_dtoa_r+0x2fc>
 800e8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e8d6:	e7b8      	b.n	800e84a <_dtoa_r+0x28a>
 800e8d8:	3101      	adds	r1, #1
 800e8da:	6041      	str	r1, [r0, #4]
 800e8dc:	0052      	lsls	r2, r2, #1
 800e8de:	e7b8      	b.n	800e852 <_dtoa_r+0x292>
 800e8e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8e2:	9a01      	ldr	r2, [sp, #4]
 800e8e4:	601a      	str	r2, [r3, #0]
 800e8e6:	9b03      	ldr	r3, [sp, #12]
 800e8e8:	2b0e      	cmp	r3, #14
 800e8ea:	f200 809d 	bhi.w	800ea28 <_dtoa_r+0x468>
 800e8ee:	2d00      	cmp	r5, #0
 800e8f0:	f000 809a 	beq.w	800ea28 <_dtoa_r+0x468>
 800e8f4:	9b00      	ldr	r3, [sp, #0]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	dd32      	ble.n	800e960 <_dtoa_r+0x3a0>
 800e8fa:	4ab7      	ldr	r2, [pc, #732]	; (800ebd8 <_dtoa_r+0x618>)
 800e8fc:	f003 030f 	and.w	r3, r3, #15
 800e900:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e904:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e908:	9b00      	ldr	r3, [sp, #0]
 800e90a:	05d8      	lsls	r0, r3, #23
 800e90c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e910:	d516      	bpl.n	800e940 <_dtoa_r+0x380>
 800e912:	4bb2      	ldr	r3, [pc, #712]	; (800ebdc <_dtoa_r+0x61c>)
 800e914:	ec51 0b19 	vmov	r0, r1, d9
 800e918:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e91c:	f7f1 ff96 	bl	800084c <__aeabi_ddiv>
 800e920:	f007 070f 	and.w	r7, r7, #15
 800e924:	4682      	mov	sl, r0
 800e926:	468b      	mov	fp, r1
 800e928:	2503      	movs	r5, #3
 800e92a:	4eac      	ldr	r6, [pc, #688]	; (800ebdc <_dtoa_r+0x61c>)
 800e92c:	b957      	cbnz	r7, 800e944 <_dtoa_r+0x384>
 800e92e:	4642      	mov	r2, r8
 800e930:	464b      	mov	r3, r9
 800e932:	4650      	mov	r0, sl
 800e934:	4659      	mov	r1, fp
 800e936:	f7f1 ff89 	bl	800084c <__aeabi_ddiv>
 800e93a:	4682      	mov	sl, r0
 800e93c:	468b      	mov	fp, r1
 800e93e:	e028      	b.n	800e992 <_dtoa_r+0x3d2>
 800e940:	2502      	movs	r5, #2
 800e942:	e7f2      	b.n	800e92a <_dtoa_r+0x36a>
 800e944:	07f9      	lsls	r1, r7, #31
 800e946:	d508      	bpl.n	800e95a <_dtoa_r+0x39a>
 800e948:	4640      	mov	r0, r8
 800e94a:	4649      	mov	r1, r9
 800e94c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e950:	f7f1 fe52 	bl	80005f8 <__aeabi_dmul>
 800e954:	3501      	adds	r5, #1
 800e956:	4680      	mov	r8, r0
 800e958:	4689      	mov	r9, r1
 800e95a:	107f      	asrs	r7, r7, #1
 800e95c:	3608      	adds	r6, #8
 800e95e:	e7e5      	b.n	800e92c <_dtoa_r+0x36c>
 800e960:	f000 809b 	beq.w	800ea9a <_dtoa_r+0x4da>
 800e964:	9b00      	ldr	r3, [sp, #0]
 800e966:	4f9d      	ldr	r7, [pc, #628]	; (800ebdc <_dtoa_r+0x61c>)
 800e968:	425e      	negs	r6, r3
 800e96a:	4b9b      	ldr	r3, [pc, #620]	; (800ebd8 <_dtoa_r+0x618>)
 800e96c:	f006 020f 	and.w	r2, r6, #15
 800e970:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e978:	ec51 0b19 	vmov	r0, r1, d9
 800e97c:	f7f1 fe3c 	bl	80005f8 <__aeabi_dmul>
 800e980:	1136      	asrs	r6, r6, #4
 800e982:	4682      	mov	sl, r0
 800e984:	468b      	mov	fp, r1
 800e986:	2300      	movs	r3, #0
 800e988:	2502      	movs	r5, #2
 800e98a:	2e00      	cmp	r6, #0
 800e98c:	d17a      	bne.n	800ea84 <_dtoa_r+0x4c4>
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d1d3      	bne.n	800e93a <_dtoa_r+0x37a>
 800e992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e994:	2b00      	cmp	r3, #0
 800e996:	f000 8082 	beq.w	800ea9e <_dtoa_r+0x4de>
 800e99a:	4b91      	ldr	r3, [pc, #580]	; (800ebe0 <_dtoa_r+0x620>)
 800e99c:	2200      	movs	r2, #0
 800e99e:	4650      	mov	r0, sl
 800e9a0:	4659      	mov	r1, fp
 800e9a2:	f7f2 f89b 	bl	8000adc <__aeabi_dcmplt>
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	d079      	beq.n	800ea9e <_dtoa_r+0x4de>
 800e9aa:	9b03      	ldr	r3, [sp, #12]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d076      	beq.n	800ea9e <_dtoa_r+0x4de>
 800e9b0:	9b02      	ldr	r3, [sp, #8]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	dd36      	ble.n	800ea24 <_dtoa_r+0x464>
 800e9b6:	9b00      	ldr	r3, [sp, #0]
 800e9b8:	4650      	mov	r0, sl
 800e9ba:	4659      	mov	r1, fp
 800e9bc:	1e5f      	subs	r7, r3, #1
 800e9be:	2200      	movs	r2, #0
 800e9c0:	4b88      	ldr	r3, [pc, #544]	; (800ebe4 <_dtoa_r+0x624>)
 800e9c2:	f7f1 fe19 	bl	80005f8 <__aeabi_dmul>
 800e9c6:	9e02      	ldr	r6, [sp, #8]
 800e9c8:	4682      	mov	sl, r0
 800e9ca:	468b      	mov	fp, r1
 800e9cc:	3501      	adds	r5, #1
 800e9ce:	4628      	mov	r0, r5
 800e9d0:	f7f1 fda8 	bl	8000524 <__aeabi_i2d>
 800e9d4:	4652      	mov	r2, sl
 800e9d6:	465b      	mov	r3, fp
 800e9d8:	f7f1 fe0e 	bl	80005f8 <__aeabi_dmul>
 800e9dc:	4b82      	ldr	r3, [pc, #520]	; (800ebe8 <_dtoa_r+0x628>)
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f7f1 fc54 	bl	800028c <__adddf3>
 800e9e4:	46d0      	mov	r8, sl
 800e9e6:	46d9      	mov	r9, fp
 800e9e8:	4682      	mov	sl, r0
 800e9ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e9ee:	2e00      	cmp	r6, #0
 800e9f0:	d158      	bne.n	800eaa4 <_dtoa_r+0x4e4>
 800e9f2:	4b7e      	ldr	r3, [pc, #504]	; (800ebec <_dtoa_r+0x62c>)
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	4640      	mov	r0, r8
 800e9f8:	4649      	mov	r1, r9
 800e9fa:	f7f1 fc45 	bl	8000288 <__aeabi_dsub>
 800e9fe:	4652      	mov	r2, sl
 800ea00:	465b      	mov	r3, fp
 800ea02:	4680      	mov	r8, r0
 800ea04:	4689      	mov	r9, r1
 800ea06:	f7f2 f887 	bl	8000b18 <__aeabi_dcmpgt>
 800ea0a:	2800      	cmp	r0, #0
 800ea0c:	f040 8295 	bne.w	800ef3a <_dtoa_r+0x97a>
 800ea10:	4652      	mov	r2, sl
 800ea12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ea16:	4640      	mov	r0, r8
 800ea18:	4649      	mov	r1, r9
 800ea1a:	f7f2 f85f 	bl	8000adc <__aeabi_dcmplt>
 800ea1e:	2800      	cmp	r0, #0
 800ea20:	f040 8289 	bne.w	800ef36 <_dtoa_r+0x976>
 800ea24:	ec5b ab19 	vmov	sl, fp, d9
 800ea28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	f2c0 8148 	blt.w	800ecc0 <_dtoa_r+0x700>
 800ea30:	9a00      	ldr	r2, [sp, #0]
 800ea32:	2a0e      	cmp	r2, #14
 800ea34:	f300 8144 	bgt.w	800ecc0 <_dtoa_r+0x700>
 800ea38:	4b67      	ldr	r3, [pc, #412]	; (800ebd8 <_dtoa_r+0x618>)
 800ea3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	f280 80d5 	bge.w	800ebf4 <_dtoa_r+0x634>
 800ea4a:	9b03      	ldr	r3, [sp, #12]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	f300 80d1 	bgt.w	800ebf4 <_dtoa_r+0x634>
 800ea52:	f040 826f 	bne.w	800ef34 <_dtoa_r+0x974>
 800ea56:	4b65      	ldr	r3, [pc, #404]	; (800ebec <_dtoa_r+0x62c>)
 800ea58:	2200      	movs	r2, #0
 800ea5a:	4640      	mov	r0, r8
 800ea5c:	4649      	mov	r1, r9
 800ea5e:	f7f1 fdcb 	bl	80005f8 <__aeabi_dmul>
 800ea62:	4652      	mov	r2, sl
 800ea64:	465b      	mov	r3, fp
 800ea66:	f7f2 f84d 	bl	8000b04 <__aeabi_dcmpge>
 800ea6a:	9e03      	ldr	r6, [sp, #12]
 800ea6c:	4637      	mov	r7, r6
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	f040 8245 	bne.w	800eefe <_dtoa_r+0x93e>
 800ea74:	9d01      	ldr	r5, [sp, #4]
 800ea76:	2331      	movs	r3, #49	; 0x31
 800ea78:	f805 3b01 	strb.w	r3, [r5], #1
 800ea7c:	9b00      	ldr	r3, [sp, #0]
 800ea7e:	3301      	adds	r3, #1
 800ea80:	9300      	str	r3, [sp, #0]
 800ea82:	e240      	b.n	800ef06 <_dtoa_r+0x946>
 800ea84:	07f2      	lsls	r2, r6, #31
 800ea86:	d505      	bpl.n	800ea94 <_dtoa_r+0x4d4>
 800ea88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea8c:	f7f1 fdb4 	bl	80005f8 <__aeabi_dmul>
 800ea90:	3501      	adds	r5, #1
 800ea92:	2301      	movs	r3, #1
 800ea94:	1076      	asrs	r6, r6, #1
 800ea96:	3708      	adds	r7, #8
 800ea98:	e777      	b.n	800e98a <_dtoa_r+0x3ca>
 800ea9a:	2502      	movs	r5, #2
 800ea9c:	e779      	b.n	800e992 <_dtoa_r+0x3d2>
 800ea9e:	9f00      	ldr	r7, [sp, #0]
 800eaa0:	9e03      	ldr	r6, [sp, #12]
 800eaa2:	e794      	b.n	800e9ce <_dtoa_r+0x40e>
 800eaa4:	9901      	ldr	r1, [sp, #4]
 800eaa6:	4b4c      	ldr	r3, [pc, #304]	; (800ebd8 <_dtoa_r+0x618>)
 800eaa8:	4431      	add	r1, r6
 800eaaa:	910d      	str	r1, [sp, #52]	; 0x34
 800eaac:	9908      	ldr	r1, [sp, #32]
 800eaae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800eab2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eab6:	2900      	cmp	r1, #0
 800eab8:	d043      	beq.n	800eb42 <_dtoa_r+0x582>
 800eaba:	494d      	ldr	r1, [pc, #308]	; (800ebf0 <_dtoa_r+0x630>)
 800eabc:	2000      	movs	r0, #0
 800eabe:	f7f1 fec5 	bl	800084c <__aeabi_ddiv>
 800eac2:	4652      	mov	r2, sl
 800eac4:	465b      	mov	r3, fp
 800eac6:	f7f1 fbdf 	bl	8000288 <__aeabi_dsub>
 800eaca:	9d01      	ldr	r5, [sp, #4]
 800eacc:	4682      	mov	sl, r0
 800eace:	468b      	mov	fp, r1
 800ead0:	4649      	mov	r1, r9
 800ead2:	4640      	mov	r0, r8
 800ead4:	f7f2 f840 	bl	8000b58 <__aeabi_d2iz>
 800ead8:	4606      	mov	r6, r0
 800eada:	f7f1 fd23 	bl	8000524 <__aeabi_i2d>
 800eade:	4602      	mov	r2, r0
 800eae0:	460b      	mov	r3, r1
 800eae2:	4640      	mov	r0, r8
 800eae4:	4649      	mov	r1, r9
 800eae6:	f7f1 fbcf 	bl	8000288 <__aeabi_dsub>
 800eaea:	3630      	adds	r6, #48	; 0x30
 800eaec:	f805 6b01 	strb.w	r6, [r5], #1
 800eaf0:	4652      	mov	r2, sl
 800eaf2:	465b      	mov	r3, fp
 800eaf4:	4680      	mov	r8, r0
 800eaf6:	4689      	mov	r9, r1
 800eaf8:	f7f1 fff0 	bl	8000adc <__aeabi_dcmplt>
 800eafc:	2800      	cmp	r0, #0
 800eafe:	d163      	bne.n	800ebc8 <_dtoa_r+0x608>
 800eb00:	4642      	mov	r2, r8
 800eb02:	464b      	mov	r3, r9
 800eb04:	4936      	ldr	r1, [pc, #216]	; (800ebe0 <_dtoa_r+0x620>)
 800eb06:	2000      	movs	r0, #0
 800eb08:	f7f1 fbbe 	bl	8000288 <__aeabi_dsub>
 800eb0c:	4652      	mov	r2, sl
 800eb0e:	465b      	mov	r3, fp
 800eb10:	f7f1 ffe4 	bl	8000adc <__aeabi_dcmplt>
 800eb14:	2800      	cmp	r0, #0
 800eb16:	f040 80b5 	bne.w	800ec84 <_dtoa_r+0x6c4>
 800eb1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb1c:	429d      	cmp	r5, r3
 800eb1e:	d081      	beq.n	800ea24 <_dtoa_r+0x464>
 800eb20:	4b30      	ldr	r3, [pc, #192]	; (800ebe4 <_dtoa_r+0x624>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	4650      	mov	r0, sl
 800eb26:	4659      	mov	r1, fp
 800eb28:	f7f1 fd66 	bl	80005f8 <__aeabi_dmul>
 800eb2c:	4b2d      	ldr	r3, [pc, #180]	; (800ebe4 <_dtoa_r+0x624>)
 800eb2e:	4682      	mov	sl, r0
 800eb30:	468b      	mov	fp, r1
 800eb32:	4640      	mov	r0, r8
 800eb34:	4649      	mov	r1, r9
 800eb36:	2200      	movs	r2, #0
 800eb38:	f7f1 fd5e 	bl	80005f8 <__aeabi_dmul>
 800eb3c:	4680      	mov	r8, r0
 800eb3e:	4689      	mov	r9, r1
 800eb40:	e7c6      	b.n	800ead0 <_dtoa_r+0x510>
 800eb42:	4650      	mov	r0, sl
 800eb44:	4659      	mov	r1, fp
 800eb46:	f7f1 fd57 	bl	80005f8 <__aeabi_dmul>
 800eb4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb4c:	9d01      	ldr	r5, [sp, #4]
 800eb4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb50:	4682      	mov	sl, r0
 800eb52:	468b      	mov	fp, r1
 800eb54:	4649      	mov	r1, r9
 800eb56:	4640      	mov	r0, r8
 800eb58:	f7f1 fffe 	bl	8000b58 <__aeabi_d2iz>
 800eb5c:	4606      	mov	r6, r0
 800eb5e:	f7f1 fce1 	bl	8000524 <__aeabi_i2d>
 800eb62:	3630      	adds	r6, #48	; 0x30
 800eb64:	4602      	mov	r2, r0
 800eb66:	460b      	mov	r3, r1
 800eb68:	4640      	mov	r0, r8
 800eb6a:	4649      	mov	r1, r9
 800eb6c:	f7f1 fb8c 	bl	8000288 <__aeabi_dsub>
 800eb70:	f805 6b01 	strb.w	r6, [r5], #1
 800eb74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb76:	429d      	cmp	r5, r3
 800eb78:	4680      	mov	r8, r0
 800eb7a:	4689      	mov	r9, r1
 800eb7c:	f04f 0200 	mov.w	r2, #0
 800eb80:	d124      	bne.n	800ebcc <_dtoa_r+0x60c>
 800eb82:	4b1b      	ldr	r3, [pc, #108]	; (800ebf0 <_dtoa_r+0x630>)
 800eb84:	4650      	mov	r0, sl
 800eb86:	4659      	mov	r1, fp
 800eb88:	f7f1 fb80 	bl	800028c <__adddf3>
 800eb8c:	4602      	mov	r2, r0
 800eb8e:	460b      	mov	r3, r1
 800eb90:	4640      	mov	r0, r8
 800eb92:	4649      	mov	r1, r9
 800eb94:	f7f1 ffc0 	bl	8000b18 <__aeabi_dcmpgt>
 800eb98:	2800      	cmp	r0, #0
 800eb9a:	d173      	bne.n	800ec84 <_dtoa_r+0x6c4>
 800eb9c:	4652      	mov	r2, sl
 800eb9e:	465b      	mov	r3, fp
 800eba0:	4913      	ldr	r1, [pc, #76]	; (800ebf0 <_dtoa_r+0x630>)
 800eba2:	2000      	movs	r0, #0
 800eba4:	f7f1 fb70 	bl	8000288 <__aeabi_dsub>
 800eba8:	4602      	mov	r2, r0
 800ebaa:	460b      	mov	r3, r1
 800ebac:	4640      	mov	r0, r8
 800ebae:	4649      	mov	r1, r9
 800ebb0:	f7f1 ff94 	bl	8000adc <__aeabi_dcmplt>
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	f43f af35 	beq.w	800ea24 <_dtoa_r+0x464>
 800ebba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ebbc:	1e6b      	subs	r3, r5, #1
 800ebbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800ebc0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ebc4:	2b30      	cmp	r3, #48	; 0x30
 800ebc6:	d0f8      	beq.n	800ebba <_dtoa_r+0x5fa>
 800ebc8:	9700      	str	r7, [sp, #0]
 800ebca:	e049      	b.n	800ec60 <_dtoa_r+0x6a0>
 800ebcc:	4b05      	ldr	r3, [pc, #20]	; (800ebe4 <_dtoa_r+0x624>)
 800ebce:	f7f1 fd13 	bl	80005f8 <__aeabi_dmul>
 800ebd2:	4680      	mov	r8, r0
 800ebd4:	4689      	mov	r9, r1
 800ebd6:	e7bd      	b.n	800eb54 <_dtoa_r+0x594>
 800ebd8:	08011ea8 	.word	0x08011ea8
 800ebdc:	08011e80 	.word	0x08011e80
 800ebe0:	3ff00000 	.word	0x3ff00000
 800ebe4:	40240000 	.word	0x40240000
 800ebe8:	401c0000 	.word	0x401c0000
 800ebec:	40140000 	.word	0x40140000
 800ebf0:	3fe00000 	.word	0x3fe00000
 800ebf4:	9d01      	ldr	r5, [sp, #4]
 800ebf6:	4656      	mov	r6, sl
 800ebf8:	465f      	mov	r7, fp
 800ebfa:	4642      	mov	r2, r8
 800ebfc:	464b      	mov	r3, r9
 800ebfe:	4630      	mov	r0, r6
 800ec00:	4639      	mov	r1, r7
 800ec02:	f7f1 fe23 	bl	800084c <__aeabi_ddiv>
 800ec06:	f7f1 ffa7 	bl	8000b58 <__aeabi_d2iz>
 800ec0a:	4682      	mov	sl, r0
 800ec0c:	f7f1 fc8a 	bl	8000524 <__aeabi_i2d>
 800ec10:	4642      	mov	r2, r8
 800ec12:	464b      	mov	r3, r9
 800ec14:	f7f1 fcf0 	bl	80005f8 <__aeabi_dmul>
 800ec18:	4602      	mov	r2, r0
 800ec1a:	460b      	mov	r3, r1
 800ec1c:	4630      	mov	r0, r6
 800ec1e:	4639      	mov	r1, r7
 800ec20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ec24:	f7f1 fb30 	bl	8000288 <__aeabi_dsub>
 800ec28:	f805 6b01 	strb.w	r6, [r5], #1
 800ec2c:	9e01      	ldr	r6, [sp, #4]
 800ec2e:	9f03      	ldr	r7, [sp, #12]
 800ec30:	1bae      	subs	r6, r5, r6
 800ec32:	42b7      	cmp	r7, r6
 800ec34:	4602      	mov	r2, r0
 800ec36:	460b      	mov	r3, r1
 800ec38:	d135      	bne.n	800eca6 <_dtoa_r+0x6e6>
 800ec3a:	f7f1 fb27 	bl	800028c <__adddf3>
 800ec3e:	4642      	mov	r2, r8
 800ec40:	464b      	mov	r3, r9
 800ec42:	4606      	mov	r6, r0
 800ec44:	460f      	mov	r7, r1
 800ec46:	f7f1 ff67 	bl	8000b18 <__aeabi_dcmpgt>
 800ec4a:	b9d0      	cbnz	r0, 800ec82 <_dtoa_r+0x6c2>
 800ec4c:	4642      	mov	r2, r8
 800ec4e:	464b      	mov	r3, r9
 800ec50:	4630      	mov	r0, r6
 800ec52:	4639      	mov	r1, r7
 800ec54:	f7f1 ff38 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec58:	b110      	cbz	r0, 800ec60 <_dtoa_r+0x6a0>
 800ec5a:	f01a 0f01 	tst.w	sl, #1
 800ec5e:	d110      	bne.n	800ec82 <_dtoa_r+0x6c2>
 800ec60:	4620      	mov	r0, r4
 800ec62:	ee18 1a10 	vmov	r1, s16
 800ec66:	f000 fae5 	bl	800f234 <_Bfree>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	9800      	ldr	r0, [sp, #0]
 800ec6e:	702b      	strb	r3, [r5, #0]
 800ec70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec72:	3001      	adds	r0, #1
 800ec74:	6018      	str	r0, [r3, #0]
 800ec76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	f43f acf1 	beq.w	800e660 <_dtoa_r+0xa0>
 800ec7e:	601d      	str	r5, [r3, #0]
 800ec80:	e4ee      	b.n	800e660 <_dtoa_r+0xa0>
 800ec82:	9f00      	ldr	r7, [sp, #0]
 800ec84:	462b      	mov	r3, r5
 800ec86:	461d      	mov	r5, r3
 800ec88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec8c:	2a39      	cmp	r2, #57	; 0x39
 800ec8e:	d106      	bne.n	800ec9e <_dtoa_r+0x6de>
 800ec90:	9a01      	ldr	r2, [sp, #4]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d1f7      	bne.n	800ec86 <_dtoa_r+0x6c6>
 800ec96:	9901      	ldr	r1, [sp, #4]
 800ec98:	2230      	movs	r2, #48	; 0x30
 800ec9a:	3701      	adds	r7, #1
 800ec9c:	700a      	strb	r2, [r1, #0]
 800ec9e:	781a      	ldrb	r2, [r3, #0]
 800eca0:	3201      	adds	r2, #1
 800eca2:	701a      	strb	r2, [r3, #0]
 800eca4:	e790      	b.n	800ebc8 <_dtoa_r+0x608>
 800eca6:	4ba6      	ldr	r3, [pc, #664]	; (800ef40 <_dtoa_r+0x980>)
 800eca8:	2200      	movs	r2, #0
 800ecaa:	f7f1 fca5 	bl	80005f8 <__aeabi_dmul>
 800ecae:	2200      	movs	r2, #0
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	4606      	mov	r6, r0
 800ecb4:	460f      	mov	r7, r1
 800ecb6:	f7f1 ff07 	bl	8000ac8 <__aeabi_dcmpeq>
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	d09d      	beq.n	800ebfa <_dtoa_r+0x63a>
 800ecbe:	e7cf      	b.n	800ec60 <_dtoa_r+0x6a0>
 800ecc0:	9a08      	ldr	r2, [sp, #32]
 800ecc2:	2a00      	cmp	r2, #0
 800ecc4:	f000 80d7 	beq.w	800ee76 <_dtoa_r+0x8b6>
 800ecc8:	9a06      	ldr	r2, [sp, #24]
 800ecca:	2a01      	cmp	r2, #1
 800eccc:	f300 80ba 	bgt.w	800ee44 <_dtoa_r+0x884>
 800ecd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecd2:	2a00      	cmp	r2, #0
 800ecd4:	f000 80b2 	beq.w	800ee3c <_dtoa_r+0x87c>
 800ecd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ecdc:	9e07      	ldr	r6, [sp, #28]
 800ecde:	9d04      	ldr	r5, [sp, #16]
 800ece0:	9a04      	ldr	r2, [sp, #16]
 800ece2:	441a      	add	r2, r3
 800ece4:	9204      	str	r2, [sp, #16]
 800ece6:	9a05      	ldr	r2, [sp, #20]
 800ece8:	2101      	movs	r1, #1
 800ecea:	441a      	add	r2, r3
 800ecec:	4620      	mov	r0, r4
 800ecee:	9205      	str	r2, [sp, #20]
 800ecf0:	f000 fb58 	bl	800f3a4 <__i2b>
 800ecf4:	4607      	mov	r7, r0
 800ecf6:	2d00      	cmp	r5, #0
 800ecf8:	dd0c      	ble.n	800ed14 <_dtoa_r+0x754>
 800ecfa:	9b05      	ldr	r3, [sp, #20]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	dd09      	ble.n	800ed14 <_dtoa_r+0x754>
 800ed00:	42ab      	cmp	r3, r5
 800ed02:	9a04      	ldr	r2, [sp, #16]
 800ed04:	bfa8      	it	ge
 800ed06:	462b      	movge	r3, r5
 800ed08:	1ad2      	subs	r2, r2, r3
 800ed0a:	9204      	str	r2, [sp, #16]
 800ed0c:	9a05      	ldr	r2, [sp, #20]
 800ed0e:	1aed      	subs	r5, r5, r3
 800ed10:	1ad3      	subs	r3, r2, r3
 800ed12:	9305      	str	r3, [sp, #20]
 800ed14:	9b07      	ldr	r3, [sp, #28]
 800ed16:	b31b      	cbz	r3, 800ed60 <_dtoa_r+0x7a0>
 800ed18:	9b08      	ldr	r3, [sp, #32]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	f000 80af 	beq.w	800ee7e <_dtoa_r+0x8be>
 800ed20:	2e00      	cmp	r6, #0
 800ed22:	dd13      	ble.n	800ed4c <_dtoa_r+0x78c>
 800ed24:	4639      	mov	r1, r7
 800ed26:	4632      	mov	r2, r6
 800ed28:	4620      	mov	r0, r4
 800ed2a:	f000 fbfb 	bl	800f524 <__pow5mult>
 800ed2e:	ee18 2a10 	vmov	r2, s16
 800ed32:	4601      	mov	r1, r0
 800ed34:	4607      	mov	r7, r0
 800ed36:	4620      	mov	r0, r4
 800ed38:	f000 fb4a 	bl	800f3d0 <__multiply>
 800ed3c:	ee18 1a10 	vmov	r1, s16
 800ed40:	4680      	mov	r8, r0
 800ed42:	4620      	mov	r0, r4
 800ed44:	f000 fa76 	bl	800f234 <_Bfree>
 800ed48:	ee08 8a10 	vmov	s16, r8
 800ed4c:	9b07      	ldr	r3, [sp, #28]
 800ed4e:	1b9a      	subs	r2, r3, r6
 800ed50:	d006      	beq.n	800ed60 <_dtoa_r+0x7a0>
 800ed52:	ee18 1a10 	vmov	r1, s16
 800ed56:	4620      	mov	r0, r4
 800ed58:	f000 fbe4 	bl	800f524 <__pow5mult>
 800ed5c:	ee08 0a10 	vmov	s16, r0
 800ed60:	2101      	movs	r1, #1
 800ed62:	4620      	mov	r0, r4
 800ed64:	f000 fb1e 	bl	800f3a4 <__i2b>
 800ed68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	4606      	mov	r6, r0
 800ed6e:	f340 8088 	ble.w	800ee82 <_dtoa_r+0x8c2>
 800ed72:	461a      	mov	r2, r3
 800ed74:	4601      	mov	r1, r0
 800ed76:	4620      	mov	r0, r4
 800ed78:	f000 fbd4 	bl	800f524 <__pow5mult>
 800ed7c:	9b06      	ldr	r3, [sp, #24]
 800ed7e:	2b01      	cmp	r3, #1
 800ed80:	4606      	mov	r6, r0
 800ed82:	f340 8081 	ble.w	800ee88 <_dtoa_r+0x8c8>
 800ed86:	f04f 0800 	mov.w	r8, #0
 800ed8a:	6933      	ldr	r3, [r6, #16]
 800ed8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ed90:	6918      	ldr	r0, [r3, #16]
 800ed92:	f000 fab7 	bl	800f304 <__hi0bits>
 800ed96:	f1c0 0020 	rsb	r0, r0, #32
 800ed9a:	9b05      	ldr	r3, [sp, #20]
 800ed9c:	4418      	add	r0, r3
 800ed9e:	f010 001f 	ands.w	r0, r0, #31
 800eda2:	f000 8092 	beq.w	800eeca <_dtoa_r+0x90a>
 800eda6:	f1c0 0320 	rsb	r3, r0, #32
 800edaa:	2b04      	cmp	r3, #4
 800edac:	f340 808a 	ble.w	800eec4 <_dtoa_r+0x904>
 800edb0:	f1c0 001c 	rsb	r0, r0, #28
 800edb4:	9b04      	ldr	r3, [sp, #16]
 800edb6:	4403      	add	r3, r0
 800edb8:	9304      	str	r3, [sp, #16]
 800edba:	9b05      	ldr	r3, [sp, #20]
 800edbc:	4403      	add	r3, r0
 800edbe:	4405      	add	r5, r0
 800edc0:	9305      	str	r3, [sp, #20]
 800edc2:	9b04      	ldr	r3, [sp, #16]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	dd07      	ble.n	800edd8 <_dtoa_r+0x818>
 800edc8:	ee18 1a10 	vmov	r1, s16
 800edcc:	461a      	mov	r2, r3
 800edce:	4620      	mov	r0, r4
 800edd0:	f000 fc02 	bl	800f5d8 <__lshift>
 800edd4:	ee08 0a10 	vmov	s16, r0
 800edd8:	9b05      	ldr	r3, [sp, #20]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	dd05      	ble.n	800edea <_dtoa_r+0x82a>
 800edde:	4631      	mov	r1, r6
 800ede0:	461a      	mov	r2, r3
 800ede2:	4620      	mov	r0, r4
 800ede4:	f000 fbf8 	bl	800f5d8 <__lshift>
 800ede8:	4606      	mov	r6, r0
 800edea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800edec:	2b00      	cmp	r3, #0
 800edee:	d06e      	beq.n	800eece <_dtoa_r+0x90e>
 800edf0:	ee18 0a10 	vmov	r0, s16
 800edf4:	4631      	mov	r1, r6
 800edf6:	f000 fc5f 	bl	800f6b8 <__mcmp>
 800edfa:	2800      	cmp	r0, #0
 800edfc:	da67      	bge.n	800eece <_dtoa_r+0x90e>
 800edfe:	9b00      	ldr	r3, [sp, #0]
 800ee00:	3b01      	subs	r3, #1
 800ee02:	ee18 1a10 	vmov	r1, s16
 800ee06:	9300      	str	r3, [sp, #0]
 800ee08:	220a      	movs	r2, #10
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	f000 fa33 	bl	800f278 <__multadd>
 800ee12:	9b08      	ldr	r3, [sp, #32]
 800ee14:	ee08 0a10 	vmov	s16, r0
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	f000 81b1 	beq.w	800f180 <_dtoa_r+0xbc0>
 800ee1e:	2300      	movs	r3, #0
 800ee20:	4639      	mov	r1, r7
 800ee22:	220a      	movs	r2, #10
 800ee24:	4620      	mov	r0, r4
 800ee26:	f000 fa27 	bl	800f278 <__multadd>
 800ee2a:	9b02      	ldr	r3, [sp, #8]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	4607      	mov	r7, r0
 800ee30:	f300 808e 	bgt.w	800ef50 <_dtoa_r+0x990>
 800ee34:	9b06      	ldr	r3, [sp, #24]
 800ee36:	2b02      	cmp	r3, #2
 800ee38:	dc51      	bgt.n	800eede <_dtoa_r+0x91e>
 800ee3a:	e089      	b.n	800ef50 <_dtoa_r+0x990>
 800ee3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ee42:	e74b      	b.n	800ecdc <_dtoa_r+0x71c>
 800ee44:	9b03      	ldr	r3, [sp, #12]
 800ee46:	1e5e      	subs	r6, r3, #1
 800ee48:	9b07      	ldr	r3, [sp, #28]
 800ee4a:	42b3      	cmp	r3, r6
 800ee4c:	bfbf      	itttt	lt
 800ee4e:	9b07      	ldrlt	r3, [sp, #28]
 800ee50:	9607      	strlt	r6, [sp, #28]
 800ee52:	1af2      	sublt	r2, r6, r3
 800ee54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ee56:	bfb6      	itet	lt
 800ee58:	189b      	addlt	r3, r3, r2
 800ee5a:	1b9e      	subge	r6, r3, r6
 800ee5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ee5e:	9b03      	ldr	r3, [sp, #12]
 800ee60:	bfb8      	it	lt
 800ee62:	2600      	movlt	r6, #0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	bfb7      	itett	lt
 800ee68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ee6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ee70:	1a9d      	sublt	r5, r3, r2
 800ee72:	2300      	movlt	r3, #0
 800ee74:	e734      	b.n	800ece0 <_dtoa_r+0x720>
 800ee76:	9e07      	ldr	r6, [sp, #28]
 800ee78:	9d04      	ldr	r5, [sp, #16]
 800ee7a:	9f08      	ldr	r7, [sp, #32]
 800ee7c:	e73b      	b.n	800ecf6 <_dtoa_r+0x736>
 800ee7e:	9a07      	ldr	r2, [sp, #28]
 800ee80:	e767      	b.n	800ed52 <_dtoa_r+0x792>
 800ee82:	9b06      	ldr	r3, [sp, #24]
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	dc18      	bgt.n	800eeba <_dtoa_r+0x8fa>
 800ee88:	f1ba 0f00 	cmp.w	sl, #0
 800ee8c:	d115      	bne.n	800eeba <_dtoa_r+0x8fa>
 800ee8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee92:	b993      	cbnz	r3, 800eeba <_dtoa_r+0x8fa>
 800ee94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ee98:	0d1b      	lsrs	r3, r3, #20
 800ee9a:	051b      	lsls	r3, r3, #20
 800ee9c:	b183      	cbz	r3, 800eec0 <_dtoa_r+0x900>
 800ee9e:	9b04      	ldr	r3, [sp, #16]
 800eea0:	3301      	adds	r3, #1
 800eea2:	9304      	str	r3, [sp, #16]
 800eea4:	9b05      	ldr	r3, [sp, #20]
 800eea6:	3301      	adds	r3, #1
 800eea8:	9305      	str	r3, [sp, #20]
 800eeaa:	f04f 0801 	mov.w	r8, #1
 800eeae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	f47f af6a 	bne.w	800ed8a <_dtoa_r+0x7ca>
 800eeb6:	2001      	movs	r0, #1
 800eeb8:	e76f      	b.n	800ed9a <_dtoa_r+0x7da>
 800eeba:	f04f 0800 	mov.w	r8, #0
 800eebe:	e7f6      	b.n	800eeae <_dtoa_r+0x8ee>
 800eec0:	4698      	mov	r8, r3
 800eec2:	e7f4      	b.n	800eeae <_dtoa_r+0x8ee>
 800eec4:	f43f af7d 	beq.w	800edc2 <_dtoa_r+0x802>
 800eec8:	4618      	mov	r0, r3
 800eeca:	301c      	adds	r0, #28
 800eecc:	e772      	b.n	800edb4 <_dtoa_r+0x7f4>
 800eece:	9b03      	ldr	r3, [sp, #12]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	dc37      	bgt.n	800ef44 <_dtoa_r+0x984>
 800eed4:	9b06      	ldr	r3, [sp, #24]
 800eed6:	2b02      	cmp	r3, #2
 800eed8:	dd34      	ble.n	800ef44 <_dtoa_r+0x984>
 800eeda:	9b03      	ldr	r3, [sp, #12]
 800eedc:	9302      	str	r3, [sp, #8]
 800eede:	9b02      	ldr	r3, [sp, #8]
 800eee0:	b96b      	cbnz	r3, 800eefe <_dtoa_r+0x93e>
 800eee2:	4631      	mov	r1, r6
 800eee4:	2205      	movs	r2, #5
 800eee6:	4620      	mov	r0, r4
 800eee8:	f000 f9c6 	bl	800f278 <__multadd>
 800eeec:	4601      	mov	r1, r0
 800eeee:	4606      	mov	r6, r0
 800eef0:	ee18 0a10 	vmov	r0, s16
 800eef4:	f000 fbe0 	bl	800f6b8 <__mcmp>
 800eef8:	2800      	cmp	r0, #0
 800eefa:	f73f adbb 	bgt.w	800ea74 <_dtoa_r+0x4b4>
 800eefe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef00:	9d01      	ldr	r5, [sp, #4]
 800ef02:	43db      	mvns	r3, r3
 800ef04:	9300      	str	r3, [sp, #0]
 800ef06:	f04f 0800 	mov.w	r8, #0
 800ef0a:	4631      	mov	r1, r6
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	f000 f991 	bl	800f234 <_Bfree>
 800ef12:	2f00      	cmp	r7, #0
 800ef14:	f43f aea4 	beq.w	800ec60 <_dtoa_r+0x6a0>
 800ef18:	f1b8 0f00 	cmp.w	r8, #0
 800ef1c:	d005      	beq.n	800ef2a <_dtoa_r+0x96a>
 800ef1e:	45b8      	cmp	r8, r7
 800ef20:	d003      	beq.n	800ef2a <_dtoa_r+0x96a>
 800ef22:	4641      	mov	r1, r8
 800ef24:	4620      	mov	r0, r4
 800ef26:	f000 f985 	bl	800f234 <_Bfree>
 800ef2a:	4639      	mov	r1, r7
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	f000 f981 	bl	800f234 <_Bfree>
 800ef32:	e695      	b.n	800ec60 <_dtoa_r+0x6a0>
 800ef34:	2600      	movs	r6, #0
 800ef36:	4637      	mov	r7, r6
 800ef38:	e7e1      	b.n	800eefe <_dtoa_r+0x93e>
 800ef3a:	9700      	str	r7, [sp, #0]
 800ef3c:	4637      	mov	r7, r6
 800ef3e:	e599      	b.n	800ea74 <_dtoa_r+0x4b4>
 800ef40:	40240000 	.word	0x40240000
 800ef44:	9b08      	ldr	r3, [sp, #32]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	f000 80ca 	beq.w	800f0e0 <_dtoa_r+0xb20>
 800ef4c:	9b03      	ldr	r3, [sp, #12]
 800ef4e:	9302      	str	r3, [sp, #8]
 800ef50:	2d00      	cmp	r5, #0
 800ef52:	dd05      	ble.n	800ef60 <_dtoa_r+0x9a0>
 800ef54:	4639      	mov	r1, r7
 800ef56:	462a      	mov	r2, r5
 800ef58:	4620      	mov	r0, r4
 800ef5a:	f000 fb3d 	bl	800f5d8 <__lshift>
 800ef5e:	4607      	mov	r7, r0
 800ef60:	f1b8 0f00 	cmp.w	r8, #0
 800ef64:	d05b      	beq.n	800f01e <_dtoa_r+0xa5e>
 800ef66:	6879      	ldr	r1, [r7, #4]
 800ef68:	4620      	mov	r0, r4
 800ef6a:	f000 f923 	bl	800f1b4 <_Balloc>
 800ef6e:	4605      	mov	r5, r0
 800ef70:	b928      	cbnz	r0, 800ef7e <_dtoa_r+0x9be>
 800ef72:	4b87      	ldr	r3, [pc, #540]	; (800f190 <_dtoa_r+0xbd0>)
 800ef74:	4602      	mov	r2, r0
 800ef76:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ef7a:	f7ff bb3b 	b.w	800e5f4 <_dtoa_r+0x34>
 800ef7e:	693a      	ldr	r2, [r7, #16]
 800ef80:	3202      	adds	r2, #2
 800ef82:	0092      	lsls	r2, r2, #2
 800ef84:	f107 010c 	add.w	r1, r7, #12
 800ef88:	300c      	adds	r0, #12
 800ef8a:	f7fe fdb9 	bl	800db00 <memcpy>
 800ef8e:	2201      	movs	r2, #1
 800ef90:	4629      	mov	r1, r5
 800ef92:	4620      	mov	r0, r4
 800ef94:	f000 fb20 	bl	800f5d8 <__lshift>
 800ef98:	9b01      	ldr	r3, [sp, #4]
 800ef9a:	f103 0901 	add.w	r9, r3, #1
 800ef9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800efa2:	4413      	add	r3, r2
 800efa4:	9305      	str	r3, [sp, #20]
 800efa6:	f00a 0301 	and.w	r3, sl, #1
 800efaa:	46b8      	mov	r8, r7
 800efac:	9304      	str	r3, [sp, #16]
 800efae:	4607      	mov	r7, r0
 800efb0:	4631      	mov	r1, r6
 800efb2:	ee18 0a10 	vmov	r0, s16
 800efb6:	f7ff fa77 	bl	800e4a8 <quorem>
 800efba:	4641      	mov	r1, r8
 800efbc:	9002      	str	r0, [sp, #8]
 800efbe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800efc2:	ee18 0a10 	vmov	r0, s16
 800efc6:	f000 fb77 	bl	800f6b8 <__mcmp>
 800efca:	463a      	mov	r2, r7
 800efcc:	9003      	str	r0, [sp, #12]
 800efce:	4631      	mov	r1, r6
 800efd0:	4620      	mov	r0, r4
 800efd2:	f000 fb8d 	bl	800f6f0 <__mdiff>
 800efd6:	68c2      	ldr	r2, [r0, #12]
 800efd8:	f109 3bff 	add.w	fp, r9, #4294967295
 800efdc:	4605      	mov	r5, r0
 800efde:	bb02      	cbnz	r2, 800f022 <_dtoa_r+0xa62>
 800efe0:	4601      	mov	r1, r0
 800efe2:	ee18 0a10 	vmov	r0, s16
 800efe6:	f000 fb67 	bl	800f6b8 <__mcmp>
 800efea:	4602      	mov	r2, r0
 800efec:	4629      	mov	r1, r5
 800efee:	4620      	mov	r0, r4
 800eff0:	9207      	str	r2, [sp, #28]
 800eff2:	f000 f91f 	bl	800f234 <_Bfree>
 800eff6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800effa:	ea43 0102 	orr.w	r1, r3, r2
 800effe:	9b04      	ldr	r3, [sp, #16]
 800f000:	430b      	orrs	r3, r1
 800f002:	464d      	mov	r5, r9
 800f004:	d10f      	bne.n	800f026 <_dtoa_r+0xa66>
 800f006:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f00a:	d02a      	beq.n	800f062 <_dtoa_r+0xaa2>
 800f00c:	9b03      	ldr	r3, [sp, #12]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	dd02      	ble.n	800f018 <_dtoa_r+0xa58>
 800f012:	9b02      	ldr	r3, [sp, #8]
 800f014:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f018:	f88b a000 	strb.w	sl, [fp]
 800f01c:	e775      	b.n	800ef0a <_dtoa_r+0x94a>
 800f01e:	4638      	mov	r0, r7
 800f020:	e7ba      	b.n	800ef98 <_dtoa_r+0x9d8>
 800f022:	2201      	movs	r2, #1
 800f024:	e7e2      	b.n	800efec <_dtoa_r+0xa2c>
 800f026:	9b03      	ldr	r3, [sp, #12]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	db04      	blt.n	800f036 <_dtoa_r+0xa76>
 800f02c:	9906      	ldr	r1, [sp, #24]
 800f02e:	430b      	orrs	r3, r1
 800f030:	9904      	ldr	r1, [sp, #16]
 800f032:	430b      	orrs	r3, r1
 800f034:	d122      	bne.n	800f07c <_dtoa_r+0xabc>
 800f036:	2a00      	cmp	r2, #0
 800f038:	ddee      	ble.n	800f018 <_dtoa_r+0xa58>
 800f03a:	ee18 1a10 	vmov	r1, s16
 800f03e:	2201      	movs	r2, #1
 800f040:	4620      	mov	r0, r4
 800f042:	f000 fac9 	bl	800f5d8 <__lshift>
 800f046:	4631      	mov	r1, r6
 800f048:	ee08 0a10 	vmov	s16, r0
 800f04c:	f000 fb34 	bl	800f6b8 <__mcmp>
 800f050:	2800      	cmp	r0, #0
 800f052:	dc03      	bgt.n	800f05c <_dtoa_r+0xa9c>
 800f054:	d1e0      	bne.n	800f018 <_dtoa_r+0xa58>
 800f056:	f01a 0f01 	tst.w	sl, #1
 800f05a:	d0dd      	beq.n	800f018 <_dtoa_r+0xa58>
 800f05c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f060:	d1d7      	bne.n	800f012 <_dtoa_r+0xa52>
 800f062:	2339      	movs	r3, #57	; 0x39
 800f064:	f88b 3000 	strb.w	r3, [fp]
 800f068:	462b      	mov	r3, r5
 800f06a:	461d      	mov	r5, r3
 800f06c:	3b01      	subs	r3, #1
 800f06e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f072:	2a39      	cmp	r2, #57	; 0x39
 800f074:	d071      	beq.n	800f15a <_dtoa_r+0xb9a>
 800f076:	3201      	adds	r2, #1
 800f078:	701a      	strb	r2, [r3, #0]
 800f07a:	e746      	b.n	800ef0a <_dtoa_r+0x94a>
 800f07c:	2a00      	cmp	r2, #0
 800f07e:	dd07      	ble.n	800f090 <_dtoa_r+0xad0>
 800f080:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f084:	d0ed      	beq.n	800f062 <_dtoa_r+0xaa2>
 800f086:	f10a 0301 	add.w	r3, sl, #1
 800f08a:	f88b 3000 	strb.w	r3, [fp]
 800f08e:	e73c      	b.n	800ef0a <_dtoa_r+0x94a>
 800f090:	9b05      	ldr	r3, [sp, #20]
 800f092:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f096:	4599      	cmp	r9, r3
 800f098:	d047      	beq.n	800f12a <_dtoa_r+0xb6a>
 800f09a:	ee18 1a10 	vmov	r1, s16
 800f09e:	2300      	movs	r3, #0
 800f0a0:	220a      	movs	r2, #10
 800f0a2:	4620      	mov	r0, r4
 800f0a4:	f000 f8e8 	bl	800f278 <__multadd>
 800f0a8:	45b8      	cmp	r8, r7
 800f0aa:	ee08 0a10 	vmov	s16, r0
 800f0ae:	f04f 0300 	mov.w	r3, #0
 800f0b2:	f04f 020a 	mov.w	r2, #10
 800f0b6:	4641      	mov	r1, r8
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	d106      	bne.n	800f0ca <_dtoa_r+0xb0a>
 800f0bc:	f000 f8dc 	bl	800f278 <__multadd>
 800f0c0:	4680      	mov	r8, r0
 800f0c2:	4607      	mov	r7, r0
 800f0c4:	f109 0901 	add.w	r9, r9, #1
 800f0c8:	e772      	b.n	800efb0 <_dtoa_r+0x9f0>
 800f0ca:	f000 f8d5 	bl	800f278 <__multadd>
 800f0ce:	4639      	mov	r1, r7
 800f0d0:	4680      	mov	r8, r0
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	220a      	movs	r2, #10
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	f000 f8ce 	bl	800f278 <__multadd>
 800f0dc:	4607      	mov	r7, r0
 800f0de:	e7f1      	b.n	800f0c4 <_dtoa_r+0xb04>
 800f0e0:	9b03      	ldr	r3, [sp, #12]
 800f0e2:	9302      	str	r3, [sp, #8]
 800f0e4:	9d01      	ldr	r5, [sp, #4]
 800f0e6:	ee18 0a10 	vmov	r0, s16
 800f0ea:	4631      	mov	r1, r6
 800f0ec:	f7ff f9dc 	bl	800e4a8 <quorem>
 800f0f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f0f4:	9b01      	ldr	r3, [sp, #4]
 800f0f6:	f805 ab01 	strb.w	sl, [r5], #1
 800f0fa:	1aea      	subs	r2, r5, r3
 800f0fc:	9b02      	ldr	r3, [sp, #8]
 800f0fe:	4293      	cmp	r3, r2
 800f100:	dd09      	ble.n	800f116 <_dtoa_r+0xb56>
 800f102:	ee18 1a10 	vmov	r1, s16
 800f106:	2300      	movs	r3, #0
 800f108:	220a      	movs	r2, #10
 800f10a:	4620      	mov	r0, r4
 800f10c:	f000 f8b4 	bl	800f278 <__multadd>
 800f110:	ee08 0a10 	vmov	s16, r0
 800f114:	e7e7      	b.n	800f0e6 <_dtoa_r+0xb26>
 800f116:	9b02      	ldr	r3, [sp, #8]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	bfc8      	it	gt
 800f11c:	461d      	movgt	r5, r3
 800f11e:	9b01      	ldr	r3, [sp, #4]
 800f120:	bfd8      	it	le
 800f122:	2501      	movle	r5, #1
 800f124:	441d      	add	r5, r3
 800f126:	f04f 0800 	mov.w	r8, #0
 800f12a:	ee18 1a10 	vmov	r1, s16
 800f12e:	2201      	movs	r2, #1
 800f130:	4620      	mov	r0, r4
 800f132:	f000 fa51 	bl	800f5d8 <__lshift>
 800f136:	4631      	mov	r1, r6
 800f138:	ee08 0a10 	vmov	s16, r0
 800f13c:	f000 fabc 	bl	800f6b8 <__mcmp>
 800f140:	2800      	cmp	r0, #0
 800f142:	dc91      	bgt.n	800f068 <_dtoa_r+0xaa8>
 800f144:	d102      	bne.n	800f14c <_dtoa_r+0xb8c>
 800f146:	f01a 0f01 	tst.w	sl, #1
 800f14a:	d18d      	bne.n	800f068 <_dtoa_r+0xaa8>
 800f14c:	462b      	mov	r3, r5
 800f14e:	461d      	mov	r5, r3
 800f150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f154:	2a30      	cmp	r2, #48	; 0x30
 800f156:	d0fa      	beq.n	800f14e <_dtoa_r+0xb8e>
 800f158:	e6d7      	b.n	800ef0a <_dtoa_r+0x94a>
 800f15a:	9a01      	ldr	r2, [sp, #4]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d184      	bne.n	800f06a <_dtoa_r+0xaaa>
 800f160:	9b00      	ldr	r3, [sp, #0]
 800f162:	3301      	adds	r3, #1
 800f164:	9300      	str	r3, [sp, #0]
 800f166:	2331      	movs	r3, #49	; 0x31
 800f168:	7013      	strb	r3, [r2, #0]
 800f16a:	e6ce      	b.n	800ef0a <_dtoa_r+0x94a>
 800f16c:	4b09      	ldr	r3, [pc, #36]	; (800f194 <_dtoa_r+0xbd4>)
 800f16e:	f7ff ba95 	b.w	800e69c <_dtoa_r+0xdc>
 800f172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f174:	2b00      	cmp	r3, #0
 800f176:	f47f aa6e 	bne.w	800e656 <_dtoa_r+0x96>
 800f17a:	4b07      	ldr	r3, [pc, #28]	; (800f198 <_dtoa_r+0xbd8>)
 800f17c:	f7ff ba8e 	b.w	800e69c <_dtoa_r+0xdc>
 800f180:	9b02      	ldr	r3, [sp, #8]
 800f182:	2b00      	cmp	r3, #0
 800f184:	dcae      	bgt.n	800f0e4 <_dtoa_r+0xb24>
 800f186:	9b06      	ldr	r3, [sp, #24]
 800f188:	2b02      	cmp	r3, #2
 800f18a:	f73f aea8 	bgt.w	800eede <_dtoa_r+0x91e>
 800f18e:	e7a9      	b.n	800f0e4 <_dtoa_r+0xb24>
 800f190:	08011e13 	.word	0x08011e13
 800f194:	08011d70 	.word	0x08011d70
 800f198:	08011d94 	.word	0x08011d94

0800f19c <_localeconv_r>:
 800f19c:	4800      	ldr	r0, [pc, #0]	; (800f1a0 <_localeconv_r+0x4>)
 800f19e:	4770      	bx	lr
 800f1a0:	2000025c 	.word	0x2000025c

0800f1a4 <malloc>:
 800f1a4:	4b02      	ldr	r3, [pc, #8]	; (800f1b0 <malloc+0xc>)
 800f1a6:	4601      	mov	r1, r0
 800f1a8:	6818      	ldr	r0, [r3, #0]
 800f1aa:	f000 bc09 	b.w	800f9c0 <_malloc_r>
 800f1ae:	bf00      	nop
 800f1b0:	20000108 	.word	0x20000108

0800f1b4 <_Balloc>:
 800f1b4:	b570      	push	{r4, r5, r6, lr}
 800f1b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f1b8:	4604      	mov	r4, r0
 800f1ba:	460d      	mov	r5, r1
 800f1bc:	b976      	cbnz	r6, 800f1dc <_Balloc+0x28>
 800f1be:	2010      	movs	r0, #16
 800f1c0:	f7ff fff0 	bl	800f1a4 <malloc>
 800f1c4:	4602      	mov	r2, r0
 800f1c6:	6260      	str	r0, [r4, #36]	; 0x24
 800f1c8:	b920      	cbnz	r0, 800f1d4 <_Balloc+0x20>
 800f1ca:	4b18      	ldr	r3, [pc, #96]	; (800f22c <_Balloc+0x78>)
 800f1cc:	4818      	ldr	r0, [pc, #96]	; (800f230 <_Balloc+0x7c>)
 800f1ce:	2166      	movs	r1, #102	; 0x66
 800f1d0:	f000 fdd6 	bl	800fd80 <__assert_func>
 800f1d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f1d8:	6006      	str	r6, [r0, #0]
 800f1da:	60c6      	str	r6, [r0, #12]
 800f1dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f1de:	68f3      	ldr	r3, [r6, #12]
 800f1e0:	b183      	cbz	r3, 800f204 <_Balloc+0x50>
 800f1e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1e4:	68db      	ldr	r3, [r3, #12]
 800f1e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f1ea:	b9b8      	cbnz	r0, 800f21c <_Balloc+0x68>
 800f1ec:	2101      	movs	r1, #1
 800f1ee:	fa01 f605 	lsl.w	r6, r1, r5
 800f1f2:	1d72      	adds	r2, r6, #5
 800f1f4:	0092      	lsls	r2, r2, #2
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	f000 fb60 	bl	800f8bc <_calloc_r>
 800f1fc:	b160      	cbz	r0, 800f218 <_Balloc+0x64>
 800f1fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f202:	e00e      	b.n	800f222 <_Balloc+0x6e>
 800f204:	2221      	movs	r2, #33	; 0x21
 800f206:	2104      	movs	r1, #4
 800f208:	4620      	mov	r0, r4
 800f20a:	f000 fb57 	bl	800f8bc <_calloc_r>
 800f20e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f210:	60f0      	str	r0, [r6, #12]
 800f212:	68db      	ldr	r3, [r3, #12]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d1e4      	bne.n	800f1e2 <_Balloc+0x2e>
 800f218:	2000      	movs	r0, #0
 800f21a:	bd70      	pop	{r4, r5, r6, pc}
 800f21c:	6802      	ldr	r2, [r0, #0]
 800f21e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f222:	2300      	movs	r3, #0
 800f224:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f228:	e7f7      	b.n	800f21a <_Balloc+0x66>
 800f22a:	bf00      	nop
 800f22c:	08011da1 	.word	0x08011da1
 800f230:	08011e24 	.word	0x08011e24

0800f234 <_Bfree>:
 800f234:	b570      	push	{r4, r5, r6, lr}
 800f236:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f238:	4605      	mov	r5, r0
 800f23a:	460c      	mov	r4, r1
 800f23c:	b976      	cbnz	r6, 800f25c <_Bfree+0x28>
 800f23e:	2010      	movs	r0, #16
 800f240:	f7ff ffb0 	bl	800f1a4 <malloc>
 800f244:	4602      	mov	r2, r0
 800f246:	6268      	str	r0, [r5, #36]	; 0x24
 800f248:	b920      	cbnz	r0, 800f254 <_Bfree+0x20>
 800f24a:	4b09      	ldr	r3, [pc, #36]	; (800f270 <_Bfree+0x3c>)
 800f24c:	4809      	ldr	r0, [pc, #36]	; (800f274 <_Bfree+0x40>)
 800f24e:	218a      	movs	r1, #138	; 0x8a
 800f250:	f000 fd96 	bl	800fd80 <__assert_func>
 800f254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f258:	6006      	str	r6, [r0, #0]
 800f25a:	60c6      	str	r6, [r0, #12]
 800f25c:	b13c      	cbz	r4, 800f26e <_Bfree+0x3a>
 800f25e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f260:	6862      	ldr	r2, [r4, #4]
 800f262:	68db      	ldr	r3, [r3, #12]
 800f264:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f268:	6021      	str	r1, [r4, #0]
 800f26a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f26e:	bd70      	pop	{r4, r5, r6, pc}
 800f270:	08011da1 	.word	0x08011da1
 800f274:	08011e24 	.word	0x08011e24

0800f278 <__multadd>:
 800f278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f27c:	690d      	ldr	r5, [r1, #16]
 800f27e:	4607      	mov	r7, r0
 800f280:	460c      	mov	r4, r1
 800f282:	461e      	mov	r6, r3
 800f284:	f101 0c14 	add.w	ip, r1, #20
 800f288:	2000      	movs	r0, #0
 800f28a:	f8dc 3000 	ldr.w	r3, [ip]
 800f28e:	b299      	uxth	r1, r3
 800f290:	fb02 6101 	mla	r1, r2, r1, r6
 800f294:	0c1e      	lsrs	r6, r3, #16
 800f296:	0c0b      	lsrs	r3, r1, #16
 800f298:	fb02 3306 	mla	r3, r2, r6, r3
 800f29c:	b289      	uxth	r1, r1
 800f29e:	3001      	adds	r0, #1
 800f2a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f2a4:	4285      	cmp	r5, r0
 800f2a6:	f84c 1b04 	str.w	r1, [ip], #4
 800f2aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f2ae:	dcec      	bgt.n	800f28a <__multadd+0x12>
 800f2b0:	b30e      	cbz	r6, 800f2f6 <__multadd+0x7e>
 800f2b2:	68a3      	ldr	r3, [r4, #8]
 800f2b4:	42ab      	cmp	r3, r5
 800f2b6:	dc19      	bgt.n	800f2ec <__multadd+0x74>
 800f2b8:	6861      	ldr	r1, [r4, #4]
 800f2ba:	4638      	mov	r0, r7
 800f2bc:	3101      	adds	r1, #1
 800f2be:	f7ff ff79 	bl	800f1b4 <_Balloc>
 800f2c2:	4680      	mov	r8, r0
 800f2c4:	b928      	cbnz	r0, 800f2d2 <__multadd+0x5a>
 800f2c6:	4602      	mov	r2, r0
 800f2c8:	4b0c      	ldr	r3, [pc, #48]	; (800f2fc <__multadd+0x84>)
 800f2ca:	480d      	ldr	r0, [pc, #52]	; (800f300 <__multadd+0x88>)
 800f2cc:	21b5      	movs	r1, #181	; 0xb5
 800f2ce:	f000 fd57 	bl	800fd80 <__assert_func>
 800f2d2:	6922      	ldr	r2, [r4, #16]
 800f2d4:	3202      	adds	r2, #2
 800f2d6:	f104 010c 	add.w	r1, r4, #12
 800f2da:	0092      	lsls	r2, r2, #2
 800f2dc:	300c      	adds	r0, #12
 800f2de:	f7fe fc0f 	bl	800db00 <memcpy>
 800f2e2:	4621      	mov	r1, r4
 800f2e4:	4638      	mov	r0, r7
 800f2e6:	f7ff ffa5 	bl	800f234 <_Bfree>
 800f2ea:	4644      	mov	r4, r8
 800f2ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f2f0:	3501      	adds	r5, #1
 800f2f2:	615e      	str	r6, [r3, #20]
 800f2f4:	6125      	str	r5, [r4, #16]
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2fc:	08011e13 	.word	0x08011e13
 800f300:	08011e24 	.word	0x08011e24

0800f304 <__hi0bits>:
 800f304:	0c03      	lsrs	r3, r0, #16
 800f306:	041b      	lsls	r3, r3, #16
 800f308:	b9d3      	cbnz	r3, 800f340 <__hi0bits+0x3c>
 800f30a:	0400      	lsls	r0, r0, #16
 800f30c:	2310      	movs	r3, #16
 800f30e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f312:	bf04      	itt	eq
 800f314:	0200      	lsleq	r0, r0, #8
 800f316:	3308      	addeq	r3, #8
 800f318:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f31c:	bf04      	itt	eq
 800f31e:	0100      	lsleq	r0, r0, #4
 800f320:	3304      	addeq	r3, #4
 800f322:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f326:	bf04      	itt	eq
 800f328:	0080      	lsleq	r0, r0, #2
 800f32a:	3302      	addeq	r3, #2
 800f32c:	2800      	cmp	r0, #0
 800f32e:	db05      	blt.n	800f33c <__hi0bits+0x38>
 800f330:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f334:	f103 0301 	add.w	r3, r3, #1
 800f338:	bf08      	it	eq
 800f33a:	2320      	moveq	r3, #32
 800f33c:	4618      	mov	r0, r3
 800f33e:	4770      	bx	lr
 800f340:	2300      	movs	r3, #0
 800f342:	e7e4      	b.n	800f30e <__hi0bits+0xa>

0800f344 <__lo0bits>:
 800f344:	6803      	ldr	r3, [r0, #0]
 800f346:	f013 0207 	ands.w	r2, r3, #7
 800f34a:	4601      	mov	r1, r0
 800f34c:	d00b      	beq.n	800f366 <__lo0bits+0x22>
 800f34e:	07da      	lsls	r2, r3, #31
 800f350:	d423      	bmi.n	800f39a <__lo0bits+0x56>
 800f352:	0798      	lsls	r0, r3, #30
 800f354:	bf49      	itett	mi
 800f356:	085b      	lsrmi	r3, r3, #1
 800f358:	089b      	lsrpl	r3, r3, #2
 800f35a:	2001      	movmi	r0, #1
 800f35c:	600b      	strmi	r3, [r1, #0]
 800f35e:	bf5c      	itt	pl
 800f360:	600b      	strpl	r3, [r1, #0]
 800f362:	2002      	movpl	r0, #2
 800f364:	4770      	bx	lr
 800f366:	b298      	uxth	r0, r3
 800f368:	b9a8      	cbnz	r0, 800f396 <__lo0bits+0x52>
 800f36a:	0c1b      	lsrs	r3, r3, #16
 800f36c:	2010      	movs	r0, #16
 800f36e:	b2da      	uxtb	r2, r3
 800f370:	b90a      	cbnz	r2, 800f376 <__lo0bits+0x32>
 800f372:	3008      	adds	r0, #8
 800f374:	0a1b      	lsrs	r3, r3, #8
 800f376:	071a      	lsls	r2, r3, #28
 800f378:	bf04      	itt	eq
 800f37a:	091b      	lsreq	r3, r3, #4
 800f37c:	3004      	addeq	r0, #4
 800f37e:	079a      	lsls	r2, r3, #30
 800f380:	bf04      	itt	eq
 800f382:	089b      	lsreq	r3, r3, #2
 800f384:	3002      	addeq	r0, #2
 800f386:	07da      	lsls	r2, r3, #31
 800f388:	d403      	bmi.n	800f392 <__lo0bits+0x4e>
 800f38a:	085b      	lsrs	r3, r3, #1
 800f38c:	f100 0001 	add.w	r0, r0, #1
 800f390:	d005      	beq.n	800f39e <__lo0bits+0x5a>
 800f392:	600b      	str	r3, [r1, #0]
 800f394:	4770      	bx	lr
 800f396:	4610      	mov	r0, r2
 800f398:	e7e9      	b.n	800f36e <__lo0bits+0x2a>
 800f39a:	2000      	movs	r0, #0
 800f39c:	4770      	bx	lr
 800f39e:	2020      	movs	r0, #32
 800f3a0:	4770      	bx	lr
	...

0800f3a4 <__i2b>:
 800f3a4:	b510      	push	{r4, lr}
 800f3a6:	460c      	mov	r4, r1
 800f3a8:	2101      	movs	r1, #1
 800f3aa:	f7ff ff03 	bl	800f1b4 <_Balloc>
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	b928      	cbnz	r0, 800f3be <__i2b+0x1a>
 800f3b2:	4b05      	ldr	r3, [pc, #20]	; (800f3c8 <__i2b+0x24>)
 800f3b4:	4805      	ldr	r0, [pc, #20]	; (800f3cc <__i2b+0x28>)
 800f3b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f3ba:	f000 fce1 	bl	800fd80 <__assert_func>
 800f3be:	2301      	movs	r3, #1
 800f3c0:	6144      	str	r4, [r0, #20]
 800f3c2:	6103      	str	r3, [r0, #16]
 800f3c4:	bd10      	pop	{r4, pc}
 800f3c6:	bf00      	nop
 800f3c8:	08011e13 	.word	0x08011e13
 800f3cc:	08011e24 	.word	0x08011e24

0800f3d0 <__multiply>:
 800f3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d4:	4691      	mov	r9, r2
 800f3d6:	690a      	ldr	r2, [r1, #16]
 800f3d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	bfb8      	it	lt
 800f3e0:	460b      	movlt	r3, r1
 800f3e2:	460c      	mov	r4, r1
 800f3e4:	bfbc      	itt	lt
 800f3e6:	464c      	movlt	r4, r9
 800f3e8:	4699      	movlt	r9, r3
 800f3ea:	6927      	ldr	r7, [r4, #16]
 800f3ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f3f0:	68a3      	ldr	r3, [r4, #8]
 800f3f2:	6861      	ldr	r1, [r4, #4]
 800f3f4:	eb07 060a 	add.w	r6, r7, sl
 800f3f8:	42b3      	cmp	r3, r6
 800f3fa:	b085      	sub	sp, #20
 800f3fc:	bfb8      	it	lt
 800f3fe:	3101      	addlt	r1, #1
 800f400:	f7ff fed8 	bl	800f1b4 <_Balloc>
 800f404:	b930      	cbnz	r0, 800f414 <__multiply+0x44>
 800f406:	4602      	mov	r2, r0
 800f408:	4b44      	ldr	r3, [pc, #272]	; (800f51c <__multiply+0x14c>)
 800f40a:	4845      	ldr	r0, [pc, #276]	; (800f520 <__multiply+0x150>)
 800f40c:	f240 115d 	movw	r1, #349	; 0x15d
 800f410:	f000 fcb6 	bl	800fd80 <__assert_func>
 800f414:	f100 0514 	add.w	r5, r0, #20
 800f418:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f41c:	462b      	mov	r3, r5
 800f41e:	2200      	movs	r2, #0
 800f420:	4543      	cmp	r3, r8
 800f422:	d321      	bcc.n	800f468 <__multiply+0x98>
 800f424:	f104 0314 	add.w	r3, r4, #20
 800f428:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f42c:	f109 0314 	add.w	r3, r9, #20
 800f430:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f434:	9202      	str	r2, [sp, #8]
 800f436:	1b3a      	subs	r2, r7, r4
 800f438:	3a15      	subs	r2, #21
 800f43a:	f022 0203 	bic.w	r2, r2, #3
 800f43e:	3204      	adds	r2, #4
 800f440:	f104 0115 	add.w	r1, r4, #21
 800f444:	428f      	cmp	r7, r1
 800f446:	bf38      	it	cc
 800f448:	2204      	movcc	r2, #4
 800f44a:	9201      	str	r2, [sp, #4]
 800f44c:	9a02      	ldr	r2, [sp, #8]
 800f44e:	9303      	str	r3, [sp, #12]
 800f450:	429a      	cmp	r2, r3
 800f452:	d80c      	bhi.n	800f46e <__multiply+0x9e>
 800f454:	2e00      	cmp	r6, #0
 800f456:	dd03      	ble.n	800f460 <__multiply+0x90>
 800f458:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d05a      	beq.n	800f516 <__multiply+0x146>
 800f460:	6106      	str	r6, [r0, #16]
 800f462:	b005      	add	sp, #20
 800f464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f468:	f843 2b04 	str.w	r2, [r3], #4
 800f46c:	e7d8      	b.n	800f420 <__multiply+0x50>
 800f46e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f472:	f1ba 0f00 	cmp.w	sl, #0
 800f476:	d024      	beq.n	800f4c2 <__multiply+0xf2>
 800f478:	f104 0e14 	add.w	lr, r4, #20
 800f47c:	46a9      	mov	r9, r5
 800f47e:	f04f 0c00 	mov.w	ip, #0
 800f482:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f486:	f8d9 1000 	ldr.w	r1, [r9]
 800f48a:	fa1f fb82 	uxth.w	fp, r2
 800f48e:	b289      	uxth	r1, r1
 800f490:	fb0a 110b 	mla	r1, sl, fp, r1
 800f494:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f498:	f8d9 2000 	ldr.w	r2, [r9]
 800f49c:	4461      	add	r1, ip
 800f49e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f4a2:	fb0a c20b 	mla	r2, sl, fp, ip
 800f4a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f4aa:	b289      	uxth	r1, r1
 800f4ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f4b0:	4577      	cmp	r7, lr
 800f4b2:	f849 1b04 	str.w	r1, [r9], #4
 800f4b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f4ba:	d8e2      	bhi.n	800f482 <__multiply+0xb2>
 800f4bc:	9a01      	ldr	r2, [sp, #4]
 800f4be:	f845 c002 	str.w	ip, [r5, r2]
 800f4c2:	9a03      	ldr	r2, [sp, #12]
 800f4c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f4c8:	3304      	adds	r3, #4
 800f4ca:	f1b9 0f00 	cmp.w	r9, #0
 800f4ce:	d020      	beq.n	800f512 <__multiply+0x142>
 800f4d0:	6829      	ldr	r1, [r5, #0]
 800f4d2:	f104 0c14 	add.w	ip, r4, #20
 800f4d6:	46ae      	mov	lr, r5
 800f4d8:	f04f 0a00 	mov.w	sl, #0
 800f4dc:	f8bc b000 	ldrh.w	fp, [ip]
 800f4e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f4e4:	fb09 220b 	mla	r2, r9, fp, r2
 800f4e8:	4492      	add	sl, r2
 800f4ea:	b289      	uxth	r1, r1
 800f4ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f4f0:	f84e 1b04 	str.w	r1, [lr], #4
 800f4f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f4f8:	f8be 1000 	ldrh.w	r1, [lr]
 800f4fc:	0c12      	lsrs	r2, r2, #16
 800f4fe:	fb09 1102 	mla	r1, r9, r2, r1
 800f502:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f506:	4567      	cmp	r7, ip
 800f508:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f50c:	d8e6      	bhi.n	800f4dc <__multiply+0x10c>
 800f50e:	9a01      	ldr	r2, [sp, #4]
 800f510:	50a9      	str	r1, [r5, r2]
 800f512:	3504      	adds	r5, #4
 800f514:	e79a      	b.n	800f44c <__multiply+0x7c>
 800f516:	3e01      	subs	r6, #1
 800f518:	e79c      	b.n	800f454 <__multiply+0x84>
 800f51a:	bf00      	nop
 800f51c:	08011e13 	.word	0x08011e13
 800f520:	08011e24 	.word	0x08011e24

0800f524 <__pow5mult>:
 800f524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f528:	4615      	mov	r5, r2
 800f52a:	f012 0203 	ands.w	r2, r2, #3
 800f52e:	4606      	mov	r6, r0
 800f530:	460f      	mov	r7, r1
 800f532:	d007      	beq.n	800f544 <__pow5mult+0x20>
 800f534:	4c25      	ldr	r4, [pc, #148]	; (800f5cc <__pow5mult+0xa8>)
 800f536:	3a01      	subs	r2, #1
 800f538:	2300      	movs	r3, #0
 800f53a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f53e:	f7ff fe9b 	bl	800f278 <__multadd>
 800f542:	4607      	mov	r7, r0
 800f544:	10ad      	asrs	r5, r5, #2
 800f546:	d03d      	beq.n	800f5c4 <__pow5mult+0xa0>
 800f548:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f54a:	b97c      	cbnz	r4, 800f56c <__pow5mult+0x48>
 800f54c:	2010      	movs	r0, #16
 800f54e:	f7ff fe29 	bl	800f1a4 <malloc>
 800f552:	4602      	mov	r2, r0
 800f554:	6270      	str	r0, [r6, #36]	; 0x24
 800f556:	b928      	cbnz	r0, 800f564 <__pow5mult+0x40>
 800f558:	4b1d      	ldr	r3, [pc, #116]	; (800f5d0 <__pow5mult+0xac>)
 800f55a:	481e      	ldr	r0, [pc, #120]	; (800f5d4 <__pow5mult+0xb0>)
 800f55c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f560:	f000 fc0e 	bl	800fd80 <__assert_func>
 800f564:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f568:	6004      	str	r4, [r0, #0]
 800f56a:	60c4      	str	r4, [r0, #12]
 800f56c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f570:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f574:	b94c      	cbnz	r4, 800f58a <__pow5mult+0x66>
 800f576:	f240 2171 	movw	r1, #625	; 0x271
 800f57a:	4630      	mov	r0, r6
 800f57c:	f7ff ff12 	bl	800f3a4 <__i2b>
 800f580:	2300      	movs	r3, #0
 800f582:	f8c8 0008 	str.w	r0, [r8, #8]
 800f586:	4604      	mov	r4, r0
 800f588:	6003      	str	r3, [r0, #0]
 800f58a:	f04f 0900 	mov.w	r9, #0
 800f58e:	07eb      	lsls	r3, r5, #31
 800f590:	d50a      	bpl.n	800f5a8 <__pow5mult+0x84>
 800f592:	4639      	mov	r1, r7
 800f594:	4622      	mov	r2, r4
 800f596:	4630      	mov	r0, r6
 800f598:	f7ff ff1a 	bl	800f3d0 <__multiply>
 800f59c:	4639      	mov	r1, r7
 800f59e:	4680      	mov	r8, r0
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	f7ff fe47 	bl	800f234 <_Bfree>
 800f5a6:	4647      	mov	r7, r8
 800f5a8:	106d      	asrs	r5, r5, #1
 800f5aa:	d00b      	beq.n	800f5c4 <__pow5mult+0xa0>
 800f5ac:	6820      	ldr	r0, [r4, #0]
 800f5ae:	b938      	cbnz	r0, 800f5c0 <__pow5mult+0x9c>
 800f5b0:	4622      	mov	r2, r4
 800f5b2:	4621      	mov	r1, r4
 800f5b4:	4630      	mov	r0, r6
 800f5b6:	f7ff ff0b 	bl	800f3d0 <__multiply>
 800f5ba:	6020      	str	r0, [r4, #0]
 800f5bc:	f8c0 9000 	str.w	r9, [r0]
 800f5c0:	4604      	mov	r4, r0
 800f5c2:	e7e4      	b.n	800f58e <__pow5mult+0x6a>
 800f5c4:	4638      	mov	r0, r7
 800f5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5ca:	bf00      	nop
 800f5cc:	08011f70 	.word	0x08011f70
 800f5d0:	08011da1 	.word	0x08011da1
 800f5d4:	08011e24 	.word	0x08011e24

0800f5d8 <__lshift>:
 800f5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5dc:	460c      	mov	r4, r1
 800f5de:	6849      	ldr	r1, [r1, #4]
 800f5e0:	6923      	ldr	r3, [r4, #16]
 800f5e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f5e6:	68a3      	ldr	r3, [r4, #8]
 800f5e8:	4607      	mov	r7, r0
 800f5ea:	4691      	mov	r9, r2
 800f5ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f5f0:	f108 0601 	add.w	r6, r8, #1
 800f5f4:	42b3      	cmp	r3, r6
 800f5f6:	db0b      	blt.n	800f610 <__lshift+0x38>
 800f5f8:	4638      	mov	r0, r7
 800f5fa:	f7ff fddb 	bl	800f1b4 <_Balloc>
 800f5fe:	4605      	mov	r5, r0
 800f600:	b948      	cbnz	r0, 800f616 <__lshift+0x3e>
 800f602:	4602      	mov	r2, r0
 800f604:	4b2a      	ldr	r3, [pc, #168]	; (800f6b0 <__lshift+0xd8>)
 800f606:	482b      	ldr	r0, [pc, #172]	; (800f6b4 <__lshift+0xdc>)
 800f608:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f60c:	f000 fbb8 	bl	800fd80 <__assert_func>
 800f610:	3101      	adds	r1, #1
 800f612:	005b      	lsls	r3, r3, #1
 800f614:	e7ee      	b.n	800f5f4 <__lshift+0x1c>
 800f616:	2300      	movs	r3, #0
 800f618:	f100 0114 	add.w	r1, r0, #20
 800f61c:	f100 0210 	add.w	r2, r0, #16
 800f620:	4618      	mov	r0, r3
 800f622:	4553      	cmp	r3, sl
 800f624:	db37      	blt.n	800f696 <__lshift+0xbe>
 800f626:	6920      	ldr	r0, [r4, #16]
 800f628:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f62c:	f104 0314 	add.w	r3, r4, #20
 800f630:	f019 091f 	ands.w	r9, r9, #31
 800f634:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f638:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f63c:	d02f      	beq.n	800f69e <__lshift+0xc6>
 800f63e:	f1c9 0e20 	rsb	lr, r9, #32
 800f642:	468a      	mov	sl, r1
 800f644:	f04f 0c00 	mov.w	ip, #0
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	fa02 f209 	lsl.w	r2, r2, r9
 800f64e:	ea42 020c 	orr.w	r2, r2, ip
 800f652:	f84a 2b04 	str.w	r2, [sl], #4
 800f656:	f853 2b04 	ldr.w	r2, [r3], #4
 800f65a:	4298      	cmp	r0, r3
 800f65c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f660:	d8f2      	bhi.n	800f648 <__lshift+0x70>
 800f662:	1b03      	subs	r3, r0, r4
 800f664:	3b15      	subs	r3, #21
 800f666:	f023 0303 	bic.w	r3, r3, #3
 800f66a:	3304      	adds	r3, #4
 800f66c:	f104 0215 	add.w	r2, r4, #21
 800f670:	4290      	cmp	r0, r2
 800f672:	bf38      	it	cc
 800f674:	2304      	movcc	r3, #4
 800f676:	f841 c003 	str.w	ip, [r1, r3]
 800f67a:	f1bc 0f00 	cmp.w	ip, #0
 800f67e:	d001      	beq.n	800f684 <__lshift+0xac>
 800f680:	f108 0602 	add.w	r6, r8, #2
 800f684:	3e01      	subs	r6, #1
 800f686:	4638      	mov	r0, r7
 800f688:	612e      	str	r6, [r5, #16]
 800f68a:	4621      	mov	r1, r4
 800f68c:	f7ff fdd2 	bl	800f234 <_Bfree>
 800f690:	4628      	mov	r0, r5
 800f692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f696:	f842 0f04 	str.w	r0, [r2, #4]!
 800f69a:	3301      	adds	r3, #1
 800f69c:	e7c1      	b.n	800f622 <__lshift+0x4a>
 800f69e:	3904      	subs	r1, #4
 800f6a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f6a8:	4298      	cmp	r0, r3
 800f6aa:	d8f9      	bhi.n	800f6a0 <__lshift+0xc8>
 800f6ac:	e7ea      	b.n	800f684 <__lshift+0xac>
 800f6ae:	bf00      	nop
 800f6b0:	08011e13 	.word	0x08011e13
 800f6b4:	08011e24 	.word	0x08011e24

0800f6b8 <__mcmp>:
 800f6b8:	b530      	push	{r4, r5, lr}
 800f6ba:	6902      	ldr	r2, [r0, #16]
 800f6bc:	690c      	ldr	r4, [r1, #16]
 800f6be:	1b12      	subs	r2, r2, r4
 800f6c0:	d10e      	bne.n	800f6e0 <__mcmp+0x28>
 800f6c2:	f100 0314 	add.w	r3, r0, #20
 800f6c6:	3114      	adds	r1, #20
 800f6c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f6cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f6d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f6d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f6d8:	42a5      	cmp	r5, r4
 800f6da:	d003      	beq.n	800f6e4 <__mcmp+0x2c>
 800f6dc:	d305      	bcc.n	800f6ea <__mcmp+0x32>
 800f6de:	2201      	movs	r2, #1
 800f6e0:	4610      	mov	r0, r2
 800f6e2:	bd30      	pop	{r4, r5, pc}
 800f6e4:	4283      	cmp	r3, r0
 800f6e6:	d3f3      	bcc.n	800f6d0 <__mcmp+0x18>
 800f6e8:	e7fa      	b.n	800f6e0 <__mcmp+0x28>
 800f6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f6ee:	e7f7      	b.n	800f6e0 <__mcmp+0x28>

0800f6f0 <__mdiff>:
 800f6f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f4:	460c      	mov	r4, r1
 800f6f6:	4606      	mov	r6, r0
 800f6f8:	4611      	mov	r1, r2
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	4690      	mov	r8, r2
 800f6fe:	f7ff ffdb 	bl	800f6b8 <__mcmp>
 800f702:	1e05      	subs	r5, r0, #0
 800f704:	d110      	bne.n	800f728 <__mdiff+0x38>
 800f706:	4629      	mov	r1, r5
 800f708:	4630      	mov	r0, r6
 800f70a:	f7ff fd53 	bl	800f1b4 <_Balloc>
 800f70e:	b930      	cbnz	r0, 800f71e <__mdiff+0x2e>
 800f710:	4b3a      	ldr	r3, [pc, #232]	; (800f7fc <__mdiff+0x10c>)
 800f712:	4602      	mov	r2, r0
 800f714:	f240 2132 	movw	r1, #562	; 0x232
 800f718:	4839      	ldr	r0, [pc, #228]	; (800f800 <__mdiff+0x110>)
 800f71a:	f000 fb31 	bl	800fd80 <__assert_func>
 800f71e:	2301      	movs	r3, #1
 800f720:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f728:	bfa4      	itt	ge
 800f72a:	4643      	movge	r3, r8
 800f72c:	46a0      	movge	r8, r4
 800f72e:	4630      	mov	r0, r6
 800f730:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f734:	bfa6      	itte	ge
 800f736:	461c      	movge	r4, r3
 800f738:	2500      	movge	r5, #0
 800f73a:	2501      	movlt	r5, #1
 800f73c:	f7ff fd3a 	bl	800f1b4 <_Balloc>
 800f740:	b920      	cbnz	r0, 800f74c <__mdiff+0x5c>
 800f742:	4b2e      	ldr	r3, [pc, #184]	; (800f7fc <__mdiff+0x10c>)
 800f744:	4602      	mov	r2, r0
 800f746:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f74a:	e7e5      	b.n	800f718 <__mdiff+0x28>
 800f74c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f750:	6926      	ldr	r6, [r4, #16]
 800f752:	60c5      	str	r5, [r0, #12]
 800f754:	f104 0914 	add.w	r9, r4, #20
 800f758:	f108 0514 	add.w	r5, r8, #20
 800f75c:	f100 0e14 	add.w	lr, r0, #20
 800f760:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f764:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f768:	f108 0210 	add.w	r2, r8, #16
 800f76c:	46f2      	mov	sl, lr
 800f76e:	2100      	movs	r1, #0
 800f770:	f859 3b04 	ldr.w	r3, [r9], #4
 800f774:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f778:	fa1f f883 	uxth.w	r8, r3
 800f77c:	fa11 f18b 	uxtah	r1, r1, fp
 800f780:	0c1b      	lsrs	r3, r3, #16
 800f782:	eba1 0808 	sub.w	r8, r1, r8
 800f786:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f78a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f78e:	fa1f f888 	uxth.w	r8, r8
 800f792:	1419      	asrs	r1, r3, #16
 800f794:	454e      	cmp	r6, r9
 800f796:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f79a:	f84a 3b04 	str.w	r3, [sl], #4
 800f79e:	d8e7      	bhi.n	800f770 <__mdiff+0x80>
 800f7a0:	1b33      	subs	r3, r6, r4
 800f7a2:	3b15      	subs	r3, #21
 800f7a4:	f023 0303 	bic.w	r3, r3, #3
 800f7a8:	3304      	adds	r3, #4
 800f7aa:	3415      	adds	r4, #21
 800f7ac:	42a6      	cmp	r6, r4
 800f7ae:	bf38      	it	cc
 800f7b0:	2304      	movcc	r3, #4
 800f7b2:	441d      	add	r5, r3
 800f7b4:	4473      	add	r3, lr
 800f7b6:	469e      	mov	lr, r3
 800f7b8:	462e      	mov	r6, r5
 800f7ba:	4566      	cmp	r6, ip
 800f7bc:	d30e      	bcc.n	800f7dc <__mdiff+0xec>
 800f7be:	f10c 0203 	add.w	r2, ip, #3
 800f7c2:	1b52      	subs	r2, r2, r5
 800f7c4:	f022 0203 	bic.w	r2, r2, #3
 800f7c8:	3d03      	subs	r5, #3
 800f7ca:	45ac      	cmp	ip, r5
 800f7cc:	bf38      	it	cc
 800f7ce:	2200      	movcc	r2, #0
 800f7d0:	441a      	add	r2, r3
 800f7d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f7d6:	b17b      	cbz	r3, 800f7f8 <__mdiff+0x108>
 800f7d8:	6107      	str	r7, [r0, #16]
 800f7da:	e7a3      	b.n	800f724 <__mdiff+0x34>
 800f7dc:	f856 8b04 	ldr.w	r8, [r6], #4
 800f7e0:	fa11 f288 	uxtah	r2, r1, r8
 800f7e4:	1414      	asrs	r4, r2, #16
 800f7e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f7ea:	b292      	uxth	r2, r2
 800f7ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f7f0:	f84e 2b04 	str.w	r2, [lr], #4
 800f7f4:	1421      	asrs	r1, r4, #16
 800f7f6:	e7e0      	b.n	800f7ba <__mdiff+0xca>
 800f7f8:	3f01      	subs	r7, #1
 800f7fa:	e7ea      	b.n	800f7d2 <__mdiff+0xe2>
 800f7fc:	08011e13 	.word	0x08011e13
 800f800:	08011e24 	.word	0x08011e24

0800f804 <__d2b>:
 800f804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f808:	4689      	mov	r9, r1
 800f80a:	2101      	movs	r1, #1
 800f80c:	ec57 6b10 	vmov	r6, r7, d0
 800f810:	4690      	mov	r8, r2
 800f812:	f7ff fccf 	bl	800f1b4 <_Balloc>
 800f816:	4604      	mov	r4, r0
 800f818:	b930      	cbnz	r0, 800f828 <__d2b+0x24>
 800f81a:	4602      	mov	r2, r0
 800f81c:	4b25      	ldr	r3, [pc, #148]	; (800f8b4 <__d2b+0xb0>)
 800f81e:	4826      	ldr	r0, [pc, #152]	; (800f8b8 <__d2b+0xb4>)
 800f820:	f240 310a 	movw	r1, #778	; 0x30a
 800f824:	f000 faac 	bl	800fd80 <__assert_func>
 800f828:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f82c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f830:	bb35      	cbnz	r5, 800f880 <__d2b+0x7c>
 800f832:	2e00      	cmp	r6, #0
 800f834:	9301      	str	r3, [sp, #4]
 800f836:	d028      	beq.n	800f88a <__d2b+0x86>
 800f838:	4668      	mov	r0, sp
 800f83a:	9600      	str	r6, [sp, #0]
 800f83c:	f7ff fd82 	bl	800f344 <__lo0bits>
 800f840:	9900      	ldr	r1, [sp, #0]
 800f842:	b300      	cbz	r0, 800f886 <__d2b+0x82>
 800f844:	9a01      	ldr	r2, [sp, #4]
 800f846:	f1c0 0320 	rsb	r3, r0, #32
 800f84a:	fa02 f303 	lsl.w	r3, r2, r3
 800f84e:	430b      	orrs	r3, r1
 800f850:	40c2      	lsrs	r2, r0
 800f852:	6163      	str	r3, [r4, #20]
 800f854:	9201      	str	r2, [sp, #4]
 800f856:	9b01      	ldr	r3, [sp, #4]
 800f858:	61a3      	str	r3, [r4, #24]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	bf14      	ite	ne
 800f85e:	2202      	movne	r2, #2
 800f860:	2201      	moveq	r2, #1
 800f862:	6122      	str	r2, [r4, #16]
 800f864:	b1d5      	cbz	r5, 800f89c <__d2b+0x98>
 800f866:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f86a:	4405      	add	r5, r0
 800f86c:	f8c9 5000 	str.w	r5, [r9]
 800f870:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f874:	f8c8 0000 	str.w	r0, [r8]
 800f878:	4620      	mov	r0, r4
 800f87a:	b003      	add	sp, #12
 800f87c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f880:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f884:	e7d5      	b.n	800f832 <__d2b+0x2e>
 800f886:	6161      	str	r1, [r4, #20]
 800f888:	e7e5      	b.n	800f856 <__d2b+0x52>
 800f88a:	a801      	add	r0, sp, #4
 800f88c:	f7ff fd5a 	bl	800f344 <__lo0bits>
 800f890:	9b01      	ldr	r3, [sp, #4]
 800f892:	6163      	str	r3, [r4, #20]
 800f894:	2201      	movs	r2, #1
 800f896:	6122      	str	r2, [r4, #16]
 800f898:	3020      	adds	r0, #32
 800f89a:	e7e3      	b.n	800f864 <__d2b+0x60>
 800f89c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f8a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f8a4:	f8c9 0000 	str.w	r0, [r9]
 800f8a8:	6918      	ldr	r0, [r3, #16]
 800f8aa:	f7ff fd2b 	bl	800f304 <__hi0bits>
 800f8ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f8b2:	e7df      	b.n	800f874 <__d2b+0x70>
 800f8b4:	08011e13 	.word	0x08011e13
 800f8b8:	08011e24 	.word	0x08011e24

0800f8bc <_calloc_r>:
 800f8bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f8be:	fba1 2402 	umull	r2, r4, r1, r2
 800f8c2:	b94c      	cbnz	r4, 800f8d8 <_calloc_r+0x1c>
 800f8c4:	4611      	mov	r1, r2
 800f8c6:	9201      	str	r2, [sp, #4]
 800f8c8:	f000 f87a 	bl	800f9c0 <_malloc_r>
 800f8cc:	9a01      	ldr	r2, [sp, #4]
 800f8ce:	4605      	mov	r5, r0
 800f8d0:	b930      	cbnz	r0, 800f8e0 <_calloc_r+0x24>
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	b003      	add	sp, #12
 800f8d6:	bd30      	pop	{r4, r5, pc}
 800f8d8:	220c      	movs	r2, #12
 800f8da:	6002      	str	r2, [r0, #0]
 800f8dc:	2500      	movs	r5, #0
 800f8de:	e7f8      	b.n	800f8d2 <_calloc_r+0x16>
 800f8e0:	4621      	mov	r1, r4
 800f8e2:	f7fe f91b 	bl	800db1c <memset>
 800f8e6:	e7f4      	b.n	800f8d2 <_calloc_r+0x16>

0800f8e8 <_free_r>:
 800f8e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f8ea:	2900      	cmp	r1, #0
 800f8ec:	d044      	beq.n	800f978 <_free_r+0x90>
 800f8ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8f2:	9001      	str	r0, [sp, #4]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	f1a1 0404 	sub.w	r4, r1, #4
 800f8fa:	bfb8      	it	lt
 800f8fc:	18e4      	addlt	r4, r4, r3
 800f8fe:	f000 fa9b 	bl	800fe38 <__malloc_lock>
 800f902:	4a1e      	ldr	r2, [pc, #120]	; (800f97c <_free_r+0x94>)
 800f904:	9801      	ldr	r0, [sp, #4]
 800f906:	6813      	ldr	r3, [r2, #0]
 800f908:	b933      	cbnz	r3, 800f918 <_free_r+0x30>
 800f90a:	6063      	str	r3, [r4, #4]
 800f90c:	6014      	str	r4, [r2, #0]
 800f90e:	b003      	add	sp, #12
 800f910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f914:	f000 ba96 	b.w	800fe44 <__malloc_unlock>
 800f918:	42a3      	cmp	r3, r4
 800f91a:	d908      	bls.n	800f92e <_free_r+0x46>
 800f91c:	6825      	ldr	r5, [r4, #0]
 800f91e:	1961      	adds	r1, r4, r5
 800f920:	428b      	cmp	r3, r1
 800f922:	bf01      	itttt	eq
 800f924:	6819      	ldreq	r1, [r3, #0]
 800f926:	685b      	ldreq	r3, [r3, #4]
 800f928:	1949      	addeq	r1, r1, r5
 800f92a:	6021      	streq	r1, [r4, #0]
 800f92c:	e7ed      	b.n	800f90a <_free_r+0x22>
 800f92e:	461a      	mov	r2, r3
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	b10b      	cbz	r3, 800f938 <_free_r+0x50>
 800f934:	42a3      	cmp	r3, r4
 800f936:	d9fa      	bls.n	800f92e <_free_r+0x46>
 800f938:	6811      	ldr	r1, [r2, #0]
 800f93a:	1855      	adds	r5, r2, r1
 800f93c:	42a5      	cmp	r5, r4
 800f93e:	d10b      	bne.n	800f958 <_free_r+0x70>
 800f940:	6824      	ldr	r4, [r4, #0]
 800f942:	4421      	add	r1, r4
 800f944:	1854      	adds	r4, r2, r1
 800f946:	42a3      	cmp	r3, r4
 800f948:	6011      	str	r1, [r2, #0]
 800f94a:	d1e0      	bne.n	800f90e <_free_r+0x26>
 800f94c:	681c      	ldr	r4, [r3, #0]
 800f94e:	685b      	ldr	r3, [r3, #4]
 800f950:	6053      	str	r3, [r2, #4]
 800f952:	4421      	add	r1, r4
 800f954:	6011      	str	r1, [r2, #0]
 800f956:	e7da      	b.n	800f90e <_free_r+0x26>
 800f958:	d902      	bls.n	800f960 <_free_r+0x78>
 800f95a:	230c      	movs	r3, #12
 800f95c:	6003      	str	r3, [r0, #0]
 800f95e:	e7d6      	b.n	800f90e <_free_r+0x26>
 800f960:	6825      	ldr	r5, [r4, #0]
 800f962:	1961      	adds	r1, r4, r5
 800f964:	428b      	cmp	r3, r1
 800f966:	bf04      	itt	eq
 800f968:	6819      	ldreq	r1, [r3, #0]
 800f96a:	685b      	ldreq	r3, [r3, #4]
 800f96c:	6063      	str	r3, [r4, #4]
 800f96e:	bf04      	itt	eq
 800f970:	1949      	addeq	r1, r1, r5
 800f972:	6021      	streq	r1, [r4, #0]
 800f974:	6054      	str	r4, [r2, #4]
 800f976:	e7ca      	b.n	800f90e <_free_r+0x26>
 800f978:	b003      	add	sp, #12
 800f97a:	bd30      	pop	{r4, r5, pc}
 800f97c:	20006a88 	.word	0x20006a88

0800f980 <sbrk_aligned>:
 800f980:	b570      	push	{r4, r5, r6, lr}
 800f982:	4e0e      	ldr	r6, [pc, #56]	; (800f9bc <sbrk_aligned+0x3c>)
 800f984:	460c      	mov	r4, r1
 800f986:	6831      	ldr	r1, [r6, #0]
 800f988:	4605      	mov	r5, r0
 800f98a:	b911      	cbnz	r1, 800f992 <sbrk_aligned+0x12>
 800f98c:	f000 f9e8 	bl	800fd60 <_sbrk_r>
 800f990:	6030      	str	r0, [r6, #0]
 800f992:	4621      	mov	r1, r4
 800f994:	4628      	mov	r0, r5
 800f996:	f000 f9e3 	bl	800fd60 <_sbrk_r>
 800f99a:	1c43      	adds	r3, r0, #1
 800f99c:	d00a      	beq.n	800f9b4 <sbrk_aligned+0x34>
 800f99e:	1cc4      	adds	r4, r0, #3
 800f9a0:	f024 0403 	bic.w	r4, r4, #3
 800f9a4:	42a0      	cmp	r0, r4
 800f9a6:	d007      	beq.n	800f9b8 <sbrk_aligned+0x38>
 800f9a8:	1a21      	subs	r1, r4, r0
 800f9aa:	4628      	mov	r0, r5
 800f9ac:	f000 f9d8 	bl	800fd60 <_sbrk_r>
 800f9b0:	3001      	adds	r0, #1
 800f9b2:	d101      	bne.n	800f9b8 <sbrk_aligned+0x38>
 800f9b4:	f04f 34ff 	mov.w	r4, #4294967295
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	bd70      	pop	{r4, r5, r6, pc}
 800f9bc:	20006a8c 	.word	0x20006a8c

0800f9c0 <_malloc_r>:
 800f9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9c4:	1ccd      	adds	r5, r1, #3
 800f9c6:	f025 0503 	bic.w	r5, r5, #3
 800f9ca:	3508      	adds	r5, #8
 800f9cc:	2d0c      	cmp	r5, #12
 800f9ce:	bf38      	it	cc
 800f9d0:	250c      	movcc	r5, #12
 800f9d2:	2d00      	cmp	r5, #0
 800f9d4:	4607      	mov	r7, r0
 800f9d6:	db01      	blt.n	800f9dc <_malloc_r+0x1c>
 800f9d8:	42a9      	cmp	r1, r5
 800f9da:	d905      	bls.n	800f9e8 <_malloc_r+0x28>
 800f9dc:	230c      	movs	r3, #12
 800f9de:	603b      	str	r3, [r7, #0]
 800f9e0:	2600      	movs	r6, #0
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9e8:	4e2e      	ldr	r6, [pc, #184]	; (800faa4 <_malloc_r+0xe4>)
 800f9ea:	f000 fa25 	bl	800fe38 <__malloc_lock>
 800f9ee:	6833      	ldr	r3, [r6, #0]
 800f9f0:	461c      	mov	r4, r3
 800f9f2:	bb34      	cbnz	r4, 800fa42 <_malloc_r+0x82>
 800f9f4:	4629      	mov	r1, r5
 800f9f6:	4638      	mov	r0, r7
 800f9f8:	f7ff ffc2 	bl	800f980 <sbrk_aligned>
 800f9fc:	1c43      	adds	r3, r0, #1
 800f9fe:	4604      	mov	r4, r0
 800fa00:	d14d      	bne.n	800fa9e <_malloc_r+0xde>
 800fa02:	6834      	ldr	r4, [r6, #0]
 800fa04:	4626      	mov	r6, r4
 800fa06:	2e00      	cmp	r6, #0
 800fa08:	d140      	bne.n	800fa8c <_malloc_r+0xcc>
 800fa0a:	6823      	ldr	r3, [r4, #0]
 800fa0c:	4631      	mov	r1, r6
 800fa0e:	4638      	mov	r0, r7
 800fa10:	eb04 0803 	add.w	r8, r4, r3
 800fa14:	f000 f9a4 	bl	800fd60 <_sbrk_r>
 800fa18:	4580      	cmp	r8, r0
 800fa1a:	d13a      	bne.n	800fa92 <_malloc_r+0xd2>
 800fa1c:	6821      	ldr	r1, [r4, #0]
 800fa1e:	3503      	adds	r5, #3
 800fa20:	1a6d      	subs	r5, r5, r1
 800fa22:	f025 0503 	bic.w	r5, r5, #3
 800fa26:	3508      	adds	r5, #8
 800fa28:	2d0c      	cmp	r5, #12
 800fa2a:	bf38      	it	cc
 800fa2c:	250c      	movcc	r5, #12
 800fa2e:	4629      	mov	r1, r5
 800fa30:	4638      	mov	r0, r7
 800fa32:	f7ff ffa5 	bl	800f980 <sbrk_aligned>
 800fa36:	3001      	adds	r0, #1
 800fa38:	d02b      	beq.n	800fa92 <_malloc_r+0xd2>
 800fa3a:	6823      	ldr	r3, [r4, #0]
 800fa3c:	442b      	add	r3, r5
 800fa3e:	6023      	str	r3, [r4, #0]
 800fa40:	e00e      	b.n	800fa60 <_malloc_r+0xa0>
 800fa42:	6822      	ldr	r2, [r4, #0]
 800fa44:	1b52      	subs	r2, r2, r5
 800fa46:	d41e      	bmi.n	800fa86 <_malloc_r+0xc6>
 800fa48:	2a0b      	cmp	r2, #11
 800fa4a:	d916      	bls.n	800fa7a <_malloc_r+0xba>
 800fa4c:	1961      	adds	r1, r4, r5
 800fa4e:	42a3      	cmp	r3, r4
 800fa50:	6025      	str	r5, [r4, #0]
 800fa52:	bf18      	it	ne
 800fa54:	6059      	strne	r1, [r3, #4]
 800fa56:	6863      	ldr	r3, [r4, #4]
 800fa58:	bf08      	it	eq
 800fa5a:	6031      	streq	r1, [r6, #0]
 800fa5c:	5162      	str	r2, [r4, r5]
 800fa5e:	604b      	str	r3, [r1, #4]
 800fa60:	4638      	mov	r0, r7
 800fa62:	f104 060b 	add.w	r6, r4, #11
 800fa66:	f000 f9ed 	bl	800fe44 <__malloc_unlock>
 800fa6a:	f026 0607 	bic.w	r6, r6, #7
 800fa6e:	1d23      	adds	r3, r4, #4
 800fa70:	1af2      	subs	r2, r6, r3
 800fa72:	d0b6      	beq.n	800f9e2 <_malloc_r+0x22>
 800fa74:	1b9b      	subs	r3, r3, r6
 800fa76:	50a3      	str	r3, [r4, r2]
 800fa78:	e7b3      	b.n	800f9e2 <_malloc_r+0x22>
 800fa7a:	6862      	ldr	r2, [r4, #4]
 800fa7c:	42a3      	cmp	r3, r4
 800fa7e:	bf0c      	ite	eq
 800fa80:	6032      	streq	r2, [r6, #0]
 800fa82:	605a      	strne	r2, [r3, #4]
 800fa84:	e7ec      	b.n	800fa60 <_malloc_r+0xa0>
 800fa86:	4623      	mov	r3, r4
 800fa88:	6864      	ldr	r4, [r4, #4]
 800fa8a:	e7b2      	b.n	800f9f2 <_malloc_r+0x32>
 800fa8c:	4634      	mov	r4, r6
 800fa8e:	6876      	ldr	r6, [r6, #4]
 800fa90:	e7b9      	b.n	800fa06 <_malloc_r+0x46>
 800fa92:	230c      	movs	r3, #12
 800fa94:	603b      	str	r3, [r7, #0]
 800fa96:	4638      	mov	r0, r7
 800fa98:	f000 f9d4 	bl	800fe44 <__malloc_unlock>
 800fa9c:	e7a1      	b.n	800f9e2 <_malloc_r+0x22>
 800fa9e:	6025      	str	r5, [r4, #0]
 800faa0:	e7de      	b.n	800fa60 <_malloc_r+0xa0>
 800faa2:	bf00      	nop
 800faa4:	20006a88 	.word	0x20006a88

0800faa8 <__ssputs_r>:
 800faa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800faac:	688e      	ldr	r6, [r1, #8]
 800faae:	429e      	cmp	r6, r3
 800fab0:	4682      	mov	sl, r0
 800fab2:	460c      	mov	r4, r1
 800fab4:	4690      	mov	r8, r2
 800fab6:	461f      	mov	r7, r3
 800fab8:	d838      	bhi.n	800fb2c <__ssputs_r+0x84>
 800faba:	898a      	ldrh	r2, [r1, #12]
 800fabc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fac0:	d032      	beq.n	800fb28 <__ssputs_r+0x80>
 800fac2:	6825      	ldr	r5, [r4, #0]
 800fac4:	6909      	ldr	r1, [r1, #16]
 800fac6:	eba5 0901 	sub.w	r9, r5, r1
 800faca:	6965      	ldr	r5, [r4, #20]
 800facc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fad0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fad4:	3301      	adds	r3, #1
 800fad6:	444b      	add	r3, r9
 800fad8:	106d      	asrs	r5, r5, #1
 800fada:	429d      	cmp	r5, r3
 800fadc:	bf38      	it	cc
 800fade:	461d      	movcc	r5, r3
 800fae0:	0553      	lsls	r3, r2, #21
 800fae2:	d531      	bpl.n	800fb48 <__ssputs_r+0xa0>
 800fae4:	4629      	mov	r1, r5
 800fae6:	f7ff ff6b 	bl	800f9c0 <_malloc_r>
 800faea:	4606      	mov	r6, r0
 800faec:	b950      	cbnz	r0, 800fb04 <__ssputs_r+0x5c>
 800faee:	230c      	movs	r3, #12
 800faf0:	f8ca 3000 	str.w	r3, [sl]
 800faf4:	89a3      	ldrh	r3, [r4, #12]
 800faf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fafa:	81a3      	strh	r3, [r4, #12]
 800fafc:	f04f 30ff 	mov.w	r0, #4294967295
 800fb00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb04:	6921      	ldr	r1, [r4, #16]
 800fb06:	464a      	mov	r2, r9
 800fb08:	f7fd fffa 	bl	800db00 <memcpy>
 800fb0c:	89a3      	ldrh	r3, [r4, #12]
 800fb0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fb12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb16:	81a3      	strh	r3, [r4, #12]
 800fb18:	6126      	str	r6, [r4, #16]
 800fb1a:	6165      	str	r5, [r4, #20]
 800fb1c:	444e      	add	r6, r9
 800fb1e:	eba5 0509 	sub.w	r5, r5, r9
 800fb22:	6026      	str	r6, [r4, #0]
 800fb24:	60a5      	str	r5, [r4, #8]
 800fb26:	463e      	mov	r6, r7
 800fb28:	42be      	cmp	r6, r7
 800fb2a:	d900      	bls.n	800fb2e <__ssputs_r+0x86>
 800fb2c:	463e      	mov	r6, r7
 800fb2e:	6820      	ldr	r0, [r4, #0]
 800fb30:	4632      	mov	r2, r6
 800fb32:	4641      	mov	r1, r8
 800fb34:	f000 f966 	bl	800fe04 <memmove>
 800fb38:	68a3      	ldr	r3, [r4, #8]
 800fb3a:	1b9b      	subs	r3, r3, r6
 800fb3c:	60a3      	str	r3, [r4, #8]
 800fb3e:	6823      	ldr	r3, [r4, #0]
 800fb40:	4433      	add	r3, r6
 800fb42:	6023      	str	r3, [r4, #0]
 800fb44:	2000      	movs	r0, #0
 800fb46:	e7db      	b.n	800fb00 <__ssputs_r+0x58>
 800fb48:	462a      	mov	r2, r5
 800fb4a:	f000 f981 	bl	800fe50 <_realloc_r>
 800fb4e:	4606      	mov	r6, r0
 800fb50:	2800      	cmp	r0, #0
 800fb52:	d1e1      	bne.n	800fb18 <__ssputs_r+0x70>
 800fb54:	6921      	ldr	r1, [r4, #16]
 800fb56:	4650      	mov	r0, sl
 800fb58:	f7ff fec6 	bl	800f8e8 <_free_r>
 800fb5c:	e7c7      	b.n	800faee <__ssputs_r+0x46>
	...

0800fb60 <_svfiprintf_r>:
 800fb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb64:	4698      	mov	r8, r3
 800fb66:	898b      	ldrh	r3, [r1, #12]
 800fb68:	061b      	lsls	r3, r3, #24
 800fb6a:	b09d      	sub	sp, #116	; 0x74
 800fb6c:	4607      	mov	r7, r0
 800fb6e:	460d      	mov	r5, r1
 800fb70:	4614      	mov	r4, r2
 800fb72:	d50e      	bpl.n	800fb92 <_svfiprintf_r+0x32>
 800fb74:	690b      	ldr	r3, [r1, #16]
 800fb76:	b963      	cbnz	r3, 800fb92 <_svfiprintf_r+0x32>
 800fb78:	2140      	movs	r1, #64	; 0x40
 800fb7a:	f7ff ff21 	bl	800f9c0 <_malloc_r>
 800fb7e:	6028      	str	r0, [r5, #0]
 800fb80:	6128      	str	r0, [r5, #16]
 800fb82:	b920      	cbnz	r0, 800fb8e <_svfiprintf_r+0x2e>
 800fb84:	230c      	movs	r3, #12
 800fb86:	603b      	str	r3, [r7, #0]
 800fb88:	f04f 30ff 	mov.w	r0, #4294967295
 800fb8c:	e0d1      	b.n	800fd32 <_svfiprintf_r+0x1d2>
 800fb8e:	2340      	movs	r3, #64	; 0x40
 800fb90:	616b      	str	r3, [r5, #20]
 800fb92:	2300      	movs	r3, #0
 800fb94:	9309      	str	r3, [sp, #36]	; 0x24
 800fb96:	2320      	movs	r3, #32
 800fb98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800fba0:	2330      	movs	r3, #48	; 0x30
 800fba2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fd4c <_svfiprintf_r+0x1ec>
 800fba6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fbaa:	f04f 0901 	mov.w	r9, #1
 800fbae:	4623      	mov	r3, r4
 800fbb0:	469a      	mov	sl, r3
 800fbb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbb6:	b10a      	cbz	r2, 800fbbc <_svfiprintf_r+0x5c>
 800fbb8:	2a25      	cmp	r2, #37	; 0x25
 800fbba:	d1f9      	bne.n	800fbb0 <_svfiprintf_r+0x50>
 800fbbc:	ebba 0b04 	subs.w	fp, sl, r4
 800fbc0:	d00b      	beq.n	800fbda <_svfiprintf_r+0x7a>
 800fbc2:	465b      	mov	r3, fp
 800fbc4:	4622      	mov	r2, r4
 800fbc6:	4629      	mov	r1, r5
 800fbc8:	4638      	mov	r0, r7
 800fbca:	f7ff ff6d 	bl	800faa8 <__ssputs_r>
 800fbce:	3001      	adds	r0, #1
 800fbd0:	f000 80aa 	beq.w	800fd28 <_svfiprintf_r+0x1c8>
 800fbd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbd6:	445a      	add	r2, fp
 800fbd8:	9209      	str	r2, [sp, #36]	; 0x24
 800fbda:	f89a 3000 	ldrb.w	r3, [sl]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	f000 80a2 	beq.w	800fd28 <_svfiprintf_r+0x1c8>
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	f04f 32ff 	mov.w	r2, #4294967295
 800fbea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fbee:	f10a 0a01 	add.w	sl, sl, #1
 800fbf2:	9304      	str	r3, [sp, #16]
 800fbf4:	9307      	str	r3, [sp, #28]
 800fbf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fbfa:	931a      	str	r3, [sp, #104]	; 0x68
 800fbfc:	4654      	mov	r4, sl
 800fbfe:	2205      	movs	r2, #5
 800fc00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc04:	4851      	ldr	r0, [pc, #324]	; (800fd4c <_svfiprintf_r+0x1ec>)
 800fc06:	f7f0 faeb 	bl	80001e0 <memchr>
 800fc0a:	9a04      	ldr	r2, [sp, #16]
 800fc0c:	b9d8      	cbnz	r0, 800fc46 <_svfiprintf_r+0xe6>
 800fc0e:	06d0      	lsls	r0, r2, #27
 800fc10:	bf44      	itt	mi
 800fc12:	2320      	movmi	r3, #32
 800fc14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc18:	0711      	lsls	r1, r2, #28
 800fc1a:	bf44      	itt	mi
 800fc1c:	232b      	movmi	r3, #43	; 0x2b
 800fc1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc22:	f89a 3000 	ldrb.w	r3, [sl]
 800fc26:	2b2a      	cmp	r3, #42	; 0x2a
 800fc28:	d015      	beq.n	800fc56 <_svfiprintf_r+0xf6>
 800fc2a:	9a07      	ldr	r2, [sp, #28]
 800fc2c:	4654      	mov	r4, sl
 800fc2e:	2000      	movs	r0, #0
 800fc30:	f04f 0c0a 	mov.w	ip, #10
 800fc34:	4621      	mov	r1, r4
 800fc36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc3a:	3b30      	subs	r3, #48	; 0x30
 800fc3c:	2b09      	cmp	r3, #9
 800fc3e:	d94e      	bls.n	800fcde <_svfiprintf_r+0x17e>
 800fc40:	b1b0      	cbz	r0, 800fc70 <_svfiprintf_r+0x110>
 800fc42:	9207      	str	r2, [sp, #28]
 800fc44:	e014      	b.n	800fc70 <_svfiprintf_r+0x110>
 800fc46:	eba0 0308 	sub.w	r3, r0, r8
 800fc4a:	fa09 f303 	lsl.w	r3, r9, r3
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	9304      	str	r3, [sp, #16]
 800fc52:	46a2      	mov	sl, r4
 800fc54:	e7d2      	b.n	800fbfc <_svfiprintf_r+0x9c>
 800fc56:	9b03      	ldr	r3, [sp, #12]
 800fc58:	1d19      	adds	r1, r3, #4
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	9103      	str	r1, [sp, #12]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	bfbb      	ittet	lt
 800fc62:	425b      	neglt	r3, r3
 800fc64:	f042 0202 	orrlt.w	r2, r2, #2
 800fc68:	9307      	strge	r3, [sp, #28]
 800fc6a:	9307      	strlt	r3, [sp, #28]
 800fc6c:	bfb8      	it	lt
 800fc6e:	9204      	strlt	r2, [sp, #16]
 800fc70:	7823      	ldrb	r3, [r4, #0]
 800fc72:	2b2e      	cmp	r3, #46	; 0x2e
 800fc74:	d10c      	bne.n	800fc90 <_svfiprintf_r+0x130>
 800fc76:	7863      	ldrb	r3, [r4, #1]
 800fc78:	2b2a      	cmp	r3, #42	; 0x2a
 800fc7a:	d135      	bne.n	800fce8 <_svfiprintf_r+0x188>
 800fc7c:	9b03      	ldr	r3, [sp, #12]
 800fc7e:	1d1a      	adds	r2, r3, #4
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	9203      	str	r2, [sp, #12]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	bfb8      	it	lt
 800fc88:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc8c:	3402      	adds	r4, #2
 800fc8e:	9305      	str	r3, [sp, #20]
 800fc90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fd5c <_svfiprintf_r+0x1fc>
 800fc94:	7821      	ldrb	r1, [r4, #0]
 800fc96:	2203      	movs	r2, #3
 800fc98:	4650      	mov	r0, sl
 800fc9a:	f7f0 faa1 	bl	80001e0 <memchr>
 800fc9e:	b140      	cbz	r0, 800fcb2 <_svfiprintf_r+0x152>
 800fca0:	2340      	movs	r3, #64	; 0x40
 800fca2:	eba0 000a 	sub.w	r0, r0, sl
 800fca6:	fa03 f000 	lsl.w	r0, r3, r0
 800fcaa:	9b04      	ldr	r3, [sp, #16]
 800fcac:	4303      	orrs	r3, r0
 800fcae:	3401      	adds	r4, #1
 800fcb0:	9304      	str	r3, [sp, #16]
 800fcb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcb6:	4826      	ldr	r0, [pc, #152]	; (800fd50 <_svfiprintf_r+0x1f0>)
 800fcb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fcbc:	2206      	movs	r2, #6
 800fcbe:	f7f0 fa8f 	bl	80001e0 <memchr>
 800fcc2:	2800      	cmp	r0, #0
 800fcc4:	d038      	beq.n	800fd38 <_svfiprintf_r+0x1d8>
 800fcc6:	4b23      	ldr	r3, [pc, #140]	; (800fd54 <_svfiprintf_r+0x1f4>)
 800fcc8:	bb1b      	cbnz	r3, 800fd12 <_svfiprintf_r+0x1b2>
 800fcca:	9b03      	ldr	r3, [sp, #12]
 800fccc:	3307      	adds	r3, #7
 800fcce:	f023 0307 	bic.w	r3, r3, #7
 800fcd2:	3308      	adds	r3, #8
 800fcd4:	9303      	str	r3, [sp, #12]
 800fcd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcd8:	4433      	add	r3, r6
 800fcda:	9309      	str	r3, [sp, #36]	; 0x24
 800fcdc:	e767      	b.n	800fbae <_svfiprintf_r+0x4e>
 800fcde:	fb0c 3202 	mla	r2, ip, r2, r3
 800fce2:	460c      	mov	r4, r1
 800fce4:	2001      	movs	r0, #1
 800fce6:	e7a5      	b.n	800fc34 <_svfiprintf_r+0xd4>
 800fce8:	2300      	movs	r3, #0
 800fcea:	3401      	adds	r4, #1
 800fcec:	9305      	str	r3, [sp, #20]
 800fcee:	4619      	mov	r1, r3
 800fcf0:	f04f 0c0a 	mov.w	ip, #10
 800fcf4:	4620      	mov	r0, r4
 800fcf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fcfa:	3a30      	subs	r2, #48	; 0x30
 800fcfc:	2a09      	cmp	r2, #9
 800fcfe:	d903      	bls.n	800fd08 <_svfiprintf_r+0x1a8>
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d0c5      	beq.n	800fc90 <_svfiprintf_r+0x130>
 800fd04:	9105      	str	r1, [sp, #20]
 800fd06:	e7c3      	b.n	800fc90 <_svfiprintf_r+0x130>
 800fd08:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd0c:	4604      	mov	r4, r0
 800fd0e:	2301      	movs	r3, #1
 800fd10:	e7f0      	b.n	800fcf4 <_svfiprintf_r+0x194>
 800fd12:	ab03      	add	r3, sp, #12
 800fd14:	9300      	str	r3, [sp, #0]
 800fd16:	462a      	mov	r2, r5
 800fd18:	4b0f      	ldr	r3, [pc, #60]	; (800fd58 <_svfiprintf_r+0x1f8>)
 800fd1a:	a904      	add	r1, sp, #16
 800fd1c:	4638      	mov	r0, r7
 800fd1e:	f7fd ffa5 	bl	800dc6c <_printf_float>
 800fd22:	1c42      	adds	r2, r0, #1
 800fd24:	4606      	mov	r6, r0
 800fd26:	d1d6      	bne.n	800fcd6 <_svfiprintf_r+0x176>
 800fd28:	89ab      	ldrh	r3, [r5, #12]
 800fd2a:	065b      	lsls	r3, r3, #25
 800fd2c:	f53f af2c 	bmi.w	800fb88 <_svfiprintf_r+0x28>
 800fd30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd32:	b01d      	add	sp, #116	; 0x74
 800fd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd38:	ab03      	add	r3, sp, #12
 800fd3a:	9300      	str	r3, [sp, #0]
 800fd3c:	462a      	mov	r2, r5
 800fd3e:	4b06      	ldr	r3, [pc, #24]	; (800fd58 <_svfiprintf_r+0x1f8>)
 800fd40:	a904      	add	r1, sp, #16
 800fd42:	4638      	mov	r0, r7
 800fd44:	f7fe fa36 	bl	800e1b4 <_printf_i>
 800fd48:	e7eb      	b.n	800fd22 <_svfiprintf_r+0x1c2>
 800fd4a:	bf00      	nop
 800fd4c:	08011f7c 	.word	0x08011f7c
 800fd50:	08011f86 	.word	0x08011f86
 800fd54:	0800dc6d 	.word	0x0800dc6d
 800fd58:	0800faa9 	.word	0x0800faa9
 800fd5c:	08011f82 	.word	0x08011f82

0800fd60 <_sbrk_r>:
 800fd60:	b538      	push	{r3, r4, r5, lr}
 800fd62:	4d06      	ldr	r5, [pc, #24]	; (800fd7c <_sbrk_r+0x1c>)
 800fd64:	2300      	movs	r3, #0
 800fd66:	4604      	mov	r4, r0
 800fd68:	4608      	mov	r0, r1
 800fd6a:	602b      	str	r3, [r5, #0]
 800fd6c:	f7f2 f986 	bl	800207c <_sbrk>
 800fd70:	1c43      	adds	r3, r0, #1
 800fd72:	d102      	bne.n	800fd7a <_sbrk_r+0x1a>
 800fd74:	682b      	ldr	r3, [r5, #0]
 800fd76:	b103      	cbz	r3, 800fd7a <_sbrk_r+0x1a>
 800fd78:	6023      	str	r3, [r4, #0]
 800fd7a:	bd38      	pop	{r3, r4, r5, pc}
 800fd7c:	20006a90 	.word	0x20006a90

0800fd80 <__assert_func>:
 800fd80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd82:	4614      	mov	r4, r2
 800fd84:	461a      	mov	r2, r3
 800fd86:	4b09      	ldr	r3, [pc, #36]	; (800fdac <__assert_func+0x2c>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	4605      	mov	r5, r0
 800fd8c:	68d8      	ldr	r0, [r3, #12]
 800fd8e:	b14c      	cbz	r4, 800fda4 <__assert_func+0x24>
 800fd90:	4b07      	ldr	r3, [pc, #28]	; (800fdb0 <__assert_func+0x30>)
 800fd92:	9100      	str	r1, [sp, #0]
 800fd94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd98:	4906      	ldr	r1, [pc, #24]	; (800fdb4 <__assert_func+0x34>)
 800fd9a:	462b      	mov	r3, r5
 800fd9c:	f000 f80e 	bl	800fdbc <fiprintf>
 800fda0:	f000 faac 	bl	80102fc <abort>
 800fda4:	4b04      	ldr	r3, [pc, #16]	; (800fdb8 <__assert_func+0x38>)
 800fda6:	461c      	mov	r4, r3
 800fda8:	e7f3      	b.n	800fd92 <__assert_func+0x12>
 800fdaa:	bf00      	nop
 800fdac:	20000108 	.word	0x20000108
 800fdb0:	08011f8d 	.word	0x08011f8d
 800fdb4:	08011f9a 	.word	0x08011f9a
 800fdb8:	08011fc8 	.word	0x08011fc8

0800fdbc <fiprintf>:
 800fdbc:	b40e      	push	{r1, r2, r3}
 800fdbe:	b503      	push	{r0, r1, lr}
 800fdc0:	4601      	mov	r1, r0
 800fdc2:	ab03      	add	r3, sp, #12
 800fdc4:	4805      	ldr	r0, [pc, #20]	; (800fddc <fiprintf+0x20>)
 800fdc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdca:	6800      	ldr	r0, [r0, #0]
 800fdcc:	9301      	str	r3, [sp, #4]
 800fdce:	f000 f897 	bl	800ff00 <_vfiprintf_r>
 800fdd2:	b002      	add	sp, #8
 800fdd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdd8:	b003      	add	sp, #12
 800fdda:	4770      	bx	lr
 800fddc:	20000108 	.word	0x20000108

0800fde0 <__ascii_mbtowc>:
 800fde0:	b082      	sub	sp, #8
 800fde2:	b901      	cbnz	r1, 800fde6 <__ascii_mbtowc+0x6>
 800fde4:	a901      	add	r1, sp, #4
 800fde6:	b142      	cbz	r2, 800fdfa <__ascii_mbtowc+0x1a>
 800fde8:	b14b      	cbz	r3, 800fdfe <__ascii_mbtowc+0x1e>
 800fdea:	7813      	ldrb	r3, [r2, #0]
 800fdec:	600b      	str	r3, [r1, #0]
 800fdee:	7812      	ldrb	r2, [r2, #0]
 800fdf0:	1e10      	subs	r0, r2, #0
 800fdf2:	bf18      	it	ne
 800fdf4:	2001      	movne	r0, #1
 800fdf6:	b002      	add	sp, #8
 800fdf8:	4770      	bx	lr
 800fdfa:	4610      	mov	r0, r2
 800fdfc:	e7fb      	b.n	800fdf6 <__ascii_mbtowc+0x16>
 800fdfe:	f06f 0001 	mvn.w	r0, #1
 800fe02:	e7f8      	b.n	800fdf6 <__ascii_mbtowc+0x16>

0800fe04 <memmove>:
 800fe04:	4288      	cmp	r0, r1
 800fe06:	b510      	push	{r4, lr}
 800fe08:	eb01 0402 	add.w	r4, r1, r2
 800fe0c:	d902      	bls.n	800fe14 <memmove+0x10>
 800fe0e:	4284      	cmp	r4, r0
 800fe10:	4623      	mov	r3, r4
 800fe12:	d807      	bhi.n	800fe24 <memmove+0x20>
 800fe14:	1e43      	subs	r3, r0, #1
 800fe16:	42a1      	cmp	r1, r4
 800fe18:	d008      	beq.n	800fe2c <memmove+0x28>
 800fe1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe22:	e7f8      	b.n	800fe16 <memmove+0x12>
 800fe24:	4402      	add	r2, r0
 800fe26:	4601      	mov	r1, r0
 800fe28:	428a      	cmp	r2, r1
 800fe2a:	d100      	bne.n	800fe2e <memmove+0x2a>
 800fe2c:	bd10      	pop	{r4, pc}
 800fe2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fe36:	e7f7      	b.n	800fe28 <memmove+0x24>

0800fe38 <__malloc_lock>:
 800fe38:	4801      	ldr	r0, [pc, #4]	; (800fe40 <__malloc_lock+0x8>)
 800fe3a:	f000 bc1f 	b.w	801067c <__retarget_lock_acquire_recursive>
 800fe3e:	bf00      	nop
 800fe40:	20006a94 	.word	0x20006a94

0800fe44 <__malloc_unlock>:
 800fe44:	4801      	ldr	r0, [pc, #4]	; (800fe4c <__malloc_unlock+0x8>)
 800fe46:	f000 bc1a 	b.w	801067e <__retarget_lock_release_recursive>
 800fe4a:	bf00      	nop
 800fe4c:	20006a94 	.word	0x20006a94

0800fe50 <_realloc_r>:
 800fe50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe54:	4680      	mov	r8, r0
 800fe56:	4614      	mov	r4, r2
 800fe58:	460e      	mov	r6, r1
 800fe5a:	b921      	cbnz	r1, 800fe66 <_realloc_r+0x16>
 800fe5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe60:	4611      	mov	r1, r2
 800fe62:	f7ff bdad 	b.w	800f9c0 <_malloc_r>
 800fe66:	b92a      	cbnz	r2, 800fe74 <_realloc_r+0x24>
 800fe68:	f7ff fd3e 	bl	800f8e8 <_free_r>
 800fe6c:	4625      	mov	r5, r4
 800fe6e:	4628      	mov	r0, r5
 800fe70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe74:	f000 fc6a 	bl	801074c <_malloc_usable_size_r>
 800fe78:	4284      	cmp	r4, r0
 800fe7a:	4607      	mov	r7, r0
 800fe7c:	d802      	bhi.n	800fe84 <_realloc_r+0x34>
 800fe7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe82:	d812      	bhi.n	800feaa <_realloc_r+0x5a>
 800fe84:	4621      	mov	r1, r4
 800fe86:	4640      	mov	r0, r8
 800fe88:	f7ff fd9a 	bl	800f9c0 <_malloc_r>
 800fe8c:	4605      	mov	r5, r0
 800fe8e:	2800      	cmp	r0, #0
 800fe90:	d0ed      	beq.n	800fe6e <_realloc_r+0x1e>
 800fe92:	42bc      	cmp	r4, r7
 800fe94:	4622      	mov	r2, r4
 800fe96:	4631      	mov	r1, r6
 800fe98:	bf28      	it	cs
 800fe9a:	463a      	movcs	r2, r7
 800fe9c:	f7fd fe30 	bl	800db00 <memcpy>
 800fea0:	4631      	mov	r1, r6
 800fea2:	4640      	mov	r0, r8
 800fea4:	f7ff fd20 	bl	800f8e8 <_free_r>
 800fea8:	e7e1      	b.n	800fe6e <_realloc_r+0x1e>
 800feaa:	4635      	mov	r5, r6
 800feac:	e7df      	b.n	800fe6e <_realloc_r+0x1e>

0800feae <__sfputc_r>:
 800feae:	6893      	ldr	r3, [r2, #8]
 800feb0:	3b01      	subs	r3, #1
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	b410      	push	{r4}
 800feb6:	6093      	str	r3, [r2, #8]
 800feb8:	da08      	bge.n	800fecc <__sfputc_r+0x1e>
 800feba:	6994      	ldr	r4, [r2, #24]
 800febc:	42a3      	cmp	r3, r4
 800febe:	db01      	blt.n	800fec4 <__sfputc_r+0x16>
 800fec0:	290a      	cmp	r1, #10
 800fec2:	d103      	bne.n	800fecc <__sfputc_r+0x1e>
 800fec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fec8:	f000 b94a 	b.w	8010160 <__swbuf_r>
 800fecc:	6813      	ldr	r3, [r2, #0]
 800fece:	1c58      	adds	r0, r3, #1
 800fed0:	6010      	str	r0, [r2, #0]
 800fed2:	7019      	strb	r1, [r3, #0]
 800fed4:	4608      	mov	r0, r1
 800fed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800feda:	4770      	bx	lr

0800fedc <__sfputs_r>:
 800fedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fede:	4606      	mov	r6, r0
 800fee0:	460f      	mov	r7, r1
 800fee2:	4614      	mov	r4, r2
 800fee4:	18d5      	adds	r5, r2, r3
 800fee6:	42ac      	cmp	r4, r5
 800fee8:	d101      	bne.n	800feee <__sfputs_r+0x12>
 800feea:	2000      	movs	r0, #0
 800feec:	e007      	b.n	800fefe <__sfputs_r+0x22>
 800feee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fef2:	463a      	mov	r2, r7
 800fef4:	4630      	mov	r0, r6
 800fef6:	f7ff ffda 	bl	800feae <__sfputc_r>
 800fefa:	1c43      	adds	r3, r0, #1
 800fefc:	d1f3      	bne.n	800fee6 <__sfputs_r+0xa>
 800fefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ff00 <_vfiprintf_r>:
 800ff00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff04:	460d      	mov	r5, r1
 800ff06:	b09d      	sub	sp, #116	; 0x74
 800ff08:	4614      	mov	r4, r2
 800ff0a:	4698      	mov	r8, r3
 800ff0c:	4606      	mov	r6, r0
 800ff0e:	b118      	cbz	r0, 800ff18 <_vfiprintf_r+0x18>
 800ff10:	6983      	ldr	r3, [r0, #24]
 800ff12:	b90b      	cbnz	r3, 800ff18 <_vfiprintf_r+0x18>
 800ff14:	f000 fb14 	bl	8010540 <__sinit>
 800ff18:	4b89      	ldr	r3, [pc, #548]	; (8010140 <_vfiprintf_r+0x240>)
 800ff1a:	429d      	cmp	r5, r3
 800ff1c:	d11b      	bne.n	800ff56 <_vfiprintf_r+0x56>
 800ff1e:	6875      	ldr	r5, [r6, #4]
 800ff20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff22:	07d9      	lsls	r1, r3, #31
 800ff24:	d405      	bmi.n	800ff32 <_vfiprintf_r+0x32>
 800ff26:	89ab      	ldrh	r3, [r5, #12]
 800ff28:	059a      	lsls	r2, r3, #22
 800ff2a:	d402      	bmi.n	800ff32 <_vfiprintf_r+0x32>
 800ff2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff2e:	f000 fba5 	bl	801067c <__retarget_lock_acquire_recursive>
 800ff32:	89ab      	ldrh	r3, [r5, #12]
 800ff34:	071b      	lsls	r3, r3, #28
 800ff36:	d501      	bpl.n	800ff3c <_vfiprintf_r+0x3c>
 800ff38:	692b      	ldr	r3, [r5, #16]
 800ff3a:	b9eb      	cbnz	r3, 800ff78 <_vfiprintf_r+0x78>
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	4630      	mov	r0, r6
 800ff40:	f000 f96e 	bl	8010220 <__swsetup_r>
 800ff44:	b1c0      	cbz	r0, 800ff78 <_vfiprintf_r+0x78>
 800ff46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff48:	07dc      	lsls	r4, r3, #31
 800ff4a:	d50e      	bpl.n	800ff6a <_vfiprintf_r+0x6a>
 800ff4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff50:	b01d      	add	sp, #116	; 0x74
 800ff52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff56:	4b7b      	ldr	r3, [pc, #492]	; (8010144 <_vfiprintf_r+0x244>)
 800ff58:	429d      	cmp	r5, r3
 800ff5a:	d101      	bne.n	800ff60 <_vfiprintf_r+0x60>
 800ff5c:	68b5      	ldr	r5, [r6, #8]
 800ff5e:	e7df      	b.n	800ff20 <_vfiprintf_r+0x20>
 800ff60:	4b79      	ldr	r3, [pc, #484]	; (8010148 <_vfiprintf_r+0x248>)
 800ff62:	429d      	cmp	r5, r3
 800ff64:	bf08      	it	eq
 800ff66:	68f5      	ldreq	r5, [r6, #12]
 800ff68:	e7da      	b.n	800ff20 <_vfiprintf_r+0x20>
 800ff6a:	89ab      	ldrh	r3, [r5, #12]
 800ff6c:	0598      	lsls	r0, r3, #22
 800ff6e:	d4ed      	bmi.n	800ff4c <_vfiprintf_r+0x4c>
 800ff70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff72:	f000 fb84 	bl	801067e <__retarget_lock_release_recursive>
 800ff76:	e7e9      	b.n	800ff4c <_vfiprintf_r+0x4c>
 800ff78:	2300      	movs	r3, #0
 800ff7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ff7c:	2320      	movs	r3, #32
 800ff7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff82:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff86:	2330      	movs	r3, #48	; 0x30
 800ff88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801014c <_vfiprintf_r+0x24c>
 800ff8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff90:	f04f 0901 	mov.w	r9, #1
 800ff94:	4623      	mov	r3, r4
 800ff96:	469a      	mov	sl, r3
 800ff98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff9c:	b10a      	cbz	r2, 800ffa2 <_vfiprintf_r+0xa2>
 800ff9e:	2a25      	cmp	r2, #37	; 0x25
 800ffa0:	d1f9      	bne.n	800ff96 <_vfiprintf_r+0x96>
 800ffa2:	ebba 0b04 	subs.w	fp, sl, r4
 800ffa6:	d00b      	beq.n	800ffc0 <_vfiprintf_r+0xc0>
 800ffa8:	465b      	mov	r3, fp
 800ffaa:	4622      	mov	r2, r4
 800ffac:	4629      	mov	r1, r5
 800ffae:	4630      	mov	r0, r6
 800ffb0:	f7ff ff94 	bl	800fedc <__sfputs_r>
 800ffb4:	3001      	adds	r0, #1
 800ffb6:	f000 80aa 	beq.w	801010e <_vfiprintf_r+0x20e>
 800ffba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffbc:	445a      	add	r2, fp
 800ffbe:	9209      	str	r2, [sp, #36]	; 0x24
 800ffc0:	f89a 3000 	ldrb.w	r3, [sl]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	f000 80a2 	beq.w	801010e <_vfiprintf_r+0x20e>
 800ffca:	2300      	movs	r3, #0
 800ffcc:	f04f 32ff 	mov.w	r2, #4294967295
 800ffd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffd4:	f10a 0a01 	add.w	sl, sl, #1
 800ffd8:	9304      	str	r3, [sp, #16]
 800ffda:	9307      	str	r3, [sp, #28]
 800ffdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ffe0:	931a      	str	r3, [sp, #104]	; 0x68
 800ffe2:	4654      	mov	r4, sl
 800ffe4:	2205      	movs	r2, #5
 800ffe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffea:	4858      	ldr	r0, [pc, #352]	; (801014c <_vfiprintf_r+0x24c>)
 800ffec:	f7f0 f8f8 	bl	80001e0 <memchr>
 800fff0:	9a04      	ldr	r2, [sp, #16]
 800fff2:	b9d8      	cbnz	r0, 801002c <_vfiprintf_r+0x12c>
 800fff4:	06d1      	lsls	r1, r2, #27
 800fff6:	bf44      	itt	mi
 800fff8:	2320      	movmi	r3, #32
 800fffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fffe:	0713      	lsls	r3, r2, #28
 8010000:	bf44      	itt	mi
 8010002:	232b      	movmi	r3, #43	; 0x2b
 8010004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010008:	f89a 3000 	ldrb.w	r3, [sl]
 801000c:	2b2a      	cmp	r3, #42	; 0x2a
 801000e:	d015      	beq.n	801003c <_vfiprintf_r+0x13c>
 8010010:	9a07      	ldr	r2, [sp, #28]
 8010012:	4654      	mov	r4, sl
 8010014:	2000      	movs	r0, #0
 8010016:	f04f 0c0a 	mov.w	ip, #10
 801001a:	4621      	mov	r1, r4
 801001c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010020:	3b30      	subs	r3, #48	; 0x30
 8010022:	2b09      	cmp	r3, #9
 8010024:	d94e      	bls.n	80100c4 <_vfiprintf_r+0x1c4>
 8010026:	b1b0      	cbz	r0, 8010056 <_vfiprintf_r+0x156>
 8010028:	9207      	str	r2, [sp, #28]
 801002a:	e014      	b.n	8010056 <_vfiprintf_r+0x156>
 801002c:	eba0 0308 	sub.w	r3, r0, r8
 8010030:	fa09 f303 	lsl.w	r3, r9, r3
 8010034:	4313      	orrs	r3, r2
 8010036:	9304      	str	r3, [sp, #16]
 8010038:	46a2      	mov	sl, r4
 801003a:	e7d2      	b.n	800ffe2 <_vfiprintf_r+0xe2>
 801003c:	9b03      	ldr	r3, [sp, #12]
 801003e:	1d19      	adds	r1, r3, #4
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	9103      	str	r1, [sp, #12]
 8010044:	2b00      	cmp	r3, #0
 8010046:	bfbb      	ittet	lt
 8010048:	425b      	neglt	r3, r3
 801004a:	f042 0202 	orrlt.w	r2, r2, #2
 801004e:	9307      	strge	r3, [sp, #28]
 8010050:	9307      	strlt	r3, [sp, #28]
 8010052:	bfb8      	it	lt
 8010054:	9204      	strlt	r2, [sp, #16]
 8010056:	7823      	ldrb	r3, [r4, #0]
 8010058:	2b2e      	cmp	r3, #46	; 0x2e
 801005a:	d10c      	bne.n	8010076 <_vfiprintf_r+0x176>
 801005c:	7863      	ldrb	r3, [r4, #1]
 801005e:	2b2a      	cmp	r3, #42	; 0x2a
 8010060:	d135      	bne.n	80100ce <_vfiprintf_r+0x1ce>
 8010062:	9b03      	ldr	r3, [sp, #12]
 8010064:	1d1a      	adds	r2, r3, #4
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	9203      	str	r2, [sp, #12]
 801006a:	2b00      	cmp	r3, #0
 801006c:	bfb8      	it	lt
 801006e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010072:	3402      	adds	r4, #2
 8010074:	9305      	str	r3, [sp, #20]
 8010076:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801015c <_vfiprintf_r+0x25c>
 801007a:	7821      	ldrb	r1, [r4, #0]
 801007c:	2203      	movs	r2, #3
 801007e:	4650      	mov	r0, sl
 8010080:	f7f0 f8ae 	bl	80001e0 <memchr>
 8010084:	b140      	cbz	r0, 8010098 <_vfiprintf_r+0x198>
 8010086:	2340      	movs	r3, #64	; 0x40
 8010088:	eba0 000a 	sub.w	r0, r0, sl
 801008c:	fa03 f000 	lsl.w	r0, r3, r0
 8010090:	9b04      	ldr	r3, [sp, #16]
 8010092:	4303      	orrs	r3, r0
 8010094:	3401      	adds	r4, #1
 8010096:	9304      	str	r3, [sp, #16]
 8010098:	f814 1b01 	ldrb.w	r1, [r4], #1
 801009c:	482c      	ldr	r0, [pc, #176]	; (8010150 <_vfiprintf_r+0x250>)
 801009e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80100a2:	2206      	movs	r2, #6
 80100a4:	f7f0 f89c 	bl	80001e0 <memchr>
 80100a8:	2800      	cmp	r0, #0
 80100aa:	d03f      	beq.n	801012c <_vfiprintf_r+0x22c>
 80100ac:	4b29      	ldr	r3, [pc, #164]	; (8010154 <_vfiprintf_r+0x254>)
 80100ae:	bb1b      	cbnz	r3, 80100f8 <_vfiprintf_r+0x1f8>
 80100b0:	9b03      	ldr	r3, [sp, #12]
 80100b2:	3307      	adds	r3, #7
 80100b4:	f023 0307 	bic.w	r3, r3, #7
 80100b8:	3308      	adds	r3, #8
 80100ba:	9303      	str	r3, [sp, #12]
 80100bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100be:	443b      	add	r3, r7
 80100c0:	9309      	str	r3, [sp, #36]	; 0x24
 80100c2:	e767      	b.n	800ff94 <_vfiprintf_r+0x94>
 80100c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80100c8:	460c      	mov	r4, r1
 80100ca:	2001      	movs	r0, #1
 80100cc:	e7a5      	b.n	801001a <_vfiprintf_r+0x11a>
 80100ce:	2300      	movs	r3, #0
 80100d0:	3401      	adds	r4, #1
 80100d2:	9305      	str	r3, [sp, #20]
 80100d4:	4619      	mov	r1, r3
 80100d6:	f04f 0c0a 	mov.w	ip, #10
 80100da:	4620      	mov	r0, r4
 80100dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100e0:	3a30      	subs	r2, #48	; 0x30
 80100e2:	2a09      	cmp	r2, #9
 80100e4:	d903      	bls.n	80100ee <_vfiprintf_r+0x1ee>
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d0c5      	beq.n	8010076 <_vfiprintf_r+0x176>
 80100ea:	9105      	str	r1, [sp, #20]
 80100ec:	e7c3      	b.n	8010076 <_vfiprintf_r+0x176>
 80100ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80100f2:	4604      	mov	r4, r0
 80100f4:	2301      	movs	r3, #1
 80100f6:	e7f0      	b.n	80100da <_vfiprintf_r+0x1da>
 80100f8:	ab03      	add	r3, sp, #12
 80100fa:	9300      	str	r3, [sp, #0]
 80100fc:	462a      	mov	r2, r5
 80100fe:	4b16      	ldr	r3, [pc, #88]	; (8010158 <_vfiprintf_r+0x258>)
 8010100:	a904      	add	r1, sp, #16
 8010102:	4630      	mov	r0, r6
 8010104:	f7fd fdb2 	bl	800dc6c <_printf_float>
 8010108:	4607      	mov	r7, r0
 801010a:	1c78      	adds	r0, r7, #1
 801010c:	d1d6      	bne.n	80100bc <_vfiprintf_r+0x1bc>
 801010e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010110:	07d9      	lsls	r1, r3, #31
 8010112:	d405      	bmi.n	8010120 <_vfiprintf_r+0x220>
 8010114:	89ab      	ldrh	r3, [r5, #12]
 8010116:	059a      	lsls	r2, r3, #22
 8010118:	d402      	bmi.n	8010120 <_vfiprintf_r+0x220>
 801011a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801011c:	f000 faaf 	bl	801067e <__retarget_lock_release_recursive>
 8010120:	89ab      	ldrh	r3, [r5, #12]
 8010122:	065b      	lsls	r3, r3, #25
 8010124:	f53f af12 	bmi.w	800ff4c <_vfiprintf_r+0x4c>
 8010128:	9809      	ldr	r0, [sp, #36]	; 0x24
 801012a:	e711      	b.n	800ff50 <_vfiprintf_r+0x50>
 801012c:	ab03      	add	r3, sp, #12
 801012e:	9300      	str	r3, [sp, #0]
 8010130:	462a      	mov	r2, r5
 8010132:	4b09      	ldr	r3, [pc, #36]	; (8010158 <_vfiprintf_r+0x258>)
 8010134:	a904      	add	r1, sp, #16
 8010136:	4630      	mov	r0, r6
 8010138:	f7fe f83c 	bl	800e1b4 <_printf_i>
 801013c:	e7e4      	b.n	8010108 <_vfiprintf_r+0x208>
 801013e:	bf00      	nop
 8010140:	080120f4 	.word	0x080120f4
 8010144:	08012114 	.word	0x08012114
 8010148:	080120d4 	.word	0x080120d4
 801014c:	08011f7c 	.word	0x08011f7c
 8010150:	08011f86 	.word	0x08011f86
 8010154:	0800dc6d 	.word	0x0800dc6d
 8010158:	0800fedd 	.word	0x0800fedd
 801015c:	08011f82 	.word	0x08011f82

08010160 <__swbuf_r>:
 8010160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010162:	460e      	mov	r6, r1
 8010164:	4614      	mov	r4, r2
 8010166:	4605      	mov	r5, r0
 8010168:	b118      	cbz	r0, 8010172 <__swbuf_r+0x12>
 801016a:	6983      	ldr	r3, [r0, #24]
 801016c:	b90b      	cbnz	r3, 8010172 <__swbuf_r+0x12>
 801016e:	f000 f9e7 	bl	8010540 <__sinit>
 8010172:	4b21      	ldr	r3, [pc, #132]	; (80101f8 <__swbuf_r+0x98>)
 8010174:	429c      	cmp	r4, r3
 8010176:	d12b      	bne.n	80101d0 <__swbuf_r+0x70>
 8010178:	686c      	ldr	r4, [r5, #4]
 801017a:	69a3      	ldr	r3, [r4, #24]
 801017c:	60a3      	str	r3, [r4, #8]
 801017e:	89a3      	ldrh	r3, [r4, #12]
 8010180:	071a      	lsls	r2, r3, #28
 8010182:	d52f      	bpl.n	80101e4 <__swbuf_r+0x84>
 8010184:	6923      	ldr	r3, [r4, #16]
 8010186:	b36b      	cbz	r3, 80101e4 <__swbuf_r+0x84>
 8010188:	6923      	ldr	r3, [r4, #16]
 801018a:	6820      	ldr	r0, [r4, #0]
 801018c:	1ac0      	subs	r0, r0, r3
 801018e:	6963      	ldr	r3, [r4, #20]
 8010190:	b2f6      	uxtb	r6, r6
 8010192:	4283      	cmp	r3, r0
 8010194:	4637      	mov	r7, r6
 8010196:	dc04      	bgt.n	80101a2 <__swbuf_r+0x42>
 8010198:	4621      	mov	r1, r4
 801019a:	4628      	mov	r0, r5
 801019c:	f000 f93c 	bl	8010418 <_fflush_r>
 80101a0:	bb30      	cbnz	r0, 80101f0 <__swbuf_r+0x90>
 80101a2:	68a3      	ldr	r3, [r4, #8]
 80101a4:	3b01      	subs	r3, #1
 80101a6:	60a3      	str	r3, [r4, #8]
 80101a8:	6823      	ldr	r3, [r4, #0]
 80101aa:	1c5a      	adds	r2, r3, #1
 80101ac:	6022      	str	r2, [r4, #0]
 80101ae:	701e      	strb	r6, [r3, #0]
 80101b0:	6963      	ldr	r3, [r4, #20]
 80101b2:	3001      	adds	r0, #1
 80101b4:	4283      	cmp	r3, r0
 80101b6:	d004      	beq.n	80101c2 <__swbuf_r+0x62>
 80101b8:	89a3      	ldrh	r3, [r4, #12]
 80101ba:	07db      	lsls	r3, r3, #31
 80101bc:	d506      	bpl.n	80101cc <__swbuf_r+0x6c>
 80101be:	2e0a      	cmp	r6, #10
 80101c0:	d104      	bne.n	80101cc <__swbuf_r+0x6c>
 80101c2:	4621      	mov	r1, r4
 80101c4:	4628      	mov	r0, r5
 80101c6:	f000 f927 	bl	8010418 <_fflush_r>
 80101ca:	b988      	cbnz	r0, 80101f0 <__swbuf_r+0x90>
 80101cc:	4638      	mov	r0, r7
 80101ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101d0:	4b0a      	ldr	r3, [pc, #40]	; (80101fc <__swbuf_r+0x9c>)
 80101d2:	429c      	cmp	r4, r3
 80101d4:	d101      	bne.n	80101da <__swbuf_r+0x7a>
 80101d6:	68ac      	ldr	r4, [r5, #8]
 80101d8:	e7cf      	b.n	801017a <__swbuf_r+0x1a>
 80101da:	4b09      	ldr	r3, [pc, #36]	; (8010200 <__swbuf_r+0xa0>)
 80101dc:	429c      	cmp	r4, r3
 80101de:	bf08      	it	eq
 80101e0:	68ec      	ldreq	r4, [r5, #12]
 80101e2:	e7ca      	b.n	801017a <__swbuf_r+0x1a>
 80101e4:	4621      	mov	r1, r4
 80101e6:	4628      	mov	r0, r5
 80101e8:	f000 f81a 	bl	8010220 <__swsetup_r>
 80101ec:	2800      	cmp	r0, #0
 80101ee:	d0cb      	beq.n	8010188 <__swbuf_r+0x28>
 80101f0:	f04f 37ff 	mov.w	r7, #4294967295
 80101f4:	e7ea      	b.n	80101cc <__swbuf_r+0x6c>
 80101f6:	bf00      	nop
 80101f8:	080120f4 	.word	0x080120f4
 80101fc:	08012114 	.word	0x08012114
 8010200:	080120d4 	.word	0x080120d4

08010204 <__ascii_wctomb>:
 8010204:	b149      	cbz	r1, 801021a <__ascii_wctomb+0x16>
 8010206:	2aff      	cmp	r2, #255	; 0xff
 8010208:	bf85      	ittet	hi
 801020a:	238a      	movhi	r3, #138	; 0x8a
 801020c:	6003      	strhi	r3, [r0, #0]
 801020e:	700a      	strbls	r2, [r1, #0]
 8010210:	f04f 30ff 	movhi.w	r0, #4294967295
 8010214:	bf98      	it	ls
 8010216:	2001      	movls	r0, #1
 8010218:	4770      	bx	lr
 801021a:	4608      	mov	r0, r1
 801021c:	4770      	bx	lr
	...

08010220 <__swsetup_r>:
 8010220:	4b32      	ldr	r3, [pc, #200]	; (80102ec <__swsetup_r+0xcc>)
 8010222:	b570      	push	{r4, r5, r6, lr}
 8010224:	681d      	ldr	r5, [r3, #0]
 8010226:	4606      	mov	r6, r0
 8010228:	460c      	mov	r4, r1
 801022a:	b125      	cbz	r5, 8010236 <__swsetup_r+0x16>
 801022c:	69ab      	ldr	r3, [r5, #24]
 801022e:	b913      	cbnz	r3, 8010236 <__swsetup_r+0x16>
 8010230:	4628      	mov	r0, r5
 8010232:	f000 f985 	bl	8010540 <__sinit>
 8010236:	4b2e      	ldr	r3, [pc, #184]	; (80102f0 <__swsetup_r+0xd0>)
 8010238:	429c      	cmp	r4, r3
 801023a:	d10f      	bne.n	801025c <__swsetup_r+0x3c>
 801023c:	686c      	ldr	r4, [r5, #4]
 801023e:	89a3      	ldrh	r3, [r4, #12]
 8010240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010244:	0719      	lsls	r1, r3, #28
 8010246:	d42c      	bmi.n	80102a2 <__swsetup_r+0x82>
 8010248:	06dd      	lsls	r5, r3, #27
 801024a:	d411      	bmi.n	8010270 <__swsetup_r+0x50>
 801024c:	2309      	movs	r3, #9
 801024e:	6033      	str	r3, [r6, #0]
 8010250:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010254:	81a3      	strh	r3, [r4, #12]
 8010256:	f04f 30ff 	mov.w	r0, #4294967295
 801025a:	e03e      	b.n	80102da <__swsetup_r+0xba>
 801025c:	4b25      	ldr	r3, [pc, #148]	; (80102f4 <__swsetup_r+0xd4>)
 801025e:	429c      	cmp	r4, r3
 8010260:	d101      	bne.n	8010266 <__swsetup_r+0x46>
 8010262:	68ac      	ldr	r4, [r5, #8]
 8010264:	e7eb      	b.n	801023e <__swsetup_r+0x1e>
 8010266:	4b24      	ldr	r3, [pc, #144]	; (80102f8 <__swsetup_r+0xd8>)
 8010268:	429c      	cmp	r4, r3
 801026a:	bf08      	it	eq
 801026c:	68ec      	ldreq	r4, [r5, #12]
 801026e:	e7e6      	b.n	801023e <__swsetup_r+0x1e>
 8010270:	0758      	lsls	r0, r3, #29
 8010272:	d512      	bpl.n	801029a <__swsetup_r+0x7a>
 8010274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010276:	b141      	cbz	r1, 801028a <__swsetup_r+0x6a>
 8010278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801027c:	4299      	cmp	r1, r3
 801027e:	d002      	beq.n	8010286 <__swsetup_r+0x66>
 8010280:	4630      	mov	r0, r6
 8010282:	f7ff fb31 	bl	800f8e8 <_free_r>
 8010286:	2300      	movs	r3, #0
 8010288:	6363      	str	r3, [r4, #52]	; 0x34
 801028a:	89a3      	ldrh	r3, [r4, #12]
 801028c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010290:	81a3      	strh	r3, [r4, #12]
 8010292:	2300      	movs	r3, #0
 8010294:	6063      	str	r3, [r4, #4]
 8010296:	6923      	ldr	r3, [r4, #16]
 8010298:	6023      	str	r3, [r4, #0]
 801029a:	89a3      	ldrh	r3, [r4, #12]
 801029c:	f043 0308 	orr.w	r3, r3, #8
 80102a0:	81a3      	strh	r3, [r4, #12]
 80102a2:	6923      	ldr	r3, [r4, #16]
 80102a4:	b94b      	cbnz	r3, 80102ba <__swsetup_r+0x9a>
 80102a6:	89a3      	ldrh	r3, [r4, #12]
 80102a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80102ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102b0:	d003      	beq.n	80102ba <__swsetup_r+0x9a>
 80102b2:	4621      	mov	r1, r4
 80102b4:	4630      	mov	r0, r6
 80102b6:	f000 fa09 	bl	80106cc <__smakebuf_r>
 80102ba:	89a0      	ldrh	r0, [r4, #12]
 80102bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102c0:	f010 0301 	ands.w	r3, r0, #1
 80102c4:	d00a      	beq.n	80102dc <__swsetup_r+0xbc>
 80102c6:	2300      	movs	r3, #0
 80102c8:	60a3      	str	r3, [r4, #8]
 80102ca:	6963      	ldr	r3, [r4, #20]
 80102cc:	425b      	negs	r3, r3
 80102ce:	61a3      	str	r3, [r4, #24]
 80102d0:	6923      	ldr	r3, [r4, #16]
 80102d2:	b943      	cbnz	r3, 80102e6 <__swsetup_r+0xc6>
 80102d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80102d8:	d1ba      	bne.n	8010250 <__swsetup_r+0x30>
 80102da:	bd70      	pop	{r4, r5, r6, pc}
 80102dc:	0781      	lsls	r1, r0, #30
 80102de:	bf58      	it	pl
 80102e0:	6963      	ldrpl	r3, [r4, #20]
 80102e2:	60a3      	str	r3, [r4, #8]
 80102e4:	e7f4      	b.n	80102d0 <__swsetup_r+0xb0>
 80102e6:	2000      	movs	r0, #0
 80102e8:	e7f7      	b.n	80102da <__swsetup_r+0xba>
 80102ea:	bf00      	nop
 80102ec:	20000108 	.word	0x20000108
 80102f0:	080120f4 	.word	0x080120f4
 80102f4:	08012114 	.word	0x08012114
 80102f8:	080120d4 	.word	0x080120d4

080102fc <abort>:
 80102fc:	b508      	push	{r3, lr}
 80102fe:	2006      	movs	r0, #6
 8010300:	f000 fa54 	bl	80107ac <raise>
 8010304:	2001      	movs	r0, #1
 8010306:	f7f1 fe41 	bl	8001f8c <_exit>
	...

0801030c <__sflush_r>:
 801030c:	898a      	ldrh	r2, [r1, #12]
 801030e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010312:	4605      	mov	r5, r0
 8010314:	0710      	lsls	r0, r2, #28
 8010316:	460c      	mov	r4, r1
 8010318:	d458      	bmi.n	80103cc <__sflush_r+0xc0>
 801031a:	684b      	ldr	r3, [r1, #4]
 801031c:	2b00      	cmp	r3, #0
 801031e:	dc05      	bgt.n	801032c <__sflush_r+0x20>
 8010320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010322:	2b00      	cmp	r3, #0
 8010324:	dc02      	bgt.n	801032c <__sflush_r+0x20>
 8010326:	2000      	movs	r0, #0
 8010328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801032c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801032e:	2e00      	cmp	r6, #0
 8010330:	d0f9      	beq.n	8010326 <__sflush_r+0x1a>
 8010332:	2300      	movs	r3, #0
 8010334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010338:	682f      	ldr	r7, [r5, #0]
 801033a:	602b      	str	r3, [r5, #0]
 801033c:	d032      	beq.n	80103a4 <__sflush_r+0x98>
 801033e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010340:	89a3      	ldrh	r3, [r4, #12]
 8010342:	075a      	lsls	r2, r3, #29
 8010344:	d505      	bpl.n	8010352 <__sflush_r+0x46>
 8010346:	6863      	ldr	r3, [r4, #4]
 8010348:	1ac0      	subs	r0, r0, r3
 801034a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801034c:	b10b      	cbz	r3, 8010352 <__sflush_r+0x46>
 801034e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010350:	1ac0      	subs	r0, r0, r3
 8010352:	2300      	movs	r3, #0
 8010354:	4602      	mov	r2, r0
 8010356:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010358:	6a21      	ldr	r1, [r4, #32]
 801035a:	4628      	mov	r0, r5
 801035c:	47b0      	blx	r6
 801035e:	1c43      	adds	r3, r0, #1
 8010360:	89a3      	ldrh	r3, [r4, #12]
 8010362:	d106      	bne.n	8010372 <__sflush_r+0x66>
 8010364:	6829      	ldr	r1, [r5, #0]
 8010366:	291d      	cmp	r1, #29
 8010368:	d82c      	bhi.n	80103c4 <__sflush_r+0xb8>
 801036a:	4a2a      	ldr	r2, [pc, #168]	; (8010414 <__sflush_r+0x108>)
 801036c:	40ca      	lsrs	r2, r1
 801036e:	07d6      	lsls	r6, r2, #31
 8010370:	d528      	bpl.n	80103c4 <__sflush_r+0xb8>
 8010372:	2200      	movs	r2, #0
 8010374:	6062      	str	r2, [r4, #4]
 8010376:	04d9      	lsls	r1, r3, #19
 8010378:	6922      	ldr	r2, [r4, #16]
 801037a:	6022      	str	r2, [r4, #0]
 801037c:	d504      	bpl.n	8010388 <__sflush_r+0x7c>
 801037e:	1c42      	adds	r2, r0, #1
 8010380:	d101      	bne.n	8010386 <__sflush_r+0x7a>
 8010382:	682b      	ldr	r3, [r5, #0]
 8010384:	b903      	cbnz	r3, 8010388 <__sflush_r+0x7c>
 8010386:	6560      	str	r0, [r4, #84]	; 0x54
 8010388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801038a:	602f      	str	r7, [r5, #0]
 801038c:	2900      	cmp	r1, #0
 801038e:	d0ca      	beq.n	8010326 <__sflush_r+0x1a>
 8010390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010394:	4299      	cmp	r1, r3
 8010396:	d002      	beq.n	801039e <__sflush_r+0x92>
 8010398:	4628      	mov	r0, r5
 801039a:	f7ff faa5 	bl	800f8e8 <_free_r>
 801039e:	2000      	movs	r0, #0
 80103a0:	6360      	str	r0, [r4, #52]	; 0x34
 80103a2:	e7c1      	b.n	8010328 <__sflush_r+0x1c>
 80103a4:	6a21      	ldr	r1, [r4, #32]
 80103a6:	2301      	movs	r3, #1
 80103a8:	4628      	mov	r0, r5
 80103aa:	47b0      	blx	r6
 80103ac:	1c41      	adds	r1, r0, #1
 80103ae:	d1c7      	bne.n	8010340 <__sflush_r+0x34>
 80103b0:	682b      	ldr	r3, [r5, #0]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d0c4      	beq.n	8010340 <__sflush_r+0x34>
 80103b6:	2b1d      	cmp	r3, #29
 80103b8:	d001      	beq.n	80103be <__sflush_r+0xb2>
 80103ba:	2b16      	cmp	r3, #22
 80103bc:	d101      	bne.n	80103c2 <__sflush_r+0xb6>
 80103be:	602f      	str	r7, [r5, #0]
 80103c0:	e7b1      	b.n	8010326 <__sflush_r+0x1a>
 80103c2:	89a3      	ldrh	r3, [r4, #12]
 80103c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103c8:	81a3      	strh	r3, [r4, #12]
 80103ca:	e7ad      	b.n	8010328 <__sflush_r+0x1c>
 80103cc:	690f      	ldr	r7, [r1, #16]
 80103ce:	2f00      	cmp	r7, #0
 80103d0:	d0a9      	beq.n	8010326 <__sflush_r+0x1a>
 80103d2:	0793      	lsls	r3, r2, #30
 80103d4:	680e      	ldr	r6, [r1, #0]
 80103d6:	bf08      	it	eq
 80103d8:	694b      	ldreq	r3, [r1, #20]
 80103da:	600f      	str	r7, [r1, #0]
 80103dc:	bf18      	it	ne
 80103de:	2300      	movne	r3, #0
 80103e0:	eba6 0807 	sub.w	r8, r6, r7
 80103e4:	608b      	str	r3, [r1, #8]
 80103e6:	f1b8 0f00 	cmp.w	r8, #0
 80103ea:	dd9c      	ble.n	8010326 <__sflush_r+0x1a>
 80103ec:	6a21      	ldr	r1, [r4, #32]
 80103ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80103f0:	4643      	mov	r3, r8
 80103f2:	463a      	mov	r2, r7
 80103f4:	4628      	mov	r0, r5
 80103f6:	47b0      	blx	r6
 80103f8:	2800      	cmp	r0, #0
 80103fa:	dc06      	bgt.n	801040a <__sflush_r+0xfe>
 80103fc:	89a3      	ldrh	r3, [r4, #12]
 80103fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010402:	81a3      	strh	r3, [r4, #12]
 8010404:	f04f 30ff 	mov.w	r0, #4294967295
 8010408:	e78e      	b.n	8010328 <__sflush_r+0x1c>
 801040a:	4407      	add	r7, r0
 801040c:	eba8 0800 	sub.w	r8, r8, r0
 8010410:	e7e9      	b.n	80103e6 <__sflush_r+0xda>
 8010412:	bf00      	nop
 8010414:	20400001 	.word	0x20400001

08010418 <_fflush_r>:
 8010418:	b538      	push	{r3, r4, r5, lr}
 801041a:	690b      	ldr	r3, [r1, #16]
 801041c:	4605      	mov	r5, r0
 801041e:	460c      	mov	r4, r1
 8010420:	b913      	cbnz	r3, 8010428 <_fflush_r+0x10>
 8010422:	2500      	movs	r5, #0
 8010424:	4628      	mov	r0, r5
 8010426:	bd38      	pop	{r3, r4, r5, pc}
 8010428:	b118      	cbz	r0, 8010432 <_fflush_r+0x1a>
 801042a:	6983      	ldr	r3, [r0, #24]
 801042c:	b90b      	cbnz	r3, 8010432 <_fflush_r+0x1a>
 801042e:	f000 f887 	bl	8010540 <__sinit>
 8010432:	4b14      	ldr	r3, [pc, #80]	; (8010484 <_fflush_r+0x6c>)
 8010434:	429c      	cmp	r4, r3
 8010436:	d11b      	bne.n	8010470 <_fflush_r+0x58>
 8010438:	686c      	ldr	r4, [r5, #4]
 801043a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d0ef      	beq.n	8010422 <_fflush_r+0xa>
 8010442:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010444:	07d0      	lsls	r0, r2, #31
 8010446:	d404      	bmi.n	8010452 <_fflush_r+0x3a>
 8010448:	0599      	lsls	r1, r3, #22
 801044a:	d402      	bmi.n	8010452 <_fflush_r+0x3a>
 801044c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801044e:	f000 f915 	bl	801067c <__retarget_lock_acquire_recursive>
 8010452:	4628      	mov	r0, r5
 8010454:	4621      	mov	r1, r4
 8010456:	f7ff ff59 	bl	801030c <__sflush_r>
 801045a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801045c:	07da      	lsls	r2, r3, #31
 801045e:	4605      	mov	r5, r0
 8010460:	d4e0      	bmi.n	8010424 <_fflush_r+0xc>
 8010462:	89a3      	ldrh	r3, [r4, #12]
 8010464:	059b      	lsls	r3, r3, #22
 8010466:	d4dd      	bmi.n	8010424 <_fflush_r+0xc>
 8010468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801046a:	f000 f908 	bl	801067e <__retarget_lock_release_recursive>
 801046e:	e7d9      	b.n	8010424 <_fflush_r+0xc>
 8010470:	4b05      	ldr	r3, [pc, #20]	; (8010488 <_fflush_r+0x70>)
 8010472:	429c      	cmp	r4, r3
 8010474:	d101      	bne.n	801047a <_fflush_r+0x62>
 8010476:	68ac      	ldr	r4, [r5, #8]
 8010478:	e7df      	b.n	801043a <_fflush_r+0x22>
 801047a:	4b04      	ldr	r3, [pc, #16]	; (801048c <_fflush_r+0x74>)
 801047c:	429c      	cmp	r4, r3
 801047e:	bf08      	it	eq
 8010480:	68ec      	ldreq	r4, [r5, #12]
 8010482:	e7da      	b.n	801043a <_fflush_r+0x22>
 8010484:	080120f4 	.word	0x080120f4
 8010488:	08012114 	.word	0x08012114
 801048c:	080120d4 	.word	0x080120d4

08010490 <std>:
 8010490:	2300      	movs	r3, #0
 8010492:	b510      	push	{r4, lr}
 8010494:	4604      	mov	r4, r0
 8010496:	e9c0 3300 	strd	r3, r3, [r0]
 801049a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801049e:	6083      	str	r3, [r0, #8]
 80104a0:	8181      	strh	r1, [r0, #12]
 80104a2:	6643      	str	r3, [r0, #100]	; 0x64
 80104a4:	81c2      	strh	r2, [r0, #14]
 80104a6:	6183      	str	r3, [r0, #24]
 80104a8:	4619      	mov	r1, r3
 80104aa:	2208      	movs	r2, #8
 80104ac:	305c      	adds	r0, #92	; 0x5c
 80104ae:	f7fd fb35 	bl	800db1c <memset>
 80104b2:	4b05      	ldr	r3, [pc, #20]	; (80104c8 <std+0x38>)
 80104b4:	6263      	str	r3, [r4, #36]	; 0x24
 80104b6:	4b05      	ldr	r3, [pc, #20]	; (80104cc <std+0x3c>)
 80104b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80104ba:	4b05      	ldr	r3, [pc, #20]	; (80104d0 <std+0x40>)
 80104bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80104be:	4b05      	ldr	r3, [pc, #20]	; (80104d4 <std+0x44>)
 80104c0:	6224      	str	r4, [r4, #32]
 80104c2:	6323      	str	r3, [r4, #48]	; 0x30
 80104c4:	bd10      	pop	{r4, pc}
 80104c6:	bf00      	nop
 80104c8:	080107e5 	.word	0x080107e5
 80104cc:	08010807 	.word	0x08010807
 80104d0:	0801083f 	.word	0x0801083f
 80104d4:	08010863 	.word	0x08010863

080104d8 <_cleanup_r>:
 80104d8:	4901      	ldr	r1, [pc, #4]	; (80104e0 <_cleanup_r+0x8>)
 80104da:	f000 b8af 	b.w	801063c <_fwalk_reent>
 80104de:	bf00      	nop
 80104e0:	08010419 	.word	0x08010419

080104e4 <__sfmoreglue>:
 80104e4:	b570      	push	{r4, r5, r6, lr}
 80104e6:	2268      	movs	r2, #104	; 0x68
 80104e8:	1e4d      	subs	r5, r1, #1
 80104ea:	4355      	muls	r5, r2
 80104ec:	460e      	mov	r6, r1
 80104ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80104f2:	f7ff fa65 	bl	800f9c0 <_malloc_r>
 80104f6:	4604      	mov	r4, r0
 80104f8:	b140      	cbz	r0, 801050c <__sfmoreglue+0x28>
 80104fa:	2100      	movs	r1, #0
 80104fc:	e9c0 1600 	strd	r1, r6, [r0]
 8010500:	300c      	adds	r0, #12
 8010502:	60a0      	str	r0, [r4, #8]
 8010504:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010508:	f7fd fb08 	bl	800db1c <memset>
 801050c:	4620      	mov	r0, r4
 801050e:	bd70      	pop	{r4, r5, r6, pc}

08010510 <__sfp_lock_acquire>:
 8010510:	4801      	ldr	r0, [pc, #4]	; (8010518 <__sfp_lock_acquire+0x8>)
 8010512:	f000 b8b3 	b.w	801067c <__retarget_lock_acquire_recursive>
 8010516:	bf00      	nop
 8010518:	20006a95 	.word	0x20006a95

0801051c <__sfp_lock_release>:
 801051c:	4801      	ldr	r0, [pc, #4]	; (8010524 <__sfp_lock_release+0x8>)
 801051e:	f000 b8ae 	b.w	801067e <__retarget_lock_release_recursive>
 8010522:	bf00      	nop
 8010524:	20006a95 	.word	0x20006a95

08010528 <__sinit_lock_acquire>:
 8010528:	4801      	ldr	r0, [pc, #4]	; (8010530 <__sinit_lock_acquire+0x8>)
 801052a:	f000 b8a7 	b.w	801067c <__retarget_lock_acquire_recursive>
 801052e:	bf00      	nop
 8010530:	20006a96 	.word	0x20006a96

08010534 <__sinit_lock_release>:
 8010534:	4801      	ldr	r0, [pc, #4]	; (801053c <__sinit_lock_release+0x8>)
 8010536:	f000 b8a2 	b.w	801067e <__retarget_lock_release_recursive>
 801053a:	bf00      	nop
 801053c:	20006a96 	.word	0x20006a96

08010540 <__sinit>:
 8010540:	b510      	push	{r4, lr}
 8010542:	4604      	mov	r4, r0
 8010544:	f7ff fff0 	bl	8010528 <__sinit_lock_acquire>
 8010548:	69a3      	ldr	r3, [r4, #24]
 801054a:	b11b      	cbz	r3, 8010554 <__sinit+0x14>
 801054c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010550:	f7ff bff0 	b.w	8010534 <__sinit_lock_release>
 8010554:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010558:	6523      	str	r3, [r4, #80]	; 0x50
 801055a:	4b13      	ldr	r3, [pc, #76]	; (80105a8 <__sinit+0x68>)
 801055c:	4a13      	ldr	r2, [pc, #76]	; (80105ac <__sinit+0x6c>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	62a2      	str	r2, [r4, #40]	; 0x28
 8010562:	42a3      	cmp	r3, r4
 8010564:	bf04      	itt	eq
 8010566:	2301      	moveq	r3, #1
 8010568:	61a3      	streq	r3, [r4, #24]
 801056a:	4620      	mov	r0, r4
 801056c:	f000 f820 	bl	80105b0 <__sfp>
 8010570:	6060      	str	r0, [r4, #4]
 8010572:	4620      	mov	r0, r4
 8010574:	f000 f81c 	bl	80105b0 <__sfp>
 8010578:	60a0      	str	r0, [r4, #8]
 801057a:	4620      	mov	r0, r4
 801057c:	f000 f818 	bl	80105b0 <__sfp>
 8010580:	2200      	movs	r2, #0
 8010582:	60e0      	str	r0, [r4, #12]
 8010584:	2104      	movs	r1, #4
 8010586:	6860      	ldr	r0, [r4, #4]
 8010588:	f7ff ff82 	bl	8010490 <std>
 801058c:	68a0      	ldr	r0, [r4, #8]
 801058e:	2201      	movs	r2, #1
 8010590:	2109      	movs	r1, #9
 8010592:	f7ff ff7d 	bl	8010490 <std>
 8010596:	68e0      	ldr	r0, [r4, #12]
 8010598:	2202      	movs	r2, #2
 801059a:	2112      	movs	r1, #18
 801059c:	f7ff ff78 	bl	8010490 <std>
 80105a0:	2301      	movs	r3, #1
 80105a2:	61a3      	str	r3, [r4, #24]
 80105a4:	e7d2      	b.n	801054c <__sinit+0xc>
 80105a6:	bf00      	nop
 80105a8:	08011d5c 	.word	0x08011d5c
 80105ac:	080104d9 	.word	0x080104d9

080105b0 <__sfp>:
 80105b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105b2:	4607      	mov	r7, r0
 80105b4:	f7ff ffac 	bl	8010510 <__sfp_lock_acquire>
 80105b8:	4b1e      	ldr	r3, [pc, #120]	; (8010634 <__sfp+0x84>)
 80105ba:	681e      	ldr	r6, [r3, #0]
 80105bc:	69b3      	ldr	r3, [r6, #24]
 80105be:	b913      	cbnz	r3, 80105c6 <__sfp+0x16>
 80105c0:	4630      	mov	r0, r6
 80105c2:	f7ff ffbd 	bl	8010540 <__sinit>
 80105c6:	3648      	adds	r6, #72	; 0x48
 80105c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80105cc:	3b01      	subs	r3, #1
 80105ce:	d503      	bpl.n	80105d8 <__sfp+0x28>
 80105d0:	6833      	ldr	r3, [r6, #0]
 80105d2:	b30b      	cbz	r3, 8010618 <__sfp+0x68>
 80105d4:	6836      	ldr	r6, [r6, #0]
 80105d6:	e7f7      	b.n	80105c8 <__sfp+0x18>
 80105d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80105dc:	b9d5      	cbnz	r5, 8010614 <__sfp+0x64>
 80105de:	4b16      	ldr	r3, [pc, #88]	; (8010638 <__sfp+0x88>)
 80105e0:	60e3      	str	r3, [r4, #12]
 80105e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80105e6:	6665      	str	r5, [r4, #100]	; 0x64
 80105e8:	f000 f847 	bl	801067a <__retarget_lock_init_recursive>
 80105ec:	f7ff ff96 	bl	801051c <__sfp_lock_release>
 80105f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80105f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80105f8:	6025      	str	r5, [r4, #0]
 80105fa:	61a5      	str	r5, [r4, #24]
 80105fc:	2208      	movs	r2, #8
 80105fe:	4629      	mov	r1, r5
 8010600:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010604:	f7fd fa8a 	bl	800db1c <memset>
 8010608:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801060c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010610:	4620      	mov	r0, r4
 8010612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010614:	3468      	adds	r4, #104	; 0x68
 8010616:	e7d9      	b.n	80105cc <__sfp+0x1c>
 8010618:	2104      	movs	r1, #4
 801061a:	4638      	mov	r0, r7
 801061c:	f7ff ff62 	bl	80104e4 <__sfmoreglue>
 8010620:	4604      	mov	r4, r0
 8010622:	6030      	str	r0, [r6, #0]
 8010624:	2800      	cmp	r0, #0
 8010626:	d1d5      	bne.n	80105d4 <__sfp+0x24>
 8010628:	f7ff ff78 	bl	801051c <__sfp_lock_release>
 801062c:	230c      	movs	r3, #12
 801062e:	603b      	str	r3, [r7, #0]
 8010630:	e7ee      	b.n	8010610 <__sfp+0x60>
 8010632:	bf00      	nop
 8010634:	08011d5c 	.word	0x08011d5c
 8010638:	ffff0001 	.word	0xffff0001

0801063c <_fwalk_reent>:
 801063c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010640:	4606      	mov	r6, r0
 8010642:	4688      	mov	r8, r1
 8010644:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010648:	2700      	movs	r7, #0
 801064a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801064e:	f1b9 0901 	subs.w	r9, r9, #1
 8010652:	d505      	bpl.n	8010660 <_fwalk_reent+0x24>
 8010654:	6824      	ldr	r4, [r4, #0]
 8010656:	2c00      	cmp	r4, #0
 8010658:	d1f7      	bne.n	801064a <_fwalk_reent+0xe>
 801065a:	4638      	mov	r0, r7
 801065c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010660:	89ab      	ldrh	r3, [r5, #12]
 8010662:	2b01      	cmp	r3, #1
 8010664:	d907      	bls.n	8010676 <_fwalk_reent+0x3a>
 8010666:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801066a:	3301      	adds	r3, #1
 801066c:	d003      	beq.n	8010676 <_fwalk_reent+0x3a>
 801066e:	4629      	mov	r1, r5
 8010670:	4630      	mov	r0, r6
 8010672:	47c0      	blx	r8
 8010674:	4307      	orrs	r7, r0
 8010676:	3568      	adds	r5, #104	; 0x68
 8010678:	e7e9      	b.n	801064e <_fwalk_reent+0x12>

0801067a <__retarget_lock_init_recursive>:
 801067a:	4770      	bx	lr

0801067c <__retarget_lock_acquire_recursive>:
 801067c:	4770      	bx	lr

0801067e <__retarget_lock_release_recursive>:
 801067e:	4770      	bx	lr

08010680 <__swhatbuf_r>:
 8010680:	b570      	push	{r4, r5, r6, lr}
 8010682:	460e      	mov	r6, r1
 8010684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010688:	2900      	cmp	r1, #0
 801068a:	b096      	sub	sp, #88	; 0x58
 801068c:	4614      	mov	r4, r2
 801068e:	461d      	mov	r5, r3
 8010690:	da08      	bge.n	80106a4 <__swhatbuf_r+0x24>
 8010692:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010696:	2200      	movs	r2, #0
 8010698:	602a      	str	r2, [r5, #0]
 801069a:	061a      	lsls	r2, r3, #24
 801069c:	d410      	bmi.n	80106c0 <__swhatbuf_r+0x40>
 801069e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106a2:	e00e      	b.n	80106c2 <__swhatbuf_r+0x42>
 80106a4:	466a      	mov	r2, sp
 80106a6:	f000 f903 	bl	80108b0 <_fstat_r>
 80106aa:	2800      	cmp	r0, #0
 80106ac:	dbf1      	blt.n	8010692 <__swhatbuf_r+0x12>
 80106ae:	9a01      	ldr	r2, [sp, #4]
 80106b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80106b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80106b8:	425a      	negs	r2, r3
 80106ba:	415a      	adcs	r2, r3
 80106bc:	602a      	str	r2, [r5, #0]
 80106be:	e7ee      	b.n	801069e <__swhatbuf_r+0x1e>
 80106c0:	2340      	movs	r3, #64	; 0x40
 80106c2:	2000      	movs	r0, #0
 80106c4:	6023      	str	r3, [r4, #0]
 80106c6:	b016      	add	sp, #88	; 0x58
 80106c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080106cc <__smakebuf_r>:
 80106cc:	898b      	ldrh	r3, [r1, #12]
 80106ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80106d0:	079d      	lsls	r5, r3, #30
 80106d2:	4606      	mov	r6, r0
 80106d4:	460c      	mov	r4, r1
 80106d6:	d507      	bpl.n	80106e8 <__smakebuf_r+0x1c>
 80106d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80106dc:	6023      	str	r3, [r4, #0]
 80106de:	6123      	str	r3, [r4, #16]
 80106e0:	2301      	movs	r3, #1
 80106e2:	6163      	str	r3, [r4, #20]
 80106e4:	b002      	add	sp, #8
 80106e6:	bd70      	pop	{r4, r5, r6, pc}
 80106e8:	ab01      	add	r3, sp, #4
 80106ea:	466a      	mov	r2, sp
 80106ec:	f7ff ffc8 	bl	8010680 <__swhatbuf_r>
 80106f0:	9900      	ldr	r1, [sp, #0]
 80106f2:	4605      	mov	r5, r0
 80106f4:	4630      	mov	r0, r6
 80106f6:	f7ff f963 	bl	800f9c0 <_malloc_r>
 80106fa:	b948      	cbnz	r0, 8010710 <__smakebuf_r+0x44>
 80106fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010700:	059a      	lsls	r2, r3, #22
 8010702:	d4ef      	bmi.n	80106e4 <__smakebuf_r+0x18>
 8010704:	f023 0303 	bic.w	r3, r3, #3
 8010708:	f043 0302 	orr.w	r3, r3, #2
 801070c:	81a3      	strh	r3, [r4, #12]
 801070e:	e7e3      	b.n	80106d8 <__smakebuf_r+0xc>
 8010710:	4b0d      	ldr	r3, [pc, #52]	; (8010748 <__smakebuf_r+0x7c>)
 8010712:	62b3      	str	r3, [r6, #40]	; 0x28
 8010714:	89a3      	ldrh	r3, [r4, #12]
 8010716:	6020      	str	r0, [r4, #0]
 8010718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801071c:	81a3      	strh	r3, [r4, #12]
 801071e:	9b00      	ldr	r3, [sp, #0]
 8010720:	6163      	str	r3, [r4, #20]
 8010722:	9b01      	ldr	r3, [sp, #4]
 8010724:	6120      	str	r0, [r4, #16]
 8010726:	b15b      	cbz	r3, 8010740 <__smakebuf_r+0x74>
 8010728:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801072c:	4630      	mov	r0, r6
 801072e:	f000 f8d1 	bl	80108d4 <_isatty_r>
 8010732:	b128      	cbz	r0, 8010740 <__smakebuf_r+0x74>
 8010734:	89a3      	ldrh	r3, [r4, #12]
 8010736:	f023 0303 	bic.w	r3, r3, #3
 801073a:	f043 0301 	orr.w	r3, r3, #1
 801073e:	81a3      	strh	r3, [r4, #12]
 8010740:	89a0      	ldrh	r0, [r4, #12]
 8010742:	4305      	orrs	r5, r0
 8010744:	81a5      	strh	r5, [r4, #12]
 8010746:	e7cd      	b.n	80106e4 <__smakebuf_r+0x18>
 8010748:	080104d9 	.word	0x080104d9

0801074c <_malloc_usable_size_r>:
 801074c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010750:	1f18      	subs	r0, r3, #4
 8010752:	2b00      	cmp	r3, #0
 8010754:	bfbc      	itt	lt
 8010756:	580b      	ldrlt	r3, [r1, r0]
 8010758:	18c0      	addlt	r0, r0, r3
 801075a:	4770      	bx	lr

0801075c <_raise_r>:
 801075c:	291f      	cmp	r1, #31
 801075e:	b538      	push	{r3, r4, r5, lr}
 8010760:	4604      	mov	r4, r0
 8010762:	460d      	mov	r5, r1
 8010764:	d904      	bls.n	8010770 <_raise_r+0x14>
 8010766:	2316      	movs	r3, #22
 8010768:	6003      	str	r3, [r0, #0]
 801076a:	f04f 30ff 	mov.w	r0, #4294967295
 801076e:	bd38      	pop	{r3, r4, r5, pc}
 8010770:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010772:	b112      	cbz	r2, 801077a <_raise_r+0x1e>
 8010774:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010778:	b94b      	cbnz	r3, 801078e <_raise_r+0x32>
 801077a:	4620      	mov	r0, r4
 801077c:	f000 f830 	bl	80107e0 <_getpid_r>
 8010780:	462a      	mov	r2, r5
 8010782:	4601      	mov	r1, r0
 8010784:	4620      	mov	r0, r4
 8010786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801078a:	f000 b817 	b.w	80107bc <_kill_r>
 801078e:	2b01      	cmp	r3, #1
 8010790:	d00a      	beq.n	80107a8 <_raise_r+0x4c>
 8010792:	1c59      	adds	r1, r3, #1
 8010794:	d103      	bne.n	801079e <_raise_r+0x42>
 8010796:	2316      	movs	r3, #22
 8010798:	6003      	str	r3, [r0, #0]
 801079a:	2001      	movs	r0, #1
 801079c:	e7e7      	b.n	801076e <_raise_r+0x12>
 801079e:	2400      	movs	r4, #0
 80107a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80107a4:	4628      	mov	r0, r5
 80107a6:	4798      	blx	r3
 80107a8:	2000      	movs	r0, #0
 80107aa:	e7e0      	b.n	801076e <_raise_r+0x12>

080107ac <raise>:
 80107ac:	4b02      	ldr	r3, [pc, #8]	; (80107b8 <raise+0xc>)
 80107ae:	4601      	mov	r1, r0
 80107b0:	6818      	ldr	r0, [r3, #0]
 80107b2:	f7ff bfd3 	b.w	801075c <_raise_r>
 80107b6:	bf00      	nop
 80107b8:	20000108 	.word	0x20000108

080107bc <_kill_r>:
 80107bc:	b538      	push	{r3, r4, r5, lr}
 80107be:	4d07      	ldr	r5, [pc, #28]	; (80107dc <_kill_r+0x20>)
 80107c0:	2300      	movs	r3, #0
 80107c2:	4604      	mov	r4, r0
 80107c4:	4608      	mov	r0, r1
 80107c6:	4611      	mov	r1, r2
 80107c8:	602b      	str	r3, [r5, #0]
 80107ca:	f7f1 fbcf 	bl	8001f6c <_kill>
 80107ce:	1c43      	adds	r3, r0, #1
 80107d0:	d102      	bne.n	80107d8 <_kill_r+0x1c>
 80107d2:	682b      	ldr	r3, [r5, #0]
 80107d4:	b103      	cbz	r3, 80107d8 <_kill_r+0x1c>
 80107d6:	6023      	str	r3, [r4, #0]
 80107d8:	bd38      	pop	{r3, r4, r5, pc}
 80107da:	bf00      	nop
 80107dc:	20006a90 	.word	0x20006a90

080107e0 <_getpid_r>:
 80107e0:	f7f1 bbbc 	b.w	8001f5c <_getpid>

080107e4 <__sread>:
 80107e4:	b510      	push	{r4, lr}
 80107e6:	460c      	mov	r4, r1
 80107e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107ec:	f000 f894 	bl	8010918 <_read_r>
 80107f0:	2800      	cmp	r0, #0
 80107f2:	bfab      	itete	ge
 80107f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80107f6:	89a3      	ldrhlt	r3, [r4, #12]
 80107f8:	181b      	addge	r3, r3, r0
 80107fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80107fe:	bfac      	ite	ge
 8010800:	6563      	strge	r3, [r4, #84]	; 0x54
 8010802:	81a3      	strhlt	r3, [r4, #12]
 8010804:	bd10      	pop	{r4, pc}

08010806 <__swrite>:
 8010806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801080a:	461f      	mov	r7, r3
 801080c:	898b      	ldrh	r3, [r1, #12]
 801080e:	05db      	lsls	r3, r3, #23
 8010810:	4605      	mov	r5, r0
 8010812:	460c      	mov	r4, r1
 8010814:	4616      	mov	r6, r2
 8010816:	d505      	bpl.n	8010824 <__swrite+0x1e>
 8010818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801081c:	2302      	movs	r3, #2
 801081e:	2200      	movs	r2, #0
 8010820:	f000 f868 	bl	80108f4 <_lseek_r>
 8010824:	89a3      	ldrh	r3, [r4, #12]
 8010826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801082a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801082e:	81a3      	strh	r3, [r4, #12]
 8010830:	4632      	mov	r2, r6
 8010832:	463b      	mov	r3, r7
 8010834:	4628      	mov	r0, r5
 8010836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801083a:	f000 b817 	b.w	801086c <_write_r>

0801083e <__sseek>:
 801083e:	b510      	push	{r4, lr}
 8010840:	460c      	mov	r4, r1
 8010842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010846:	f000 f855 	bl	80108f4 <_lseek_r>
 801084a:	1c43      	adds	r3, r0, #1
 801084c:	89a3      	ldrh	r3, [r4, #12]
 801084e:	bf15      	itete	ne
 8010850:	6560      	strne	r0, [r4, #84]	; 0x54
 8010852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801085a:	81a3      	strheq	r3, [r4, #12]
 801085c:	bf18      	it	ne
 801085e:	81a3      	strhne	r3, [r4, #12]
 8010860:	bd10      	pop	{r4, pc}

08010862 <__sclose>:
 8010862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010866:	f000 b813 	b.w	8010890 <_close_r>
	...

0801086c <_write_r>:
 801086c:	b538      	push	{r3, r4, r5, lr}
 801086e:	4d07      	ldr	r5, [pc, #28]	; (801088c <_write_r+0x20>)
 8010870:	4604      	mov	r4, r0
 8010872:	4608      	mov	r0, r1
 8010874:	4611      	mov	r1, r2
 8010876:	2200      	movs	r2, #0
 8010878:	602a      	str	r2, [r5, #0]
 801087a:	461a      	mov	r2, r3
 801087c:	f7f1 fbad 	bl	8001fda <_write>
 8010880:	1c43      	adds	r3, r0, #1
 8010882:	d102      	bne.n	801088a <_write_r+0x1e>
 8010884:	682b      	ldr	r3, [r5, #0]
 8010886:	b103      	cbz	r3, 801088a <_write_r+0x1e>
 8010888:	6023      	str	r3, [r4, #0]
 801088a:	bd38      	pop	{r3, r4, r5, pc}
 801088c:	20006a90 	.word	0x20006a90

08010890 <_close_r>:
 8010890:	b538      	push	{r3, r4, r5, lr}
 8010892:	4d06      	ldr	r5, [pc, #24]	; (80108ac <_close_r+0x1c>)
 8010894:	2300      	movs	r3, #0
 8010896:	4604      	mov	r4, r0
 8010898:	4608      	mov	r0, r1
 801089a:	602b      	str	r3, [r5, #0]
 801089c:	f7f1 fbb9 	bl	8002012 <_close>
 80108a0:	1c43      	adds	r3, r0, #1
 80108a2:	d102      	bne.n	80108aa <_close_r+0x1a>
 80108a4:	682b      	ldr	r3, [r5, #0]
 80108a6:	b103      	cbz	r3, 80108aa <_close_r+0x1a>
 80108a8:	6023      	str	r3, [r4, #0]
 80108aa:	bd38      	pop	{r3, r4, r5, pc}
 80108ac:	20006a90 	.word	0x20006a90

080108b0 <_fstat_r>:
 80108b0:	b538      	push	{r3, r4, r5, lr}
 80108b2:	4d07      	ldr	r5, [pc, #28]	; (80108d0 <_fstat_r+0x20>)
 80108b4:	2300      	movs	r3, #0
 80108b6:	4604      	mov	r4, r0
 80108b8:	4608      	mov	r0, r1
 80108ba:	4611      	mov	r1, r2
 80108bc:	602b      	str	r3, [r5, #0]
 80108be:	f7f1 fbb4 	bl	800202a <_fstat>
 80108c2:	1c43      	adds	r3, r0, #1
 80108c4:	d102      	bne.n	80108cc <_fstat_r+0x1c>
 80108c6:	682b      	ldr	r3, [r5, #0]
 80108c8:	b103      	cbz	r3, 80108cc <_fstat_r+0x1c>
 80108ca:	6023      	str	r3, [r4, #0]
 80108cc:	bd38      	pop	{r3, r4, r5, pc}
 80108ce:	bf00      	nop
 80108d0:	20006a90 	.word	0x20006a90

080108d4 <_isatty_r>:
 80108d4:	b538      	push	{r3, r4, r5, lr}
 80108d6:	4d06      	ldr	r5, [pc, #24]	; (80108f0 <_isatty_r+0x1c>)
 80108d8:	2300      	movs	r3, #0
 80108da:	4604      	mov	r4, r0
 80108dc:	4608      	mov	r0, r1
 80108de:	602b      	str	r3, [r5, #0]
 80108e0:	f7f1 fbb3 	bl	800204a <_isatty>
 80108e4:	1c43      	adds	r3, r0, #1
 80108e6:	d102      	bne.n	80108ee <_isatty_r+0x1a>
 80108e8:	682b      	ldr	r3, [r5, #0]
 80108ea:	b103      	cbz	r3, 80108ee <_isatty_r+0x1a>
 80108ec:	6023      	str	r3, [r4, #0]
 80108ee:	bd38      	pop	{r3, r4, r5, pc}
 80108f0:	20006a90 	.word	0x20006a90

080108f4 <_lseek_r>:
 80108f4:	b538      	push	{r3, r4, r5, lr}
 80108f6:	4d07      	ldr	r5, [pc, #28]	; (8010914 <_lseek_r+0x20>)
 80108f8:	4604      	mov	r4, r0
 80108fa:	4608      	mov	r0, r1
 80108fc:	4611      	mov	r1, r2
 80108fe:	2200      	movs	r2, #0
 8010900:	602a      	str	r2, [r5, #0]
 8010902:	461a      	mov	r2, r3
 8010904:	f7f1 fbac 	bl	8002060 <_lseek>
 8010908:	1c43      	adds	r3, r0, #1
 801090a:	d102      	bne.n	8010912 <_lseek_r+0x1e>
 801090c:	682b      	ldr	r3, [r5, #0]
 801090e:	b103      	cbz	r3, 8010912 <_lseek_r+0x1e>
 8010910:	6023      	str	r3, [r4, #0]
 8010912:	bd38      	pop	{r3, r4, r5, pc}
 8010914:	20006a90 	.word	0x20006a90

08010918 <_read_r>:
 8010918:	b538      	push	{r3, r4, r5, lr}
 801091a:	4d07      	ldr	r5, [pc, #28]	; (8010938 <_read_r+0x20>)
 801091c:	4604      	mov	r4, r0
 801091e:	4608      	mov	r0, r1
 8010920:	4611      	mov	r1, r2
 8010922:	2200      	movs	r2, #0
 8010924:	602a      	str	r2, [r5, #0]
 8010926:	461a      	mov	r2, r3
 8010928:	f7f1 fb3a 	bl	8001fa0 <_read>
 801092c:	1c43      	adds	r3, r0, #1
 801092e:	d102      	bne.n	8010936 <_read_r+0x1e>
 8010930:	682b      	ldr	r3, [r5, #0]
 8010932:	b103      	cbz	r3, 8010936 <_read_r+0x1e>
 8010934:	6023      	str	r3, [r4, #0]
 8010936:	bd38      	pop	{r3, r4, r5, pc}
 8010938:	20006a90 	.word	0x20006a90
 801093c:	00000000 	.word	0x00000000

08010940 <atan>:
 8010940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010944:	ec55 4b10 	vmov	r4, r5, d0
 8010948:	4bc3      	ldr	r3, [pc, #780]	; (8010c58 <atan+0x318>)
 801094a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801094e:	429e      	cmp	r6, r3
 8010950:	46ab      	mov	fp, r5
 8010952:	dd18      	ble.n	8010986 <atan+0x46>
 8010954:	4bc1      	ldr	r3, [pc, #772]	; (8010c5c <atan+0x31c>)
 8010956:	429e      	cmp	r6, r3
 8010958:	dc01      	bgt.n	801095e <atan+0x1e>
 801095a:	d109      	bne.n	8010970 <atan+0x30>
 801095c:	b144      	cbz	r4, 8010970 <atan+0x30>
 801095e:	4622      	mov	r2, r4
 8010960:	462b      	mov	r3, r5
 8010962:	4620      	mov	r0, r4
 8010964:	4629      	mov	r1, r5
 8010966:	f7ef fc91 	bl	800028c <__adddf3>
 801096a:	4604      	mov	r4, r0
 801096c:	460d      	mov	r5, r1
 801096e:	e006      	b.n	801097e <atan+0x3e>
 8010970:	f1bb 0f00 	cmp.w	fp, #0
 8010974:	f300 8131 	bgt.w	8010bda <atan+0x29a>
 8010978:	a59b      	add	r5, pc, #620	; (adr r5, 8010be8 <atan+0x2a8>)
 801097a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801097e:	ec45 4b10 	vmov	d0, r4, r5
 8010982:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010986:	4bb6      	ldr	r3, [pc, #728]	; (8010c60 <atan+0x320>)
 8010988:	429e      	cmp	r6, r3
 801098a:	dc14      	bgt.n	80109b6 <atan+0x76>
 801098c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010990:	429e      	cmp	r6, r3
 8010992:	dc0d      	bgt.n	80109b0 <atan+0x70>
 8010994:	a396      	add	r3, pc, #600	; (adr r3, 8010bf0 <atan+0x2b0>)
 8010996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801099a:	ee10 0a10 	vmov	r0, s0
 801099e:	4629      	mov	r1, r5
 80109a0:	f7ef fc74 	bl	800028c <__adddf3>
 80109a4:	4baf      	ldr	r3, [pc, #700]	; (8010c64 <atan+0x324>)
 80109a6:	2200      	movs	r2, #0
 80109a8:	f7f0 f8b6 	bl	8000b18 <__aeabi_dcmpgt>
 80109ac:	2800      	cmp	r0, #0
 80109ae:	d1e6      	bne.n	801097e <atan+0x3e>
 80109b0:	f04f 3aff 	mov.w	sl, #4294967295
 80109b4:	e02b      	b.n	8010a0e <atan+0xce>
 80109b6:	f000 f963 	bl	8010c80 <fabs>
 80109ba:	4bab      	ldr	r3, [pc, #684]	; (8010c68 <atan+0x328>)
 80109bc:	429e      	cmp	r6, r3
 80109be:	ec55 4b10 	vmov	r4, r5, d0
 80109c2:	f300 80bf 	bgt.w	8010b44 <atan+0x204>
 80109c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80109ca:	429e      	cmp	r6, r3
 80109cc:	f300 80a0 	bgt.w	8010b10 <atan+0x1d0>
 80109d0:	ee10 2a10 	vmov	r2, s0
 80109d4:	ee10 0a10 	vmov	r0, s0
 80109d8:	462b      	mov	r3, r5
 80109da:	4629      	mov	r1, r5
 80109dc:	f7ef fc56 	bl	800028c <__adddf3>
 80109e0:	4ba0      	ldr	r3, [pc, #640]	; (8010c64 <atan+0x324>)
 80109e2:	2200      	movs	r2, #0
 80109e4:	f7ef fc50 	bl	8000288 <__aeabi_dsub>
 80109e8:	2200      	movs	r2, #0
 80109ea:	4606      	mov	r6, r0
 80109ec:	460f      	mov	r7, r1
 80109ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80109f2:	4620      	mov	r0, r4
 80109f4:	4629      	mov	r1, r5
 80109f6:	f7ef fc49 	bl	800028c <__adddf3>
 80109fa:	4602      	mov	r2, r0
 80109fc:	460b      	mov	r3, r1
 80109fe:	4630      	mov	r0, r6
 8010a00:	4639      	mov	r1, r7
 8010a02:	f7ef ff23 	bl	800084c <__aeabi_ddiv>
 8010a06:	f04f 0a00 	mov.w	sl, #0
 8010a0a:	4604      	mov	r4, r0
 8010a0c:	460d      	mov	r5, r1
 8010a0e:	4622      	mov	r2, r4
 8010a10:	462b      	mov	r3, r5
 8010a12:	4620      	mov	r0, r4
 8010a14:	4629      	mov	r1, r5
 8010a16:	f7ef fdef 	bl	80005f8 <__aeabi_dmul>
 8010a1a:	4602      	mov	r2, r0
 8010a1c:	460b      	mov	r3, r1
 8010a1e:	4680      	mov	r8, r0
 8010a20:	4689      	mov	r9, r1
 8010a22:	f7ef fde9 	bl	80005f8 <__aeabi_dmul>
 8010a26:	a374      	add	r3, pc, #464	; (adr r3, 8010bf8 <atan+0x2b8>)
 8010a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a2c:	4606      	mov	r6, r0
 8010a2e:	460f      	mov	r7, r1
 8010a30:	f7ef fde2 	bl	80005f8 <__aeabi_dmul>
 8010a34:	a372      	add	r3, pc, #456	; (adr r3, 8010c00 <atan+0x2c0>)
 8010a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a3a:	f7ef fc27 	bl	800028c <__adddf3>
 8010a3e:	4632      	mov	r2, r6
 8010a40:	463b      	mov	r3, r7
 8010a42:	f7ef fdd9 	bl	80005f8 <__aeabi_dmul>
 8010a46:	a370      	add	r3, pc, #448	; (adr r3, 8010c08 <atan+0x2c8>)
 8010a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a4c:	f7ef fc1e 	bl	800028c <__adddf3>
 8010a50:	4632      	mov	r2, r6
 8010a52:	463b      	mov	r3, r7
 8010a54:	f7ef fdd0 	bl	80005f8 <__aeabi_dmul>
 8010a58:	a36d      	add	r3, pc, #436	; (adr r3, 8010c10 <atan+0x2d0>)
 8010a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a5e:	f7ef fc15 	bl	800028c <__adddf3>
 8010a62:	4632      	mov	r2, r6
 8010a64:	463b      	mov	r3, r7
 8010a66:	f7ef fdc7 	bl	80005f8 <__aeabi_dmul>
 8010a6a:	a36b      	add	r3, pc, #428	; (adr r3, 8010c18 <atan+0x2d8>)
 8010a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a70:	f7ef fc0c 	bl	800028c <__adddf3>
 8010a74:	4632      	mov	r2, r6
 8010a76:	463b      	mov	r3, r7
 8010a78:	f7ef fdbe 	bl	80005f8 <__aeabi_dmul>
 8010a7c:	a368      	add	r3, pc, #416	; (adr r3, 8010c20 <atan+0x2e0>)
 8010a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a82:	f7ef fc03 	bl	800028c <__adddf3>
 8010a86:	4642      	mov	r2, r8
 8010a88:	464b      	mov	r3, r9
 8010a8a:	f7ef fdb5 	bl	80005f8 <__aeabi_dmul>
 8010a8e:	a366      	add	r3, pc, #408	; (adr r3, 8010c28 <atan+0x2e8>)
 8010a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a94:	4680      	mov	r8, r0
 8010a96:	4689      	mov	r9, r1
 8010a98:	4630      	mov	r0, r6
 8010a9a:	4639      	mov	r1, r7
 8010a9c:	f7ef fdac 	bl	80005f8 <__aeabi_dmul>
 8010aa0:	a363      	add	r3, pc, #396	; (adr r3, 8010c30 <atan+0x2f0>)
 8010aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa6:	f7ef fbef 	bl	8000288 <__aeabi_dsub>
 8010aaa:	4632      	mov	r2, r6
 8010aac:	463b      	mov	r3, r7
 8010aae:	f7ef fda3 	bl	80005f8 <__aeabi_dmul>
 8010ab2:	a361      	add	r3, pc, #388	; (adr r3, 8010c38 <atan+0x2f8>)
 8010ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab8:	f7ef fbe6 	bl	8000288 <__aeabi_dsub>
 8010abc:	4632      	mov	r2, r6
 8010abe:	463b      	mov	r3, r7
 8010ac0:	f7ef fd9a 	bl	80005f8 <__aeabi_dmul>
 8010ac4:	a35e      	add	r3, pc, #376	; (adr r3, 8010c40 <atan+0x300>)
 8010ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aca:	f7ef fbdd 	bl	8000288 <__aeabi_dsub>
 8010ace:	4632      	mov	r2, r6
 8010ad0:	463b      	mov	r3, r7
 8010ad2:	f7ef fd91 	bl	80005f8 <__aeabi_dmul>
 8010ad6:	a35c      	add	r3, pc, #368	; (adr r3, 8010c48 <atan+0x308>)
 8010ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010adc:	f7ef fbd4 	bl	8000288 <__aeabi_dsub>
 8010ae0:	4632      	mov	r2, r6
 8010ae2:	463b      	mov	r3, r7
 8010ae4:	f7ef fd88 	bl	80005f8 <__aeabi_dmul>
 8010ae8:	4602      	mov	r2, r0
 8010aea:	460b      	mov	r3, r1
 8010aec:	4640      	mov	r0, r8
 8010aee:	4649      	mov	r1, r9
 8010af0:	f7ef fbcc 	bl	800028c <__adddf3>
 8010af4:	4622      	mov	r2, r4
 8010af6:	462b      	mov	r3, r5
 8010af8:	f7ef fd7e 	bl	80005f8 <__aeabi_dmul>
 8010afc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010b00:	4602      	mov	r2, r0
 8010b02:	460b      	mov	r3, r1
 8010b04:	d14b      	bne.n	8010b9e <atan+0x25e>
 8010b06:	4620      	mov	r0, r4
 8010b08:	4629      	mov	r1, r5
 8010b0a:	f7ef fbbd 	bl	8000288 <__aeabi_dsub>
 8010b0e:	e72c      	b.n	801096a <atan+0x2a>
 8010b10:	ee10 0a10 	vmov	r0, s0
 8010b14:	4b53      	ldr	r3, [pc, #332]	; (8010c64 <atan+0x324>)
 8010b16:	2200      	movs	r2, #0
 8010b18:	4629      	mov	r1, r5
 8010b1a:	f7ef fbb5 	bl	8000288 <__aeabi_dsub>
 8010b1e:	4b51      	ldr	r3, [pc, #324]	; (8010c64 <atan+0x324>)
 8010b20:	4606      	mov	r6, r0
 8010b22:	460f      	mov	r7, r1
 8010b24:	2200      	movs	r2, #0
 8010b26:	4620      	mov	r0, r4
 8010b28:	4629      	mov	r1, r5
 8010b2a:	f7ef fbaf 	bl	800028c <__adddf3>
 8010b2e:	4602      	mov	r2, r0
 8010b30:	460b      	mov	r3, r1
 8010b32:	4630      	mov	r0, r6
 8010b34:	4639      	mov	r1, r7
 8010b36:	f7ef fe89 	bl	800084c <__aeabi_ddiv>
 8010b3a:	f04f 0a01 	mov.w	sl, #1
 8010b3e:	4604      	mov	r4, r0
 8010b40:	460d      	mov	r5, r1
 8010b42:	e764      	b.n	8010a0e <atan+0xce>
 8010b44:	4b49      	ldr	r3, [pc, #292]	; (8010c6c <atan+0x32c>)
 8010b46:	429e      	cmp	r6, r3
 8010b48:	da1d      	bge.n	8010b86 <atan+0x246>
 8010b4a:	ee10 0a10 	vmov	r0, s0
 8010b4e:	4b48      	ldr	r3, [pc, #288]	; (8010c70 <atan+0x330>)
 8010b50:	2200      	movs	r2, #0
 8010b52:	4629      	mov	r1, r5
 8010b54:	f7ef fb98 	bl	8000288 <__aeabi_dsub>
 8010b58:	4b45      	ldr	r3, [pc, #276]	; (8010c70 <atan+0x330>)
 8010b5a:	4606      	mov	r6, r0
 8010b5c:	460f      	mov	r7, r1
 8010b5e:	2200      	movs	r2, #0
 8010b60:	4620      	mov	r0, r4
 8010b62:	4629      	mov	r1, r5
 8010b64:	f7ef fd48 	bl	80005f8 <__aeabi_dmul>
 8010b68:	4b3e      	ldr	r3, [pc, #248]	; (8010c64 <atan+0x324>)
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	f7ef fb8e 	bl	800028c <__adddf3>
 8010b70:	4602      	mov	r2, r0
 8010b72:	460b      	mov	r3, r1
 8010b74:	4630      	mov	r0, r6
 8010b76:	4639      	mov	r1, r7
 8010b78:	f7ef fe68 	bl	800084c <__aeabi_ddiv>
 8010b7c:	f04f 0a02 	mov.w	sl, #2
 8010b80:	4604      	mov	r4, r0
 8010b82:	460d      	mov	r5, r1
 8010b84:	e743      	b.n	8010a0e <atan+0xce>
 8010b86:	462b      	mov	r3, r5
 8010b88:	ee10 2a10 	vmov	r2, s0
 8010b8c:	4939      	ldr	r1, [pc, #228]	; (8010c74 <atan+0x334>)
 8010b8e:	2000      	movs	r0, #0
 8010b90:	f7ef fe5c 	bl	800084c <__aeabi_ddiv>
 8010b94:	f04f 0a03 	mov.w	sl, #3
 8010b98:	4604      	mov	r4, r0
 8010b9a:	460d      	mov	r5, r1
 8010b9c:	e737      	b.n	8010a0e <atan+0xce>
 8010b9e:	4b36      	ldr	r3, [pc, #216]	; (8010c78 <atan+0x338>)
 8010ba0:	4e36      	ldr	r6, [pc, #216]	; (8010c7c <atan+0x33c>)
 8010ba2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010ba6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8010baa:	e9da 2300 	ldrd	r2, r3, [sl]
 8010bae:	f7ef fb6b 	bl	8000288 <__aeabi_dsub>
 8010bb2:	4622      	mov	r2, r4
 8010bb4:	462b      	mov	r3, r5
 8010bb6:	f7ef fb67 	bl	8000288 <__aeabi_dsub>
 8010bba:	4602      	mov	r2, r0
 8010bbc:	460b      	mov	r3, r1
 8010bbe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010bc2:	f7ef fb61 	bl	8000288 <__aeabi_dsub>
 8010bc6:	f1bb 0f00 	cmp.w	fp, #0
 8010bca:	4604      	mov	r4, r0
 8010bcc:	460d      	mov	r5, r1
 8010bce:	f6bf aed6 	bge.w	801097e <atan+0x3e>
 8010bd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010bd6:	461d      	mov	r5, r3
 8010bd8:	e6d1      	b.n	801097e <atan+0x3e>
 8010bda:	a51d      	add	r5, pc, #116	; (adr r5, 8010c50 <atan+0x310>)
 8010bdc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010be0:	e6cd      	b.n	801097e <atan+0x3e>
 8010be2:	bf00      	nop
 8010be4:	f3af 8000 	nop.w
 8010be8:	54442d18 	.word	0x54442d18
 8010bec:	bff921fb 	.word	0xbff921fb
 8010bf0:	8800759c 	.word	0x8800759c
 8010bf4:	7e37e43c 	.word	0x7e37e43c
 8010bf8:	e322da11 	.word	0xe322da11
 8010bfc:	3f90ad3a 	.word	0x3f90ad3a
 8010c00:	24760deb 	.word	0x24760deb
 8010c04:	3fa97b4b 	.word	0x3fa97b4b
 8010c08:	a0d03d51 	.word	0xa0d03d51
 8010c0c:	3fb10d66 	.word	0x3fb10d66
 8010c10:	c54c206e 	.word	0xc54c206e
 8010c14:	3fb745cd 	.word	0x3fb745cd
 8010c18:	920083ff 	.word	0x920083ff
 8010c1c:	3fc24924 	.word	0x3fc24924
 8010c20:	5555550d 	.word	0x5555550d
 8010c24:	3fd55555 	.word	0x3fd55555
 8010c28:	2c6a6c2f 	.word	0x2c6a6c2f
 8010c2c:	bfa2b444 	.word	0xbfa2b444
 8010c30:	52defd9a 	.word	0x52defd9a
 8010c34:	3fadde2d 	.word	0x3fadde2d
 8010c38:	af749a6d 	.word	0xaf749a6d
 8010c3c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010c40:	fe231671 	.word	0xfe231671
 8010c44:	3fbc71c6 	.word	0x3fbc71c6
 8010c48:	9998ebc4 	.word	0x9998ebc4
 8010c4c:	3fc99999 	.word	0x3fc99999
 8010c50:	54442d18 	.word	0x54442d18
 8010c54:	3ff921fb 	.word	0x3ff921fb
 8010c58:	440fffff 	.word	0x440fffff
 8010c5c:	7ff00000 	.word	0x7ff00000
 8010c60:	3fdbffff 	.word	0x3fdbffff
 8010c64:	3ff00000 	.word	0x3ff00000
 8010c68:	3ff2ffff 	.word	0x3ff2ffff
 8010c6c:	40038000 	.word	0x40038000
 8010c70:	3ff80000 	.word	0x3ff80000
 8010c74:	bff00000 	.word	0xbff00000
 8010c78:	08012158 	.word	0x08012158
 8010c7c:	08012138 	.word	0x08012138

08010c80 <fabs>:
 8010c80:	ec51 0b10 	vmov	r0, r1, d0
 8010c84:	ee10 2a10 	vmov	r2, s0
 8010c88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010c8c:	ec43 2b10 	vmov	d0, r2, r3
 8010c90:	4770      	bx	lr
	...

08010c94 <pow>:
 8010c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c96:	ed2d 8b02 	vpush	{d8}
 8010c9a:	eeb0 8a40 	vmov.f32	s16, s0
 8010c9e:	eef0 8a60 	vmov.f32	s17, s1
 8010ca2:	ec55 4b11 	vmov	r4, r5, d1
 8010ca6:	f000 f893 	bl	8010dd0 <__ieee754_pow>
 8010caa:	4622      	mov	r2, r4
 8010cac:	462b      	mov	r3, r5
 8010cae:	4620      	mov	r0, r4
 8010cb0:	4629      	mov	r1, r5
 8010cb2:	ec57 6b10 	vmov	r6, r7, d0
 8010cb6:	f7ef ff39 	bl	8000b2c <__aeabi_dcmpun>
 8010cba:	2800      	cmp	r0, #0
 8010cbc:	d13b      	bne.n	8010d36 <pow+0xa2>
 8010cbe:	ec51 0b18 	vmov	r0, r1, d8
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	f7ef feff 	bl	8000ac8 <__aeabi_dcmpeq>
 8010cca:	b1b8      	cbz	r0, 8010cfc <pow+0x68>
 8010ccc:	2200      	movs	r2, #0
 8010cce:	2300      	movs	r3, #0
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	4629      	mov	r1, r5
 8010cd4:	f7ef fef8 	bl	8000ac8 <__aeabi_dcmpeq>
 8010cd8:	2800      	cmp	r0, #0
 8010cda:	d146      	bne.n	8010d6a <pow+0xd6>
 8010cdc:	ec45 4b10 	vmov	d0, r4, r5
 8010ce0:	f000 fe86 	bl	80119f0 <finite>
 8010ce4:	b338      	cbz	r0, 8010d36 <pow+0xa2>
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	2300      	movs	r3, #0
 8010cea:	4620      	mov	r0, r4
 8010cec:	4629      	mov	r1, r5
 8010cee:	f7ef fef5 	bl	8000adc <__aeabi_dcmplt>
 8010cf2:	b300      	cbz	r0, 8010d36 <pow+0xa2>
 8010cf4:	f7fc feda 	bl	800daac <__errno>
 8010cf8:	2322      	movs	r3, #34	; 0x22
 8010cfa:	e01b      	b.n	8010d34 <pow+0xa0>
 8010cfc:	ec47 6b10 	vmov	d0, r6, r7
 8010d00:	f000 fe76 	bl	80119f0 <finite>
 8010d04:	b9e0      	cbnz	r0, 8010d40 <pow+0xac>
 8010d06:	eeb0 0a48 	vmov.f32	s0, s16
 8010d0a:	eef0 0a68 	vmov.f32	s1, s17
 8010d0e:	f000 fe6f 	bl	80119f0 <finite>
 8010d12:	b1a8      	cbz	r0, 8010d40 <pow+0xac>
 8010d14:	ec45 4b10 	vmov	d0, r4, r5
 8010d18:	f000 fe6a 	bl	80119f0 <finite>
 8010d1c:	b180      	cbz	r0, 8010d40 <pow+0xac>
 8010d1e:	4632      	mov	r2, r6
 8010d20:	463b      	mov	r3, r7
 8010d22:	4630      	mov	r0, r6
 8010d24:	4639      	mov	r1, r7
 8010d26:	f7ef ff01 	bl	8000b2c <__aeabi_dcmpun>
 8010d2a:	2800      	cmp	r0, #0
 8010d2c:	d0e2      	beq.n	8010cf4 <pow+0x60>
 8010d2e:	f7fc febd 	bl	800daac <__errno>
 8010d32:	2321      	movs	r3, #33	; 0x21
 8010d34:	6003      	str	r3, [r0, #0]
 8010d36:	ecbd 8b02 	vpop	{d8}
 8010d3a:	ec47 6b10 	vmov	d0, r6, r7
 8010d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d40:	2200      	movs	r2, #0
 8010d42:	2300      	movs	r3, #0
 8010d44:	4630      	mov	r0, r6
 8010d46:	4639      	mov	r1, r7
 8010d48:	f7ef febe 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d4c:	2800      	cmp	r0, #0
 8010d4e:	d0f2      	beq.n	8010d36 <pow+0xa2>
 8010d50:	eeb0 0a48 	vmov.f32	s0, s16
 8010d54:	eef0 0a68 	vmov.f32	s1, s17
 8010d58:	f000 fe4a 	bl	80119f0 <finite>
 8010d5c:	2800      	cmp	r0, #0
 8010d5e:	d0ea      	beq.n	8010d36 <pow+0xa2>
 8010d60:	ec45 4b10 	vmov	d0, r4, r5
 8010d64:	f000 fe44 	bl	80119f0 <finite>
 8010d68:	e7c3      	b.n	8010cf2 <pow+0x5e>
 8010d6a:	4f01      	ldr	r7, [pc, #4]	; (8010d70 <pow+0xdc>)
 8010d6c:	2600      	movs	r6, #0
 8010d6e:	e7e2      	b.n	8010d36 <pow+0xa2>
 8010d70:	3ff00000 	.word	0x3ff00000

08010d74 <sqrt>:
 8010d74:	b538      	push	{r3, r4, r5, lr}
 8010d76:	ed2d 8b02 	vpush	{d8}
 8010d7a:	ec55 4b10 	vmov	r4, r5, d0
 8010d7e:	f000 fd55 	bl	801182c <__ieee754_sqrt>
 8010d82:	4622      	mov	r2, r4
 8010d84:	462b      	mov	r3, r5
 8010d86:	4620      	mov	r0, r4
 8010d88:	4629      	mov	r1, r5
 8010d8a:	eeb0 8a40 	vmov.f32	s16, s0
 8010d8e:	eef0 8a60 	vmov.f32	s17, s1
 8010d92:	f7ef fecb 	bl	8000b2c <__aeabi_dcmpun>
 8010d96:	b990      	cbnz	r0, 8010dbe <sqrt+0x4a>
 8010d98:	2200      	movs	r2, #0
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	4629      	mov	r1, r5
 8010da0:	f7ef fe9c 	bl	8000adc <__aeabi_dcmplt>
 8010da4:	b158      	cbz	r0, 8010dbe <sqrt+0x4a>
 8010da6:	f7fc fe81 	bl	800daac <__errno>
 8010daa:	2321      	movs	r3, #33	; 0x21
 8010dac:	6003      	str	r3, [r0, #0]
 8010dae:	2200      	movs	r2, #0
 8010db0:	2300      	movs	r3, #0
 8010db2:	4610      	mov	r0, r2
 8010db4:	4619      	mov	r1, r3
 8010db6:	f7ef fd49 	bl	800084c <__aeabi_ddiv>
 8010dba:	ec41 0b18 	vmov	d8, r0, r1
 8010dbe:	eeb0 0a48 	vmov.f32	s0, s16
 8010dc2:	eef0 0a68 	vmov.f32	s1, s17
 8010dc6:	ecbd 8b02 	vpop	{d8}
 8010dca:	bd38      	pop	{r3, r4, r5, pc}
 8010dcc:	0000      	movs	r0, r0
	...

08010dd0 <__ieee754_pow>:
 8010dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd4:	ed2d 8b06 	vpush	{d8-d10}
 8010dd8:	b089      	sub	sp, #36	; 0x24
 8010dda:	ed8d 1b00 	vstr	d1, [sp]
 8010dde:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010de2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010de6:	ea58 0102 	orrs.w	r1, r8, r2
 8010dea:	ec57 6b10 	vmov	r6, r7, d0
 8010dee:	d115      	bne.n	8010e1c <__ieee754_pow+0x4c>
 8010df0:	19b3      	adds	r3, r6, r6
 8010df2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010df6:	4152      	adcs	r2, r2
 8010df8:	4299      	cmp	r1, r3
 8010dfa:	4b89      	ldr	r3, [pc, #548]	; (8011020 <__ieee754_pow+0x250>)
 8010dfc:	4193      	sbcs	r3, r2
 8010dfe:	f080 84d2 	bcs.w	80117a6 <__ieee754_pow+0x9d6>
 8010e02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e06:	4630      	mov	r0, r6
 8010e08:	4639      	mov	r1, r7
 8010e0a:	f7ef fa3f 	bl	800028c <__adddf3>
 8010e0e:	ec41 0b10 	vmov	d0, r0, r1
 8010e12:	b009      	add	sp, #36	; 0x24
 8010e14:	ecbd 8b06 	vpop	{d8-d10}
 8010e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e1c:	4b81      	ldr	r3, [pc, #516]	; (8011024 <__ieee754_pow+0x254>)
 8010e1e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010e22:	429c      	cmp	r4, r3
 8010e24:	ee10 aa10 	vmov	sl, s0
 8010e28:	463d      	mov	r5, r7
 8010e2a:	dc06      	bgt.n	8010e3a <__ieee754_pow+0x6a>
 8010e2c:	d101      	bne.n	8010e32 <__ieee754_pow+0x62>
 8010e2e:	2e00      	cmp	r6, #0
 8010e30:	d1e7      	bne.n	8010e02 <__ieee754_pow+0x32>
 8010e32:	4598      	cmp	r8, r3
 8010e34:	dc01      	bgt.n	8010e3a <__ieee754_pow+0x6a>
 8010e36:	d10f      	bne.n	8010e58 <__ieee754_pow+0x88>
 8010e38:	b172      	cbz	r2, 8010e58 <__ieee754_pow+0x88>
 8010e3a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010e3e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010e42:	ea55 050a 	orrs.w	r5, r5, sl
 8010e46:	d1dc      	bne.n	8010e02 <__ieee754_pow+0x32>
 8010e48:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010e4c:	18db      	adds	r3, r3, r3
 8010e4e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010e52:	4152      	adcs	r2, r2
 8010e54:	429d      	cmp	r5, r3
 8010e56:	e7d0      	b.n	8010dfa <__ieee754_pow+0x2a>
 8010e58:	2d00      	cmp	r5, #0
 8010e5a:	da3b      	bge.n	8010ed4 <__ieee754_pow+0x104>
 8010e5c:	4b72      	ldr	r3, [pc, #456]	; (8011028 <__ieee754_pow+0x258>)
 8010e5e:	4598      	cmp	r8, r3
 8010e60:	dc51      	bgt.n	8010f06 <__ieee754_pow+0x136>
 8010e62:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010e66:	4598      	cmp	r8, r3
 8010e68:	f340 84ac 	ble.w	80117c4 <__ieee754_pow+0x9f4>
 8010e6c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010e70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010e74:	2b14      	cmp	r3, #20
 8010e76:	dd0f      	ble.n	8010e98 <__ieee754_pow+0xc8>
 8010e78:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010e7c:	fa22 f103 	lsr.w	r1, r2, r3
 8010e80:	fa01 f303 	lsl.w	r3, r1, r3
 8010e84:	4293      	cmp	r3, r2
 8010e86:	f040 849d 	bne.w	80117c4 <__ieee754_pow+0x9f4>
 8010e8a:	f001 0101 	and.w	r1, r1, #1
 8010e8e:	f1c1 0302 	rsb	r3, r1, #2
 8010e92:	9304      	str	r3, [sp, #16]
 8010e94:	b182      	cbz	r2, 8010eb8 <__ieee754_pow+0xe8>
 8010e96:	e05f      	b.n	8010f58 <__ieee754_pow+0x188>
 8010e98:	2a00      	cmp	r2, #0
 8010e9a:	d15b      	bne.n	8010f54 <__ieee754_pow+0x184>
 8010e9c:	f1c3 0314 	rsb	r3, r3, #20
 8010ea0:	fa48 f103 	asr.w	r1, r8, r3
 8010ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8010ea8:	4543      	cmp	r3, r8
 8010eaa:	f040 8488 	bne.w	80117be <__ieee754_pow+0x9ee>
 8010eae:	f001 0101 	and.w	r1, r1, #1
 8010eb2:	f1c1 0302 	rsb	r3, r1, #2
 8010eb6:	9304      	str	r3, [sp, #16]
 8010eb8:	4b5c      	ldr	r3, [pc, #368]	; (801102c <__ieee754_pow+0x25c>)
 8010eba:	4598      	cmp	r8, r3
 8010ebc:	d132      	bne.n	8010f24 <__ieee754_pow+0x154>
 8010ebe:	f1b9 0f00 	cmp.w	r9, #0
 8010ec2:	f280 8478 	bge.w	80117b6 <__ieee754_pow+0x9e6>
 8010ec6:	4959      	ldr	r1, [pc, #356]	; (801102c <__ieee754_pow+0x25c>)
 8010ec8:	4632      	mov	r2, r6
 8010eca:	463b      	mov	r3, r7
 8010ecc:	2000      	movs	r0, #0
 8010ece:	f7ef fcbd 	bl	800084c <__aeabi_ddiv>
 8010ed2:	e79c      	b.n	8010e0e <__ieee754_pow+0x3e>
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	9304      	str	r3, [sp, #16]
 8010ed8:	2a00      	cmp	r2, #0
 8010eda:	d13d      	bne.n	8010f58 <__ieee754_pow+0x188>
 8010edc:	4b51      	ldr	r3, [pc, #324]	; (8011024 <__ieee754_pow+0x254>)
 8010ede:	4598      	cmp	r8, r3
 8010ee0:	d1ea      	bne.n	8010eb8 <__ieee754_pow+0xe8>
 8010ee2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010ee6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010eea:	ea53 030a 	orrs.w	r3, r3, sl
 8010eee:	f000 845a 	beq.w	80117a6 <__ieee754_pow+0x9d6>
 8010ef2:	4b4f      	ldr	r3, [pc, #316]	; (8011030 <__ieee754_pow+0x260>)
 8010ef4:	429c      	cmp	r4, r3
 8010ef6:	dd08      	ble.n	8010f0a <__ieee754_pow+0x13a>
 8010ef8:	f1b9 0f00 	cmp.w	r9, #0
 8010efc:	f2c0 8457 	blt.w	80117ae <__ieee754_pow+0x9de>
 8010f00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f04:	e783      	b.n	8010e0e <__ieee754_pow+0x3e>
 8010f06:	2302      	movs	r3, #2
 8010f08:	e7e5      	b.n	8010ed6 <__ieee754_pow+0x106>
 8010f0a:	f1b9 0f00 	cmp.w	r9, #0
 8010f0e:	f04f 0000 	mov.w	r0, #0
 8010f12:	f04f 0100 	mov.w	r1, #0
 8010f16:	f6bf af7a 	bge.w	8010e0e <__ieee754_pow+0x3e>
 8010f1a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010f1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010f22:	e774      	b.n	8010e0e <__ieee754_pow+0x3e>
 8010f24:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010f28:	d106      	bne.n	8010f38 <__ieee754_pow+0x168>
 8010f2a:	4632      	mov	r2, r6
 8010f2c:	463b      	mov	r3, r7
 8010f2e:	4630      	mov	r0, r6
 8010f30:	4639      	mov	r1, r7
 8010f32:	f7ef fb61 	bl	80005f8 <__aeabi_dmul>
 8010f36:	e76a      	b.n	8010e0e <__ieee754_pow+0x3e>
 8010f38:	4b3e      	ldr	r3, [pc, #248]	; (8011034 <__ieee754_pow+0x264>)
 8010f3a:	4599      	cmp	r9, r3
 8010f3c:	d10c      	bne.n	8010f58 <__ieee754_pow+0x188>
 8010f3e:	2d00      	cmp	r5, #0
 8010f40:	db0a      	blt.n	8010f58 <__ieee754_pow+0x188>
 8010f42:	ec47 6b10 	vmov	d0, r6, r7
 8010f46:	b009      	add	sp, #36	; 0x24
 8010f48:	ecbd 8b06 	vpop	{d8-d10}
 8010f4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f50:	f000 bc6c 	b.w	801182c <__ieee754_sqrt>
 8010f54:	2300      	movs	r3, #0
 8010f56:	9304      	str	r3, [sp, #16]
 8010f58:	ec47 6b10 	vmov	d0, r6, r7
 8010f5c:	f7ff fe90 	bl	8010c80 <fabs>
 8010f60:	ec51 0b10 	vmov	r0, r1, d0
 8010f64:	f1ba 0f00 	cmp.w	sl, #0
 8010f68:	d129      	bne.n	8010fbe <__ieee754_pow+0x1ee>
 8010f6a:	b124      	cbz	r4, 8010f76 <__ieee754_pow+0x1a6>
 8010f6c:	4b2f      	ldr	r3, [pc, #188]	; (801102c <__ieee754_pow+0x25c>)
 8010f6e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010f72:	429a      	cmp	r2, r3
 8010f74:	d123      	bne.n	8010fbe <__ieee754_pow+0x1ee>
 8010f76:	f1b9 0f00 	cmp.w	r9, #0
 8010f7a:	da05      	bge.n	8010f88 <__ieee754_pow+0x1b8>
 8010f7c:	4602      	mov	r2, r0
 8010f7e:	460b      	mov	r3, r1
 8010f80:	2000      	movs	r0, #0
 8010f82:	492a      	ldr	r1, [pc, #168]	; (801102c <__ieee754_pow+0x25c>)
 8010f84:	f7ef fc62 	bl	800084c <__aeabi_ddiv>
 8010f88:	2d00      	cmp	r5, #0
 8010f8a:	f6bf af40 	bge.w	8010e0e <__ieee754_pow+0x3e>
 8010f8e:	9b04      	ldr	r3, [sp, #16]
 8010f90:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010f94:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010f98:	4323      	orrs	r3, r4
 8010f9a:	d108      	bne.n	8010fae <__ieee754_pow+0x1de>
 8010f9c:	4602      	mov	r2, r0
 8010f9e:	460b      	mov	r3, r1
 8010fa0:	4610      	mov	r0, r2
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	f7ef f970 	bl	8000288 <__aeabi_dsub>
 8010fa8:	4602      	mov	r2, r0
 8010faa:	460b      	mov	r3, r1
 8010fac:	e78f      	b.n	8010ece <__ieee754_pow+0xfe>
 8010fae:	9b04      	ldr	r3, [sp, #16]
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	f47f af2c 	bne.w	8010e0e <__ieee754_pow+0x3e>
 8010fb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010fba:	4619      	mov	r1, r3
 8010fbc:	e727      	b.n	8010e0e <__ieee754_pow+0x3e>
 8010fbe:	0feb      	lsrs	r3, r5, #31
 8010fc0:	3b01      	subs	r3, #1
 8010fc2:	9306      	str	r3, [sp, #24]
 8010fc4:	9a06      	ldr	r2, [sp, #24]
 8010fc6:	9b04      	ldr	r3, [sp, #16]
 8010fc8:	4313      	orrs	r3, r2
 8010fca:	d102      	bne.n	8010fd2 <__ieee754_pow+0x202>
 8010fcc:	4632      	mov	r2, r6
 8010fce:	463b      	mov	r3, r7
 8010fd0:	e7e6      	b.n	8010fa0 <__ieee754_pow+0x1d0>
 8010fd2:	4b19      	ldr	r3, [pc, #100]	; (8011038 <__ieee754_pow+0x268>)
 8010fd4:	4598      	cmp	r8, r3
 8010fd6:	f340 80fb 	ble.w	80111d0 <__ieee754_pow+0x400>
 8010fda:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010fde:	4598      	cmp	r8, r3
 8010fe0:	4b13      	ldr	r3, [pc, #76]	; (8011030 <__ieee754_pow+0x260>)
 8010fe2:	dd0c      	ble.n	8010ffe <__ieee754_pow+0x22e>
 8010fe4:	429c      	cmp	r4, r3
 8010fe6:	dc0f      	bgt.n	8011008 <__ieee754_pow+0x238>
 8010fe8:	f1b9 0f00 	cmp.w	r9, #0
 8010fec:	da0f      	bge.n	801100e <__ieee754_pow+0x23e>
 8010fee:	2000      	movs	r0, #0
 8010ff0:	b009      	add	sp, #36	; 0x24
 8010ff2:	ecbd 8b06 	vpop	{d8-d10}
 8010ff6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ffa:	f000 bcf0 	b.w	80119de <__math_oflow>
 8010ffe:	429c      	cmp	r4, r3
 8011000:	dbf2      	blt.n	8010fe8 <__ieee754_pow+0x218>
 8011002:	4b0a      	ldr	r3, [pc, #40]	; (801102c <__ieee754_pow+0x25c>)
 8011004:	429c      	cmp	r4, r3
 8011006:	dd19      	ble.n	801103c <__ieee754_pow+0x26c>
 8011008:	f1b9 0f00 	cmp.w	r9, #0
 801100c:	dcef      	bgt.n	8010fee <__ieee754_pow+0x21e>
 801100e:	2000      	movs	r0, #0
 8011010:	b009      	add	sp, #36	; 0x24
 8011012:	ecbd 8b06 	vpop	{d8-d10}
 8011016:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801101a:	f000 bcd7 	b.w	80119cc <__math_uflow>
 801101e:	bf00      	nop
 8011020:	fff00000 	.word	0xfff00000
 8011024:	7ff00000 	.word	0x7ff00000
 8011028:	433fffff 	.word	0x433fffff
 801102c:	3ff00000 	.word	0x3ff00000
 8011030:	3fefffff 	.word	0x3fefffff
 8011034:	3fe00000 	.word	0x3fe00000
 8011038:	41e00000 	.word	0x41e00000
 801103c:	4b60      	ldr	r3, [pc, #384]	; (80111c0 <__ieee754_pow+0x3f0>)
 801103e:	2200      	movs	r2, #0
 8011040:	f7ef f922 	bl	8000288 <__aeabi_dsub>
 8011044:	a354      	add	r3, pc, #336	; (adr r3, 8011198 <__ieee754_pow+0x3c8>)
 8011046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801104a:	4604      	mov	r4, r0
 801104c:	460d      	mov	r5, r1
 801104e:	f7ef fad3 	bl	80005f8 <__aeabi_dmul>
 8011052:	a353      	add	r3, pc, #332	; (adr r3, 80111a0 <__ieee754_pow+0x3d0>)
 8011054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011058:	4606      	mov	r6, r0
 801105a:	460f      	mov	r7, r1
 801105c:	4620      	mov	r0, r4
 801105e:	4629      	mov	r1, r5
 8011060:	f7ef faca 	bl	80005f8 <__aeabi_dmul>
 8011064:	4b57      	ldr	r3, [pc, #348]	; (80111c4 <__ieee754_pow+0x3f4>)
 8011066:	4682      	mov	sl, r0
 8011068:	468b      	mov	fp, r1
 801106a:	2200      	movs	r2, #0
 801106c:	4620      	mov	r0, r4
 801106e:	4629      	mov	r1, r5
 8011070:	f7ef fac2 	bl	80005f8 <__aeabi_dmul>
 8011074:	4602      	mov	r2, r0
 8011076:	460b      	mov	r3, r1
 8011078:	a14b      	add	r1, pc, #300	; (adr r1, 80111a8 <__ieee754_pow+0x3d8>)
 801107a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801107e:	f7ef f903 	bl	8000288 <__aeabi_dsub>
 8011082:	4622      	mov	r2, r4
 8011084:	462b      	mov	r3, r5
 8011086:	f7ef fab7 	bl	80005f8 <__aeabi_dmul>
 801108a:	4602      	mov	r2, r0
 801108c:	460b      	mov	r3, r1
 801108e:	2000      	movs	r0, #0
 8011090:	494d      	ldr	r1, [pc, #308]	; (80111c8 <__ieee754_pow+0x3f8>)
 8011092:	f7ef f8f9 	bl	8000288 <__aeabi_dsub>
 8011096:	4622      	mov	r2, r4
 8011098:	4680      	mov	r8, r0
 801109a:	4689      	mov	r9, r1
 801109c:	462b      	mov	r3, r5
 801109e:	4620      	mov	r0, r4
 80110a0:	4629      	mov	r1, r5
 80110a2:	f7ef faa9 	bl	80005f8 <__aeabi_dmul>
 80110a6:	4602      	mov	r2, r0
 80110a8:	460b      	mov	r3, r1
 80110aa:	4640      	mov	r0, r8
 80110ac:	4649      	mov	r1, r9
 80110ae:	f7ef faa3 	bl	80005f8 <__aeabi_dmul>
 80110b2:	a33f      	add	r3, pc, #252	; (adr r3, 80111b0 <__ieee754_pow+0x3e0>)
 80110b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b8:	f7ef fa9e 	bl	80005f8 <__aeabi_dmul>
 80110bc:	4602      	mov	r2, r0
 80110be:	460b      	mov	r3, r1
 80110c0:	4650      	mov	r0, sl
 80110c2:	4659      	mov	r1, fp
 80110c4:	f7ef f8e0 	bl	8000288 <__aeabi_dsub>
 80110c8:	4602      	mov	r2, r0
 80110ca:	460b      	mov	r3, r1
 80110cc:	4680      	mov	r8, r0
 80110ce:	4689      	mov	r9, r1
 80110d0:	4630      	mov	r0, r6
 80110d2:	4639      	mov	r1, r7
 80110d4:	f7ef f8da 	bl	800028c <__adddf3>
 80110d8:	2000      	movs	r0, #0
 80110da:	4632      	mov	r2, r6
 80110dc:	463b      	mov	r3, r7
 80110de:	4604      	mov	r4, r0
 80110e0:	460d      	mov	r5, r1
 80110e2:	f7ef f8d1 	bl	8000288 <__aeabi_dsub>
 80110e6:	4602      	mov	r2, r0
 80110e8:	460b      	mov	r3, r1
 80110ea:	4640      	mov	r0, r8
 80110ec:	4649      	mov	r1, r9
 80110ee:	f7ef f8cb 	bl	8000288 <__aeabi_dsub>
 80110f2:	9b04      	ldr	r3, [sp, #16]
 80110f4:	9a06      	ldr	r2, [sp, #24]
 80110f6:	3b01      	subs	r3, #1
 80110f8:	4313      	orrs	r3, r2
 80110fa:	4682      	mov	sl, r0
 80110fc:	468b      	mov	fp, r1
 80110fe:	f040 81e7 	bne.w	80114d0 <__ieee754_pow+0x700>
 8011102:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80111b8 <__ieee754_pow+0x3e8>
 8011106:	eeb0 8a47 	vmov.f32	s16, s14
 801110a:	eef0 8a67 	vmov.f32	s17, s15
 801110e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011112:	2600      	movs	r6, #0
 8011114:	4632      	mov	r2, r6
 8011116:	463b      	mov	r3, r7
 8011118:	e9dd 0100 	ldrd	r0, r1, [sp]
 801111c:	f7ef f8b4 	bl	8000288 <__aeabi_dsub>
 8011120:	4622      	mov	r2, r4
 8011122:	462b      	mov	r3, r5
 8011124:	f7ef fa68 	bl	80005f8 <__aeabi_dmul>
 8011128:	e9dd 2300 	ldrd	r2, r3, [sp]
 801112c:	4680      	mov	r8, r0
 801112e:	4689      	mov	r9, r1
 8011130:	4650      	mov	r0, sl
 8011132:	4659      	mov	r1, fp
 8011134:	f7ef fa60 	bl	80005f8 <__aeabi_dmul>
 8011138:	4602      	mov	r2, r0
 801113a:	460b      	mov	r3, r1
 801113c:	4640      	mov	r0, r8
 801113e:	4649      	mov	r1, r9
 8011140:	f7ef f8a4 	bl	800028c <__adddf3>
 8011144:	4632      	mov	r2, r6
 8011146:	463b      	mov	r3, r7
 8011148:	4680      	mov	r8, r0
 801114a:	4689      	mov	r9, r1
 801114c:	4620      	mov	r0, r4
 801114e:	4629      	mov	r1, r5
 8011150:	f7ef fa52 	bl	80005f8 <__aeabi_dmul>
 8011154:	460b      	mov	r3, r1
 8011156:	4604      	mov	r4, r0
 8011158:	460d      	mov	r5, r1
 801115a:	4602      	mov	r2, r0
 801115c:	4649      	mov	r1, r9
 801115e:	4640      	mov	r0, r8
 8011160:	f7ef f894 	bl	800028c <__adddf3>
 8011164:	4b19      	ldr	r3, [pc, #100]	; (80111cc <__ieee754_pow+0x3fc>)
 8011166:	4299      	cmp	r1, r3
 8011168:	ec45 4b19 	vmov	d9, r4, r5
 801116c:	4606      	mov	r6, r0
 801116e:	460f      	mov	r7, r1
 8011170:	468b      	mov	fp, r1
 8011172:	f340 82f1 	ble.w	8011758 <__ieee754_pow+0x988>
 8011176:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801117a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801117e:	4303      	orrs	r3, r0
 8011180:	f000 81e4 	beq.w	801154c <__ieee754_pow+0x77c>
 8011184:	ec51 0b18 	vmov	r0, r1, d8
 8011188:	2200      	movs	r2, #0
 801118a:	2300      	movs	r3, #0
 801118c:	f7ef fca6 	bl	8000adc <__aeabi_dcmplt>
 8011190:	3800      	subs	r0, #0
 8011192:	bf18      	it	ne
 8011194:	2001      	movne	r0, #1
 8011196:	e72b      	b.n	8010ff0 <__ieee754_pow+0x220>
 8011198:	60000000 	.word	0x60000000
 801119c:	3ff71547 	.word	0x3ff71547
 80111a0:	f85ddf44 	.word	0xf85ddf44
 80111a4:	3e54ae0b 	.word	0x3e54ae0b
 80111a8:	55555555 	.word	0x55555555
 80111ac:	3fd55555 	.word	0x3fd55555
 80111b0:	652b82fe 	.word	0x652b82fe
 80111b4:	3ff71547 	.word	0x3ff71547
 80111b8:	00000000 	.word	0x00000000
 80111bc:	bff00000 	.word	0xbff00000
 80111c0:	3ff00000 	.word	0x3ff00000
 80111c4:	3fd00000 	.word	0x3fd00000
 80111c8:	3fe00000 	.word	0x3fe00000
 80111cc:	408fffff 	.word	0x408fffff
 80111d0:	4bd5      	ldr	r3, [pc, #852]	; (8011528 <__ieee754_pow+0x758>)
 80111d2:	402b      	ands	r3, r5
 80111d4:	2200      	movs	r2, #0
 80111d6:	b92b      	cbnz	r3, 80111e4 <__ieee754_pow+0x414>
 80111d8:	4bd4      	ldr	r3, [pc, #848]	; (801152c <__ieee754_pow+0x75c>)
 80111da:	f7ef fa0d 	bl	80005f8 <__aeabi_dmul>
 80111de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80111e2:	460c      	mov	r4, r1
 80111e4:	1523      	asrs	r3, r4, #20
 80111e6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80111ea:	4413      	add	r3, r2
 80111ec:	9305      	str	r3, [sp, #20]
 80111ee:	4bd0      	ldr	r3, [pc, #832]	; (8011530 <__ieee754_pow+0x760>)
 80111f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80111f4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80111f8:	429c      	cmp	r4, r3
 80111fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80111fe:	dd08      	ble.n	8011212 <__ieee754_pow+0x442>
 8011200:	4bcc      	ldr	r3, [pc, #816]	; (8011534 <__ieee754_pow+0x764>)
 8011202:	429c      	cmp	r4, r3
 8011204:	f340 8162 	ble.w	80114cc <__ieee754_pow+0x6fc>
 8011208:	9b05      	ldr	r3, [sp, #20]
 801120a:	3301      	adds	r3, #1
 801120c:	9305      	str	r3, [sp, #20]
 801120e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011212:	2400      	movs	r4, #0
 8011214:	00e3      	lsls	r3, r4, #3
 8011216:	9307      	str	r3, [sp, #28]
 8011218:	4bc7      	ldr	r3, [pc, #796]	; (8011538 <__ieee754_pow+0x768>)
 801121a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801121e:	ed93 7b00 	vldr	d7, [r3]
 8011222:	4629      	mov	r1, r5
 8011224:	ec53 2b17 	vmov	r2, r3, d7
 8011228:	eeb0 9a47 	vmov.f32	s18, s14
 801122c:	eef0 9a67 	vmov.f32	s19, s15
 8011230:	4682      	mov	sl, r0
 8011232:	f7ef f829 	bl	8000288 <__aeabi_dsub>
 8011236:	4652      	mov	r2, sl
 8011238:	4606      	mov	r6, r0
 801123a:	460f      	mov	r7, r1
 801123c:	462b      	mov	r3, r5
 801123e:	ec51 0b19 	vmov	r0, r1, d9
 8011242:	f7ef f823 	bl	800028c <__adddf3>
 8011246:	4602      	mov	r2, r0
 8011248:	460b      	mov	r3, r1
 801124a:	2000      	movs	r0, #0
 801124c:	49bb      	ldr	r1, [pc, #748]	; (801153c <__ieee754_pow+0x76c>)
 801124e:	f7ef fafd 	bl	800084c <__aeabi_ddiv>
 8011252:	ec41 0b1a 	vmov	d10, r0, r1
 8011256:	4602      	mov	r2, r0
 8011258:	460b      	mov	r3, r1
 801125a:	4630      	mov	r0, r6
 801125c:	4639      	mov	r1, r7
 801125e:	f7ef f9cb 	bl	80005f8 <__aeabi_dmul>
 8011262:	2300      	movs	r3, #0
 8011264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011268:	9302      	str	r3, [sp, #8]
 801126a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801126e:	46ab      	mov	fp, r5
 8011270:	106d      	asrs	r5, r5, #1
 8011272:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011276:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801127a:	ec41 0b18 	vmov	d8, r0, r1
 801127e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011282:	2200      	movs	r2, #0
 8011284:	4640      	mov	r0, r8
 8011286:	4649      	mov	r1, r9
 8011288:	4614      	mov	r4, r2
 801128a:	461d      	mov	r5, r3
 801128c:	f7ef f9b4 	bl	80005f8 <__aeabi_dmul>
 8011290:	4602      	mov	r2, r0
 8011292:	460b      	mov	r3, r1
 8011294:	4630      	mov	r0, r6
 8011296:	4639      	mov	r1, r7
 8011298:	f7ee fff6 	bl	8000288 <__aeabi_dsub>
 801129c:	ec53 2b19 	vmov	r2, r3, d9
 80112a0:	4606      	mov	r6, r0
 80112a2:	460f      	mov	r7, r1
 80112a4:	4620      	mov	r0, r4
 80112a6:	4629      	mov	r1, r5
 80112a8:	f7ee ffee 	bl	8000288 <__aeabi_dsub>
 80112ac:	4602      	mov	r2, r0
 80112ae:	460b      	mov	r3, r1
 80112b0:	4650      	mov	r0, sl
 80112b2:	4659      	mov	r1, fp
 80112b4:	f7ee ffe8 	bl	8000288 <__aeabi_dsub>
 80112b8:	4642      	mov	r2, r8
 80112ba:	464b      	mov	r3, r9
 80112bc:	f7ef f99c 	bl	80005f8 <__aeabi_dmul>
 80112c0:	4602      	mov	r2, r0
 80112c2:	460b      	mov	r3, r1
 80112c4:	4630      	mov	r0, r6
 80112c6:	4639      	mov	r1, r7
 80112c8:	f7ee ffde 	bl	8000288 <__aeabi_dsub>
 80112cc:	ec53 2b1a 	vmov	r2, r3, d10
 80112d0:	f7ef f992 	bl	80005f8 <__aeabi_dmul>
 80112d4:	ec53 2b18 	vmov	r2, r3, d8
 80112d8:	ec41 0b19 	vmov	d9, r0, r1
 80112dc:	ec51 0b18 	vmov	r0, r1, d8
 80112e0:	f7ef f98a 	bl	80005f8 <__aeabi_dmul>
 80112e4:	a37c      	add	r3, pc, #496	; (adr r3, 80114d8 <__ieee754_pow+0x708>)
 80112e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ea:	4604      	mov	r4, r0
 80112ec:	460d      	mov	r5, r1
 80112ee:	f7ef f983 	bl	80005f8 <__aeabi_dmul>
 80112f2:	a37b      	add	r3, pc, #492	; (adr r3, 80114e0 <__ieee754_pow+0x710>)
 80112f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f8:	f7ee ffc8 	bl	800028c <__adddf3>
 80112fc:	4622      	mov	r2, r4
 80112fe:	462b      	mov	r3, r5
 8011300:	f7ef f97a 	bl	80005f8 <__aeabi_dmul>
 8011304:	a378      	add	r3, pc, #480	; (adr r3, 80114e8 <__ieee754_pow+0x718>)
 8011306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130a:	f7ee ffbf 	bl	800028c <__adddf3>
 801130e:	4622      	mov	r2, r4
 8011310:	462b      	mov	r3, r5
 8011312:	f7ef f971 	bl	80005f8 <__aeabi_dmul>
 8011316:	a376      	add	r3, pc, #472	; (adr r3, 80114f0 <__ieee754_pow+0x720>)
 8011318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801131c:	f7ee ffb6 	bl	800028c <__adddf3>
 8011320:	4622      	mov	r2, r4
 8011322:	462b      	mov	r3, r5
 8011324:	f7ef f968 	bl	80005f8 <__aeabi_dmul>
 8011328:	a373      	add	r3, pc, #460	; (adr r3, 80114f8 <__ieee754_pow+0x728>)
 801132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801132e:	f7ee ffad 	bl	800028c <__adddf3>
 8011332:	4622      	mov	r2, r4
 8011334:	462b      	mov	r3, r5
 8011336:	f7ef f95f 	bl	80005f8 <__aeabi_dmul>
 801133a:	a371      	add	r3, pc, #452	; (adr r3, 8011500 <__ieee754_pow+0x730>)
 801133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011340:	f7ee ffa4 	bl	800028c <__adddf3>
 8011344:	4622      	mov	r2, r4
 8011346:	4606      	mov	r6, r0
 8011348:	460f      	mov	r7, r1
 801134a:	462b      	mov	r3, r5
 801134c:	4620      	mov	r0, r4
 801134e:	4629      	mov	r1, r5
 8011350:	f7ef f952 	bl	80005f8 <__aeabi_dmul>
 8011354:	4602      	mov	r2, r0
 8011356:	460b      	mov	r3, r1
 8011358:	4630      	mov	r0, r6
 801135a:	4639      	mov	r1, r7
 801135c:	f7ef f94c 	bl	80005f8 <__aeabi_dmul>
 8011360:	4642      	mov	r2, r8
 8011362:	4604      	mov	r4, r0
 8011364:	460d      	mov	r5, r1
 8011366:	464b      	mov	r3, r9
 8011368:	ec51 0b18 	vmov	r0, r1, d8
 801136c:	f7ee ff8e 	bl	800028c <__adddf3>
 8011370:	ec53 2b19 	vmov	r2, r3, d9
 8011374:	f7ef f940 	bl	80005f8 <__aeabi_dmul>
 8011378:	4622      	mov	r2, r4
 801137a:	462b      	mov	r3, r5
 801137c:	f7ee ff86 	bl	800028c <__adddf3>
 8011380:	4642      	mov	r2, r8
 8011382:	4682      	mov	sl, r0
 8011384:	468b      	mov	fp, r1
 8011386:	464b      	mov	r3, r9
 8011388:	4640      	mov	r0, r8
 801138a:	4649      	mov	r1, r9
 801138c:	f7ef f934 	bl	80005f8 <__aeabi_dmul>
 8011390:	4b6b      	ldr	r3, [pc, #428]	; (8011540 <__ieee754_pow+0x770>)
 8011392:	2200      	movs	r2, #0
 8011394:	4606      	mov	r6, r0
 8011396:	460f      	mov	r7, r1
 8011398:	f7ee ff78 	bl	800028c <__adddf3>
 801139c:	4652      	mov	r2, sl
 801139e:	465b      	mov	r3, fp
 80113a0:	f7ee ff74 	bl	800028c <__adddf3>
 80113a4:	2000      	movs	r0, #0
 80113a6:	4604      	mov	r4, r0
 80113a8:	460d      	mov	r5, r1
 80113aa:	4602      	mov	r2, r0
 80113ac:	460b      	mov	r3, r1
 80113ae:	4640      	mov	r0, r8
 80113b0:	4649      	mov	r1, r9
 80113b2:	f7ef f921 	bl	80005f8 <__aeabi_dmul>
 80113b6:	4b62      	ldr	r3, [pc, #392]	; (8011540 <__ieee754_pow+0x770>)
 80113b8:	4680      	mov	r8, r0
 80113ba:	4689      	mov	r9, r1
 80113bc:	2200      	movs	r2, #0
 80113be:	4620      	mov	r0, r4
 80113c0:	4629      	mov	r1, r5
 80113c2:	f7ee ff61 	bl	8000288 <__aeabi_dsub>
 80113c6:	4632      	mov	r2, r6
 80113c8:	463b      	mov	r3, r7
 80113ca:	f7ee ff5d 	bl	8000288 <__aeabi_dsub>
 80113ce:	4602      	mov	r2, r0
 80113d0:	460b      	mov	r3, r1
 80113d2:	4650      	mov	r0, sl
 80113d4:	4659      	mov	r1, fp
 80113d6:	f7ee ff57 	bl	8000288 <__aeabi_dsub>
 80113da:	ec53 2b18 	vmov	r2, r3, d8
 80113de:	f7ef f90b 	bl	80005f8 <__aeabi_dmul>
 80113e2:	4622      	mov	r2, r4
 80113e4:	4606      	mov	r6, r0
 80113e6:	460f      	mov	r7, r1
 80113e8:	462b      	mov	r3, r5
 80113ea:	ec51 0b19 	vmov	r0, r1, d9
 80113ee:	f7ef f903 	bl	80005f8 <__aeabi_dmul>
 80113f2:	4602      	mov	r2, r0
 80113f4:	460b      	mov	r3, r1
 80113f6:	4630      	mov	r0, r6
 80113f8:	4639      	mov	r1, r7
 80113fa:	f7ee ff47 	bl	800028c <__adddf3>
 80113fe:	4606      	mov	r6, r0
 8011400:	460f      	mov	r7, r1
 8011402:	4602      	mov	r2, r0
 8011404:	460b      	mov	r3, r1
 8011406:	4640      	mov	r0, r8
 8011408:	4649      	mov	r1, r9
 801140a:	f7ee ff3f 	bl	800028c <__adddf3>
 801140e:	a33e      	add	r3, pc, #248	; (adr r3, 8011508 <__ieee754_pow+0x738>)
 8011410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011414:	2000      	movs	r0, #0
 8011416:	4604      	mov	r4, r0
 8011418:	460d      	mov	r5, r1
 801141a:	f7ef f8ed 	bl	80005f8 <__aeabi_dmul>
 801141e:	4642      	mov	r2, r8
 8011420:	ec41 0b18 	vmov	d8, r0, r1
 8011424:	464b      	mov	r3, r9
 8011426:	4620      	mov	r0, r4
 8011428:	4629      	mov	r1, r5
 801142a:	f7ee ff2d 	bl	8000288 <__aeabi_dsub>
 801142e:	4602      	mov	r2, r0
 8011430:	460b      	mov	r3, r1
 8011432:	4630      	mov	r0, r6
 8011434:	4639      	mov	r1, r7
 8011436:	f7ee ff27 	bl	8000288 <__aeabi_dsub>
 801143a:	a335      	add	r3, pc, #212	; (adr r3, 8011510 <__ieee754_pow+0x740>)
 801143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011440:	f7ef f8da 	bl	80005f8 <__aeabi_dmul>
 8011444:	a334      	add	r3, pc, #208	; (adr r3, 8011518 <__ieee754_pow+0x748>)
 8011446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801144a:	4606      	mov	r6, r0
 801144c:	460f      	mov	r7, r1
 801144e:	4620      	mov	r0, r4
 8011450:	4629      	mov	r1, r5
 8011452:	f7ef f8d1 	bl	80005f8 <__aeabi_dmul>
 8011456:	4602      	mov	r2, r0
 8011458:	460b      	mov	r3, r1
 801145a:	4630      	mov	r0, r6
 801145c:	4639      	mov	r1, r7
 801145e:	f7ee ff15 	bl	800028c <__adddf3>
 8011462:	9a07      	ldr	r2, [sp, #28]
 8011464:	4b37      	ldr	r3, [pc, #220]	; (8011544 <__ieee754_pow+0x774>)
 8011466:	4413      	add	r3, r2
 8011468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801146c:	f7ee ff0e 	bl	800028c <__adddf3>
 8011470:	4682      	mov	sl, r0
 8011472:	9805      	ldr	r0, [sp, #20]
 8011474:	468b      	mov	fp, r1
 8011476:	f7ef f855 	bl	8000524 <__aeabi_i2d>
 801147a:	9a07      	ldr	r2, [sp, #28]
 801147c:	4b32      	ldr	r3, [pc, #200]	; (8011548 <__ieee754_pow+0x778>)
 801147e:	4413      	add	r3, r2
 8011480:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011484:	4606      	mov	r6, r0
 8011486:	460f      	mov	r7, r1
 8011488:	4652      	mov	r2, sl
 801148a:	465b      	mov	r3, fp
 801148c:	ec51 0b18 	vmov	r0, r1, d8
 8011490:	f7ee fefc 	bl	800028c <__adddf3>
 8011494:	4642      	mov	r2, r8
 8011496:	464b      	mov	r3, r9
 8011498:	f7ee fef8 	bl	800028c <__adddf3>
 801149c:	4632      	mov	r2, r6
 801149e:	463b      	mov	r3, r7
 80114a0:	f7ee fef4 	bl	800028c <__adddf3>
 80114a4:	2000      	movs	r0, #0
 80114a6:	4632      	mov	r2, r6
 80114a8:	463b      	mov	r3, r7
 80114aa:	4604      	mov	r4, r0
 80114ac:	460d      	mov	r5, r1
 80114ae:	f7ee feeb 	bl	8000288 <__aeabi_dsub>
 80114b2:	4642      	mov	r2, r8
 80114b4:	464b      	mov	r3, r9
 80114b6:	f7ee fee7 	bl	8000288 <__aeabi_dsub>
 80114ba:	ec53 2b18 	vmov	r2, r3, d8
 80114be:	f7ee fee3 	bl	8000288 <__aeabi_dsub>
 80114c2:	4602      	mov	r2, r0
 80114c4:	460b      	mov	r3, r1
 80114c6:	4650      	mov	r0, sl
 80114c8:	4659      	mov	r1, fp
 80114ca:	e610      	b.n	80110ee <__ieee754_pow+0x31e>
 80114cc:	2401      	movs	r4, #1
 80114ce:	e6a1      	b.n	8011214 <__ieee754_pow+0x444>
 80114d0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011520 <__ieee754_pow+0x750>
 80114d4:	e617      	b.n	8011106 <__ieee754_pow+0x336>
 80114d6:	bf00      	nop
 80114d8:	4a454eef 	.word	0x4a454eef
 80114dc:	3fca7e28 	.word	0x3fca7e28
 80114e0:	93c9db65 	.word	0x93c9db65
 80114e4:	3fcd864a 	.word	0x3fcd864a
 80114e8:	a91d4101 	.word	0xa91d4101
 80114ec:	3fd17460 	.word	0x3fd17460
 80114f0:	518f264d 	.word	0x518f264d
 80114f4:	3fd55555 	.word	0x3fd55555
 80114f8:	db6fabff 	.word	0xdb6fabff
 80114fc:	3fdb6db6 	.word	0x3fdb6db6
 8011500:	33333303 	.word	0x33333303
 8011504:	3fe33333 	.word	0x3fe33333
 8011508:	e0000000 	.word	0xe0000000
 801150c:	3feec709 	.word	0x3feec709
 8011510:	dc3a03fd 	.word	0xdc3a03fd
 8011514:	3feec709 	.word	0x3feec709
 8011518:	145b01f5 	.word	0x145b01f5
 801151c:	be3e2fe0 	.word	0xbe3e2fe0
 8011520:	00000000 	.word	0x00000000
 8011524:	3ff00000 	.word	0x3ff00000
 8011528:	7ff00000 	.word	0x7ff00000
 801152c:	43400000 	.word	0x43400000
 8011530:	0003988e 	.word	0x0003988e
 8011534:	000bb679 	.word	0x000bb679
 8011538:	08012178 	.word	0x08012178
 801153c:	3ff00000 	.word	0x3ff00000
 8011540:	40080000 	.word	0x40080000
 8011544:	08012198 	.word	0x08012198
 8011548:	08012188 	.word	0x08012188
 801154c:	a3b5      	add	r3, pc, #724	; (adr r3, 8011824 <__ieee754_pow+0xa54>)
 801154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011552:	4640      	mov	r0, r8
 8011554:	4649      	mov	r1, r9
 8011556:	f7ee fe99 	bl	800028c <__adddf3>
 801155a:	4622      	mov	r2, r4
 801155c:	ec41 0b1a 	vmov	d10, r0, r1
 8011560:	462b      	mov	r3, r5
 8011562:	4630      	mov	r0, r6
 8011564:	4639      	mov	r1, r7
 8011566:	f7ee fe8f 	bl	8000288 <__aeabi_dsub>
 801156a:	4602      	mov	r2, r0
 801156c:	460b      	mov	r3, r1
 801156e:	ec51 0b1a 	vmov	r0, r1, d10
 8011572:	f7ef fad1 	bl	8000b18 <__aeabi_dcmpgt>
 8011576:	2800      	cmp	r0, #0
 8011578:	f47f ae04 	bne.w	8011184 <__ieee754_pow+0x3b4>
 801157c:	4aa4      	ldr	r2, [pc, #656]	; (8011810 <__ieee754_pow+0xa40>)
 801157e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011582:	4293      	cmp	r3, r2
 8011584:	f340 8108 	ble.w	8011798 <__ieee754_pow+0x9c8>
 8011588:	151b      	asrs	r3, r3, #20
 801158a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801158e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011592:	fa4a f303 	asr.w	r3, sl, r3
 8011596:	445b      	add	r3, fp
 8011598:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801159c:	4e9d      	ldr	r6, [pc, #628]	; (8011814 <__ieee754_pow+0xa44>)
 801159e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80115a2:	4116      	asrs	r6, r2
 80115a4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80115a8:	2000      	movs	r0, #0
 80115aa:	ea23 0106 	bic.w	r1, r3, r6
 80115ae:	f1c2 0214 	rsb	r2, r2, #20
 80115b2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80115b6:	fa4a fa02 	asr.w	sl, sl, r2
 80115ba:	f1bb 0f00 	cmp.w	fp, #0
 80115be:	4602      	mov	r2, r0
 80115c0:	460b      	mov	r3, r1
 80115c2:	4620      	mov	r0, r4
 80115c4:	4629      	mov	r1, r5
 80115c6:	bfb8      	it	lt
 80115c8:	f1ca 0a00 	rsblt	sl, sl, #0
 80115cc:	f7ee fe5c 	bl	8000288 <__aeabi_dsub>
 80115d0:	ec41 0b19 	vmov	d9, r0, r1
 80115d4:	4642      	mov	r2, r8
 80115d6:	464b      	mov	r3, r9
 80115d8:	ec51 0b19 	vmov	r0, r1, d9
 80115dc:	f7ee fe56 	bl	800028c <__adddf3>
 80115e0:	a37b      	add	r3, pc, #492	; (adr r3, 80117d0 <__ieee754_pow+0xa00>)
 80115e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e6:	2000      	movs	r0, #0
 80115e8:	4604      	mov	r4, r0
 80115ea:	460d      	mov	r5, r1
 80115ec:	f7ef f804 	bl	80005f8 <__aeabi_dmul>
 80115f0:	ec53 2b19 	vmov	r2, r3, d9
 80115f4:	4606      	mov	r6, r0
 80115f6:	460f      	mov	r7, r1
 80115f8:	4620      	mov	r0, r4
 80115fa:	4629      	mov	r1, r5
 80115fc:	f7ee fe44 	bl	8000288 <__aeabi_dsub>
 8011600:	4602      	mov	r2, r0
 8011602:	460b      	mov	r3, r1
 8011604:	4640      	mov	r0, r8
 8011606:	4649      	mov	r1, r9
 8011608:	f7ee fe3e 	bl	8000288 <__aeabi_dsub>
 801160c:	a372      	add	r3, pc, #456	; (adr r3, 80117d8 <__ieee754_pow+0xa08>)
 801160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011612:	f7ee fff1 	bl	80005f8 <__aeabi_dmul>
 8011616:	a372      	add	r3, pc, #456	; (adr r3, 80117e0 <__ieee754_pow+0xa10>)
 8011618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801161c:	4680      	mov	r8, r0
 801161e:	4689      	mov	r9, r1
 8011620:	4620      	mov	r0, r4
 8011622:	4629      	mov	r1, r5
 8011624:	f7ee ffe8 	bl	80005f8 <__aeabi_dmul>
 8011628:	4602      	mov	r2, r0
 801162a:	460b      	mov	r3, r1
 801162c:	4640      	mov	r0, r8
 801162e:	4649      	mov	r1, r9
 8011630:	f7ee fe2c 	bl	800028c <__adddf3>
 8011634:	4604      	mov	r4, r0
 8011636:	460d      	mov	r5, r1
 8011638:	4602      	mov	r2, r0
 801163a:	460b      	mov	r3, r1
 801163c:	4630      	mov	r0, r6
 801163e:	4639      	mov	r1, r7
 8011640:	f7ee fe24 	bl	800028c <__adddf3>
 8011644:	4632      	mov	r2, r6
 8011646:	463b      	mov	r3, r7
 8011648:	4680      	mov	r8, r0
 801164a:	4689      	mov	r9, r1
 801164c:	f7ee fe1c 	bl	8000288 <__aeabi_dsub>
 8011650:	4602      	mov	r2, r0
 8011652:	460b      	mov	r3, r1
 8011654:	4620      	mov	r0, r4
 8011656:	4629      	mov	r1, r5
 8011658:	f7ee fe16 	bl	8000288 <__aeabi_dsub>
 801165c:	4642      	mov	r2, r8
 801165e:	4606      	mov	r6, r0
 8011660:	460f      	mov	r7, r1
 8011662:	464b      	mov	r3, r9
 8011664:	4640      	mov	r0, r8
 8011666:	4649      	mov	r1, r9
 8011668:	f7ee ffc6 	bl	80005f8 <__aeabi_dmul>
 801166c:	a35e      	add	r3, pc, #376	; (adr r3, 80117e8 <__ieee754_pow+0xa18>)
 801166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011672:	4604      	mov	r4, r0
 8011674:	460d      	mov	r5, r1
 8011676:	f7ee ffbf 	bl	80005f8 <__aeabi_dmul>
 801167a:	a35d      	add	r3, pc, #372	; (adr r3, 80117f0 <__ieee754_pow+0xa20>)
 801167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011680:	f7ee fe02 	bl	8000288 <__aeabi_dsub>
 8011684:	4622      	mov	r2, r4
 8011686:	462b      	mov	r3, r5
 8011688:	f7ee ffb6 	bl	80005f8 <__aeabi_dmul>
 801168c:	a35a      	add	r3, pc, #360	; (adr r3, 80117f8 <__ieee754_pow+0xa28>)
 801168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011692:	f7ee fdfb 	bl	800028c <__adddf3>
 8011696:	4622      	mov	r2, r4
 8011698:	462b      	mov	r3, r5
 801169a:	f7ee ffad 	bl	80005f8 <__aeabi_dmul>
 801169e:	a358      	add	r3, pc, #352	; (adr r3, 8011800 <__ieee754_pow+0xa30>)
 80116a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a4:	f7ee fdf0 	bl	8000288 <__aeabi_dsub>
 80116a8:	4622      	mov	r2, r4
 80116aa:	462b      	mov	r3, r5
 80116ac:	f7ee ffa4 	bl	80005f8 <__aeabi_dmul>
 80116b0:	a355      	add	r3, pc, #340	; (adr r3, 8011808 <__ieee754_pow+0xa38>)
 80116b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b6:	f7ee fde9 	bl	800028c <__adddf3>
 80116ba:	4622      	mov	r2, r4
 80116bc:	462b      	mov	r3, r5
 80116be:	f7ee ff9b 	bl	80005f8 <__aeabi_dmul>
 80116c2:	4602      	mov	r2, r0
 80116c4:	460b      	mov	r3, r1
 80116c6:	4640      	mov	r0, r8
 80116c8:	4649      	mov	r1, r9
 80116ca:	f7ee fddd 	bl	8000288 <__aeabi_dsub>
 80116ce:	4604      	mov	r4, r0
 80116d0:	460d      	mov	r5, r1
 80116d2:	4602      	mov	r2, r0
 80116d4:	460b      	mov	r3, r1
 80116d6:	4640      	mov	r0, r8
 80116d8:	4649      	mov	r1, r9
 80116da:	f7ee ff8d 	bl	80005f8 <__aeabi_dmul>
 80116de:	2200      	movs	r2, #0
 80116e0:	ec41 0b19 	vmov	d9, r0, r1
 80116e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80116e8:	4620      	mov	r0, r4
 80116ea:	4629      	mov	r1, r5
 80116ec:	f7ee fdcc 	bl	8000288 <__aeabi_dsub>
 80116f0:	4602      	mov	r2, r0
 80116f2:	460b      	mov	r3, r1
 80116f4:	ec51 0b19 	vmov	r0, r1, d9
 80116f8:	f7ef f8a8 	bl	800084c <__aeabi_ddiv>
 80116fc:	4632      	mov	r2, r6
 80116fe:	4604      	mov	r4, r0
 8011700:	460d      	mov	r5, r1
 8011702:	463b      	mov	r3, r7
 8011704:	4640      	mov	r0, r8
 8011706:	4649      	mov	r1, r9
 8011708:	f7ee ff76 	bl	80005f8 <__aeabi_dmul>
 801170c:	4632      	mov	r2, r6
 801170e:	463b      	mov	r3, r7
 8011710:	f7ee fdbc 	bl	800028c <__adddf3>
 8011714:	4602      	mov	r2, r0
 8011716:	460b      	mov	r3, r1
 8011718:	4620      	mov	r0, r4
 801171a:	4629      	mov	r1, r5
 801171c:	f7ee fdb4 	bl	8000288 <__aeabi_dsub>
 8011720:	4642      	mov	r2, r8
 8011722:	464b      	mov	r3, r9
 8011724:	f7ee fdb0 	bl	8000288 <__aeabi_dsub>
 8011728:	460b      	mov	r3, r1
 801172a:	4602      	mov	r2, r0
 801172c:	493a      	ldr	r1, [pc, #232]	; (8011818 <__ieee754_pow+0xa48>)
 801172e:	2000      	movs	r0, #0
 8011730:	f7ee fdaa 	bl	8000288 <__aeabi_dsub>
 8011734:	ec41 0b10 	vmov	d0, r0, r1
 8011738:	ee10 3a90 	vmov	r3, s1
 801173c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011744:	da2b      	bge.n	801179e <__ieee754_pow+0x9ce>
 8011746:	4650      	mov	r0, sl
 8011748:	f000 f95e 	bl	8011a08 <scalbn>
 801174c:	ec51 0b10 	vmov	r0, r1, d0
 8011750:	ec53 2b18 	vmov	r2, r3, d8
 8011754:	f7ff bbed 	b.w	8010f32 <__ieee754_pow+0x162>
 8011758:	4b30      	ldr	r3, [pc, #192]	; (801181c <__ieee754_pow+0xa4c>)
 801175a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801175e:	429e      	cmp	r6, r3
 8011760:	f77f af0c 	ble.w	801157c <__ieee754_pow+0x7ac>
 8011764:	4b2e      	ldr	r3, [pc, #184]	; (8011820 <__ieee754_pow+0xa50>)
 8011766:	440b      	add	r3, r1
 8011768:	4303      	orrs	r3, r0
 801176a:	d009      	beq.n	8011780 <__ieee754_pow+0x9b0>
 801176c:	ec51 0b18 	vmov	r0, r1, d8
 8011770:	2200      	movs	r2, #0
 8011772:	2300      	movs	r3, #0
 8011774:	f7ef f9b2 	bl	8000adc <__aeabi_dcmplt>
 8011778:	3800      	subs	r0, #0
 801177a:	bf18      	it	ne
 801177c:	2001      	movne	r0, #1
 801177e:	e447      	b.n	8011010 <__ieee754_pow+0x240>
 8011780:	4622      	mov	r2, r4
 8011782:	462b      	mov	r3, r5
 8011784:	f7ee fd80 	bl	8000288 <__aeabi_dsub>
 8011788:	4642      	mov	r2, r8
 801178a:	464b      	mov	r3, r9
 801178c:	f7ef f9ba 	bl	8000b04 <__aeabi_dcmpge>
 8011790:	2800      	cmp	r0, #0
 8011792:	f43f aef3 	beq.w	801157c <__ieee754_pow+0x7ac>
 8011796:	e7e9      	b.n	801176c <__ieee754_pow+0x99c>
 8011798:	f04f 0a00 	mov.w	sl, #0
 801179c:	e71a      	b.n	80115d4 <__ieee754_pow+0x804>
 801179e:	ec51 0b10 	vmov	r0, r1, d0
 80117a2:	4619      	mov	r1, r3
 80117a4:	e7d4      	b.n	8011750 <__ieee754_pow+0x980>
 80117a6:	491c      	ldr	r1, [pc, #112]	; (8011818 <__ieee754_pow+0xa48>)
 80117a8:	2000      	movs	r0, #0
 80117aa:	f7ff bb30 	b.w	8010e0e <__ieee754_pow+0x3e>
 80117ae:	2000      	movs	r0, #0
 80117b0:	2100      	movs	r1, #0
 80117b2:	f7ff bb2c 	b.w	8010e0e <__ieee754_pow+0x3e>
 80117b6:	4630      	mov	r0, r6
 80117b8:	4639      	mov	r1, r7
 80117ba:	f7ff bb28 	b.w	8010e0e <__ieee754_pow+0x3e>
 80117be:	9204      	str	r2, [sp, #16]
 80117c0:	f7ff bb7a 	b.w	8010eb8 <__ieee754_pow+0xe8>
 80117c4:	2300      	movs	r3, #0
 80117c6:	f7ff bb64 	b.w	8010e92 <__ieee754_pow+0xc2>
 80117ca:	bf00      	nop
 80117cc:	f3af 8000 	nop.w
 80117d0:	00000000 	.word	0x00000000
 80117d4:	3fe62e43 	.word	0x3fe62e43
 80117d8:	fefa39ef 	.word	0xfefa39ef
 80117dc:	3fe62e42 	.word	0x3fe62e42
 80117e0:	0ca86c39 	.word	0x0ca86c39
 80117e4:	be205c61 	.word	0xbe205c61
 80117e8:	72bea4d0 	.word	0x72bea4d0
 80117ec:	3e663769 	.word	0x3e663769
 80117f0:	c5d26bf1 	.word	0xc5d26bf1
 80117f4:	3ebbbd41 	.word	0x3ebbbd41
 80117f8:	af25de2c 	.word	0xaf25de2c
 80117fc:	3f11566a 	.word	0x3f11566a
 8011800:	16bebd93 	.word	0x16bebd93
 8011804:	3f66c16c 	.word	0x3f66c16c
 8011808:	5555553e 	.word	0x5555553e
 801180c:	3fc55555 	.word	0x3fc55555
 8011810:	3fe00000 	.word	0x3fe00000
 8011814:	000fffff 	.word	0x000fffff
 8011818:	3ff00000 	.word	0x3ff00000
 801181c:	4090cbff 	.word	0x4090cbff
 8011820:	3f6f3400 	.word	0x3f6f3400
 8011824:	652b82fe 	.word	0x652b82fe
 8011828:	3c971547 	.word	0x3c971547

0801182c <__ieee754_sqrt>:
 801182c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011830:	ec55 4b10 	vmov	r4, r5, d0
 8011834:	4e55      	ldr	r6, [pc, #340]	; (801198c <__ieee754_sqrt+0x160>)
 8011836:	43ae      	bics	r6, r5
 8011838:	ee10 0a10 	vmov	r0, s0
 801183c:	ee10 3a10 	vmov	r3, s0
 8011840:	462a      	mov	r2, r5
 8011842:	4629      	mov	r1, r5
 8011844:	d110      	bne.n	8011868 <__ieee754_sqrt+0x3c>
 8011846:	ee10 2a10 	vmov	r2, s0
 801184a:	462b      	mov	r3, r5
 801184c:	f7ee fed4 	bl	80005f8 <__aeabi_dmul>
 8011850:	4602      	mov	r2, r0
 8011852:	460b      	mov	r3, r1
 8011854:	4620      	mov	r0, r4
 8011856:	4629      	mov	r1, r5
 8011858:	f7ee fd18 	bl	800028c <__adddf3>
 801185c:	4604      	mov	r4, r0
 801185e:	460d      	mov	r5, r1
 8011860:	ec45 4b10 	vmov	d0, r4, r5
 8011864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011868:	2d00      	cmp	r5, #0
 801186a:	dc10      	bgt.n	801188e <__ieee754_sqrt+0x62>
 801186c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011870:	4330      	orrs	r0, r6
 8011872:	d0f5      	beq.n	8011860 <__ieee754_sqrt+0x34>
 8011874:	b15d      	cbz	r5, 801188e <__ieee754_sqrt+0x62>
 8011876:	ee10 2a10 	vmov	r2, s0
 801187a:	462b      	mov	r3, r5
 801187c:	ee10 0a10 	vmov	r0, s0
 8011880:	f7ee fd02 	bl	8000288 <__aeabi_dsub>
 8011884:	4602      	mov	r2, r0
 8011886:	460b      	mov	r3, r1
 8011888:	f7ee ffe0 	bl	800084c <__aeabi_ddiv>
 801188c:	e7e6      	b.n	801185c <__ieee754_sqrt+0x30>
 801188e:	1512      	asrs	r2, r2, #20
 8011890:	d074      	beq.n	801197c <__ieee754_sqrt+0x150>
 8011892:	07d4      	lsls	r4, r2, #31
 8011894:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011898:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801189c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80118a0:	bf5e      	ittt	pl
 80118a2:	0fda      	lsrpl	r2, r3, #31
 80118a4:	005b      	lslpl	r3, r3, #1
 80118a6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80118aa:	2400      	movs	r4, #0
 80118ac:	0fda      	lsrs	r2, r3, #31
 80118ae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80118b2:	107f      	asrs	r7, r7, #1
 80118b4:	005b      	lsls	r3, r3, #1
 80118b6:	2516      	movs	r5, #22
 80118b8:	4620      	mov	r0, r4
 80118ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80118be:	1886      	adds	r6, r0, r2
 80118c0:	428e      	cmp	r6, r1
 80118c2:	bfde      	ittt	le
 80118c4:	1b89      	suble	r1, r1, r6
 80118c6:	18b0      	addle	r0, r6, r2
 80118c8:	18a4      	addle	r4, r4, r2
 80118ca:	0049      	lsls	r1, r1, #1
 80118cc:	3d01      	subs	r5, #1
 80118ce:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80118d2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80118d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80118da:	d1f0      	bne.n	80118be <__ieee754_sqrt+0x92>
 80118dc:	462a      	mov	r2, r5
 80118de:	f04f 0e20 	mov.w	lr, #32
 80118e2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80118e6:	4281      	cmp	r1, r0
 80118e8:	eb06 0c05 	add.w	ip, r6, r5
 80118ec:	dc02      	bgt.n	80118f4 <__ieee754_sqrt+0xc8>
 80118ee:	d113      	bne.n	8011918 <__ieee754_sqrt+0xec>
 80118f0:	459c      	cmp	ip, r3
 80118f2:	d811      	bhi.n	8011918 <__ieee754_sqrt+0xec>
 80118f4:	f1bc 0f00 	cmp.w	ip, #0
 80118f8:	eb0c 0506 	add.w	r5, ip, r6
 80118fc:	da43      	bge.n	8011986 <__ieee754_sqrt+0x15a>
 80118fe:	2d00      	cmp	r5, #0
 8011900:	db41      	blt.n	8011986 <__ieee754_sqrt+0x15a>
 8011902:	f100 0801 	add.w	r8, r0, #1
 8011906:	1a09      	subs	r1, r1, r0
 8011908:	459c      	cmp	ip, r3
 801190a:	bf88      	it	hi
 801190c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8011910:	eba3 030c 	sub.w	r3, r3, ip
 8011914:	4432      	add	r2, r6
 8011916:	4640      	mov	r0, r8
 8011918:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801191c:	f1be 0e01 	subs.w	lr, lr, #1
 8011920:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8011924:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011928:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801192c:	d1db      	bne.n	80118e6 <__ieee754_sqrt+0xba>
 801192e:	430b      	orrs	r3, r1
 8011930:	d006      	beq.n	8011940 <__ieee754_sqrt+0x114>
 8011932:	1c50      	adds	r0, r2, #1
 8011934:	bf13      	iteet	ne
 8011936:	3201      	addne	r2, #1
 8011938:	3401      	addeq	r4, #1
 801193a:	4672      	moveq	r2, lr
 801193c:	f022 0201 	bicne.w	r2, r2, #1
 8011940:	1063      	asrs	r3, r4, #1
 8011942:	0852      	lsrs	r2, r2, #1
 8011944:	07e1      	lsls	r1, r4, #31
 8011946:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801194a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801194e:	bf48      	it	mi
 8011950:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8011954:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8011958:	4614      	mov	r4, r2
 801195a:	e781      	b.n	8011860 <__ieee754_sqrt+0x34>
 801195c:	0ad9      	lsrs	r1, r3, #11
 801195e:	3815      	subs	r0, #21
 8011960:	055b      	lsls	r3, r3, #21
 8011962:	2900      	cmp	r1, #0
 8011964:	d0fa      	beq.n	801195c <__ieee754_sqrt+0x130>
 8011966:	02cd      	lsls	r5, r1, #11
 8011968:	d50a      	bpl.n	8011980 <__ieee754_sqrt+0x154>
 801196a:	f1c2 0420 	rsb	r4, r2, #32
 801196e:	fa23 f404 	lsr.w	r4, r3, r4
 8011972:	1e55      	subs	r5, r2, #1
 8011974:	4093      	lsls	r3, r2
 8011976:	4321      	orrs	r1, r4
 8011978:	1b42      	subs	r2, r0, r5
 801197a:	e78a      	b.n	8011892 <__ieee754_sqrt+0x66>
 801197c:	4610      	mov	r0, r2
 801197e:	e7f0      	b.n	8011962 <__ieee754_sqrt+0x136>
 8011980:	0049      	lsls	r1, r1, #1
 8011982:	3201      	adds	r2, #1
 8011984:	e7ef      	b.n	8011966 <__ieee754_sqrt+0x13a>
 8011986:	4680      	mov	r8, r0
 8011988:	e7bd      	b.n	8011906 <__ieee754_sqrt+0xda>
 801198a:	bf00      	nop
 801198c:	7ff00000 	.word	0x7ff00000

08011990 <with_errno>:
 8011990:	b570      	push	{r4, r5, r6, lr}
 8011992:	4604      	mov	r4, r0
 8011994:	460d      	mov	r5, r1
 8011996:	4616      	mov	r6, r2
 8011998:	f7fc f888 	bl	800daac <__errno>
 801199c:	4629      	mov	r1, r5
 801199e:	6006      	str	r6, [r0, #0]
 80119a0:	4620      	mov	r0, r4
 80119a2:	bd70      	pop	{r4, r5, r6, pc}

080119a4 <xflow>:
 80119a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119a6:	4614      	mov	r4, r2
 80119a8:	461d      	mov	r5, r3
 80119aa:	b108      	cbz	r0, 80119b0 <xflow+0xc>
 80119ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80119b0:	e9cd 2300 	strd	r2, r3, [sp]
 80119b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80119b8:	4620      	mov	r0, r4
 80119ba:	4629      	mov	r1, r5
 80119bc:	f7ee fe1c 	bl	80005f8 <__aeabi_dmul>
 80119c0:	2222      	movs	r2, #34	; 0x22
 80119c2:	b003      	add	sp, #12
 80119c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119c8:	f7ff bfe2 	b.w	8011990 <with_errno>

080119cc <__math_uflow>:
 80119cc:	b508      	push	{r3, lr}
 80119ce:	2200      	movs	r2, #0
 80119d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80119d4:	f7ff ffe6 	bl	80119a4 <xflow>
 80119d8:	ec41 0b10 	vmov	d0, r0, r1
 80119dc:	bd08      	pop	{r3, pc}

080119de <__math_oflow>:
 80119de:	b508      	push	{r3, lr}
 80119e0:	2200      	movs	r2, #0
 80119e2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80119e6:	f7ff ffdd 	bl	80119a4 <xflow>
 80119ea:	ec41 0b10 	vmov	d0, r0, r1
 80119ee:	bd08      	pop	{r3, pc}

080119f0 <finite>:
 80119f0:	b082      	sub	sp, #8
 80119f2:	ed8d 0b00 	vstr	d0, [sp]
 80119f6:	9801      	ldr	r0, [sp, #4]
 80119f8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80119fc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011a00:	0fc0      	lsrs	r0, r0, #31
 8011a02:	b002      	add	sp, #8
 8011a04:	4770      	bx	lr
	...

08011a08 <scalbn>:
 8011a08:	b570      	push	{r4, r5, r6, lr}
 8011a0a:	ec55 4b10 	vmov	r4, r5, d0
 8011a0e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011a12:	4606      	mov	r6, r0
 8011a14:	462b      	mov	r3, r5
 8011a16:	b99a      	cbnz	r2, 8011a40 <scalbn+0x38>
 8011a18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011a1c:	4323      	orrs	r3, r4
 8011a1e:	d036      	beq.n	8011a8e <scalbn+0x86>
 8011a20:	4b39      	ldr	r3, [pc, #228]	; (8011b08 <scalbn+0x100>)
 8011a22:	4629      	mov	r1, r5
 8011a24:	ee10 0a10 	vmov	r0, s0
 8011a28:	2200      	movs	r2, #0
 8011a2a:	f7ee fde5 	bl	80005f8 <__aeabi_dmul>
 8011a2e:	4b37      	ldr	r3, [pc, #220]	; (8011b0c <scalbn+0x104>)
 8011a30:	429e      	cmp	r6, r3
 8011a32:	4604      	mov	r4, r0
 8011a34:	460d      	mov	r5, r1
 8011a36:	da10      	bge.n	8011a5a <scalbn+0x52>
 8011a38:	a32b      	add	r3, pc, #172	; (adr r3, 8011ae8 <scalbn+0xe0>)
 8011a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a3e:	e03a      	b.n	8011ab6 <scalbn+0xae>
 8011a40:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011a44:	428a      	cmp	r2, r1
 8011a46:	d10c      	bne.n	8011a62 <scalbn+0x5a>
 8011a48:	ee10 2a10 	vmov	r2, s0
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	4629      	mov	r1, r5
 8011a50:	f7ee fc1c 	bl	800028c <__adddf3>
 8011a54:	4604      	mov	r4, r0
 8011a56:	460d      	mov	r5, r1
 8011a58:	e019      	b.n	8011a8e <scalbn+0x86>
 8011a5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011a5e:	460b      	mov	r3, r1
 8011a60:	3a36      	subs	r2, #54	; 0x36
 8011a62:	4432      	add	r2, r6
 8011a64:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011a68:	428a      	cmp	r2, r1
 8011a6a:	dd08      	ble.n	8011a7e <scalbn+0x76>
 8011a6c:	2d00      	cmp	r5, #0
 8011a6e:	a120      	add	r1, pc, #128	; (adr r1, 8011af0 <scalbn+0xe8>)
 8011a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a74:	da1c      	bge.n	8011ab0 <scalbn+0xa8>
 8011a76:	a120      	add	r1, pc, #128	; (adr r1, 8011af8 <scalbn+0xf0>)
 8011a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a7c:	e018      	b.n	8011ab0 <scalbn+0xa8>
 8011a7e:	2a00      	cmp	r2, #0
 8011a80:	dd08      	ble.n	8011a94 <scalbn+0x8c>
 8011a82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011a86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011a8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011a8e:	ec45 4b10 	vmov	d0, r4, r5
 8011a92:	bd70      	pop	{r4, r5, r6, pc}
 8011a94:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011a98:	da19      	bge.n	8011ace <scalbn+0xc6>
 8011a9a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011a9e:	429e      	cmp	r6, r3
 8011aa0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011aa4:	dd0a      	ble.n	8011abc <scalbn+0xb4>
 8011aa6:	a112      	add	r1, pc, #72	; (adr r1, 8011af0 <scalbn+0xe8>)
 8011aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d1e2      	bne.n	8011a76 <scalbn+0x6e>
 8011ab0:	a30f      	add	r3, pc, #60	; (adr r3, 8011af0 <scalbn+0xe8>)
 8011ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab6:	f7ee fd9f 	bl	80005f8 <__aeabi_dmul>
 8011aba:	e7cb      	b.n	8011a54 <scalbn+0x4c>
 8011abc:	a10a      	add	r1, pc, #40	; (adr r1, 8011ae8 <scalbn+0xe0>)
 8011abe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d0b8      	beq.n	8011a38 <scalbn+0x30>
 8011ac6:	a10e      	add	r1, pc, #56	; (adr r1, 8011b00 <scalbn+0xf8>)
 8011ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011acc:	e7b4      	b.n	8011a38 <scalbn+0x30>
 8011ace:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011ad2:	3236      	adds	r2, #54	; 0x36
 8011ad4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011ad8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011adc:	4620      	mov	r0, r4
 8011ade:	4b0c      	ldr	r3, [pc, #48]	; (8011b10 <scalbn+0x108>)
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	e7e8      	b.n	8011ab6 <scalbn+0xae>
 8011ae4:	f3af 8000 	nop.w
 8011ae8:	c2f8f359 	.word	0xc2f8f359
 8011aec:	01a56e1f 	.word	0x01a56e1f
 8011af0:	8800759c 	.word	0x8800759c
 8011af4:	7e37e43c 	.word	0x7e37e43c
 8011af8:	8800759c 	.word	0x8800759c
 8011afc:	fe37e43c 	.word	0xfe37e43c
 8011b00:	c2f8f359 	.word	0xc2f8f359
 8011b04:	81a56e1f 	.word	0x81a56e1f
 8011b08:	43500000 	.word	0x43500000
 8011b0c:	ffff3cb0 	.word	0xffff3cb0
 8011b10:	3c900000 	.word	0x3c900000

08011b14 <_init>:
 8011b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b16:	bf00      	nop
 8011b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b1a:	bc08      	pop	{r3}
 8011b1c:	469e      	mov	lr, r3
 8011b1e:	4770      	bx	lr

08011b20 <_fini>:
 8011b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b22:	bf00      	nop
 8011b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b26:	bc08      	pop	{r3}
 8011b28:	469e      	mov	lr, r3
 8011b2a:	4770      	bx	lr


LIS3DSH_RTOS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a454  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  0800a5e8  0800a5e8  0001a5e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abc8  0800abc8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800abc8  0800abc8  0001abc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abd0  0800abd0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abd0  0800abd0  0001abd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abd4  0800abd4  0001abd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800abd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00005310  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200054f0  200054f0  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003456  00000000  00000000  0003a239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001658  00000000  00000000  0003d690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001520  00000000  00000000  0003ece8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004b89  00000000  00000000  00040208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c22  00000000  00000000  00044d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9005  00000000  00000000  0005c9b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001359b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007188  00000000  00000000  00135a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a5cc 	.word	0x0800a5cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a5cc 	.word	0x0800a5cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <Acc_Inin>:
void Acc_Inin(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Acc_Inin(void){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	uint8_t Reg_ctrl_4=0x20;
 8000eb2:	2320      	movs	r3, #32
 8000eb4:	71fb      	strb	r3, [r7, #7]
	uint8_t acc_set=0x57;
 8000eb6:	2357      	movs	r3, #87	; 0x57
 8000eb8:	71bb      	strb	r3, [r7, #6]
	uint8_t Reg_ctrl_5=0x24;
 8000eba:	2324      	movs	r3, #36	; 0x24
 8000ebc:	717b      	strb	r3, [r7, #5]
	uint8_t acc_reg=0x00;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	713b      	strb	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	4817      	ldr	r0, [pc, #92]	; (8000f24 <Acc_Inin+0x78>)
 8000ec8:	f001 f984 	bl	80021d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &Reg_ctrl_4, 1, 100);
 8000ecc:	1df9      	adds	r1, r7, #7
 8000ece:	2364      	movs	r3, #100	; 0x64
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4815      	ldr	r0, [pc, #84]	; (8000f28 <Acc_Inin+0x7c>)
 8000ed4:	f001 feab 	bl	8002c2e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &acc_set, 1, 100);
 8000ed8:	1db9      	adds	r1, r7, #6
 8000eda:	2364      	movs	r3, #100	; 0x64
 8000edc:	2201      	movs	r2, #1
 8000ede:	4812      	ldr	r0, [pc, #72]	; (8000f28 <Acc_Inin+0x7c>)
 8000ee0:	f001 fea5 	bl	8002c2e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2108      	movs	r1, #8
 8000ee8:	480e      	ldr	r0, [pc, #56]	; (8000f24 <Acc_Inin+0x78>)
 8000eea:	f001 f973 	bl	80021d4 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, &test, 1, 100);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
*/
//test_acc=0;

HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2108      	movs	r1, #8
 8000ef2:	480c      	ldr	r0, [pc, #48]	; (8000f24 <Acc_Inin+0x78>)
 8000ef4:	f001 f96e 	bl	80021d4 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, &Reg_ctrl_5, 1, 100);
 8000ef8:	1d79      	adds	r1, r7, #5
 8000efa:	2364      	movs	r3, #100	; 0x64
 8000efc:	2201      	movs	r2, #1
 8000efe:	480a      	ldr	r0, [pc, #40]	; (8000f28 <Acc_Inin+0x7c>)
 8000f00:	f001 fe95 	bl	8002c2e <HAL_SPI_Transmit>
HAL_SPI_Transmit(&hspi1, &acc_reg, 1, 100);
 8000f04:	1d39      	adds	r1, r7, #4
 8000f06:	2364      	movs	r3, #100	; 0x64
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4807      	ldr	r0, [pc, #28]	; (8000f28 <Acc_Inin+0x7c>)
 8000f0c:	f001 fe8f 	bl	8002c2e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2108      	movs	r1, #8
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <Acc_Inin+0x78>)
 8000f16:	f001 f95d 	bl	80021d4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &Reg_ctrl_5, 1, 100);
		HAL_SPI_Receive(&hspi1, &test_acc, 1, 100);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);

		*/
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	200001fc 	.word	0x200001fc

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f000 fe90 	bl	8001c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f34:	f000 f872 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f38:	f000 f92e 	bl	8001198 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f3c:	f000 f8cc 	bl	80010d8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000f40:	f000 f900 	bl	8001144 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Acc_Inin();
 8000f44:	f7ff ffb2 	bl	8000eac <Acc_Inin>
  sprintf(test, "test of Accselerometr\r\n");
 8000f48:	4921      	ldr	r1, [pc, #132]	; (8000fd0 <main+0xa4>)
 8000f4a:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <main+0xa8>)
 8000f4c:	f006 fe5c 	bl	8007c08 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)&test, strlen(test), 100);
 8000f50:	4820      	ldr	r0, [pc, #128]	; (8000fd4 <main+0xa8>)
 8000f52:	f7ff f93d 	bl	80001d0 <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	2364      	movs	r3, #100	; 0x64
 8000f5c:	491d      	ldr	r1, [pc, #116]	; (8000fd4 <main+0xa8>)
 8000f5e:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <main+0xac>)
 8000f60:	f002 fe7f 	bl	8003c62 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f64:	f003 fa36 	bl	80043d4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QUEUE_DATA */
  QUEUE_DATAHandle = osMessageQueueNew (16, sizeof(uint16_t), &QUEUE_DATA_attributes);
 8000f68:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <main+0xb0>)
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	2010      	movs	r0, #16
 8000f6e:	f003 fb28 	bl	80045c2 <osMessageQueueNew>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4a1a      	ldr	r2, [pc, #104]	; (8000fe0 <main+0xb4>)
 8000f76:	6013      	str	r3, [r2, #0]

  /* creation of QUEUE_UART */
  QUEUE_UARTHandle = osMessageQueueNew (16, sizeof(double), &QUEUE_UART_attributes);
 8000f78:	4a1a      	ldr	r2, [pc, #104]	; (8000fe4 <main+0xb8>)
 8000f7a:	2108      	movs	r1, #8
 8000f7c:	2010      	movs	r0, #16
 8000f7e:	f003 fb20 	bl	80045c2 <osMessageQueueNew>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a18      	ldr	r2, [pc, #96]	; (8000fe8 <main+0xbc>)
 8000f86:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f88:	4a18      	ldr	r2, [pc, #96]	; (8000fec <main+0xc0>)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4818      	ldr	r0, [pc, #96]	; (8000ff0 <main+0xc4>)
 8000f8e:	f003 fa6b 	bl	8004468 <osThreadNew>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <main+0xc8>)
 8000f96:	6013      	str	r3, [r2, #0]

  /* creation of Read_XYZ */
  Read_XYZHandle = osThreadNew(StartRead_XYZ, NULL, &Read_XYZ_attributes);
 8000f98:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <main+0xcc>)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4817      	ldr	r0, [pc, #92]	; (8000ffc <main+0xd0>)
 8000f9e:	f003 fa63 	bl	8004468 <osThreadNew>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a16      	ldr	r2, [pc, #88]	; (8001000 <main+0xd4>)
 8000fa6:	6013      	str	r3, [r2, #0]

  /* creation of Angle_Task */
  Angle_TaskHandle = osThreadNew(StartAngle_Task, NULL, &Angle_Task_attributes);
 8000fa8:	4a16      	ldr	r2, [pc, #88]	; (8001004 <main+0xd8>)
 8000faa:	2100      	movs	r1, #0
 8000fac:	4816      	ldr	r0, [pc, #88]	; (8001008 <main+0xdc>)
 8000fae:	f003 fa5b 	bl	8004468 <osThreadNew>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a15      	ldr	r2, [pc, #84]	; (800100c <main+0xe0>)
 8000fb6:	6013      	str	r3, [r2, #0]

  /* creation of Task_test */
  Task_testHandle = osThreadNew(StartTask_test, NULL, &Task_test_attributes);
 8000fb8:	4a15      	ldr	r2, [pc, #84]	; (8001010 <main+0xe4>)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4815      	ldr	r0, [pc, #84]	; (8001014 <main+0xe8>)
 8000fbe:	f003 fa53 	bl	8004468 <osThreadNew>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a14      	ldr	r2, [pc, #80]	; (8001018 <main+0xec>)
 8000fc6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fc8:	f003 fa28 	bl	800441c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <main+0xa0>
 8000fce:	bf00      	nop
 8000fd0:	0800a630 	.word	0x0800a630
 8000fd4:	20000b04 	.word	0x20000b04
 8000fd8:	20000254 	.word	0x20000254
 8000fdc:	0800a730 	.word	0x0800a730
 8000fe0:	200009bc 	.word	0x200009bc
 8000fe4:	0800a748 	.word	0x0800a748
 8000fe8:	20000a30 	.word	0x20000a30
 8000fec:	0800a6a0 	.word	0x0800a6a0
 8000ff0:	08001239 	.word	0x08001239
 8000ff4:	20000298 	.word	0x20000298
 8000ff8:	0800a6c4 	.word	0x0800a6c4
 8000ffc:	08001249 	.word	0x08001249
 8001000:	2000029c 	.word	0x2000029c
 8001004:	0800a6e8 	.word	0x0800a6e8
 8001008:	08001469 	.word	0x08001469
 800100c:	200004fc 	.word	0x200004fc
 8001010:	0800a70c 	.word	0x0800a70c
 8001014:	08001649 	.word	0x08001649
 8001018:	2000075c 	.word	0x2000075c

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	; 0x50
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0320 	add.w	r3, r7, #32
 8001026:	2230      	movs	r2, #48	; 0x30
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f006 f946 	bl	80072bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <SystemClock_Config+0xb4>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <SystemClock_Config+0xb4>)
 800104a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104e:	6413      	str	r3, [r2, #64]	; 0x40
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <SystemClock_Config+0xb4>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <SystemClock_Config+0xb8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <SystemClock_Config+0xb8>)
 8001066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <SystemClock_Config+0xb8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107c:	2301      	movs	r3, #1
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001080:	2310      	movs	r3, #16
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001084:	2300      	movs	r3, #0
 8001086:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	4618      	mov	r0, r3
 800108e:	f001 f8bb 	bl	8002208 <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001098:	f000 fb7c 	bl	8001794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109c:	230f      	movs	r3, #15
 800109e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 fb1e 	bl	80026f8 <HAL_RCC_ClockConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010c2:	f000 fb67 	bl	8001794 <Error_Handler>
  }
}
 80010c6:	bf00      	nop
 80010c8:	3750      	adds	r7, #80	; 0x50
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40007000 	.word	0x40007000

080010d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_SPI1_Init+0x64>)
 80010de:	4a18      	ldr	r2, [pc, #96]	; (8001140 <MX_SPI1_Init+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <MX_SPI1_Init+0x64>)
 80010e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_SPI1_Init+0x64>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_SPI1_Init+0x64>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_SPI1_Init+0x64>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_SPI1_Init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_SPI1_Init+0x64>)
 8001104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001108:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_SPI1_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MX_SPI1_Init+0x64>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_SPI1_Init+0x64>)
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <MX_SPI1_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_SPI1_Init+0x64>)
 8001124:	220a      	movs	r2, #10
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_SPI1_Init+0x64>)
 800112a:	f001 fcf7 	bl	8002b1c <HAL_SPI_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001134:	f000 fb2e 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200001fc 	.word	0x200001fc
 8001140:	40013000 	.word	0x40013000

08001144 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MX_USART2_UART_Init+0x50>)
 800114c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001150:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001154:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 800117c:	f002 fd24 	bl	8003bc8 <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001186:	f000 fb05 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000254 	.word	0x20000254
 8001194:	40004400 	.word	0x40004400

08001198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <MX_GPIO_Init+0x98>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <MX_GPIO_Init+0x98>)
 80011b8:	f043 0310 	orr.w	r3, r3, #16
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_GPIO_Init+0x98>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_GPIO_Init+0x98>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a17      	ldr	r2, [pc, #92]	; (8001230 <MX_GPIO_Init+0x98>)
 80011d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_GPIO_Init+0x98>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_GPIO_Init+0x98>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a10      	ldr	r2, [pc, #64]	; (8001230 <MX_GPIO_Init+0x98>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_GPIO_Init+0x98>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port, CS_LIS3DSH_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2108      	movs	r1, #8
 8001206:	480b      	ldr	r0, [pc, #44]	; (8001234 <MX_GPIO_Init+0x9c>)
 8001208:	f000 ffe4 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_LIS3DSH_Pin */
  GPIO_InitStruct.Pin = CS_LIS3DSH_Pin;
 800120c:	2308      	movs	r3, #8
 800120e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_LIS3DSH_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	4619      	mov	r1, r3
 8001222:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_GPIO_Init+0x9c>)
 8001224:	f000 fe3a 	bl	8001e9c <HAL_GPIO_Init>

}
 8001228:	bf00      	nop
 800122a:	3720      	adds	r7, #32
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	40021000 	.word	0x40021000

08001238 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001240:	2001      	movs	r0, #1
 8001242:	f003 f9a3 	bl	800458c <osDelay>
 8001246:	e7fb      	b.n	8001240 <StartDefaultTask+0x8>

08001248 <StartRead_XYZ>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRead_XYZ */
void StartRead_XYZ(void *argument)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRead_XYZ */
	QUEUE_DATA XYZ;

	uint8_t X_read_H=0x29;
 8001250:	2329      	movs	r3, #41	; 0x29
 8001252:	75fb      	strb	r3, [r7, #23]
	uint8_t X_read_L=0x28;
 8001254:	2328      	movs	r3, #40	; 0x28
 8001256:	75bb      	strb	r3, [r7, #22]
	uint8_t OUT_X_H=0x29;
 8001258:	2329      	movs	r3, #41	; 0x29
 800125a:	757b      	strb	r3, [r7, #21]
	uint8_t OUT_X_L=0x28;
 800125c:	2328      	movs	r3, #40	; 0x28
 800125e:	753b      	strb	r3, [r7, #20]

	uint8_t Y_read_H=0x2B;
 8001260:	232b      	movs	r3, #43	; 0x2b
 8001262:	74fb      	strb	r3, [r7, #19]
	uint8_t Y_read_L=0x2A;
 8001264:	232a      	movs	r3, #42	; 0x2a
 8001266:	74bb      	strb	r3, [r7, #18]
	uint8_t OUT_Y_H=0x2B;
 8001268:	232b      	movs	r3, #43	; 0x2b
 800126a:	747b      	strb	r3, [r7, #17]
	uint8_t OUT_Y_L=0x2A;
 800126c:	232a      	movs	r3, #42	; 0x2a
 800126e:	743b      	strb	r3, [r7, #16]

	uint8_t Z_read_H=0x2C;
 8001270:	232c      	movs	r3, #44	; 0x2c
 8001272:	73fb      	strb	r3, [r7, #15]
	uint8_t Z_read_L=0x2D;
 8001274:	232d      	movs	r3, #45	; 0x2d
 8001276:	73bb      	strb	r3, [r7, #14]
	uint8_t OUT_Z_H=0x2C;
 8001278:	232c      	movs	r3, #44	; 0x2c
 800127a:	737b      	strb	r3, [r7, #13]
	uint8_t OUT_Z_L=0x2D;
 800127c:	232d      	movs	r3, #45	; 0x2d
 800127e:	733b      	strb	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin , GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2108      	movs	r1, #8
 8001284:	4874      	ldr	r0, [pc, #464]	; (8001458 <StartRead_XYZ+0x210>)
 8001286:	f000 ffa5 	bl	80021d4 <HAL_GPIO_WritePin>
		X_read_L=0x80|X_read_L;
 800128a:	7dbb      	ldrb	r3, [r7, #22]
 800128c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001290:	b2db      	uxtb	r3, r3
 8001292:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit(&hspi1, &X_read_L, 1, 100);
 8001294:	f107 0116 	add.w	r1, r7, #22
 8001298:	2364      	movs	r3, #100	; 0x64
 800129a:	2201      	movs	r2, #1
 800129c:	486f      	ldr	r0, [pc, #444]	; (800145c <StartRead_XYZ+0x214>)
 800129e:	f001 fcc6 	bl	8002c2e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &OUT_X_L, 1, 100);
 80012a2:	f107 0114 	add.w	r1, r7, #20
 80012a6:	2364      	movs	r3, #100	; 0x64
 80012a8:	2201      	movs	r2, #1
 80012aa:	486c      	ldr	r0, [pc, #432]	; (800145c <StartRead_XYZ+0x214>)
 80012ac:	f001 fdfb 	bl	8002ea6 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	2108      	movs	r1, #8
 80012b4:	4868      	ldr	r0, [pc, #416]	; (8001458 <StartRead_XYZ+0x210>)
 80012b6:	f000 ff8d 	bl	80021d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2108      	movs	r1, #8
 80012be:	4866      	ldr	r0, [pc, #408]	; (8001458 <StartRead_XYZ+0x210>)
 80012c0:	f000 ff88 	bl	80021d4 <HAL_GPIO_WritePin>
		X_read_H=0x80|X_read_H;
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	75fb      	strb	r3, [r7, #23]
		HAL_SPI_Transmit(&hspi1, &X_read_H, 1, 100);
 80012ce:	f107 0117 	add.w	r1, r7, #23
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	2201      	movs	r2, #1
 80012d6:	4861      	ldr	r0, [pc, #388]	; (800145c <StartRead_XYZ+0x214>)
 80012d8:	f001 fca9 	bl	8002c2e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &OUT_X_H, 1, 100);
 80012dc:	f107 0115 	add.w	r1, r7, #21
 80012e0:	2364      	movs	r3, #100	; 0x64
 80012e2:	2201      	movs	r2, #1
 80012e4:	485d      	ldr	r0, [pc, #372]	; (800145c <StartRead_XYZ+0x214>)
 80012e6:	f001 fdde 	bl	8002ea6 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	2108      	movs	r1, #8
 80012ee:	485a      	ldr	r0, [pc, #360]	; (8001458 <StartRead_XYZ+0x210>)
 80012f0:	f000 ff70 	bl	80021d4 <HAL_GPIO_WritePin>
		XYZ.X_16bit=((OUT_X_H<<8)|(OUT_X_L));
 80012f4:	7d7b      	ldrb	r3, [r7, #21]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	7d3b      	ldrb	r3, [r7, #20]
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21b      	sxth	r3, r3
 8001302:	b29b      	uxth	r3, r3
 8001304:	833b      	strh	r3, [r7, #24]

		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2108      	movs	r1, #8
 800130a:	4853      	ldr	r0, [pc, #332]	; (8001458 <StartRead_XYZ+0x210>)
 800130c:	f000 ff62 	bl	80021d4 <HAL_GPIO_WritePin>
		Y_read_L=0x80|Y_read_L;
 8001310:	7cbb      	ldrb	r3, [r7, #18]
 8001312:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001316:	b2db      	uxtb	r3, r3
 8001318:	74bb      	strb	r3, [r7, #18]
		HAL_SPI_Transmit(&hspi1, &Y_read_L, 1, 100);
 800131a:	f107 0112 	add.w	r1, r7, #18
 800131e:	2364      	movs	r3, #100	; 0x64
 8001320:	2201      	movs	r2, #1
 8001322:	484e      	ldr	r0, [pc, #312]	; (800145c <StartRead_XYZ+0x214>)
 8001324:	f001 fc83 	bl	8002c2e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &OUT_Y_L, 1, 100);
 8001328:	f107 0110 	add.w	r1, r7, #16
 800132c:	2364      	movs	r3, #100	; 0x64
 800132e:	2201      	movs	r2, #1
 8001330:	484a      	ldr	r0, [pc, #296]	; (800145c <StartRead_XYZ+0x214>)
 8001332:	f001 fdb8 	bl	8002ea6 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	2108      	movs	r1, #8
 800133a:	4847      	ldr	r0, [pc, #284]	; (8001458 <StartRead_XYZ+0x210>)
 800133c:	f000 ff4a 	bl	80021d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	2108      	movs	r1, #8
 8001344:	4844      	ldr	r0, [pc, #272]	; (8001458 <StartRead_XYZ+0x210>)
 8001346:	f000 ff45 	bl	80021d4 <HAL_GPIO_WritePin>
		Y_read_H=0x80|Y_read_H;
 800134a:	7cfb      	ldrb	r3, [r7, #19]
 800134c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001350:	b2db      	uxtb	r3, r3
 8001352:	74fb      	strb	r3, [r7, #19]
		HAL_SPI_Transmit(&hspi1, &Y_read_H, 1, 100);
 8001354:	f107 0113 	add.w	r1, r7, #19
 8001358:	2364      	movs	r3, #100	; 0x64
 800135a:	2201      	movs	r2, #1
 800135c:	483f      	ldr	r0, [pc, #252]	; (800145c <StartRead_XYZ+0x214>)
 800135e:	f001 fc66 	bl	8002c2e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &OUT_Y_H, 1, 100);
 8001362:	f107 0111 	add.w	r1, r7, #17
 8001366:	2364      	movs	r3, #100	; 0x64
 8001368:	2201      	movs	r2, #1
 800136a:	483c      	ldr	r0, [pc, #240]	; (800145c <StartRead_XYZ+0x214>)
 800136c:	f001 fd9b 	bl	8002ea6 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2108      	movs	r1, #8
 8001374:	4838      	ldr	r0, [pc, #224]	; (8001458 <StartRead_XYZ+0x210>)
 8001376:	f000 ff2d 	bl	80021d4 <HAL_GPIO_WritePin>
		XYZ.Y_16bit=((OUT_Y_H<<8)|(OUT_Y_L));
 800137a:	7c7b      	ldrb	r3, [r7, #17]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b21a      	sxth	r2, r3
 8001380:	7c3b      	ldrb	r3, [r7, #16]
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21b      	sxth	r3, r3
 8001388:	b29b      	uxth	r3, r3
 800138a:	837b      	strh	r3, [r7, #26]

		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2108      	movs	r1, #8
 8001390:	4831      	ldr	r0, [pc, #196]	; (8001458 <StartRead_XYZ+0x210>)
 8001392:	f000 ff1f 	bl	80021d4 <HAL_GPIO_WritePin>
		Z_read_L=0x80|Z_read_L;
 8001396:	7bbb      	ldrb	r3, [r7, #14]
 8001398:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800139c:	b2db      	uxtb	r3, r3
 800139e:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi1, &Z_read_L, 1, 100);
 80013a0:	f107 010e 	add.w	r1, r7, #14
 80013a4:	2364      	movs	r3, #100	; 0x64
 80013a6:	2201      	movs	r2, #1
 80013a8:	482c      	ldr	r0, [pc, #176]	; (800145c <StartRead_XYZ+0x214>)
 80013aa:	f001 fc40 	bl	8002c2e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &OUT_Z_L, 1, 100);
 80013ae:	f107 010c 	add.w	r1, r7, #12
 80013b2:	2364      	movs	r3, #100	; 0x64
 80013b4:	2201      	movs	r2, #1
 80013b6:	4829      	ldr	r0, [pc, #164]	; (800145c <StartRead_XYZ+0x214>)
 80013b8:	f001 fd75 	bl	8002ea6 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	2108      	movs	r1, #8
 80013c0:	4825      	ldr	r0, [pc, #148]	; (8001458 <StartRead_XYZ+0x210>)
 80013c2:	f000 ff07 	bl	80021d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2108      	movs	r1, #8
 80013ca:	4823      	ldr	r0, [pc, #140]	; (8001458 <StartRead_XYZ+0x210>)
 80013cc:	f000 ff02 	bl	80021d4 <HAL_GPIO_WritePin>
		Z_read_H=0x80|Z_read_H;
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	73fb      	strb	r3, [r7, #15]
		HAL_SPI_Transmit(&hspi1, &Z_read_H, 1, 100);
 80013da:	f107 010f 	add.w	r1, r7, #15
 80013de:	2364      	movs	r3, #100	; 0x64
 80013e0:	2201      	movs	r2, #1
 80013e2:	481e      	ldr	r0, [pc, #120]	; (800145c <StartRead_XYZ+0x214>)
 80013e4:	f001 fc23 	bl	8002c2e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &OUT_Z_H, 1, 100);
 80013e8:	f107 010d 	add.w	r1, r7, #13
 80013ec:	2364      	movs	r3, #100	; 0x64
 80013ee:	2201      	movs	r2, #1
 80013f0:	481a      	ldr	r0, [pc, #104]	; (800145c <StartRead_XYZ+0x214>)
 80013f2:	f001 fd58 	bl	8002ea6 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	2108      	movs	r1, #8
 80013fa:	4817      	ldr	r0, [pc, #92]	; (8001458 <StartRead_XYZ+0x210>)
 80013fc:	f000 feea 	bl	80021d4 <HAL_GPIO_WritePin>
		XYZ.Z_16bit=((OUT_Z_H<<8)|(OUT_Z_L));
 8001400:	7b7b      	ldrb	r3, [r7, #13]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	b21a      	sxth	r2, r3
 8001406:	7b3b      	ldrb	r3, [r7, #12]
 8001408:	b21b      	sxth	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	b21b      	sxth	r3, r3
 800140e:	b29b      	uxth	r3, r3
 8001410:	83bb      	strh	r3, [r7, #28]

		osMessageQueuePut(QUEUE_DATAHandle, &XYZ.X_16bit, 0, osWaitForever);
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <StartRead_XYZ+0x218>)
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	f107 0118 	add.w	r1, r7, #24
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	2200      	movs	r2, #0
 8001420:	f003 f942 	bl	80046a8 <osMessageQueuePut>
		osMessageQueuePut(QUEUE_DATAHandle, &XYZ.Y_16bit, 0, osWaitForever);
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <StartRead_XYZ+0x218>)
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	f107 0318 	add.w	r3, r7, #24
 800142c:	1c99      	adds	r1, r3, #2
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	2200      	movs	r2, #0
 8001434:	f003 f938 	bl	80046a8 <osMessageQueuePut>
		osMessageQueuePut(QUEUE_DATAHandle, &XYZ.Z_16bit, 0, osWaitForever);
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <StartRead_XYZ+0x218>)
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	f107 0318 	add.w	r3, r7, #24
 8001440:	1d19      	adds	r1, r3, #4
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	2200      	movs	r2, #0
 8001448:	f003 f92e 	bl	80046a8 <osMessageQueuePut>



    osDelay(500);
 800144c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001450:	f003 f89c 	bl	800458c <osDelay>
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin , GPIO_PIN_RESET);
 8001454:	e714      	b.n	8001280 <StartRead_XYZ+0x38>
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000
 800145c:	200001fc 	.word	0x200001fc
 8001460:	200009bc 	.word	0x200009bc
 8001464:	00000000 	.word	0x00000000

08001468 <StartAngle_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAngle_Task */
void StartAngle_Task(void *argument)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b0a6      	sub	sp, #152	; 0x98
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	QUEUE_DATA XYZ;
	QUEUE_UART Angle;



	double sens=16834;
 8001470:	a373      	add	r3, pc, #460	; (adr r3, 8001640 <StartAngle_Task+0x1d8>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	double TO_DEG=57;
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	4b6a      	ldr	r3, [pc, #424]	; (8001628 <StartAngle_Task+0x1c0>)
 8001480:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	char dataUART[94];
  /* Infinite loop */
  for(;;)
  {
		  osMessageQueueGet(QUEUE_DATAHandle, &XYZ.X_16bit, 0, osWaitForever);
 8001484:	4b69      	ldr	r3, [pc, #420]	; (800162c <StartAngle_Task+0x1c4>)
 8001486:	6818      	ldr	r0, [r3, #0]
 8001488:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	2200      	movs	r2, #0
 8001492:	f003 f969 	bl	8004768 <osMessageQueueGet>
		  osMessageQueueGet(QUEUE_DATAHandle, &XYZ.Y_16bit, 0, osWaitForever);
 8001496:	4b65      	ldr	r3, [pc, #404]	; (800162c <StartAngle_Task+0x1c4>)
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800149e:	1c99      	adds	r1, r3, #2
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
 80014a4:	2200      	movs	r2, #0
 80014a6:	f003 f95f 	bl	8004768 <osMessageQueueGet>
		  osMessageQueueGet(QUEUE_DATAHandle, &XYZ.Z_16bit, 0, osWaitForever);
 80014aa:	4b60      	ldr	r3, [pc, #384]	; (800162c <StartAngle_Task+0x1c4>)
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014b2:	1d19      	adds	r1, r3, #4
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
 80014b8:	2200      	movs	r2, #0
 80014ba:	f003 f955 	bl	8004768 <osMessageQueueGet>
	//	  sprintf(dataUART,"X=%d Y=%d Z=%d\r\n", XYZ.X_16bit, XYZ.Y_16bit, XYZ.Z_16bit);
	//	  HAL_UART_Transmit(&huart2, (uint8_t*)&dataUART, strlen(dataUART), osWaitForever);

	//	  HAL_Delay(10);

		  ax=(double)XYZ.X_16bit/sens;
 80014be:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f81e 	bl	8000504 <__aeabi_ui2d>
 80014c8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80014cc:	f7ff f9be 	bl	800084c <__aeabi_ddiv>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4956      	ldr	r1, [pc, #344]	; (8001630 <StartAngle_Task+0x1c8>)
 80014d6:	e9c1 2300 	strd	r2, r3, [r1]
		  ay=(double)XYZ.Y_16bit/sens;
 80014da:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f810 	bl	8000504 <__aeabi_ui2d>
 80014e4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80014e8:	f7ff f9b0 	bl	800084c <__aeabi_ddiv>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4950      	ldr	r1, [pc, #320]	; (8001634 <StartAngle_Task+0x1cc>)
 80014f2:	e9c1 2300 	strd	r2, r3, [r1]
		  az=(double)XYZ.Z_16bit/sens;
 80014f6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f802 	bl	8000504 <__aeabi_ui2d>
 8001500:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001504:	f7ff f9a2 	bl	800084c <__aeabi_ddiv>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	494a      	ldr	r1, [pc, #296]	; (8001638 <StartAngle_Task+0x1d0>)
 800150e:	e9c1 2300 	strd	r2, r3, [r1]
		  //HAL_UART_Transmit(&huart2, (uint8_t*)&dataUART, strlen(dataUART), osWaitForever);

	//	  HAL_Delay(10);


		  Angle.angle_ax=TO_DEG*atan2(ay,az);
 8001512:	4b48      	ldr	r3, [pc, #288]	; (8001634 <StartAngle_Task+0x1cc>)
 8001514:	ed93 7b00 	vldr	d7, [r3]
 8001518:	4b47      	ldr	r3, [pc, #284]	; (8001638 <StartAngle_Task+0x1d0>)
 800151a:	ed93 6b00 	vldr	d6, [r3]
 800151e:	eeb0 1a46 	vmov.f32	s2, s12
 8001522:	eef0 1a66 	vmov.f32	s3, s13
 8001526:	eeb0 0a47 	vmov.f32	s0, s14
 800152a:	eef0 0a67 	vmov.f32	s1, s15
 800152e:	f008 fdd5 	bl	800a0dc <atan2>
 8001532:	ec51 0b10 	vmov	r0, r1, d0
 8001536:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800153a:	f7ff f85d 	bl	80005f8 <__aeabi_dmul>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		  Angle.angle_ay=TO_DEG*atan2(ax,az);
 8001546:	4b3a      	ldr	r3, [pc, #232]	; (8001630 <StartAngle_Task+0x1c8>)
 8001548:	ed93 7b00 	vldr	d7, [r3]
 800154c:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <StartAngle_Task+0x1d0>)
 800154e:	ed93 6b00 	vldr	d6, [r3]
 8001552:	eeb0 1a46 	vmov.f32	s2, s12
 8001556:	eef0 1a66 	vmov.f32	s3, s13
 800155a:	eeb0 0a47 	vmov.f32	s0, s14
 800155e:	eef0 0a67 	vmov.f32	s1, s15
 8001562:	f008 fdbb 	bl	800a0dc <atan2>
 8001566:	ec51 0b10 	vmov	r0, r1, d0
 800156a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800156e:	f7ff f843 	bl	80005f8 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		  Angle.angle_az=TO_DEG*atan2(ay,ax);
 800157a:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <StartAngle_Task+0x1cc>)
 800157c:	ed93 7b00 	vldr	d7, [r3]
 8001580:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <StartAngle_Task+0x1c8>)
 8001582:	ed93 6b00 	vldr	d6, [r3]
 8001586:	eeb0 1a46 	vmov.f32	s2, s12
 800158a:	eef0 1a66 	vmov.f32	s3, s13
 800158e:	eeb0 0a47 	vmov.f32	s0, s14
 8001592:	eef0 0a67 	vmov.f32	s1, s15
 8001596:	f008 fda1 	bl	800a0dc <atan2>
 800159a:	ec51 0b10 	vmov	r0, r1, d0
 800159e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80015a2:	f7ff f829 	bl	80005f8 <__aeabi_dmul>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

		//  sprintf(dataUART,"1X_ax=%.2f 1Y_ay=%.2f 1Z_az=%.2f\r\n", Angle.angle_ax, Angle.angle_ay, Angle.angle_az);
		//  sprintf(dataUART,"X_ax=%d Y_ay=%d Z_az=%d\r\n", i_ax, i_ay, i_az);
	//	  //sprintf(dataUART,"X=%d Y=%d Z=%d\r\n", XYZ.X_16bit, XYZ.Y_16bit, XYZ.Z_16bit);
		//  HAL_UART_Transmit(&huart2, (uint8_t*)&dataUART, strlen(dataUART), osWaitForever);
		  osMessageQueuePut(QUEUE_UARTHandle, &ax, 0, osWaitForever);
 80015ae:	4b23      	ldr	r3, [pc, #140]	; (800163c <StartAngle_Task+0x1d4>)
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	2200      	movs	r2, #0
 80015b8:	491d      	ldr	r1, [pc, #116]	; (8001630 <StartAngle_Task+0x1c8>)
 80015ba:	f003 f875 	bl	80046a8 <osMessageQueuePut>
		  osMessageQueuePut(QUEUE_UARTHandle, &ay, 0, osWaitForever);
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <StartAngle_Task+0x1d4>)
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	2200      	movs	r2, #0
 80015c8:	491a      	ldr	r1, [pc, #104]	; (8001634 <StartAngle_Task+0x1cc>)
 80015ca:	f003 f86d 	bl	80046a8 <osMessageQueuePut>
		  osMessageQueuePut(QUEUE_UARTHandle, &az, 0, osWaitForever);
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <StartAngle_Task+0x1d4>)
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	2200      	movs	r2, #0
 80015d8:	4917      	ldr	r1, [pc, #92]	; (8001638 <StartAngle_Task+0x1d0>)
 80015da:	f003 f865 	bl	80046a8 <osMessageQueuePut>

		  osMessageQueuePut(QUEUE_UARTHandle, &Angle.angle_ax, 0, osWaitForever);
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <StartAngle_Task+0x1d4>)
 80015e0:	6818      	ldr	r0, [r3, #0]
 80015e2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	2200      	movs	r2, #0
 80015ec:	f003 f85c 	bl	80046a8 <osMessageQueuePut>
		 osMessageQueuePut(QUEUE_UARTHandle, &Angle.angle_ay, 0, osWaitForever);
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <StartAngle_Task+0x1d4>)
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80015f8:	f103 0108 	add.w	r1, r3, #8
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001600:	2200      	movs	r2, #0
 8001602:	f003 f851 	bl	80046a8 <osMessageQueuePut>
		  osMessageQueuePut(QUEUE_UARTHandle, &Angle.angle_az, 0, osWaitForever);
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <StartAngle_Task+0x1d4>)
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800160e:	f103 0110 	add.w	r1, r3, #16
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	2200      	movs	r2, #0
 8001618:	f003 f846 	bl	80046a8 <osMessageQueuePut>




    osDelay(1000);
 800161c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001620:	f002 ffb4 	bl	800458c <osDelay>
		  osMessageQueueGet(QUEUE_DATAHandle, &XYZ.X_16bit, 0, osWaitForever);
 8001624:	e72e      	b.n	8001484 <StartAngle_Task+0x1c>
 8001626:	bf00      	nop
 8001628:	404c8000 	.word	0x404c8000
 800162c:	200009bc 	.word	0x200009bc
 8001630:	20000b28 	.word	0x20000b28
 8001634:	20000b30 	.word	0x20000b30
 8001638:	20000b38 	.word	0x20000b38
 800163c:	20000a30 	.word	0x20000a30
 8001640:	00000000 	.word	0x00000000
 8001644:	40d07080 	.word	0x40d07080

08001648 <StartTask_test>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_test */
void StartTask_test(void *argument)
{
 8001648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164a:	b0a7      	sub	sp, #156	; 0x9c
 800164c:	af06      	add	r7, sp, #24
 800164e:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(QUEUE_UARTHandle, &ax, 0, osWaitForever);
 8001650:	4b40      	ldr	r3, [pc, #256]	; (8001754 <StartTask_test+0x10c>)
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	f04f 33ff 	mov.w	r3, #4294967295
 8001658:	2200      	movs	r2, #0
 800165a:	493f      	ldr	r1, [pc, #252]	; (8001758 <StartTask_test+0x110>)
 800165c:	f003 f884 	bl	8004768 <osMessageQueueGet>
	  osMessageQueueGet(QUEUE_UARTHandle, &ay, 0, osWaitForever);
 8001660:	4b3c      	ldr	r3, [pc, #240]	; (8001754 <StartTask_test+0x10c>)
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	f04f 33ff 	mov.w	r3, #4294967295
 8001668:	2200      	movs	r2, #0
 800166a:	493c      	ldr	r1, [pc, #240]	; (800175c <StartTask_test+0x114>)
 800166c:	f003 f87c 	bl	8004768 <osMessageQueueGet>
	  osMessageQueueGet(QUEUE_UARTHandle, &az, 0, osWaitForever);
 8001670:	4b38      	ldr	r3, [pc, #224]	; (8001754 <StartTask_test+0x10c>)
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	f04f 33ff 	mov.w	r3, #4294967295
 8001678:	2200      	movs	r2, #0
 800167a:	4939      	ldr	r1, [pc, #228]	; (8001760 <StartTask_test+0x118>)
 800167c:	f003 f874 	bl	8004768 <osMessageQueueGet>


	  osMessageQueueGet(QUEUE_UARTHandle, &Angle.angle_ax, 0, osWaitForever);
 8001680:	4b34      	ldr	r3, [pc, #208]	; (8001754 <StartTask_test+0x10c>)
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
 800168c:	2200      	movs	r2, #0
 800168e:	f003 f86b 	bl	8004768 <osMessageQueueGet>
	  osMessageQueueGet(QUEUE_UARTHandle, &Angle.angle_ay, 0, osWaitForever);
 8001692:	4b30      	ldr	r3, [pc, #192]	; (8001754 <StartTask_test+0x10c>)
 8001694:	6818      	ldr	r0, [r3, #0]
 8001696:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800169a:	f103 0108 	add.w	r1, r3, #8
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	2200      	movs	r2, #0
 80016a4:	f003 f860 	bl	8004768 <osMessageQueueGet>
	  osMessageQueueGet(QUEUE_UARTHandle, &Angle.angle_az, 0, osWaitForever);
 80016a8:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <StartTask_test+0x10c>)
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016b0:	f103 0110 	add.w	r1, r3, #16
 80016b4:	f04f 33ff 	mov.w	r3, #4294967295
 80016b8:	2200      	movs	r2, #0
 80016ba:	f003 f855 	bl	8004768 <osMessageQueueGet>

			  //i_ax=(uint16_t)Angle.angle_ax;
			  //i_ay=(uint16_t)Angle.angle_ay;
			  //i_az=(uint16_t)Angle.angle_az;
	//  sprintf(dataUART,"ax=%.2f ay=%.2f az=%.2f\r\n", ax, ay, az);
	  snprintf(dataUART,sizeof(dataUART),"ax=%.2f ay=%.2f az=%.2f\r\n", ax, ay, az);
 80016be:	4b26      	ldr	r3, [pc, #152]	; (8001758 <StartTask_test+0x110>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	4925      	ldr	r1, [pc, #148]	; (800175c <StartTask_test+0x114>)
 80016c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016ca:	4c25      	ldr	r4, [pc, #148]	; (8001760 <StartTask_test+0x118>)
 80016cc:	e9d4 4500 	ldrd	r4, r5, [r4]
 80016d0:	f107 0608 	add.w	r6, r7, #8
 80016d4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80016d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80016dc:	e9cd 2300 	strd	r2, r3, [sp]
 80016e0:	4a20      	ldr	r2, [pc, #128]	; (8001764 <StartTask_test+0x11c>)
 80016e2:	215e      	movs	r1, #94	; 0x5e
 80016e4:	4630      	mov	r0, r6
 80016e6:	f006 fa5b 	bl	8007ba0 <sniprintf>
	  //  sprintf(dataUART,"X_ax=%d Y_ay=%d Z_az=%d\r\n", i_ax, i_ay, i_az);
	  //sprintf(dataUART,"X=%d Y=%d Z=%d\r\n", XYZ.X_16bit, XYZ.Y_16bit, XYZ.Z_16bit);
	  HAL_UART_Transmit(&huart2, (uint8_t*)&dataUART, strlen(dataUART), osWaitForever);
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fd6e 	bl	80001d0 <strlen>
 80016f4:	4603      	mov	r3, r0
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	f107 0108 	add.w	r1, r7, #8
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001700:	4819      	ldr	r0, [pc, #100]	; (8001768 <StartTask_test+0x120>)
 8001702:	f002 faae 	bl	8003c62 <HAL_UART_Transmit>
	 // Angle.angle_az=1.38;
	   //u16_ax=(uint16_t)Angle.angle_ax;
	   //u16_ay=(uint16_t)Angle.angle_ay;
	  // u16_az=(uint16_t)Angle.angle_az;

	  snprintf(dataUART,sizeof(dataUART),"1X_ax=%.2f 2Y_ay=%.2f 3Z_az=%.2f\r\n", Angle.angle_ax, Angle.angle_ay, Angle.angle_az);
 8001706:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800170a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800170e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001712:	f107 0608 	add.w	r6, r7, #8
 8001716:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800171a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800171e:	e9cd 2300 	strd	r2, r3, [sp]
 8001722:	4a12      	ldr	r2, [pc, #72]	; (800176c <StartTask_test+0x124>)
 8001724:	215e      	movs	r1, #94	; 0x5e
 8001726:	4630      	mov	r0, r6
 8001728:	f006 fa3a 	bl	8007ba0 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)&dataUART, strlen(dataUART), osWaitForever);
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe fd4d 	bl	80001d0 <strlen>
 8001736:	4603      	mov	r3, r0
 8001738:	b29a      	uxth	r2, r3
 800173a:	f107 0108 	add.w	r1, r7, #8
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	4809      	ldr	r0, [pc, #36]	; (8001768 <StartTask_test+0x120>)
 8001744:	f002 fa8d 	bl	8003c62 <HAL_UART_Transmit>

		//  sprintf(dataUART,"X_ax=%d Y_ay=%d Z_az=%d\r\n", i_ax, i_ay, i_az);
	  //sprintf(dataUART,"X=%d Y=%d Z=%d\r\n", u16_ax, u16_ay, u16_az);

    osDelay(1000);
 8001748:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800174c:	f002 ff1e 	bl	800458c <osDelay>
	  osMessageQueueGet(QUEUE_UARTHandle, &ax, 0, osWaitForever);
 8001750:	e77e      	b.n	8001650 <StartTask_test+0x8>
 8001752:	bf00      	nop
 8001754:	20000a30 	.word	0x20000a30
 8001758:	20000b28 	.word	0x20000b28
 800175c:	20000b30 	.word	0x20000b30
 8001760:	20000b38 	.word	0x20000b38
 8001764:	0800a648 	.word	0x0800a648
 8001768:	20000254 	.word	0x20000254
 800176c:	0800a664 	.word	0x0800a664

08001770 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a04      	ldr	r2, [pc, #16]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d101      	bne.n	8001786 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001782:	f000 fa89 	bl	8001c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40001000 	.word	0x40001000

08001794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001798:	b672      	cpsid	i
}
 800179a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800179c:	e7fe      	b.n	800179c <Error_Handler+0x8>
	...

080017a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_MspInit+0x54>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <HAL_MspInit+0x54>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b4:	6453      	str	r3, [r2, #68]	; 0x44
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_MspInit+0x54>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_MspInit+0x54>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_MspInit+0x54>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_MspInit+0x54>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	210f      	movs	r1, #15
 80017e2:	f06f 0001 	mvn.w	r0, #1
 80017e6:	f000 fb2f 	bl	8001e48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800

080017f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a19      	ldr	r2, [pc, #100]	; (800187c <HAL_SPI_MspInit+0x84>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d12b      	bne.n	8001872 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <HAL_SPI_MspInit+0x88>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	4a17      	ldr	r2, [pc, #92]	; (8001880 <HAL_SPI_MspInit+0x88>)
 8001824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_SPI_MspInit+0x88>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_SPI_MspInit+0x88>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a10      	ldr	r2, [pc, #64]	; (8001880 <HAL_SPI_MspInit+0x88>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <HAL_SPI_MspInit+0x88>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001852:	23e0      	movs	r3, #224	; 0xe0
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001862:	2305      	movs	r3, #5
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <HAL_SPI_MspInit+0x8c>)
 800186e:	f000 fb15 	bl	8001e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001872:	bf00      	nop
 8001874:	3728      	adds	r7, #40	; 0x28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40013000 	.word	0x40013000
 8001880:	40023800 	.word	0x40023800
 8001884:	40020000 	.word	0x40020000

08001888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <HAL_UART_MspInit+0x84>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d12b      	bne.n	8001902 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_UART_MspInit+0x88>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018e2:	230c      	movs	r3, #12
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f2:	2307      	movs	r3, #7
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <HAL_UART_MspInit+0x8c>)
 80018fe:	f000 facd 	bl	8001e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001902:	bf00      	nop
 8001904:	3728      	adds	r7, #40	; 0x28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40004400 	.word	0x40004400
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000

08001918 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08e      	sub	sp, #56	; 0x38
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	4b33      	ldr	r3, [pc, #204]	; (80019fc <HAL_InitTick+0xe4>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	4a32      	ldr	r2, [pc, #200]	; (80019fc <HAL_InitTick+0xe4>)
 8001932:	f043 0310 	orr.w	r3, r3, #16
 8001936:	6413      	str	r3, [r2, #64]	; 0x40
 8001938:	4b30      	ldr	r3, [pc, #192]	; (80019fc <HAL_InitTick+0xe4>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	f003 0310 	and.w	r3, r3, #16
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001944:	f107 0210 	add.w	r2, r7, #16
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4611      	mov	r1, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f001 f8b2 	bl	8002ab8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195a:	2b00      	cmp	r3, #0
 800195c:	d103      	bne.n	8001966 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800195e:	f001 f883 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 8001962:	6378      	str	r0, [r7, #52]	; 0x34
 8001964:	e004      	b.n	8001970 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001966:	f001 f87f 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 800196a:	4603      	mov	r3, r0
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001972:	4a23      	ldr	r2, [pc, #140]	; (8001a00 <HAL_InitTick+0xe8>)
 8001974:	fba2 2303 	umull	r2, r3, r2, r3
 8001978:	0c9b      	lsrs	r3, r3, #18
 800197a:	3b01      	subs	r3, #1
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800197e:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <HAL_InitTick+0xec>)
 8001980:	4a21      	ldr	r2, [pc, #132]	; (8001a08 <HAL_InitTick+0xf0>)
 8001982:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <HAL_InitTick+0xec>)
 8001986:	f240 32e7 	movw	r2, #999	; 0x3e7
 800198a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800198c:	4a1d      	ldr	r2, [pc, #116]	; (8001a04 <HAL_InitTick+0xec>)
 800198e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001990:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001992:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <HAL_InitTick+0xec>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <HAL_InitTick+0xec>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_InitTick+0xec>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80019a4:	4817      	ldr	r0, [pc, #92]	; (8001a04 <HAL_InitTick+0xec>)
 80019a6:	f001 fe61 	bl	800366c <HAL_TIM_Base_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80019b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d11b      	bne.n	80019f0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80019b8:	4812      	ldr	r0, [pc, #72]	; (8001a04 <HAL_InitTick+0xec>)
 80019ba:	f001 feb1 	bl	8003720 <HAL_TIM_Base_Start_IT>
 80019be:	4603      	mov	r3, r0
 80019c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80019c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d111      	bne.n	80019f0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019cc:	2036      	movs	r0, #54	; 0x36
 80019ce:	f000 fa57 	bl	8001e80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d808      	bhi.n	80019ea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80019d8:	2200      	movs	r2, #0
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	2036      	movs	r0, #54	; 0x36
 80019de:	f000 fa33 	bl	8001e48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <HAL_InitTick+0xf4>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	e002      	b.n	80019f0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3738      	adds	r7, #56	; 0x38
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800
 8001a00:	431bde83 	.word	0x431bde83
 8001a04:	20000b40 	.word	0x20000b40
 8001a08:	40001000 	.word	0x40001000
 8001a0c:	20000004 	.word	0x20000004

08001a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <NMI_Handler+0x4>

08001a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <HardFault_Handler+0x4>

08001a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <MemManage_Handler+0x4>

08001a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <BusFault_Handler+0x4>

08001a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <UsageFault_Handler+0x4>

08001a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <TIM6_DAC_IRQHandler+0x10>)
 8001a42:	f001 fedd 	bl	8003800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000b40 	.word	0x20000b40

08001a50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
	return 1;
 8001a54:	2301      	movs	r3, #1
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <_kill>:

int _kill(int pid, int sig)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a6a:	f005 fbef 	bl	800724c <__errno>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2216      	movs	r2, #22
 8001a72:	601a      	str	r2, [r3, #0]
	return -1;
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_exit>:

void _exit (int status)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ffe7 	bl	8001a60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a92:	e7fe      	b.n	8001a92 <_exit+0x12>

08001a94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e00a      	b.n	8001abc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aa6:	f3af 8000 	nop.w
 8001aaa:	4601      	mov	r1, r0
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60ba      	str	r2, [r7, #8]
 8001ab2:	b2ca      	uxtb	r2, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf0      	blt.n	8001aa6 <_read+0x12>
	}

return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e009      	b.n	8001af4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	60ba      	str	r2, [r7, #8]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dbf1      	blt.n	8001ae0 <_write+0x12>
	}
	return len;
 8001afc:	687b      	ldr	r3, [r7, #4]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <_close>:

int _close(int file)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
	return -1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b2e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <_isatty>:

int _isatty(int file)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
	return 1;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b78:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <_sbrk+0x5c>)
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <_sbrk+0x60>)
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <_sbrk+0x64>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <_sbrk+0x68>)
 8001b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d207      	bcs.n	8001bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba0:	f005 fb54 	bl	800724c <__errno>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	e009      	b.n	8001bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <_sbrk+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <_sbrk+0x64>)
 8001bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20020000 	.word	0x20020000
 8001bd0:	00000400 	.word	0x00000400
 8001bd4:	20000b88 	.word	0x20000b88
 8001bd8:	200054f0 	.word	0x200054f0

08001bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <SystemInit+0x20>)
 8001be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <SystemInit+0x20>)
 8001be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c04:	480d      	ldr	r0, [pc, #52]	; (8001c3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c06:	490e      	ldr	r1, [pc, #56]	; (8001c40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c08:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c0c:	e002      	b.n	8001c14 <LoopCopyDataInit>

08001c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c12:	3304      	adds	r3, #4

08001c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c18:	d3f9      	bcc.n	8001c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1a:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c1c:	4c0b      	ldr	r4, [pc, #44]	; (8001c4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c20:	e001      	b.n	8001c26 <LoopFillZerobss>

08001c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c24:	3204      	adds	r2, #4

08001c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c28:	d3fb      	bcc.n	8001c22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c2a:	f7ff ffd7 	bl	8001bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f005 fb13 	bl	8007258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c32:	f7ff f97b 	bl	8000f2c <main>
  bx  lr    
 8001c36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c40:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001c44:	0800abd8 	.word	0x0800abd8
  ldr r2, =_sbss
 8001c48:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001c4c:	200054f0 	.word	0x200054f0

08001c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC_IRQHandler>
	...

08001c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <HAL_Init+0x40>)
 8001c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <HAL_Init+0x40>)
 8001c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <HAL_Init+0x40>)
 8001c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f000 f8d8 	bl	8001e32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c82:	200f      	movs	r0, #15
 8001c84:	f7ff fe48 	bl	8001918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c88:	f7ff fd8a 	bl	80017a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023c00 	.word	0x40023c00

08001c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x20>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x24>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <HAL_IncTick+0x24>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	20000b8c 	.word	0x20000b8c

08001cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_GetTick+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000b8c 	.word	0x20000b8c

08001cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0a:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	60d3      	str	r3, [r2, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <__NVIC_GetPriorityGrouping+0x18>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	f003 0307 	and.w	r3, r3, #7
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	db0b      	blt.n	8001d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	4907      	ldr	r1, [pc, #28]	; (8001d74 <__NVIC_EnableIRQ+0x38>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000e100 	.word	0xe000e100

08001d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	db0a      	blt.n	8001da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	490c      	ldr	r1, [pc, #48]	; (8001dc4 <__NVIC_SetPriority+0x4c>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da0:	e00a      	b.n	8001db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4908      	ldr	r1, [pc, #32]	; (8001dc8 <__NVIC_SetPriority+0x50>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3b04      	subs	r3, #4
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	440b      	add	r3, r1
 8001db6:	761a      	strb	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f1c3 0307 	rsb	r3, r3, #7
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	bf28      	it	cs
 8001dea:	2304      	movcs	r3, #4
 8001dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3304      	adds	r3, #4
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d902      	bls.n	8001dfc <NVIC_EncodePriority+0x30>
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3b03      	subs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <NVIC_EncodePriority+0x32>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	f04f 32ff 	mov.w	r2, #4294967295
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	401a      	ands	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43d9      	mvns	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	4313      	orrs	r3, r2
         );
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	; 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ff4c 	bl	8001cd8 <__NVIC_SetPriorityGrouping>
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5a:	f7ff ff61 	bl	8001d20 <__NVIC_GetPriorityGrouping>
 8001e5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	6978      	ldr	r0, [r7, #20]
 8001e66:	f7ff ffb1 	bl	8001dcc <NVIC_EncodePriority>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e70:	4611      	mov	r1, r2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff80 	bl	8001d78 <__NVIC_SetPriority>
}
 8001e78:	bf00      	nop
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff ff54 	bl	8001d3c <__NVIC_EnableIRQ>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	e16b      	b.n	8002190 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eb8:	2201      	movs	r2, #1
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	f040 815a 	bne.w	800218a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d005      	beq.n	8001eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d130      	bne.n	8001f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f24:	2201      	movs	r2, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 0201 	and.w	r2, r3, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d017      	beq.n	8001f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d123      	bne.n	8001fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	08da      	lsrs	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3208      	adds	r2, #8
 8001fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	220f      	movs	r2, #15
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	08da      	lsrs	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3208      	adds	r2, #8
 8001fda:	69b9      	ldr	r1, [r7, #24]
 8001fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	2203      	movs	r2, #3
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0203 	and.w	r2, r3, #3
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80b4 	beq.w	800218a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b60      	ldr	r3, [pc, #384]	; (80021a8 <HAL_GPIO_Init+0x30c>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a5f      	ldr	r2, [pc, #380]	; (80021a8 <HAL_GPIO_Init+0x30c>)
 800202c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b5d      	ldr	r3, [pc, #372]	; (80021a8 <HAL_GPIO_Init+0x30c>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800203e:	4a5b      	ldr	r2, [pc, #364]	; (80021ac <HAL_GPIO_Init+0x310>)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a52      	ldr	r2, [pc, #328]	; (80021b0 <HAL_GPIO_Init+0x314>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d02b      	beq.n	80020c2 <HAL_GPIO_Init+0x226>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a51      	ldr	r2, [pc, #324]	; (80021b4 <HAL_GPIO_Init+0x318>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d025      	beq.n	80020be <HAL_GPIO_Init+0x222>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a50      	ldr	r2, [pc, #320]	; (80021b8 <HAL_GPIO_Init+0x31c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d01f      	beq.n	80020ba <HAL_GPIO_Init+0x21e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4f      	ldr	r2, [pc, #316]	; (80021bc <HAL_GPIO_Init+0x320>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d019      	beq.n	80020b6 <HAL_GPIO_Init+0x21a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4e      	ldr	r2, [pc, #312]	; (80021c0 <HAL_GPIO_Init+0x324>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <HAL_GPIO_Init+0x216>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4d      	ldr	r2, [pc, #308]	; (80021c4 <HAL_GPIO_Init+0x328>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00d      	beq.n	80020ae <HAL_GPIO_Init+0x212>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4c      	ldr	r2, [pc, #304]	; (80021c8 <HAL_GPIO_Init+0x32c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d007      	beq.n	80020aa <HAL_GPIO_Init+0x20e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4b      	ldr	r2, [pc, #300]	; (80021cc <HAL_GPIO_Init+0x330>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d101      	bne.n	80020a6 <HAL_GPIO_Init+0x20a>
 80020a2:	2307      	movs	r3, #7
 80020a4:	e00e      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020a6:	2308      	movs	r3, #8
 80020a8:	e00c      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020aa:	2306      	movs	r3, #6
 80020ac:	e00a      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020ae:	2305      	movs	r3, #5
 80020b0:	e008      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020b2:	2304      	movs	r3, #4
 80020b4:	e006      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020b6:	2303      	movs	r3, #3
 80020b8:	e004      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e002      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020c2:	2300      	movs	r3, #0
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	f002 0203 	and.w	r2, r2, #3
 80020ca:	0092      	lsls	r2, r2, #2
 80020cc:	4093      	lsls	r3, r2
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d4:	4935      	ldr	r1, [pc, #212]	; (80021ac <HAL_GPIO_Init+0x310>)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	3302      	adds	r3, #2
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e2:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HAL_GPIO_Init+0x334>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002106:	4a32      	ldr	r2, [pc, #200]	; (80021d0 <HAL_GPIO_Init+0x334>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800210c:	4b30      	ldr	r3, [pc, #192]	; (80021d0 <HAL_GPIO_Init+0x334>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002130:	4a27      	ldr	r2, [pc, #156]	; (80021d0 <HAL_GPIO_Init+0x334>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002136:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <HAL_GPIO_Init+0x334>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800215a:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <HAL_GPIO_Init+0x334>)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_GPIO_Init+0x334>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002184:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <HAL_GPIO_Init+0x334>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3301      	adds	r3, #1
 800218e:	61fb      	str	r3, [r7, #28]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	2b0f      	cmp	r3, #15
 8002194:	f67f ae90 	bls.w	8001eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3724      	adds	r7, #36	; 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40013800 	.word	0x40013800
 80021b0:	40020000 	.word	0x40020000
 80021b4:	40020400 	.word	0x40020400
 80021b8:	40020800 	.word	0x40020800
 80021bc:	40020c00 	.word	0x40020c00
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40021400 	.word	0x40021400
 80021c8:	40021800 	.word	0x40021800
 80021cc:	40021c00 	.word	0x40021c00
 80021d0:	40013c00 	.word	0x40013c00

080021d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
 80021e0:	4613      	mov	r3, r2
 80021e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e4:	787b      	ldrb	r3, [r7, #1]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021f0:	e003      	b.n	80021fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021f2:	887b      	ldrh	r3, [r7, #2]
 80021f4:	041a      	lsls	r2, r3, #16
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	619a      	str	r2, [r3, #24]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e267      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d075      	beq.n	8002312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002226:	4b88      	ldr	r3, [pc, #544]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b04      	cmp	r3, #4
 8002230:	d00c      	beq.n	800224c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002232:	4b85      	ldr	r3, [pc, #532]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800223a:	2b08      	cmp	r3, #8
 800223c:	d112      	bne.n	8002264 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223e:	4b82      	ldr	r3, [pc, #520]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800224a:	d10b      	bne.n	8002264 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224c:	4b7e      	ldr	r3, [pc, #504]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d05b      	beq.n	8002310 <HAL_RCC_OscConfig+0x108>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d157      	bne.n	8002310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e242      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226c:	d106      	bne.n	800227c <HAL_RCC_OscConfig+0x74>
 800226e:	4b76      	ldr	r3, [pc, #472]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a75      	ldr	r2, [pc, #468]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e01d      	b.n	80022b8 <HAL_RCC_OscConfig+0xb0>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x98>
 8002286:	4b70      	ldr	r3, [pc, #448]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a6f      	ldr	r2, [pc, #444]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800228c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b6d      	ldr	r3, [pc, #436]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a6c      	ldr	r2, [pc, #432]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e00b      	b.n	80022b8 <HAL_RCC_OscConfig+0xb0>
 80022a0:	4b69      	ldr	r3, [pc, #420]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a68      	ldr	r2, [pc, #416]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80022a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b66      	ldr	r3, [pc, #408]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a65      	ldr	r2, [pc, #404]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80022b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d013      	beq.n	80022e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff fcfe 	bl	8001cc0 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c8:	f7ff fcfa 	bl	8001cc0 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e207      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	4b5b      	ldr	r3, [pc, #364]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0xc0>
 80022e6:	e014      	b.n	8002312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7ff fcea 	bl	8001cc0 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f0:	f7ff fce6 	bl	8001cc0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e1f3      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	4b51      	ldr	r3, [pc, #324]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0xe8>
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d063      	beq.n	80023e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800231e:	4b4a      	ldr	r3, [pc, #296]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00b      	beq.n	8002342 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800232a:	4b47      	ldr	r3, [pc, #284]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002332:	2b08      	cmp	r3, #8
 8002334:	d11c      	bne.n	8002370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002336:	4b44      	ldr	r3, [pc, #272]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d116      	bne.n	8002370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	4b41      	ldr	r3, [pc, #260]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_RCC_OscConfig+0x152>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d001      	beq.n	800235a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e1c7      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235a:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4937      	ldr	r1, [pc, #220]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	e03a      	b.n	80023e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d020      	beq.n	80023ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002378:	4b34      	ldr	r3, [pc, #208]	; (800244c <HAL_RCC_OscConfig+0x244>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7ff fc9f 	bl	8001cc0 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002386:	f7ff fc9b 	bl	8001cc0 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e1a8      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a4:	4b28      	ldr	r3, [pc, #160]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4925      	ldr	r1, [pc, #148]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	600b      	str	r3, [r1, #0]
 80023b8:	e015      	b.n	80023e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ba:	4b24      	ldr	r3, [pc, #144]	; (800244c <HAL_RCC_OscConfig+0x244>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7ff fc7e 	bl	8001cc0 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c8:	f7ff fc7a 	bl	8001cc0 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e187      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d036      	beq.n	8002460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d016      	beq.n	8002428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_RCC_OscConfig+0x248>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002400:	f7ff fc5e 	bl	8001cc0 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002408:	f7ff fc5a 	bl	8001cc0 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e167      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800241c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0x200>
 8002426:	e01b      	b.n	8002460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <HAL_RCC_OscConfig+0x248>)
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242e:	f7ff fc47 	bl	8001cc0 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	e00e      	b.n	8002454 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002436:	f7ff fc43 	bl	8001cc0 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d907      	bls.n	8002454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e150      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
 8002448:	40023800 	.word	0x40023800
 800244c:	42470000 	.word	0x42470000
 8002450:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002454:	4b88      	ldr	r3, [pc, #544]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ea      	bne.n	8002436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 8097 	beq.w	800259c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002472:	4b81      	ldr	r3, [pc, #516]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10f      	bne.n	800249e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	4b7d      	ldr	r3, [pc, #500]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4a7c      	ldr	r2, [pc, #496]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
 800248e:	4b7a      	ldr	r3, [pc, #488]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249a:	2301      	movs	r3, #1
 800249c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249e:	4b77      	ldr	r3, [pc, #476]	; (800267c <HAL_RCC_OscConfig+0x474>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d118      	bne.n	80024dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024aa:	4b74      	ldr	r3, [pc, #464]	; (800267c <HAL_RCC_OscConfig+0x474>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a73      	ldr	r2, [pc, #460]	; (800267c <HAL_RCC_OscConfig+0x474>)
 80024b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b6:	f7ff fc03 	bl	8001cc0 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024be:	f7ff fbff 	bl	8001cc0 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e10c      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	4b6a      	ldr	r3, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0x474>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x2ea>
 80024e4:	4b64      	ldr	r3, [pc, #400]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	4a63      	ldr	r2, [pc, #396]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6713      	str	r3, [r2, #112]	; 0x70
 80024f0:	e01c      	b.n	800252c <HAL_RCC_OscConfig+0x324>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x30c>
 80024fa:	4b5f      	ldr	r3, [pc, #380]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	4a5e      	ldr	r2, [pc, #376]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6713      	str	r3, [r2, #112]	; 0x70
 8002506:	4b5c      	ldr	r3, [pc, #368]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	4a5b      	ldr	r2, [pc, #364]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6713      	str	r3, [r2, #112]	; 0x70
 8002512:	e00b      	b.n	800252c <HAL_RCC_OscConfig+0x324>
 8002514:	4b58      	ldr	r3, [pc, #352]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	4a57      	ldr	r2, [pc, #348]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	6713      	str	r3, [r2, #112]	; 0x70
 8002520:	4b55      	ldr	r3, [pc, #340]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	4a54      	ldr	r2, [pc, #336]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002526:	f023 0304 	bic.w	r3, r3, #4
 800252a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d015      	beq.n	8002560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7ff fbc4 	bl	8001cc0 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253a:	e00a      	b.n	8002552 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800253c:	f7ff fbc0 	bl	8001cc0 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	; 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e0cb      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002552:	4b49      	ldr	r3, [pc, #292]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0ee      	beq.n	800253c <HAL_RCC_OscConfig+0x334>
 800255e:	e014      	b.n	800258a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002560:	f7ff fbae 	bl	8001cc0 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002566:	e00a      	b.n	800257e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002568:	f7ff fbaa 	bl	8001cc0 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e0b5      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257e:	4b3e      	ldr	r3, [pc, #248]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1ee      	bne.n	8002568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d105      	bne.n	800259c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002590:	4b39      	ldr	r3, [pc, #228]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	4a38      	ldr	r2, [pc, #224]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80a1 	beq.w	80026e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025a6:	4b34      	ldr	r3, [pc, #208]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d05c      	beq.n	800266c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d141      	bne.n	800263e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b31      	ldr	r3, [pc, #196]	; (8002680 <HAL_RCC_OscConfig+0x478>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7ff fb7e 	bl	8001cc0 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c8:	f7ff fb7a 	bl	8001cc0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e087      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69da      	ldr	r2, [r3, #28]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	019b      	lsls	r3, r3, #6
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	085b      	lsrs	r3, r3, #1
 80025fe:	3b01      	subs	r3, #1
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	061b      	lsls	r3, r3, #24
 800260a:	491b      	ldr	r1, [pc, #108]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x478>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7ff fb53 	bl	8001cc0 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261e:	f7ff fb4f 	bl	8001cc0 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e05c      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x416>
 800263c:	e054      	b.n	80026e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_RCC_OscConfig+0x478>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7ff fb3c 	bl	8001cc0 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264c:	f7ff fb38 	bl	8001cc0 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e045      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x444>
 800266a:	e03d      	b.n	80026e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d107      	bne.n	8002684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e038      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
 8002678:	40023800 	.word	0x40023800
 800267c:	40007000 	.word	0x40007000
 8002680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_RCC_OscConfig+0x4ec>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d028      	beq.n	80026e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800269c:	429a      	cmp	r2, r3
 800269e:	d121      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d11a      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026b4:	4013      	ands	r3, r2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026bc:	4293      	cmp	r3, r2
 80026be:	d111      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	3b01      	subs	r3, #1
 80026ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d107      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800

080026f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0cc      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800270c:	4b68      	ldr	r3, [pc, #416]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d90c      	bls.n	8002734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b65      	ldr	r3, [pc, #404]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b63      	ldr	r3, [pc, #396]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0b8      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d020      	beq.n	8002782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800274c:	4b59      	ldr	r3, [pc, #356]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a58      	ldr	r2, [pc, #352]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002764:	4b53      	ldr	r3, [pc, #332]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a52      	ldr	r2, [pc, #328]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800276e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002770:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	494d      	ldr	r1, [pc, #308]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d044      	beq.n	8002818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d107      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d119      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e07f      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d003      	beq.n	80027b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b6:	4b3f      	ldr	r3, [pc, #252]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d109      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e06f      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c6:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e067      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d6:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f023 0203 	bic.w	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4934      	ldr	r1, [pc, #208]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e8:	f7ff fa6a 	bl	8001cc0 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7ff fa66 	bl	8001cc0 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e04f      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 020c 	and.w	r2, r3, #12
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	429a      	cmp	r2, r3
 8002816:	d1eb      	bne.n	80027f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002818:	4b25      	ldr	r3, [pc, #148]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d20c      	bcs.n	8002840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e032      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800284c:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4916      	ldr	r1, [pc, #88]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	490e      	ldr	r1, [pc, #56]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800287e:	f000 f821 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 8002882:	4602      	mov	r2, r0
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	490a      	ldr	r1, [pc, #40]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002890:	5ccb      	ldrb	r3, [r1, r3]
 8002892:	fa22 f303 	lsr.w	r3, r2, r3
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff f83a 	bl	8001918 <HAL_InitTick>

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40023c00 	.word	0x40023c00
 80028b4:	40023800 	.word	0x40023800
 80028b8:	0800a760 	.word	0x0800a760
 80028bc:	20000000 	.word	0x20000000
 80028c0:	20000004 	.word	0x20000004

080028c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c8:	b090      	sub	sp, #64	; 0x40
 80028ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34
 80028d0:	2300      	movs	r3, #0
 80028d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d4:	2300      	movs	r3, #0
 80028d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028dc:	4b59      	ldr	r3, [pc, #356]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x180>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d00d      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x40>
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	f200 80a1 	bhi.w	8002a30 <HAL_RCC_GetSysClockFreq+0x16c>
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0x34>
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d003      	beq.n	80028fe <HAL_RCC_GetSysClockFreq+0x3a>
 80028f6:	e09b      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028f8:	4b53      	ldr	r3, [pc, #332]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x184>)
 80028fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80028fc:	e09b      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028fe:	4b53      	ldr	r3, [pc, #332]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002900:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002902:	e098      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002904:	4b4f      	ldr	r3, [pc, #316]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800290c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800290e:	4b4d      	ldr	r3, [pc, #308]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d028      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291a:	4b4a      	ldr	r3, [pc, #296]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x180>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	099b      	lsrs	r3, r3, #6
 8002920:	2200      	movs	r2, #0
 8002922:	623b      	str	r3, [r7, #32]
 8002924:	627a      	str	r2, [r7, #36]	; 0x24
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800292c:	2100      	movs	r1, #0
 800292e:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002930:	fb03 f201 	mul.w	r2, r3, r1
 8002934:	2300      	movs	r3, #0
 8002936:	fb00 f303 	mul.w	r3, r0, r3
 800293a:	4413      	add	r3, r2
 800293c:	4a43      	ldr	r2, [pc, #268]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x188>)
 800293e:	fba0 1202 	umull	r1, r2, r0, r2
 8002942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002944:	460a      	mov	r2, r1
 8002946:	62ba      	str	r2, [r7, #40]	; 0x28
 8002948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800294a:	4413      	add	r3, r2
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800294e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002950:	2200      	movs	r2, #0
 8002952:	61bb      	str	r3, [r7, #24]
 8002954:	61fa      	str	r2, [r7, #28]
 8002956:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800295a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800295e:	f7fe f923 	bl	8000ba8 <__aeabi_uldivmod>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4613      	mov	r3, r2
 8002968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800296a:	e053      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296c:	4b35      	ldr	r3, [pc, #212]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x180>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	099b      	lsrs	r3, r3, #6
 8002972:	2200      	movs	r2, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	617a      	str	r2, [r7, #20]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800297e:	f04f 0b00 	mov.w	fp, #0
 8002982:	4652      	mov	r2, sl
 8002984:	465b      	mov	r3, fp
 8002986:	f04f 0000 	mov.w	r0, #0
 800298a:	f04f 0100 	mov.w	r1, #0
 800298e:	0159      	lsls	r1, r3, #5
 8002990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002994:	0150      	lsls	r0, r2, #5
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	ebb2 080a 	subs.w	r8, r2, sl
 800299e:	eb63 090b 	sbc.w	r9, r3, fp
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029b6:	ebb2 0408 	subs.w	r4, r2, r8
 80029ba:	eb63 0509 	sbc.w	r5, r3, r9
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	00eb      	lsls	r3, r5, #3
 80029c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029cc:	00e2      	lsls	r2, r4, #3
 80029ce:	4614      	mov	r4, r2
 80029d0:	461d      	mov	r5, r3
 80029d2:	eb14 030a 	adds.w	r3, r4, sl
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	eb45 030b 	adc.w	r3, r5, fp
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ea:	4629      	mov	r1, r5
 80029ec:	028b      	lsls	r3, r1, #10
 80029ee:	4621      	mov	r1, r4
 80029f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029f4:	4621      	mov	r1, r4
 80029f6:	028a      	lsls	r2, r1, #10
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fe:	2200      	movs	r2, #0
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	60fa      	str	r2, [r7, #12]
 8002a04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a08:	f7fe f8ce 	bl	8000ba8 <__aeabi_uldivmod>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4613      	mov	r3, r2
 8002a12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	0c1b      	lsrs	r3, r3, #16
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002a24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a2e:	e002      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3740      	adds	r7, #64	; 0x40
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	00f42400 	.word	0x00f42400
 8002a4c:	017d7840 	.word	0x017d7840

08002a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a54:	4b03      	ldr	r3, [pc, #12]	; (8002a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000000 	.word	0x20000000

08002a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a6c:	f7ff fff0 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	0a9b      	lsrs	r3, r3, #10
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4903      	ldr	r1, [pc, #12]	; (8002a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	0800a770 	.word	0x0800a770

08002a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a94:	f7ff ffdc 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	0b5b      	lsrs	r3, r3, #13
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	0800a770 	.word	0x0800a770

08002ab8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	220f      	movs	r2, #15
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ac8:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <HAL_RCC_GetClockConfig+0x5c>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0203 	and.w	r2, r3, #3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	; (8002b14 <HAL_RCC_GetClockConfig+0x5c>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <HAL_RCC_GetClockConfig+0x5c>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <HAL_RCC_GetClockConfig+0x5c>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	08db      	lsrs	r3, r3, #3
 8002af2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002afa:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <HAL_RCC_GetClockConfig+0x60>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0207 	and.w	r2, r3, #7
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	601a      	str	r2, [r3, #0]
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40023c00 	.word	0x40023c00

08002b1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e07b      	b.n	8002c26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d108      	bne.n	8002b48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b3e:	d009      	beq.n	8002b54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	61da      	str	r2, [r3, #28]
 8002b46:	e005      	b.n	8002b54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fe fe42 	bl	80017f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd8:	ea42 0103 	orr.w	r1, r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	0c1b      	lsrs	r3, r3, #16
 8002bf2:	f003 0104 	and.w	r1, r3, #4
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	f003 0210 	and.w	r2, r3, #16
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69da      	ldr	r2, [r3, #28]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b088      	sub	sp, #32
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	603b      	str	r3, [r7, #0]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_SPI_Transmit+0x22>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e126      	b.n	8002e9e <HAL_SPI_Transmit+0x270>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c58:	f7ff f832 	bl	8001cc0 <HAL_GetTick>
 8002c5c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d002      	beq.n	8002c74 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c72:	e10b      	b.n	8002e8c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_SPI_Transmit+0x52>
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c84:	e102      	b.n	8002e8c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2203      	movs	r2, #3
 8002c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	88fa      	ldrh	r2, [r7, #6]
 8002c9e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	88fa      	ldrh	r2, [r7, #6]
 8002ca4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ccc:	d10f      	bne.n	8002cee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf8:	2b40      	cmp	r3, #64	; 0x40
 8002cfa:	d007      	beq.n	8002d0c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d14:	d14b      	bne.n	8002dae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_SPI_Transmit+0xf6>
 8002d1e:	8afb      	ldrh	r3, [r7, #22]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d13e      	bne.n	8002da2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	881a      	ldrh	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	1c9a      	adds	r2, r3, #2
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d48:	e02b      	b.n	8002da2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d112      	bne.n	8002d7e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	881a      	ldrh	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	1c9a      	adds	r2, r3, #2
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d7c:	e011      	b.n	8002da2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d7e:	f7fe ff9f 	bl	8001cc0 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d803      	bhi.n	8002d96 <HAL_SPI_Transmit+0x168>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d94:	d102      	bne.n	8002d9c <HAL_SPI_Transmit+0x16e>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002da0:	e074      	b.n	8002e8c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1ce      	bne.n	8002d4a <HAL_SPI_Transmit+0x11c>
 8002dac:	e04c      	b.n	8002e48 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_SPI_Transmit+0x18e>
 8002db6:	8afb      	ldrh	r3, [r7, #22]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d140      	bne.n	8002e3e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	330c      	adds	r3, #12
 8002dc6:	7812      	ldrb	r2, [r2, #0]
 8002dc8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002de2:	e02c      	b.n	8002e3e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d113      	bne.n	8002e1a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	7812      	ldrb	r2, [r2, #0]
 8002dfe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e18:	e011      	b.n	8002e3e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e1a:	f7fe ff51 	bl	8001cc0 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d803      	bhi.n	8002e32 <HAL_SPI_Transmit+0x204>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d102      	bne.n	8002e38 <HAL_SPI_Transmit+0x20a>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e3c:	e026      	b.n	8002e8c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1cd      	bne.n	8002de4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	6839      	ldr	r1, [r7, #0]
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 fbcb 	bl	80035e8 <SPI_EndRxTxTransaction>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10a      	bne.n	8002e7c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e66:	2300      	movs	r3, #0
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	e000      	b.n	8002e8c <HAL_SPI_Transmit+0x25e>
  }

error:
 8002e8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b088      	sub	sp, #32
 8002eaa:	af02      	add	r7, sp, #8
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	603b      	str	r3, [r7, #0]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ec2:	d112      	bne.n	8002eea <HAL_SPI_Receive+0x44>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10e      	bne.n	8002eea <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2204      	movs	r2, #4
 8002ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ed4:	88fa      	ldrh	r2, [r7, #6]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	4613      	mov	r3, r2
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f8f1 	bl	80030c8 <HAL_SPI_TransmitReceive>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	e0ea      	b.n	80030c0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_SPI_Receive+0x52>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e0e3      	b.n	80030c0 <HAL_SPI_Receive+0x21a>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f00:	f7fe fede 	bl	8001cc0 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d002      	beq.n	8002f18 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002f12:	2302      	movs	r3, #2
 8002f14:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f16:	e0ca      	b.n	80030ae <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <HAL_SPI_Receive+0x7e>
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d102      	bne.n	8002f2a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f28:	e0c1      	b.n	80030ae <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	88fa      	ldrh	r2, [r7, #6]
 8002f42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	88fa      	ldrh	r2, [r7, #6]
 8002f48:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f70:	d10f      	bne.n	8002f92 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f90:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9c:	2b40      	cmp	r3, #64	; 0x40
 8002f9e:	d007      	beq.n	8002fb0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d162      	bne.n	800307e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002fb8:	e02e      	b.n	8003018 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d115      	bne.n	8002ff4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f103 020c 	add.w	r2, r3, #12
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd4:	7812      	ldrb	r2, [r2, #0]
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ff2:	e011      	b.n	8003018 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ff4:	f7fe fe64 	bl	8001cc0 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d803      	bhi.n	800300c <HAL_SPI_Receive+0x166>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300a:	d102      	bne.n	8003012 <HAL_SPI_Receive+0x16c>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003016:	e04a      	b.n	80030ae <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1cb      	bne.n	8002fba <HAL_SPI_Receive+0x114>
 8003022:	e031      	b.n	8003088 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b01      	cmp	r3, #1
 8003030:	d113      	bne.n	800305a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	b292      	uxth	r2, r2
 800303e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	1c9a      	adds	r2, r3, #2
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003058:	e011      	b.n	800307e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800305a:	f7fe fe31 	bl	8001cc0 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d803      	bhi.n	8003072 <HAL_SPI_Receive+0x1cc>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d102      	bne.n	8003078 <HAL_SPI_Receive+0x1d2>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800307c:	e017      	b.n	80030ae <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1cd      	bne.n	8003024 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	6839      	ldr	r1, [r7, #0]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 fa45 	bl	800351c <SPI_EndRxTransaction>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
 80030aa:	e000      	b.n	80030ae <HAL_SPI_Receive+0x208>
  }

error :
 80030ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030be:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08c      	sub	sp, #48	; 0x30
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030d6:	2301      	movs	r3, #1
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x26>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e18a      	b.n	8003404 <HAL_SPI_TransmitReceive+0x33c>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030f6:	f7fe fde3 	bl	8001cc0 <HAL_GetTick>
 80030fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800310c:	887b      	ldrh	r3, [r7, #2]
 800310e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003110:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003114:	2b01      	cmp	r3, #1
 8003116:	d00f      	beq.n	8003138 <HAL_SPI_TransmitReceive+0x70>
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800311e:	d107      	bne.n	8003130 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d103      	bne.n	8003130 <HAL_SPI_TransmitReceive+0x68>
 8003128:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800312c:	2b04      	cmp	r3, #4
 800312e:	d003      	beq.n	8003138 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003130:	2302      	movs	r3, #2
 8003132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003136:	e15b      	b.n	80033f0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_SPI_TransmitReceive+0x82>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HAL_SPI_TransmitReceive+0x82>
 8003144:	887b      	ldrh	r3, [r7, #2]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d103      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003150:	e14e      	b.n	80033f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b04      	cmp	r3, #4
 800315c:	d003      	beq.n	8003166 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2205      	movs	r2, #5
 8003162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	887a      	ldrh	r2, [r7, #2]
 8003176:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	887a      	ldrh	r2, [r7, #2]
 800317c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	887a      	ldrh	r2, [r7, #2]
 8003188:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	887a      	ldrh	r2, [r7, #2]
 800318e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a6:	2b40      	cmp	r3, #64	; 0x40
 80031a8:	d007      	beq.n	80031ba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c2:	d178      	bne.n	80032b6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_SPI_TransmitReceive+0x10a>
 80031cc:	8b7b      	ldrh	r3, [r7, #26]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d166      	bne.n	80032a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	881a      	ldrh	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	1c9a      	adds	r2, r3, #2
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031f6:	e053      	b.n	80032a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b02      	cmp	r3, #2
 8003204:	d11b      	bne.n	800323e <HAL_SPI_TransmitReceive+0x176>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d016      	beq.n	800323e <HAL_SPI_TransmitReceive+0x176>
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	2b01      	cmp	r3, #1
 8003214:	d113      	bne.n	800323e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	881a      	ldrh	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	1c9a      	adds	r2, r3, #2
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d119      	bne.n	8003280 <HAL_SPI_TransmitReceive+0x1b8>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d014      	beq.n	8003280 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003260:	b292      	uxth	r2, r2
 8003262:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	1c9a      	adds	r2, r3, #2
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003272:	b29b      	uxth	r3, r3
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800327c:	2301      	movs	r3, #1
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003280:	f7fe fd1e 	bl	8001cc0 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800328c:	429a      	cmp	r2, r3
 800328e:	d807      	bhi.n	80032a0 <HAL_SPI_TransmitReceive+0x1d8>
 8003290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003296:	d003      	beq.n	80032a0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800329e:	e0a7      	b.n	80033f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1a6      	bne.n	80031f8 <HAL_SPI_TransmitReceive+0x130>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1a1      	bne.n	80031f8 <HAL_SPI_TransmitReceive+0x130>
 80032b4:	e07c      	b.n	80033b0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_SPI_TransmitReceive+0x1fc>
 80032be:	8b7b      	ldrh	r3, [r7, #26]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d16b      	bne.n	800339c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	330c      	adds	r3, #12
 80032ce:	7812      	ldrb	r2, [r2, #0]
 80032d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032ea:	e057      	b.n	800339c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d11c      	bne.n	8003334 <HAL_SPI_TransmitReceive+0x26c>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d017      	beq.n	8003334 <HAL_SPI_TransmitReceive+0x26c>
 8003304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003306:	2b01      	cmp	r3, #1
 8003308:	d114      	bne.n	8003334 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	330c      	adds	r3, #12
 8003314:	7812      	ldrb	r2, [r2, #0]
 8003316:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b01      	cmp	r3, #1
 8003340:	d119      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x2ae>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d014      	beq.n	8003376 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003372:	2301      	movs	r3, #1
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003376:	f7fe fca3 	bl	8001cc0 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003382:	429a      	cmp	r2, r3
 8003384:	d803      	bhi.n	800338e <HAL_SPI_TransmitReceive+0x2c6>
 8003386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d102      	bne.n	8003394 <HAL_SPI_TransmitReceive+0x2cc>
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	2b00      	cmp	r3, #0
 8003392:	d103      	bne.n	800339c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800339a:	e029      	b.n	80033f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1a2      	bne.n	80032ec <HAL_SPI_TransmitReceive+0x224>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d19d      	bne.n	80032ec <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f917 	bl	80035e8 <SPI_EndRxTxTransaction>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d006      	beq.n	80033ce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80033cc:	e010      	b.n	80033f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10b      	bne.n	80033ee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	e000      	b.n	80033f0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003400:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003404:	4618      	mov	r0, r3
 8003406:	3730      	adds	r7, #48	; 0x30
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	4613      	mov	r3, r2
 800341a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800341c:	f7fe fc50 	bl	8001cc0 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003424:	1a9b      	subs	r3, r3, r2
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	4413      	add	r3, r2
 800342a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800342c:	f7fe fc48 	bl	8001cc0 <HAL_GetTick>
 8003430:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003432:	4b39      	ldr	r3, [pc, #228]	; (8003518 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	015b      	lsls	r3, r3, #5
 8003438:	0d1b      	lsrs	r3, r3, #20
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	fb02 f303 	mul.w	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003442:	e054      	b.n	80034ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344a:	d050      	beq.n	80034ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800344c:	f7fe fc38 	bl	8001cc0 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	69fa      	ldr	r2, [r7, #28]
 8003458:	429a      	cmp	r2, r3
 800345a:	d902      	bls.n	8003462 <SPI_WaitFlagStateUntilTimeout+0x56>
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d13d      	bne.n	80034de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003470:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800347a:	d111      	bne.n	80034a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003484:	d004      	beq.n	8003490 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348e:	d107      	bne.n	80034a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800349e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a8:	d10f      	bne.n	80034ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e017      	b.n	800350e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4013      	ands	r3, r2
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	bf0c      	ite	eq
 80034fe:	2301      	moveq	r3, #1
 8003500:	2300      	movne	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	429a      	cmp	r2, r3
 800350a:	d19b      	bne.n	8003444 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3720      	adds	r7, #32
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000000 	.word	0x20000000

0800351c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003530:	d111      	bne.n	8003556 <SPI_EndRxTransaction+0x3a>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800353a:	d004      	beq.n	8003546 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003544:	d107      	bne.n	8003556 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003554:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800355e:	d12a      	bne.n	80035b6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003568:	d012      	beq.n	8003590 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2200      	movs	r2, #0
 8003572:	2180      	movs	r1, #128	; 0x80
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f7ff ff49 	bl	800340c <SPI_WaitFlagStateUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d02d      	beq.n	80035dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003584:	f043 0220 	orr.w	r2, r3, #32
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e026      	b.n	80035de <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2200      	movs	r2, #0
 8003598:	2101      	movs	r1, #1
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f7ff ff36 	bl	800340c <SPI_WaitFlagStateUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d01a      	beq.n	80035dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	f043 0220 	orr.w	r2, r3, #32
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e013      	b.n	80035de <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2200      	movs	r2, #0
 80035be:	2101      	movs	r1, #1
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7ff ff23 	bl	800340c <SPI_WaitFlagStateUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d007      	beq.n	80035dc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e000      	b.n	80035de <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035f4:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <SPI_EndRxTxTransaction+0x7c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1b      	ldr	r2, [pc, #108]	; (8003668 <SPI_EndRxTxTransaction+0x80>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	0d5b      	lsrs	r3, r3, #21
 8003600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003604:	fb02 f303 	mul.w	r3, r2, r3
 8003608:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003612:	d112      	bne.n	800363a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2200      	movs	r2, #0
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f7ff fef4 	bl	800340c <SPI_WaitFlagStateUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d016      	beq.n	8003658 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e00f      	b.n	800365a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	3b01      	subs	r3, #1
 8003644:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003650:	2b80      	cmp	r3, #128	; 0x80
 8003652:	d0f2      	beq.n	800363a <SPI_EndRxTxTransaction+0x52>
 8003654:	e000      	b.n	8003658 <SPI_EndRxTxTransaction+0x70>
        break;
 8003656:	bf00      	nop
  }

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000000 	.word	0x20000000
 8003668:	165e9f81 	.word	0x165e9f81

0800366c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e041      	b.n	8003702 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f839 	bl	800370a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4619      	mov	r1, r3
 80036aa:	4610      	mov	r0, r2
 80036ac:	f000 f9d8 	bl	8003a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b01      	cmp	r3, #1
 8003732:	d001      	beq.n	8003738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e04e      	b.n	80037d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a23      	ldr	r2, [pc, #140]	; (80037e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d022      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003762:	d01d      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1f      	ldr	r2, [pc, #124]	; (80037e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d018      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a1e      	ldr	r2, [pc, #120]	; (80037ec <HAL_TIM_Base_Start_IT+0xcc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d013      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1c      	ldr	r2, [pc, #112]	; (80037f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00e      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a1b      	ldr	r2, [pc, #108]	; (80037f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d009      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a19      	ldr	r2, [pc, #100]	; (80037f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x80>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a18      	ldr	r2, [pc, #96]	; (80037fc <HAL_TIM_Base_Start_IT+0xdc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d111      	bne.n	80037c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b06      	cmp	r3, #6
 80037b0:	d010      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0201 	orr.w	r2, r2, #1
 80037c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c2:	e007      	b.n	80037d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40010000 	.word	0x40010000
 80037e8:	40000400 	.word	0x40000400
 80037ec:	40000800 	.word	0x40000800
 80037f0:	40000c00 	.word	0x40000c00
 80037f4:	40010400 	.word	0x40010400
 80037f8:	40014000 	.word	0x40014000
 80037fc:	40001800 	.word	0x40001800

08003800 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b02      	cmp	r3, #2
 8003814:	d122      	bne.n	800385c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b02      	cmp	r3, #2
 8003822:	d11b      	bne.n	800385c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0202 	mvn.w	r2, #2
 800382c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f8ee 	bl	8003a24 <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f8e0 	bl	8003a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f8f1 	bl	8003a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b04      	cmp	r3, #4
 8003868:	d122      	bne.n	80038b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b04      	cmp	r3, #4
 8003876:	d11b      	bne.n	80038b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0204 	mvn.w	r2, #4
 8003880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2202      	movs	r2, #2
 8003886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f8c4 	bl	8003a24 <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8b6 	bl	8003a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f8c7 	bl	8003a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d122      	bne.n	8003904 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d11b      	bne.n	8003904 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0208 	mvn.w	r2, #8
 80038d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2204      	movs	r2, #4
 80038da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f89a 	bl	8003a24 <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f88c 	bl	8003a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f89d 	bl	8003a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b10      	cmp	r3, #16
 8003910:	d122      	bne.n	8003958 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b10      	cmp	r3, #16
 800391e:	d11b      	bne.n	8003958 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0210 	mvn.w	r2, #16
 8003928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2208      	movs	r2, #8
 800392e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f870 	bl	8003a24 <HAL_TIM_IC_CaptureCallback>
 8003944:	e005      	b.n	8003952 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f862 	bl	8003a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f873 	bl	8003a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b01      	cmp	r3, #1
 8003964:	d10e      	bne.n	8003984 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b01      	cmp	r3, #1
 8003972:	d107      	bne.n	8003984 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0201 	mvn.w	r2, #1
 800397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd fef6 	bl	8001770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398e:	2b80      	cmp	r3, #128	; 0x80
 8003990:	d10e      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b80      	cmp	r3, #128	; 0x80
 800399e:	d107      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f902 	bl	8003bb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ba:	2b40      	cmp	r3, #64	; 0x40
 80039bc:	d10e      	bne.n	80039dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b40      	cmp	r3, #64	; 0x40
 80039ca:	d107      	bne.n	80039dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f838 	bl	8003a4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d10e      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d107      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0220 	mvn.w	r2, #32
 8003a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f8cc 	bl	8003ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a08:	bf00      	nop
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a40      	ldr	r2, [pc, #256]	; (8003b74 <TIM_Base_SetConfig+0x114>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d013      	beq.n	8003aa0 <TIM_Base_SetConfig+0x40>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7e:	d00f      	beq.n	8003aa0 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a3d      	ldr	r2, [pc, #244]	; (8003b78 <TIM_Base_SetConfig+0x118>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00b      	beq.n	8003aa0 <TIM_Base_SetConfig+0x40>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a3c      	ldr	r2, [pc, #240]	; (8003b7c <TIM_Base_SetConfig+0x11c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d007      	beq.n	8003aa0 <TIM_Base_SetConfig+0x40>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a3b      	ldr	r2, [pc, #236]	; (8003b80 <TIM_Base_SetConfig+0x120>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d003      	beq.n	8003aa0 <TIM_Base_SetConfig+0x40>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a3a      	ldr	r2, [pc, #232]	; (8003b84 <TIM_Base_SetConfig+0x124>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d108      	bne.n	8003ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a2f      	ldr	r2, [pc, #188]	; (8003b74 <TIM_Base_SetConfig+0x114>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d02b      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac0:	d027      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a2c      	ldr	r2, [pc, #176]	; (8003b78 <TIM_Base_SetConfig+0x118>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d023      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a2b      	ldr	r2, [pc, #172]	; (8003b7c <TIM_Base_SetConfig+0x11c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01f      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a2a      	ldr	r2, [pc, #168]	; (8003b80 <TIM_Base_SetConfig+0x120>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01b      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a29      	ldr	r2, [pc, #164]	; (8003b84 <TIM_Base_SetConfig+0x124>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d017      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a28      	ldr	r2, [pc, #160]	; (8003b88 <TIM_Base_SetConfig+0x128>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a27      	ldr	r2, [pc, #156]	; (8003b8c <TIM_Base_SetConfig+0x12c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00f      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a26      	ldr	r2, [pc, #152]	; (8003b90 <TIM_Base_SetConfig+0x130>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00b      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a25      	ldr	r2, [pc, #148]	; (8003b94 <TIM_Base_SetConfig+0x134>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a24      	ldr	r2, [pc, #144]	; (8003b98 <TIM_Base_SetConfig+0x138>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d003      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a23      	ldr	r2, [pc, #140]	; (8003b9c <TIM_Base_SetConfig+0x13c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d108      	bne.n	8003b24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <TIM_Base_SetConfig+0x114>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d003      	beq.n	8003b58 <TIM_Base_SetConfig+0xf8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a0c      	ldr	r2, [pc, #48]	; (8003b84 <TIM_Base_SetConfig+0x124>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d103      	bne.n	8003b60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	615a      	str	r2, [r3, #20]
}
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40010000 	.word	0x40010000
 8003b78:	40000400 	.word	0x40000400
 8003b7c:	40000800 	.word	0x40000800
 8003b80:	40000c00 	.word	0x40000c00
 8003b84:	40010400 	.word	0x40010400
 8003b88:	40014000 	.word	0x40014000
 8003b8c:	40014400 	.word	0x40014400
 8003b90:	40014800 	.word	0x40014800
 8003b94:	40001800 	.word	0x40001800
 8003b98:	40001c00 	.word	0x40001c00
 8003b9c:	40002000 	.word	0x40002000

08003ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e03f      	b.n	8003c5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7fd fe4a 	bl	8001888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2224      	movs	r2, #36	; 0x24
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f929 	bl	8003e64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695a      	ldr	r2, [r3, #20]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b08a      	sub	sp, #40	; 0x28
 8003c66:	af02      	add	r7, sp, #8
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	603b      	str	r3, [r7, #0]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d17c      	bne.n	8003d7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <HAL_UART_Transmit+0x2c>
 8003c88:	88fb      	ldrh	r3, [r7, #6]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e075      	b.n	8003d7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_UART_Transmit+0x3e>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e06e      	b.n	8003d7e <HAL_UART_Transmit+0x11c>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2221      	movs	r2, #33	; 0x21
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cb6:	f7fe f803 	bl	8001cc0 <HAL_GetTick>
 8003cba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	88fa      	ldrh	r2, [r7, #6]
 8003cc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	88fa      	ldrh	r2, [r7, #6]
 8003cc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd0:	d108      	bne.n	8003ce4 <HAL_UART_Transmit+0x82>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d104      	bne.n	8003ce4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	e003      	b.n	8003cec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cf4:	e02a      	b.n	8003d4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2180      	movs	r1, #128	; 0x80
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f840 	bl	8003d86 <UART_WaitOnFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e036      	b.n	8003d7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10b      	bne.n	8003d2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	3302      	adds	r3, #2
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	e007      	b.n	8003d3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	781a      	ldrb	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1cf      	bne.n	8003cf6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2140      	movs	r1, #64	; 0x40
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 f810 	bl	8003d86 <UART_WaitOnFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e006      	b.n	8003d7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e000      	b.n	8003d7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d7c:	2302      	movs	r3, #2
  }
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3720      	adds	r7, #32
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b090      	sub	sp, #64	; 0x40
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	603b      	str	r3, [r7, #0]
 8003d92:	4613      	mov	r3, r2
 8003d94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d96:	e050      	b.n	8003e3a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9e:	d04c      	beq.n	8003e3a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d007      	beq.n	8003db6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003da6:	f7fd ff8b 	bl	8001cc0 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d241      	bcs.n	8003e3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dd6:	637a      	str	r2, [r7, #52]	; 0x34
 8003dd8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e5      	bne.n	8003db6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3314      	adds	r3, #20
 8003df0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	613b      	str	r3, [r7, #16]
   return(result);
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3314      	adds	r3, #20
 8003e08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e0a:	623a      	str	r2, [r7, #32]
 8003e0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	69f9      	ldr	r1, [r7, #28]
 8003e10:	6a3a      	ldr	r2, [r7, #32]
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e5      	bne.n	8003dea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e00f      	b.n	8003e5a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4013      	ands	r3, r2
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	bf0c      	ite	eq
 8003e4a:	2301      	moveq	r3, #1
 8003e4c:	2300      	movne	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	461a      	mov	r2, r3
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d09f      	beq.n	8003d98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3740      	adds	r7, #64	; 0x40
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e68:	b0c0      	sub	sp, #256	; 0x100
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e80:	68d9      	ldr	r1, [r3, #12]
 8003e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	ea40 0301 	orr.w	r3, r0, r1
 8003e8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ebc:	f021 010c 	bic.w	r1, r1, #12
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ede:	6999      	ldr	r1, [r3, #24]
 8003ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	ea40 0301 	orr.w	r3, r0, r1
 8003eea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4b8f      	ldr	r3, [pc, #572]	; (8004130 <UART_SetConfig+0x2cc>)
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d005      	beq.n	8003f04 <UART_SetConfig+0xa0>
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	4b8d      	ldr	r3, [pc, #564]	; (8004134 <UART_SetConfig+0x2d0>)
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d104      	bne.n	8003f0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f04:	f7fe fdc4 	bl	8002a90 <HAL_RCC_GetPCLK2Freq>
 8003f08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f0c:	e003      	b.n	8003f16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f0e:	f7fe fdab 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 8003f12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f20:	f040 810c 	bne.w	800413c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f36:	4622      	mov	r2, r4
 8003f38:	462b      	mov	r3, r5
 8003f3a:	1891      	adds	r1, r2, r2
 8003f3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f3e:	415b      	adcs	r3, r3
 8003f40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f46:	4621      	mov	r1, r4
 8003f48:	eb12 0801 	adds.w	r8, r2, r1
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	eb43 0901 	adc.w	r9, r3, r1
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f66:	4690      	mov	r8, r2
 8003f68:	4699      	mov	r9, r3
 8003f6a:	4623      	mov	r3, r4
 8003f6c:	eb18 0303 	adds.w	r3, r8, r3
 8003f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f74:	462b      	mov	r3, r5
 8003f76:	eb49 0303 	adc.w	r3, r9, r3
 8003f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f92:	460b      	mov	r3, r1
 8003f94:	18db      	adds	r3, r3, r3
 8003f96:	653b      	str	r3, [r7, #80]	; 0x50
 8003f98:	4613      	mov	r3, r2
 8003f9a:	eb42 0303 	adc.w	r3, r2, r3
 8003f9e:	657b      	str	r3, [r7, #84]	; 0x54
 8003fa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fa4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fa8:	f7fc fdfe 	bl	8000ba8 <__aeabi_uldivmod>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4b61      	ldr	r3, [pc, #388]	; (8004138 <UART_SetConfig+0x2d4>)
 8003fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	011c      	lsls	r4, r3, #4
 8003fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fcc:	4642      	mov	r2, r8
 8003fce:	464b      	mov	r3, r9
 8003fd0:	1891      	adds	r1, r2, r2
 8003fd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fd4:	415b      	adcs	r3, r3
 8003fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fdc:	4641      	mov	r1, r8
 8003fde:	eb12 0a01 	adds.w	sl, r2, r1
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	eb43 0b01 	adc.w	fp, r3, r1
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ff4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ffc:	4692      	mov	sl, r2
 8003ffe:	469b      	mov	fp, r3
 8004000:	4643      	mov	r3, r8
 8004002:	eb1a 0303 	adds.w	r3, sl, r3
 8004006:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800400a:	464b      	mov	r3, r9
 800400c:	eb4b 0303 	adc.w	r3, fp, r3
 8004010:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004020:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004024:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004028:	460b      	mov	r3, r1
 800402a:	18db      	adds	r3, r3, r3
 800402c:	643b      	str	r3, [r7, #64]	; 0x40
 800402e:	4613      	mov	r3, r2
 8004030:	eb42 0303 	adc.w	r3, r2, r3
 8004034:	647b      	str	r3, [r7, #68]	; 0x44
 8004036:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800403a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800403e:	f7fc fdb3 	bl	8000ba8 <__aeabi_uldivmod>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4611      	mov	r1, r2
 8004048:	4b3b      	ldr	r3, [pc, #236]	; (8004138 <UART_SetConfig+0x2d4>)
 800404a:	fba3 2301 	umull	r2, r3, r3, r1
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	2264      	movs	r2, #100	; 0x64
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	1acb      	subs	r3, r1, r3
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800405e:	4b36      	ldr	r3, [pc, #216]	; (8004138 <UART_SetConfig+0x2d4>)
 8004060:	fba3 2302 	umull	r2, r3, r3, r2
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800406c:	441c      	add	r4, r3
 800406e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004072:	2200      	movs	r2, #0
 8004074:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004078:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800407c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004080:	4642      	mov	r2, r8
 8004082:	464b      	mov	r3, r9
 8004084:	1891      	adds	r1, r2, r2
 8004086:	63b9      	str	r1, [r7, #56]	; 0x38
 8004088:	415b      	adcs	r3, r3
 800408a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800408c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004090:	4641      	mov	r1, r8
 8004092:	1851      	adds	r1, r2, r1
 8004094:	6339      	str	r1, [r7, #48]	; 0x30
 8004096:	4649      	mov	r1, r9
 8004098:	414b      	adcs	r3, r1
 800409a:	637b      	str	r3, [r7, #52]	; 0x34
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040a8:	4659      	mov	r1, fp
 80040aa:	00cb      	lsls	r3, r1, #3
 80040ac:	4651      	mov	r1, sl
 80040ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040b2:	4651      	mov	r1, sl
 80040b4:	00ca      	lsls	r2, r1, #3
 80040b6:	4610      	mov	r0, r2
 80040b8:	4619      	mov	r1, r3
 80040ba:	4603      	mov	r3, r0
 80040bc:	4642      	mov	r2, r8
 80040be:	189b      	adds	r3, r3, r2
 80040c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040c4:	464b      	mov	r3, r9
 80040c6:	460a      	mov	r2, r1
 80040c8:	eb42 0303 	adc.w	r3, r2, r3
 80040cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040e4:	460b      	mov	r3, r1
 80040e6:	18db      	adds	r3, r3, r3
 80040e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ea:	4613      	mov	r3, r2
 80040ec:	eb42 0303 	adc.w	r3, r2, r3
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040fa:	f7fc fd55 	bl	8000ba8 <__aeabi_uldivmod>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <UART_SetConfig+0x2d4>)
 8004104:	fba3 1302 	umull	r1, r3, r3, r2
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	2164      	movs	r1, #100	; 0x64
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	3332      	adds	r3, #50	; 0x32
 8004116:	4a08      	ldr	r2, [pc, #32]	; (8004138 <UART_SetConfig+0x2d4>)
 8004118:	fba2 2303 	umull	r2, r3, r2, r3
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	f003 0207 	and.w	r2, r3, #7
 8004122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4422      	add	r2, r4
 800412a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800412c:	e105      	b.n	800433a <UART_SetConfig+0x4d6>
 800412e:	bf00      	nop
 8004130:	40011000 	.word	0x40011000
 8004134:	40011400 	.word	0x40011400
 8004138:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800413c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004140:	2200      	movs	r2, #0
 8004142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004146:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800414a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800414e:	4642      	mov	r2, r8
 8004150:	464b      	mov	r3, r9
 8004152:	1891      	adds	r1, r2, r2
 8004154:	6239      	str	r1, [r7, #32]
 8004156:	415b      	adcs	r3, r3
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
 800415a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800415e:	4641      	mov	r1, r8
 8004160:	1854      	adds	r4, r2, r1
 8004162:	4649      	mov	r1, r9
 8004164:	eb43 0501 	adc.w	r5, r3, r1
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	00eb      	lsls	r3, r5, #3
 8004172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004176:	00e2      	lsls	r2, r4, #3
 8004178:	4614      	mov	r4, r2
 800417a:	461d      	mov	r5, r3
 800417c:	4643      	mov	r3, r8
 800417e:	18e3      	adds	r3, r4, r3
 8004180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004184:	464b      	mov	r3, r9
 8004186:	eb45 0303 	adc.w	r3, r5, r3
 800418a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800418e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800419a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041aa:	4629      	mov	r1, r5
 80041ac:	008b      	lsls	r3, r1, #2
 80041ae:	4621      	mov	r1, r4
 80041b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041b4:	4621      	mov	r1, r4
 80041b6:	008a      	lsls	r2, r1, #2
 80041b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041bc:	f7fc fcf4 	bl	8000ba8 <__aeabi_uldivmod>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4b60      	ldr	r3, [pc, #384]	; (8004348 <UART_SetConfig+0x4e4>)
 80041c6:	fba3 2302 	umull	r2, r3, r3, r2
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	011c      	lsls	r4, r3, #4
 80041ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041e0:	4642      	mov	r2, r8
 80041e2:	464b      	mov	r3, r9
 80041e4:	1891      	adds	r1, r2, r2
 80041e6:	61b9      	str	r1, [r7, #24]
 80041e8:	415b      	adcs	r3, r3
 80041ea:	61fb      	str	r3, [r7, #28]
 80041ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041f0:	4641      	mov	r1, r8
 80041f2:	1851      	adds	r1, r2, r1
 80041f4:	6139      	str	r1, [r7, #16]
 80041f6:	4649      	mov	r1, r9
 80041f8:	414b      	adcs	r3, r1
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004208:	4659      	mov	r1, fp
 800420a:	00cb      	lsls	r3, r1, #3
 800420c:	4651      	mov	r1, sl
 800420e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004212:	4651      	mov	r1, sl
 8004214:	00ca      	lsls	r2, r1, #3
 8004216:	4610      	mov	r0, r2
 8004218:	4619      	mov	r1, r3
 800421a:	4603      	mov	r3, r0
 800421c:	4642      	mov	r2, r8
 800421e:	189b      	adds	r3, r3, r2
 8004220:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004224:	464b      	mov	r3, r9
 8004226:	460a      	mov	r2, r1
 8004228:	eb42 0303 	adc.w	r3, r2, r3
 800422c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	67bb      	str	r3, [r7, #120]	; 0x78
 800423a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004248:	4649      	mov	r1, r9
 800424a:	008b      	lsls	r3, r1, #2
 800424c:	4641      	mov	r1, r8
 800424e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004252:	4641      	mov	r1, r8
 8004254:	008a      	lsls	r2, r1, #2
 8004256:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800425a:	f7fc fca5 	bl	8000ba8 <__aeabi_uldivmod>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4b39      	ldr	r3, [pc, #228]	; (8004348 <UART_SetConfig+0x4e4>)
 8004264:	fba3 1302 	umull	r1, r3, r3, r2
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	2164      	movs	r1, #100	; 0x64
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	3332      	adds	r3, #50	; 0x32
 8004276:	4a34      	ldr	r2, [pc, #208]	; (8004348 <UART_SetConfig+0x4e4>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004282:	441c      	add	r4, r3
 8004284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004288:	2200      	movs	r2, #0
 800428a:	673b      	str	r3, [r7, #112]	; 0x70
 800428c:	677a      	str	r2, [r7, #116]	; 0x74
 800428e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004292:	4642      	mov	r2, r8
 8004294:	464b      	mov	r3, r9
 8004296:	1891      	adds	r1, r2, r2
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	415b      	adcs	r3, r3
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042a2:	4641      	mov	r1, r8
 80042a4:	1851      	adds	r1, r2, r1
 80042a6:	6039      	str	r1, [r7, #0]
 80042a8:	4649      	mov	r1, r9
 80042aa:	414b      	adcs	r3, r1
 80042ac:	607b      	str	r3, [r7, #4]
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	f04f 0300 	mov.w	r3, #0
 80042b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042ba:	4659      	mov	r1, fp
 80042bc:	00cb      	lsls	r3, r1, #3
 80042be:	4651      	mov	r1, sl
 80042c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042c4:	4651      	mov	r1, sl
 80042c6:	00ca      	lsls	r2, r1, #3
 80042c8:	4610      	mov	r0, r2
 80042ca:	4619      	mov	r1, r3
 80042cc:	4603      	mov	r3, r0
 80042ce:	4642      	mov	r2, r8
 80042d0:	189b      	adds	r3, r3, r2
 80042d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80042d4:	464b      	mov	r3, r9
 80042d6:	460a      	mov	r2, r1
 80042d8:	eb42 0303 	adc.w	r3, r2, r3
 80042dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	663b      	str	r3, [r7, #96]	; 0x60
 80042e8:	667a      	str	r2, [r7, #100]	; 0x64
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042f6:	4649      	mov	r1, r9
 80042f8:	008b      	lsls	r3, r1, #2
 80042fa:	4641      	mov	r1, r8
 80042fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004300:	4641      	mov	r1, r8
 8004302:	008a      	lsls	r2, r1, #2
 8004304:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004308:	f7fc fc4e 	bl	8000ba8 <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4b0d      	ldr	r3, [pc, #52]	; (8004348 <UART_SetConfig+0x4e4>)
 8004312:	fba3 1302 	umull	r1, r3, r3, r2
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	2164      	movs	r1, #100	; 0x64
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	3332      	adds	r3, #50	; 0x32
 8004324:	4a08      	ldr	r2, [pc, #32]	; (8004348 <UART_SetConfig+0x4e4>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	f003 020f 	and.w	r2, r3, #15
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4422      	add	r2, r4
 8004338:	609a      	str	r2, [r3, #8]
}
 800433a:	bf00      	nop
 800433c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004340:	46bd      	mov	sp, r7
 8004342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004346:	bf00      	nop
 8004348:	51eb851f 	.word	0x51eb851f

0800434c <__NVIC_SetPriority>:
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	6039      	str	r1, [r7, #0]
 8004356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435c:	2b00      	cmp	r3, #0
 800435e:	db0a      	blt.n	8004376 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	b2da      	uxtb	r2, r3
 8004364:	490c      	ldr	r1, [pc, #48]	; (8004398 <__NVIC_SetPriority+0x4c>)
 8004366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436a:	0112      	lsls	r2, r2, #4
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	440b      	add	r3, r1
 8004370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004374:	e00a      	b.n	800438c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	b2da      	uxtb	r2, r3
 800437a:	4908      	ldr	r1, [pc, #32]	; (800439c <__NVIC_SetPriority+0x50>)
 800437c:	79fb      	ldrb	r3, [r7, #7]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	3b04      	subs	r3, #4
 8004384:	0112      	lsls	r2, r2, #4
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	440b      	add	r3, r1
 800438a:	761a      	strb	r2, [r3, #24]
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	e000e100 	.word	0xe000e100
 800439c:	e000ed00 	.word	0xe000ed00

080043a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <SysTick_Handler+0x1c>)
 80043a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80043a8:	f001 fee8 	bl	800617c <xTaskGetSchedulerState>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d001      	beq.n	80043b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80043b2:	f002 fcd1 	bl	8006d58 <xPortSysTickHandler>
  }
}
 80043b6:	bf00      	nop
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	e000e010 	.word	0xe000e010

080043c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80043c4:	2100      	movs	r1, #0
 80043c6:	f06f 0004 	mvn.w	r0, #4
 80043ca:	f7ff ffbf 	bl	800434c <__NVIC_SetPriority>
#endif
}
 80043ce:	bf00      	nop
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043da:	f3ef 8305 	mrs	r3, IPSR
 80043de:	603b      	str	r3, [r7, #0]
  return(result);
 80043e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80043e6:	f06f 0305 	mvn.w	r3, #5
 80043ea:	607b      	str	r3, [r7, #4]
 80043ec:	e00c      	b.n	8004408 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80043ee:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <osKernelInitialize+0x44>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d105      	bne.n	8004402 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80043f6:	4b08      	ldr	r3, [pc, #32]	; (8004418 <osKernelInitialize+0x44>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	607b      	str	r3, [r7, #4]
 8004400:	e002      	b.n	8004408 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004402:	f04f 33ff 	mov.w	r3, #4294967295
 8004406:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004408:	687b      	ldr	r3, [r7, #4]
}
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20000b90 	.word	0x20000b90

0800441c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004422:	f3ef 8305 	mrs	r3, IPSR
 8004426:	603b      	str	r3, [r7, #0]
  return(result);
 8004428:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <osKernelStart+0x1a>
    stat = osErrorISR;
 800442e:	f06f 0305 	mvn.w	r3, #5
 8004432:	607b      	str	r3, [r7, #4]
 8004434:	e010      	b.n	8004458 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004436:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <osKernelStart+0x48>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d109      	bne.n	8004452 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800443e:	f7ff ffbf 	bl	80043c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004442:	4b08      	ldr	r3, [pc, #32]	; (8004464 <osKernelStart+0x48>)
 8004444:	2202      	movs	r2, #2
 8004446:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004448:	f001 fa50 	bl	80058ec <vTaskStartScheduler>
      stat = osOK;
 800444c:	2300      	movs	r3, #0
 800444e:	607b      	str	r3, [r7, #4]
 8004450:	e002      	b.n	8004458 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295
 8004456:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004458:	687b      	ldr	r3, [r7, #4]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20000b90 	.word	0x20000b90

08004468 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004468:	b580      	push	{r7, lr}
 800446a:	b08e      	sub	sp, #56	; 0x38
 800446c:	af04      	add	r7, sp, #16
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004474:	2300      	movs	r3, #0
 8004476:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004478:	f3ef 8305 	mrs	r3, IPSR
 800447c:	617b      	str	r3, [r7, #20]
  return(result);
 800447e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004480:	2b00      	cmp	r3, #0
 8004482:	d17e      	bne.n	8004582 <osThreadNew+0x11a>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d07b      	beq.n	8004582 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800448a:	2380      	movs	r3, #128	; 0x80
 800448c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800448e:	2318      	movs	r3, #24
 8004490:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004492:	2300      	movs	r3, #0
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004496:	f04f 33ff 	mov.w	r3, #4294967295
 800449a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d045      	beq.n	800452e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <osThreadNew+0x48>
        name = attr->name;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d008      	beq.n	80044d6 <osThreadNew+0x6e>
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	2b38      	cmp	r3, #56	; 0x38
 80044c8:	d805      	bhi.n	80044d6 <osThreadNew+0x6e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <osThreadNew+0x72>
        return (NULL);
 80044d6:	2300      	movs	r3, #0
 80044d8:	e054      	b.n	8004584 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	089b      	lsrs	r3, r3, #2
 80044e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00e      	beq.n	8004510 <osThreadNew+0xa8>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b5b      	cmp	r3, #91	; 0x5b
 80044f8:	d90a      	bls.n	8004510 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d006      	beq.n	8004510 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <osThreadNew+0xa8>
        mem = 1;
 800450a:	2301      	movs	r3, #1
 800450c:	61bb      	str	r3, [r7, #24]
 800450e:	e010      	b.n	8004532 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10c      	bne.n	8004532 <osThreadNew+0xca>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d108      	bne.n	8004532 <osThreadNew+0xca>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d104      	bne.n	8004532 <osThreadNew+0xca>
          mem = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	e001      	b.n	8004532 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d110      	bne.n	800455a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004540:	9202      	str	r2, [sp, #8]
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	6a3a      	ldr	r2, [r7, #32]
 800454c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fff6 	bl	8005540 <xTaskCreateStatic>
 8004554:	4603      	mov	r3, r0
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	e013      	b.n	8004582 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d110      	bne.n	8004582 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	b29a      	uxth	r2, r3
 8004564:	f107 0310 	add.w	r3, r7, #16
 8004568:	9301      	str	r3, [sp, #4]
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f001 f841 	bl	80055fa <xTaskCreate>
 8004578:	4603      	mov	r3, r0
 800457a:	2b01      	cmp	r3, #1
 800457c:	d001      	beq.n	8004582 <osThreadNew+0x11a>
            hTask = NULL;
 800457e:	2300      	movs	r3, #0
 8004580:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004582:	693b      	ldr	r3, [r7, #16]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3728      	adds	r7, #40	; 0x28
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004594:	f3ef 8305 	mrs	r3, IPSR
 8004598:	60bb      	str	r3, [r7, #8]
  return(result);
 800459a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <osDelay+0x1c>
    stat = osErrorISR;
 80045a0:	f06f 0305 	mvn.w	r3, #5
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	e007      	b.n	80045b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f001 f966 	bl	8005884 <vTaskDelay>
    }
  }

  return (stat);
 80045b8:	68fb      	ldr	r3, [r7, #12]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b08a      	sub	sp, #40	; 0x28
 80045c6:	af02      	add	r7, sp, #8
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045d2:	f3ef 8305 	mrs	r3, IPSR
 80045d6:	613b      	str	r3, [r7, #16]
  return(result);
 80045d8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d15f      	bne.n	800469e <osMessageQueueNew+0xdc>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d05c      	beq.n	800469e <osMessageQueueNew+0xdc>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d059      	beq.n	800469e <osMessageQueueNew+0xdc>
    mem = -1;
 80045ea:	f04f 33ff 	mov.w	r3, #4294967295
 80045ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d029      	beq.n	800464a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d012      	beq.n	8004624 <osMessageQueueNew+0x62>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	2b4f      	cmp	r3, #79	; 0x4f
 8004604:	d90e      	bls.n	8004624 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695a      	ldr	r2, [r3, #20]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	68b9      	ldr	r1, [r7, #8]
 8004616:	fb01 f303 	mul.w	r3, r1, r3
 800461a:	429a      	cmp	r2, r3
 800461c:	d302      	bcc.n	8004624 <osMessageQueueNew+0x62>
        mem = 1;
 800461e:	2301      	movs	r3, #1
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	e014      	b.n	800464e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d110      	bne.n	800464e <osMessageQueueNew+0x8c>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10c      	bne.n	800464e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004638:	2b00      	cmp	r3, #0
 800463a:	d108      	bne.n	800464e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d104      	bne.n	800464e <osMessageQueueNew+0x8c>
          mem = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	61bb      	str	r3, [r7, #24]
 8004648:	e001      	b.n	800464e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800464a:	2300      	movs	r3, #0
 800464c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d10b      	bne.n	800466c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2100      	movs	r1, #0
 800465e:	9100      	str	r1, [sp, #0]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 fa2e 	bl	8004ac4 <xQueueGenericCreateStatic>
 8004668:	61f8      	str	r0, [r7, #28]
 800466a:	e008      	b.n	800467e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d105      	bne.n	800467e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004672:	2200      	movs	r2, #0
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 fa9c 	bl	8004bb4 <xQueueGenericCreate>
 800467c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00c      	beq.n	800469e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <osMessageQueueNew+0xd0>
        name = attr->name;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	e001      	b.n	8004696 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004696:	6979      	ldr	r1, [r7, #20]
 8004698:	69f8      	ldr	r0, [r7, #28]
 800469a:	f000 fef3 	bl	8005484 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800469e:	69fb      	ldr	r3, [r7, #28]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3720      	adds	r7, #32
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80046bc:	2300      	movs	r3, #0
 80046be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046c0:	f3ef 8305 	mrs	r3, IPSR
 80046c4:	617b      	str	r3, [r7, #20]
  return(result);
 80046c6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d028      	beq.n	800471e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <osMessageQueuePut+0x36>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <osMessageQueuePut+0x36>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80046de:	f06f 0303 	mvn.w	r3, #3
 80046e2:	61fb      	str	r3, [r7, #28]
 80046e4:	e038      	b.n	8004758 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80046ea:	f107 0210 	add.w	r2, r7, #16
 80046ee:	2300      	movs	r3, #0
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	69b8      	ldr	r0, [r7, #24]
 80046f4:	f000 fbba 	bl	8004e6c <xQueueGenericSendFromISR>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d003      	beq.n	8004706 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80046fe:	f06f 0302 	mvn.w	r3, #2
 8004702:	61fb      	str	r3, [r7, #28]
 8004704:	e028      	b.n	8004758 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d025      	beq.n	8004758 <osMessageQueuePut+0xb0>
 800470c:	4b15      	ldr	r3, [pc, #84]	; (8004764 <osMessageQueuePut+0xbc>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	e01c      	b.n	8004758 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <osMessageQueuePut+0x82>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800472a:	f06f 0303 	mvn.w	r3, #3
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	e012      	b.n	8004758 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004732:	2300      	movs	r3, #0
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	68b9      	ldr	r1, [r7, #8]
 8004738:	69b8      	ldr	r0, [r7, #24]
 800473a:	f000 fa99 	bl	8004c70 <xQueueGenericSend>
 800473e:	4603      	mov	r3, r0
 8004740:	2b01      	cmp	r3, #1
 8004742:	d009      	beq.n	8004758 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800474a:	f06f 0301 	mvn.w	r3, #1
 800474e:	61fb      	str	r3, [r7, #28]
 8004750:	e002      	b.n	8004758 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004752:	f06f 0302 	mvn.w	r3, #2
 8004756:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004758:	69fb      	ldr	r3, [r7, #28]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800477e:	f3ef 8305 	mrs	r3, IPSR
 8004782:	617b      	str	r3, [r7, #20]
  return(result);
 8004784:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004786:	2b00      	cmp	r3, #0
 8004788:	d028      	beq.n	80047dc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <osMessageQueueGet+0x34>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <osMessageQueueGet+0x34>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800479c:	f06f 0303 	mvn.w	r3, #3
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	e037      	b.n	8004814 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80047a8:	f107 0310 	add.w	r3, r7, #16
 80047ac:	461a      	mov	r2, r3
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	69b8      	ldr	r0, [r7, #24]
 80047b2:	f000 fcd7 	bl	8005164 <xQueueReceiveFromISR>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d003      	beq.n	80047c4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80047bc:	f06f 0302 	mvn.w	r3, #2
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	e027      	b.n	8004814 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d024      	beq.n	8004814 <osMessageQueueGet+0xac>
 80047ca:	4b15      	ldr	r3, [pc, #84]	; (8004820 <osMessageQueueGet+0xb8>)
 80047cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	e01b      	b.n	8004814 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <osMessageQueueGet+0x80>
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d103      	bne.n	80047f0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80047e8:	f06f 0303 	mvn.w	r3, #3
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	e011      	b.n	8004814 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	69b8      	ldr	r0, [r7, #24]
 80047f6:	f000 fbd5 	bl	8004fa4 <xQueueReceive>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d009      	beq.n	8004814 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004806:	f06f 0301 	mvn.w	r3, #1
 800480a:	61fb      	str	r3, [r7, #28]
 800480c:	e002      	b.n	8004814 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800480e:	f06f 0302 	mvn.w	r3, #2
 8004812:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004814:	69fb      	ldr	r3, [r7, #28]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3720      	adds	r7, #32
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4a07      	ldr	r2, [pc, #28]	; (8004850 <vApplicationGetIdleTaskMemory+0x2c>)
 8004834:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4a06      	ldr	r2, [pc, #24]	; (8004854 <vApplicationGetIdleTaskMemory+0x30>)
 800483a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2280      	movs	r2, #128	; 0x80
 8004840:	601a      	str	r2, [r3, #0]
}
 8004842:	bf00      	nop
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000b94 	.word	0x20000b94
 8004854:	20000bf0 	.word	0x20000bf0

08004858 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4a07      	ldr	r2, [pc, #28]	; (8004884 <vApplicationGetTimerTaskMemory+0x2c>)
 8004868:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4a06      	ldr	r2, [pc, #24]	; (8004888 <vApplicationGetTimerTaskMemory+0x30>)
 800486e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004876:	601a      	str	r2, [r3, #0]
}
 8004878:	bf00      	nop
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	20000df0 	.word	0x20000df0
 8004888:	20000e4c 	.word	0x20000e4c

0800488c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f103 0208 	add.w	r2, r3, #8
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f04f 32ff 	mov.w	r2, #4294967295
 80048a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f103 0208 	add.w	r2, r3, #8
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f103 0208 	add.w	r2, r3, #8
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048e6:	b480      	push	{r7}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	601a      	str	r2, [r3, #0]
}
 8004922:	bf00      	nop
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d103      	bne.n	800494e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	e00c      	b.n	8004968 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3308      	adds	r3, #8
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	e002      	b.n	800495c <vListInsert+0x2e>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	429a      	cmp	r2, r3
 8004966:	d2f6      	bcs.n	8004956 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	601a      	str	r2, [r3, #0]
}
 8004994:	bf00      	nop
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6892      	ldr	r2, [r2, #8]
 80049b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6852      	ldr	r2, [r2, #4]
 80049c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d103      	bne.n	80049d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	1e5a      	subs	r2, r3, #1
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a1a:	bf00      	nop
 8004a1c:	e7fe      	b.n	8004a1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a1e:	f002 f909 	bl	8006c34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2a:	68f9      	ldr	r1, [r7, #12]
 8004a2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	441a      	add	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	68f9      	ldr	r1, [r7, #12]
 8004a52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	441a      	add	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	22ff      	movs	r2, #255	; 0xff
 8004a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	22ff      	movs	r2, #255	; 0xff
 8004a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d114      	bne.n	8004a9e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01a      	beq.n	8004ab2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3310      	adds	r3, #16
 8004a80:	4618      	mov	r0, r3
 8004a82:	f001 f9bd 	bl	8005e00 <xTaskRemoveFromEventList>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d012      	beq.n	8004ab2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <xQueueGenericReset+0xcc>)
 8004a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	e009      	b.n	8004ab2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3310      	adds	r3, #16
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff fef2 	bl	800488c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3324      	adds	r3, #36	; 0x24
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff feed 	bl	800488c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ab2:	f002 f8ef 	bl	8006c94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ab6:	2301      	movs	r3, #1
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	e000ed04 	.word	0xe000ed04

08004ac4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08e      	sub	sp, #56	; 0x38
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10a      	bne.n	8004aee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004aea:	bf00      	nop
 8004aec:	e7fe      	b.n	8004aec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10a      	bne.n	8004b0a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <xQueueGenericCreateStatic+0x52>
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <xQueueGenericCreateStatic+0x56>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <xQueueGenericCreateStatic+0x58>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	623b      	str	r3, [r7, #32]
}
 8004b32:	bf00      	nop
 8004b34:	e7fe      	b.n	8004b34 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d102      	bne.n	8004b42 <xQueueGenericCreateStatic+0x7e>
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <xQueueGenericCreateStatic+0x82>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <xQueueGenericCreateStatic+0x84>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	61fb      	str	r3, [r7, #28]
}
 8004b5e:	bf00      	nop
 8004b60:	e7fe      	b.n	8004b60 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b62:	2350      	movs	r3, #80	; 0x50
 8004b64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b50      	cmp	r3, #80	; 0x50
 8004b6a:	d00a      	beq.n	8004b82 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	61bb      	str	r3, [r7, #24]
}
 8004b7e:	bf00      	nop
 8004b80:	e7fe      	b.n	8004b80 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b82:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00d      	beq.n	8004baa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b96:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f83f 	bl	8004c28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3730      	adds	r7, #48	; 0x30
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	; 0x28
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <xQueueGenericCreate+0x2a>
	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	613b      	str	r3, [r7, #16]
}
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	fb02 f303 	mul.w	r3, r2, r3
 8004be6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	3350      	adds	r3, #80	; 0x50
 8004bec:	4618      	mov	r0, r3
 8004bee:	f002 f943 	bl	8006e78 <pvPortMalloc>
 8004bf2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d011      	beq.n	8004c1e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	3350      	adds	r3, #80	; 0x50
 8004c02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c0c:	79fa      	ldrb	r2, [r7, #7]
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	4613      	mov	r3, r2
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f805 	bl	8004c28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c1e:	69bb      	ldr	r3, [r7, #24]
	}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3720      	adds	r7, #32
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d103      	bne.n	8004c44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	e002      	b.n	8004c4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c56:	2101      	movs	r1, #1
 8004c58:	69b8      	ldr	r0, [r7, #24]
 8004c5a:	f7ff fecb 	bl	80049f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	78fa      	ldrb	r2, [r7, #3]
 8004c62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c66:	bf00      	nop
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
	...

08004c70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08e      	sub	sp, #56	; 0x38
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10a      	bne.n	8004ca2 <xQueueGenericSend+0x32>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c9e:	bf00      	nop
 8004ca0:	e7fe      	b.n	8004ca0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d103      	bne.n	8004cb0 <xQueueGenericSend+0x40>
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <xQueueGenericSend+0x44>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <xQueueGenericSend+0x46>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10a      	bne.n	8004cd0 <xQueueGenericSend+0x60>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ccc:	bf00      	nop
 8004cce:	e7fe      	b.n	8004cce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d103      	bne.n	8004cde <xQueueGenericSend+0x6e>
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <xQueueGenericSend+0x72>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <xQueueGenericSend+0x74>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <xQueueGenericSend+0x8e>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	623b      	str	r3, [r7, #32]
}
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cfe:	f001 fa3d 	bl	800617c <xTaskGetSchedulerState>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d102      	bne.n	8004d0e <xQueueGenericSend+0x9e>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <xQueueGenericSend+0xa2>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <xQueueGenericSend+0xa4>
 8004d12:	2300      	movs	r3, #0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <xQueueGenericSend+0xbe>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	61fb      	str	r3, [r7, #28]
}
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d2e:	f001 ff81 	bl	8006c34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d302      	bcc.n	8004d44 <xQueueGenericSend+0xd4>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d129      	bne.n	8004d98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	68b9      	ldr	r1, [r7, #8]
 8004d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d4a:	f000 fa8b 	bl	8005264 <prvCopyDataToQueue>
 8004d4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d010      	beq.n	8004d7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	3324      	adds	r3, #36	; 0x24
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f001 f84f 	bl	8005e00 <xTaskRemoveFromEventList>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d013      	beq.n	8004d90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d68:	4b3f      	ldr	r3, [pc, #252]	; (8004e68 <xQueueGenericSend+0x1f8>)
 8004d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	e00a      	b.n	8004d90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d007      	beq.n	8004d90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d80:	4b39      	ldr	r3, [pc, #228]	; (8004e68 <xQueueGenericSend+0x1f8>)
 8004d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d90:	f001 ff80 	bl	8006c94 <vPortExitCritical>
				return pdPASS;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e063      	b.n	8004e60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d103      	bne.n	8004da6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d9e:	f001 ff79 	bl	8006c94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	e05c      	b.n	8004e60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d106      	bne.n	8004dba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dac:	f107 0314 	add.w	r3, r7, #20
 8004db0:	4618      	mov	r0, r3
 8004db2:	f001 f889 	bl	8005ec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004db6:	2301      	movs	r3, #1
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dba:	f001 ff6b 	bl	8006c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dbe:	f000 fdfb 	bl	80059b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dc2:	f001 ff37 	bl	8006c34 <vPortEnterCritical>
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dcc:	b25b      	sxtb	r3, r3
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd2:	d103      	bne.n	8004ddc <xQueueGenericSend+0x16c>
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004de2:	b25b      	sxtb	r3, r3
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de8:	d103      	bne.n	8004df2 <xQueueGenericSend+0x182>
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004df2:	f001 ff4f 	bl	8006c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004df6:	1d3a      	adds	r2, r7, #4
 8004df8:	f107 0314 	add.w	r3, r7, #20
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f001 f878 	bl	8005ef4 <xTaskCheckForTimeOut>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d124      	bne.n	8004e54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e0c:	f000 fb22 	bl	8005454 <prvIsQueueFull>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d018      	beq.n	8004e48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	3310      	adds	r3, #16
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 ff9e 	bl	8005d60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e26:	f000 faad 	bl	8005384 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e2a:	f000 fdd3 	bl	80059d4 <xTaskResumeAll>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f47f af7c 	bne.w	8004d2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004e36:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <xQueueGenericSend+0x1f8>)
 8004e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	e772      	b.n	8004d2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e4a:	f000 fa9b 	bl	8005384 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e4e:	f000 fdc1 	bl	80059d4 <xTaskResumeAll>
 8004e52:	e76c      	b.n	8004d2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e56:	f000 fa95 	bl	8005384 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e5a:	f000 fdbb 	bl	80059d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3738      	adds	r7, #56	; 0x38
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	e000ed04 	.word	0xe000ed04

08004e6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b090      	sub	sp, #64	; 0x40
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e96:	bf00      	nop
 8004e98:	e7fe      	b.n	8004e98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d103      	bne.n	8004ea8 <xQueueGenericSendFromISR+0x3c>
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <xQueueGenericSendFromISR+0x40>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <xQueueGenericSendFromISR+0x42>
 8004eac:	2300      	movs	r3, #0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ec4:	bf00      	nop
 8004ec6:	e7fe      	b.n	8004ec6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d103      	bne.n	8004ed6 <xQueueGenericSendFromISR+0x6a>
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <xQueueGenericSendFromISR+0x6e>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <xQueueGenericSendFromISR+0x70>
 8004eda:	2300      	movs	r3, #0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	623b      	str	r3, [r7, #32]
}
 8004ef2:	bf00      	nop
 8004ef4:	e7fe      	b.n	8004ef4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ef6:	f001 ff7f 	bl	8006df8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004efa:	f3ef 8211 	mrs	r2, BASEPRI
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	61fa      	str	r2, [r7, #28]
 8004f10:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f12:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f14:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d302      	bcc.n	8004f28 <xQueueGenericSendFromISR+0xbc>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d12f      	bne.n	8004f88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f3e:	f000 f991 	bl	8005264 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4a:	d112      	bne.n	8004f72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d016      	beq.n	8004f82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f56:	3324      	adds	r3, #36	; 0x24
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 ff51 	bl	8005e00 <xTaskRemoveFromEventList>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00e      	beq.n	8004f82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00b      	beq.n	8004f82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e007      	b.n	8004f82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f76:	3301      	adds	r3, #1
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	b25a      	sxtb	r2, r3
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f82:	2301      	movs	r3, #1
 8004f84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004f86:	e001      	b.n	8004f8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3740      	adds	r7, #64	; 0x40
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08c      	sub	sp, #48	; 0x30
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10a      	bne.n	8004fd4 <xQueueReceive+0x30>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	623b      	str	r3, [r7, #32]
}
 8004fd0:	bf00      	nop
 8004fd2:	e7fe      	b.n	8004fd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <xQueueReceive+0x3e>
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <xQueueReceive+0x42>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <xQueueReceive+0x44>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10a      	bne.n	8005002 <xQueueReceive+0x5e>
	__asm volatile
 8004fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	61fb      	str	r3, [r7, #28]
}
 8004ffe:	bf00      	nop
 8005000:	e7fe      	b.n	8005000 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005002:	f001 f8bb 	bl	800617c <xTaskGetSchedulerState>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d102      	bne.n	8005012 <xQueueReceive+0x6e>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <xQueueReceive+0x72>
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <xQueueReceive+0x74>
 8005016:	2300      	movs	r3, #0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10a      	bne.n	8005032 <xQueueReceive+0x8e>
	__asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	61bb      	str	r3, [r7, #24]
}
 800502e:	bf00      	nop
 8005030:	e7fe      	b.n	8005030 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005032:	f001 fdff 	bl	8006c34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	2b00      	cmp	r3, #0
 8005040:	d01f      	beq.n	8005082 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005046:	f000 f977 	bl	8005338 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	1e5a      	subs	r2, r3, #1
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00f      	beq.n	800507a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	3310      	adds	r3, #16
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fece 	bl	8005e00 <xTaskRemoveFromEventList>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d007      	beq.n	800507a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800506a:	4b3d      	ldr	r3, [pc, #244]	; (8005160 <xQueueReceive+0x1bc>)
 800506c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800507a:	f001 fe0b 	bl	8006c94 <vPortExitCritical>
				return pdPASS;
 800507e:	2301      	movs	r3, #1
 8005080:	e069      	b.n	8005156 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d103      	bne.n	8005090 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005088:	f001 fe04 	bl	8006c94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800508c:	2300      	movs	r3, #0
 800508e:	e062      	b.n	8005156 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005096:	f107 0310 	add.w	r3, r7, #16
 800509a:	4618      	mov	r0, r3
 800509c:	f000 ff14 	bl	8005ec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050a0:	2301      	movs	r3, #1
 80050a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050a4:	f001 fdf6 	bl	8006c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050a8:	f000 fc86 	bl	80059b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050ac:	f001 fdc2 	bl	8006c34 <vPortEnterCritical>
 80050b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050b6:	b25b      	sxtb	r3, r3
 80050b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050bc:	d103      	bne.n	80050c6 <xQueueReceive+0x122>
 80050be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050cc:	b25b      	sxtb	r3, r3
 80050ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d2:	d103      	bne.n	80050dc <xQueueReceive+0x138>
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050dc:	f001 fdda 	bl	8006c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050e0:	1d3a      	adds	r2, r7, #4
 80050e2:	f107 0310 	add.w	r3, r7, #16
 80050e6:	4611      	mov	r1, r2
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 ff03 	bl	8005ef4 <xTaskCheckForTimeOut>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d123      	bne.n	800513c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050f6:	f000 f997 	bl	8005428 <prvIsQueueEmpty>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d017      	beq.n	8005130 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	3324      	adds	r3, #36	; 0x24
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	4611      	mov	r1, r2
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fe29 	bl	8005d60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800510e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005110:	f000 f938 	bl	8005384 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005114:	f000 fc5e 	bl	80059d4 <xTaskResumeAll>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d189      	bne.n	8005032 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800511e:	4b10      	ldr	r3, [pc, #64]	; (8005160 <xQueueReceive+0x1bc>)
 8005120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	e780      	b.n	8005032 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005132:	f000 f927 	bl	8005384 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005136:	f000 fc4d 	bl	80059d4 <xTaskResumeAll>
 800513a:	e77a      	b.n	8005032 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800513c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800513e:	f000 f921 	bl	8005384 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005142:	f000 fc47 	bl	80059d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005148:	f000 f96e 	bl	8005428 <prvIsQueueEmpty>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	f43f af6f 	beq.w	8005032 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005154:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005156:	4618      	mov	r0, r3
 8005158:	3730      	adds	r7, #48	; 0x30
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	e000ed04 	.word	0xe000ed04

08005164 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08e      	sub	sp, #56	; 0x38
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	623b      	str	r3, [r7, #32]
}
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d103      	bne.n	800519e <xQueueReceiveFromISR+0x3a>
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <xQueueReceiveFromISR+0x3e>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <xQueueReceiveFromISR+0x40>
 80051a2:	2300      	movs	r3, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	61fb      	str	r3, [r7, #28]
}
 80051ba:	bf00      	nop
 80051bc:	e7fe      	b.n	80051bc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051be:	f001 fe1b 	bl	8006df8 <vPortValidateInterruptPriority>
	__asm volatile
 80051c2:	f3ef 8211 	mrs	r2, BASEPRI
 80051c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	61ba      	str	r2, [r7, #24]
 80051d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80051da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d02f      	beq.n	800524a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051f8:	f000 f89e 	bl	8005338 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fe:	1e5a      	subs	r2, r3, #1
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005204:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520c:	d112      	bne.n	8005234 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d016      	beq.n	8005244 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	3310      	adds	r3, #16
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fdf0 	bl	8005e00 <xTaskRemoveFromEventList>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00e      	beq.n	8005244 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00b      	beq.n	8005244 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e007      	b.n	8005244 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005238:	3301      	adds	r3, #1
 800523a:	b2db      	uxtb	r3, r3
 800523c:	b25a      	sxtb	r2, r3
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005244:	2301      	movs	r3, #1
 8005246:	637b      	str	r3, [r7, #52]	; 0x34
 8005248:	e001      	b.n	800524e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800524a:	2300      	movs	r3, #0
 800524c:	637b      	str	r3, [r7, #52]	; 0x34
 800524e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005250:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f383 8811 	msr	BASEPRI, r3
}
 8005258:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800525c:	4618      	mov	r0, r3
 800525e:	3738      	adds	r7, #56	; 0x38
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005270:	2300      	movs	r3, #0
 8005272:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10d      	bne.n	800529e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d14d      	bne.n	8005326 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	4618      	mov	r0, r3
 8005290:	f000 ff92 	bl	80061b8 <xTaskPriorityDisinherit>
 8005294:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	609a      	str	r2, [r3, #8]
 800529c:	e043      	b.n	8005326 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d119      	bne.n	80052d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6858      	ldr	r0, [r3, #4]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	461a      	mov	r2, r3
 80052ae:	68b9      	ldr	r1, [r7, #8]
 80052b0:	f001 fff6 	bl	80072a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	441a      	add	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d32b      	bcc.n	8005326 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	605a      	str	r2, [r3, #4]
 80052d6:	e026      	b.n	8005326 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	68d8      	ldr	r0, [r3, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	461a      	mov	r2, r3
 80052e2:	68b9      	ldr	r1, [r7, #8]
 80052e4:	f001 ffdc 	bl	80072a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	425b      	negs	r3, r3
 80052f2:	441a      	add	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d207      	bcs.n	8005314 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	425b      	negs	r3, r3
 800530e:	441a      	add	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d105      	bne.n	8005326 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	3b01      	subs	r3, #1
 8005324:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800532e:	697b      	ldr	r3, [r7, #20]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	2b00      	cmp	r3, #0
 8005348:	d018      	beq.n	800537c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	441a      	add	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	429a      	cmp	r2, r3
 8005362:	d303      	bcc.n	800536c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68d9      	ldr	r1, [r3, #12]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	461a      	mov	r2, r3
 8005376:	6838      	ldr	r0, [r7, #0]
 8005378:	f001 ff92 	bl	80072a0 <memcpy>
	}
}
 800537c:	bf00      	nop
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800538c:	f001 fc52 	bl	8006c34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005396:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005398:	e011      	b.n	80053be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d012      	beq.n	80053c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3324      	adds	r3, #36	; 0x24
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fd2a 	bl	8005e00 <xTaskRemoveFromEventList>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80053b2:	f000 fe01 	bl	8005fb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	dce9      	bgt.n	800539a <prvUnlockQueue+0x16>
 80053c6:	e000      	b.n	80053ca <prvUnlockQueue+0x46>
					break;
 80053c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	22ff      	movs	r2, #255	; 0xff
 80053ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80053d2:	f001 fc5f 	bl	8006c94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80053d6:	f001 fc2d 	bl	8006c34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053e2:	e011      	b.n	8005408 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d012      	beq.n	8005412 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3310      	adds	r3, #16
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 fd05 	bl	8005e00 <xTaskRemoveFromEventList>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80053fc:	f000 fddc 	bl	8005fb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005400:	7bbb      	ldrb	r3, [r7, #14]
 8005402:	3b01      	subs	r3, #1
 8005404:	b2db      	uxtb	r3, r3
 8005406:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005408:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800540c:	2b00      	cmp	r3, #0
 800540e:	dce9      	bgt.n	80053e4 <prvUnlockQueue+0x60>
 8005410:	e000      	b.n	8005414 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005412:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	22ff      	movs	r2, #255	; 0xff
 8005418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800541c:	f001 fc3a 	bl	8006c94 <vPortExitCritical>
}
 8005420:	bf00      	nop
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005430:	f001 fc00 	bl	8006c34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005438:	2b00      	cmp	r3, #0
 800543a:	d102      	bne.n	8005442 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800543c:	2301      	movs	r3, #1
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	e001      	b.n	8005446 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005442:	2300      	movs	r3, #0
 8005444:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005446:	f001 fc25 	bl	8006c94 <vPortExitCritical>

	return xReturn;
 800544a:	68fb      	ldr	r3, [r7, #12]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800545c:	f001 fbea 	bl	8006c34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005468:	429a      	cmp	r2, r3
 800546a:	d102      	bne.n	8005472 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800546c:	2301      	movs	r3, #1
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	e001      	b.n	8005476 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005472:	2300      	movs	r3, #0
 8005474:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005476:	f001 fc0d 	bl	8006c94 <vPortExitCritical>

	return xReturn;
 800547a:	68fb      	ldr	r3, [r7, #12]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	e014      	b.n	80054be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005494:	4a0f      	ldr	r2, [pc, #60]	; (80054d4 <vQueueAddToRegistry+0x50>)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10b      	bne.n	80054b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80054a0:	490c      	ldr	r1, [pc, #48]	; (80054d4 <vQueueAddToRegistry+0x50>)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80054aa:	4a0a      	ldr	r2, [pc, #40]	; (80054d4 <vQueueAddToRegistry+0x50>)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	4413      	add	r3, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80054b6:	e006      	b.n	80054c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3301      	adds	r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b07      	cmp	r3, #7
 80054c2:	d9e7      	bls.n	8005494 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	2000124c 	.word	0x2000124c

080054d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80054e8:	f001 fba4 	bl	8006c34 <vPortEnterCritical>
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054f2:	b25b      	sxtb	r3, r3
 80054f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f8:	d103      	bne.n	8005502 <vQueueWaitForMessageRestricted+0x2a>
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005508:	b25b      	sxtb	r3, r3
 800550a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550e:	d103      	bne.n	8005518 <vQueueWaitForMessageRestricted+0x40>
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005518:	f001 fbbc 	bl	8006c94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005520:	2b00      	cmp	r3, #0
 8005522:	d106      	bne.n	8005532 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	3324      	adds	r3, #36	; 0x24
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	68b9      	ldr	r1, [r7, #8]
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fc3b 	bl	8005da8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005532:	6978      	ldr	r0, [r7, #20]
 8005534:	f7ff ff26 	bl	8005384 <prvUnlockQueue>
	}
 8005538:	bf00      	nop
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08e      	sub	sp, #56	; 0x38
 8005544:	af04      	add	r7, sp, #16
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800554e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	623b      	str	r3, [r7, #32]
}
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <xTaskCreateStatic+0x46>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	61fb      	str	r3, [r7, #28]
}
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005586:	235c      	movs	r3, #92	; 0x5c
 8005588:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b5c      	cmp	r3, #92	; 0x5c
 800558e:	d00a      	beq.n	80055a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	61bb      	str	r3, [r7, #24]
}
 80055a2:	bf00      	nop
 80055a4:	e7fe      	b.n	80055a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80055a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d01e      	beq.n	80055ec <xTaskCreateStatic+0xac>
 80055ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01b      	beq.n	80055ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80055c6:	2300      	movs	r3, #0
 80055c8:	9303      	str	r3, [sp, #12]
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	9302      	str	r3, [sp, #8]
 80055ce:	f107 0314 	add.w	r3, r7, #20
 80055d2:	9301      	str	r3, [sp, #4]
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 f850 	bl	8005684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055e6:	f000 f8dd 	bl	80057a4 <prvAddNewTaskToReadyList>
 80055ea:	e001      	b.n	80055f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80055ec:	2300      	movs	r3, #0
 80055ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80055f0:	697b      	ldr	r3, [r7, #20]
	}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3728      	adds	r7, #40	; 0x28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b08c      	sub	sp, #48	; 0x30
 80055fe:	af04      	add	r7, sp, #16
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	603b      	str	r3, [r7, #0]
 8005606:	4613      	mov	r3, r2
 8005608:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800560a:	88fb      	ldrh	r3, [r7, #6]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4618      	mov	r0, r3
 8005610:	f001 fc32 	bl	8006e78 <pvPortMalloc>
 8005614:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00e      	beq.n	800563a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800561c:	205c      	movs	r0, #92	; 0x5c
 800561e:	f001 fc2b 	bl	8006e78 <pvPortMalloc>
 8005622:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	631a      	str	r2, [r3, #48]	; 0x30
 8005630:	e005      	b.n	800563e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005632:	6978      	ldr	r0, [r7, #20]
 8005634:	f001 fcec 	bl	8007010 <vPortFree>
 8005638:	e001      	b.n	800563e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800563a:	2300      	movs	r3, #0
 800563c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d017      	beq.n	8005674 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800564c:	88fa      	ldrh	r2, [r7, #6]
 800564e:	2300      	movs	r3, #0
 8005650:	9303      	str	r3, [sp, #12]
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	9302      	str	r3, [sp, #8]
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	9301      	str	r3, [sp, #4]
 800565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 f80e 	bl	8005684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005668:	69f8      	ldr	r0, [r7, #28]
 800566a:	f000 f89b 	bl	80057a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800566e:	2301      	movs	r3, #1
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	e002      	b.n	800567a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005674:	f04f 33ff 	mov.w	r3, #4294967295
 8005678:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800567a:	69bb      	ldr	r3, [r7, #24]
	}
 800567c:	4618      	mov	r0, r3
 800567e:	3720      	adds	r7, #32
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005694:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	461a      	mov	r2, r3
 800569c:	21a5      	movs	r1, #165	; 0xa5
 800569e:	f001 fe0d 	bl	80072bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056ac:	3b01      	subs	r3, #1
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	f023 0307 	bic.w	r3, r3, #7
 80056ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	617b      	str	r3, [r7, #20]
}
 80056d8:	bf00      	nop
 80056da:	e7fe      	b.n	80056da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d01f      	beq.n	8005722 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056e2:	2300      	movs	r3, #0
 80056e4:	61fb      	str	r3, [r7, #28]
 80056e6:	e012      	b.n	800570e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	4413      	add	r3, r2
 80056ee:	7819      	ldrb	r1, [r3, #0]
 80056f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4413      	add	r3, r2
 80056f6:	3334      	adds	r3, #52	; 0x34
 80056f8:	460a      	mov	r2, r1
 80056fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	4413      	add	r3, r2
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d006      	beq.n	8005716 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	3301      	adds	r3, #1
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	2b0f      	cmp	r3, #15
 8005712:	d9e9      	bls.n	80056e8 <prvInitialiseNewTask+0x64>
 8005714:	e000      	b.n	8005718 <prvInitialiseNewTask+0x94>
			{
				break;
 8005716:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005720:	e003      	b.n	800572a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	2b37      	cmp	r3, #55	; 0x37
 800572e:	d901      	bls.n	8005734 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005730:	2337      	movs	r3, #55	; 0x37
 8005732:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005738:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800573e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	2200      	movs	r2, #0
 8005744:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	3304      	adds	r3, #4
 800574a:	4618      	mov	r0, r3
 800574c:	f7ff f8be 	bl	80048cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	3318      	adds	r3, #24
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff f8b9 	bl	80048cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800575e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800576e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	2200      	movs	r2, #0
 8005774:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	68f9      	ldr	r1, [r7, #12]
 8005782:	69b8      	ldr	r0, [r7, #24]
 8005784:	f001 f928 	bl	80069d8 <pxPortInitialiseStack>
 8005788:	4602      	mov	r2, r0
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800578e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005798:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800579a:	bf00      	nop
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80057ac:	f001 fa42 	bl	8006c34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80057b0:	4b2d      	ldr	r3, [pc, #180]	; (8005868 <prvAddNewTaskToReadyList+0xc4>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3301      	adds	r3, #1
 80057b6:	4a2c      	ldr	r2, [pc, #176]	; (8005868 <prvAddNewTaskToReadyList+0xc4>)
 80057b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80057ba:	4b2c      	ldr	r3, [pc, #176]	; (800586c <prvAddNewTaskToReadyList+0xc8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d109      	bne.n	80057d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80057c2:	4a2a      	ldr	r2, [pc, #168]	; (800586c <prvAddNewTaskToReadyList+0xc8>)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057c8:	4b27      	ldr	r3, [pc, #156]	; (8005868 <prvAddNewTaskToReadyList+0xc4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d110      	bne.n	80057f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057d0:	f000 fc16 	bl	8006000 <prvInitialiseTaskLists>
 80057d4:	e00d      	b.n	80057f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057d6:	4b26      	ldr	r3, [pc, #152]	; (8005870 <prvAddNewTaskToReadyList+0xcc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d109      	bne.n	80057f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057de:	4b23      	ldr	r3, [pc, #140]	; (800586c <prvAddNewTaskToReadyList+0xc8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d802      	bhi.n	80057f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057ec:	4a1f      	ldr	r2, [pc, #124]	; (800586c <prvAddNewTaskToReadyList+0xc8>)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057f2:	4b20      	ldr	r3, [pc, #128]	; (8005874 <prvAddNewTaskToReadyList+0xd0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3301      	adds	r3, #1
 80057f8:	4a1e      	ldr	r2, [pc, #120]	; (8005874 <prvAddNewTaskToReadyList+0xd0>)
 80057fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80057fc:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <prvAddNewTaskToReadyList+0xd0>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005808:	4b1b      	ldr	r3, [pc, #108]	; (8005878 <prvAddNewTaskToReadyList+0xd4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d903      	bls.n	8005818 <prvAddNewTaskToReadyList+0x74>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	4a18      	ldr	r2, [pc, #96]	; (8005878 <prvAddNewTaskToReadyList+0xd4>)
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581c:	4613      	mov	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4a15      	ldr	r2, [pc, #84]	; (800587c <prvAddNewTaskToReadyList+0xd8>)
 8005826:	441a      	add	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3304      	adds	r3, #4
 800582c:	4619      	mov	r1, r3
 800582e:	4610      	mov	r0, r2
 8005830:	f7ff f859 	bl	80048e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005834:	f001 fa2e 	bl	8006c94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005838:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <prvAddNewTaskToReadyList+0xcc>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00e      	beq.n	800585e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005840:	4b0a      	ldr	r3, [pc, #40]	; (800586c <prvAddNewTaskToReadyList+0xc8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	429a      	cmp	r2, r3
 800584c:	d207      	bcs.n	800585e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800584e:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <prvAddNewTaskToReadyList+0xdc>)
 8005850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800585e:	bf00      	nop
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20001760 	.word	0x20001760
 800586c:	2000128c 	.word	0x2000128c
 8005870:	2000176c 	.word	0x2000176c
 8005874:	2000177c 	.word	0x2000177c
 8005878:	20001768 	.word	0x20001768
 800587c:	20001290 	.word	0x20001290
 8005880:	e000ed04 	.word	0xe000ed04

08005884 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d017      	beq.n	80058c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005896:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <vTaskDelay+0x60>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <vTaskDelay+0x30>
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	60bb      	str	r3, [r7, #8]
}
 80058b0:	bf00      	nop
 80058b2:	e7fe      	b.n	80058b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80058b4:	f000 f880 	bl	80059b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80058b8:	2100      	movs	r1, #0
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fcea 	bl	8006294 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80058c0:	f000 f888 	bl	80059d4 <xTaskResumeAll>
 80058c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d107      	bne.n	80058dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80058cc:	4b06      	ldr	r3, [pc, #24]	; (80058e8 <vTaskDelay+0x64>)
 80058ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058dc:	bf00      	nop
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20001788 	.word	0x20001788
 80058e8:	e000ed04 	.word	0xe000ed04

080058ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08a      	sub	sp, #40	; 0x28
 80058f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058fa:	463a      	mov	r2, r7
 80058fc:	1d39      	adds	r1, r7, #4
 80058fe:	f107 0308 	add.w	r3, r7, #8
 8005902:	4618      	mov	r0, r3
 8005904:	f7fe ff8e 	bl	8004824 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005908:	6839      	ldr	r1, [r7, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	9202      	str	r2, [sp, #8]
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	2300      	movs	r3, #0
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	2300      	movs	r3, #0
 8005918:	460a      	mov	r2, r1
 800591a:	4921      	ldr	r1, [pc, #132]	; (80059a0 <vTaskStartScheduler+0xb4>)
 800591c:	4821      	ldr	r0, [pc, #132]	; (80059a4 <vTaskStartScheduler+0xb8>)
 800591e:	f7ff fe0f 	bl	8005540 <xTaskCreateStatic>
 8005922:	4603      	mov	r3, r0
 8005924:	4a20      	ldr	r2, [pc, #128]	; (80059a8 <vTaskStartScheduler+0xbc>)
 8005926:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005928:	4b1f      	ldr	r3, [pc, #124]	; (80059a8 <vTaskStartScheduler+0xbc>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005930:	2301      	movs	r3, #1
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	e001      	b.n	800593a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005936:	2300      	movs	r3, #0
 8005938:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d102      	bne.n	8005946 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005940:	f000 fcfc 	bl	800633c <xTimerCreateTimerTask>
 8005944:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d116      	bne.n	800597a <vTaskStartScheduler+0x8e>
	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	613b      	str	r3, [r7, #16]
}
 800595e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005960:	4b12      	ldr	r3, [pc, #72]	; (80059ac <vTaskStartScheduler+0xc0>)
 8005962:	f04f 32ff 	mov.w	r2, #4294967295
 8005966:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005968:	4b11      	ldr	r3, [pc, #68]	; (80059b0 <vTaskStartScheduler+0xc4>)
 800596a:	2201      	movs	r2, #1
 800596c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800596e:	4b11      	ldr	r3, [pc, #68]	; (80059b4 <vTaskStartScheduler+0xc8>)
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005974:	f001 f8bc 	bl	8006af0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005978:	e00e      	b.n	8005998 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005980:	d10a      	bne.n	8005998 <vTaskStartScheduler+0xac>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	60fb      	str	r3, [r7, #12]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <vTaskStartScheduler+0xaa>
}
 8005998:	bf00      	nop
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	0800a688 	.word	0x0800a688
 80059a4:	08005fd1 	.word	0x08005fd1
 80059a8:	20001784 	.word	0x20001784
 80059ac:	20001780 	.word	0x20001780
 80059b0:	2000176c 	.word	0x2000176c
 80059b4:	20001764 	.word	0x20001764

080059b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80059b8:	b480      	push	{r7}
 80059ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80059bc:	4b04      	ldr	r3, [pc, #16]	; (80059d0 <vTaskSuspendAll+0x18>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3301      	adds	r3, #1
 80059c2:	4a03      	ldr	r2, [pc, #12]	; (80059d0 <vTaskSuspendAll+0x18>)
 80059c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80059c6:	bf00      	nop
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	20001788 	.word	0x20001788

080059d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059de:	2300      	movs	r3, #0
 80059e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059e2:	4b42      	ldr	r3, [pc, #264]	; (8005aec <xTaskResumeAll+0x118>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10a      	bne.n	8005a00 <xTaskResumeAll+0x2c>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	603b      	str	r3, [r7, #0]
}
 80059fc:	bf00      	nop
 80059fe:	e7fe      	b.n	80059fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a00:	f001 f918 	bl	8006c34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a04:	4b39      	ldr	r3, [pc, #228]	; (8005aec <xTaskResumeAll+0x118>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	4a38      	ldr	r2, [pc, #224]	; (8005aec <xTaskResumeAll+0x118>)
 8005a0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a0e:	4b37      	ldr	r3, [pc, #220]	; (8005aec <xTaskResumeAll+0x118>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d162      	bne.n	8005adc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a16:	4b36      	ldr	r3, [pc, #216]	; (8005af0 <xTaskResumeAll+0x11c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d05e      	beq.n	8005adc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a1e:	e02f      	b.n	8005a80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a20:	4b34      	ldr	r3, [pc, #208]	; (8005af4 <xTaskResumeAll+0x120>)
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	3318      	adds	r3, #24
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fe ffb7 	bl	80049a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3304      	adds	r3, #4
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fe ffb2 	bl	80049a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a40:	4b2d      	ldr	r3, [pc, #180]	; (8005af8 <xTaskResumeAll+0x124>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d903      	bls.n	8005a50 <xTaskResumeAll+0x7c>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	4a2a      	ldr	r2, [pc, #168]	; (8005af8 <xTaskResumeAll+0x124>)
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4a27      	ldr	r2, [pc, #156]	; (8005afc <xTaskResumeAll+0x128>)
 8005a5e:	441a      	add	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f7fe ff3d 	bl	80048e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a70:	4b23      	ldr	r3, [pc, #140]	; (8005b00 <xTaskResumeAll+0x12c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d302      	bcc.n	8005a80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005a7a:	4b22      	ldr	r3, [pc, #136]	; (8005b04 <xTaskResumeAll+0x130>)
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a80:	4b1c      	ldr	r3, [pc, #112]	; (8005af4 <xTaskResumeAll+0x120>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1cb      	bne.n	8005a20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a8e:	f000 fb55 	bl	800613c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a92:	4b1d      	ldr	r3, [pc, #116]	; (8005b08 <xTaskResumeAll+0x134>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d010      	beq.n	8005ac0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a9e:	f000 f847 	bl	8005b30 <xTaskIncrementTick>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005aa8:	4b16      	ldr	r3, [pc, #88]	; (8005b04 <xTaskResumeAll+0x130>)
 8005aaa:	2201      	movs	r2, #1
 8005aac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1f1      	bne.n	8005a9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005aba:	4b13      	ldr	r3, [pc, #76]	; (8005b08 <xTaskResumeAll+0x134>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ac0:	4b10      	ldr	r3, [pc, #64]	; (8005b04 <xTaskResumeAll+0x130>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d009      	beq.n	8005adc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005acc:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <xTaskResumeAll+0x138>)
 8005ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005adc:	f001 f8da 	bl	8006c94 <vPortExitCritical>

	return xAlreadyYielded;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20001788 	.word	0x20001788
 8005af0:	20001760 	.word	0x20001760
 8005af4:	20001720 	.word	0x20001720
 8005af8:	20001768 	.word	0x20001768
 8005afc:	20001290 	.word	0x20001290
 8005b00:	2000128c 	.word	0x2000128c
 8005b04:	20001774 	.word	0x20001774
 8005b08:	20001770 	.word	0x20001770
 8005b0c:	e000ed04 	.word	0xe000ed04

08005b10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b16:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <xTaskGetTickCount+0x1c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b1c:	687b      	ldr	r3, [r7, #4]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	20001764 	.word	0x20001764

08005b30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b3a:	4b4f      	ldr	r3, [pc, #316]	; (8005c78 <xTaskIncrementTick+0x148>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f040 808f 	bne.w	8005c62 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b44:	4b4d      	ldr	r3, [pc, #308]	; (8005c7c <xTaskIncrementTick+0x14c>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b4c:	4a4b      	ldr	r2, [pc, #300]	; (8005c7c <xTaskIncrementTick+0x14c>)
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d120      	bne.n	8005b9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b58:	4b49      	ldr	r3, [pc, #292]	; (8005c80 <xTaskIncrementTick+0x150>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <xTaskIncrementTick+0x48>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	603b      	str	r3, [r7, #0]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <xTaskIncrementTick+0x46>
 8005b78:	4b41      	ldr	r3, [pc, #260]	; (8005c80 <xTaskIncrementTick+0x150>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	4b41      	ldr	r3, [pc, #260]	; (8005c84 <xTaskIncrementTick+0x154>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a3f      	ldr	r2, [pc, #252]	; (8005c80 <xTaskIncrementTick+0x150>)
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	4a3f      	ldr	r2, [pc, #252]	; (8005c84 <xTaskIncrementTick+0x154>)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6013      	str	r3, [r2, #0]
 8005b8c:	4b3e      	ldr	r3, [pc, #248]	; (8005c88 <xTaskIncrementTick+0x158>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3301      	adds	r3, #1
 8005b92:	4a3d      	ldr	r2, [pc, #244]	; (8005c88 <xTaskIncrementTick+0x158>)
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	f000 fad1 	bl	800613c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b9a:	4b3c      	ldr	r3, [pc, #240]	; (8005c8c <xTaskIncrementTick+0x15c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d349      	bcc.n	8005c38 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ba4:	4b36      	ldr	r3, [pc, #216]	; (8005c80 <xTaskIncrementTick+0x150>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d104      	bne.n	8005bb8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bae:	4b37      	ldr	r3, [pc, #220]	; (8005c8c <xTaskIncrementTick+0x15c>)
 8005bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb4:	601a      	str	r2, [r3, #0]
					break;
 8005bb6:	e03f      	b.n	8005c38 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bb8:	4b31      	ldr	r3, [pc, #196]	; (8005c80 <xTaskIncrementTick+0x150>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d203      	bcs.n	8005bd8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005bd0:	4a2e      	ldr	r2, [pc, #184]	; (8005c8c <xTaskIncrementTick+0x15c>)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005bd6:	e02f      	b.n	8005c38 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fe fedf 	bl	80049a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d004      	beq.n	8005bf4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	3318      	adds	r3, #24
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fe fed6 	bl	80049a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf8:	4b25      	ldr	r3, [pc, #148]	; (8005c90 <xTaskIncrementTick+0x160>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d903      	bls.n	8005c08 <xTaskIncrementTick+0xd8>
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	4a22      	ldr	r2, [pc, #136]	; (8005c90 <xTaskIncrementTick+0x160>)
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4a1f      	ldr	r2, [pc, #124]	; (8005c94 <xTaskIncrementTick+0x164>)
 8005c16:	441a      	add	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4610      	mov	r0, r2
 8005c20:	f7fe fe61 	bl	80048e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c28:	4b1b      	ldr	r3, [pc, #108]	; (8005c98 <xTaskIncrementTick+0x168>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d3b8      	bcc.n	8005ba4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c32:	2301      	movs	r3, #1
 8005c34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c36:	e7b5      	b.n	8005ba4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c38:	4b17      	ldr	r3, [pc, #92]	; (8005c98 <xTaskIncrementTick+0x168>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3e:	4915      	ldr	r1, [pc, #84]	; (8005c94 <xTaskIncrementTick+0x164>)
 8005c40:	4613      	mov	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d901      	bls.n	8005c54 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005c50:	2301      	movs	r3, #1
 8005c52:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005c54:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <xTaskIncrementTick+0x16c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	e004      	b.n	8005c6c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c62:	4b0f      	ldr	r3, [pc, #60]	; (8005ca0 <xTaskIncrementTick+0x170>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3301      	adds	r3, #1
 8005c68:	4a0d      	ldr	r2, [pc, #52]	; (8005ca0 <xTaskIncrementTick+0x170>)
 8005c6a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c6c:	697b      	ldr	r3, [r7, #20]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20001788 	.word	0x20001788
 8005c7c:	20001764 	.word	0x20001764
 8005c80:	20001718 	.word	0x20001718
 8005c84:	2000171c 	.word	0x2000171c
 8005c88:	20001778 	.word	0x20001778
 8005c8c:	20001780 	.word	0x20001780
 8005c90:	20001768 	.word	0x20001768
 8005c94:	20001290 	.word	0x20001290
 8005c98:	2000128c 	.word	0x2000128c
 8005c9c:	20001774 	.word	0x20001774
 8005ca0:	20001770 	.word	0x20001770

08005ca4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005caa:	4b28      	ldr	r3, [pc, #160]	; (8005d4c <vTaskSwitchContext+0xa8>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005cb2:	4b27      	ldr	r3, [pc, #156]	; (8005d50 <vTaskSwitchContext+0xac>)
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005cb8:	e041      	b.n	8005d3e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005cba:	4b25      	ldr	r3, [pc, #148]	; (8005d50 <vTaskSwitchContext+0xac>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cc0:	4b24      	ldr	r3, [pc, #144]	; (8005d54 <vTaskSwitchContext+0xb0>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	e010      	b.n	8005cea <vTaskSwitchContext+0x46>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <vTaskSwitchContext+0x40>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	607b      	str	r3, [r7, #4]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <vTaskSwitchContext+0x3e>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	491b      	ldr	r1, [pc, #108]	; (8005d58 <vTaskSwitchContext+0xb4>)
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	440b      	add	r3, r1
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0e4      	beq.n	8005cc8 <vTaskSwitchContext+0x24>
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4613      	mov	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4a13      	ldr	r2, [pc, #76]	; (8005d58 <vTaskSwitchContext+0xb4>)
 8005d0a:	4413      	add	r3, r2
 8005d0c:	60bb      	str	r3, [r7, #8]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	605a      	str	r2, [r3, #4]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	3308      	adds	r3, #8
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d104      	bne.n	8005d2e <vTaskSwitchContext+0x8a>
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	605a      	str	r2, [r3, #4]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	4a09      	ldr	r2, [pc, #36]	; (8005d5c <vTaskSwitchContext+0xb8>)
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	4a06      	ldr	r2, [pc, #24]	; (8005d54 <vTaskSwitchContext+0xb0>)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6013      	str	r3, [r2, #0]
}
 8005d3e:	bf00      	nop
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	20001788 	.word	0x20001788
 8005d50:	20001774 	.word	0x20001774
 8005d54:	20001768 	.word	0x20001768
 8005d58:	20001290 	.word	0x20001290
 8005d5c:	2000128c 	.word	0x2000128c

08005d60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	60fb      	str	r3, [r7, #12]
}
 8005d82:	bf00      	nop
 8005d84:	e7fe      	b.n	8005d84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d86:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <vTaskPlaceOnEventList+0x44>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3318      	adds	r3, #24
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7fe fdcd 	bl	800492e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d94:	2101      	movs	r1, #1
 8005d96:	6838      	ldr	r0, [r7, #0]
 8005d98:	f000 fa7c 	bl	8006294 <prvAddCurrentTaskToDelayedList>
}
 8005d9c:	bf00      	nop
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	2000128c 	.word	0x2000128c

08005da8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10a      	bne.n	8005dd0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	617b      	str	r3, [r7, #20]
}
 8005dcc:	bf00      	nop
 8005dce:	e7fe      	b.n	8005dce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005dd0:	4b0a      	ldr	r3, [pc, #40]	; (8005dfc <vTaskPlaceOnEventListRestricted+0x54>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3318      	adds	r3, #24
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7fe fd84 	bl	80048e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005de4:	f04f 33ff 	mov.w	r3, #4294967295
 8005de8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	68b8      	ldr	r0, [r7, #8]
 8005dee:	f000 fa51 	bl	8006294 <prvAddCurrentTaskToDelayedList>
	}
 8005df2:	bf00      	nop
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	2000128c 	.word	0x2000128c

08005e00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10a      	bne.n	8005e2c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	60fb      	str	r3, [r7, #12]
}
 8005e28:	bf00      	nop
 8005e2a:	e7fe      	b.n	8005e2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	3318      	adds	r3, #24
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fe fdb5 	bl	80049a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e36:	4b1e      	ldr	r3, [pc, #120]	; (8005eb0 <xTaskRemoveFromEventList+0xb0>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d11d      	bne.n	8005e7a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	3304      	adds	r3, #4
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe fdac 	bl	80049a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4c:	4b19      	ldr	r3, [pc, #100]	; (8005eb4 <xTaskRemoveFromEventList+0xb4>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d903      	bls.n	8005e5c <xTaskRemoveFromEventList+0x5c>
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	4a16      	ldr	r2, [pc, #88]	; (8005eb4 <xTaskRemoveFromEventList+0xb4>)
 8005e5a:	6013      	str	r3, [r2, #0]
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e60:	4613      	mov	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4a13      	ldr	r2, [pc, #76]	; (8005eb8 <xTaskRemoveFromEventList+0xb8>)
 8005e6a:	441a      	add	r2, r3
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4619      	mov	r1, r3
 8005e72:	4610      	mov	r0, r2
 8005e74:	f7fe fd37 	bl	80048e6 <vListInsertEnd>
 8005e78:	e005      	b.n	8005e86 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	3318      	adds	r3, #24
 8005e7e:	4619      	mov	r1, r3
 8005e80:	480e      	ldr	r0, [pc, #56]	; (8005ebc <xTaskRemoveFromEventList+0xbc>)
 8005e82:	f7fe fd30 	bl	80048e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ec0 <xTaskRemoveFromEventList+0xc0>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d905      	bls.n	8005ea0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e94:	2301      	movs	r3, #1
 8005e96:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e98:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <xTaskRemoveFromEventList+0xc4>)
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	e001      	b.n	8005ea4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ea4:	697b      	ldr	r3, [r7, #20]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20001788 	.word	0x20001788
 8005eb4:	20001768 	.word	0x20001768
 8005eb8:	20001290 	.word	0x20001290
 8005ebc:	20001720 	.word	0x20001720
 8005ec0:	2000128c 	.word	0x2000128c
 8005ec4:	20001774 	.word	0x20001774

08005ec8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ed0:	4b06      	ldr	r3, [pc, #24]	; (8005eec <vTaskInternalSetTimeOutState+0x24>)
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ed8:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <vTaskInternalSetTimeOutState+0x28>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	605a      	str	r2, [r3, #4]
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	20001778 	.word	0x20001778
 8005ef0:	20001764 	.word	0x20001764

08005ef4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10a      	bne.n	8005f1a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	613b      	str	r3, [r7, #16]
}
 8005f16:	bf00      	nop
 8005f18:	e7fe      	b.n	8005f18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	60fb      	str	r3, [r7, #12]
}
 8005f32:	bf00      	nop
 8005f34:	e7fe      	b.n	8005f34 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005f36:	f000 fe7d 	bl	8006c34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f3a:	4b1d      	ldr	r3, [pc, #116]	; (8005fb0 <xTaskCheckForTimeOut+0xbc>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f52:	d102      	bne.n	8005f5a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f54:	2300      	movs	r3, #0
 8005f56:	61fb      	str	r3, [r7, #28]
 8005f58:	e023      	b.n	8005fa2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	4b15      	ldr	r3, [pc, #84]	; (8005fb4 <xTaskCheckForTimeOut+0xc0>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d007      	beq.n	8005f76 <xTaskCheckForTimeOut+0x82>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d302      	bcc.n	8005f76 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f70:	2301      	movs	r3, #1
 8005f72:	61fb      	str	r3, [r7, #28]
 8005f74:	e015      	b.n	8005fa2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d20b      	bcs.n	8005f98 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	1ad2      	subs	r2, r2, r3
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7ff ff9b 	bl	8005ec8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	61fb      	str	r3, [r7, #28]
 8005f96:	e004      	b.n	8005fa2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005fa2:	f000 fe77 	bl	8006c94 <vPortExitCritical>

	return xReturn;
 8005fa6:	69fb      	ldr	r3, [r7, #28]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3720      	adds	r7, #32
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20001764 	.word	0x20001764
 8005fb4:	20001778 	.word	0x20001778

08005fb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005fbc:	4b03      	ldr	r3, [pc, #12]	; (8005fcc <vTaskMissedYield+0x14>)
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	601a      	str	r2, [r3, #0]
}
 8005fc2:	bf00      	nop
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	20001774 	.word	0x20001774

08005fd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005fd8:	f000 f852 	bl	8006080 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005fdc:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <prvIdleTask+0x28>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d9f9      	bls.n	8005fd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005fe4:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <prvIdleTask+0x2c>)
 8005fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ff4:	e7f0      	b.n	8005fd8 <prvIdleTask+0x8>
 8005ff6:	bf00      	nop
 8005ff8:	20001290 	.word	0x20001290
 8005ffc:	e000ed04 	.word	0xe000ed04

08006000 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006006:	2300      	movs	r3, #0
 8006008:	607b      	str	r3, [r7, #4]
 800600a:	e00c      	b.n	8006026 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4a12      	ldr	r2, [pc, #72]	; (8006060 <prvInitialiseTaskLists+0x60>)
 8006018:	4413      	add	r3, r2
 800601a:	4618      	mov	r0, r3
 800601c:	f7fe fc36 	bl	800488c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3301      	adds	r3, #1
 8006024:	607b      	str	r3, [r7, #4]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b37      	cmp	r3, #55	; 0x37
 800602a:	d9ef      	bls.n	800600c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800602c:	480d      	ldr	r0, [pc, #52]	; (8006064 <prvInitialiseTaskLists+0x64>)
 800602e:	f7fe fc2d 	bl	800488c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006032:	480d      	ldr	r0, [pc, #52]	; (8006068 <prvInitialiseTaskLists+0x68>)
 8006034:	f7fe fc2a 	bl	800488c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006038:	480c      	ldr	r0, [pc, #48]	; (800606c <prvInitialiseTaskLists+0x6c>)
 800603a:	f7fe fc27 	bl	800488c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800603e:	480c      	ldr	r0, [pc, #48]	; (8006070 <prvInitialiseTaskLists+0x70>)
 8006040:	f7fe fc24 	bl	800488c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006044:	480b      	ldr	r0, [pc, #44]	; (8006074 <prvInitialiseTaskLists+0x74>)
 8006046:	f7fe fc21 	bl	800488c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800604a:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <prvInitialiseTaskLists+0x78>)
 800604c:	4a05      	ldr	r2, [pc, #20]	; (8006064 <prvInitialiseTaskLists+0x64>)
 800604e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006050:	4b0a      	ldr	r3, [pc, #40]	; (800607c <prvInitialiseTaskLists+0x7c>)
 8006052:	4a05      	ldr	r2, [pc, #20]	; (8006068 <prvInitialiseTaskLists+0x68>)
 8006054:	601a      	str	r2, [r3, #0]
}
 8006056:	bf00      	nop
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20001290 	.word	0x20001290
 8006064:	200016f0 	.word	0x200016f0
 8006068:	20001704 	.word	0x20001704
 800606c:	20001720 	.word	0x20001720
 8006070:	20001734 	.word	0x20001734
 8006074:	2000174c 	.word	0x2000174c
 8006078:	20001718 	.word	0x20001718
 800607c:	2000171c 	.word	0x2000171c

08006080 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006086:	e019      	b.n	80060bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006088:	f000 fdd4 	bl	8006c34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800608c:	4b10      	ldr	r3, [pc, #64]	; (80060d0 <prvCheckTasksWaitingTermination+0x50>)
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3304      	adds	r3, #4
 8006098:	4618      	mov	r0, r3
 800609a:	f7fe fc81 	bl	80049a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800609e:	4b0d      	ldr	r3, [pc, #52]	; (80060d4 <prvCheckTasksWaitingTermination+0x54>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	4a0b      	ldr	r2, [pc, #44]	; (80060d4 <prvCheckTasksWaitingTermination+0x54>)
 80060a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80060a8:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <prvCheckTasksWaitingTermination+0x58>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	4a0a      	ldr	r2, [pc, #40]	; (80060d8 <prvCheckTasksWaitingTermination+0x58>)
 80060b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060b2:	f000 fdef 	bl	8006c94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f810 	bl	80060dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060bc:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <prvCheckTasksWaitingTermination+0x58>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1e1      	bne.n	8006088 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80060c4:	bf00      	nop
 80060c6:	bf00      	nop
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20001734 	.word	0x20001734
 80060d4:	20001760 	.word	0x20001760
 80060d8:	20001748 	.word	0x20001748

080060dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d108      	bne.n	8006100 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 ff8c 	bl	8007010 <vPortFree>
				vPortFree( pxTCB );
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 ff89 	bl	8007010 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060fe:	e018      	b.n	8006132 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006106:	2b01      	cmp	r3, #1
 8006108:	d103      	bne.n	8006112 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 ff80 	bl	8007010 <vPortFree>
	}
 8006110:	e00f      	b.n	8006132 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006118:	2b02      	cmp	r3, #2
 800611a:	d00a      	beq.n	8006132 <prvDeleteTCB+0x56>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	60fb      	str	r3, [r7, #12]
}
 800612e:	bf00      	nop
 8006130:	e7fe      	b.n	8006130 <prvDeleteTCB+0x54>
	}
 8006132:	bf00      	nop
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006142:	4b0c      	ldr	r3, [pc, #48]	; (8006174 <prvResetNextTaskUnblockTime+0x38>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d104      	bne.n	8006156 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800614c:	4b0a      	ldr	r3, [pc, #40]	; (8006178 <prvResetNextTaskUnblockTime+0x3c>)
 800614e:	f04f 32ff 	mov.w	r2, #4294967295
 8006152:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006154:	e008      	b.n	8006168 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006156:	4b07      	ldr	r3, [pc, #28]	; (8006174 <prvResetNextTaskUnblockTime+0x38>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	4a04      	ldr	r2, [pc, #16]	; (8006178 <prvResetNextTaskUnblockTime+0x3c>)
 8006166:	6013      	str	r3, [r2, #0]
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	20001718 	.word	0x20001718
 8006178:	20001780 	.word	0x20001780

0800617c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006182:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <xTaskGetSchedulerState+0x34>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d102      	bne.n	8006190 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800618a:	2301      	movs	r3, #1
 800618c:	607b      	str	r3, [r7, #4]
 800618e:	e008      	b.n	80061a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006190:	4b08      	ldr	r3, [pc, #32]	; (80061b4 <xTaskGetSchedulerState+0x38>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d102      	bne.n	800619e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006198:	2302      	movs	r3, #2
 800619a:	607b      	str	r3, [r7, #4]
 800619c:	e001      	b.n	80061a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800619e:	2300      	movs	r3, #0
 80061a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80061a2:	687b      	ldr	r3, [r7, #4]
	}
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	2000176c 	.word	0x2000176c
 80061b4:	20001788 	.word	0x20001788

080061b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d056      	beq.n	800627c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80061ce:	4b2e      	ldr	r3, [pc, #184]	; (8006288 <xTaskPriorityDisinherit+0xd0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d00a      	beq.n	80061ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80061d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	60fb      	str	r3, [r7, #12]
}
 80061ea:	bf00      	nop
 80061ec:	e7fe      	b.n	80061ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10a      	bne.n	800620c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	60bb      	str	r3, [r7, #8]
}
 8006208:	bf00      	nop
 800620a:	e7fe      	b.n	800620a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006210:	1e5a      	subs	r2, r3, #1
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800621e:	429a      	cmp	r2, r3
 8006220:	d02c      	beq.n	800627c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006226:	2b00      	cmp	r3, #0
 8006228:	d128      	bne.n	800627c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	3304      	adds	r3, #4
 800622e:	4618      	mov	r0, r3
 8006230:	f7fe fbb6 	bl	80049a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800624c:	4b0f      	ldr	r3, [pc, #60]	; (800628c <xTaskPriorityDisinherit+0xd4>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d903      	bls.n	800625c <xTaskPriorityDisinherit+0xa4>
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	4a0c      	ldr	r2, [pc, #48]	; (800628c <xTaskPriorityDisinherit+0xd4>)
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006260:	4613      	mov	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4a09      	ldr	r2, [pc, #36]	; (8006290 <xTaskPriorityDisinherit+0xd8>)
 800626a:	441a      	add	r2, r3
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	3304      	adds	r3, #4
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f7fe fb37 	bl	80048e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006278:	2301      	movs	r3, #1
 800627a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800627c:	697b      	ldr	r3, [r7, #20]
	}
 800627e:	4618      	mov	r0, r3
 8006280:	3718      	adds	r7, #24
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	2000128c 	.word	0x2000128c
 800628c:	20001768 	.word	0x20001768
 8006290:	20001290 	.word	0x20001290

08006294 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800629e:	4b21      	ldr	r3, [pc, #132]	; (8006324 <prvAddCurrentTaskToDelayedList+0x90>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062a4:	4b20      	ldr	r3, [pc, #128]	; (8006328 <prvAddCurrentTaskToDelayedList+0x94>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3304      	adds	r3, #4
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fe fb78 	bl	80049a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b6:	d10a      	bne.n	80062ce <prvAddCurrentTaskToDelayedList+0x3a>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d007      	beq.n	80062ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062be:	4b1a      	ldr	r3, [pc, #104]	; (8006328 <prvAddCurrentTaskToDelayedList+0x94>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3304      	adds	r3, #4
 80062c4:	4619      	mov	r1, r3
 80062c6:	4819      	ldr	r0, [pc, #100]	; (800632c <prvAddCurrentTaskToDelayedList+0x98>)
 80062c8:	f7fe fb0d 	bl	80048e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062cc:	e026      	b.n	800631c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4413      	add	r3, r2
 80062d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062d6:	4b14      	ldr	r3, [pc, #80]	; (8006328 <prvAddCurrentTaskToDelayedList+0x94>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d209      	bcs.n	80062fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062e6:	4b12      	ldr	r3, [pc, #72]	; (8006330 <prvAddCurrentTaskToDelayedList+0x9c>)
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	4b0f      	ldr	r3, [pc, #60]	; (8006328 <prvAddCurrentTaskToDelayedList+0x94>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3304      	adds	r3, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f7fe fb1b 	bl	800492e <vListInsert>
}
 80062f8:	e010      	b.n	800631c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062fa:	4b0e      	ldr	r3, [pc, #56]	; (8006334 <prvAddCurrentTaskToDelayedList+0xa0>)
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <prvAddCurrentTaskToDelayedList+0x94>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3304      	adds	r3, #4
 8006304:	4619      	mov	r1, r3
 8006306:	4610      	mov	r0, r2
 8006308:	f7fe fb11 	bl	800492e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800630c:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <prvAddCurrentTaskToDelayedList+0xa4>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	429a      	cmp	r2, r3
 8006314:	d202      	bcs.n	800631c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006316:	4a08      	ldr	r2, [pc, #32]	; (8006338 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	6013      	str	r3, [r2, #0]
}
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	20001764 	.word	0x20001764
 8006328:	2000128c 	.word	0x2000128c
 800632c:	2000174c 	.word	0x2000174c
 8006330:	2000171c 	.word	0x2000171c
 8006334:	20001718 	.word	0x20001718
 8006338:	20001780 	.word	0x20001780

0800633c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08a      	sub	sp, #40	; 0x28
 8006340:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006342:	2300      	movs	r3, #0
 8006344:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006346:	f000 fb07 	bl	8006958 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800634a:	4b1c      	ldr	r3, [pc, #112]	; (80063bc <xTimerCreateTimerTask+0x80>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d021      	beq.n	8006396 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006356:	2300      	movs	r3, #0
 8006358:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800635a:	1d3a      	adds	r2, r7, #4
 800635c:	f107 0108 	add.w	r1, r7, #8
 8006360:	f107 030c 	add.w	r3, r7, #12
 8006364:	4618      	mov	r0, r3
 8006366:	f7fe fa77 	bl	8004858 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	9202      	str	r2, [sp, #8]
 8006372:	9301      	str	r3, [sp, #4]
 8006374:	2302      	movs	r3, #2
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	2300      	movs	r3, #0
 800637a:	460a      	mov	r2, r1
 800637c:	4910      	ldr	r1, [pc, #64]	; (80063c0 <xTimerCreateTimerTask+0x84>)
 800637e:	4811      	ldr	r0, [pc, #68]	; (80063c4 <xTimerCreateTimerTask+0x88>)
 8006380:	f7ff f8de 	bl	8005540 <xTaskCreateStatic>
 8006384:	4603      	mov	r3, r0
 8006386:	4a10      	ldr	r2, [pc, #64]	; (80063c8 <xTimerCreateTimerTask+0x8c>)
 8006388:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800638a:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <xTimerCreateTimerTask+0x8c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006392:	2301      	movs	r3, #1
 8006394:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10a      	bne.n	80063b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	613b      	str	r3, [r7, #16]
}
 80063ae:	bf00      	nop
 80063b0:	e7fe      	b.n	80063b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80063b2:	697b      	ldr	r3, [r7, #20]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	200017bc 	.word	0x200017bc
 80063c0:	0800a690 	.word	0x0800a690
 80063c4:	08006501 	.word	0x08006501
 80063c8:	200017c0 	.word	0x200017c0

080063cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08a      	sub	sp, #40	; 0x28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80063da:	2300      	movs	r3, #0
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	623b      	str	r3, [r7, #32]
}
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80063fa:	4b1a      	ldr	r3, [pc, #104]	; (8006464 <xTimerGenericCommand+0x98>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d02a      	beq.n	8006458 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b05      	cmp	r3, #5
 8006412:	dc18      	bgt.n	8006446 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006414:	f7ff feb2 	bl	800617c <xTaskGetSchedulerState>
 8006418:	4603      	mov	r3, r0
 800641a:	2b02      	cmp	r3, #2
 800641c:	d109      	bne.n	8006432 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800641e:	4b11      	ldr	r3, [pc, #68]	; (8006464 <xTimerGenericCommand+0x98>)
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	f107 0110 	add.w	r1, r7, #16
 8006426:	2300      	movs	r3, #0
 8006428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800642a:	f7fe fc21 	bl	8004c70 <xQueueGenericSend>
 800642e:	6278      	str	r0, [r7, #36]	; 0x24
 8006430:	e012      	b.n	8006458 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006432:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <xTimerGenericCommand+0x98>)
 8006434:	6818      	ldr	r0, [r3, #0]
 8006436:	f107 0110 	add.w	r1, r7, #16
 800643a:	2300      	movs	r3, #0
 800643c:	2200      	movs	r2, #0
 800643e:	f7fe fc17 	bl	8004c70 <xQueueGenericSend>
 8006442:	6278      	str	r0, [r7, #36]	; 0x24
 8006444:	e008      	b.n	8006458 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006446:	4b07      	ldr	r3, [pc, #28]	; (8006464 <xTimerGenericCommand+0x98>)
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	f107 0110 	add.w	r1, r7, #16
 800644e:	2300      	movs	r3, #0
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	f7fe fd0b 	bl	8004e6c <xQueueGenericSendFromISR>
 8006456:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800645a:	4618      	mov	r0, r3
 800645c:	3728      	adds	r7, #40	; 0x28
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	200017bc 	.word	0x200017bc

08006468 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af02      	add	r7, sp, #8
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006472:	4b22      	ldr	r3, [pc, #136]	; (80064fc <prvProcessExpiredTimer+0x94>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	3304      	adds	r3, #4
 8006480:	4618      	mov	r0, r3
 8006482:	f7fe fa8d 	bl	80049a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d022      	beq.n	80064da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	699a      	ldr	r2, [r3, #24]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	18d1      	adds	r1, r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	6978      	ldr	r0, [r7, #20]
 80064a2:	f000 f8d1 	bl	8006648 <prvInsertTimerInActiveList>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01f      	beq.n	80064ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064ac:	2300      	movs	r3, #0
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	2300      	movs	r3, #0
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	2100      	movs	r1, #0
 80064b6:	6978      	ldr	r0, [r7, #20]
 80064b8:	f7ff ff88 	bl	80063cc <xTimerGenericCommand>
 80064bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d113      	bne.n	80064ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	60fb      	str	r3, [r7, #12]
}
 80064d6:	bf00      	nop
 80064d8:	e7fe      	b.n	80064d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064e0:	f023 0301 	bic.w	r3, r3, #1
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	6978      	ldr	r0, [r7, #20]
 80064f2:	4798      	blx	r3
}
 80064f4:	bf00      	nop
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	200017b4 	.word	0x200017b4

08006500 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006508:	f107 0308 	add.w	r3, r7, #8
 800650c:	4618      	mov	r0, r3
 800650e:	f000 f857 	bl	80065c0 <prvGetNextExpireTime>
 8006512:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4619      	mov	r1, r3
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 f803 	bl	8006524 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800651e:	f000 f8d5 	bl	80066cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006522:	e7f1      	b.n	8006508 <prvTimerTask+0x8>

08006524 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800652e:	f7ff fa43 	bl	80059b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006532:	f107 0308 	add.w	r3, r7, #8
 8006536:	4618      	mov	r0, r3
 8006538:	f000 f866 	bl	8006608 <prvSampleTimeNow>
 800653c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d130      	bne.n	80065a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10a      	bne.n	8006560 <prvProcessTimerOrBlockTask+0x3c>
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	429a      	cmp	r2, r3
 8006550:	d806      	bhi.n	8006560 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006552:	f7ff fa3f 	bl	80059d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006556:	68f9      	ldr	r1, [r7, #12]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff ff85 	bl	8006468 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800655e:	e024      	b.n	80065aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d008      	beq.n	8006578 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006566:	4b13      	ldr	r3, [pc, #76]	; (80065b4 <prvProcessTimerOrBlockTask+0x90>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <prvProcessTimerOrBlockTask+0x50>
 8006570:	2301      	movs	r3, #1
 8006572:	e000      	b.n	8006576 <prvProcessTimerOrBlockTask+0x52>
 8006574:	2300      	movs	r3, #0
 8006576:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006578:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <prvProcessTimerOrBlockTask+0x94>)
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	4619      	mov	r1, r3
 8006586:	f7fe ffa7 	bl	80054d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800658a:	f7ff fa23 	bl	80059d4 <xTaskResumeAll>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006594:	4b09      	ldr	r3, [pc, #36]	; (80065bc <prvProcessTimerOrBlockTask+0x98>)
 8006596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	f3bf 8f6f 	isb	sy
}
 80065a4:	e001      	b.n	80065aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80065a6:	f7ff fa15 	bl	80059d4 <xTaskResumeAll>
}
 80065aa:	bf00      	nop
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	200017b8 	.word	0x200017b8
 80065b8:	200017bc 	.word	0x200017bc
 80065bc:	e000ed04 	.word	0xe000ed04

080065c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80065c8:	4b0e      	ldr	r3, [pc, #56]	; (8006604 <prvGetNextExpireTime+0x44>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <prvGetNextExpireTime+0x16>
 80065d2:	2201      	movs	r2, #1
 80065d4:	e000      	b.n	80065d8 <prvGetNextExpireTime+0x18>
 80065d6:	2200      	movs	r2, #0
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d105      	bne.n	80065f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065e4:	4b07      	ldr	r3, [pc, #28]	; (8006604 <prvGetNextExpireTime+0x44>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	e001      	b.n	80065f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80065f4:	68fb      	ldr	r3, [r7, #12]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	200017b4 	.word	0x200017b4

08006608 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006610:	f7ff fa7e 	bl	8005b10 <xTaskGetTickCount>
 8006614:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006616:	4b0b      	ldr	r3, [pc, #44]	; (8006644 <prvSampleTimeNow+0x3c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	429a      	cmp	r2, r3
 800661e:	d205      	bcs.n	800662c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006620:	f000 f936 	bl	8006890 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	e002      	b.n	8006632 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006632:	4a04      	ldr	r2, [pc, #16]	; (8006644 <prvSampleTimeNow+0x3c>)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006638:	68fb      	ldr	r3, [r7, #12]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	200017c4 	.word	0x200017c4

08006648 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
 8006654:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006656:	2300      	movs	r3, #0
 8006658:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	429a      	cmp	r2, r3
 800666c:	d812      	bhi.n	8006694 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	1ad2      	subs	r2, r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	429a      	cmp	r2, r3
 800667a:	d302      	bcc.n	8006682 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800667c:	2301      	movs	r3, #1
 800667e:	617b      	str	r3, [r7, #20]
 8006680:	e01b      	b.n	80066ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006682:	4b10      	ldr	r3, [pc, #64]	; (80066c4 <prvInsertTimerInActiveList+0x7c>)
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	3304      	adds	r3, #4
 800668a:	4619      	mov	r1, r3
 800668c:	4610      	mov	r0, r2
 800668e:	f7fe f94e 	bl	800492e <vListInsert>
 8006692:	e012      	b.n	80066ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	429a      	cmp	r2, r3
 800669a:	d206      	bcs.n	80066aa <prvInsertTimerInActiveList+0x62>
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d302      	bcc.n	80066aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80066a4:	2301      	movs	r3, #1
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	e007      	b.n	80066ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066aa:	4b07      	ldr	r3, [pc, #28]	; (80066c8 <prvInsertTimerInActiveList+0x80>)
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3304      	adds	r3, #4
 80066b2:	4619      	mov	r1, r3
 80066b4:	4610      	mov	r0, r2
 80066b6:	f7fe f93a 	bl	800492e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80066ba:	697b      	ldr	r3, [r7, #20]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	200017b8 	.word	0x200017b8
 80066c8:	200017b4 	.word	0x200017b4

080066cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08e      	sub	sp, #56	; 0x38
 80066d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066d2:	e0ca      	b.n	800686a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	da18      	bge.n	800670c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80066da:	1d3b      	adds	r3, r7, #4
 80066dc:	3304      	adds	r3, #4
 80066de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	61fb      	str	r3, [r7, #28]
}
 80066f8:	bf00      	nop
 80066fa:	e7fe      	b.n	80066fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006702:	6850      	ldr	r0, [r2, #4]
 8006704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006706:	6892      	ldr	r2, [r2, #8]
 8006708:	4611      	mov	r1, r2
 800670a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	f2c0 80aa 	blt.w	8006868 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d004      	beq.n	800672a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	3304      	adds	r3, #4
 8006724:	4618      	mov	r0, r3
 8006726:	f7fe f93b 	bl	80049a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800672a:	463b      	mov	r3, r7
 800672c:	4618      	mov	r0, r3
 800672e:	f7ff ff6b 	bl	8006608 <prvSampleTimeNow>
 8006732:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b09      	cmp	r3, #9
 8006738:	f200 8097 	bhi.w	800686a <prvProcessReceivedCommands+0x19e>
 800673c:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <prvProcessReceivedCommands+0x78>)
 800673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006742:	bf00      	nop
 8006744:	0800676d 	.word	0x0800676d
 8006748:	0800676d 	.word	0x0800676d
 800674c:	0800676d 	.word	0x0800676d
 8006750:	080067e1 	.word	0x080067e1
 8006754:	080067f5 	.word	0x080067f5
 8006758:	0800683f 	.word	0x0800683f
 800675c:	0800676d 	.word	0x0800676d
 8006760:	0800676d 	.word	0x0800676d
 8006764:	080067e1 	.word	0x080067e1
 8006768:	080067f5 	.word	0x080067f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800676c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006772:	f043 0301 	orr.w	r3, r3, #1
 8006776:	b2da      	uxtb	r2, r3
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	18d1      	adds	r1, r2, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800678c:	f7ff ff5c 	bl	8006648 <prvInsertTimerInActiveList>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d069      	beq.n	800686a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800679c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800679e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d05e      	beq.n	800686a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	441a      	add	r2, r3
 80067b4:	2300      	movs	r3, #0
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	2300      	movs	r3, #0
 80067ba:	2100      	movs	r1, #0
 80067bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067be:	f7ff fe05 	bl	80063cc <xTimerGenericCommand>
 80067c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d14f      	bne.n	800686a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	61bb      	str	r3, [r7, #24]
}
 80067dc:	bf00      	nop
 80067de:	e7fe      	b.n	80067de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067e6:	f023 0301 	bic.w	r3, r3, #1
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80067f2:	e03a      	b.n	800686a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067fa:	f043 0301 	orr.w	r3, r3, #1
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10a      	bne.n	800682a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	617b      	str	r3, [r7, #20]
}
 8006826:	bf00      	nop
 8006828:	e7fe      	b.n	8006828 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	699a      	ldr	r2, [r3, #24]
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	18d1      	adds	r1, r2, r3
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006838:	f7ff ff06 	bl	8006648 <prvInsertTimerInActiveList>
					break;
 800683c:	e015      	b.n	800686a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d103      	bne.n	8006854 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800684c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800684e:	f000 fbdf 	bl	8007010 <vPortFree>
 8006852:	e00a      	b.n	800686a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800685a:	f023 0301 	bic.w	r3, r3, #1
 800685e:	b2da      	uxtb	r2, r3
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006866:	e000      	b.n	800686a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006868:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800686a:	4b08      	ldr	r3, [pc, #32]	; (800688c <prvProcessReceivedCommands+0x1c0>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	1d39      	adds	r1, r7, #4
 8006870:	2200      	movs	r2, #0
 8006872:	4618      	mov	r0, r3
 8006874:	f7fe fb96 	bl	8004fa4 <xQueueReceive>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	f47f af2a 	bne.w	80066d4 <prvProcessReceivedCommands+0x8>
	}
}
 8006880:	bf00      	nop
 8006882:	bf00      	nop
 8006884:	3730      	adds	r7, #48	; 0x30
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	200017bc 	.word	0x200017bc

08006890 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b088      	sub	sp, #32
 8006894:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006896:	e048      	b.n	800692a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006898:	4b2d      	ldr	r3, [pc, #180]	; (8006950 <prvSwitchTimerLists+0xc0>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a2:	4b2b      	ldr	r3, [pc, #172]	; (8006950 <prvSwitchTimerLists+0xc0>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	3304      	adds	r3, #4
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fe f875 	bl	80049a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d02e      	beq.n	800692a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	4413      	add	r3, r2
 80068d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d90e      	bls.n	80068fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068ea:	4b19      	ldr	r3, [pc, #100]	; (8006950 <prvSwitchTimerLists+0xc0>)
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3304      	adds	r3, #4
 80068f2:	4619      	mov	r1, r3
 80068f4:	4610      	mov	r0, r2
 80068f6:	f7fe f81a 	bl	800492e <vListInsert>
 80068fa:	e016      	b.n	800692a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068fc:	2300      	movs	r3, #0
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	2300      	movs	r3, #0
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	2100      	movs	r1, #0
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7ff fd60 	bl	80063cc <xTimerGenericCommand>
 800690c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10a      	bne.n	800692a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	603b      	str	r3, [r7, #0]
}
 8006926:	bf00      	nop
 8006928:	e7fe      	b.n	8006928 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800692a:	4b09      	ldr	r3, [pc, #36]	; (8006950 <prvSwitchTimerLists+0xc0>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1b1      	bne.n	8006898 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006934:	4b06      	ldr	r3, [pc, #24]	; (8006950 <prvSwitchTimerLists+0xc0>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800693a:	4b06      	ldr	r3, [pc, #24]	; (8006954 <prvSwitchTimerLists+0xc4>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a04      	ldr	r2, [pc, #16]	; (8006950 <prvSwitchTimerLists+0xc0>)
 8006940:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006942:	4a04      	ldr	r2, [pc, #16]	; (8006954 <prvSwitchTimerLists+0xc4>)
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	6013      	str	r3, [r2, #0]
}
 8006948:	bf00      	nop
 800694a:	3718      	adds	r7, #24
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	200017b4 	.word	0x200017b4
 8006954:	200017b8 	.word	0x200017b8

08006958 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800695e:	f000 f969 	bl	8006c34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006962:	4b15      	ldr	r3, [pc, #84]	; (80069b8 <prvCheckForValidListAndQueue+0x60>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d120      	bne.n	80069ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800696a:	4814      	ldr	r0, [pc, #80]	; (80069bc <prvCheckForValidListAndQueue+0x64>)
 800696c:	f7fd ff8e 	bl	800488c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006970:	4813      	ldr	r0, [pc, #76]	; (80069c0 <prvCheckForValidListAndQueue+0x68>)
 8006972:	f7fd ff8b 	bl	800488c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006976:	4b13      	ldr	r3, [pc, #76]	; (80069c4 <prvCheckForValidListAndQueue+0x6c>)
 8006978:	4a10      	ldr	r2, [pc, #64]	; (80069bc <prvCheckForValidListAndQueue+0x64>)
 800697a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800697c:	4b12      	ldr	r3, [pc, #72]	; (80069c8 <prvCheckForValidListAndQueue+0x70>)
 800697e:	4a10      	ldr	r2, [pc, #64]	; (80069c0 <prvCheckForValidListAndQueue+0x68>)
 8006980:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006982:	2300      	movs	r3, #0
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	4b11      	ldr	r3, [pc, #68]	; (80069cc <prvCheckForValidListAndQueue+0x74>)
 8006988:	4a11      	ldr	r2, [pc, #68]	; (80069d0 <prvCheckForValidListAndQueue+0x78>)
 800698a:	2110      	movs	r1, #16
 800698c:	200a      	movs	r0, #10
 800698e:	f7fe f899 	bl	8004ac4 <xQueueGenericCreateStatic>
 8006992:	4603      	mov	r3, r0
 8006994:	4a08      	ldr	r2, [pc, #32]	; (80069b8 <prvCheckForValidListAndQueue+0x60>)
 8006996:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006998:	4b07      	ldr	r3, [pc, #28]	; (80069b8 <prvCheckForValidListAndQueue+0x60>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d005      	beq.n	80069ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80069a0:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <prvCheckForValidListAndQueue+0x60>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	490b      	ldr	r1, [pc, #44]	; (80069d4 <prvCheckForValidListAndQueue+0x7c>)
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe fd6c 	bl	8005484 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069ac:	f000 f972 	bl	8006c94 <vPortExitCritical>
}
 80069b0:	bf00      	nop
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	200017bc 	.word	0x200017bc
 80069bc:	2000178c 	.word	0x2000178c
 80069c0:	200017a0 	.word	0x200017a0
 80069c4:	200017b4 	.word	0x200017b4
 80069c8:	200017b8 	.word	0x200017b8
 80069cc:	20001868 	.word	0x20001868
 80069d0:	200017c8 	.word	0x200017c8
 80069d4:	0800a698 	.word	0x0800a698

080069d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	3b04      	subs	r3, #4
 80069e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	3b04      	subs	r3, #4
 80069f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f023 0201 	bic.w	r2, r3, #1
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3b04      	subs	r3, #4
 8006a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a08:	4a0c      	ldr	r2, [pc, #48]	; (8006a3c <pxPortInitialiseStack+0x64>)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3b14      	subs	r3, #20
 8006a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3b04      	subs	r3, #4
 8006a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f06f 0202 	mvn.w	r2, #2
 8006a26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3b20      	subs	r3, #32
 8006a2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	08006a41 	.word	0x08006a41

08006a40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a46:	2300      	movs	r3, #0
 8006a48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a4a:	4b12      	ldr	r3, [pc, #72]	; (8006a94 <prvTaskExitError+0x54>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a52:	d00a      	beq.n	8006a6a <prvTaskExitError+0x2a>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	60fb      	str	r3, [r7, #12]
}
 8006a66:	bf00      	nop
 8006a68:	e7fe      	b.n	8006a68 <prvTaskExitError+0x28>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	60bb      	str	r3, [r7, #8]
}
 8006a7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a7e:	bf00      	nop
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0fc      	beq.n	8006a80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a86:	bf00      	nop
 8006a88:	bf00      	nop
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	2000000c 	.word	0x2000000c
	...

08006aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006aa0:	4b07      	ldr	r3, [pc, #28]	; (8006ac0 <pxCurrentTCBConst2>)
 8006aa2:	6819      	ldr	r1, [r3, #0]
 8006aa4:	6808      	ldr	r0, [r1, #0]
 8006aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aaa:	f380 8809 	msr	PSP, r0
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f04f 0000 	mov.w	r0, #0
 8006ab6:	f380 8811 	msr	BASEPRI, r0
 8006aba:	4770      	bx	lr
 8006abc:	f3af 8000 	nop.w

08006ac0 <pxCurrentTCBConst2>:
 8006ac0:	2000128c 	.word	0x2000128c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop

08006ac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ac8:	4808      	ldr	r0, [pc, #32]	; (8006aec <prvPortStartFirstTask+0x24>)
 8006aca:	6800      	ldr	r0, [r0, #0]
 8006acc:	6800      	ldr	r0, [r0, #0]
 8006ace:	f380 8808 	msr	MSP, r0
 8006ad2:	f04f 0000 	mov.w	r0, #0
 8006ad6:	f380 8814 	msr	CONTROL, r0
 8006ada:	b662      	cpsie	i
 8006adc:	b661      	cpsie	f
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	df00      	svc	0
 8006ae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006aea:	bf00      	nop
 8006aec:	e000ed08 	.word	0xe000ed08

08006af0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006af6:	4b46      	ldr	r3, [pc, #280]	; (8006c10 <xPortStartScheduler+0x120>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a46      	ldr	r2, [pc, #280]	; (8006c14 <xPortStartScheduler+0x124>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d10a      	bne.n	8006b16 <xPortStartScheduler+0x26>
	__asm volatile
 8006b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	613b      	str	r3, [r7, #16]
}
 8006b12:	bf00      	nop
 8006b14:	e7fe      	b.n	8006b14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b16:	4b3e      	ldr	r3, [pc, #248]	; (8006c10 <xPortStartScheduler+0x120>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a3f      	ldr	r2, [pc, #252]	; (8006c18 <xPortStartScheduler+0x128>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d10a      	bne.n	8006b36 <xPortStartScheduler+0x46>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	60fb      	str	r3, [r7, #12]
}
 8006b32:	bf00      	nop
 8006b34:	e7fe      	b.n	8006b34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b36:	4b39      	ldr	r3, [pc, #228]	; (8006c1c <xPortStartScheduler+0x12c>)
 8006b38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	22ff      	movs	r2, #255	; 0xff
 8006b46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b50:	78fb      	ldrb	r3, [r7, #3]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	4b31      	ldr	r3, [pc, #196]	; (8006c20 <xPortStartScheduler+0x130>)
 8006b5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b5e:	4b31      	ldr	r3, [pc, #196]	; (8006c24 <xPortStartScheduler+0x134>)
 8006b60:	2207      	movs	r2, #7
 8006b62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b64:	e009      	b.n	8006b7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006b66:	4b2f      	ldr	r3, [pc, #188]	; (8006c24 <xPortStartScheduler+0x134>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	4a2d      	ldr	r2, [pc, #180]	; (8006c24 <xPortStartScheduler+0x134>)
 8006b6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b70:	78fb      	ldrb	r3, [r7, #3]
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b7a:	78fb      	ldrb	r3, [r7, #3]
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b82:	2b80      	cmp	r3, #128	; 0x80
 8006b84:	d0ef      	beq.n	8006b66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b86:	4b27      	ldr	r3, [pc, #156]	; (8006c24 <xPortStartScheduler+0x134>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f1c3 0307 	rsb	r3, r3, #7
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d00a      	beq.n	8006ba8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	60bb      	str	r3, [r7, #8]
}
 8006ba4:	bf00      	nop
 8006ba6:	e7fe      	b.n	8006ba6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ba8:	4b1e      	ldr	r3, [pc, #120]	; (8006c24 <xPortStartScheduler+0x134>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	021b      	lsls	r3, r3, #8
 8006bae:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <xPortStartScheduler+0x134>)
 8006bb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bb2:	4b1c      	ldr	r3, [pc, #112]	; (8006c24 <xPortStartScheduler+0x134>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bba:	4a1a      	ldr	r2, [pc, #104]	; (8006c24 <xPortStartScheduler+0x134>)
 8006bbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bc6:	4b18      	ldr	r3, [pc, #96]	; (8006c28 <xPortStartScheduler+0x138>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a17      	ldr	r2, [pc, #92]	; (8006c28 <xPortStartScheduler+0x138>)
 8006bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006bd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006bd2:	4b15      	ldr	r3, [pc, #84]	; (8006c28 <xPortStartScheduler+0x138>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a14      	ldr	r2, [pc, #80]	; (8006c28 <xPortStartScheduler+0x138>)
 8006bd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006bdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006bde:	f000 f8dd 	bl	8006d9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006be2:	4b12      	ldr	r3, [pc, #72]	; (8006c2c <xPortStartScheduler+0x13c>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006be8:	f000 f8fc 	bl	8006de4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006bec:	4b10      	ldr	r3, [pc, #64]	; (8006c30 <xPortStartScheduler+0x140>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a0f      	ldr	r2, [pc, #60]	; (8006c30 <xPortStartScheduler+0x140>)
 8006bf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006bf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006bf8:	f7ff ff66 	bl	8006ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bfc:	f7ff f852 	bl	8005ca4 <vTaskSwitchContext>
	prvTaskExitError();
 8006c00:	f7ff ff1e 	bl	8006a40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	e000ed00 	.word	0xe000ed00
 8006c14:	410fc271 	.word	0x410fc271
 8006c18:	410fc270 	.word	0x410fc270
 8006c1c:	e000e400 	.word	0xe000e400
 8006c20:	200018b8 	.word	0x200018b8
 8006c24:	200018bc 	.word	0x200018bc
 8006c28:	e000ed20 	.word	0xe000ed20
 8006c2c:	2000000c 	.word	0x2000000c
 8006c30:	e000ef34 	.word	0xe000ef34

08006c34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	607b      	str	r3, [r7, #4]
}
 8006c4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c4e:	4b0f      	ldr	r3, [pc, #60]	; (8006c8c <vPortEnterCritical+0x58>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3301      	adds	r3, #1
 8006c54:	4a0d      	ldr	r2, [pc, #52]	; (8006c8c <vPortEnterCritical+0x58>)
 8006c56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c58:	4b0c      	ldr	r3, [pc, #48]	; (8006c8c <vPortEnterCritical+0x58>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d10f      	bne.n	8006c80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c60:	4b0b      	ldr	r3, [pc, #44]	; (8006c90 <vPortEnterCritical+0x5c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00a      	beq.n	8006c80 <vPortEnterCritical+0x4c>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	603b      	str	r3, [r7, #0]
}
 8006c7c:	bf00      	nop
 8006c7e:	e7fe      	b.n	8006c7e <vPortEnterCritical+0x4a>
	}
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	2000000c 	.word	0x2000000c
 8006c90:	e000ed04 	.word	0xe000ed04

08006c94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c9a:	4b12      	ldr	r3, [pc, #72]	; (8006ce4 <vPortExitCritical+0x50>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10a      	bne.n	8006cb8 <vPortExitCritical+0x24>
	__asm volatile
 8006ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	607b      	str	r3, [r7, #4]
}
 8006cb4:	bf00      	nop
 8006cb6:	e7fe      	b.n	8006cb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006cb8:	4b0a      	ldr	r3, [pc, #40]	; (8006ce4 <vPortExitCritical+0x50>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	4a09      	ldr	r2, [pc, #36]	; (8006ce4 <vPortExitCritical+0x50>)
 8006cc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006cc2:	4b08      	ldr	r3, [pc, #32]	; (8006ce4 <vPortExitCritical+0x50>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d105      	bne.n	8006cd6 <vPortExitCritical+0x42>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	f383 8811 	msr	BASEPRI, r3
}
 8006cd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006cd6:	bf00      	nop
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	2000000c 	.word	0x2000000c
	...

08006cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006cf0:	f3ef 8009 	mrs	r0, PSP
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	4b15      	ldr	r3, [pc, #84]	; (8006d50 <pxCurrentTCBConst>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	f01e 0f10 	tst.w	lr, #16
 8006d00:	bf08      	it	eq
 8006d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d0a:	6010      	str	r0, [r2, #0]
 8006d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d14:	f380 8811 	msr	BASEPRI, r0
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f7fe ffc0 	bl	8005ca4 <vTaskSwitchContext>
 8006d24:	f04f 0000 	mov.w	r0, #0
 8006d28:	f380 8811 	msr	BASEPRI, r0
 8006d2c:	bc09      	pop	{r0, r3}
 8006d2e:	6819      	ldr	r1, [r3, #0]
 8006d30:	6808      	ldr	r0, [r1, #0]
 8006d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d36:	f01e 0f10 	tst.w	lr, #16
 8006d3a:	bf08      	it	eq
 8006d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d40:	f380 8809 	msr	PSP, r0
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	f3af 8000 	nop.w

08006d50 <pxCurrentTCBConst>:
 8006d50:	2000128c 	.word	0x2000128c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop

08006d58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	607b      	str	r3, [r7, #4]
}
 8006d70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d72:	f7fe fedd 	bl	8005b30 <xTaskIncrementTick>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d7c:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <xPortSysTickHandler+0x40>)
 8006d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	2300      	movs	r3, #0
 8006d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	f383 8811 	msr	BASEPRI, r3
}
 8006d8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d90:	bf00      	nop
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006da0:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <vPortSetupTimerInterrupt+0x34>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006da6:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <vPortSetupTimerInterrupt+0x38>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006dac:	4b0a      	ldr	r3, [pc, #40]	; (8006dd8 <vPortSetupTimerInterrupt+0x3c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a0a      	ldr	r2, [pc, #40]	; (8006ddc <vPortSetupTimerInterrupt+0x40>)
 8006db2:	fba2 2303 	umull	r2, r3, r2, r3
 8006db6:	099b      	lsrs	r3, r3, #6
 8006db8:	4a09      	ldr	r2, [pc, #36]	; (8006de0 <vPortSetupTimerInterrupt+0x44>)
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dbe:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <vPortSetupTimerInterrupt+0x34>)
 8006dc0:	2207      	movs	r2, #7
 8006dc2:	601a      	str	r2, [r3, #0]
}
 8006dc4:	bf00      	nop
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	e000e010 	.word	0xe000e010
 8006dd4:	e000e018 	.word	0xe000e018
 8006dd8:	20000000 	.word	0x20000000
 8006ddc:	10624dd3 	.word	0x10624dd3
 8006de0:	e000e014 	.word	0xe000e014

08006de4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006de4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006df4 <vPortEnableVFP+0x10>
 8006de8:	6801      	ldr	r1, [r0, #0]
 8006dea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006dee:	6001      	str	r1, [r0, #0]
 8006df0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006df2:	bf00      	nop
 8006df4:	e000ed88 	.word	0xe000ed88

08006df8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006dfe:	f3ef 8305 	mrs	r3, IPSR
 8006e02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b0f      	cmp	r3, #15
 8006e08:	d914      	bls.n	8006e34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e0a:	4a17      	ldr	r2, [pc, #92]	; (8006e68 <vPortValidateInterruptPriority+0x70>)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4413      	add	r3, r2
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e14:	4b15      	ldr	r3, [pc, #84]	; (8006e6c <vPortValidateInterruptPriority+0x74>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	7afa      	ldrb	r2, [r7, #11]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d20a      	bcs.n	8006e34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	607b      	str	r3, [r7, #4]
}
 8006e30:	bf00      	nop
 8006e32:	e7fe      	b.n	8006e32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e34:	4b0e      	ldr	r3, [pc, #56]	; (8006e70 <vPortValidateInterruptPriority+0x78>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e3c:	4b0d      	ldr	r3, [pc, #52]	; (8006e74 <vPortValidateInterruptPriority+0x7c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d90a      	bls.n	8006e5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	603b      	str	r3, [r7, #0]
}
 8006e56:	bf00      	nop
 8006e58:	e7fe      	b.n	8006e58 <vPortValidateInterruptPriority+0x60>
	}
 8006e5a:	bf00      	nop
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	e000e3f0 	.word	0xe000e3f0
 8006e6c:	200018b8 	.word	0x200018b8
 8006e70:	e000ed0c 	.word	0xe000ed0c
 8006e74:	200018bc 	.word	0x200018bc

08006e78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08a      	sub	sp, #40	; 0x28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e80:	2300      	movs	r3, #0
 8006e82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e84:	f7fe fd98 	bl	80059b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e88:	4b5b      	ldr	r3, [pc, #364]	; (8006ff8 <pvPortMalloc+0x180>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e90:	f000 f920 	bl	80070d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e94:	4b59      	ldr	r3, [pc, #356]	; (8006ffc <pvPortMalloc+0x184>)
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f040 8093 	bne.w	8006fc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01d      	beq.n	8006ee4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ea8:	2208      	movs	r2, #8
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4413      	add	r3, r2
 8006eae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f003 0307 	and.w	r3, r3, #7
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d014      	beq.n	8006ee4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f023 0307 	bic.w	r3, r3, #7
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00a      	beq.n	8006ee4 <pvPortMalloc+0x6c>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	617b      	str	r3, [r7, #20]
}
 8006ee0:	bf00      	nop
 8006ee2:	e7fe      	b.n	8006ee2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d06e      	beq.n	8006fc8 <pvPortMalloc+0x150>
 8006eea:	4b45      	ldr	r3, [pc, #276]	; (8007000 <pvPortMalloc+0x188>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d869      	bhi.n	8006fc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ef4:	4b43      	ldr	r3, [pc, #268]	; (8007004 <pvPortMalloc+0x18c>)
 8006ef6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ef8:	4b42      	ldr	r3, [pc, #264]	; (8007004 <pvPortMalloc+0x18c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006efe:	e004      	b.n	8006f0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d903      	bls.n	8006f1c <pvPortMalloc+0xa4>
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1f1      	bne.n	8006f00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f1c:	4b36      	ldr	r3, [pc, #216]	; (8006ff8 <pvPortMalloc+0x180>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d050      	beq.n	8006fc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2208      	movs	r2, #8
 8006f2c:	4413      	add	r3, r2
 8006f2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	1ad2      	subs	r2, r2, r3
 8006f40:	2308      	movs	r3, #8
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d91f      	bls.n	8006f88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	f003 0307 	and.w	r3, r3, #7
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00a      	beq.n	8006f70 <pvPortMalloc+0xf8>
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	613b      	str	r3, [r7, #16]
}
 8006f6c:	bf00      	nop
 8006f6e:	e7fe      	b.n	8006f6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	1ad2      	subs	r2, r2, r3
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f82:	69b8      	ldr	r0, [r7, #24]
 8006f84:	f000 f908 	bl	8007198 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f88:	4b1d      	ldr	r3, [pc, #116]	; (8007000 <pvPortMalloc+0x188>)
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	4a1b      	ldr	r2, [pc, #108]	; (8007000 <pvPortMalloc+0x188>)
 8006f94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f96:	4b1a      	ldr	r3, [pc, #104]	; (8007000 <pvPortMalloc+0x188>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	4b1b      	ldr	r3, [pc, #108]	; (8007008 <pvPortMalloc+0x190>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d203      	bcs.n	8006faa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fa2:	4b17      	ldr	r3, [pc, #92]	; (8007000 <pvPortMalloc+0x188>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a18      	ldr	r2, [pc, #96]	; (8007008 <pvPortMalloc+0x190>)
 8006fa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	4b13      	ldr	r3, [pc, #76]	; (8006ffc <pvPortMalloc+0x184>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	2200      	movs	r2, #0
 8006fbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006fbe:	4b13      	ldr	r3, [pc, #76]	; (800700c <pvPortMalloc+0x194>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	4a11      	ldr	r2, [pc, #68]	; (800700c <pvPortMalloc+0x194>)
 8006fc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fc8:	f7fe fd04 	bl	80059d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <pvPortMalloc+0x174>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	60fb      	str	r3, [r7, #12]
}
 8006fe8:	bf00      	nop
 8006fea:	e7fe      	b.n	8006fea <pvPortMalloc+0x172>
	return pvReturn;
 8006fec:	69fb      	ldr	r3, [r7, #28]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3728      	adds	r7, #40	; 0x28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	200054c8 	.word	0x200054c8
 8006ffc:	200054dc 	.word	0x200054dc
 8007000:	200054cc 	.word	0x200054cc
 8007004:	200054c0 	.word	0x200054c0
 8007008:	200054d0 	.word	0x200054d0
 800700c:	200054d4 	.word	0x200054d4

08007010 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d04d      	beq.n	80070be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007022:	2308      	movs	r3, #8
 8007024:	425b      	negs	r3, r3
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	4413      	add	r3, r2
 800702a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	4b24      	ldr	r3, [pc, #144]	; (80070c8 <vPortFree+0xb8>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4013      	ands	r3, r2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <vPortFree+0x44>
	__asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	60fb      	str	r3, [r7, #12]
}
 8007050:	bf00      	nop
 8007052:	e7fe      	b.n	8007052 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00a      	beq.n	8007072 <vPortFree+0x62>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	60bb      	str	r3, [r7, #8]
}
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	4b14      	ldr	r3, [pc, #80]	; (80070c8 <vPortFree+0xb8>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4013      	ands	r3, r2
 800707c:	2b00      	cmp	r3, #0
 800707e:	d01e      	beq.n	80070be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d11a      	bne.n	80070be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	4b0e      	ldr	r3, [pc, #56]	; (80070c8 <vPortFree+0xb8>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	43db      	mvns	r3, r3
 8007092:	401a      	ands	r2, r3
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007098:	f7fe fc8e 	bl	80059b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	4b0a      	ldr	r3, [pc, #40]	; (80070cc <vPortFree+0xbc>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4413      	add	r3, r2
 80070a6:	4a09      	ldr	r2, [pc, #36]	; (80070cc <vPortFree+0xbc>)
 80070a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070aa:	6938      	ldr	r0, [r7, #16]
 80070ac:	f000 f874 	bl	8007198 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80070b0:	4b07      	ldr	r3, [pc, #28]	; (80070d0 <vPortFree+0xc0>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3301      	adds	r3, #1
 80070b6:	4a06      	ldr	r2, [pc, #24]	; (80070d0 <vPortFree+0xc0>)
 80070b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80070ba:	f7fe fc8b 	bl	80059d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070be:	bf00      	nop
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	200054dc 	.word	0x200054dc
 80070cc:	200054cc 	.word	0x200054cc
 80070d0:	200054d8 	.word	0x200054d8

080070d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80070de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070e0:	4b27      	ldr	r3, [pc, #156]	; (8007180 <prvHeapInit+0xac>)
 80070e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00c      	beq.n	8007108 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3307      	adds	r3, #7
 80070f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0307 	bic.w	r3, r3, #7
 80070fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	4a1f      	ldr	r2, [pc, #124]	; (8007180 <prvHeapInit+0xac>)
 8007104:	4413      	add	r3, r2
 8007106:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800710c:	4a1d      	ldr	r2, [pc, #116]	; (8007184 <prvHeapInit+0xb0>)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007112:	4b1c      	ldr	r3, [pc, #112]	; (8007184 <prvHeapInit+0xb0>)
 8007114:	2200      	movs	r2, #0
 8007116:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	4413      	add	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007120:	2208      	movs	r2, #8
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	1a9b      	subs	r3, r3, r2
 8007126:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 0307 	bic.w	r3, r3, #7
 800712e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4a15      	ldr	r2, [pc, #84]	; (8007188 <prvHeapInit+0xb4>)
 8007134:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007136:	4b14      	ldr	r3, [pc, #80]	; (8007188 <prvHeapInit+0xb4>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2200      	movs	r2, #0
 800713c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800713e:	4b12      	ldr	r3, [pc, #72]	; (8007188 <prvHeapInit+0xb4>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2200      	movs	r2, #0
 8007144:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	1ad2      	subs	r2, r2, r3
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007154:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <prvHeapInit+0xb4>)
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	4a0a      	ldr	r2, [pc, #40]	; (800718c <prvHeapInit+0xb8>)
 8007162:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	4a09      	ldr	r2, [pc, #36]	; (8007190 <prvHeapInit+0xbc>)
 800716a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800716c:	4b09      	ldr	r3, [pc, #36]	; (8007194 <prvHeapInit+0xc0>)
 800716e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007172:	601a      	str	r2, [r3, #0]
}
 8007174:	bf00      	nop
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	200018c0 	.word	0x200018c0
 8007184:	200054c0 	.word	0x200054c0
 8007188:	200054c8 	.word	0x200054c8
 800718c:	200054d0 	.word	0x200054d0
 8007190:	200054cc 	.word	0x200054cc
 8007194:	200054dc 	.word	0x200054dc

08007198 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071a0:	4b28      	ldr	r3, [pc, #160]	; (8007244 <prvInsertBlockIntoFreeList+0xac>)
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	e002      	b.n	80071ac <prvInsertBlockIntoFreeList+0x14>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d8f7      	bhi.n	80071a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	4413      	add	r3, r2
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d108      	bne.n	80071da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	441a      	add	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	441a      	add	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d118      	bne.n	8007220 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	4b15      	ldr	r3, [pc, #84]	; (8007248 <prvInsertBlockIntoFreeList+0xb0>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d00d      	beq.n	8007216 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	441a      	add	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	e008      	b.n	8007228 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007216:	4b0c      	ldr	r3, [pc, #48]	; (8007248 <prvInsertBlockIntoFreeList+0xb0>)
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	e003      	b.n	8007228 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	429a      	cmp	r2, r3
 800722e:	d002      	beq.n	8007236 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007236:	bf00      	nop
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	200054c0 	.word	0x200054c0
 8007248:	200054c8 	.word	0x200054c8

0800724c <__errno>:
 800724c:	4b01      	ldr	r3, [pc, #4]	; (8007254 <__errno+0x8>)
 800724e:	6818      	ldr	r0, [r3, #0]
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	20000010 	.word	0x20000010

08007258 <__libc_init_array>:
 8007258:	b570      	push	{r4, r5, r6, lr}
 800725a:	4d0d      	ldr	r5, [pc, #52]	; (8007290 <__libc_init_array+0x38>)
 800725c:	4c0d      	ldr	r4, [pc, #52]	; (8007294 <__libc_init_array+0x3c>)
 800725e:	1b64      	subs	r4, r4, r5
 8007260:	10a4      	asrs	r4, r4, #2
 8007262:	2600      	movs	r6, #0
 8007264:	42a6      	cmp	r6, r4
 8007266:	d109      	bne.n	800727c <__libc_init_array+0x24>
 8007268:	4d0b      	ldr	r5, [pc, #44]	; (8007298 <__libc_init_array+0x40>)
 800726a:	4c0c      	ldr	r4, [pc, #48]	; (800729c <__libc_init_array+0x44>)
 800726c:	f003 f9ae 	bl	800a5cc <_init>
 8007270:	1b64      	subs	r4, r4, r5
 8007272:	10a4      	asrs	r4, r4, #2
 8007274:	2600      	movs	r6, #0
 8007276:	42a6      	cmp	r6, r4
 8007278:	d105      	bne.n	8007286 <__libc_init_array+0x2e>
 800727a:	bd70      	pop	{r4, r5, r6, pc}
 800727c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007280:	4798      	blx	r3
 8007282:	3601      	adds	r6, #1
 8007284:	e7ee      	b.n	8007264 <__libc_init_array+0xc>
 8007286:	f855 3b04 	ldr.w	r3, [r5], #4
 800728a:	4798      	blx	r3
 800728c:	3601      	adds	r6, #1
 800728e:	e7f2      	b.n	8007276 <__libc_init_array+0x1e>
 8007290:	0800abd0 	.word	0x0800abd0
 8007294:	0800abd0 	.word	0x0800abd0
 8007298:	0800abd0 	.word	0x0800abd0
 800729c:	0800abd4 	.word	0x0800abd4

080072a0 <memcpy>:
 80072a0:	440a      	add	r2, r1
 80072a2:	4291      	cmp	r1, r2
 80072a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80072a8:	d100      	bne.n	80072ac <memcpy+0xc>
 80072aa:	4770      	bx	lr
 80072ac:	b510      	push	{r4, lr}
 80072ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072b6:	4291      	cmp	r1, r2
 80072b8:	d1f9      	bne.n	80072ae <memcpy+0xe>
 80072ba:	bd10      	pop	{r4, pc}

080072bc <memset>:
 80072bc:	4402      	add	r2, r0
 80072be:	4603      	mov	r3, r0
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d100      	bne.n	80072c6 <memset+0xa>
 80072c4:	4770      	bx	lr
 80072c6:	f803 1b01 	strb.w	r1, [r3], #1
 80072ca:	e7f9      	b.n	80072c0 <memset+0x4>

080072cc <__cvt>:
 80072cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072d0:	ec55 4b10 	vmov	r4, r5, d0
 80072d4:	2d00      	cmp	r5, #0
 80072d6:	460e      	mov	r6, r1
 80072d8:	4619      	mov	r1, r3
 80072da:	462b      	mov	r3, r5
 80072dc:	bfbb      	ittet	lt
 80072de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80072e2:	461d      	movlt	r5, r3
 80072e4:	2300      	movge	r3, #0
 80072e6:	232d      	movlt	r3, #45	; 0x2d
 80072e8:	700b      	strb	r3, [r1, #0]
 80072ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80072f0:	4691      	mov	r9, r2
 80072f2:	f023 0820 	bic.w	r8, r3, #32
 80072f6:	bfbc      	itt	lt
 80072f8:	4622      	movlt	r2, r4
 80072fa:	4614      	movlt	r4, r2
 80072fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007300:	d005      	beq.n	800730e <__cvt+0x42>
 8007302:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007306:	d100      	bne.n	800730a <__cvt+0x3e>
 8007308:	3601      	adds	r6, #1
 800730a:	2102      	movs	r1, #2
 800730c:	e000      	b.n	8007310 <__cvt+0x44>
 800730e:	2103      	movs	r1, #3
 8007310:	ab03      	add	r3, sp, #12
 8007312:	9301      	str	r3, [sp, #4]
 8007314:	ab02      	add	r3, sp, #8
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	ec45 4b10 	vmov	d0, r4, r5
 800731c:	4653      	mov	r3, sl
 800731e:	4632      	mov	r2, r6
 8007320:	f000 fd1e 	bl	8007d60 <_dtoa_r>
 8007324:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007328:	4607      	mov	r7, r0
 800732a:	d102      	bne.n	8007332 <__cvt+0x66>
 800732c:	f019 0f01 	tst.w	r9, #1
 8007330:	d022      	beq.n	8007378 <__cvt+0xac>
 8007332:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007336:	eb07 0906 	add.w	r9, r7, r6
 800733a:	d110      	bne.n	800735e <__cvt+0x92>
 800733c:	783b      	ldrb	r3, [r7, #0]
 800733e:	2b30      	cmp	r3, #48	; 0x30
 8007340:	d10a      	bne.n	8007358 <__cvt+0x8c>
 8007342:	2200      	movs	r2, #0
 8007344:	2300      	movs	r3, #0
 8007346:	4620      	mov	r0, r4
 8007348:	4629      	mov	r1, r5
 800734a:	f7f9 fbbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800734e:	b918      	cbnz	r0, 8007358 <__cvt+0x8c>
 8007350:	f1c6 0601 	rsb	r6, r6, #1
 8007354:	f8ca 6000 	str.w	r6, [sl]
 8007358:	f8da 3000 	ldr.w	r3, [sl]
 800735c:	4499      	add	r9, r3
 800735e:	2200      	movs	r2, #0
 8007360:	2300      	movs	r3, #0
 8007362:	4620      	mov	r0, r4
 8007364:	4629      	mov	r1, r5
 8007366:	f7f9 fbaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800736a:	b108      	cbz	r0, 8007370 <__cvt+0xa4>
 800736c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007370:	2230      	movs	r2, #48	; 0x30
 8007372:	9b03      	ldr	r3, [sp, #12]
 8007374:	454b      	cmp	r3, r9
 8007376:	d307      	bcc.n	8007388 <__cvt+0xbc>
 8007378:	9b03      	ldr	r3, [sp, #12]
 800737a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800737c:	1bdb      	subs	r3, r3, r7
 800737e:	4638      	mov	r0, r7
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	b004      	add	sp, #16
 8007384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007388:	1c59      	adds	r1, r3, #1
 800738a:	9103      	str	r1, [sp, #12]
 800738c:	701a      	strb	r2, [r3, #0]
 800738e:	e7f0      	b.n	8007372 <__cvt+0xa6>

08007390 <__exponent>:
 8007390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007392:	4603      	mov	r3, r0
 8007394:	2900      	cmp	r1, #0
 8007396:	bfb8      	it	lt
 8007398:	4249      	neglt	r1, r1
 800739a:	f803 2b02 	strb.w	r2, [r3], #2
 800739e:	bfb4      	ite	lt
 80073a0:	222d      	movlt	r2, #45	; 0x2d
 80073a2:	222b      	movge	r2, #43	; 0x2b
 80073a4:	2909      	cmp	r1, #9
 80073a6:	7042      	strb	r2, [r0, #1]
 80073a8:	dd2a      	ble.n	8007400 <__exponent+0x70>
 80073aa:	f10d 0407 	add.w	r4, sp, #7
 80073ae:	46a4      	mov	ip, r4
 80073b0:	270a      	movs	r7, #10
 80073b2:	46a6      	mov	lr, r4
 80073b4:	460a      	mov	r2, r1
 80073b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80073ba:	fb07 1516 	mls	r5, r7, r6, r1
 80073be:	3530      	adds	r5, #48	; 0x30
 80073c0:	2a63      	cmp	r2, #99	; 0x63
 80073c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80073c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80073ca:	4631      	mov	r1, r6
 80073cc:	dcf1      	bgt.n	80073b2 <__exponent+0x22>
 80073ce:	3130      	adds	r1, #48	; 0x30
 80073d0:	f1ae 0502 	sub.w	r5, lr, #2
 80073d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80073d8:	1c44      	adds	r4, r0, #1
 80073da:	4629      	mov	r1, r5
 80073dc:	4561      	cmp	r1, ip
 80073de:	d30a      	bcc.n	80073f6 <__exponent+0x66>
 80073e0:	f10d 0209 	add.w	r2, sp, #9
 80073e4:	eba2 020e 	sub.w	r2, r2, lr
 80073e8:	4565      	cmp	r5, ip
 80073ea:	bf88      	it	hi
 80073ec:	2200      	movhi	r2, #0
 80073ee:	4413      	add	r3, r2
 80073f0:	1a18      	subs	r0, r3, r0
 80073f2:	b003      	add	sp, #12
 80073f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80073fe:	e7ed      	b.n	80073dc <__exponent+0x4c>
 8007400:	2330      	movs	r3, #48	; 0x30
 8007402:	3130      	adds	r1, #48	; 0x30
 8007404:	7083      	strb	r3, [r0, #2]
 8007406:	70c1      	strb	r1, [r0, #3]
 8007408:	1d03      	adds	r3, r0, #4
 800740a:	e7f1      	b.n	80073f0 <__exponent+0x60>

0800740c <_printf_float>:
 800740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007410:	ed2d 8b02 	vpush	{d8}
 8007414:	b08d      	sub	sp, #52	; 0x34
 8007416:	460c      	mov	r4, r1
 8007418:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800741c:	4616      	mov	r6, r2
 800741e:	461f      	mov	r7, r3
 8007420:	4605      	mov	r5, r0
 8007422:	f001 fa8b 	bl	800893c <_localeconv_r>
 8007426:	f8d0 a000 	ldr.w	sl, [r0]
 800742a:	4650      	mov	r0, sl
 800742c:	f7f8 fed0 	bl	80001d0 <strlen>
 8007430:	2300      	movs	r3, #0
 8007432:	930a      	str	r3, [sp, #40]	; 0x28
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	9305      	str	r3, [sp, #20]
 8007438:	f8d8 3000 	ldr.w	r3, [r8]
 800743c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007440:	3307      	adds	r3, #7
 8007442:	f023 0307 	bic.w	r3, r3, #7
 8007446:	f103 0208 	add.w	r2, r3, #8
 800744a:	f8c8 2000 	str.w	r2, [r8]
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007456:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800745a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800745e:	9307      	str	r3, [sp, #28]
 8007460:	f8cd 8018 	str.w	r8, [sp, #24]
 8007464:	ee08 0a10 	vmov	s16, r0
 8007468:	4b9f      	ldr	r3, [pc, #636]	; (80076e8 <_printf_float+0x2dc>)
 800746a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800746e:	f04f 32ff 	mov.w	r2, #4294967295
 8007472:	f7f9 fb5b 	bl	8000b2c <__aeabi_dcmpun>
 8007476:	bb88      	cbnz	r0, 80074dc <_printf_float+0xd0>
 8007478:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800747c:	4b9a      	ldr	r3, [pc, #616]	; (80076e8 <_printf_float+0x2dc>)
 800747e:	f04f 32ff 	mov.w	r2, #4294967295
 8007482:	f7f9 fb35 	bl	8000af0 <__aeabi_dcmple>
 8007486:	bb48      	cbnz	r0, 80074dc <_printf_float+0xd0>
 8007488:	2200      	movs	r2, #0
 800748a:	2300      	movs	r3, #0
 800748c:	4640      	mov	r0, r8
 800748e:	4649      	mov	r1, r9
 8007490:	f7f9 fb24 	bl	8000adc <__aeabi_dcmplt>
 8007494:	b110      	cbz	r0, 800749c <_printf_float+0x90>
 8007496:	232d      	movs	r3, #45	; 0x2d
 8007498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800749c:	4b93      	ldr	r3, [pc, #588]	; (80076ec <_printf_float+0x2e0>)
 800749e:	4894      	ldr	r0, [pc, #592]	; (80076f0 <_printf_float+0x2e4>)
 80074a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80074a4:	bf94      	ite	ls
 80074a6:	4698      	movls	r8, r3
 80074a8:	4680      	movhi	r8, r0
 80074aa:	2303      	movs	r3, #3
 80074ac:	6123      	str	r3, [r4, #16]
 80074ae:	9b05      	ldr	r3, [sp, #20]
 80074b0:	f023 0204 	bic.w	r2, r3, #4
 80074b4:	6022      	str	r2, [r4, #0]
 80074b6:	f04f 0900 	mov.w	r9, #0
 80074ba:	9700      	str	r7, [sp, #0]
 80074bc:	4633      	mov	r3, r6
 80074be:	aa0b      	add	r2, sp, #44	; 0x2c
 80074c0:	4621      	mov	r1, r4
 80074c2:	4628      	mov	r0, r5
 80074c4:	f000 f9d8 	bl	8007878 <_printf_common>
 80074c8:	3001      	adds	r0, #1
 80074ca:	f040 8090 	bne.w	80075ee <_printf_float+0x1e2>
 80074ce:	f04f 30ff 	mov.w	r0, #4294967295
 80074d2:	b00d      	add	sp, #52	; 0x34
 80074d4:	ecbd 8b02 	vpop	{d8}
 80074d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074dc:	4642      	mov	r2, r8
 80074de:	464b      	mov	r3, r9
 80074e0:	4640      	mov	r0, r8
 80074e2:	4649      	mov	r1, r9
 80074e4:	f7f9 fb22 	bl	8000b2c <__aeabi_dcmpun>
 80074e8:	b140      	cbz	r0, 80074fc <_printf_float+0xf0>
 80074ea:	464b      	mov	r3, r9
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	bfbc      	itt	lt
 80074f0:	232d      	movlt	r3, #45	; 0x2d
 80074f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80074f6:	487f      	ldr	r0, [pc, #508]	; (80076f4 <_printf_float+0x2e8>)
 80074f8:	4b7f      	ldr	r3, [pc, #508]	; (80076f8 <_printf_float+0x2ec>)
 80074fa:	e7d1      	b.n	80074a0 <_printf_float+0x94>
 80074fc:	6863      	ldr	r3, [r4, #4]
 80074fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007502:	9206      	str	r2, [sp, #24]
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	d13f      	bne.n	8007588 <_printf_float+0x17c>
 8007508:	2306      	movs	r3, #6
 800750a:	6063      	str	r3, [r4, #4]
 800750c:	9b05      	ldr	r3, [sp, #20]
 800750e:	6861      	ldr	r1, [r4, #4]
 8007510:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007514:	2300      	movs	r3, #0
 8007516:	9303      	str	r3, [sp, #12]
 8007518:	ab0a      	add	r3, sp, #40	; 0x28
 800751a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800751e:	ab09      	add	r3, sp, #36	; 0x24
 8007520:	ec49 8b10 	vmov	d0, r8, r9
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	6022      	str	r2, [r4, #0]
 8007528:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800752c:	4628      	mov	r0, r5
 800752e:	f7ff fecd 	bl	80072cc <__cvt>
 8007532:	9b06      	ldr	r3, [sp, #24]
 8007534:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007536:	2b47      	cmp	r3, #71	; 0x47
 8007538:	4680      	mov	r8, r0
 800753a:	d108      	bne.n	800754e <_printf_float+0x142>
 800753c:	1cc8      	adds	r0, r1, #3
 800753e:	db02      	blt.n	8007546 <_printf_float+0x13a>
 8007540:	6863      	ldr	r3, [r4, #4]
 8007542:	4299      	cmp	r1, r3
 8007544:	dd41      	ble.n	80075ca <_printf_float+0x1be>
 8007546:	f1ab 0b02 	sub.w	fp, fp, #2
 800754a:	fa5f fb8b 	uxtb.w	fp, fp
 800754e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007552:	d820      	bhi.n	8007596 <_printf_float+0x18a>
 8007554:	3901      	subs	r1, #1
 8007556:	465a      	mov	r2, fp
 8007558:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800755c:	9109      	str	r1, [sp, #36]	; 0x24
 800755e:	f7ff ff17 	bl	8007390 <__exponent>
 8007562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007564:	1813      	adds	r3, r2, r0
 8007566:	2a01      	cmp	r2, #1
 8007568:	4681      	mov	r9, r0
 800756a:	6123      	str	r3, [r4, #16]
 800756c:	dc02      	bgt.n	8007574 <_printf_float+0x168>
 800756e:	6822      	ldr	r2, [r4, #0]
 8007570:	07d2      	lsls	r2, r2, #31
 8007572:	d501      	bpl.n	8007578 <_printf_float+0x16c>
 8007574:	3301      	adds	r3, #1
 8007576:	6123      	str	r3, [r4, #16]
 8007578:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800757c:	2b00      	cmp	r3, #0
 800757e:	d09c      	beq.n	80074ba <_printf_float+0xae>
 8007580:	232d      	movs	r3, #45	; 0x2d
 8007582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007586:	e798      	b.n	80074ba <_printf_float+0xae>
 8007588:	9a06      	ldr	r2, [sp, #24]
 800758a:	2a47      	cmp	r2, #71	; 0x47
 800758c:	d1be      	bne.n	800750c <_printf_float+0x100>
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1bc      	bne.n	800750c <_printf_float+0x100>
 8007592:	2301      	movs	r3, #1
 8007594:	e7b9      	b.n	800750a <_printf_float+0xfe>
 8007596:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800759a:	d118      	bne.n	80075ce <_printf_float+0x1c2>
 800759c:	2900      	cmp	r1, #0
 800759e:	6863      	ldr	r3, [r4, #4]
 80075a0:	dd0b      	ble.n	80075ba <_printf_float+0x1ae>
 80075a2:	6121      	str	r1, [r4, #16]
 80075a4:	b913      	cbnz	r3, 80075ac <_printf_float+0x1a0>
 80075a6:	6822      	ldr	r2, [r4, #0]
 80075a8:	07d0      	lsls	r0, r2, #31
 80075aa:	d502      	bpl.n	80075b2 <_printf_float+0x1a6>
 80075ac:	3301      	adds	r3, #1
 80075ae:	440b      	add	r3, r1
 80075b0:	6123      	str	r3, [r4, #16]
 80075b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80075b4:	f04f 0900 	mov.w	r9, #0
 80075b8:	e7de      	b.n	8007578 <_printf_float+0x16c>
 80075ba:	b913      	cbnz	r3, 80075c2 <_printf_float+0x1b6>
 80075bc:	6822      	ldr	r2, [r4, #0]
 80075be:	07d2      	lsls	r2, r2, #31
 80075c0:	d501      	bpl.n	80075c6 <_printf_float+0x1ba>
 80075c2:	3302      	adds	r3, #2
 80075c4:	e7f4      	b.n	80075b0 <_printf_float+0x1a4>
 80075c6:	2301      	movs	r3, #1
 80075c8:	e7f2      	b.n	80075b0 <_printf_float+0x1a4>
 80075ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80075ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d0:	4299      	cmp	r1, r3
 80075d2:	db05      	blt.n	80075e0 <_printf_float+0x1d4>
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	6121      	str	r1, [r4, #16]
 80075d8:	07d8      	lsls	r0, r3, #31
 80075da:	d5ea      	bpl.n	80075b2 <_printf_float+0x1a6>
 80075dc:	1c4b      	adds	r3, r1, #1
 80075de:	e7e7      	b.n	80075b0 <_printf_float+0x1a4>
 80075e0:	2900      	cmp	r1, #0
 80075e2:	bfd4      	ite	le
 80075e4:	f1c1 0202 	rsble	r2, r1, #2
 80075e8:	2201      	movgt	r2, #1
 80075ea:	4413      	add	r3, r2
 80075ec:	e7e0      	b.n	80075b0 <_printf_float+0x1a4>
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	055a      	lsls	r2, r3, #21
 80075f2:	d407      	bmi.n	8007604 <_printf_float+0x1f8>
 80075f4:	6923      	ldr	r3, [r4, #16]
 80075f6:	4642      	mov	r2, r8
 80075f8:	4631      	mov	r1, r6
 80075fa:	4628      	mov	r0, r5
 80075fc:	47b8      	blx	r7
 80075fe:	3001      	adds	r0, #1
 8007600:	d12c      	bne.n	800765c <_printf_float+0x250>
 8007602:	e764      	b.n	80074ce <_printf_float+0xc2>
 8007604:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007608:	f240 80e0 	bls.w	80077cc <_printf_float+0x3c0>
 800760c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007610:	2200      	movs	r2, #0
 8007612:	2300      	movs	r3, #0
 8007614:	f7f9 fa58 	bl	8000ac8 <__aeabi_dcmpeq>
 8007618:	2800      	cmp	r0, #0
 800761a:	d034      	beq.n	8007686 <_printf_float+0x27a>
 800761c:	4a37      	ldr	r2, [pc, #220]	; (80076fc <_printf_float+0x2f0>)
 800761e:	2301      	movs	r3, #1
 8007620:	4631      	mov	r1, r6
 8007622:	4628      	mov	r0, r5
 8007624:	47b8      	blx	r7
 8007626:	3001      	adds	r0, #1
 8007628:	f43f af51 	beq.w	80074ce <_printf_float+0xc2>
 800762c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007630:	429a      	cmp	r2, r3
 8007632:	db02      	blt.n	800763a <_printf_float+0x22e>
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	07d8      	lsls	r0, r3, #31
 8007638:	d510      	bpl.n	800765c <_printf_float+0x250>
 800763a:	ee18 3a10 	vmov	r3, s16
 800763e:	4652      	mov	r2, sl
 8007640:	4631      	mov	r1, r6
 8007642:	4628      	mov	r0, r5
 8007644:	47b8      	blx	r7
 8007646:	3001      	adds	r0, #1
 8007648:	f43f af41 	beq.w	80074ce <_printf_float+0xc2>
 800764c:	f04f 0800 	mov.w	r8, #0
 8007650:	f104 091a 	add.w	r9, r4, #26
 8007654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007656:	3b01      	subs	r3, #1
 8007658:	4543      	cmp	r3, r8
 800765a:	dc09      	bgt.n	8007670 <_printf_float+0x264>
 800765c:	6823      	ldr	r3, [r4, #0]
 800765e:	079b      	lsls	r3, r3, #30
 8007660:	f100 8105 	bmi.w	800786e <_printf_float+0x462>
 8007664:	68e0      	ldr	r0, [r4, #12]
 8007666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007668:	4298      	cmp	r0, r3
 800766a:	bfb8      	it	lt
 800766c:	4618      	movlt	r0, r3
 800766e:	e730      	b.n	80074d2 <_printf_float+0xc6>
 8007670:	2301      	movs	r3, #1
 8007672:	464a      	mov	r2, r9
 8007674:	4631      	mov	r1, r6
 8007676:	4628      	mov	r0, r5
 8007678:	47b8      	blx	r7
 800767a:	3001      	adds	r0, #1
 800767c:	f43f af27 	beq.w	80074ce <_printf_float+0xc2>
 8007680:	f108 0801 	add.w	r8, r8, #1
 8007684:	e7e6      	b.n	8007654 <_printf_float+0x248>
 8007686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007688:	2b00      	cmp	r3, #0
 800768a:	dc39      	bgt.n	8007700 <_printf_float+0x2f4>
 800768c:	4a1b      	ldr	r2, [pc, #108]	; (80076fc <_printf_float+0x2f0>)
 800768e:	2301      	movs	r3, #1
 8007690:	4631      	mov	r1, r6
 8007692:	4628      	mov	r0, r5
 8007694:	47b8      	blx	r7
 8007696:	3001      	adds	r0, #1
 8007698:	f43f af19 	beq.w	80074ce <_printf_float+0xc2>
 800769c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076a0:	4313      	orrs	r3, r2
 80076a2:	d102      	bne.n	80076aa <_printf_float+0x29e>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	07d9      	lsls	r1, r3, #31
 80076a8:	d5d8      	bpl.n	800765c <_printf_float+0x250>
 80076aa:	ee18 3a10 	vmov	r3, s16
 80076ae:	4652      	mov	r2, sl
 80076b0:	4631      	mov	r1, r6
 80076b2:	4628      	mov	r0, r5
 80076b4:	47b8      	blx	r7
 80076b6:	3001      	adds	r0, #1
 80076b8:	f43f af09 	beq.w	80074ce <_printf_float+0xc2>
 80076bc:	f04f 0900 	mov.w	r9, #0
 80076c0:	f104 0a1a 	add.w	sl, r4, #26
 80076c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c6:	425b      	negs	r3, r3
 80076c8:	454b      	cmp	r3, r9
 80076ca:	dc01      	bgt.n	80076d0 <_printf_float+0x2c4>
 80076cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ce:	e792      	b.n	80075f6 <_printf_float+0x1ea>
 80076d0:	2301      	movs	r3, #1
 80076d2:	4652      	mov	r2, sl
 80076d4:	4631      	mov	r1, r6
 80076d6:	4628      	mov	r0, r5
 80076d8:	47b8      	blx	r7
 80076da:	3001      	adds	r0, #1
 80076dc:	f43f aef7 	beq.w	80074ce <_printf_float+0xc2>
 80076e0:	f109 0901 	add.w	r9, r9, #1
 80076e4:	e7ee      	b.n	80076c4 <_printf_float+0x2b8>
 80076e6:	bf00      	nop
 80076e8:	7fefffff 	.word	0x7fefffff
 80076ec:	0800a77c 	.word	0x0800a77c
 80076f0:	0800a780 	.word	0x0800a780
 80076f4:	0800a788 	.word	0x0800a788
 80076f8:	0800a784 	.word	0x0800a784
 80076fc:	0800a78c 	.word	0x0800a78c
 8007700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007704:	429a      	cmp	r2, r3
 8007706:	bfa8      	it	ge
 8007708:	461a      	movge	r2, r3
 800770a:	2a00      	cmp	r2, #0
 800770c:	4691      	mov	r9, r2
 800770e:	dc37      	bgt.n	8007780 <_printf_float+0x374>
 8007710:	f04f 0b00 	mov.w	fp, #0
 8007714:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007718:	f104 021a 	add.w	r2, r4, #26
 800771c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800771e:	9305      	str	r3, [sp, #20]
 8007720:	eba3 0309 	sub.w	r3, r3, r9
 8007724:	455b      	cmp	r3, fp
 8007726:	dc33      	bgt.n	8007790 <_printf_float+0x384>
 8007728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800772c:	429a      	cmp	r2, r3
 800772e:	db3b      	blt.n	80077a8 <_printf_float+0x39c>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	07da      	lsls	r2, r3, #31
 8007734:	d438      	bmi.n	80077a8 <_printf_float+0x39c>
 8007736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007738:	9a05      	ldr	r2, [sp, #20]
 800773a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800773c:	1a9a      	subs	r2, r3, r2
 800773e:	eba3 0901 	sub.w	r9, r3, r1
 8007742:	4591      	cmp	r9, r2
 8007744:	bfa8      	it	ge
 8007746:	4691      	movge	r9, r2
 8007748:	f1b9 0f00 	cmp.w	r9, #0
 800774c:	dc35      	bgt.n	80077ba <_printf_float+0x3ae>
 800774e:	f04f 0800 	mov.w	r8, #0
 8007752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007756:	f104 0a1a 	add.w	sl, r4, #26
 800775a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800775e:	1a9b      	subs	r3, r3, r2
 8007760:	eba3 0309 	sub.w	r3, r3, r9
 8007764:	4543      	cmp	r3, r8
 8007766:	f77f af79 	ble.w	800765c <_printf_float+0x250>
 800776a:	2301      	movs	r3, #1
 800776c:	4652      	mov	r2, sl
 800776e:	4631      	mov	r1, r6
 8007770:	4628      	mov	r0, r5
 8007772:	47b8      	blx	r7
 8007774:	3001      	adds	r0, #1
 8007776:	f43f aeaa 	beq.w	80074ce <_printf_float+0xc2>
 800777a:	f108 0801 	add.w	r8, r8, #1
 800777e:	e7ec      	b.n	800775a <_printf_float+0x34e>
 8007780:	4613      	mov	r3, r2
 8007782:	4631      	mov	r1, r6
 8007784:	4642      	mov	r2, r8
 8007786:	4628      	mov	r0, r5
 8007788:	47b8      	blx	r7
 800778a:	3001      	adds	r0, #1
 800778c:	d1c0      	bne.n	8007710 <_printf_float+0x304>
 800778e:	e69e      	b.n	80074ce <_printf_float+0xc2>
 8007790:	2301      	movs	r3, #1
 8007792:	4631      	mov	r1, r6
 8007794:	4628      	mov	r0, r5
 8007796:	9205      	str	r2, [sp, #20]
 8007798:	47b8      	blx	r7
 800779a:	3001      	adds	r0, #1
 800779c:	f43f ae97 	beq.w	80074ce <_printf_float+0xc2>
 80077a0:	9a05      	ldr	r2, [sp, #20]
 80077a2:	f10b 0b01 	add.w	fp, fp, #1
 80077a6:	e7b9      	b.n	800771c <_printf_float+0x310>
 80077a8:	ee18 3a10 	vmov	r3, s16
 80077ac:	4652      	mov	r2, sl
 80077ae:	4631      	mov	r1, r6
 80077b0:	4628      	mov	r0, r5
 80077b2:	47b8      	blx	r7
 80077b4:	3001      	adds	r0, #1
 80077b6:	d1be      	bne.n	8007736 <_printf_float+0x32a>
 80077b8:	e689      	b.n	80074ce <_printf_float+0xc2>
 80077ba:	9a05      	ldr	r2, [sp, #20]
 80077bc:	464b      	mov	r3, r9
 80077be:	4442      	add	r2, r8
 80077c0:	4631      	mov	r1, r6
 80077c2:	4628      	mov	r0, r5
 80077c4:	47b8      	blx	r7
 80077c6:	3001      	adds	r0, #1
 80077c8:	d1c1      	bne.n	800774e <_printf_float+0x342>
 80077ca:	e680      	b.n	80074ce <_printf_float+0xc2>
 80077cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077ce:	2a01      	cmp	r2, #1
 80077d0:	dc01      	bgt.n	80077d6 <_printf_float+0x3ca>
 80077d2:	07db      	lsls	r3, r3, #31
 80077d4:	d538      	bpl.n	8007848 <_printf_float+0x43c>
 80077d6:	2301      	movs	r3, #1
 80077d8:	4642      	mov	r2, r8
 80077da:	4631      	mov	r1, r6
 80077dc:	4628      	mov	r0, r5
 80077de:	47b8      	blx	r7
 80077e0:	3001      	adds	r0, #1
 80077e2:	f43f ae74 	beq.w	80074ce <_printf_float+0xc2>
 80077e6:	ee18 3a10 	vmov	r3, s16
 80077ea:	4652      	mov	r2, sl
 80077ec:	4631      	mov	r1, r6
 80077ee:	4628      	mov	r0, r5
 80077f0:	47b8      	blx	r7
 80077f2:	3001      	adds	r0, #1
 80077f4:	f43f ae6b 	beq.w	80074ce <_printf_float+0xc2>
 80077f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077fc:	2200      	movs	r2, #0
 80077fe:	2300      	movs	r3, #0
 8007800:	f7f9 f962 	bl	8000ac8 <__aeabi_dcmpeq>
 8007804:	b9d8      	cbnz	r0, 800783e <_printf_float+0x432>
 8007806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007808:	f108 0201 	add.w	r2, r8, #1
 800780c:	3b01      	subs	r3, #1
 800780e:	4631      	mov	r1, r6
 8007810:	4628      	mov	r0, r5
 8007812:	47b8      	blx	r7
 8007814:	3001      	adds	r0, #1
 8007816:	d10e      	bne.n	8007836 <_printf_float+0x42a>
 8007818:	e659      	b.n	80074ce <_printf_float+0xc2>
 800781a:	2301      	movs	r3, #1
 800781c:	4652      	mov	r2, sl
 800781e:	4631      	mov	r1, r6
 8007820:	4628      	mov	r0, r5
 8007822:	47b8      	blx	r7
 8007824:	3001      	adds	r0, #1
 8007826:	f43f ae52 	beq.w	80074ce <_printf_float+0xc2>
 800782a:	f108 0801 	add.w	r8, r8, #1
 800782e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007830:	3b01      	subs	r3, #1
 8007832:	4543      	cmp	r3, r8
 8007834:	dcf1      	bgt.n	800781a <_printf_float+0x40e>
 8007836:	464b      	mov	r3, r9
 8007838:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800783c:	e6dc      	b.n	80075f8 <_printf_float+0x1ec>
 800783e:	f04f 0800 	mov.w	r8, #0
 8007842:	f104 0a1a 	add.w	sl, r4, #26
 8007846:	e7f2      	b.n	800782e <_printf_float+0x422>
 8007848:	2301      	movs	r3, #1
 800784a:	4642      	mov	r2, r8
 800784c:	e7df      	b.n	800780e <_printf_float+0x402>
 800784e:	2301      	movs	r3, #1
 8007850:	464a      	mov	r2, r9
 8007852:	4631      	mov	r1, r6
 8007854:	4628      	mov	r0, r5
 8007856:	47b8      	blx	r7
 8007858:	3001      	adds	r0, #1
 800785a:	f43f ae38 	beq.w	80074ce <_printf_float+0xc2>
 800785e:	f108 0801 	add.w	r8, r8, #1
 8007862:	68e3      	ldr	r3, [r4, #12]
 8007864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007866:	1a5b      	subs	r3, r3, r1
 8007868:	4543      	cmp	r3, r8
 800786a:	dcf0      	bgt.n	800784e <_printf_float+0x442>
 800786c:	e6fa      	b.n	8007664 <_printf_float+0x258>
 800786e:	f04f 0800 	mov.w	r8, #0
 8007872:	f104 0919 	add.w	r9, r4, #25
 8007876:	e7f4      	b.n	8007862 <_printf_float+0x456>

08007878 <_printf_common>:
 8007878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800787c:	4616      	mov	r6, r2
 800787e:	4699      	mov	r9, r3
 8007880:	688a      	ldr	r2, [r1, #8]
 8007882:	690b      	ldr	r3, [r1, #16]
 8007884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007888:	4293      	cmp	r3, r2
 800788a:	bfb8      	it	lt
 800788c:	4613      	movlt	r3, r2
 800788e:	6033      	str	r3, [r6, #0]
 8007890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007894:	4607      	mov	r7, r0
 8007896:	460c      	mov	r4, r1
 8007898:	b10a      	cbz	r2, 800789e <_printf_common+0x26>
 800789a:	3301      	adds	r3, #1
 800789c:	6033      	str	r3, [r6, #0]
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	0699      	lsls	r1, r3, #26
 80078a2:	bf42      	ittt	mi
 80078a4:	6833      	ldrmi	r3, [r6, #0]
 80078a6:	3302      	addmi	r3, #2
 80078a8:	6033      	strmi	r3, [r6, #0]
 80078aa:	6825      	ldr	r5, [r4, #0]
 80078ac:	f015 0506 	ands.w	r5, r5, #6
 80078b0:	d106      	bne.n	80078c0 <_printf_common+0x48>
 80078b2:	f104 0a19 	add.w	sl, r4, #25
 80078b6:	68e3      	ldr	r3, [r4, #12]
 80078b8:	6832      	ldr	r2, [r6, #0]
 80078ba:	1a9b      	subs	r3, r3, r2
 80078bc:	42ab      	cmp	r3, r5
 80078be:	dc26      	bgt.n	800790e <_printf_common+0x96>
 80078c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078c4:	1e13      	subs	r3, r2, #0
 80078c6:	6822      	ldr	r2, [r4, #0]
 80078c8:	bf18      	it	ne
 80078ca:	2301      	movne	r3, #1
 80078cc:	0692      	lsls	r2, r2, #26
 80078ce:	d42b      	bmi.n	8007928 <_printf_common+0xb0>
 80078d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078d4:	4649      	mov	r1, r9
 80078d6:	4638      	mov	r0, r7
 80078d8:	47c0      	blx	r8
 80078da:	3001      	adds	r0, #1
 80078dc:	d01e      	beq.n	800791c <_printf_common+0xa4>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	68e5      	ldr	r5, [r4, #12]
 80078e2:	6832      	ldr	r2, [r6, #0]
 80078e4:	f003 0306 	and.w	r3, r3, #6
 80078e8:	2b04      	cmp	r3, #4
 80078ea:	bf08      	it	eq
 80078ec:	1aad      	subeq	r5, r5, r2
 80078ee:	68a3      	ldr	r3, [r4, #8]
 80078f0:	6922      	ldr	r2, [r4, #16]
 80078f2:	bf0c      	ite	eq
 80078f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078f8:	2500      	movne	r5, #0
 80078fa:	4293      	cmp	r3, r2
 80078fc:	bfc4      	itt	gt
 80078fe:	1a9b      	subgt	r3, r3, r2
 8007900:	18ed      	addgt	r5, r5, r3
 8007902:	2600      	movs	r6, #0
 8007904:	341a      	adds	r4, #26
 8007906:	42b5      	cmp	r5, r6
 8007908:	d11a      	bne.n	8007940 <_printf_common+0xc8>
 800790a:	2000      	movs	r0, #0
 800790c:	e008      	b.n	8007920 <_printf_common+0xa8>
 800790e:	2301      	movs	r3, #1
 8007910:	4652      	mov	r2, sl
 8007912:	4649      	mov	r1, r9
 8007914:	4638      	mov	r0, r7
 8007916:	47c0      	blx	r8
 8007918:	3001      	adds	r0, #1
 800791a:	d103      	bne.n	8007924 <_printf_common+0xac>
 800791c:	f04f 30ff 	mov.w	r0, #4294967295
 8007920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007924:	3501      	adds	r5, #1
 8007926:	e7c6      	b.n	80078b6 <_printf_common+0x3e>
 8007928:	18e1      	adds	r1, r4, r3
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	2030      	movs	r0, #48	; 0x30
 800792e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007932:	4422      	add	r2, r4
 8007934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800793c:	3302      	adds	r3, #2
 800793e:	e7c7      	b.n	80078d0 <_printf_common+0x58>
 8007940:	2301      	movs	r3, #1
 8007942:	4622      	mov	r2, r4
 8007944:	4649      	mov	r1, r9
 8007946:	4638      	mov	r0, r7
 8007948:	47c0      	blx	r8
 800794a:	3001      	adds	r0, #1
 800794c:	d0e6      	beq.n	800791c <_printf_common+0xa4>
 800794e:	3601      	adds	r6, #1
 8007950:	e7d9      	b.n	8007906 <_printf_common+0x8e>
	...

08007954 <_printf_i>:
 8007954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007958:	7e0f      	ldrb	r7, [r1, #24]
 800795a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800795c:	2f78      	cmp	r7, #120	; 0x78
 800795e:	4691      	mov	r9, r2
 8007960:	4680      	mov	r8, r0
 8007962:	460c      	mov	r4, r1
 8007964:	469a      	mov	sl, r3
 8007966:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800796a:	d807      	bhi.n	800797c <_printf_i+0x28>
 800796c:	2f62      	cmp	r7, #98	; 0x62
 800796e:	d80a      	bhi.n	8007986 <_printf_i+0x32>
 8007970:	2f00      	cmp	r7, #0
 8007972:	f000 80d8 	beq.w	8007b26 <_printf_i+0x1d2>
 8007976:	2f58      	cmp	r7, #88	; 0x58
 8007978:	f000 80a3 	beq.w	8007ac2 <_printf_i+0x16e>
 800797c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007984:	e03a      	b.n	80079fc <_printf_i+0xa8>
 8007986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800798a:	2b15      	cmp	r3, #21
 800798c:	d8f6      	bhi.n	800797c <_printf_i+0x28>
 800798e:	a101      	add	r1, pc, #4	; (adr r1, 8007994 <_printf_i+0x40>)
 8007990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007994:	080079ed 	.word	0x080079ed
 8007998:	08007a01 	.word	0x08007a01
 800799c:	0800797d 	.word	0x0800797d
 80079a0:	0800797d 	.word	0x0800797d
 80079a4:	0800797d 	.word	0x0800797d
 80079a8:	0800797d 	.word	0x0800797d
 80079ac:	08007a01 	.word	0x08007a01
 80079b0:	0800797d 	.word	0x0800797d
 80079b4:	0800797d 	.word	0x0800797d
 80079b8:	0800797d 	.word	0x0800797d
 80079bc:	0800797d 	.word	0x0800797d
 80079c0:	08007b0d 	.word	0x08007b0d
 80079c4:	08007a31 	.word	0x08007a31
 80079c8:	08007aef 	.word	0x08007aef
 80079cc:	0800797d 	.word	0x0800797d
 80079d0:	0800797d 	.word	0x0800797d
 80079d4:	08007b2f 	.word	0x08007b2f
 80079d8:	0800797d 	.word	0x0800797d
 80079dc:	08007a31 	.word	0x08007a31
 80079e0:	0800797d 	.word	0x0800797d
 80079e4:	0800797d 	.word	0x0800797d
 80079e8:	08007af7 	.word	0x08007af7
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	1d1a      	adds	r2, r3, #4
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	602a      	str	r2, [r5, #0]
 80079f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079fc:	2301      	movs	r3, #1
 80079fe:	e0a3      	b.n	8007b48 <_printf_i+0x1f4>
 8007a00:	6820      	ldr	r0, [r4, #0]
 8007a02:	6829      	ldr	r1, [r5, #0]
 8007a04:	0606      	lsls	r6, r0, #24
 8007a06:	f101 0304 	add.w	r3, r1, #4
 8007a0a:	d50a      	bpl.n	8007a22 <_printf_i+0xce>
 8007a0c:	680e      	ldr	r6, [r1, #0]
 8007a0e:	602b      	str	r3, [r5, #0]
 8007a10:	2e00      	cmp	r6, #0
 8007a12:	da03      	bge.n	8007a1c <_printf_i+0xc8>
 8007a14:	232d      	movs	r3, #45	; 0x2d
 8007a16:	4276      	negs	r6, r6
 8007a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a1c:	485e      	ldr	r0, [pc, #376]	; (8007b98 <_printf_i+0x244>)
 8007a1e:	230a      	movs	r3, #10
 8007a20:	e019      	b.n	8007a56 <_printf_i+0x102>
 8007a22:	680e      	ldr	r6, [r1, #0]
 8007a24:	602b      	str	r3, [r5, #0]
 8007a26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a2a:	bf18      	it	ne
 8007a2c:	b236      	sxthne	r6, r6
 8007a2e:	e7ef      	b.n	8007a10 <_printf_i+0xbc>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	6820      	ldr	r0, [r4, #0]
 8007a34:	1d19      	adds	r1, r3, #4
 8007a36:	6029      	str	r1, [r5, #0]
 8007a38:	0601      	lsls	r1, r0, #24
 8007a3a:	d501      	bpl.n	8007a40 <_printf_i+0xec>
 8007a3c:	681e      	ldr	r6, [r3, #0]
 8007a3e:	e002      	b.n	8007a46 <_printf_i+0xf2>
 8007a40:	0646      	lsls	r6, r0, #25
 8007a42:	d5fb      	bpl.n	8007a3c <_printf_i+0xe8>
 8007a44:	881e      	ldrh	r6, [r3, #0]
 8007a46:	4854      	ldr	r0, [pc, #336]	; (8007b98 <_printf_i+0x244>)
 8007a48:	2f6f      	cmp	r7, #111	; 0x6f
 8007a4a:	bf0c      	ite	eq
 8007a4c:	2308      	moveq	r3, #8
 8007a4e:	230a      	movne	r3, #10
 8007a50:	2100      	movs	r1, #0
 8007a52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a56:	6865      	ldr	r5, [r4, #4]
 8007a58:	60a5      	str	r5, [r4, #8]
 8007a5a:	2d00      	cmp	r5, #0
 8007a5c:	bfa2      	ittt	ge
 8007a5e:	6821      	ldrge	r1, [r4, #0]
 8007a60:	f021 0104 	bicge.w	r1, r1, #4
 8007a64:	6021      	strge	r1, [r4, #0]
 8007a66:	b90e      	cbnz	r6, 8007a6c <_printf_i+0x118>
 8007a68:	2d00      	cmp	r5, #0
 8007a6a:	d04d      	beq.n	8007b08 <_printf_i+0x1b4>
 8007a6c:	4615      	mov	r5, r2
 8007a6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a72:	fb03 6711 	mls	r7, r3, r1, r6
 8007a76:	5dc7      	ldrb	r7, [r0, r7]
 8007a78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a7c:	4637      	mov	r7, r6
 8007a7e:	42bb      	cmp	r3, r7
 8007a80:	460e      	mov	r6, r1
 8007a82:	d9f4      	bls.n	8007a6e <_printf_i+0x11a>
 8007a84:	2b08      	cmp	r3, #8
 8007a86:	d10b      	bne.n	8007aa0 <_printf_i+0x14c>
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	07de      	lsls	r6, r3, #31
 8007a8c:	d508      	bpl.n	8007aa0 <_printf_i+0x14c>
 8007a8e:	6923      	ldr	r3, [r4, #16]
 8007a90:	6861      	ldr	r1, [r4, #4]
 8007a92:	4299      	cmp	r1, r3
 8007a94:	bfde      	ittt	le
 8007a96:	2330      	movle	r3, #48	; 0x30
 8007a98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007aa0:	1b52      	subs	r2, r2, r5
 8007aa2:	6122      	str	r2, [r4, #16]
 8007aa4:	f8cd a000 	str.w	sl, [sp]
 8007aa8:	464b      	mov	r3, r9
 8007aaa:	aa03      	add	r2, sp, #12
 8007aac:	4621      	mov	r1, r4
 8007aae:	4640      	mov	r0, r8
 8007ab0:	f7ff fee2 	bl	8007878 <_printf_common>
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	d14c      	bne.n	8007b52 <_printf_i+0x1fe>
 8007ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8007abc:	b004      	add	sp, #16
 8007abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac2:	4835      	ldr	r0, [pc, #212]	; (8007b98 <_printf_i+0x244>)
 8007ac4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ac8:	6829      	ldr	r1, [r5, #0]
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ad0:	6029      	str	r1, [r5, #0]
 8007ad2:	061d      	lsls	r5, r3, #24
 8007ad4:	d514      	bpl.n	8007b00 <_printf_i+0x1ac>
 8007ad6:	07df      	lsls	r7, r3, #31
 8007ad8:	bf44      	itt	mi
 8007ada:	f043 0320 	orrmi.w	r3, r3, #32
 8007ade:	6023      	strmi	r3, [r4, #0]
 8007ae0:	b91e      	cbnz	r6, 8007aea <_printf_i+0x196>
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	f023 0320 	bic.w	r3, r3, #32
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	2310      	movs	r3, #16
 8007aec:	e7b0      	b.n	8007a50 <_printf_i+0xfc>
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	f043 0320 	orr.w	r3, r3, #32
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	2378      	movs	r3, #120	; 0x78
 8007af8:	4828      	ldr	r0, [pc, #160]	; (8007b9c <_printf_i+0x248>)
 8007afa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007afe:	e7e3      	b.n	8007ac8 <_printf_i+0x174>
 8007b00:	0659      	lsls	r1, r3, #25
 8007b02:	bf48      	it	mi
 8007b04:	b2b6      	uxthmi	r6, r6
 8007b06:	e7e6      	b.n	8007ad6 <_printf_i+0x182>
 8007b08:	4615      	mov	r5, r2
 8007b0a:	e7bb      	b.n	8007a84 <_printf_i+0x130>
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	6826      	ldr	r6, [r4, #0]
 8007b10:	6961      	ldr	r1, [r4, #20]
 8007b12:	1d18      	adds	r0, r3, #4
 8007b14:	6028      	str	r0, [r5, #0]
 8007b16:	0635      	lsls	r5, r6, #24
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	d501      	bpl.n	8007b20 <_printf_i+0x1cc>
 8007b1c:	6019      	str	r1, [r3, #0]
 8007b1e:	e002      	b.n	8007b26 <_printf_i+0x1d2>
 8007b20:	0670      	lsls	r0, r6, #25
 8007b22:	d5fb      	bpl.n	8007b1c <_printf_i+0x1c8>
 8007b24:	8019      	strh	r1, [r3, #0]
 8007b26:	2300      	movs	r3, #0
 8007b28:	6123      	str	r3, [r4, #16]
 8007b2a:	4615      	mov	r5, r2
 8007b2c:	e7ba      	b.n	8007aa4 <_printf_i+0x150>
 8007b2e:	682b      	ldr	r3, [r5, #0]
 8007b30:	1d1a      	adds	r2, r3, #4
 8007b32:	602a      	str	r2, [r5, #0]
 8007b34:	681d      	ldr	r5, [r3, #0]
 8007b36:	6862      	ldr	r2, [r4, #4]
 8007b38:	2100      	movs	r1, #0
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	f7f8 fb50 	bl	80001e0 <memchr>
 8007b40:	b108      	cbz	r0, 8007b46 <_printf_i+0x1f2>
 8007b42:	1b40      	subs	r0, r0, r5
 8007b44:	6060      	str	r0, [r4, #4]
 8007b46:	6863      	ldr	r3, [r4, #4]
 8007b48:	6123      	str	r3, [r4, #16]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b50:	e7a8      	b.n	8007aa4 <_printf_i+0x150>
 8007b52:	6923      	ldr	r3, [r4, #16]
 8007b54:	462a      	mov	r2, r5
 8007b56:	4649      	mov	r1, r9
 8007b58:	4640      	mov	r0, r8
 8007b5a:	47d0      	blx	sl
 8007b5c:	3001      	adds	r0, #1
 8007b5e:	d0ab      	beq.n	8007ab8 <_printf_i+0x164>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	079b      	lsls	r3, r3, #30
 8007b64:	d413      	bmi.n	8007b8e <_printf_i+0x23a>
 8007b66:	68e0      	ldr	r0, [r4, #12]
 8007b68:	9b03      	ldr	r3, [sp, #12]
 8007b6a:	4298      	cmp	r0, r3
 8007b6c:	bfb8      	it	lt
 8007b6e:	4618      	movlt	r0, r3
 8007b70:	e7a4      	b.n	8007abc <_printf_i+0x168>
 8007b72:	2301      	movs	r3, #1
 8007b74:	4632      	mov	r2, r6
 8007b76:	4649      	mov	r1, r9
 8007b78:	4640      	mov	r0, r8
 8007b7a:	47d0      	blx	sl
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d09b      	beq.n	8007ab8 <_printf_i+0x164>
 8007b80:	3501      	adds	r5, #1
 8007b82:	68e3      	ldr	r3, [r4, #12]
 8007b84:	9903      	ldr	r1, [sp, #12]
 8007b86:	1a5b      	subs	r3, r3, r1
 8007b88:	42ab      	cmp	r3, r5
 8007b8a:	dcf2      	bgt.n	8007b72 <_printf_i+0x21e>
 8007b8c:	e7eb      	b.n	8007b66 <_printf_i+0x212>
 8007b8e:	2500      	movs	r5, #0
 8007b90:	f104 0619 	add.w	r6, r4, #25
 8007b94:	e7f5      	b.n	8007b82 <_printf_i+0x22e>
 8007b96:	bf00      	nop
 8007b98:	0800a78e 	.word	0x0800a78e
 8007b9c:	0800a79f 	.word	0x0800a79f

08007ba0 <sniprintf>:
 8007ba0:	b40c      	push	{r2, r3}
 8007ba2:	b530      	push	{r4, r5, lr}
 8007ba4:	4b17      	ldr	r3, [pc, #92]	; (8007c04 <sniprintf+0x64>)
 8007ba6:	1e0c      	subs	r4, r1, #0
 8007ba8:	681d      	ldr	r5, [r3, #0]
 8007baa:	b09d      	sub	sp, #116	; 0x74
 8007bac:	da08      	bge.n	8007bc0 <sniprintf+0x20>
 8007bae:	238b      	movs	r3, #139	; 0x8b
 8007bb0:	602b      	str	r3, [r5, #0]
 8007bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb6:	b01d      	add	sp, #116	; 0x74
 8007bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bbc:	b002      	add	sp, #8
 8007bbe:	4770      	bx	lr
 8007bc0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007bc4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007bc8:	bf14      	ite	ne
 8007bca:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007bce:	4623      	moveq	r3, r4
 8007bd0:	9304      	str	r3, [sp, #16]
 8007bd2:	9307      	str	r3, [sp, #28]
 8007bd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007bd8:	9002      	str	r0, [sp, #8]
 8007bda:	9006      	str	r0, [sp, #24]
 8007bdc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007be0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007be2:	ab21      	add	r3, sp, #132	; 0x84
 8007be4:	a902      	add	r1, sp, #8
 8007be6:	4628      	mov	r0, r5
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	f001 fb89 	bl	8009300 <_svfiprintf_r>
 8007bee:	1c43      	adds	r3, r0, #1
 8007bf0:	bfbc      	itt	lt
 8007bf2:	238b      	movlt	r3, #139	; 0x8b
 8007bf4:	602b      	strlt	r3, [r5, #0]
 8007bf6:	2c00      	cmp	r4, #0
 8007bf8:	d0dd      	beq.n	8007bb6 <sniprintf+0x16>
 8007bfa:	9b02      	ldr	r3, [sp, #8]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	701a      	strb	r2, [r3, #0]
 8007c00:	e7d9      	b.n	8007bb6 <sniprintf+0x16>
 8007c02:	bf00      	nop
 8007c04:	20000010 	.word	0x20000010

08007c08 <siprintf>:
 8007c08:	b40e      	push	{r1, r2, r3}
 8007c0a:	b500      	push	{lr}
 8007c0c:	b09c      	sub	sp, #112	; 0x70
 8007c0e:	ab1d      	add	r3, sp, #116	; 0x74
 8007c10:	9002      	str	r0, [sp, #8]
 8007c12:	9006      	str	r0, [sp, #24]
 8007c14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c18:	4809      	ldr	r0, [pc, #36]	; (8007c40 <siprintf+0x38>)
 8007c1a:	9107      	str	r1, [sp, #28]
 8007c1c:	9104      	str	r1, [sp, #16]
 8007c1e:	4909      	ldr	r1, [pc, #36]	; (8007c44 <siprintf+0x3c>)
 8007c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c24:	9105      	str	r1, [sp, #20]
 8007c26:	6800      	ldr	r0, [r0, #0]
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	a902      	add	r1, sp, #8
 8007c2c:	f001 fb68 	bl	8009300 <_svfiprintf_r>
 8007c30:	9b02      	ldr	r3, [sp, #8]
 8007c32:	2200      	movs	r2, #0
 8007c34:	701a      	strb	r2, [r3, #0]
 8007c36:	b01c      	add	sp, #112	; 0x70
 8007c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c3c:	b003      	add	sp, #12
 8007c3e:	4770      	bx	lr
 8007c40:	20000010 	.word	0x20000010
 8007c44:	ffff0208 	.word	0xffff0208

08007c48 <quorem>:
 8007c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4c:	6903      	ldr	r3, [r0, #16]
 8007c4e:	690c      	ldr	r4, [r1, #16]
 8007c50:	42a3      	cmp	r3, r4
 8007c52:	4607      	mov	r7, r0
 8007c54:	f2c0 8081 	blt.w	8007d5a <quorem+0x112>
 8007c58:	3c01      	subs	r4, #1
 8007c5a:	f101 0814 	add.w	r8, r1, #20
 8007c5e:	f100 0514 	add.w	r5, r0, #20
 8007c62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c66:	9301      	str	r3, [sp, #4]
 8007c68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c70:	3301      	adds	r3, #1
 8007c72:	429a      	cmp	r2, r3
 8007c74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c80:	d331      	bcc.n	8007ce6 <quorem+0x9e>
 8007c82:	f04f 0e00 	mov.w	lr, #0
 8007c86:	4640      	mov	r0, r8
 8007c88:	46ac      	mov	ip, r5
 8007c8a:	46f2      	mov	sl, lr
 8007c8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c90:	b293      	uxth	r3, r2
 8007c92:	fb06 e303 	mla	r3, r6, r3, lr
 8007c96:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	ebaa 0303 	sub.w	r3, sl, r3
 8007ca0:	f8dc a000 	ldr.w	sl, [ip]
 8007ca4:	0c12      	lsrs	r2, r2, #16
 8007ca6:	fa13 f38a 	uxtah	r3, r3, sl
 8007caa:	fb06 e202 	mla	r2, r6, r2, lr
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	9b00      	ldr	r3, [sp, #0]
 8007cb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007cb6:	b292      	uxth	r2, r2
 8007cb8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007cbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cc0:	f8bd 3000 	ldrh.w	r3, [sp]
 8007cc4:	4581      	cmp	r9, r0
 8007cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cca:	f84c 3b04 	str.w	r3, [ip], #4
 8007cce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007cd2:	d2db      	bcs.n	8007c8c <quorem+0x44>
 8007cd4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007cd8:	b92b      	cbnz	r3, 8007ce6 <quorem+0x9e>
 8007cda:	9b01      	ldr	r3, [sp, #4]
 8007cdc:	3b04      	subs	r3, #4
 8007cde:	429d      	cmp	r5, r3
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	d32e      	bcc.n	8007d42 <quorem+0xfa>
 8007ce4:	613c      	str	r4, [r7, #16]
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	f001 f8b6 	bl	8008e58 <__mcmp>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	db24      	blt.n	8007d3a <quorem+0xf2>
 8007cf0:	3601      	adds	r6, #1
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	f04f 0c00 	mov.w	ip, #0
 8007cf8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007cfc:	f8d0 e000 	ldr.w	lr, [r0]
 8007d00:	b293      	uxth	r3, r2
 8007d02:	ebac 0303 	sub.w	r3, ip, r3
 8007d06:	0c12      	lsrs	r2, r2, #16
 8007d08:	fa13 f38e 	uxtah	r3, r3, lr
 8007d0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d1a:	45c1      	cmp	r9, r8
 8007d1c:	f840 3b04 	str.w	r3, [r0], #4
 8007d20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d24:	d2e8      	bcs.n	8007cf8 <quorem+0xb0>
 8007d26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d2e:	b922      	cbnz	r2, 8007d3a <quorem+0xf2>
 8007d30:	3b04      	subs	r3, #4
 8007d32:	429d      	cmp	r5, r3
 8007d34:	461a      	mov	r2, r3
 8007d36:	d30a      	bcc.n	8007d4e <quorem+0x106>
 8007d38:	613c      	str	r4, [r7, #16]
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	b003      	add	sp, #12
 8007d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d42:	6812      	ldr	r2, [r2, #0]
 8007d44:	3b04      	subs	r3, #4
 8007d46:	2a00      	cmp	r2, #0
 8007d48:	d1cc      	bne.n	8007ce4 <quorem+0x9c>
 8007d4a:	3c01      	subs	r4, #1
 8007d4c:	e7c7      	b.n	8007cde <quorem+0x96>
 8007d4e:	6812      	ldr	r2, [r2, #0]
 8007d50:	3b04      	subs	r3, #4
 8007d52:	2a00      	cmp	r2, #0
 8007d54:	d1f0      	bne.n	8007d38 <quorem+0xf0>
 8007d56:	3c01      	subs	r4, #1
 8007d58:	e7eb      	b.n	8007d32 <quorem+0xea>
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	e7ee      	b.n	8007d3c <quorem+0xf4>
	...

08007d60 <_dtoa_r>:
 8007d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d64:	ed2d 8b04 	vpush	{d8-d9}
 8007d68:	ec57 6b10 	vmov	r6, r7, d0
 8007d6c:	b093      	sub	sp, #76	; 0x4c
 8007d6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d74:	9106      	str	r1, [sp, #24]
 8007d76:	ee10 aa10 	vmov	sl, s0
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d7e:	930c      	str	r3, [sp, #48]	; 0x30
 8007d80:	46bb      	mov	fp, r7
 8007d82:	b975      	cbnz	r5, 8007da2 <_dtoa_r+0x42>
 8007d84:	2010      	movs	r0, #16
 8007d86:	f000 fddd 	bl	8008944 <malloc>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	6260      	str	r0, [r4, #36]	; 0x24
 8007d8e:	b920      	cbnz	r0, 8007d9a <_dtoa_r+0x3a>
 8007d90:	4ba7      	ldr	r3, [pc, #668]	; (8008030 <_dtoa_r+0x2d0>)
 8007d92:	21ea      	movs	r1, #234	; 0xea
 8007d94:	48a7      	ldr	r0, [pc, #668]	; (8008034 <_dtoa_r+0x2d4>)
 8007d96:	f001 fbc3 	bl	8009520 <__assert_func>
 8007d9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d9e:	6005      	str	r5, [r0, #0]
 8007da0:	60c5      	str	r5, [r0, #12]
 8007da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007da4:	6819      	ldr	r1, [r3, #0]
 8007da6:	b151      	cbz	r1, 8007dbe <_dtoa_r+0x5e>
 8007da8:	685a      	ldr	r2, [r3, #4]
 8007daa:	604a      	str	r2, [r1, #4]
 8007dac:	2301      	movs	r3, #1
 8007dae:	4093      	lsls	r3, r2
 8007db0:	608b      	str	r3, [r1, #8]
 8007db2:	4620      	mov	r0, r4
 8007db4:	f000 fe0e 	bl	80089d4 <_Bfree>
 8007db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dba:	2200      	movs	r2, #0
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	1e3b      	subs	r3, r7, #0
 8007dc0:	bfaa      	itet	ge
 8007dc2:	2300      	movge	r3, #0
 8007dc4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007dc8:	f8c8 3000 	strge.w	r3, [r8]
 8007dcc:	4b9a      	ldr	r3, [pc, #616]	; (8008038 <_dtoa_r+0x2d8>)
 8007dce:	bfbc      	itt	lt
 8007dd0:	2201      	movlt	r2, #1
 8007dd2:	f8c8 2000 	strlt.w	r2, [r8]
 8007dd6:	ea33 030b 	bics.w	r3, r3, fp
 8007dda:	d11b      	bne.n	8007e14 <_dtoa_r+0xb4>
 8007ddc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dde:	f242 730f 	movw	r3, #9999	; 0x270f
 8007de2:	6013      	str	r3, [r2, #0]
 8007de4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007de8:	4333      	orrs	r3, r6
 8007dea:	f000 8592 	beq.w	8008912 <_dtoa_r+0xbb2>
 8007dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007df0:	b963      	cbnz	r3, 8007e0c <_dtoa_r+0xac>
 8007df2:	4b92      	ldr	r3, [pc, #584]	; (800803c <_dtoa_r+0x2dc>)
 8007df4:	e022      	b.n	8007e3c <_dtoa_r+0xdc>
 8007df6:	4b92      	ldr	r3, [pc, #584]	; (8008040 <_dtoa_r+0x2e0>)
 8007df8:	9301      	str	r3, [sp, #4]
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	9801      	ldr	r0, [sp, #4]
 8007e02:	b013      	add	sp, #76	; 0x4c
 8007e04:	ecbd 8b04 	vpop	{d8-d9}
 8007e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0c:	4b8b      	ldr	r3, [pc, #556]	; (800803c <_dtoa_r+0x2dc>)
 8007e0e:	9301      	str	r3, [sp, #4]
 8007e10:	3303      	adds	r3, #3
 8007e12:	e7f3      	b.n	8007dfc <_dtoa_r+0x9c>
 8007e14:	2200      	movs	r2, #0
 8007e16:	2300      	movs	r3, #0
 8007e18:	4650      	mov	r0, sl
 8007e1a:	4659      	mov	r1, fp
 8007e1c:	f7f8 fe54 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e20:	ec4b ab19 	vmov	d9, sl, fp
 8007e24:	4680      	mov	r8, r0
 8007e26:	b158      	cbz	r0, 8007e40 <_dtoa_r+0xe0>
 8007e28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	6013      	str	r3, [r2, #0]
 8007e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 856b 	beq.w	800890c <_dtoa_r+0xbac>
 8007e36:	4883      	ldr	r0, [pc, #524]	; (8008044 <_dtoa_r+0x2e4>)
 8007e38:	6018      	str	r0, [r3, #0]
 8007e3a:	1e43      	subs	r3, r0, #1
 8007e3c:	9301      	str	r3, [sp, #4]
 8007e3e:	e7df      	b.n	8007e00 <_dtoa_r+0xa0>
 8007e40:	ec4b ab10 	vmov	d0, sl, fp
 8007e44:	aa10      	add	r2, sp, #64	; 0x40
 8007e46:	a911      	add	r1, sp, #68	; 0x44
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f001 f8ab 	bl	8008fa4 <__d2b>
 8007e4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007e52:	ee08 0a10 	vmov	s16, r0
 8007e56:	2d00      	cmp	r5, #0
 8007e58:	f000 8084 	beq.w	8007f64 <_dtoa_r+0x204>
 8007e5c:	ee19 3a90 	vmov	r3, s19
 8007e60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007e68:	4656      	mov	r6, sl
 8007e6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007e6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007e76:	4b74      	ldr	r3, [pc, #464]	; (8008048 <_dtoa_r+0x2e8>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	4639      	mov	r1, r7
 8007e7e:	f7f8 fa03 	bl	8000288 <__aeabi_dsub>
 8007e82:	a365      	add	r3, pc, #404	; (adr r3, 8008018 <_dtoa_r+0x2b8>)
 8007e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e88:	f7f8 fbb6 	bl	80005f8 <__aeabi_dmul>
 8007e8c:	a364      	add	r3, pc, #400	; (adr r3, 8008020 <_dtoa_r+0x2c0>)
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	f7f8 f9fb 	bl	800028c <__adddf3>
 8007e96:	4606      	mov	r6, r0
 8007e98:	4628      	mov	r0, r5
 8007e9a:	460f      	mov	r7, r1
 8007e9c:	f7f8 fb42 	bl	8000524 <__aeabi_i2d>
 8007ea0:	a361      	add	r3, pc, #388	; (adr r3, 8008028 <_dtoa_r+0x2c8>)
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	f7f8 fba7 	bl	80005f8 <__aeabi_dmul>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4630      	mov	r0, r6
 8007eb0:	4639      	mov	r1, r7
 8007eb2:	f7f8 f9eb 	bl	800028c <__adddf3>
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	460f      	mov	r7, r1
 8007eba:	f7f8 fe4d 	bl	8000b58 <__aeabi_d2iz>
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	9000      	str	r0, [sp, #0]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	4639      	mov	r1, r7
 8007ec8:	f7f8 fe08 	bl	8000adc <__aeabi_dcmplt>
 8007ecc:	b150      	cbz	r0, 8007ee4 <_dtoa_r+0x184>
 8007ece:	9800      	ldr	r0, [sp, #0]
 8007ed0:	f7f8 fb28 	bl	8000524 <__aeabi_i2d>
 8007ed4:	4632      	mov	r2, r6
 8007ed6:	463b      	mov	r3, r7
 8007ed8:	f7f8 fdf6 	bl	8000ac8 <__aeabi_dcmpeq>
 8007edc:	b910      	cbnz	r0, 8007ee4 <_dtoa_r+0x184>
 8007ede:	9b00      	ldr	r3, [sp, #0]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	9b00      	ldr	r3, [sp, #0]
 8007ee6:	2b16      	cmp	r3, #22
 8007ee8:	d85a      	bhi.n	8007fa0 <_dtoa_r+0x240>
 8007eea:	9a00      	ldr	r2, [sp, #0]
 8007eec:	4b57      	ldr	r3, [pc, #348]	; (800804c <_dtoa_r+0x2ec>)
 8007eee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	ec51 0b19 	vmov	r0, r1, d9
 8007efa:	f7f8 fdef 	bl	8000adc <__aeabi_dcmplt>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	d050      	beq.n	8007fa4 <_dtoa_r+0x244>
 8007f02:	9b00      	ldr	r3, [sp, #0]
 8007f04:	3b01      	subs	r3, #1
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	2300      	movs	r3, #0
 8007f0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f0e:	1b5d      	subs	r5, r3, r5
 8007f10:	1e6b      	subs	r3, r5, #1
 8007f12:	9305      	str	r3, [sp, #20]
 8007f14:	bf45      	ittet	mi
 8007f16:	f1c5 0301 	rsbmi	r3, r5, #1
 8007f1a:	9304      	strmi	r3, [sp, #16]
 8007f1c:	2300      	movpl	r3, #0
 8007f1e:	2300      	movmi	r3, #0
 8007f20:	bf4c      	ite	mi
 8007f22:	9305      	strmi	r3, [sp, #20]
 8007f24:	9304      	strpl	r3, [sp, #16]
 8007f26:	9b00      	ldr	r3, [sp, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	db3d      	blt.n	8007fa8 <_dtoa_r+0x248>
 8007f2c:	9b05      	ldr	r3, [sp, #20]
 8007f2e:	9a00      	ldr	r2, [sp, #0]
 8007f30:	920a      	str	r2, [sp, #40]	; 0x28
 8007f32:	4413      	add	r3, r2
 8007f34:	9305      	str	r3, [sp, #20]
 8007f36:	2300      	movs	r3, #0
 8007f38:	9307      	str	r3, [sp, #28]
 8007f3a:	9b06      	ldr	r3, [sp, #24]
 8007f3c:	2b09      	cmp	r3, #9
 8007f3e:	f200 8089 	bhi.w	8008054 <_dtoa_r+0x2f4>
 8007f42:	2b05      	cmp	r3, #5
 8007f44:	bfc4      	itt	gt
 8007f46:	3b04      	subgt	r3, #4
 8007f48:	9306      	strgt	r3, [sp, #24]
 8007f4a:	9b06      	ldr	r3, [sp, #24]
 8007f4c:	f1a3 0302 	sub.w	r3, r3, #2
 8007f50:	bfcc      	ite	gt
 8007f52:	2500      	movgt	r5, #0
 8007f54:	2501      	movle	r5, #1
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	f200 8087 	bhi.w	800806a <_dtoa_r+0x30a>
 8007f5c:	e8df f003 	tbb	[pc, r3]
 8007f60:	59383a2d 	.word	0x59383a2d
 8007f64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007f68:	441d      	add	r5, r3
 8007f6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007f6e:	2b20      	cmp	r3, #32
 8007f70:	bfc1      	itttt	gt
 8007f72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007f7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007f7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007f82:	bfda      	itte	le
 8007f84:	f1c3 0320 	rsble	r3, r3, #32
 8007f88:	fa06 f003 	lslle.w	r0, r6, r3
 8007f8c:	4318      	orrgt	r0, r3
 8007f8e:	f7f8 fab9 	bl	8000504 <__aeabi_ui2d>
 8007f92:	2301      	movs	r3, #1
 8007f94:	4606      	mov	r6, r0
 8007f96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007f9a:	3d01      	subs	r5, #1
 8007f9c:	930e      	str	r3, [sp, #56]	; 0x38
 8007f9e:	e76a      	b.n	8007e76 <_dtoa_r+0x116>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e7b2      	b.n	8007f0a <_dtoa_r+0x1aa>
 8007fa4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007fa6:	e7b1      	b.n	8007f0c <_dtoa_r+0x1ac>
 8007fa8:	9b04      	ldr	r3, [sp, #16]
 8007faa:	9a00      	ldr	r2, [sp, #0]
 8007fac:	1a9b      	subs	r3, r3, r2
 8007fae:	9304      	str	r3, [sp, #16]
 8007fb0:	4253      	negs	r3, r2
 8007fb2:	9307      	str	r3, [sp, #28]
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8007fb8:	e7bf      	b.n	8007f3a <_dtoa_r+0x1da>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	9308      	str	r3, [sp, #32]
 8007fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	dc55      	bgt.n	8008070 <_dtoa_r+0x310>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8007fce:	e00c      	b.n	8007fea <_dtoa_r+0x28a>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e7f3      	b.n	8007fbc <_dtoa_r+0x25c>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fd8:	9308      	str	r3, [sp, #32]
 8007fda:	9b00      	ldr	r3, [sp, #0]
 8007fdc:	4413      	add	r3, r2
 8007fde:	9302      	str	r3, [sp, #8]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	9303      	str	r3, [sp, #12]
 8007fe6:	bfb8      	it	lt
 8007fe8:	2301      	movlt	r3, #1
 8007fea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007fec:	2200      	movs	r2, #0
 8007fee:	6042      	str	r2, [r0, #4]
 8007ff0:	2204      	movs	r2, #4
 8007ff2:	f102 0614 	add.w	r6, r2, #20
 8007ff6:	429e      	cmp	r6, r3
 8007ff8:	6841      	ldr	r1, [r0, #4]
 8007ffa:	d93d      	bls.n	8008078 <_dtoa_r+0x318>
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f000 fca9 	bl	8008954 <_Balloc>
 8008002:	9001      	str	r0, [sp, #4]
 8008004:	2800      	cmp	r0, #0
 8008006:	d13b      	bne.n	8008080 <_dtoa_r+0x320>
 8008008:	4b11      	ldr	r3, [pc, #68]	; (8008050 <_dtoa_r+0x2f0>)
 800800a:	4602      	mov	r2, r0
 800800c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008010:	e6c0      	b.n	8007d94 <_dtoa_r+0x34>
 8008012:	2301      	movs	r3, #1
 8008014:	e7df      	b.n	8007fd6 <_dtoa_r+0x276>
 8008016:	bf00      	nop
 8008018:	636f4361 	.word	0x636f4361
 800801c:	3fd287a7 	.word	0x3fd287a7
 8008020:	8b60c8b3 	.word	0x8b60c8b3
 8008024:	3fc68a28 	.word	0x3fc68a28
 8008028:	509f79fb 	.word	0x509f79fb
 800802c:	3fd34413 	.word	0x3fd34413
 8008030:	0800a7bd 	.word	0x0800a7bd
 8008034:	0800a7d4 	.word	0x0800a7d4
 8008038:	7ff00000 	.word	0x7ff00000
 800803c:	0800a7b9 	.word	0x0800a7b9
 8008040:	0800a7b0 	.word	0x0800a7b0
 8008044:	0800a78d 	.word	0x0800a78d
 8008048:	3ff80000 	.word	0x3ff80000
 800804c:	0800a8c8 	.word	0x0800a8c8
 8008050:	0800a82f 	.word	0x0800a82f
 8008054:	2501      	movs	r5, #1
 8008056:	2300      	movs	r3, #0
 8008058:	9306      	str	r3, [sp, #24]
 800805a:	9508      	str	r5, [sp, #32]
 800805c:	f04f 33ff 	mov.w	r3, #4294967295
 8008060:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008064:	2200      	movs	r2, #0
 8008066:	2312      	movs	r3, #18
 8008068:	e7b0      	b.n	8007fcc <_dtoa_r+0x26c>
 800806a:	2301      	movs	r3, #1
 800806c:	9308      	str	r3, [sp, #32]
 800806e:	e7f5      	b.n	800805c <_dtoa_r+0x2fc>
 8008070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008072:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008076:	e7b8      	b.n	8007fea <_dtoa_r+0x28a>
 8008078:	3101      	adds	r1, #1
 800807a:	6041      	str	r1, [r0, #4]
 800807c:	0052      	lsls	r2, r2, #1
 800807e:	e7b8      	b.n	8007ff2 <_dtoa_r+0x292>
 8008080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008082:	9a01      	ldr	r2, [sp, #4]
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	9b03      	ldr	r3, [sp, #12]
 8008088:	2b0e      	cmp	r3, #14
 800808a:	f200 809d 	bhi.w	80081c8 <_dtoa_r+0x468>
 800808e:	2d00      	cmp	r5, #0
 8008090:	f000 809a 	beq.w	80081c8 <_dtoa_r+0x468>
 8008094:	9b00      	ldr	r3, [sp, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	dd32      	ble.n	8008100 <_dtoa_r+0x3a0>
 800809a:	4ab7      	ldr	r2, [pc, #732]	; (8008378 <_dtoa_r+0x618>)
 800809c:	f003 030f 	and.w	r3, r3, #15
 80080a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80080a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080a8:	9b00      	ldr	r3, [sp, #0]
 80080aa:	05d8      	lsls	r0, r3, #23
 80080ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80080b0:	d516      	bpl.n	80080e0 <_dtoa_r+0x380>
 80080b2:	4bb2      	ldr	r3, [pc, #712]	; (800837c <_dtoa_r+0x61c>)
 80080b4:	ec51 0b19 	vmov	r0, r1, d9
 80080b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080bc:	f7f8 fbc6 	bl	800084c <__aeabi_ddiv>
 80080c0:	f007 070f 	and.w	r7, r7, #15
 80080c4:	4682      	mov	sl, r0
 80080c6:	468b      	mov	fp, r1
 80080c8:	2503      	movs	r5, #3
 80080ca:	4eac      	ldr	r6, [pc, #688]	; (800837c <_dtoa_r+0x61c>)
 80080cc:	b957      	cbnz	r7, 80080e4 <_dtoa_r+0x384>
 80080ce:	4642      	mov	r2, r8
 80080d0:	464b      	mov	r3, r9
 80080d2:	4650      	mov	r0, sl
 80080d4:	4659      	mov	r1, fp
 80080d6:	f7f8 fbb9 	bl	800084c <__aeabi_ddiv>
 80080da:	4682      	mov	sl, r0
 80080dc:	468b      	mov	fp, r1
 80080de:	e028      	b.n	8008132 <_dtoa_r+0x3d2>
 80080e0:	2502      	movs	r5, #2
 80080e2:	e7f2      	b.n	80080ca <_dtoa_r+0x36a>
 80080e4:	07f9      	lsls	r1, r7, #31
 80080e6:	d508      	bpl.n	80080fa <_dtoa_r+0x39a>
 80080e8:	4640      	mov	r0, r8
 80080ea:	4649      	mov	r1, r9
 80080ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080f0:	f7f8 fa82 	bl	80005f8 <__aeabi_dmul>
 80080f4:	3501      	adds	r5, #1
 80080f6:	4680      	mov	r8, r0
 80080f8:	4689      	mov	r9, r1
 80080fa:	107f      	asrs	r7, r7, #1
 80080fc:	3608      	adds	r6, #8
 80080fe:	e7e5      	b.n	80080cc <_dtoa_r+0x36c>
 8008100:	f000 809b 	beq.w	800823a <_dtoa_r+0x4da>
 8008104:	9b00      	ldr	r3, [sp, #0]
 8008106:	4f9d      	ldr	r7, [pc, #628]	; (800837c <_dtoa_r+0x61c>)
 8008108:	425e      	negs	r6, r3
 800810a:	4b9b      	ldr	r3, [pc, #620]	; (8008378 <_dtoa_r+0x618>)
 800810c:	f006 020f 	and.w	r2, r6, #15
 8008110:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008118:	ec51 0b19 	vmov	r0, r1, d9
 800811c:	f7f8 fa6c 	bl	80005f8 <__aeabi_dmul>
 8008120:	1136      	asrs	r6, r6, #4
 8008122:	4682      	mov	sl, r0
 8008124:	468b      	mov	fp, r1
 8008126:	2300      	movs	r3, #0
 8008128:	2502      	movs	r5, #2
 800812a:	2e00      	cmp	r6, #0
 800812c:	d17a      	bne.n	8008224 <_dtoa_r+0x4c4>
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1d3      	bne.n	80080da <_dtoa_r+0x37a>
 8008132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 8082 	beq.w	800823e <_dtoa_r+0x4de>
 800813a:	4b91      	ldr	r3, [pc, #580]	; (8008380 <_dtoa_r+0x620>)
 800813c:	2200      	movs	r2, #0
 800813e:	4650      	mov	r0, sl
 8008140:	4659      	mov	r1, fp
 8008142:	f7f8 fccb 	bl	8000adc <__aeabi_dcmplt>
 8008146:	2800      	cmp	r0, #0
 8008148:	d079      	beq.n	800823e <_dtoa_r+0x4de>
 800814a:	9b03      	ldr	r3, [sp, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d076      	beq.n	800823e <_dtoa_r+0x4de>
 8008150:	9b02      	ldr	r3, [sp, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	dd36      	ble.n	80081c4 <_dtoa_r+0x464>
 8008156:	9b00      	ldr	r3, [sp, #0]
 8008158:	4650      	mov	r0, sl
 800815a:	4659      	mov	r1, fp
 800815c:	1e5f      	subs	r7, r3, #1
 800815e:	2200      	movs	r2, #0
 8008160:	4b88      	ldr	r3, [pc, #544]	; (8008384 <_dtoa_r+0x624>)
 8008162:	f7f8 fa49 	bl	80005f8 <__aeabi_dmul>
 8008166:	9e02      	ldr	r6, [sp, #8]
 8008168:	4682      	mov	sl, r0
 800816a:	468b      	mov	fp, r1
 800816c:	3501      	adds	r5, #1
 800816e:	4628      	mov	r0, r5
 8008170:	f7f8 f9d8 	bl	8000524 <__aeabi_i2d>
 8008174:	4652      	mov	r2, sl
 8008176:	465b      	mov	r3, fp
 8008178:	f7f8 fa3e 	bl	80005f8 <__aeabi_dmul>
 800817c:	4b82      	ldr	r3, [pc, #520]	; (8008388 <_dtoa_r+0x628>)
 800817e:	2200      	movs	r2, #0
 8008180:	f7f8 f884 	bl	800028c <__adddf3>
 8008184:	46d0      	mov	r8, sl
 8008186:	46d9      	mov	r9, fp
 8008188:	4682      	mov	sl, r0
 800818a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800818e:	2e00      	cmp	r6, #0
 8008190:	d158      	bne.n	8008244 <_dtoa_r+0x4e4>
 8008192:	4b7e      	ldr	r3, [pc, #504]	; (800838c <_dtoa_r+0x62c>)
 8008194:	2200      	movs	r2, #0
 8008196:	4640      	mov	r0, r8
 8008198:	4649      	mov	r1, r9
 800819a:	f7f8 f875 	bl	8000288 <__aeabi_dsub>
 800819e:	4652      	mov	r2, sl
 80081a0:	465b      	mov	r3, fp
 80081a2:	4680      	mov	r8, r0
 80081a4:	4689      	mov	r9, r1
 80081a6:	f7f8 fcb7 	bl	8000b18 <__aeabi_dcmpgt>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	f040 8295 	bne.w	80086da <_dtoa_r+0x97a>
 80081b0:	4652      	mov	r2, sl
 80081b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80081b6:	4640      	mov	r0, r8
 80081b8:	4649      	mov	r1, r9
 80081ba:	f7f8 fc8f 	bl	8000adc <__aeabi_dcmplt>
 80081be:	2800      	cmp	r0, #0
 80081c0:	f040 8289 	bne.w	80086d6 <_dtoa_r+0x976>
 80081c4:	ec5b ab19 	vmov	sl, fp, d9
 80081c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f2c0 8148 	blt.w	8008460 <_dtoa_r+0x700>
 80081d0:	9a00      	ldr	r2, [sp, #0]
 80081d2:	2a0e      	cmp	r2, #14
 80081d4:	f300 8144 	bgt.w	8008460 <_dtoa_r+0x700>
 80081d8:	4b67      	ldr	r3, [pc, #412]	; (8008378 <_dtoa_r+0x618>)
 80081da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f280 80d5 	bge.w	8008394 <_dtoa_r+0x634>
 80081ea:	9b03      	ldr	r3, [sp, #12]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f300 80d1 	bgt.w	8008394 <_dtoa_r+0x634>
 80081f2:	f040 826f 	bne.w	80086d4 <_dtoa_r+0x974>
 80081f6:	4b65      	ldr	r3, [pc, #404]	; (800838c <_dtoa_r+0x62c>)
 80081f8:	2200      	movs	r2, #0
 80081fa:	4640      	mov	r0, r8
 80081fc:	4649      	mov	r1, r9
 80081fe:	f7f8 f9fb 	bl	80005f8 <__aeabi_dmul>
 8008202:	4652      	mov	r2, sl
 8008204:	465b      	mov	r3, fp
 8008206:	f7f8 fc7d 	bl	8000b04 <__aeabi_dcmpge>
 800820a:	9e03      	ldr	r6, [sp, #12]
 800820c:	4637      	mov	r7, r6
 800820e:	2800      	cmp	r0, #0
 8008210:	f040 8245 	bne.w	800869e <_dtoa_r+0x93e>
 8008214:	9d01      	ldr	r5, [sp, #4]
 8008216:	2331      	movs	r3, #49	; 0x31
 8008218:	f805 3b01 	strb.w	r3, [r5], #1
 800821c:	9b00      	ldr	r3, [sp, #0]
 800821e:	3301      	adds	r3, #1
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	e240      	b.n	80086a6 <_dtoa_r+0x946>
 8008224:	07f2      	lsls	r2, r6, #31
 8008226:	d505      	bpl.n	8008234 <_dtoa_r+0x4d4>
 8008228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800822c:	f7f8 f9e4 	bl	80005f8 <__aeabi_dmul>
 8008230:	3501      	adds	r5, #1
 8008232:	2301      	movs	r3, #1
 8008234:	1076      	asrs	r6, r6, #1
 8008236:	3708      	adds	r7, #8
 8008238:	e777      	b.n	800812a <_dtoa_r+0x3ca>
 800823a:	2502      	movs	r5, #2
 800823c:	e779      	b.n	8008132 <_dtoa_r+0x3d2>
 800823e:	9f00      	ldr	r7, [sp, #0]
 8008240:	9e03      	ldr	r6, [sp, #12]
 8008242:	e794      	b.n	800816e <_dtoa_r+0x40e>
 8008244:	9901      	ldr	r1, [sp, #4]
 8008246:	4b4c      	ldr	r3, [pc, #304]	; (8008378 <_dtoa_r+0x618>)
 8008248:	4431      	add	r1, r6
 800824a:	910d      	str	r1, [sp, #52]	; 0x34
 800824c:	9908      	ldr	r1, [sp, #32]
 800824e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008252:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008256:	2900      	cmp	r1, #0
 8008258:	d043      	beq.n	80082e2 <_dtoa_r+0x582>
 800825a:	494d      	ldr	r1, [pc, #308]	; (8008390 <_dtoa_r+0x630>)
 800825c:	2000      	movs	r0, #0
 800825e:	f7f8 faf5 	bl	800084c <__aeabi_ddiv>
 8008262:	4652      	mov	r2, sl
 8008264:	465b      	mov	r3, fp
 8008266:	f7f8 f80f 	bl	8000288 <__aeabi_dsub>
 800826a:	9d01      	ldr	r5, [sp, #4]
 800826c:	4682      	mov	sl, r0
 800826e:	468b      	mov	fp, r1
 8008270:	4649      	mov	r1, r9
 8008272:	4640      	mov	r0, r8
 8008274:	f7f8 fc70 	bl	8000b58 <__aeabi_d2iz>
 8008278:	4606      	mov	r6, r0
 800827a:	f7f8 f953 	bl	8000524 <__aeabi_i2d>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	4640      	mov	r0, r8
 8008284:	4649      	mov	r1, r9
 8008286:	f7f7 ffff 	bl	8000288 <__aeabi_dsub>
 800828a:	3630      	adds	r6, #48	; 0x30
 800828c:	f805 6b01 	strb.w	r6, [r5], #1
 8008290:	4652      	mov	r2, sl
 8008292:	465b      	mov	r3, fp
 8008294:	4680      	mov	r8, r0
 8008296:	4689      	mov	r9, r1
 8008298:	f7f8 fc20 	bl	8000adc <__aeabi_dcmplt>
 800829c:	2800      	cmp	r0, #0
 800829e:	d163      	bne.n	8008368 <_dtoa_r+0x608>
 80082a0:	4642      	mov	r2, r8
 80082a2:	464b      	mov	r3, r9
 80082a4:	4936      	ldr	r1, [pc, #216]	; (8008380 <_dtoa_r+0x620>)
 80082a6:	2000      	movs	r0, #0
 80082a8:	f7f7 ffee 	bl	8000288 <__aeabi_dsub>
 80082ac:	4652      	mov	r2, sl
 80082ae:	465b      	mov	r3, fp
 80082b0:	f7f8 fc14 	bl	8000adc <__aeabi_dcmplt>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	f040 80b5 	bne.w	8008424 <_dtoa_r+0x6c4>
 80082ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082bc:	429d      	cmp	r5, r3
 80082be:	d081      	beq.n	80081c4 <_dtoa_r+0x464>
 80082c0:	4b30      	ldr	r3, [pc, #192]	; (8008384 <_dtoa_r+0x624>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	4650      	mov	r0, sl
 80082c6:	4659      	mov	r1, fp
 80082c8:	f7f8 f996 	bl	80005f8 <__aeabi_dmul>
 80082cc:	4b2d      	ldr	r3, [pc, #180]	; (8008384 <_dtoa_r+0x624>)
 80082ce:	4682      	mov	sl, r0
 80082d0:	468b      	mov	fp, r1
 80082d2:	4640      	mov	r0, r8
 80082d4:	4649      	mov	r1, r9
 80082d6:	2200      	movs	r2, #0
 80082d8:	f7f8 f98e 	bl	80005f8 <__aeabi_dmul>
 80082dc:	4680      	mov	r8, r0
 80082de:	4689      	mov	r9, r1
 80082e0:	e7c6      	b.n	8008270 <_dtoa_r+0x510>
 80082e2:	4650      	mov	r0, sl
 80082e4:	4659      	mov	r1, fp
 80082e6:	f7f8 f987 	bl	80005f8 <__aeabi_dmul>
 80082ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082ec:	9d01      	ldr	r5, [sp, #4]
 80082ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80082f0:	4682      	mov	sl, r0
 80082f2:	468b      	mov	fp, r1
 80082f4:	4649      	mov	r1, r9
 80082f6:	4640      	mov	r0, r8
 80082f8:	f7f8 fc2e 	bl	8000b58 <__aeabi_d2iz>
 80082fc:	4606      	mov	r6, r0
 80082fe:	f7f8 f911 	bl	8000524 <__aeabi_i2d>
 8008302:	3630      	adds	r6, #48	; 0x30
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	4640      	mov	r0, r8
 800830a:	4649      	mov	r1, r9
 800830c:	f7f7 ffbc 	bl	8000288 <__aeabi_dsub>
 8008310:	f805 6b01 	strb.w	r6, [r5], #1
 8008314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008316:	429d      	cmp	r5, r3
 8008318:	4680      	mov	r8, r0
 800831a:	4689      	mov	r9, r1
 800831c:	f04f 0200 	mov.w	r2, #0
 8008320:	d124      	bne.n	800836c <_dtoa_r+0x60c>
 8008322:	4b1b      	ldr	r3, [pc, #108]	; (8008390 <_dtoa_r+0x630>)
 8008324:	4650      	mov	r0, sl
 8008326:	4659      	mov	r1, fp
 8008328:	f7f7 ffb0 	bl	800028c <__adddf3>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4640      	mov	r0, r8
 8008332:	4649      	mov	r1, r9
 8008334:	f7f8 fbf0 	bl	8000b18 <__aeabi_dcmpgt>
 8008338:	2800      	cmp	r0, #0
 800833a:	d173      	bne.n	8008424 <_dtoa_r+0x6c4>
 800833c:	4652      	mov	r2, sl
 800833e:	465b      	mov	r3, fp
 8008340:	4913      	ldr	r1, [pc, #76]	; (8008390 <_dtoa_r+0x630>)
 8008342:	2000      	movs	r0, #0
 8008344:	f7f7 ffa0 	bl	8000288 <__aeabi_dsub>
 8008348:	4602      	mov	r2, r0
 800834a:	460b      	mov	r3, r1
 800834c:	4640      	mov	r0, r8
 800834e:	4649      	mov	r1, r9
 8008350:	f7f8 fbc4 	bl	8000adc <__aeabi_dcmplt>
 8008354:	2800      	cmp	r0, #0
 8008356:	f43f af35 	beq.w	80081c4 <_dtoa_r+0x464>
 800835a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800835c:	1e6b      	subs	r3, r5, #1
 800835e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008360:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008364:	2b30      	cmp	r3, #48	; 0x30
 8008366:	d0f8      	beq.n	800835a <_dtoa_r+0x5fa>
 8008368:	9700      	str	r7, [sp, #0]
 800836a:	e049      	b.n	8008400 <_dtoa_r+0x6a0>
 800836c:	4b05      	ldr	r3, [pc, #20]	; (8008384 <_dtoa_r+0x624>)
 800836e:	f7f8 f943 	bl	80005f8 <__aeabi_dmul>
 8008372:	4680      	mov	r8, r0
 8008374:	4689      	mov	r9, r1
 8008376:	e7bd      	b.n	80082f4 <_dtoa_r+0x594>
 8008378:	0800a8c8 	.word	0x0800a8c8
 800837c:	0800a8a0 	.word	0x0800a8a0
 8008380:	3ff00000 	.word	0x3ff00000
 8008384:	40240000 	.word	0x40240000
 8008388:	401c0000 	.word	0x401c0000
 800838c:	40140000 	.word	0x40140000
 8008390:	3fe00000 	.word	0x3fe00000
 8008394:	9d01      	ldr	r5, [sp, #4]
 8008396:	4656      	mov	r6, sl
 8008398:	465f      	mov	r7, fp
 800839a:	4642      	mov	r2, r8
 800839c:	464b      	mov	r3, r9
 800839e:	4630      	mov	r0, r6
 80083a0:	4639      	mov	r1, r7
 80083a2:	f7f8 fa53 	bl	800084c <__aeabi_ddiv>
 80083a6:	f7f8 fbd7 	bl	8000b58 <__aeabi_d2iz>
 80083aa:	4682      	mov	sl, r0
 80083ac:	f7f8 f8ba 	bl	8000524 <__aeabi_i2d>
 80083b0:	4642      	mov	r2, r8
 80083b2:	464b      	mov	r3, r9
 80083b4:	f7f8 f920 	bl	80005f8 <__aeabi_dmul>
 80083b8:	4602      	mov	r2, r0
 80083ba:	460b      	mov	r3, r1
 80083bc:	4630      	mov	r0, r6
 80083be:	4639      	mov	r1, r7
 80083c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80083c4:	f7f7 ff60 	bl	8000288 <__aeabi_dsub>
 80083c8:	f805 6b01 	strb.w	r6, [r5], #1
 80083cc:	9e01      	ldr	r6, [sp, #4]
 80083ce:	9f03      	ldr	r7, [sp, #12]
 80083d0:	1bae      	subs	r6, r5, r6
 80083d2:	42b7      	cmp	r7, r6
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	d135      	bne.n	8008446 <_dtoa_r+0x6e6>
 80083da:	f7f7 ff57 	bl	800028c <__adddf3>
 80083de:	4642      	mov	r2, r8
 80083e0:	464b      	mov	r3, r9
 80083e2:	4606      	mov	r6, r0
 80083e4:	460f      	mov	r7, r1
 80083e6:	f7f8 fb97 	bl	8000b18 <__aeabi_dcmpgt>
 80083ea:	b9d0      	cbnz	r0, 8008422 <_dtoa_r+0x6c2>
 80083ec:	4642      	mov	r2, r8
 80083ee:	464b      	mov	r3, r9
 80083f0:	4630      	mov	r0, r6
 80083f2:	4639      	mov	r1, r7
 80083f4:	f7f8 fb68 	bl	8000ac8 <__aeabi_dcmpeq>
 80083f8:	b110      	cbz	r0, 8008400 <_dtoa_r+0x6a0>
 80083fa:	f01a 0f01 	tst.w	sl, #1
 80083fe:	d110      	bne.n	8008422 <_dtoa_r+0x6c2>
 8008400:	4620      	mov	r0, r4
 8008402:	ee18 1a10 	vmov	r1, s16
 8008406:	f000 fae5 	bl	80089d4 <_Bfree>
 800840a:	2300      	movs	r3, #0
 800840c:	9800      	ldr	r0, [sp, #0]
 800840e:	702b      	strb	r3, [r5, #0]
 8008410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008412:	3001      	adds	r0, #1
 8008414:	6018      	str	r0, [r3, #0]
 8008416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008418:	2b00      	cmp	r3, #0
 800841a:	f43f acf1 	beq.w	8007e00 <_dtoa_r+0xa0>
 800841e:	601d      	str	r5, [r3, #0]
 8008420:	e4ee      	b.n	8007e00 <_dtoa_r+0xa0>
 8008422:	9f00      	ldr	r7, [sp, #0]
 8008424:	462b      	mov	r3, r5
 8008426:	461d      	mov	r5, r3
 8008428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800842c:	2a39      	cmp	r2, #57	; 0x39
 800842e:	d106      	bne.n	800843e <_dtoa_r+0x6de>
 8008430:	9a01      	ldr	r2, [sp, #4]
 8008432:	429a      	cmp	r2, r3
 8008434:	d1f7      	bne.n	8008426 <_dtoa_r+0x6c6>
 8008436:	9901      	ldr	r1, [sp, #4]
 8008438:	2230      	movs	r2, #48	; 0x30
 800843a:	3701      	adds	r7, #1
 800843c:	700a      	strb	r2, [r1, #0]
 800843e:	781a      	ldrb	r2, [r3, #0]
 8008440:	3201      	adds	r2, #1
 8008442:	701a      	strb	r2, [r3, #0]
 8008444:	e790      	b.n	8008368 <_dtoa_r+0x608>
 8008446:	4ba6      	ldr	r3, [pc, #664]	; (80086e0 <_dtoa_r+0x980>)
 8008448:	2200      	movs	r2, #0
 800844a:	f7f8 f8d5 	bl	80005f8 <__aeabi_dmul>
 800844e:	2200      	movs	r2, #0
 8008450:	2300      	movs	r3, #0
 8008452:	4606      	mov	r6, r0
 8008454:	460f      	mov	r7, r1
 8008456:	f7f8 fb37 	bl	8000ac8 <__aeabi_dcmpeq>
 800845a:	2800      	cmp	r0, #0
 800845c:	d09d      	beq.n	800839a <_dtoa_r+0x63a>
 800845e:	e7cf      	b.n	8008400 <_dtoa_r+0x6a0>
 8008460:	9a08      	ldr	r2, [sp, #32]
 8008462:	2a00      	cmp	r2, #0
 8008464:	f000 80d7 	beq.w	8008616 <_dtoa_r+0x8b6>
 8008468:	9a06      	ldr	r2, [sp, #24]
 800846a:	2a01      	cmp	r2, #1
 800846c:	f300 80ba 	bgt.w	80085e4 <_dtoa_r+0x884>
 8008470:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008472:	2a00      	cmp	r2, #0
 8008474:	f000 80b2 	beq.w	80085dc <_dtoa_r+0x87c>
 8008478:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800847c:	9e07      	ldr	r6, [sp, #28]
 800847e:	9d04      	ldr	r5, [sp, #16]
 8008480:	9a04      	ldr	r2, [sp, #16]
 8008482:	441a      	add	r2, r3
 8008484:	9204      	str	r2, [sp, #16]
 8008486:	9a05      	ldr	r2, [sp, #20]
 8008488:	2101      	movs	r1, #1
 800848a:	441a      	add	r2, r3
 800848c:	4620      	mov	r0, r4
 800848e:	9205      	str	r2, [sp, #20]
 8008490:	f000 fb58 	bl	8008b44 <__i2b>
 8008494:	4607      	mov	r7, r0
 8008496:	2d00      	cmp	r5, #0
 8008498:	dd0c      	ble.n	80084b4 <_dtoa_r+0x754>
 800849a:	9b05      	ldr	r3, [sp, #20]
 800849c:	2b00      	cmp	r3, #0
 800849e:	dd09      	ble.n	80084b4 <_dtoa_r+0x754>
 80084a0:	42ab      	cmp	r3, r5
 80084a2:	9a04      	ldr	r2, [sp, #16]
 80084a4:	bfa8      	it	ge
 80084a6:	462b      	movge	r3, r5
 80084a8:	1ad2      	subs	r2, r2, r3
 80084aa:	9204      	str	r2, [sp, #16]
 80084ac:	9a05      	ldr	r2, [sp, #20]
 80084ae:	1aed      	subs	r5, r5, r3
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	9305      	str	r3, [sp, #20]
 80084b4:	9b07      	ldr	r3, [sp, #28]
 80084b6:	b31b      	cbz	r3, 8008500 <_dtoa_r+0x7a0>
 80084b8:	9b08      	ldr	r3, [sp, #32]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 80af 	beq.w	800861e <_dtoa_r+0x8be>
 80084c0:	2e00      	cmp	r6, #0
 80084c2:	dd13      	ble.n	80084ec <_dtoa_r+0x78c>
 80084c4:	4639      	mov	r1, r7
 80084c6:	4632      	mov	r2, r6
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 fbfb 	bl	8008cc4 <__pow5mult>
 80084ce:	ee18 2a10 	vmov	r2, s16
 80084d2:	4601      	mov	r1, r0
 80084d4:	4607      	mov	r7, r0
 80084d6:	4620      	mov	r0, r4
 80084d8:	f000 fb4a 	bl	8008b70 <__multiply>
 80084dc:	ee18 1a10 	vmov	r1, s16
 80084e0:	4680      	mov	r8, r0
 80084e2:	4620      	mov	r0, r4
 80084e4:	f000 fa76 	bl	80089d4 <_Bfree>
 80084e8:	ee08 8a10 	vmov	s16, r8
 80084ec:	9b07      	ldr	r3, [sp, #28]
 80084ee:	1b9a      	subs	r2, r3, r6
 80084f0:	d006      	beq.n	8008500 <_dtoa_r+0x7a0>
 80084f2:	ee18 1a10 	vmov	r1, s16
 80084f6:	4620      	mov	r0, r4
 80084f8:	f000 fbe4 	bl	8008cc4 <__pow5mult>
 80084fc:	ee08 0a10 	vmov	s16, r0
 8008500:	2101      	movs	r1, #1
 8008502:	4620      	mov	r0, r4
 8008504:	f000 fb1e 	bl	8008b44 <__i2b>
 8008508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800850a:	2b00      	cmp	r3, #0
 800850c:	4606      	mov	r6, r0
 800850e:	f340 8088 	ble.w	8008622 <_dtoa_r+0x8c2>
 8008512:	461a      	mov	r2, r3
 8008514:	4601      	mov	r1, r0
 8008516:	4620      	mov	r0, r4
 8008518:	f000 fbd4 	bl	8008cc4 <__pow5mult>
 800851c:	9b06      	ldr	r3, [sp, #24]
 800851e:	2b01      	cmp	r3, #1
 8008520:	4606      	mov	r6, r0
 8008522:	f340 8081 	ble.w	8008628 <_dtoa_r+0x8c8>
 8008526:	f04f 0800 	mov.w	r8, #0
 800852a:	6933      	ldr	r3, [r6, #16]
 800852c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008530:	6918      	ldr	r0, [r3, #16]
 8008532:	f000 fab7 	bl	8008aa4 <__hi0bits>
 8008536:	f1c0 0020 	rsb	r0, r0, #32
 800853a:	9b05      	ldr	r3, [sp, #20]
 800853c:	4418      	add	r0, r3
 800853e:	f010 001f 	ands.w	r0, r0, #31
 8008542:	f000 8092 	beq.w	800866a <_dtoa_r+0x90a>
 8008546:	f1c0 0320 	rsb	r3, r0, #32
 800854a:	2b04      	cmp	r3, #4
 800854c:	f340 808a 	ble.w	8008664 <_dtoa_r+0x904>
 8008550:	f1c0 001c 	rsb	r0, r0, #28
 8008554:	9b04      	ldr	r3, [sp, #16]
 8008556:	4403      	add	r3, r0
 8008558:	9304      	str	r3, [sp, #16]
 800855a:	9b05      	ldr	r3, [sp, #20]
 800855c:	4403      	add	r3, r0
 800855e:	4405      	add	r5, r0
 8008560:	9305      	str	r3, [sp, #20]
 8008562:	9b04      	ldr	r3, [sp, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	dd07      	ble.n	8008578 <_dtoa_r+0x818>
 8008568:	ee18 1a10 	vmov	r1, s16
 800856c:	461a      	mov	r2, r3
 800856e:	4620      	mov	r0, r4
 8008570:	f000 fc02 	bl	8008d78 <__lshift>
 8008574:	ee08 0a10 	vmov	s16, r0
 8008578:	9b05      	ldr	r3, [sp, #20]
 800857a:	2b00      	cmp	r3, #0
 800857c:	dd05      	ble.n	800858a <_dtoa_r+0x82a>
 800857e:	4631      	mov	r1, r6
 8008580:	461a      	mov	r2, r3
 8008582:	4620      	mov	r0, r4
 8008584:	f000 fbf8 	bl	8008d78 <__lshift>
 8008588:	4606      	mov	r6, r0
 800858a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800858c:	2b00      	cmp	r3, #0
 800858e:	d06e      	beq.n	800866e <_dtoa_r+0x90e>
 8008590:	ee18 0a10 	vmov	r0, s16
 8008594:	4631      	mov	r1, r6
 8008596:	f000 fc5f 	bl	8008e58 <__mcmp>
 800859a:	2800      	cmp	r0, #0
 800859c:	da67      	bge.n	800866e <_dtoa_r+0x90e>
 800859e:	9b00      	ldr	r3, [sp, #0]
 80085a0:	3b01      	subs	r3, #1
 80085a2:	ee18 1a10 	vmov	r1, s16
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	220a      	movs	r2, #10
 80085aa:	2300      	movs	r3, #0
 80085ac:	4620      	mov	r0, r4
 80085ae:	f000 fa33 	bl	8008a18 <__multadd>
 80085b2:	9b08      	ldr	r3, [sp, #32]
 80085b4:	ee08 0a10 	vmov	s16, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 81b1 	beq.w	8008920 <_dtoa_r+0xbc0>
 80085be:	2300      	movs	r3, #0
 80085c0:	4639      	mov	r1, r7
 80085c2:	220a      	movs	r2, #10
 80085c4:	4620      	mov	r0, r4
 80085c6:	f000 fa27 	bl	8008a18 <__multadd>
 80085ca:	9b02      	ldr	r3, [sp, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	4607      	mov	r7, r0
 80085d0:	f300 808e 	bgt.w	80086f0 <_dtoa_r+0x990>
 80085d4:	9b06      	ldr	r3, [sp, #24]
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	dc51      	bgt.n	800867e <_dtoa_r+0x91e>
 80085da:	e089      	b.n	80086f0 <_dtoa_r+0x990>
 80085dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085e2:	e74b      	b.n	800847c <_dtoa_r+0x71c>
 80085e4:	9b03      	ldr	r3, [sp, #12]
 80085e6:	1e5e      	subs	r6, r3, #1
 80085e8:	9b07      	ldr	r3, [sp, #28]
 80085ea:	42b3      	cmp	r3, r6
 80085ec:	bfbf      	itttt	lt
 80085ee:	9b07      	ldrlt	r3, [sp, #28]
 80085f0:	9607      	strlt	r6, [sp, #28]
 80085f2:	1af2      	sublt	r2, r6, r3
 80085f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80085f6:	bfb6      	itet	lt
 80085f8:	189b      	addlt	r3, r3, r2
 80085fa:	1b9e      	subge	r6, r3, r6
 80085fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	bfb8      	it	lt
 8008602:	2600      	movlt	r6, #0
 8008604:	2b00      	cmp	r3, #0
 8008606:	bfb7      	itett	lt
 8008608:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800860c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008610:	1a9d      	sublt	r5, r3, r2
 8008612:	2300      	movlt	r3, #0
 8008614:	e734      	b.n	8008480 <_dtoa_r+0x720>
 8008616:	9e07      	ldr	r6, [sp, #28]
 8008618:	9d04      	ldr	r5, [sp, #16]
 800861a:	9f08      	ldr	r7, [sp, #32]
 800861c:	e73b      	b.n	8008496 <_dtoa_r+0x736>
 800861e:	9a07      	ldr	r2, [sp, #28]
 8008620:	e767      	b.n	80084f2 <_dtoa_r+0x792>
 8008622:	9b06      	ldr	r3, [sp, #24]
 8008624:	2b01      	cmp	r3, #1
 8008626:	dc18      	bgt.n	800865a <_dtoa_r+0x8fa>
 8008628:	f1ba 0f00 	cmp.w	sl, #0
 800862c:	d115      	bne.n	800865a <_dtoa_r+0x8fa>
 800862e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008632:	b993      	cbnz	r3, 800865a <_dtoa_r+0x8fa>
 8008634:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008638:	0d1b      	lsrs	r3, r3, #20
 800863a:	051b      	lsls	r3, r3, #20
 800863c:	b183      	cbz	r3, 8008660 <_dtoa_r+0x900>
 800863e:	9b04      	ldr	r3, [sp, #16]
 8008640:	3301      	adds	r3, #1
 8008642:	9304      	str	r3, [sp, #16]
 8008644:	9b05      	ldr	r3, [sp, #20]
 8008646:	3301      	adds	r3, #1
 8008648:	9305      	str	r3, [sp, #20]
 800864a:	f04f 0801 	mov.w	r8, #1
 800864e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008650:	2b00      	cmp	r3, #0
 8008652:	f47f af6a 	bne.w	800852a <_dtoa_r+0x7ca>
 8008656:	2001      	movs	r0, #1
 8008658:	e76f      	b.n	800853a <_dtoa_r+0x7da>
 800865a:	f04f 0800 	mov.w	r8, #0
 800865e:	e7f6      	b.n	800864e <_dtoa_r+0x8ee>
 8008660:	4698      	mov	r8, r3
 8008662:	e7f4      	b.n	800864e <_dtoa_r+0x8ee>
 8008664:	f43f af7d 	beq.w	8008562 <_dtoa_r+0x802>
 8008668:	4618      	mov	r0, r3
 800866a:	301c      	adds	r0, #28
 800866c:	e772      	b.n	8008554 <_dtoa_r+0x7f4>
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	2b00      	cmp	r3, #0
 8008672:	dc37      	bgt.n	80086e4 <_dtoa_r+0x984>
 8008674:	9b06      	ldr	r3, [sp, #24]
 8008676:	2b02      	cmp	r3, #2
 8008678:	dd34      	ble.n	80086e4 <_dtoa_r+0x984>
 800867a:	9b03      	ldr	r3, [sp, #12]
 800867c:	9302      	str	r3, [sp, #8]
 800867e:	9b02      	ldr	r3, [sp, #8]
 8008680:	b96b      	cbnz	r3, 800869e <_dtoa_r+0x93e>
 8008682:	4631      	mov	r1, r6
 8008684:	2205      	movs	r2, #5
 8008686:	4620      	mov	r0, r4
 8008688:	f000 f9c6 	bl	8008a18 <__multadd>
 800868c:	4601      	mov	r1, r0
 800868e:	4606      	mov	r6, r0
 8008690:	ee18 0a10 	vmov	r0, s16
 8008694:	f000 fbe0 	bl	8008e58 <__mcmp>
 8008698:	2800      	cmp	r0, #0
 800869a:	f73f adbb 	bgt.w	8008214 <_dtoa_r+0x4b4>
 800869e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086a0:	9d01      	ldr	r5, [sp, #4]
 80086a2:	43db      	mvns	r3, r3
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	f04f 0800 	mov.w	r8, #0
 80086aa:	4631      	mov	r1, r6
 80086ac:	4620      	mov	r0, r4
 80086ae:	f000 f991 	bl	80089d4 <_Bfree>
 80086b2:	2f00      	cmp	r7, #0
 80086b4:	f43f aea4 	beq.w	8008400 <_dtoa_r+0x6a0>
 80086b8:	f1b8 0f00 	cmp.w	r8, #0
 80086bc:	d005      	beq.n	80086ca <_dtoa_r+0x96a>
 80086be:	45b8      	cmp	r8, r7
 80086c0:	d003      	beq.n	80086ca <_dtoa_r+0x96a>
 80086c2:	4641      	mov	r1, r8
 80086c4:	4620      	mov	r0, r4
 80086c6:	f000 f985 	bl	80089d4 <_Bfree>
 80086ca:	4639      	mov	r1, r7
 80086cc:	4620      	mov	r0, r4
 80086ce:	f000 f981 	bl	80089d4 <_Bfree>
 80086d2:	e695      	b.n	8008400 <_dtoa_r+0x6a0>
 80086d4:	2600      	movs	r6, #0
 80086d6:	4637      	mov	r7, r6
 80086d8:	e7e1      	b.n	800869e <_dtoa_r+0x93e>
 80086da:	9700      	str	r7, [sp, #0]
 80086dc:	4637      	mov	r7, r6
 80086de:	e599      	b.n	8008214 <_dtoa_r+0x4b4>
 80086e0:	40240000 	.word	0x40240000
 80086e4:	9b08      	ldr	r3, [sp, #32]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 80ca 	beq.w	8008880 <_dtoa_r+0xb20>
 80086ec:	9b03      	ldr	r3, [sp, #12]
 80086ee:	9302      	str	r3, [sp, #8]
 80086f0:	2d00      	cmp	r5, #0
 80086f2:	dd05      	ble.n	8008700 <_dtoa_r+0x9a0>
 80086f4:	4639      	mov	r1, r7
 80086f6:	462a      	mov	r2, r5
 80086f8:	4620      	mov	r0, r4
 80086fa:	f000 fb3d 	bl	8008d78 <__lshift>
 80086fe:	4607      	mov	r7, r0
 8008700:	f1b8 0f00 	cmp.w	r8, #0
 8008704:	d05b      	beq.n	80087be <_dtoa_r+0xa5e>
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	4620      	mov	r0, r4
 800870a:	f000 f923 	bl	8008954 <_Balloc>
 800870e:	4605      	mov	r5, r0
 8008710:	b928      	cbnz	r0, 800871e <_dtoa_r+0x9be>
 8008712:	4b87      	ldr	r3, [pc, #540]	; (8008930 <_dtoa_r+0xbd0>)
 8008714:	4602      	mov	r2, r0
 8008716:	f240 21ea 	movw	r1, #746	; 0x2ea
 800871a:	f7ff bb3b 	b.w	8007d94 <_dtoa_r+0x34>
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	3202      	adds	r2, #2
 8008722:	0092      	lsls	r2, r2, #2
 8008724:	f107 010c 	add.w	r1, r7, #12
 8008728:	300c      	adds	r0, #12
 800872a:	f7fe fdb9 	bl	80072a0 <memcpy>
 800872e:	2201      	movs	r2, #1
 8008730:	4629      	mov	r1, r5
 8008732:	4620      	mov	r0, r4
 8008734:	f000 fb20 	bl	8008d78 <__lshift>
 8008738:	9b01      	ldr	r3, [sp, #4]
 800873a:	f103 0901 	add.w	r9, r3, #1
 800873e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008742:	4413      	add	r3, r2
 8008744:	9305      	str	r3, [sp, #20]
 8008746:	f00a 0301 	and.w	r3, sl, #1
 800874a:	46b8      	mov	r8, r7
 800874c:	9304      	str	r3, [sp, #16]
 800874e:	4607      	mov	r7, r0
 8008750:	4631      	mov	r1, r6
 8008752:	ee18 0a10 	vmov	r0, s16
 8008756:	f7ff fa77 	bl	8007c48 <quorem>
 800875a:	4641      	mov	r1, r8
 800875c:	9002      	str	r0, [sp, #8]
 800875e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008762:	ee18 0a10 	vmov	r0, s16
 8008766:	f000 fb77 	bl	8008e58 <__mcmp>
 800876a:	463a      	mov	r2, r7
 800876c:	9003      	str	r0, [sp, #12]
 800876e:	4631      	mov	r1, r6
 8008770:	4620      	mov	r0, r4
 8008772:	f000 fb8d 	bl	8008e90 <__mdiff>
 8008776:	68c2      	ldr	r2, [r0, #12]
 8008778:	f109 3bff 	add.w	fp, r9, #4294967295
 800877c:	4605      	mov	r5, r0
 800877e:	bb02      	cbnz	r2, 80087c2 <_dtoa_r+0xa62>
 8008780:	4601      	mov	r1, r0
 8008782:	ee18 0a10 	vmov	r0, s16
 8008786:	f000 fb67 	bl	8008e58 <__mcmp>
 800878a:	4602      	mov	r2, r0
 800878c:	4629      	mov	r1, r5
 800878e:	4620      	mov	r0, r4
 8008790:	9207      	str	r2, [sp, #28]
 8008792:	f000 f91f 	bl	80089d4 <_Bfree>
 8008796:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800879a:	ea43 0102 	orr.w	r1, r3, r2
 800879e:	9b04      	ldr	r3, [sp, #16]
 80087a0:	430b      	orrs	r3, r1
 80087a2:	464d      	mov	r5, r9
 80087a4:	d10f      	bne.n	80087c6 <_dtoa_r+0xa66>
 80087a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80087aa:	d02a      	beq.n	8008802 <_dtoa_r+0xaa2>
 80087ac:	9b03      	ldr	r3, [sp, #12]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	dd02      	ble.n	80087b8 <_dtoa_r+0xa58>
 80087b2:	9b02      	ldr	r3, [sp, #8]
 80087b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80087b8:	f88b a000 	strb.w	sl, [fp]
 80087bc:	e775      	b.n	80086aa <_dtoa_r+0x94a>
 80087be:	4638      	mov	r0, r7
 80087c0:	e7ba      	b.n	8008738 <_dtoa_r+0x9d8>
 80087c2:	2201      	movs	r2, #1
 80087c4:	e7e2      	b.n	800878c <_dtoa_r+0xa2c>
 80087c6:	9b03      	ldr	r3, [sp, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	db04      	blt.n	80087d6 <_dtoa_r+0xa76>
 80087cc:	9906      	ldr	r1, [sp, #24]
 80087ce:	430b      	orrs	r3, r1
 80087d0:	9904      	ldr	r1, [sp, #16]
 80087d2:	430b      	orrs	r3, r1
 80087d4:	d122      	bne.n	800881c <_dtoa_r+0xabc>
 80087d6:	2a00      	cmp	r2, #0
 80087d8:	ddee      	ble.n	80087b8 <_dtoa_r+0xa58>
 80087da:	ee18 1a10 	vmov	r1, s16
 80087de:	2201      	movs	r2, #1
 80087e0:	4620      	mov	r0, r4
 80087e2:	f000 fac9 	bl	8008d78 <__lshift>
 80087e6:	4631      	mov	r1, r6
 80087e8:	ee08 0a10 	vmov	s16, r0
 80087ec:	f000 fb34 	bl	8008e58 <__mcmp>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	dc03      	bgt.n	80087fc <_dtoa_r+0xa9c>
 80087f4:	d1e0      	bne.n	80087b8 <_dtoa_r+0xa58>
 80087f6:	f01a 0f01 	tst.w	sl, #1
 80087fa:	d0dd      	beq.n	80087b8 <_dtoa_r+0xa58>
 80087fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008800:	d1d7      	bne.n	80087b2 <_dtoa_r+0xa52>
 8008802:	2339      	movs	r3, #57	; 0x39
 8008804:	f88b 3000 	strb.w	r3, [fp]
 8008808:	462b      	mov	r3, r5
 800880a:	461d      	mov	r5, r3
 800880c:	3b01      	subs	r3, #1
 800880e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008812:	2a39      	cmp	r2, #57	; 0x39
 8008814:	d071      	beq.n	80088fa <_dtoa_r+0xb9a>
 8008816:	3201      	adds	r2, #1
 8008818:	701a      	strb	r2, [r3, #0]
 800881a:	e746      	b.n	80086aa <_dtoa_r+0x94a>
 800881c:	2a00      	cmp	r2, #0
 800881e:	dd07      	ble.n	8008830 <_dtoa_r+0xad0>
 8008820:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008824:	d0ed      	beq.n	8008802 <_dtoa_r+0xaa2>
 8008826:	f10a 0301 	add.w	r3, sl, #1
 800882a:	f88b 3000 	strb.w	r3, [fp]
 800882e:	e73c      	b.n	80086aa <_dtoa_r+0x94a>
 8008830:	9b05      	ldr	r3, [sp, #20]
 8008832:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008836:	4599      	cmp	r9, r3
 8008838:	d047      	beq.n	80088ca <_dtoa_r+0xb6a>
 800883a:	ee18 1a10 	vmov	r1, s16
 800883e:	2300      	movs	r3, #0
 8008840:	220a      	movs	r2, #10
 8008842:	4620      	mov	r0, r4
 8008844:	f000 f8e8 	bl	8008a18 <__multadd>
 8008848:	45b8      	cmp	r8, r7
 800884a:	ee08 0a10 	vmov	s16, r0
 800884e:	f04f 0300 	mov.w	r3, #0
 8008852:	f04f 020a 	mov.w	r2, #10
 8008856:	4641      	mov	r1, r8
 8008858:	4620      	mov	r0, r4
 800885a:	d106      	bne.n	800886a <_dtoa_r+0xb0a>
 800885c:	f000 f8dc 	bl	8008a18 <__multadd>
 8008860:	4680      	mov	r8, r0
 8008862:	4607      	mov	r7, r0
 8008864:	f109 0901 	add.w	r9, r9, #1
 8008868:	e772      	b.n	8008750 <_dtoa_r+0x9f0>
 800886a:	f000 f8d5 	bl	8008a18 <__multadd>
 800886e:	4639      	mov	r1, r7
 8008870:	4680      	mov	r8, r0
 8008872:	2300      	movs	r3, #0
 8008874:	220a      	movs	r2, #10
 8008876:	4620      	mov	r0, r4
 8008878:	f000 f8ce 	bl	8008a18 <__multadd>
 800887c:	4607      	mov	r7, r0
 800887e:	e7f1      	b.n	8008864 <_dtoa_r+0xb04>
 8008880:	9b03      	ldr	r3, [sp, #12]
 8008882:	9302      	str	r3, [sp, #8]
 8008884:	9d01      	ldr	r5, [sp, #4]
 8008886:	ee18 0a10 	vmov	r0, s16
 800888a:	4631      	mov	r1, r6
 800888c:	f7ff f9dc 	bl	8007c48 <quorem>
 8008890:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008894:	9b01      	ldr	r3, [sp, #4]
 8008896:	f805 ab01 	strb.w	sl, [r5], #1
 800889a:	1aea      	subs	r2, r5, r3
 800889c:	9b02      	ldr	r3, [sp, #8]
 800889e:	4293      	cmp	r3, r2
 80088a0:	dd09      	ble.n	80088b6 <_dtoa_r+0xb56>
 80088a2:	ee18 1a10 	vmov	r1, s16
 80088a6:	2300      	movs	r3, #0
 80088a8:	220a      	movs	r2, #10
 80088aa:	4620      	mov	r0, r4
 80088ac:	f000 f8b4 	bl	8008a18 <__multadd>
 80088b0:	ee08 0a10 	vmov	s16, r0
 80088b4:	e7e7      	b.n	8008886 <_dtoa_r+0xb26>
 80088b6:	9b02      	ldr	r3, [sp, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	bfc8      	it	gt
 80088bc:	461d      	movgt	r5, r3
 80088be:	9b01      	ldr	r3, [sp, #4]
 80088c0:	bfd8      	it	le
 80088c2:	2501      	movle	r5, #1
 80088c4:	441d      	add	r5, r3
 80088c6:	f04f 0800 	mov.w	r8, #0
 80088ca:	ee18 1a10 	vmov	r1, s16
 80088ce:	2201      	movs	r2, #1
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 fa51 	bl	8008d78 <__lshift>
 80088d6:	4631      	mov	r1, r6
 80088d8:	ee08 0a10 	vmov	s16, r0
 80088dc:	f000 fabc 	bl	8008e58 <__mcmp>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	dc91      	bgt.n	8008808 <_dtoa_r+0xaa8>
 80088e4:	d102      	bne.n	80088ec <_dtoa_r+0xb8c>
 80088e6:	f01a 0f01 	tst.w	sl, #1
 80088ea:	d18d      	bne.n	8008808 <_dtoa_r+0xaa8>
 80088ec:	462b      	mov	r3, r5
 80088ee:	461d      	mov	r5, r3
 80088f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088f4:	2a30      	cmp	r2, #48	; 0x30
 80088f6:	d0fa      	beq.n	80088ee <_dtoa_r+0xb8e>
 80088f8:	e6d7      	b.n	80086aa <_dtoa_r+0x94a>
 80088fa:	9a01      	ldr	r2, [sp, #4]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d184      	bne.n	800880a <_dtoa_r+0xaaa>
 8008900:	9b00      	ldr	r3, [sp, #0]
 8008902:	3301      	adds	r3, #1
 8008904:	9300      	str	r3, [sp, #0]
 8008906:	2331      	movs	r3, #49	; 0x31
 8008908:	7013      	strb	r3, [r2, #0]
 800890a:	e6ce      	b.n	80086aa <_dtoa_r+0x94a>
 800890c:	4b09      	ldr	r3, [pc, #36]	; (8008934 <_dtoa_r+0xbd4>)
 800890e:	f7ff ba95 	b.w	8007e3c <_dtoa_r+0xdc>
 8008912:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008914:	2b00      	cmp	r3, #0
 8008916:	f47f aa6e 	bne.w	8007df6 <_dtoa_r+0x96>
 800891a:	4b07      	ldr	r3, [pc, #28]	; (8008938 <_dtoa_r+0xbd8>)
 800891c:	f7ff ba8e 	b.w	8007e3c <_dtoa_r+0xdc>
 8008920:	9b02      	ldr	r3, [sp, #8]
 8008922:	2b00      	cmp	r3, #0
 8008924:	dcae      	bgt.n	8008884 <_dtoa_r+0xb24>
 8008926:	9b06      	ldr	r3, [sp, #24]
 8008928:	2b02      	cmp	r3, #2
 800892a:	f73f aea8 	bgt.w	800867e <_dtoa_r+0x91e>
 800892e:	e7a9      	b.n	8008884 <_dtoa_r+0xb24>
 8008930:	0800a82f 	.word	0x0800a82f
 8008934:	0800a78c 	.word	0x0800a78c
 8008938:	0800a7b0 	.word	0x0800a7b0

0800893c <_localeconv_r>:
 800893c:	4800      	ldr	r0, [pc, #0]	; (8008940 <_localeconv_r+0x4>)
 800893e:	4770      	bx	lr
 8008940:	20000164 	.word	0x20000164

08008944 <malloc>:
 8008944:	4b02      	ldr	r3, [pc, #8]	; (8008950 <malloc+0xc>)
 8008946:	4601      	mov	r1, r0
 8008948:	6818      	ldr	r0, [r3, #0]
 800894a:	f000 bc09 	b.w	8009160 <_malloc_r>
 800894e:	bf00      	nop
 8008950:	20000010 	.word	0x20000010

08008954 <_Balloc>:
 8008954:	b570      	push	{r4, r5, r6, lr}
 8008956:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008958:	4604      	mov	r4, r0
 800895a:	460d      	mov	r5, r1
 800895c:	b976      	cbnz	r6, 800897c <_Balloc+0x28>
 800895e:	2010      	movs	r0, #16
 8008960:	f7ff fff0 	bl	8008944 <malloc>
 8008964:	4602      	mov	r2, r0
 8008966:	6260      	str	r0, [r4, #36]	; 0x24
 8008968:	b920      	cbnz	r0, 8008974 <_Balloc+0x20>
 800896a:	4b18      	ldr	r3, [pc, #96]	; (80089cc <_Balloc+0x78>)
 800896c:	4818      	ldr	r0, [pc, #96]	; (80089d0 <_Balloc+0x7c>)
 800896e:	2166      	movs	r1, #102	; 0x66
 8008970:	f000 fdd6 	bl	8009520 <__assert_func>
 8008974:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008978:	6006      	str	r6, [r0, #0]
 800897a:	60c6      	str	r6, [r0, #12]
 800897c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800897e:	68f3      	ldr	r3, [r6, #12]
 8008980:	b183      	cbz	r3, 80089a4 <_Balloc+0x50>
 8008982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800898a:	b9b8      	cbnz	r0, 80089bc <_Balloc+0x68>
 800898c:	2101      	movs	r1, #1
 800898e:	fa01 f605 	lsl.w	r6, r1, r5
 8008992:	1d72      	adds	r2, r6, #5
 8008994:	0092      	lsls	r2, r2, #2
 8008996:	4620      	mov	r0, r4
 8008998:	f000 fb60 	bl	800905c <_calloc_r>
 800899c:	b160      	cbz	r0, 80089b8 <_Balloc+0x64>
 800899e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089a2:	e00e      	b.n	80089c2 <_Balloc+0x6e>
 80089a4:	2221      	movs	r2, #33	; 0x21
 80089a6:	2104      	movs	r1, #4
 80089a8:	4620      	mov	r0, r4
 80089aa:	f000 fb57 	bl	800905c <_calloc_r>
 80089ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089b0:	60f0      	str	r0, [r6, #12]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1e4      	bne.n	8008982 <_Balloc+0x2e>
 80089b8:	2000      	movs	r0, #0
 80089ba:	bd70      	pop	{r4, r5, r6, pc}
 80089bc:	6802      	ldr	r2, [r0, #0]
 80089be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089c2:	2300      	movs	r3, #0
 80089c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089c8:	e7f7      	b.n	80089ba <_Balloc+0x66>
 80089ca:	bf00      	nop
 80089cc:	0800a7bd 	.word	0x0800a7bd
 80089d0:	0800a840 	.word	0x0800a840

080089d4 <_Bfree>:
 80089d4:	b570      	push	{r4, r5, r6, lr}
 80089d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089d8:	4605      	mov	r5, r0
 80089da:	460c      	mov	r4, r1
 80089dc:	b976      	cbnz	r6, 80089fc <_Bfree+0x28>
 80089de:	2010      	movs	r0, #16
 80089e0:	f7ff ffb0 	bl	8008944 <malloc>
 80089e4:	4602      	mov	r2, r0
 80089e6:	6268      	str	r0, [r5, #36]	; 0x24
 80089e8:	b920      	cbnz	r0, 80089f4 <_Bfree+0x20>
 80089ea:	4b09      	ldr	r3, [pc, #36]	; (8008a10 <_Bfree+0x3c>)
 80089ec:	4809      	ldr	r0, [pc, #36]	; (8008a14 <_Bfree+0x40>)
 80089ee:	218a      	movs	r1, #138	; 0x8a
 80089f0:	f000 fd96 	bl	8009520 <__assert_func>
 80089f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089f8:	6006      	str	r6, [r0, #0]
 80089fa:	60c6      	str	r6, [r0, #12]
 80089fc:	b13c      	cbz	r4, 8008a0e <_Bfree+0x3a>
 80089fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a00:	6862      	ldr	r2, [r4, #4]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a08:	6021      	str	r1, [r4, #0]
 8008a0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a0e:	bd70      	pop	{r4, r5, r6, pc}
 8008a10:	0800a7bd 	.word	0x0800a7bd
 8008a14:	0800a840 	.word	0x0800a840

08008a18 <__multadd>:
 8008a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1c:	690d      	ldr	r5, [r1, #16]
 8008a1e:	4607      	mov	r7, r0
 8008a20:	460c      	mov	r4, r1
 8008a22:	461e      	mov	r6, r3
 8008a24:	f101 0c14 	add.w	ip, r1, #20
 8008a28:	2000      	movs	r0, #0
 8008a2a:	f8dc 3000 	ldr.w	r3, [ip]
 8008a2e:	b299      	uxth	r1, r3
 8008a30:	fb02 6101 	mla	r1, r2, r1, r6
 8008a34:	0c1e      	lsrs	r6, r3, #16
 8008a36:	0c0b      	lsrs	r3, r1, #16
 8008a38:	fb02 3306 	mla	r3, r2, r6, r3
 8008a3c:	b289      	uxth	r1, r1
 8008a3e:	3001      	adds	r0, #1
 8008a40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a44:	4285      	cmp	r5, r0
 8008a46:	f84c 1b04 	str.w	r1, [ip], #4
 8008a4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a4e:	dcec      	bgt.n	8008a2a <__multadd+0x12>
 8008a50:	b30e      	cbz	r6, 8008a96 <__multadd+0x7e>
 8008a52:	68a3      	ldr	r3, [r4, #8]
 8008a54:	42ab      	cmp	r3, r5
 8008a56:	dc19      	bgt.n	8008a8c <__multadd+0x74>
 8008a58:	6861      	ldr	r1, [r4, #4]
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	3101      	adds	r1, #1
 8008a5e:	f7ff ff79 	bl	8008954 <_Balloc>
 8008a62:	4680      	mov	r8, r0
 8008a64:	b928      	cbnz	r0, 8008a72 <__multadd+0x5a>
 8008a66:	4602      	mov	r2, r0
 8008a68:	4b0c      	ldr	r3, [pc, #48]	; (8008a9c <__multadd+0x84>)
 8008a6a:	480d      	ldr	r0, [pc, #52]	; (8008aa0 <__multadd+0x88>)
 8008a6c:	21b5      	movs	r1, #181	; 0xb5
 8008a6e:	f000 fd57 	bl	8009520 <__assert_func>
 8008a72:	6922      	ldr	r2, [r4, #16]
 8008a74:	3202      	adds	r2, #2
 8008a76:	f104 010c 	add.w	r1, r4, #12
 8008a7a:	0092      	lsls	r2, r2, #2
 8008a7c:	300c      	adds	r0, #12
 8008a7e:	f7fe fc0f 	bl	80072a0 <memcpy>
 8008a82:	4621      	mov	r1, r4
 8008a84:	4638      	mov	r0, r7
 8008a86:	f7ff ffa5 	bl	80089d4 <_Bfree>
 8008a8a:	4644      	mov	r4, r8
 8008a8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a90:	3501      	adds	r5, #1
 8008a92:	615e      	str	r6, [r3, #20]
 8008a94:	6125      	str	r5, [r4, #16]
 8008a96:	4620      	mov	r0, r4
 8008a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a9c:	0800a82f 	.word	0x0800a82f
 8008aa0:	0800a840 	.word	0x0800a840

08008aa4 <__hi0bits>:
 8008aa4:	0c03      	lsrs	r3, r0, #16
 8008aa6:	041b      	lsls	r3, r3, #16
 8008aa8:	b9d3      	cbnz	r3, 8008ae0 <__hi0bits+0x3c>
 8008aaa:	0400      	lsls	r0, r0, #16
 8008aac:	2310      	movs	r3, #16
 8008aae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ab2:	bf04      	itt	eq
 8008ab4:	0200      	lsleq	r0, r0, #8
 8008ab6:	3308      	addeq	r3, #8
 8008ab8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008abc:	bf04      	itt	eq
 8008abe:	0100      	lsleq	r0, r0, #4
 8008ac0:	3304      	addeq	r3, #4
 8008ac2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ac6:	bf04      	itt	eq
 8008ac8:	0080      	lsleq	r0, r0, #2
 8008aca:	3302      	addeq	r3, #2
 8008acc:	2800      	cmp	r0, #0
 8008ace:	db05      	blt.n	8008adc <__hi0bits+0x38>
 8008ad0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ad4:	f103 0301 	add.w	r3, r3, #1
 8008ad8:	bf08      	it	eq
 8008ada:	2320      	moveq	r3, #32
 8008adc:	4618      	mov	r0, r3
 8008ade:	4770      	bx	lr
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	e7e4      	b.n	8008aae <__hi0bits+0xa>

08008ae4 <__lo0bits>:
 8008ae4:	6803      	ldr	r3, [r0, #0]
 8008ae6:	f013 0207 	ands.w	r2, r3, #7
 8008aea:	4601      	mov	r1, r0
 8008aec:	d00b      	beq.n	8008b06 <__lo0bits+0x22>
 8008aee:	07da      	lsls	r2, r3, #31
 8008af0:	d423      	bmi.n	8008b3a <__lo0bits+0x56>
 8008af2:	0798      	lsls	r0, r3, #30
 8008af4:	bf49      	itett	mi
 8008af6:	085b      	lsrmi	r3, r3, #1
 8008af8:	089b      	lsrpl	r3, r3, #2
 8008afa:	2001      	movmi	r0, #1
 8008afc:	600b      	strmi	r3, [r1, #0]
 8008afe:	bf5c      	itt	pl
 8008b00:	600b      	strpl	r3, [r1, #0]
 8008b02:	2002      	movpl	r0, #2
 8008b04:	4770      	bx	lr
 8008b06:	b298      	uxth	r0, r3
 8008b08:	b9a8      	cbnz	r0, 8008b36 <__lo0bits+0x52>
 8008b0a:	0c1b      	lsrs	r3, r3, #16
 8008b0c:	2010      	movs	r0, #16
 8008b0e:	b2da      	uxtb	r2, r3
 8008b10:	b90a      	cbnz	r2, 8008b16 <__lo0bits+0x32>
 8008b12:	3008      	adds	r0, #8
 8008b14:	0a1b      	lsrs	r3, r3, #8
 8008b16:	071a      	lsls	r2, r3, #28
 8008b18:	bf04      	itt	eq
 8008b1a:	091b      	lsreq	r3, r3, #4
 8008b1c:	3004      	addeq	r0, #4
 8008b1e:	079a      	lsls	r2, r3, #30
 8008b20:	bf04      	itt	eq
 8008b22:	089b      	lsreq	r3, r3, #2
 8008b24:	3002      	addeq	r0, #2
 8008b26:	07da      	lsls	r2, r3, #31
 8008b28:	d403      	bmi.n	8008b32 <__lo0bits+0x4e>
 8008b2a:	085b      	lsrs	r3, r3, #1
 8008b2c:	f100 0001 	add.w	r0, r0, #1
 8008b30:	d005      	beq.n	8008b3e <__lo0bits+0x5a>
 8008b32:	600b      	str	r3, [r1, #0]
 8008b34:	4770      	bx	lr
 8008b36:	4610      	mov	r0, r2
 8008b38:	e7e9      	b.n	8008b0e <__lo0bits+0x2a>
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	4770      	bx	lr
 8008b3e:	2020      	movs	r0, #32
 8008b40:	4770      	bx	lr
	...

08008b44 <__i2b>:
 8008b44:	b510      	push	{r4, lr}
 8008b46:	460c      	mov	r4, r1
 8008b48:	2101      	movs	r1, #1
 8008b4a:	f7ff ff03 	bl	8008954 <_Balloc>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	b928      	cbnz	r0, 8008b5e <__i2b+0x1a>
 8008b52:	4b05      	ldr	r3, [pc, #20]	; (8008b68 <__i2b+0x24>)
 8008b54:	4805      	ldr	r0, [pc, #20]	; (8008b6c <__i2b+0x28>)
 8008b56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008b5a:	f000 fce1 	bl	8009520 <__assert_func>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	6144      	str	r4, [r0, #20]
 8008b62:	6103      	str	r3, [r0, #16]
 8008b64:	bd10      	pop	{r4, pc}
 8008b66:	bf00      	nop
 8008b68:	0800a82f 	.word	0x0800a82f
 8008b6c:	0800a840 	.word	0x0800a840

08008b70 <__multiply>:
 8008b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b74:	4691      	mov	r9, r2
 8008b76:	690a      	ldr	r2, [r1, #16]
 8008b78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	bfb8      	it	lt
 8008b80:	460b      	movlt	r3, r1
 8008b82:	460c      	mov	r4, r1
 8008b84:	bfbc      	itt	lt
 8008b86:	464c      	movlt	r4, r9
 8008b88:	4699      	movlt	r9, r3
 8008b8a:	6927      	ldr	r7, [r4, #16]
 8008b8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b90:	68a3      	ldr	r3, [r4, #8]
 8008b92:	6861      	ldr	r1, [r4, #4]
 8008b94:	eb07 060a 	add.w	r6, r7, sl
 8008b98:	42b3      	cmp	r3, r6
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	bfb8      	it	lt
 8008b9e:	3101      	addlt	r1, #1
 8008ba0:	f7ff fed8 	bl	8008954 <_Balloc>
 8008ba4:	b930      	cbnz	r0, 8008bb4 <__multiply+0x44>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	4b44      	ldr	r3, [pc, #272]	; (8008cbc <__multiply+0x14c>)
 8008baa:	4845      	ldr	r0, [pc, #276]	; (8008cc0 <__multiply+0x150>)
 8008bac:	f240 115d 	movw	r1, #349	; 0x15d
 8008bb0:	f000 fcb6 	bl	8009520 <__assert_func>
 8008bb4:	f100 0514 	add.w	r5, r0, #20
 8008bb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008bbc:	462b      	mov	r3, r5
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	4543      	cmp	r3, r8
 8008bc2:	d321      	bcc.n	8008c08 <__multiply+0x98>
 8008bc4:	f104 0314 	add.w	r3, r4, #20
 8008bc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008bcc:	f109 0314 	add.w	r3, r9, #20
 8008bd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008bd4:	9202      	str	r2, [sp, #8]
 8008bd6:	1b3a      	subs	r2, r7, r4
 8008bd8:	3a15      	subs	r2, #21
 8008bda:	f022 0203 	bic.w	r2, r2, #3
 8008bde:	3204      	adds	r2, #4
 8008be0:	f104 0115 	add.w	r1, r4, #21
 8008be4:	428f      	cmp	r7, r1
 8008be6:	bf38      	it	cc
 8008be8:	2204      	movcc	r2, #4
 8008bea:	9201      	str	r2, [sp, #4]
 8008bec:	9a02      	ldr	r2, [sp, #8]
 8008bee:	9303      	str	r3, [sp, #12]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d80c      	bhi.n	8008c0e <__multiply+0x9e>
 8008bf4:	2e00      	cmp	r6, #0
 8008bf6:	dd03      	ble.n	8008c00 <__multiply+0x90>
 8008bf8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d05a      	beq.n	8008cb6 <__multiply+0x146>
 8008c00:	6106      	str	r6, [r0, #16]
 8008c02:	b005      	add	sp, #20
 8008c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c08:	f843 2b04 	str.w	r2, [r3], #4
 8008c0c:	e7d8      	b.n	8008bc0 <__multiply+0x50>
 8008c0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c12:	f1ba 0f00 	cmp.w	sl, #0
 8008c16:	d024      	beq.n	8008c62 <__multiply+0xf2>
 8008c18:	f104 0e14 	add.w	lr, r4, #20
 8008c1c:	46a9      	mov	r9, r5
 8008c1e:	f04f 0c00 	mov.w	ip, #0
 8008c22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c26:	f8d9 1000 	ldr.w	r1, [r9]
 8008c2a:	fa1f fb82 	uxth.w	fp, r2
 8008c2e:	b289      	uxth	r1, r1
 8008c30:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c38:	f8d9 2000 	ldr.w	r2, [r9]
 8008c3c:	4461      	add	r1, ip
 8008c3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c42:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c4a:	b289      	uxth	r1, r1
 8008c4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c50:	4577      	cmp	r7, lr
 8008c52:	f849 1b04 	str.w	r1, [r9], #4
 8008c56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c5a:	d8e2      	bhi.n	8008c22 <__multiply+0xb2>
 8008c5c:	9a01      	ldr	r2, [sp, #4]
 8008c5e:	f845 c002 	str.w	ip, [r5, r2]
 8008c62:	9a03      	ldr	r2, [sp, #12]
 8008c64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c68:	3304      	adds	r3, #4
 8008c6a:	f1b9 0f00 	cmp.w	r9, #0
 8008c6e:	d020      	beq.n	8008cb2 <__multiply+0x142>
 8008c70:	6829      	ldr	r1, [r5, #0]
 8008c72:	f104 0c14 	add.w	ip, r4, #20
 8008c76:	46ae      	mov	lr, r5
 8008c78:	f04f 0a00 	mov.w	sl, #0
 8008c7c:	f8bc b000 	ldrh.w	fp, [ip]
 8008c80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008c84:	fb09 220b 	mla	r2, r9, fp, r2
 8008c88:	4492      	add	sl, r2
 8008c8a:	b289      	uxth	r1, r1
 8008c8c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008c90:	f84e 1b04 	str.w	r1, [lr], #4
 8008c94:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008c98:	f8be 1000 	ldrh.w	r1, [lr]
 8008c9c:	0c12      	lsrs	r2, r2, #16
 8008c9e:	fb09 1102 	mla	r1, r9, r2, r1
 8008ca2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008ca6:	4567      	cmp	r7, ip
 8008ca8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008cac:	d8e6      	bhi.n	8008c7c <__multiply+0x10c>
 8008cae:	9a01      	ldr	r2, [sp, #4]
 8008cb0:	50a9      	str	r1, [r5, r2]
 8008cb2:	3504      	adds	r5, #4
 8008cb4:	e79a      	b.n	8008bec <__multiply+0x7c>
 8008cb6:	3e01      	subs	r6, #1
 8008cb8:	e79c      	b.n	8008bf4 <__multiply+0x84>
 8008cba:	bf00      	nop
 8008cbc:	0800a82f 	.word	0x0800a82f
 8008cc0:	0800a840 	.word	0x0800a840

08008cc4 <__pow5mult>:
 8008cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cc8:	4615      	mov	r5, r2
 8008cca:	f012 0203 	ands.w	r2, r2, #3
 8008cce:	4606      	mov	r6, r0
 8008cd0:	460f      	mov	r7, r1
 8008cd2:	d007      	beq.n	8008ce4 <__pow5mult+0x20>
 8008cd4:	4c25      	ldr	r4, [pc, #148]	; (8008d6c <__pow5mult+0xa8>)
 8008cd6:	3a01      	subs	r2, #1
 8008cd8:	2300      	movs	r3, #0
 8008cda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cde:	f7ff fe9b 	bl	8008a18 <__multadd>
 8008ce2:	4607      	mov	r7, r0
 8008ce4:	10ad      	asrs	r5, r5, #2
 8008ce6:	d03d      	beq.n	8008d64 <__pow5mult+0xa0>
 8008ce8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008cea:	b97c      	cbnz	r4, 8008d0c <__pow5mult+0x48>
 8008cec:	2010      	movs	r0, #16
 8008cee:	f7ff fe29 	bl	8008944 <malloc>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	6270      	str	r0, [r6, #36]	; 0x24
 8008cf6:	b928      	cbnz	r0, 8008d04 <__pow5mult+0x40>
 8008cf8:	4b1d      	ldr	r3, [pc, #116]	; (8008d70 <__pow5mult+0xac>)
 8008cfa:	481e      	ldr	r0, [pc, #120]	; (8008d74 <__pow5mult+0xb0>)
 8008cfc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008d00:	f000 fc0e 	bl	8009520 <__assert_func>
 8008d04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d08:	6004      	str	r4, [r0, #0]
 8008d0a:	60c4      	str	r4, [r0, #12]
 8008d0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d14:	b94c      	cbnz	r4, 8008d2a <__pow5mult+0x66>
 8008d16:	f240 2171 	movw	r1, #625	; 0x271
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	f7ff ff12 	bl	8008b44 <__i2b>
 8008d20:	2300      	movs	r3, #0
 8008d22:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d26:	4604      	mov	r4, r0
 8008d28:	6003      	str	r3, [r0, #0]
 8008d2a:	f04f 0900 	mov.w	r9, #0
 8008d2e:	07eb      	lsls	r3, r5, #31
 8008d30:	d50a      	bpl.n	8008d48 <__pow5mult+0x84>
 8008d32:	4639      	mov	r1, r7
 8008d34:	4622      	mov	r2, r4
 8008d36:	4630      	mov	r0, r6
 8008d38:	f7ff ff1a 	bl	8008b70 <__multiply>
 8008d3c:	4639      	mov	r1, r7
 8008d3e:	4680      	mov	r8, r0
 8008d40:	4630      	mov	r0, r6
 8008d42:	f7ff fe47 	bl	80089d4 <_Bfree>
 8008d46:	4647      	mov	r7, r8
 8008d48:	106d      	asrs	r5, r5, #1
 8008d4a:	d00b      	beq.n	8008d64 <__pow5mult+0xa0>
 8008d4c:	6820      	ldr	r0, [r4, #0]
 8008d4e:	b938      	cbnz	r0, 8008d60 <__pow5mult+0x9c>
 8008d50:	4622      	mov	r2, r4
 8008d52:	4621      	mov	r1, r4
 8008d54:	4630      	mov	r0, r6
 8008d56:	f7ff ff0b 	bl	8008b70 <__multiply>
 8008d5a:	6020      	str	r0, [r4, #0]
 8008d5c:	f8c0 9000 	str.w	r9, [r0]
 8008d60:	4604      	mov	r4, r0
 8008d62:	e7e4      	b.n	8008d2e <__pow5mult+0x6a>
 8008d64:	4638      	mov	r0, r7
 8008d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d6a:	bf00      	nop
 8008d6c:	0800a990 	.word	0x0800a990
 8008d70:	0800a7bd 	.word	0x0800a7bd
 8008d74:	0800a840 	.word	0x0800a840

08008d78 <__lshift>:
 8008d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	6849      	ldr	r1, [r1, #4]
 8008d80:	6923      	ldr	r3, [r4, #16]
 8008d82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d86:	68a3      	ldr	r3, [r4, #8]
 8008d88:	4607      	mov	r7, r0
 8008d8a:	4691      	mov	r9, r2
 8008d8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d90:	f108 0601 	add.w	r6, r8, #1
 8008d94:	42b3      	cmp	r3, r6
 8008d96:	db0b      	blt.n	8008db0 <__lshift+0x38>
 8008d98:	4638      	mov	r0, r7
 8008d9a:	f7ff fddb 	bl	8008954 <_Balloc>
 8008d9e:	4605      	mov	r5, r0
 8008da0:	b948      	cbnz	r0, 8008db6 <__lshift+0x3e>
 8008da2:	4602      	mov	r2, r0
 8008da4:	4b2a      	ldr	r3, [pc, #168]	; (8008e50 <__lshift+0xd8>)
 8008da6:	482b      	ldr	r0, [pc, #172]	; (8008e54 <__lshift+0xdc>)
 8008da8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008dac:	f000 fbb8 	bl	8009520 <__assert_func>
 8008db0:	3101      	adds	r1, #1
 8008db2:	005b      	lsls	r3, r3, #1
 8008db4:	e7ee      	b.n	8008d94 <__lshift+0x1c>
 8008db6:	2300      	movs	r3, #0
 8008db8:	f100 0114 	add.w	r1, r0, #20
 8008dbc:	f100 0210 	add.w	r2, r0, #16
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	4553      	cmp	r3, sl
 8008dc4:	db37      	blt.n	8008e36 <__lshift+0xbe>
 8008dc6:	6920      	ldr	r0, [r4, #16]
 8008dc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008dcc:	f104 0314 	add.w	r3, r4, #20
 8008dd0:	f019 091f 	ands.w	r9, r9, #31
 8008dd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008dd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ddc:	d02f      	beq.n	8008e3e <__lshift+0xc6>
 8008dde:	f1c9 0e20 	rsb	lr, r9, #32
 8008de2:	468a      	mov	sl, r1
 8008de4:	f04f 0c00 	mov.w	ip, #0
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	fa02 f209 	lsl.w	r2, r2, r9
 8008dee:	ea42 020c 	orr.w	r2, r2, ip
 8008df2:	f84a 2b04 	str.w	r2, [sl], #4
 8008df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dfa:	4298      	cmp	r0, r3
 8008dfc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008e00:	d8f2      	bhi.n	8008de8 <__lshift+0x70>
 8008e02:	1b03      	subs	r3, r0, r4
 8008e04:	3b15      	subs	r3, #21
 8008e06:	f023 0303 	bic.w	r3, r3, #3
 8008e0a:	3304      	adds	r3, #4
 8008e0c:	f104 0215 	add.w	r2, r4, #21
 8008e10:	4290      	cmp	r0, r2
 8008e12:	bf38      	it	cc
 8008e14:	2304      	movcc	r3, #4
 8008e16:	f841 c003 	str.w	ip, [r1, r3]
 8008e1a:	f1bc 0f00 	cmp.w	ip, #0
 8008e1e:	d001      	beq.n	8008e24 <__lshift+0xac>
 8008e20:	f108 0602 	add.w	r6, r8, #2
 8008e24:	3e01      	subs	r6, #1
 8008e26:	4638      	mov	r0, r7
 8008e28:	612e      	str	r6, [r5, #16]
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	f7ff fdd2 	bl	80089d4 <_Bfree>
 8008e30:	4628      	mov	r0, r5
 8008e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e36:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	e7c1      	b.n	8008dc2 <__lshift+0x4a>
 8008e3e:	3904      	subs	r1, #4
 8008e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e44:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e48:	4298      	cmp	r0, r3
 8008e4a:	d8f9      	bhi.n	8008e40 <__lshift+0xc8>
 8008e4c:	e7ea      	b.n	8008e24 <__lshift+0xac>
 8008e4e:	bf00      	nop
 8008e50:	0800a82f 	.word	0x0800a82f
 8008e54:	0800a840 	.word	0x0800a840

08008e58 <__mcmp>:
 8008e58:	b530      	push	{r4, r5, lr}
 8008e5a:	6902      	ldr	r2, [r0, #16]
 8008e5c:	690c      	ldr	r4, [r1, #16]
 8008e5e:	1b12      	subs	r2, r2, r4
 8008e60:	d10e      	bne.n	8008e80 <__mcmp+0x28>
 8008e62:	f100 0314 	add.w	r3, r0, #20
 8008e66:	3114      	adds	r1, #20
 8008e68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e78:	42a5      	cmp	r5, r4
 8008e7a:	d003      	beq.n	8008e84 <__mcmp+0x2c>
 8008e7c:	d305      	bcc.n	8008e8a <__mcmp+0x32>
 8008e7e:	2201      	movs	r2, #1
 8008e80:	4610      	mov	r0, r2
 8008e82:	bd30      	pop	{r4, r5, pc}
 8008e84:	4283      	cmp	r3, r0
 8008e86:	d3f3      	bcc.n	8008e70 <__mcmp+0x18>
 8008e88:	e7fa      	b.n	8008e80 <__mcmp+0x28>
 8008e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e8e:	e7f7      	b.n	8008e80 <__mcmp+0x28>

08008e90 <__mdiff>:
 8008e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e94:	460c      	mov	r4, r1
 8008e96:	4606      	mov	r6, r0
 8008e98:	4611      	mov	r1, r2
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	4690      	mov	r8, r2
 8008e9e:	f7ff ffdb 	bl	8008e58 <__mcmp>
 8008ea2:	1e05      	subs	r5, r0, #0
 8008ea4:	d110      	bne.n	8008ec8 <__mdiff+0x38>
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f7ff fd53 	bl	8008954 <_Balloc>
 8008eae:	b930      	cbnz	r0, 8008ebe <__mdiff+0x2e>
 8008eb0:	4b3a      	ldr	r3, [pc, #232]	; (8008f9c <__mdiff+0x10c>)
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	f240 2132 	movw	r1, #562	; 0x232
 8008eb8:	4839      	ldr	r0, [pc, #228]	; (8008fa0 <__mdiff+0x110>)
 8008eba:	f000 fb31 	bl	8009520 <__assert_func>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ec4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec8:	bfa4      	itt	ge
 8008eca:	4643      	movge	r3, r8
 8008ecc:	46a0      	movge	r8, r4
 8008ece:	4630      	mov	r0, r6
 8008ed0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ed4:	bfa6      	itte	ge
 8008ed6:	461c      	movge	r4, r3
 8008ed8:	2500      	movge	r5, #0
 8008eda:	2501      	movlt	r5, #1
 8008edc:	f7ff fd3a 	bl	8008954 <_Balloc>
 8008ee0:	b920      	cbnz	r0, 8008eec <__mdiff+0x5c>
 8008ee2:	4b2e      	ldr	r3, [pc, #184]	; (8008f9c <__mdiff+0x10c>)
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008eea:	e7e5      	b.n	8008eb8 <__mdiff+0x28>
 8008eec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ef0:	6926      	ldr	r6, [r4, #16]
 8008ef2:	60c5      	str	r5, [r0, #12]
 8008ef4:	f104 0914 	add.w	r9, r4, #20
 8008ef8:	f108 0514 	add.w	r5, r8, #20
 8008efc:	f100 0e14 	add.w	lr, r0, #20
 8008f00:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008f04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f08:	f108 0210 	add.w	r2, r8, #16
 8008f0c:	46f2      	mov	sl, lr
 8008f0e:	2100      	movs	r1, #0
 8008f10:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f18:	fa1f f883 	uxth.w	r8, r3
 8008f1c:	fa11 f18b 	uxtah	r1, r1, fp
 8008f20:	0c1b      	lsrs	r3, r3, #16
 8008f22:	eba1 0808 	sub.w	r8, r1, r8
 8008f26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f2a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f2e:	fa1f f888 	uxth.w	r8, r8
 8008f32:	1419      	asrs	r1, r3, #16
 8008f34:	454e      	cmp	r6, r9
 8008f36:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f3a:	f84a 3b04 	str.w	r3, [sl], #4
 8008f3e:	d8e7      	bhi.n	8008f10 <__mdiff+0x80>
 8008f40:	1b33      	subs	r3, r6, r4
 8008f42:	3b15      	subs	r3, #21
 8008f44:	f023 0303 	bic.w	r3, r3, #3
 8008f48:	3304      	adds	r3, #4
 8008f4a:	3415      	adds	r4, #21
 8008f4c:	42a6      	cmp	r6, r4
 8008f4e:	bf38      	it	cc
 8008f50:	2304      	movcc	r3, #4
 8008f52:	441d      	add	r5, r3
 8008f54:	4473      	add	r3, lr
 8008f56:	469e      	mov	lr, r3
 8008f58:	462e      	mov	r6, r5
 8008f5a:	4566      	cmp	r6, ip
 8008f5c:	d30e      	bcc.n	8008f7c <__mdiff+0xec>
 8008f5e:	f10c 0203 	add.w	r2, ip, #3
 8008f62:	1b52      	subs	r2, r2, r5
 8008f64:	f022 0203 	bic.w	r2, r2, #3
 8008f68:	3d03      	subs	r5, #3
 8008f6a:	45ac      	cmp	ip, r5
 8008f6c:	bf38      	it	cc
 8008f6e:	2200      	movcc	r2, #0
 8008f70:	441a      	add	r2, r3
 8008f72:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f76:	b17b      	cbz	r3, 8008f98 <__mdiff+0x108>
 8008f78:	6107      	str	r7, [r0, #16]
 8008f7a:	e7a3      	b.n	8008ec4 <__mdiff+0x34>
 8008f7c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008f80:	fa11 f288 	uxtah	r2, r1, r8
 8008f84:	1414      	asrs	r4, r2, #16
 8008f86:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008f8a:	b292      	uxth	r2, r2
 8008f8c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008f90:	f84e 2b04 	str.w	r2, [lr], #4
 8008f94:	1421      	asrs	r1, r4, #16
 8008f96:	e7e0      	b.n	8008f5a <__mdiff+0xca>
 8008f98:	3f01      	subs	r7, #1
 8008f9a:	e7ea      	b.n	8008f72 <__mdiff+0xe2>
 8008f9c:	0800a82f 	.word	0x0800a82f
 8008fa0:	0800a840 	.word	0x0800a840

08008fa4 <__d2b>:
 8008fa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fa8:	4689      	mov	r9, r1
 8008faa:	2101      	movs	r1, #1
 8008fac:	ec57 6b10 	vmov	r6, r7, d0
 8008fb0:	4690      	mov	r8, r2
 8008fb2:	f7ff fccf 	bl	8008954 <_Balloc>
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	b930      	cbnz	r0, 8008fc8 <__d2b+0x24>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	4b25      	ldr	r3, [pc, #148]	; (8009054 <__d2b+0xb0>)
 8008fbe:	4826      	ldr	r0, [pc, #152]	; (8009058 <__d2b+0xb4>)
 8008fc0:	f240 310a 	movw	r1, #778	; 0x30a
 8008fc4:	f000 faac 	bl	8009520 <__assert_func>
 8008fc8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008fcc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fd0:	bb35      	cbnz	r5, 8009020 <__d2b+0x7c>
 8008fd2:	2e00      	cmp	r6, #0
 8008fd4:	9301      	str	r3, [sp, #4]
 8008fd6:	d028      	beq.n	800902a <__d2b+0x86>
 8008fd8:	4668      	mov	r0, sp
 8008fda:	9600      	str	r6, [sp, #0]
 8008fdc:	f7ff fd82 	bl	8008ae4 <__lo0bits>
 8008fe0:	9900      	ldr	r1, [sp, #0]
 8008fe2:	b300      	cbz	r0, 8009026 <__d2b+0x82>
 8008fe4:	9a01      	ldr	r2, [sp, #4]
 8008fe6:	f1c0 0320 	rsb	r3, r0, #32
 8008fea:	fa02 f303 	lsl.w	r3, r2, r3
 8008fee:	430b      	orrs	r3, r1
 8008ff0:	40c2      	lsrs	r2, r0
 8008ff2:	6163      	str	r3, [r4, #20]
 8008ff4:	9201      	str	r2, [sp, #4]
 8008ff6:	9b01      	ldr	r3, [sp, #4]
 8008ff8:	61a3      	str	r3, [r4, #24]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	bf14      	ite	ne
 8008ffe:	2202      	movne	r2, #2
 8009000:	2201      	moveq	r2, #1
 8009002:	6122      	str	r2, [r4, #16]
 8009004:	b1d5      	cbz	r5, 800903c <__d2b+0x98>
 8009006:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800900a:	4405      	add	r5, r0
 800900c:	f8c9 5000 	str.w	r5, [r9]
 8009010:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009014:	f8c8 0000 	str.w	r0, [r8]
 8009018:	4620      	mov	r0, r4
 800901a:	b003      	add	sp, #12
 800901c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009020:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009024:	e7d5      	b.n	8008fd2 <__d2b+0x2e>
 8009026:	6161      	str	r1, [r4, #20]
 8009028:	e7e5      	b.n	8008ff6 <__d2b+0x52>
 800902a:	a801      	add	r0, sp, #4
 800902c:	f7ff fd5a 	bl	8008ae4 <__lo0bits>
 8009030:	9b01      	ldr	r3, [sp, #4]
 8009032:	6163      	str	r3, [r4, #20]
 8009034:	2201      	movs	r2, #1
 8009036:	6122      	str	r2, [r4, #16]
 8009038:	3020      	adds	r0, #32
 800903a:	e7e3      	b.n	8009004 <__d2b+0x60>
 800903c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009040:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009044:	f8c9 0000 	str.w	r0, [r9]
 8009048:	6918      	ldr	r0, [r3, #16]
 800904a:	f7ff fd2b 	bl	8008aa4 <__hi0bits>
 800904e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009052:	e7df      	b.n	8009014 <__d2b+0x70>
 8009054:	0800a82f 	.word	0x0800a82f
 8009058:	0800a840 	.word	0x0800a840

0800905c <_calloc_r>:
 800905c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800905e:	fba1 2402 	umull	r2, r4, r1, r2
 8009062:	b94c      	cbnz	r4, 8009078 <_calloc_r+0x1c>
 8009064:	4611      	mov	r1, r2
 8009066:	9201      	str	r2, [sp, #4]
 8009068:	f000 f87a 	bl	8009160 <_malloc_r>
 800906c:	9a01      	ldr	r2, [sp, #4]
 800906e:	4605      	mov	r5, r0
 8009070:	b930      	cbnz	r0, 8009080 <_calloc_r+0x24>
 8009072:	4628      	mov	r0, r5
 8009074:	b003      	add	sp, #12
 8009076:	bd30      	pop	{r4, r5, pc}
 8009078:	220c      	movs	r2, #12
 800907a:	6002      	str	r2, [r0, #0]
 800907c:	2500      	movs	r5, #0
 800907e:	e7f8      	b.n	8009072 <_calloc_r+0x16>
 8009080:	4621      	mov	r1, r4
 8009082:	f7fe f91b 	bl	80072bc <memset>
 8009086:	e7f4      	b.n	8009072 <_calloc_r+0x16>

08009088 <_free_r>:
 8009088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800908a:	2900      	cmp	r1, #0
 800908c:	d044      	beq.n	8009118 <_free_r+0x90>
 800908e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009092:	9001      	str	r0, [sp, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	f1a1 0404 	sub.w	r4, r1, #4
 800909a:	bfb8      	it	lt
 800909c:	18e4      	addlt	r4, r4, r3
 800909e:	f000 fa9b 	bl	80095d8 <__malloc_lock>
 80090a2:	4a1e      	ldr	r2, [pc, #120]	; (800911c <_free_r+0x94>)
 80090a4:	9801      	ldr	r0, [sp, #4]
 80090a6:	6813      	ldr	r3, [r2, #0]
 80090a8:	b933      	cbnz	r3, 80090b8 <_free_r+0x30>
 80090aa:	6063      	str	r3, [r4, #4]
 80090ac:	6014      	str	r4, [r2, #0]
 80090ae:	b003      	add	sp, #12
 80090b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090b4:	f000 ba96 	b.w	80095e4 <__malloc_unlock>
 80090b8:	42a3      	cmp	r3, r4
 80090ba:	d908      	bls.n	80090ce <_free_r+0x46>
 80090bc:	6825      	ldr	r5, [r4, #0]
 80090be:	1961      	adds	r1, r4, r5
 80090c0:	428b      	cmp	r3, r1
 80090c2:	bf01      	itttt	eq
 80090c4:	6819      	ldreq	r1, [r3, #0]
 80090c6:	685b      	ldreq	r3, [r3, #4]
 80090c8:	1949      	addeq	r1, r1, r5
 80090ca:	6021      	streq	r1, [r4, #0]
 80090cc:	e7ed      	b.n	80090aa <_free_r+0x22>
 80090ce:	461a      	mov	r2, r3
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	b10b      	cbz	r3, 80090d8 <_free_r+0x50>
 80090d4:	42a3      	cmp	r3, r4
 80090d6:	d9fa      	bls.n	80090ce <_free_r+0x46>
 80090d8:	6811      	ldr	r1, [r2, #0]
 80090da:	1855      	adds	r5, r2, r1
 80090dc:	42a5      	cmp	r5, r4
 80090de:	d10b      	bne.n	80090f8 <_free_r+0x70>
 80090e0:	6824      	ldr	r4, [r4, #0]
 80090e2:	4421      	add	r1, r4
 80090e4:	1854      	adds	r4, r2, r1
 80090e6:	42a3      	cmp	r3, r4
 80090e8:	6011      	str	r1, [r2, #0]
 80090ea:	d1e0      	bne.n	80090ae <_free_r+0x26>
 80090ec:	681c      	ldr	r4, [r3, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	6053      	str	r3, [r2, #4]
 80090f2:	4421      	add	r1, r4
 80090f4:	6011      	str	r1, [r2, #0]
 80090f6:	e7da      	b.n	80090ae <_free_r+0x26>
 80090f8:	d902      	bls.n	8009100 <_free_r+0x78>
 80090fa:	230c      	movs	r3, #12
 80090fc:	6003      	str	r3, [r0, #0]
 80090fe:	e7d6      	b.n	80090ae <_free_r+0x26>
 8009100:	6825      	ldr	r5, [r4, #0]
 8009102:	1961      	adds	r1, r4, r5
 8009104:	428b      	cmp	r3, r1
 8009106:	bf04      	itt	eq
 8009108:	6819      	ldreq	r1, [r3, #0]
 800910a:	685b      	ldreq	r3, [r3, #4]
 800910c:	6063      	str	r3, [r4, #4]
 800910e:	bf04      	itt	eq
 8009110:	1949      	addeq	r1, r1, r5
 8009112:	6021      	streq	r1, [r4, #0]
 8009114:	6054      	str	r4, [r2, #4]
 8009116:	e7ca      	b.n	80090ae <_free_r+0x26>
 8009118:	b003      	add	sp, #12
 800911a:	bd30      	pop	{r4, r5, pc}
 800911c:	200054e0 	.word	0x200054e0

08009120 <sbrk_aligned>:
 8009120:	b570      	push	{r4, r5, r6, lr}
 8009122:	4e0e      	ldr	r6, [pc, #56]	; (800915c <sbrk_aligned+0x3c>)
 8009124:	460c      	mov	r4, r1
 8009126:	6831      	ldr	r1, [r6, #0]
 8009128:	4605      	mov	r5, r0
 800912a:	b911      	cbnz	r1, 8009132 <sbrk_aligned+0x12>
 800912c:	f000 f9e8 	bl	8009500 <_sbrk_r>
 8009130:	6030      	str	r0, [r6, #0]
 8009132:	4621      	mov	r1, r4
 8009134:	4628      	mov	r0, r5
 8009136:	f000 f9e3 	bl	8009500 <_sbrk_r>
 800913a:	1c43      	adds	r3, r0, #1
 800913c:	d00a      	beq.n	8009154 <sbrk_aligned+0x34>
 800913e:	1cc4      	adds	r4, r0, #3
 8009140:	f024 0403 	bic.w	r4, r4, #3
 8009144:	42a0      	cmp	r0, r4
 8009146:	d007      	beq.n	8009158 <sbrk_aligned+0x38>
 8009148:	1a21      	subs	r1, r4, r0
 800914a:	4628      	mov	r0, r5
 800914c:	f000 f9d8 	bl	8009500 <_sbrk_r>
 8009150:	3001      	adds	r0, #1
 8009152:	d101      	bne.n	8009158 <sbrk_aligned+0x38>
 8009154:	f04f 34ff 	mov.w	r4, #4294967295
 8009158:	4620      	mov	r0, r4
 800915a:	bd70      	pop	{r4, r5, r6, pc}
 800915c:	200054e4 	.word	0x200054e4

08009160 <_malloc_r>:
 8009160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009164:	1ccd      	adds	r5, r1, #3
 8009166:	f025 0503 	bic.w	r5, r5, #3
 800916a:	3508      	adds	r5, #8
 800916c:	2d0c      	cmp	r5, #12
 800916e:	bf38      	it	cc
 8009170:	250c      	movcc	r5, #12
 8009172:	2d00      	cmp	r5, #0
 8009174:	4607      	mov	r7, r0
 8009176:	db01      	blt.n	800917c <_malloc_r+0x1c>
 8009178:	42a9      	cmp	r1, r5
 800917a:	d905      	bls.n	8009188 <_malloc_r+0x28>
 800917c:	230c      	movs	r3, #12
 800917e:	603b      	str	r3, [r7, #0]
 8009180:	2600      	movs	r6, #0
 8009182:	4630      	mov	r0, r6
 8009184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009188:	4e2e      	ldr	r6, [pc, #184]	; (8009244 <_malloc_r+0xe4>)
 800918a:	f000 fa25 	bl	80095d8 <__malloc_lock>
 800918e:	6833      	ldr	r3, [r6, #0]
 8009190:	461c      	mov	r4, r3
 8009192:	bb34      	cbnz	r4, 80091e2 <_malloc_r+0x82>
 8009194:	4629      	mov	r1, r5
 8009196:	4638      	mov	r0, r7
 8009198:	f7ff ffc2 	bl	8009120 <sbrk_aligned>
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	4604      	mov	r4, r0
 80091a0:	d14d      	bne.n	800923e <_malloc_r+0xde>
 80091a2:	6834      	ldr	r4, [r6, #0]
 80091a4:	4626      	mov	r6, r4
 80091a6:	2e00      	cmp	r6, #0
 80091a8:	d140      	bne.n	800922c <_malloc_r+0xcc>
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	4631      	mov	r1, r6
 80091ae:	4638      	mov	r0, r7
 80091b0:	eb04 0803 	add.w	r8, r4, r3
 80091b4:	f000 f9a4 	bl	8009500 <_sbrk_r>
 80091b8:	4580      	cmp	r8, r0
 80091ba:	d13a      	bne.n	8009232 <_malloc_r+0xd2>
 80091bc:	6821      	ldr	r1, [r4, #0]
 80091be:	3503      	adds	r5, #3
 80091c0:	1a6d      	subs	r5, r5, r1
 80091c2:	f025 0503 	bic.w	r5, r5, #3
 80091c6:	3508      	adds	r5, #8
 80091c8:	2d0c      	cmp	r5, #12
 80091ca:	bf38      	it	cc
 80091cc:	250c      	movcc	r5, #12
 80091ce:	4629      	mov	r1, r5
 80091d0:	4638      	mov	r0, r7
 80091d2:	f7ff ffa5 	bl	8009120 <sbrk_aligned>
 80091d6:	3001      	adds	r0, #1
 80091d8:	d02b      	beq.n	8009232 <_malloc_r+0xd2>
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	442b      	add	r3, r5
 80091de:	6023      	str	r3, [r4, #0]
 80091e0:	e00e      	b.n	8009200 <_malloc_r+0xa0>
 80091e2:	6822      	ldr	r2, [r4, #0]
 80091e4:	1b52      	subs	r2, r2, r5
 80091e6:	d41e      	bmi.n	8009226 <_malloc_r+0xc6>
 80091e8:	2a0b      	cmp	r2, #11
 80091ea:	d916      	bls.n	800921a <_malloc_r+0xba>
 80091ec:	1961      	adds	r1, r4, r5
 80091ee:	42a3      	cmp	r3, r4
 80091f0:	6025      	str	r5, [r4, #0]
 80091f2:	bf18      	it	ne
 80091f4:	6059      	strne	r1, [r3, #4]
 80091f6:	6863      	ldr	r3, [r4, #4]
 80091f8:	bf08      	it	eq
 80091fa:	6031      	streq	r1, [r6, #0]
 80091fc:	5162      	str	r2, [r4, r5]
 80091fe:	604b      	str	r3, [r1, #4]
 8009200:	4638      	mov	r0, r7
 8009202:	f104 060b 	add.w	r6, r4, #11
 8009206:	f000 f9ed 	bl	80095e4 <__malloc_unlock>
 800920a:	f026 0607 	bic.w	r6, r6, #7
 800920e:	1d23      	adds	r3, r4, #4
 8009210:	1af2      	subs	r2, r6, r3
 8009212:	d0b6      	beq.n	8009182 <_malloc_r+0x22>
 8009214:	1b9b      	subs	r3, r3, r6
 8009216:	50a3      	str	r3, [r4, r2]
 8009218:	e7b3      	b.n	8009182 <_malloc_r+0x22>
 800921a:	6862      	ldr	r2, [r4, #4]
 800921c:	42a3      	cmp	r3, r4
 800921e:	bf0c      	ite	eq
 8009220:	6032      	streq	r2, [r6, #0]
 8009222:	605a      	strne	r2, [r3, #4]
 8009224:	e7ec      	b.n	8009200 <_malloc_r+0xa0>
 8009226:	4623      	mov	r3, r4
 8009228:	6864      	ldr	r4, [r4, #4]
 800922a:	e7b2      	b.n	8009192 <_malloc_r+0x32>
 800922c:	4634      	mov	r4, r6
 800922e:	6876      	ldr	r6, [r6, #4]
 8009230:	e7b9      	b.n	80091a6 <_malloc_r+0x46>
 8009232:	230c      	movs	r3, #12
 8009234:	603b      	str	r3, [r7, #0]
 8009236:	4638      	mov	r0, r7
 8009238:	f000 f9d4 	bl	80095e4 <__malloc_unlock>
 800923c:	e7a1      	b.n	8009182 <_malloc_r+0x22>
 800923e:	6025      	str	r5, [r4, #0]
 8009240:	e7de      	b.n	8009200 <_malloc_r+0xa0>
 8009242:	bf00      	nop
 8009244:	200054e0 	.word	0x200054e0

08009248 <__ssputs_r>:
 8009248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800924c:	688e      	ldr	r6, [r1, #8]
 800924e:	429e      	cmp	r6, r3
 8009250:	4682      	mov	sl, r0
 8009252:	460c      	mov	r4, r1
 8009254:	4690      	mov	r8, r2
 8009256:	461f      	mov	r7, r3
 8009258:	d838      	bhi.n	80092cc <__ssputs_r+0x84>
 800925a:	898a      	ldrh	r2, [r1, #12]
 800925c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009260:	d032      	beq.n	80092c8 <__ssputs_r+0x80>
 8009262:	6825      	ldr	r5, [r4, #0]
 8009264:	6909      	ldr	r1, [r1, #16]
 8009266:	eba5 0901 	sub.w	r9, r5, r1
 800926a:	6965      	ldr	r5, [r4, #20]
 800926c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009270:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009274:	3301      	adds	r3, #1
 8009276:	444b      	add	r3, r9
 8009278:	106d      	asrs	r5, r5, #1
 800927a:	429d      	cmp	r5, r3
 800927c:	bf38      	it	cc
 800927e:	461d      	movcc	r5, r3
 8009280:	0553      	lsls	r3, r2, #21
 8009282:	d531      	bpl.n	80092e8 <__ssputs_r+0xa0>
 8009284:	4629      	mov	r1, r5
 8009286:	f7ff ff6b 	bl	8009160 <_malloc_r>
 800928a:	4606      	mov	r6, r0
 800928c:	b950      	cbnz	r0, 80092a4 <__ssputs_r+0x5c>
 800928e:	230c      	movs	r3, #12
 8009290:	f8ca 3000 	str.w	r3, [sl]
 8009294:	89a3      	ldrh	r3, [r4, #12]
 8009296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800929a:	81a3      	strh	r3, [r4, #12]
 800929c:	f04f 30ff 	mov.w	r0, #4294967295
 80092a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a4:	6921      	ldr	r1, [r4, #16]
 80092a6:	464a      	mov	r2, r9
 80092a8:	f7fd fffa 	bl	80072a0 <memcpy>
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092b6:	81a3      	strh	r3, [r4, #12]
 80092b8:	6126      	str	r6, [r4, #16]
 80092ba:	6165      	str	r5, [r4, #20]
 80092bc:	444e      	add	r6, r9
 80092be:	eba5 0509 	sub.w	r5, r5, r9
 80092c2:	6026      	str	r6, [r4, #0]
 80092c4:	60a5      	str	r5, [r4, #8]
 80092c6:	463e      	mov	r6, r7
 80092c8:	42be      	cmp	r6, r7
 80092ca:	d900      	bls.n	80092ce <__ssputs_r+0x86>
 80092cc:	463e      	mov	r6, r7
 80092ce:	6820      	ldr	r0, [r4, #0]
 80092d0:	4632      	mov	r2, r6
 80092d2:	4641      	mov	r1, r8
 80092d4:	f000 f966 	bl	80095a4 <memmove>
 80092d8:	68a3      	ldr	r3, [r4, #8]
 80092da:	1b9b      	subs	r3, r3, r6
 80092dc:	60a3      	str	r3, [r4, #8]
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	4433      	add	r3, r6
 80092e2:	6023      	str	r3, [r4, #0]
 80092e4:	2000      	movs	r0, #0
 80092e6:	e7db      	b.n	80092a0 <__ssputs_r+0x58>
 80092e8:	462a      	mov	r2, r5
 80092ea:	f000 f981 	bl	80095f0 <_realloc_r>
 80092ee:	4606      	mov	r6, r0
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d1e1      	bne.n	80092b8 <__ssputs_r+0x70>
 80092f4:	6921      	ldr	r1, [r4, #16]
 80092f6:	4650      	mov	r0, sl
 80092f8:	f7ff fec6 	bl	8009088 <_free_r>
 80092fc:	e7c7      	b.n	800928e <__ssputs_r+0x46>
	...

08009300 <_svfiprintf_r>:
 8009300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	4698      	mov	r8, r3
 8009306:	898b      	ldrh	r3, [r1, #12]
 8009308:	061b      	lsls	r3, r3, #24
 800930a:	b09d      	sub	sp, #116	; 0x74
 800930c:	4607      	mov	r7, r0
 800930e:	460d      	mov	r5, r1
 8009310:	4614      	mov	r4, r2
 8009312:	d50e      	bpl.n	8009332 <_svfiprintf_r+0x32>
 8009314:	690b      	ldr	r3, [r1, #16]
 8009316:	b963      	cbnz	r3, 8009332 <_svfiprintf_r+0x32>
 8009318:	2140      	movs	r1, #64	; 0x40
 800931a:	f7ff ff21 	bl	8009160 <_malloc_r>
 800931e:	6028      	str	r0, [r5, #0]
 8009320:	6128      	str	r0, [r5, #16]
 8009322:	b920      	cbnz	r0, 800932e <_svfiprintf_r+0x2e>
 8009324:	230c      	movs	r3, #12
 8009326:	603b      	str	r3, [r7, #0]
 8009328:	f04f 30ff 	mov.w	r0, #4294967295
 800932c:	e0d1      	b.n	80094d2 <_svfiprintf_r+0x1d2>
 800932e:	2340      	movs	r3, #64	; 0x40
 8009330:	616b      	str	r3, [r5, #20]
 8009332:	2300      	movs	r3, #0
 8009334:	9309      	str	r3, [sp, #36]	; 0x24
 8009336:	2320      	movs	r3, #32
 8009338:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800933c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009340:	2330      	movs	r3, #48	; 0x30
 8009342:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80094ec <_svfiprintf_r+0x1ec>
 8009346:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800934a:	f04f 0901 	mov.w	r9, #1
 800934e:	4623      	mov	r3, r4
 8009350:	469a      	mov	sl, r3
 8009352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009356:	b10a      	cbz	r2, 800935c <_svfiprintf_r+0x5c>
 8009358:	2a25      	cmp	r2, #37	; 0x25
 800935a:	d1f9      	bne.n	8009350 <_svfiprintf_r+0x50>
 800935c:	ebba 0b04 	subs.w	fp, sl, r4
 8009360:	d00b      	beq.n	800937a <_svfiprintf_r+0x7a>
 8009362:	465b      	mov	r3, fp
 8009364:	4622      	mov	r2, r4
 8009366:	4629      	mov	r1, r5
 8009368:	4638      	mov	r0, r7
 800936a:	f7ff ff6d 	bl	8009248 <__ssputs_r>
 800936e:	3001      	adds	r0, #1
 8009370:	f000 80aa 	beq.w	80094c8 <_svfiprintf_r+0x1c8>
 8009374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009376:	445a      	add	r2, fp
 8009378:	9209      	str	r2, [sp, #36]	; 0x24
 800937a:	f89a 3000 	ldrb.w	r3, [sl]
 800937e:	2b00      	cmp	r3, #0
 8009380:	f000 80a2 	beq.w	80094c8 <_svfiprintf_r+0x1c8>
 8009384:	2300      	movs	r3, #0
 8009386:	f04f 32ff 	mov.w	r2, #4294967295
 800938a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800938e:	f10a 0a01 	add.w	sl, sl, #1
 8009392:	9304      	str	r3, [sp, #16]
 8009394:	9307      	str	r3, [sp, #28]
 8009396:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800939a:	931a      	str	r3, [sp, #104]	; 0x68
 800939c:	4654      	mov	r4, sl
 800939e:	2205      	movs	r2, #5
 80093a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a4:	4851      	ldr	r0, [pc, #324]	; (80094ec <_svfiprintf_r+0x1ec>)
 80093a6:	f7f6 ff1b 	bl	80001e0 <memchr>
 80093aa:	9a04      	ldr	r2, [sp, #16]
 80093ac:	b9d8      	cbnz	r0, 80093e6 <_svfiprintf_r+0xe6>
 80093ae:	06d0      	lsls	r0, r2, #27
 80093b0:	bf44      	itt	mi
 80093b2:	2320      	movmi	r3, #32
 80093b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093b8:	0711      	lsls	r1, r2, #28
 80093ba:	bf44      	itt	mi
 80093bc:	232b      	movmi	r3, #43	; 0x2b
 80093be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093c2:	f89a 3000 	ldrb.w	r3, [sl]
 80093c6:	2b2a      	cmp	r3, #42	; 0x2a
 80093c8:	d015      	beq.n	80093f6 <_svfiprintf_r+0xf6>
 80093ca:	9a07      	ldr	r2, [sp, #28]
 80093cc:	4654      	mov	r4, sl
 80093ce:	2000      	movs	r0, #0
 80093d0:	f04f 0c0a 	mov.w	ip, #10
 80093d4:	4621      	mov	r1, r4
 80093d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093da:	3b30      	subs	r3, #48	; 0x30
 80093dc:	2b09      	cmp	r3, #9
 80093de:	d94e      	bls.n	800947e <_svfiprintf_r+0x17e>
 80093e0:	b1b0      	cbz	r0, 8009410 <_svfiprintf_r+0x110>
 80093e2:	9207      	str	r2, [sp, #28]
 80093e4:	e014      	b.n	8009410 <_svfiprintf_r+0x110>
 80093e6:	eba0 0308 	sub.w	r3, r0, r8
 80093ea:	fa09 f303 	lsl.w	r3, r9, r3
 80093ee:	4313      	orrs	r3, r2
 80093f0:	9304      	str	r3, [sp, #16]
 80093f2:	46a2      	mov	sl, r4
 80093f4:	e7d2      	b.n	800939c <_svfiprintf_r+0x9c>
 80093f6:	9b03      	ldr	r3, [sp, #12]
 80093f8:	1d19      	adds	r1, r3, #4
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	9103      	str	r1, [sp, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	bfbb      	ittet	lt
 8009402:	425b      	neglt	r3, r3
 8009404:	f042 0202 	orrlt.w	r2, r2, #2
 8009408:	9307      	strge	r3, [sp, #28]
 800940a:	9307      	strlt	r3, [sp, #28]
 800940c:	bfb8      	it	lt
 800940e:	9204      	strlt	r2, [sp, #16]
 8009410:	7823      	ldrb	r3, [r4, #0]
 8009412:	2b2e      	cmp	r3, #46	; 0x2e
 8009414:	d10c      	bne.n	8009430 <_svfiprintf_r+0x130>
 8009416:	7863      	ldrb	r3, [r4, #1]
 8009418:	2b2a      	cmp	r3, #42	; 0x2a
 800941a:	d135      	bne.n	8009488 <_svfiprintf_r+0x188>
 800941c:	9b03      	ldr	r3, [sp, #12]
 800941e:	1d1a      	adds	r2, r3, #4
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	9203      	str	r2, [sp, #12]
 8009424:	2b00      	cmp	r3, #0
 8009426:	bfb8      	it	lt
 8009428:	f04f 33ff 	movlt.w	r3, #4294967295
 800942c:	3402      	adds	r4, #2
 800942e:	9305      	str	r3, [sp, #20]
 8009430:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094fc <_svfiprintf_r+0x1fc>
 8009434:	7821      	ldrb	r1, [r4, #0]
 8009436:	2203      	movs	r2, #3
 8009438:	4650      	mov	r0, sl
 800943a:	f7f6 fed1 	bl	80001e0 <memchr>
 800943e:	b140      	cbz	r0, 8009452 <_svfiprintf_r+0x152>
 8009440:	2340      	movs	r3, #64	; 0x40
 8009442:	eba0 000a 	sub.w	r0, r0, sl
 8009446:	fa03 f000 	lsl.w	r0, r3, r0
 800944a:	9b04      	ldr	r3, [sp, #16]
 800944c:	4303      	orrs	r3, r0
 800944e:	3401      	adds	r4, #1
 8009450:	9304      	str	r3, [sp, #16]
 8009452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009456:	4826      	ldr	r0, [pc, #152]	; (80094f0 <_svfiprintf_r+0x1f0>)
 8009458:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800945c:	2206      	movs	r2, #6
 800945e:	f7f6 febf 	bl	80001e0 <memchr>
 8009462:	2800      	cmp	r0, #0
 8009464:	d038      	beq.n	80094d8 <_svfiprintf_r+0x1d8>
 8009466:	4b23      	ldr	r3, [pc, #140]	; (80094f4 <_svfiprintf_r+0x1f4>)
 8009468:	bb1b      	cbnz	r3, 80094b2 <_svfiprintf_r+0x1b2>
 800946a:	9b03      	ldr	r3, [sp, #12]
 800946c:	3307      	adds	r3, #7
 800946e:	f023 0307 	bic.w	r3, r3, #7
 8009472:	3308      	adds	r3, #8
 8009474:	9303      	str	r3, [sp, #12]
 8009476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009478:	4433      	add	r3, r6
 800947a:	9309      	str	r3, [sp, #36]	; 0x24
 800947c:	e767      	b.n	800934e <_svfiprintf_r+0x4e>
 800947e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009482:	460c      	mov	r4, r1
 8009484:	2001      	movs	r0, #1
 8009486:	e7a5      	b.n	80093d4 <_svfiprintf_r+0xd4>
 8009488:	2300      	movs	r3, #0
 800948a:	3401      	adds	r4, #1
 800948c:	9305      	str	r3, [sp, #20]
 800948e:	4619      	mov	r1, r3
 8009490:	f04f 0c0a 	mov.w	ip, #10
 8009494:	4620      	mov	r0, r4
 8009496:	f810 2b01 	ldrb.w	r2, [r0], #1
 800949a:	3a30      	subs	r2, #48	; 0x30
 800949c:	2a09      	cmp	r2, #9
 800949e:	d903      	bls.n	80094a8 <_svfiprintf_r+0x1a8>
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d0c5      	beq.n	8009430 <_svfiprintf_r+0x130>
 80094a4:	9105      	str	r1, [sp, #20]
 80094a6:	e7c3      	b.n	8009430 <_svfiprintf_r+0x130>
 80094a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80094ac:	4604      	mov	r4, r0
 80094ae:	2301      	movs	r3, #1
 80094b0:	e7f0      	b.n	8009494 <_svfiprintf_r+0x194>
 80094b2:	ab03      	add	r3, sp, #12
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	462a      	mov	r2, r5
 80094b8:	4b0f      	ldr	r3, [pc, #60]	; (80094f8 <_svfiprintf_r+0x1f8>)
 80094ba:	a904      	add	r1, sp, #16
 80094bc:	4638      	mov	r0, r7
 80094be:	f7fd ffa5 	bl	800740c <_printf_float>
 80094c2:	1c42      	adds	r2, r0, #1
 80094c4:	4606      	mov	r6, r0
 80094c6:	d1d6      	bne.n	8009476 <_svfiprintf_r+0x176>
 80094c8:	89ab      	ldrh	r3, [r5, #12]
 80094ca:	065b      	lsls	r3, r3, #25
 80094cc:	f53f af2c 	bmi.w	8009328 <_svfiprintf_r+0x28>
 80094d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094d2:	b01d      	add	sp, #116	; 0x74
 80094d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d8:	ab03      	add	r3, sp, #12
 80094da:	9300      	str	r3, [sp, #0]
 80094dc:	462a      	mov	r2, r5
 80094de:	4b06      	ldr	r3, [pc, #24]	; (80094f8 <_svfiprintf_r+0x1f8>)
 80094e0:	a904      	add	r1, sp, #16
 80094e2:	4638      	mov	r0, r7
 80094e4:	f7fe fa36 	bl	8007954 <_printf_i>
 80094e8:	e7eb      	b.n	80094c2 <_svfiprintf_r+0x1c2>
 80094ea:	bf00      	nop
 80094ec:	0800a99c 	.word	0x0800a99c
 80094f0:	0800a9a6 	.word	0x0800a9a6
 80094f4:	0800740d 	.word	0x0800740d
 80094f8:	08009249 	.word	0x08009249
 80094fc:	0800a9a2 	.word	0x0800a9a2

08009500 <_sbrk_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4d06      	ldr	r5, [pc, #24]	; (800951c <_sbrk_r+0x1c>)
 8009504:	2300      	movs	r3, #0
 8009506:	4604      	mov	r4, r0
 8009508:	4608      	mov	r0, r1
 800950a:	602b      	str	r3, [r5, #0]
 800950c:	f7f8 fb30 	bl	8001b70 <_sbrk>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d102      	bne.n	800951a <_sbrk_r+0x1a>
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	b103      	cbz	r3, 800951a <_sbrk_r+0x1a>
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	200054e8 	.word	0x200054e8

08009520 <__assert_func>:
 8009520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009522:	4614      	mov	r4, r2
 8009524:	461a      	mov	r2, r3
 8009526:	4b09      	ldr	r3, [pc, #36]	; (800954c <__assert_func+0x2c>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4605      	mov	r5, r0
 800952c:	68d8      	ldr	r0, [r3, #12]
 800952e:	b14c      	cbz	r4, 8009544 <__assert_func+0x24>
 8009530:	4b07      	ldr	r3, [pc, #28]	; (8009550 <__assert_func+0x30>)
 8009532:	9100      	str	r1, [sp, #0]
 8009534:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009538:	4906      	ldr	r1, [pc, #24]	; (8009554 <__assert_func+0x34>)
 800953a:	462b      	mov	r3, r5
 800953c:	f000 f80e 	bl	800955c <fiprintf>
 8009540:	f000 faac 	bl	8009a9c <abort>
 8009544:	4b04      	ldr	r3, [pc, #16]	; (8009558 <__assert_func+0x38>)
 8009546:	461c      	mov	r4, r3
 8009548:	e7f3      	b.n	8009532 <__assert_func+0x12>
 800954a:	bf00      	nop
 800954c:	20000010 	.word	0x20000010
 8009550:	0800a9ad 	.word	0x0800a9ad
 8009554:	0800a9ba 	.word	0x0800a9ba
 8009558:	0800a9e8 	.word	0x0800a9e8

0800955c <fiprintf>:
 800955c:	b40e      	push	{r1, r2, r3}
 800955e:	b503      	push	{r0, r1, lr}
 8009560:	4601      	mov	r1, r0
 8009562:	ab03      	add	r3, sp, #12
 8009564:	4805      	ldr	r0, [pc, #20]	; (800957c <fiprintf+0x20>)
 8009566:	f853 2b04 	ldr.w	r2, [r3], #4
 800956a:	6800      	ldr	r0, [r0, #0]
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	f000 f897 	bl	80096a0 <_vfiprintf_r>
 8009572:	b002      	add	sp, #8
 8009574:	f85d eb04 	ldr.w	lr, [sp], #4
 8009578:	b003      	add	sp, #12
 800957a:	4770      	bx	lr
 800957c:	20000010 	.word	0x20000010

08009580 <__ascii_mbtowc>:
 8009580:	b082      	sub	sp, #8
 8009582:	b901      	cbnz	r1, 8009586 <__ascii_mbtowc+0x6>
 8009584:	a901      	add	r1, sp, #4
 8009586:	b142      	cbz	r2, 800959a <__ascii_mbtowc+0x1a>
 8009588:	b14b      	cbz	r3, 800959e <__ascii_mbtowc+0x1e>
 800958a:	7813      	ldrb	r3, [r2, #0]
 800958c:	600b      	str	r3, [r1, #0]
 800958e:	7812      	ldrb	r2, [r2, #0]
 8009590:	1e10      	subs	r0, r2, #0
 8009592:	bf18      	it	ne
 8009594:	2001      	movne	r0, #1
 8009596:	b002      	add	sp, #8
 8009598:	4770      	bx	lr
 800959a:	4610      	mov	r0, r2
 800959c:	e7fb      	b.n	8009596 <__ascii_mbtowc+0x16>
 800959e:	f06f 0001 	mvn.w	r0, #1
 80095a2:	e7f8      	b.n	8009596 <__ascii_mbtowc+0x16>

080095a4 <memmove>:
 80095a4:	4288      	cmp	r0, r1
 80095a6:	b510      	push	{r4, lr}
 80095a8:	eb01 0402 	add.w	r4, r1, r2
 80095ac:	d902      	bls.n	80095b4 <memmove+0x10>
 80095ae:	4284      	cmp	r4, r0
 80095b0:	4623      	mov	r3, r4
 80095b2:	d807      	bhi.n	80095c4 <memmove+0x20>
 80095b4:	1e43      	subs	r3, r0, #1
 80095b6:	42a1      	cmp	r1, r4
 80095b8:	d008      	beq.n	80095cc <memmove+0x28>
 80095ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095c2:	e7f8      	b.n	80095b6 <memmove+0x12>
 80095c4:	4402      	add	r2, r0
 80095c6:	4601      	mov	r1, r0
 80095c8:	428a      	cmp	r2, r1
 80095ca:	d100      	bne.n	80095ce <memmove+0x2a>
 80095cc:	bd10      	pop	{r4, pc}
 80095ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095d6:	e7f7      	b.n	80095c8 <memmove+0x24>

080095d8 <__malloc_lock>:
 80095d8:	4801      	ldr	r0, [pc, #4]	; (80095e0 <__malloc_lock+0x8>)
 80095da:	f000 bc1f 	b.w	8009e1c <__retarget_lock_acquire_recursive>
 80095de:	bf00      	nop
 80095e0:	200054ec 	.word	0x200054ec

080095e4 <__malloc_unlock>:
 80095e4:	4801      	ldr	r0, [pc, #4]	; (80095ec <__malloc_unlock+0x8>)
 80095e6:	f000 bc1a 	b.w	8009e1e <__retarget_lock_release_recursive>
 80095ea:	bf00      	nop
 80095ec:	200054ec 	.word	0x200054ec

080095f0 <_realloc_r>:
 80095f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f4:	4680      	mov	r8, r0
 80095f6:	4614      	mov	r4, r2
 80095f8:	460e      	mov	r6, r1
 80095fa:	b921      	cbnz	r1, 8009606 <_realloc_r+0x16>
 80095fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009600:	4611      	mov	r1, r2
 8009602:	f7ff bdad 	b.w	8009160 <_malloc_r>
 8009606:	b92a      	cbnz	r2, 8009614 <_realloc_r+0x24>
 8009608:	f7ff fd3e 	bl	8009088 <_free_r>
 800960c:	4625      	mov	r5, r4
 800960e:	4628      	mov	r0, r5
 8009610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009614:	f000 fc6a 	bl	8009eec <_malloc_usable_size_r>
 8009618:	4284      	cmp	r4, r0
 800961a:	4607      	mov	r7, r0
 800961c:	d802      	bhi.n	8009624 <_realloc_r+0x34>
 800961e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009622:	d812      	bhi.n	800964a <_realloc_r+0x5a>
 8009624:	4621      	mov	r1, r4
 8009626:	4640      	mov	r0, r8
 8009628:	f7ff fd9a 	bl	8009160 <_malloc_r>
 800962c:	4605      	mov	r5, r0
 800962e:	2800      	cmp	r0, #0
 8009630:	d0ed      	beq.n	800960e <_realloc_r+0x1e>
 8009632:	42bc      	cmp	r4, r7
 8009634:	4622      	mov	r2, r4
 8009636:	4631      	mov	r1, r6
 8009638:	bf28      	it	cs
 800963a:	463a      	movcs	r2, r7
 800963c:	f7fd fe30 	bl	80072a0 <memcpy>
 8009640:	4631      	mov	r1, r6
 8009642:	4640      	mov	r0, r8
 8009644:	f7ff fd20 	bl	8009088 <_free_r>
 8009648:	e7e1      	b.n	800960e <_realloc_r+0x1e>
 800964a:	4635      	mov	r5, r6
 800964c:	e7df      	b.n	800960e <_realloc_r+0x1e>

0800964e <__sfputc_r>:
 800964e:	6893      	ldr	r3, [r2, #8]
 8009650:	3b01      	subs	r3, #1
 8009652:	2b00      	cmp	r3, #0
 8009654:	b410      	push	{r4}
 8009656:	6093      	str	r3, [r2, #8]
 8009658:	da08      	bge.n	800966c <__sfputc_r+0x1e>
 800965a:	6994      	ldr	r4, [r2, #24]
 800965c:	42a3      	cmp	r3, r4
 800965e:	db01      	blt.n	8009664 <__sfputc_r+0x16>
 8009660:	290a      	cmp	r1, #10
 8009662:	d103      	bne.n	800966c <__sfputc_r+0x1e>
 8009664:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009668:	f000 b94a 	b.w	8009900 <__swbuf_r>
 800966c:	6813      	ldr	r3, [r2, #0]
 800966e:	1c58      	adds	r0, r3, #1
 8009670:	6010      	str	r0, [r2, #0]
 8009672:	7019      	strb	r1, [r3, #0]
 8009674:	4608      	mov	r0, r1
 8009676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800967a:	4770      	bx	lr

0800967c <__sfputs_r>:
 800967c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967e:	4606      	mov	r6, r0
 8009680:	460f      	mov	r7, r1
 8009682:	4614      	mov	r4, r2
 8009684:	18d5      	adds	r5, r2, r3
 8009686:	42ac      	cmp	r4, r5
 8009688:	d101      	bne.n	800968e <__sfputs_r+0x12>
 800968a:	2000      	movs	r0, #0
 800968c:	e007      	b.n	800969e <__sfputs_r+0x22>
 800968e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009692:	463a      	mov	r2, r7
 8009694:	4630      	mov	r0, r6
 8009696:	f7ff ffda 	bl	800964e <__sfputc_r>
 800969a:	1c43      	adds	r3, r0, #1
 800969c:	d1f3      	bne.n	8009686 <__sfputs_r+0xa>
 800969e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080096a0 <_vfiprintf_r>:
 80096a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a4:	460d      	mov	r5, r1
 80096a6:	b09d      	sub	sp, #116	; 0x74
 80096a8:	4614      	mov	r4, r2
 80096aa:	4698      	mov	r8, r3
 80096ac:	4606      	mov	r6, r0
 80096ae:	b118      	cbz	r0, 80096b8 <_vfiprintf_r+0x18>
 80096b0:	6983      	ldr	r3, [r0, #24]
 80096b2:	b90b      	cbnz	r3, 80096b8 <_vfiprintf_r+0x18>
 80096b4:	f000 fb14 	bl	8009ce0 <__sinit>
 80096b8:	4b89      	ldr	r3, [pc, #548]	; (80098e0 <_vfiprintf_r+0x240>)
 80096ba:	429d      	cmp	r5, r3
 80096bc:	d11b      	bne.n	80096f6 <_vfiprintf_r+0x56>
 80096be:	6875      	ldr	r5, [r6, #4]
 80096c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096c2:	07d9      	lsls	r1, r3, #31
 80096c4:	d405      	bmi.n	80096d2 <_vfiprintf_r+0x32>
 80096c6:	89ab      	ldrh	r3, [r5, #12]
 80096c8:	059a      	lsls	r2, r3, #22
 80096ca:	d402      	bmi.n	80096d2 <_vfiprintf_r+0x32>
 80096cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ce:	f000 fba5 	bl	8009e1c <__retarget_lock_acquire_recursive>
 80096d2:	89ab      	ldrh	r3, [r5, #12]
 80096d4:	071b      	lsls	r3, r3, #28
 80096d6:	d501      	bpl.n	80096dc <_vfiprintf_r+0x3c>
 80096d8:	692b      	ldr	r3, [r5, #16]
 80096da:	b9eb      	cbnz	r3, 8009718 <_vfiprintf_r+0x78>
 80096dc:	4629      	mov	r1, r5
 80096de:	4630      	mov	r0, r6
 80096e0:	f000 f96e 	bl	80099c0 <__swsetup_r>
 80096e4:	b1c0      	cbz	r0, 8009718 <_vfiprintf_r+0x78>
 80096e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096e8:	07dc      	lsls	r4, r3, #31
 80096ea:	d50e      	bpl.n	800970a <_vfiprintf_r+0x6a>
 80096ec:	f04f 30ff 	mov.w	r0, #4294967295
 80096f0:	b01d      	add	sp, #116	; 0x74
 80096f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f6:	4b7b      	ldr	r3, [pc, #492]	; (80098e4 <_vfiprintf_r+0x244>)
 80096f8:	429d      	cmp	r5, r3
 80096fa:	d101      	bne.n	8009700 <_vfiprintf_r+0x60>
 80096fc:	68b5      	ldr	r5, [r6, #8]
 80096fe:	e7df      	b.n	80096c0 <_vfiprintf_r+0x20>
 8009700:	4b79      	ldr	r3, [pc, #484]	; (80098e8 <_vfiprintf_r+0x248>)
 8009702:	429d      	cmp	r5, r3
 8009704:	bf08      	it	eq
 8009706:	68f5      	ldreq	r5, [r6, #12]
 8009708:	e7da      	b.n	80096c0 <_vfiprintf_r+0x20>
 800970a:	89ab      	ldrh	r3, [r5, #12]
 800970c:	0598      	lsls	r0, r3, #22
 800970e:	d4ed      	bmi.n	80096ec <_vfiprintf_r+0x4c>
 8009710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009712:	f000 fb84 	bl	8009e1e <__retarget_lock_release_recursive>
 8009716:	e7e9      	b.n	80096ec <_vfiprintf_r+0x4c>
 8009718:	2300      	movs	r3, #0
 800971a:	9309      	str	r3, [sp, #36]	; 0x24
 800971c:	2320      	movs	r3, #32
 800971e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009722:	f8cd 800c 	str.w	r8, [sp, #12]
 8009726:	2330      	movs	r3, #48	; 0x30
 8009728:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098ec <_vfiprintf_r+0x24c>
 800972c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009730:	f04f 0901 	mov.w	r9, #1
 8009734:	4623      	mov	r3, r4
 8009736:	469a      	mov	sl, r3
 8009738:	f813 2b01 	ldrb.w	r2, [r3], #1
 800973c:	b10a      	cbz	r2, 8009742 <_vfiprintf_r+0xa2>
 800973e:	2a25      	cmp	r2, #37	; 0x25
 8009740:	d1f9      	bne.n	8009736 <_vfiprintf_r+0x96>
 8009742:	ebba 0b04 	subs.w	fp, sl, r4
 8009746:	d00b      	beq.n	8009760 <_vfiprintf_r+0xc0>
 8009748:	465b      	mov	r3, fp
 800974a:	4622      	mov	r2, r4
 800974c:	4629      	mov	r1, r5
 800974e:	4630      	mov	r0, r6
 8009750:	f7ff ff94 	bl	800967c <__sfputs_r>
 8009754:	3001      	adds	r0, #1
 8009756:	f000 80aa 	beq.w	80098ae <_vfiprintf_r+0x20e>
 800975a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800975c:	445a      	add	r2, fp
 800975e:	9209      	str	r2, [sp, #36]	; 0x24
 8009760:	f89a 3000 	ldrb.w	r3, [sl]
 8009764:	2b00      	cmp	r3, #0
 8009766:	f000 80a2 	beq.w	80098ae <_vfiprintf_r+0x20e>
 800976a:	2300      	movs	r3, #0
 800976c:	f04f 32ff 	mov.w	r2, #4294967295
 8009770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009774:	f10a 0a01 	add.w	sl, sl, #1
 8009778:	9304      	str	r3, [sp, #16]
 800977a:	9307      	str	r3, [sp, #28]
 800977c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009780:	931a      	str	r3, [sp, #104]	; 0x68
 8009782:	4654      	mov	r4, sl
 8009784:	2205      	movs	r2, #5
 8009786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800978a:	4858      	ldr	r0, [pc, #352]	; (80098ec <_vfiprintf_r+0x24c>)
 800978c:	f7f6 fd28 	bl	80001e0 <memchr>
 8009790:	9a04      	ldr	r2, [sp, #16]
 8009792:	b9d8      	cbnz	r0, 80097cc <_vfiprintf_r+0x12c>
 8009794:	06d1      	lsls	r1, r2, #27
 8009796:	bf44      	itt	mi
 8009798:	2320      	movmi	r3, #32
 800979a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800979e:	0713      	lsls	r3, r2, #28
 80097a0:	bf44      	itt	mi
 80097a2:	232b      	movmi	r3, #43	; 0x2b
 80097a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097a8:	f89a 3000 	ldrb.w	r3, [sl]
 80097ac:	2b2a      	cmp	r3, #42	; 0x2a
 80097ae:	d015      	beq.n	80097dc <_vfiprintf_r+0x13c>
 80097b0:	9a07      	ldr	r2, [sp, #28]
 80097b2:	4654      	mov	r4, sl
 80097b4:	2000      	movs	r0, #0
 80097b6:	f04f 0c0a 	mov.w	ip, #10
 80097ba:	4621      	mov	r1, r4
 80097bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097c0:	3b30      	subs	r3, #48	; 0x30
 80097c2:	2b09      	cmp	r3, #9
 80097c4:	d94e      	bls.n	8009864 <_vfiprintf_r+0x1c4>
 80097c6:	b1b0      	cbz	r0, 80097f6 <_vfiprintf_r+0x156>
 80097c8:	9207      	str	r2, [sp, #28]
 80097ca:	e014      	b.n	80097f6 <_vfiprintf_r+0x156>
 80097cc:	eba0 0308 	sub.w	r3, r0, r8
 80097d0:	fa09 f303 	lsl.w	r3, r9, r3
 80097d4:	4313      	orrs	r3, r2
 80097d6:	9304      	str	r3, [sp, #16]
 80097d8:	46a2      	mov	sl, r4
 80097da:	e7d2      	b.n	8009782 <_vfiprintf_r+0xe2>
 80097dc:	9b03      	ldr	r3, [sp, #12]
 80097de:	1d19      	adds	r1, r3, #4
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	9103      	str	r1, [sp, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	bfbb      	ittet	lt
 80097e8:	425b      	neglt	r3, r3
 80097ea:	f042 0202 	orrlt.w	r2, r2, #2
 80097ee:	9307      	strge	r3, [sp, #28]
 80097f0:	9307      	strlt	r3, [sp, #28]
 80097f2:	bfb8      	it	lt
 80097f4:	9204      	strlt	r2, [sp, #16]
 80097f6:	7823      	ldrb	r3, [r4, #0]
 80097f8:	2b2e      	cmp	r3, #46	; 0x2e
 80097fa:	d10c      	bne.n	8009816 <_vfiprintf_r+0x176>
 80097fc:	7863      	ldrb	r3, [r4, #1]
 80097fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009800:	d135      	bne.n	800986e <_vfiprintf_r+0x1ce>
 8009802:	9b03      	ldr	r3, [sp, #12]
 8009804:	1d1a      	adds	r2, r3, #4
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	9203      	str	r2, [sp, #12]
 800980a:	2b00      	cmp	r3, #0
 800980c:	bfb8      	it	lt
 800980e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009812:	3402      	adds	r4, #2
 8009814:	9305      	str	r3, [sp, #20]
 8009816:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80098fc <_vfiprintf_r+0x25c>
 800981a:	7821      	ldrb	r1, [r4, #0]
 800981c:	2203      	movs	r2, #3
 800981e:	4650      	mov	r0, sl
 8009820:	f7f6 fcde 	bl	80001e0 <memchr>
 8009824:	b140      	cbz	r0, 8009838 <_vfiprintf_r+0x198>
 8009826:	2340      	movs	r3, #64	; 0x40
 8009828:	eba0 000a 	sub.w	r0, r0, sl
 800982c:	fa03 f000 	lsl.w	r0, r3, r0
 8009830:	9b04      	ldr	r3, [sp, #16]
 8009832:	4303      	orrs	r3, r0
 8009834:	3401      	adds	r4, #1
 8009836:	9304      	str	r3, [sp, #16]
 8009838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800983c:	482c      	ldr	r0, [pc, #176]	; (80098f0 <_vfiprintf_r+0x250>)
 800983e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009842:	2206      	movs	r2, #6
 8009844:	f7f6 fccc 	bl	80001e0 <memchr>
 8009848:	2800      	cmp	r0, #0
 800984a:	d03f      	beq.n	80098cc <_vfiprintf_r+0x22c>
 800984c:	4b29      	ldr	r3, [pc, #164]	; (80098f4 <_vfiprintf_r+0x254>)
 800984e:	bb1b      	cbnz	r3, 8009898 <_vfiprintf_r+0x1f8>
 8009850:	9b03      	ldr	r3, [sp, #12]
 8009852:	3307      	adds	r3, #7
 8009854:	f023 0307 	bic.w	r3, r3, #7
 8009858:	3308      	adds	r3, #8
 800985a:	9303      	str	r3, [sp, #12]
 800985c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800985e:	443b      	add	r3, r7
 8009860:	9309      	str	r3, [sp, #36]	; 0x24
 8009862:	e767      	b.n	8009734 <_vfiprintf_r+0x94>
 8009864:	fb0c 3202 	mla	r2, ip, r2, r3
 8009868:	460c      	mov	r4, r1
 800986a:	2001      	movs	r0, #1
 800986c:	e7a5      	b.n	80097ba <_vfiprintf_r+0x11a>
 800986e:	2300      	movs	r3, #0
 8009870:	3401      	adds	r4, #1
 8009872:	9305      	str	r3, [sp, #20]
 8009874:	4619      	mov	r1, r3
 8009876:	f04f 0c0a 	mov.w	ip, #10
 800987a:	4620      	mov	r0, r4
 800987c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009880:	3a30      	subs	r2, #48	; 0x30
 8009882:	2a09      	cmp	r2, #9
 8009884:	d903      	bls.n	800988e <_vfiprintf_r+0x1ee>
 8009886:	2b00      	cmp	r3, #0
 8009888:	d0c5      	beq.n	8009816 <_vfiprintf_r+0x176>
 800988a:	9105      	str	r1, [sp, #20]
 800988c:	e7c3      	b.n	8009816 <_vfiprintf_r+0x176>
 800988e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009892:	4604      	mov	r4, r0
 8009894:	2301      	movs	r3, #1
 8009896:	e7f0      	b.n	800987a <_vfiprintf_r+0x1da>
 8009898:	ab03      	add	r3, sp, #12
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	462a      	mov	r2, r5
 800989e:	4b16      	ldr	r3, [pc, #88]	; (80098f8 <_vfiprintf_r+0x258>)
 80098a0:	a904      	add	r1, sp, #16
 80098a2:	4630      	mov	r0, r6
 80098a4:	f7fd fdb2 	bl	800740c <_printf_float>
 80098a8:	4607      	mov	r7, r0
 80098aa:	1c78      	adds	r0, r7, #1
 80098ac:	d1d6      	bne.n	800985c <_vfiprintf_r+0x1bc>
 80098ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098b0:	07d9      	lsls	r1, r3, #31
 80098b2:	d405      	bmi.n	80098c0 <_vfiprintf_r+0x220>
 80098b4:	89ab      	ldrh	r3, [r5, #12]
 80098b6:	059a      	lsls	r2, r3, #22
 80098b8:	d402      	bmi.n	80098c0 <_vfiprintf_r+0x220>
 80098ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098bc:	f000 faaf 	bl	8009e1e <__retarget_lock_release_recursive>
 80098c0:	89ab      	ldrh	r3, [r5, #12]
 80098c2:	065b      	lsls	r3, r3, #25
 80098c4:	f53f af12 	bmi.w	80096ec <_vfiprintf_r+0x4c>
 80098c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098ca:	e711      	b.n	80096f0 <_vfiprintf_r+0x50>
 80098cc:	ab03      	add	r3, sp, #12
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	462a      	mov	r2, r5
 80098d2:	4b09      	ldr	r3, [pc, #36]	; (80098f8 <_vfiprintf_r+0x258>)
 80098d4:	a904      	add	r1, sp, #16
 80098d6:	4630      	mov	r0, r6
 80098d8:	f7fe f83c 	bl	8007954 <_printf_i>
 80098dc:	e7e4      	b.n	80098a8 <_vfiprintf_r+0x208>
 80098de:	bf00      	nop
 80098e0:	0800ab14 	.word	0x0800ab14
 80098e4:	0800ab34 	.word	0x0800ab34
 80098e8:	0800aaf4 	.word	0x0800aaf4
 80098ec:	0800a99c 	.word	0x0800a99c
 80098f0:	0800a9a6 	.word	0x0800a9a6
 80098f4:	0800740d 	.word	0x0800740d
 80098f8:	0800967d 	.word	0x0800967d
 80098fc:	0800a9a2 	.word	0x0800a9a2

08009900 <__swbuf_r>:
 8009900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009902:	460e      	mov	r6, r1
 8009904:	4614      	mov	r4, r2
 8009906:	4605      	mov	r5, r0
 8009908:	b118      	cbz	r0, 8009912 <__swbuf_r+0x12>
 800990a:	6983      	ldr	r3, [r0, #24]
 800990c:	b90b      	cbnz	r3, 8009912 <__swbuf_r+0x12>
 800990e:	f000 f9e7 	bl	8009ce0 <__sinit>
 8009912:	4b21      	ldr	r3, [pc, #132]	; (8009998 <__swbuf_r+0x98>)
 8009914:	429c      	cmp	r4, r3
 8009916:	d12b      	bne.n	8009970 <__swbuf_r+0x70>
 8009918:	686c      	ldr	r4, [r5, #4]
 800991a:	69a3      	ldr	r3, [r4, #24]
 800991c:	60a3      	str	r3, [r4, #8]
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	071a      	lsls	r2, r3, #28
 8009922:	d52f      	bpl.n	8009984 <__swbuf_r+0x84>
 8009924:	6923      	ldr	r3, [r4, #16]
 8009926:	b36b      	cbz	r3, 8009984 <__swbuf_r+0x84>
 8009928:	6923      	ldr	r3, [r4, #16]
 800992a:	6820      	ldr	r0, [r4, #0]
 800992c:	1ac0      	subs	r0, r0, r3
 800992e:	6963      	ldr	r3, [r4, #20]
 8009930:	b2f6      	uxtb	r6, r6
 8009932:	4283      	cmp	r3, r0
 8009934:	4637      	mov	r7, r6
 8009936:	dc04      	bgt.n	8009942 <__swbuf_r+0x42>
 8009938:	4621      	mov	r1, r4
 800993a:	4628      	mov	r0, r5
 800993c:	f000 f93c 	bl	8009bb8 <_fflush_r>
 8009940:	bb30      	cbnz	r0, 8009990 <__swbuf_r+0x90>
 8009942:	68a3      	ldr	r3, [r4, #8]
 8009944:	3b01      	subs	r3, #1
 8009946:	60a3      	str	r3, [r4, #8]
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	1c5a      	adds	r2, r3, #1
 800994c:	6022      	str	r2, [r4, #0]
 800994e:	701e      	strb	r6, [r3, #0]
 8009950:	6963      	ldr	r3, [r4, #20]
 8009952:	3001      	adds	r0, #1
 8009954:	4283      	cmp	r3, r0
 8009956:	d004      	beq.n	8009962 <__swbuf_r+0x62>
 8009958:	89a3      	ldrh	r3, [r4, #12]
 800995a:	07db      	lsls	r3, r3, #31
 800995c:	d506      	bpl.n	800996c <__swbuf_r+0x6c>
 800995e:	2e0a      	cmp	r6, #10
 8009960:	d104      	bne.n	800996c <__swbuf_r+0x6c>
 8009962:	4621      	mov	r1, r4
 8009964:	4628      	mov	r0, r5
 8009966:	f000 f927 	bl	8009bb8 <_fflush_r>
 800996a:	b988      	cbnz	r0, 8009990 <__swbuf_r+0x90>
 800996c:	4638      	mov	r0, r7
 800996e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009970:	4b0a      	ldr	r3, [pc, #40]	; (800999c <__swbuf_r+0x9c>)
 8009972:	429c      	cmp	r4, r3
 8009974:	d101      	bne.n	800997a <__swbuf_r+0x7a>
 8009976:	68ac      	ldr	r4, [r5, #8]
 8009978:	e7cf      	b.n	800991a <__swbuf_r+0x1a>
 800997a:	4b09      	ldr	r3, [pc, #36]	; (80099a0 <__swbuf_r+0xa0>)
 800997c:	429c      	cmp	r4, r3
 800997e:	bf08      	it	eq
 8009980:	68ec      	ldreq	r4, [r5, #12]
 8009982:	e7ca      	b.n	800991a <__swbuf_r+0x1a>
 8009984:	4621      	mov	r1, r4
 8009986:	4628      	mov	r0, r5
 8009988:	f000 f81a 	bl	80099c0 <__swsetup_r>
 800998c:	2800      	cmp	r0, #0
 800998e:	d0cb      	beq.n	8009928 <__swbuf_r+0x28>
 8009990:	f04f 37ff 	mov.w	r7, #4294967295
 8009994:	e7ea      	b.n	800996c <__swbuf_r+0x6c>
 8009996:	bf00      	nop
 8009998:	0800ab14 	.word	0x0800ab14
 800999c:	0800ab34 	.word	0x0800ab34
 80099a0:	0800aaf4 	.word	0x0800aaf4

080099a4 <__ascii_wctomb>:
 80099a4:	b149      	cbz	r1, 80099ba <__ascii_wctomb+0x16>
 80099a6:	2aff      	cmp	r2, #255	; 0xff
 80099a8:	bf85      	ittet	hi
 80099aa:	238a      	movhi	r3, #138	; 0x8a
 80099ac:	6003      	strhi	r3, [r0, #0]
 80099ae:	700a      	strbls	r2, [r1, #0]
 80099b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80099b4:	bf98      	it	ls
 80099b6:	2001      	movls	r0, #1
 80099b8:	4770      	bx	lr
 80099ba:	4608      	mov	r0, r1
 80099bc:	4770      	bx	lr
	...

080099c0 <__swsetup_r>:
 80099c0:	4b32      	ldr	r3, [pc, #200]	; (8009a8c <__swsetup_r+0xcc>)
 80099c2:	b570      	push	{r4, r5, r6, lr}
 80099c4:	681d      	ldr	r5, [r3, #0]
 80099c6:	4606      	mov	r6, r0
 80099c8:	460c      	mov	r4, r1
 80099ca:	b125      	cbz	r5, 80099d6 <__swsetup_r+0x16>
 80099cc:	69ab      	ldr	r3, [r5, #24]
 80099ce:	b913      	cbnz	r3, 80099d6 <__swsetup_r+0x16>
 80099d0:	4628      	mov	r0, r5
 80099d2:	f000 f985 	bl	8009ce0 <__sinit>
 80099d6:	4b2e      	ldr	r3, [pc, #184]	; (8009a90 <__swsetup_r+0xd0>)
 80099d8:	429c      	cmp	r4, r3
 80099da:	d10f      	bne.n	80099fc <__swsetup_r+0x3c>
 80099dc:	686c      	ldr	r4, [r5, #4]
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099e4:	0719      	lsls	r1, r3, #28
 80099e6:	d42c      	bmi.n	8009a42 <__swsetup_r+0x82>
 80099e8:	06dd      	lsls	r5, r3, #27
 80099ea:	d411      	bmi.n	8009a10 <__swsetup_r+0x50>
 80099ec:	2309      	movs	r3, #9
 80099ee:	6033      	str	r3, [r6, #0]
 80099f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099f4:	81a3      	strh	r3, [r4, #12]
 80099f6:	f04f 30ff 	mov.w	r0, #4294967295
 80099fa:	e03e      	b.n	8009a7a <__swsetup_r+0xba>
 80099fc:	4b25      	ldr	r3, [pc, #148]	; (8009a94 <__swsetup_r+0xd4>)
 80099fe:	429c      	cmp	r4, r3
 8009a00:	d101      	bne.n	8009a06 <__swsetup_r+0x46>
 8009a02:	68ac      	ldr	r4, [r5, #8]
 8009a04:	e7eb      	b.n	80099de <__swsetup_r+0x1e>
 8009a06:	4b24      	ldr	r3, [pc, #144]	; (8009a98 <__swsetup_r+0xd8>)
 8009a08:	429c      	cmp	r4, r3
 8009a0a:	bf08      	it	eq
 8009a0c:	68ec      	ldreq	r4, [r5, #12]
 8009a0e:	e7e6      	b.n	80099de <__swsetup_r+0x1e>
 8009a10:	0758      	lsls	r0, r3, #29
 8009a12:	d512      	bpl.n	8009a3a <__swsetup_r+0x7a>
 8009a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a16:	b141      	cbz	r1, 8009a2a <__swsetup_r+0x6a>
 8009a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a1c:	4299      	cmp	r1, r3
 8009a1e:	d002      	beq.n	8009a26 <__swsetup_r+0x66>
 8009a20:	4630      	mov	r0, r6
 8009a22:	f7ff fb31 	bl	8009088 <_free_r>
 8009a26:	2300      	movs	r3, #0
 8009a28:	6363      	str	r3, [r4, #52]	; 0x34
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a30:	81a3      	strh	r3, [r4, #12]
 8009a32:	2300      	movs	r3, #0
 8009a34:	6063      	str	r3, [r4, #4]
 8009a36:	6923      	ldr	r3, [r4, #16]
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	89a3      	ldrh	r3, [r4, #12]
 8009a3c:	f043 0308 	orr.w	r3, r3, #8
 8009a40:	81a3      	strh	r3, [r4, #12]
 8009a42:	6923      	ldr	r3, [r4, #16]
 8009a44:	b94b      	cbnz	r3, 8009a5a <__swsetup_r+0x9a>
 8009a46:	89a3      	ldrh	r3, [r4, #12]
 8009a48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a50:	d003      	beq.n	8009a5a <__swsetup_r+0x9a>
 8009a52:	4621      	mov	r1, r4
 8009a54:	4630      	mov	r0, r6
 8009a56:	f000 fa09 	bl	8009e6c <__smakebuf_r>
 8009a5a:	89a0      	ldrh	r0, [r4, #12]
 8009a5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a60:	f010 0301 	ands.w	r3, r0, #1
 8009a64:	d00a      	beq.n	8009a7c <__swsetup_r+0xbc>
 8009a66:	2300      	movs	r3, #0
 8009a68:	60a3      	str	r3, [r4, #8]
 8009a6a:	6963      	ldr	r3, [r4, #20]
 8009a6c:	425b      	negs	r3, r3
 8009a6e:	61a3      	str	r3, [r4, #24]
 8009a70:	6923      	ldr	r3, [r4, #16]
 8009a72:	b943      	cbnz	r3, 8009a86 <__swsetup_r+0xc6>
 8009a74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a78:	d1ba      	bne.n	80099f0 <__swsetup_r+0x30>
 8009a7a:	bd70      	pop	{r4, r5, r6, pc}
 8009a7c:	0781      	lsls	r1, r0, #30
 8009a7e:	bf58      	it	pl
 8009a80:	6963      	ldrpl	r3, [r4, #20]
 8009a82:	60a3      	str	r3, [r4, #8]
 8009a84:	e7f4      	b.n	8009a70 <__swsetup_r+0xb0>
 8009a86:	2000      	movs	r0, #0
 8009a88:	e7f7      	b.n	8009a7a <__swsetup_r+0xba>
 8009a8a:	bf00      	nop
 8009a8c:	20000010 	.word	0x20000010
 8009a90:	0800ab14 	.word	0x0800ab14
 8009a94:	0800ab34 	.word	0x0800ab34
 8009a98:	0800aaf4 	.word	0x0800aaf4

08009a9c <abort>:
 8009a9c:	b508      	push	{r3, lr}
 8009a9e:	2006      	movs	r0, #6
 8009aa0:	f000 fa54 	bl	8009f4c <raise>
 8009aa4:	2001      	movs	r0, #1
 8009aa6:	f7f7 ffeb 	bl	8001a80 <_exit>
	...

08009aac <__sflush_r>:
 8009aac:	898a      	ldrh	r2, [r1, #12]
 8009aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab2:	4605      	mov	r5, r0
 8009ab4:	0710      	lsls	r0, r2, #28
 8009ab6:	460c      	mov	r4, r1
 8009ab8:	d458      	bmi.n	8009b6c <__sflush_r+0xc0>
 8009aba:	684b      	ldr	r3, [r1, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	dc05      	bgt.n	8009acc <__sflush_r+0x20>
 8009ac0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	dc02      	bgt.n	8009acc <__sflush_r+0x20>
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009acc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ace:	2e00      	cmp	r6, #0
 8009ad0:	d0f9      	beq.n	8009ac6 <__sflush_r+0x1a>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ad8:	682f      	ldr	r7, [r5, #0]
 8009ada:	602b      	str	r3, [r5, #0]
 8009adc:	d032      	beq.n	8009b44 <__sflush_r+0x98>
 8009ade:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	075a      	lsls	r2, r3, #29
 8009ae4:	d505      	bpl.n	8009af2 <__sflush_r+0x46>
 8009ae6:	6863      	ldr	r3, [r4, #4]
 8009ae8:	1ac0      	subs	r0, r0, r3
 8009aea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009aec:	b10b      	cbz	r3, 8009af2 <__sflush_r+0x46>
 8009aee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009af0:	1ac0      	subs	r0, r0, r3
 8009af2:	2300      	movs	r3, #0
 8009af4:	4602      	mov	r2, r0
 8009af6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009af8:	6a21      	ldr	r1, [r4, #32]
 8009afa:	4628      	mov	r0, r5
 8009afc:	47b0      	blx	r6
 8009afe:	1c43      	adds	r3, r0, #1
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	d106      	bne.n	8009b12 <__sflush_r+0x66>
 8009b04:	6829      	ldr	r1, [r5, #0]
 8009b06:	291d      	cmp	r1, #29
 8009b08:	d82c      	bhi.n	8009b64 <__sflush_r+0xb8>
 8009b0a:	4a2a      	ldr	r2, [pc, #168]	; (8009bb4 <__sflush_r+0x108>)
 8009b0c:	40ca      	lsrs	r2, r1
 8009b0e:	07d6      	lsls	r6, r2, #31
 8009b10:	d528      	bpl.n	8009b64 <__sflush_r+0xb8>
 8009b12:	2200      	movs	r2, #0
 8009b14:	6062      	str	r2, [r4, #4]
 8009b16:	04d9      	lsls	r1, r3, #19
 8009b18:	6922      	ldr	r2, [r4, #16]
 8009b1a:	6022      	str	r2, [r4, #0]
 8009b1c:	d504      	bpl.n	8009b28 <__sflush_r+0x7c>
 8009b1e:	1c42      	adds	r2, r0, #1
 8009b20:	d101      	bne.n	8009b26 <__sflush_r+0x7a>
 8009b22:	682b      	ldr	r3, [r5, #0]
 8009b24:	b903      	cbnz	r3, 8009b28 <__sflush_r+0x7c>
 8009b26:	6560      	str	r0, [r4, #84]	; 0x54
 8009b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b2a:	602f      	str	r7, [r5, #0]
 8009b2c:	2900      	cmp	r1, #0
 8009b2e:	d0ca      	beq.n	8009ac6 <__sflush_r+0x1a>
 8009b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b34:	4299      	cmp	r1, r3
 8009b36:	d002      	beq.n	8009b3e <__sflush_r+0x92>
 8009b38:	4628      	mov	r0, r5
 8009b3a:	f7ff faa5 	bl	8009088 <_free_r>
 8009b3e:	2000      	movs	r0, #0
 8009b40:	6360      	str	r0, [r4, #52]	; 0x34
 8009b42:	e7c1      	b.n	8009ac8 <__sflush_r+0x1c>
 8009b44:	6a21      	ldr	r1, [r4, #32]
 8009b46:	2301      	movs	r3, #1
 8009b48:	4628      	mov	r0, r5
 8009b4a:	47b0      	blx	r6
 8009b4c:	1c41      	adds	r1, r0, #1
 8009b4e:	d1c7      	bne.n	8009ae0 <__sflush_r+0x34>
 8009b50:	682b      	ldr	r3, [r5, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d0c4      	beq.n	8009ae0 <__sflush_r+0x34>
 8009b56:	2b1d      	cmp	r3, #29
 8009b58:	d001      	beq.n	8009b5e <__sflush_r+0xb2>
 8009b5a:	2b16      	cmp	r3, #22
 8009b5c:	d101      	bne.n	8009b62 <__sflush_r+0xb6>
 8009b5e:	602f      	str	r7, [r5, #0]
 8009b60:	e7b1      	b.n	8009ac6 <__sflush_r+0x1a>
 8009b62:	89a3      	ldrh	r3, [r4, #12]
 8009b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b68:	81a3      	strh	r3, [r4, #12]
 8009b6a:	e7ad      	b.n	8009ac8 <__sflush_r+0x1c>
 8009b6c:	690f      	ldr	r7, [r1, #16]
 8009b6e:	2f00      	cmp	r7, #0
 8009b70:	d0a9      	beq.n	8009ac6 <__sflush_r+0x1a>
 8009b72:	0793      	lsls	r3, r2, #30
 8009b74:	680e      	ldr	r6, [r1, #0]
 8009b76:	bf08      	it	eq
 8009b78:	694b      	ldreq	r3, [r1, #20]
 8009b7a:	600f      	str	r7, [r1, #0]
 8009b7c:	bf18      	it	ne
 8009b7e:	2300      	movne	r3, #0
 8009b80:	eba6 0807 	sub.w	r8, r6, r7
 8009b84:	608b      	str	r3, [r1, #8]
 8009b86:	f1b8 0f00 	cmp.w	r8, #0
 8009b8a:	dd9c      	ble.n	8009ac6 <__sflush_r+0x1a>
 8009b8c:	6a21      	ldr	r1, [r4, #32]
 8009b8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b90:	4643      	mov	r3, r8
 8009b92:	463a      	mov	r2, r7
 8009b94:	4628      	mov	r0, r5
 8009b96:	47b0      	blx	r6
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	dc06      	bgt.n	8009baa <__sflush_r+0xfe>
 8009b9c:	89a3      	ldrh	r3, [r4, #12]
 8009b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ba2:	81a3      	strh	r3, [r4, #12]
 8009ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba8:	e78e      	b.n	8009ac8 <__sflush_r+0x1c>
 8009baa:	4407      	add	r7, r0
 8009bac:	eba8 0800 	sub.w	r8, r8, r0
 8009bb0:	e7e9      	b.n	8009b86 <__sflush_r+0xda>
 8009bb2:	bf00      	nop
 8009bb4:	20400001 	.word	0x20400001

08009bb8 <_fflush_r>:
 8009bb8:	b538      	push	{r3, r4, r5, lr}
 8009bba:	690b      	ldr	r3, [r1, #16]
 8009bbc:	4605      	mov	r5, r0
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	b913      	cbnz	r3, 8009bc8 <_fflush_r+0x10>
 8009bc2:	2500      	movs	r5, #0
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	bd38      	pop	{r3, r4, r5, pc}
 8009bc8:	b118      	cbz	r0, 8009bd2 <_fflush_r+0x1a>
 8009bca:	6983      	ldr	r3, [r0, #24]
 8009bcc:	b90b      	cbnz	r3, 8009bd2 <_fflush_r+0x1a>
 8009bce:	f000 f887 	bl	8009ce0 <__sinit>
 8009bd2:	4b14      	ldr	r3, [pc, #80]	; (8009c24 <_fflush_r+0x6c>)
 8009bd4:	429c      	cmp	r4, r3
 8009bd6:	d11b      	bne.n	8009c10 <_fflush_r+0x58>
 8009bd8:	686c      	ldr	r4, [r5, #4]
 8009bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0ef      	beq.n	8009bc2 <_fflush_r+0xa>
 8009be2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009be4:	07d0      	lsls	r0, r2, #31
 8009be6:	d404      	bmi.n	8009bf2 <_fflush_r+0x3a>
 8009be8:	0599      	lsls	r1, r3, #22
 8009bea:	d402      	bmi.n	8009bf2 <_fflush_r+0x3a>
 8009bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bee:	f000 f915 	bl	8009e1c <__retarget_lock_acquire_recursive>
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	f7ff ff59 	bl	8009aac <__sflush_r>
 8009bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bfc:	07da      	lsls	r2, r3, #31
 8009bfe:	4605      	mov	r5, r0
 8009c00:	d4e0      	bmi.n	8009bc4 <_fflush_r+0xc>
 8009c02:	89a3      	ldrh	r3, [r4, #12]
 8009c04:	059b      	lsls	r3, r3, #22
 8009c06:	d4dd      	bmi.n	8009bc4 <_fflush_r+0xc>
 8009c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c0a:	f000 f908 	bl	8009e1e <__retarget_lock_release_recursive>
 8009c0e:	e7d9      	b.n	8009bc4 <_fflush_r+0xc>
 8009c10:	4b05      	ldr	r3, [pc, #20]	; (8009c28 <_fflush_r+0x70>)
 8009c12:	429c      	cmp	r4, r3
 8009c14:	d101      	bne.n	8009c1a <_fflush_r+0x62>
 8009c16:	68ac      	ldr	r4, [r5, #8]
 8009c18:	e7df      	b.n	8009bda <_fflush_r+0x22>
 8009c1a:	4b04      	ldr	r3, [pc, #16]	; (8009c2c <_fflush_r+0x74>)
 8009c1c:	429c      	cmp	r4, r3
 8009c1e:	bf08      	it	eq
 8009c20:	68ec      	ldreq	r4, [r5, #12]
 8009c22:	e7da      	b.n	8009bda <_fflush_r+0x22>
 8009c24:	0800ab14 	.word	0x0800ab14
 8009c28:	0800ab34 	.word	0x0800ab34
 8009c2c:	0800aaf4 	.word	0x0800aaf4

08009c30 <std>:
 8009c30:	2300      	movs	r3, #0
 8009c32:	b510      	push	{r4, lr}
 8009c34:	4604      	mov	r4, r0
 8009c36:	e9c0 3300 	strd	r3, r3, [r0]
 8009c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c3e:	6083      	str	r3, [r0, #8]
 8009c40:	8181      	strh	r1, [r0, #12]
 8009c42:	6643      	str	r3, [r0, #100]	; 0x64
 8009c44:	81c2      	strh	r2, [r0, #14]
 8009c46:	6183      	str	r3, [r0, #24]
 8009c48:	4619      	mov	r1, r3
 8009c4a:	2208      	movs	r2, #8
 8009c4c:	305c      	adds	r0, #92	; 0x5c
 8009c4e:	f7fd fb35 	bl	80072bc <memset>
 8009c52:	4b05      	ldr	r3, [pc, #20]	; (8009c68 <std+0x38>)
 8009c54:	6263      	str	r3, [r4, #36]	; 0x24
 8009c56:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <std+0x3c>)
 8009c58:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c5a:	4b05      	ldr	r3, [pc, #20]	; (8009c70 <std+0x40>)
 8009c5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c5e:	4b05      	ldr	r3, [pc, #20]	; (8009c74 <std+0x44>)
 8009c60:	6224      	str	r4, [r4, #32]
 8009c62:	6323      	str	r3, [r4, #48]	; 0x30
 8009c64:	bd10      	pop	{r4, pc}
 8009c66:	bf00      	nop
 8009c68:	08009f85 	.word	0x08009f85
 8009c6c:	08009fa7 	.word	0x08009fa7
 8009c70:	08009fdf 	.word	0x08009fdf
 8009c74:	0800a003 	.word	0x0800a003

08009c78 <_cleanup_r>:
 8009c78:	4901      	ldr	r1, [pc, #4]	; (8009c80 <_cleanup_r+0x8>)
 8009c7a:	f000 b8af 	b.w	8009ddc <_fwalk_reent>
 8009c7e:	bf00      	nop
 8009c80:	08009bb9 	.word	0x08009bb9

08009c84 <__sfmoreglue>:
 8009c84:	b570      	push	{r4, r5, r6, lr}
 8009c86:	2268      	movs	r2, #104	; 0x68
 8009c88:	1e4d      	subs	r5, r1, #1
 8009c8a:	4355      	muls	r5, r2
 8009c8c:	460e      	mov	r6, r1
 8009c8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c92:	f7ff fa65 	bl	8009160 <_malloc_r>
 8009c96:	4604      	mov	r4, r0
 8009c98:	b140      	cbz	r0, 8009cac <__sfmoreglue+0x28>
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	e9c0 1600 	strd	r1, r6, [r0]
 8009ca0:	300c      	adds	r0, #12
 8009ca2:	60a0      	str	r0, [r4, #8]
 8009ca4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ca8:	f7fd fb08 	bl	80072bc <memset>
 8009cac:	4620      	mov	r0, r4
 8009cae:	bd70      	pop	{r4, r5, r6, pc}

08009cb0 <__sfp_lock_acquire>:
 8009cb0:	4801      	ldr	r0, [pc, #4]	; (8009cb8 <__sfp_lock_acquire+0x8>)
 8009cb2:	f000 b8b3 	b.w	8009e1c <__retarget_lock_acquire_recursive>
 8009cb6:	bf00      	nop
 8009cb8:	200054ed 	.word	0x200054ed

08009cbc <__sfp_lock_release>:
 8009cbc:	4801      	ldr	r0, [pc, #4]	; (8009cc4 <__sfp_lock_release+0x8>)
 8009cbe:	f000 b8ae 	b.w	8009e1e <__retarget_lock_release_recursive>
 8009cc2:	bf00      	nop
 8009cc4:	200054ed 	.word	0x200054ed

08009cc8 <__sinit_lock_acquire>:
 8009cc8:	4801      	ldr	r0, [pc, #4]	; (8009cd0 <__sinit_lock_acquire+0x8>)
 8009cca:	f000 b8a7 	b.w	8009e1c <__retarget_lock_acquire_recursive>
 8009cce:	bf00      	nop
 8009cd0:	200054ee 	.word	0x200054ee

08009cd4 <__sinit_lock_release>:
 8009cd4:	4801      	ldr	r0, [pc, #4]	; (8009cdc <__sinit_lock_release+0x8>)
 8009cd6:	f000 b8a2 	b.w	8009e1e <__retarget_lock_release_recursive>
 8009cda:	bf00      	nop
 8009cdc:	200054ee 	.word	0x200054ee

08009ce0 <__sinit>:
 8009ce0:	b510      	push	{r4, lr}
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	f7ff fff0 	bl	8009cc8 <__sinit_lock_acquire>
 8009ce8:	69a3      	ldr	r3, [r4, #24]
 8009cea:	b11b      	cbz	r3, 8009cf4 <__sinit+0x14>
 8009cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cf0:	f7ff bff0 	b.w	8009cd4 <__sinit_lock_release>
 8009cf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009cf8:	6523      	str	r3, [r4, #80]	; 0x50
 8009cfa:	4b13      	ldr	r3, [pc, #76]	; (8009d48 <__sinit+0x68>)
 8009cfc:	4a13      	ldr	r2, [pc, #76]	; (8009d4c <__sinit+0x6c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d02:	42a3      	cmp	r3, r4
 8009d04:	bf04      	itt	eq
 8009d06:	2301      	moveq	r3, #1
 8009d08:	61a3      	streq	r3, [r4, #24]
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f000 f820 	bl	8009d50 <__sfp>
 8009d10:	6060      	str	r0, [r4, #4]
 8009d12:	4620      	mov	r0, r4
 8009d14:	f000 f81c 	bl	8009d50 <__sfp>
 8009d18:	60a0      	str	r0, [r4, #8]
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f000 f818 	bl	8009d50 <__sfp>
 8009d20:	2200      	movs	r2, #0
 8009d22:	60e0      	str	r0, [r4, #12]
 8009d24:	2104      	movs	r1, #4
 8009d26:	6860      	ldr	r0, [r4, #4]
 8009d28:	f7ff ff82 	bl	8009c30 <std>
 8009d2c:	68a0      	ldr	r0, [r4, #8]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	2109      	movs	r1, #9
 8009d32:	f7ff ff7d 	bl	8009c30 <std>
 8009d36:	68e0      	ldr	r0, [r4, #12]
 8009d38:	2202      	movs	r2, #2
 8009d3a:	2112      	movs	r1, #18
 8009d3c:	f7ff ff78 	bl	8009c30 <std>
 8009d40:	2301      	movs	r3, #1
 8009d42:	61a3      	str	r3, [r4, #24]
 8009d44:	e7d2      	b.n	8009cec <__sinit+0xc>
 8009d46:	bf00      	nop
 8009d48:	0800a778 	.word	0x0800a778
 8009d4c:	08009c79 	.word	0x08009c79

08009d50 <__sfp>:
 8009d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d52:	4607      	mov	r7, r0
 8009d54:	f7ff ffac 	bl	8009cb0 <__sfp_lock_acquire>
 8009d58:	4b1e      	ldr	r3, [pc, #120]	; (8009dd4 <__sfp+0x84>)
 8009d5a:	681e      	ldr	r6, [r3, #0]
 8009d5c:	69b3      	ldr	r3, [r6, #24]
 8009d5e:	b913      	cbnz	r3, 8009d66 <__sfp+0x16>
 8009d60:	4630      	mov	r0, r6
 8009d62:	f7ff ffbd 	bl	8009ce0 <__sinit>
 8009d66:	3648      	adds	r6, #72	; 0x48
 8009d68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	d503      	bpl.n	8009d78 <__sfp+0x28>
 8009d70:	6833      	ldr	r3, [r6, #0]
 8009d72:	b30b      	cbz	r3, 8009db8 <__sfp+0x68>
 8009d74:	6836      	ldr	r6, [r6, #0]
 8009d76:	e7f7      	b.n	8009d68 <__sfp+0x18>
 8009d78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d7c:	b9d5      	cbnz	r5, 8009db4 <__sfp+0x64>
 8009d7e:	4b16      	ldr	r3, [pc, #88]	; (8009dd8 <__sfp+0x88>)
 8009d80:	60e3      	str	r3, [r4, #12]
 8009d82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d86:	6665      	str	r5, [r4, #100]	; 0x64
 8009d88:	f000 f847 	bl	8009e1a <__retarget_lock_init_recursive>
 8009d8c:	f7ff ff96 	bl	8009cbc <__sfp_lock_release>
 8009d90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d98:	6025      	str	r5, [r4, #0]
 8009d9a:	61a5      	str	r5, [r4, #24]
 8009d9c:	2208      	movs	r2, #8
 8009d9e:	4629      	mov	r1, r5
 8009da0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009da4:	f7fd fa8a 	bl	80072bc <memset>
 8009da8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009dac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009db0:	4620      	mov	r0, r4
 8009db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009db4:	3468      	adds	r4, #104	; 0x68
 8009db6:	e7d9      	b.n	8009d6c <__sfp+0x1c>
 8009db8:	2104      	movs	r1, #4
 8009dba:	4638      	mov	r0, r7
 8009dbc:	f7ff ff62 	bl	8009c84 <__sfmoreglue>
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	6030      	str	r0, [r6, #0]
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d1d5      	bne.n	8009d74 <__sfp+0x24>
 8009dc8:	f7ff ff78 	bl	8009cbc <__sfp_lock_release>
 8009dcc:	230c      	movs	r3, #12
 8009dce:	603b      	str	r3, [r7, #0]
 8009dd0:	e7ee      	b.n	8009db0 <__sfp+0x60>
 8009dd2:	bf00      	nop
 8009dd4:	0800a778 	.word	0x0800a778
 8009dd8:	ffff0001 	.word	0xffff0001

08009ddc <_fwalk_reent>:
 8009ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009de0:	4606      	mov	r6, r0
 8009de2:	4688      	mov	r8, r1
 8009de4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009de8:	2700      	movs	r7, #0
 8009dea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009dee:	f1b9 0901 	subs.w	r9, r9, #1
 8009df2:	d505      	bpl.n	8009e00 <_fwalk_reent+0x24>
 8009df4:	6824      	ldr	r4, [r4, #0]
 8009df6:	2c00      	cmp	r4, #0
 8009df8:	d1f7      	bne.n	8009dea <_fwalk_reent+0xe>
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e00:	89ab      	ldrh	r3, [r5, #12]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d907      	bls.n	8009e16 <_fwalk_reent+0x3a>
 8009e06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	d003      	beq.n	8009e16 <_fwalk_reent+0x3a>
 8009e0e:	4629      	mov	r1, r5
 8009e10:	4630      	mov	r0, r6
 8009e12:	47c0      	blx	r8
 8009e14:	4307      	orrs	r7, r0
 8009e16:	3568      	adds	r5, #104	; 0x68
 8009e18:	e7e9      	b.n	8009dee <_fwalk_reent+0x12>

08009e1a <__retarget_lock_init_recursive>:
 8009e1a:	4770      	bx	lr

08009e1c <__retarget_lock_acquire_recursive>:
 8009e1c:	4770      	bx	lr

08009e1e <__retarget_lock_release_recursive>:
 8009e1e:	4770      	bx	lr

08009e20 <__swhatbuf_r>:
 8009e20:	b570      	push	{r4, r5, r6, lr}
 8009e22:	460e      	mov	r6, r1
 8009e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e28:	2900      	cmp	r1, #0
 8009e2a:	b096      	sub	sp, #88	; 0x58
 8009e2c:	4614      	mov	r4, r2
 8009e2e:	461d      	mov	r5, r3
 8009e30:	da08      	bge.n	8009e44 <__swhatbuf_r+0x24>
 8009e32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	602a      	str	r2, [r5, #0]
 8009e3a:	061a      	lsls	r2, r3, #24
 8009e3c:	d410      	bmi.n	8009e60 <__swhatbuf_r+0x40>
 8009e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e42:	e00e      	b.n	8009e62 <__swhatbuf_r+0x42>
 8009e44:	466a      	mov	r2, sp
 8009e46:	f000 f903 	bl	800a050 <_fstat_r>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	dbf1      	blt.n	8009e32 <__swhatbuf_r+0x12>
 8009e4e:	9a01      	ldr	r2, [sp, #4]
 8009e50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e58:	425a      	negs	r2, r3
 8009e5a:	415a      	adcs	r2, r3
 8009e5c:	602a      	str	r2, [r5, #0]
 8009e5e:	e7ee      	b.n	8009e3e <__swhatbuf_r+0x1e>
 8009e60:	2340      	movs	r3, #64	; 0x40
 8009e62:	2000      	movs	r0, #0
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	b016      	add	sp, #88	; 0x58
 8009e68:	bd70      	pop	{r4, r5, r6, pc}
	...

08009e6c <__smakebuf_r>:
 8009e6c:	898b      	ldrh	r3, [r1, #12]
 8009e6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e70:	079d      	lsls	r5, r3, #30
 8009e72:	4606      	mov	r6, r0
 8009e74:	460c      	mov	r4, r1
 8009e76:	d507      	bpl.n	8009e88 <__smakebuf_r+0x1c>
 8009e78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	6123      	str	r3, [r4, #16]
 8009e80:	2301      	movs	r3, #1
 8009e82:	6163      	str	r3, [r4, #20]
 8009e84:	b002      	add	sp, #8
 8009e86:	bd70      	pop	{r4, r5, r6, pc}
 8009e88:	ab01      	add	r3, sp, #4
 8009e8a:	466a      	mov	r2, sp
 8009e8c:	f7ff ffc8 	bl	8009e20 <__swhatbuf_r>
 8009e90:	9900      	ldr	r1, [sp, #0]
 8009e92:	4605      	mov	r5, r0
 8009e94:	4630      	mov	r0, r6
 8009e96:	f7ff f963 	bl	8009160 <_malloc_r>
 8009e9a:	b948      	cbnz	r0, 8009eb0 <__smakebuf_r+0x44>
 8009e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ea0:	059a      	lsls	r2, r3, #22
 8009ea2:	d4ef      	bmi.n	8009e84 <__smakebuf_r+0x18>
 8009ea4:	f023 0303 	bic.w	r3, r3, #3
 8009ea8:	f043 0302 	orr.w	r3, r3, #2
 8009eac:	81a3      	strh	r3, [r4, #12]
 8009eae:	e7e3      	b.n	8009e78 <__smakebuf_r+0xc>
 8009eb0:	4b0d      	ldr	r3, [pc, #52]	; (8009ee8 <__smakebuf_r+0x7c>)
 8009eb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009eb4:	89a3      	ldrh	r3, [r4, #12]
 8009eb6:	6020      	str	r0, [r4, #0]
 8009eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ebc:	81a3      	strh	r3, [r4, #12]
 8009ebe:	9b00      	ldr	r3, [sp, #0]
 8009ec0:	6163      	str	r3, [r4, #20]
 8009ec2:	9b01      	ldr	r3, [sp, #4]
 8009ec4:	6120      	str	r0, [r4, #16]
 8009ec6:	b15b      	cbz	r3, 8009ee0 <__smakebuf_r+0x74>
 8009ec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ecc:	4630      	mov	r0, r6
 8009ece:	f000 f8d1 	bl	800a074 <_isatty_r>
 8009ed2:	b128      	cbz	r0, 8009ee0 <__smakebuf_r+0x74>
 8009ed4:	89a3      	ldrh	r3, [r4, #12]
 8009ed6:	f023 0303 	bic.w	r3, r3, #3
 8009eda:	f043 0301 	orr.w	r3, r3, #1
 8009ede:	81a3      	strh	r3, [r4, #12]
 8009ee0:	89a0      	ldrh	r0, [r4, #12]
 8009ee2:	4305      	orrs	r5, r0
 8009ee4:	81a5      	strh	r5, [r4, #12]
 8009ee6:	e7cd      	b.n	8009e84 <__smakebuf_r+0x18>
 8009ee8:	08009c79 	.word	0x08009c79

08009eec <_malloc_usable_size_r>:
 8009eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ef0:	1f18      	subs	r0, r3, #4
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	bfbc      	itt	lt
 8009ef6:	580b      	ldrlt	r3, [r1, r0]
 8009ef8:	18c0      	addlt	r0, r0, r3
 8009efa:	4770      	bx	lr

08009efc <_raise_r>:
 8009efc:	291f      	cmp	r1, #31
 8009efe:	b538      	push	{r3, r4, r5, lr}
 8009f00:	4604      	mov	r4, r0
 8009f02:	460d      	mov	r5, r1
 8009f04:	d904      	bls.n	8009f10 <_raise_r+0x14>
 8009f06:	2316      	movs	r3, #22
 8009f08:	6003      	str	r3, [r0, #0]
 8009f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f0e:	bd38      	pop	{r3, r4, r5, pc}
 8009f10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009f12:	b112      	cbz	r2, 8009f1a <_raise_r+0x1e>
 8009f14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f18:	b94b      	cbnz	r3, 8009f2e <_raise_r+0x32>
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f000 f830 	bl	8009f80 <_getpid_r>
 8009f20:	462a      	mov	r2, r5
 8009f22:	4601      	mov	r1, r0
 8009f24:	4620      	mov	r0, r4
 8009f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f2a:	f000 b817 	b.w	8009f5c <_kill_r>
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d00a      	beq.n	8009f48 <_raise_r+0x4c>
 8009f32:	1c59      	adds	r1, r3, #1
 8009f34:	d103      	bne.n	8009f3e <_raise_r+0x42>
 8009f36:	2316      	movs	r3, #22
 8009f38:	6003      	str	r3, [r0, #0]
 8009f3a:	2001      	movs	r0, #1
 8009f3c:	e7e7      	b.n	8009f0e <_raise_r+0x12>
 8009f3e:	2400      	movs	r4, #0
 8009f40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f44:	4628      	mov	r0, r5
 8009f46:	4798      	blx	r3
 8009f48:	2000      	movs	r0, #0
 8009f4a:	e7e0      	b.n	8009f0e <_raise_r+0x12>

08009f4c <raise>:
 8009f4c:	4b02      	ldr	r3, [pc, #8]	; (8009f58 <raise+0xc>)
 8009f4e:	4601      	mov	r1, r0
 8009f50:	6818      	ldr	r0, [r3, #0]
 8009f52:	f7ff bfd3 	b.w	8009efc <_raise_r>
 8009f56:	bf00      	nop
 8009f58:	20000010 	.word	0x20000010

08009f5c <_kill_r>:
 8009f5c:	b538      	push	{r3, r4, r5, lr}
 8009f5e:	4d07      	ldr	r5, [pc, #28]	; (8009f7c <_kill_r+0x20>)
 8009f60:	2300      	movs	r3, #0
 8009f62:	4604      	mov	r4, r0
 8009f64:	4608      	mov	r0, r1
 8009f66:	4611      	mov	r1, r2
 8009f68:	602b      	str	r3, [r5, #0]
 8009f6a:	f7f7 fd79 	bl	8001a60 <_kill>
 8009f6e:	1c43      	adds	r3, r0, #1
 8009f70:	d102      	bne.n	8009f78 <_kill_r+0x1c>
 8009f72:	682b      	ldr	r3, [r5, #0]
 8009f74:	b103      	cbz	r3, 8009f78 <_kill_r+0x1c>
 8009f76:	6023      	str	r3, [r4, #0]
 8009f78:	bd38      	pop	{r3, r4, r5, pc}
 8009f7a:	bf00      	nop
 8009f7c:	200054e8 	.word	0x200054e8

08009f80 <_getpid_r>:
 8009f80:	f7f7 bd66 	b.w	8001a50 <_getpid>

08009f84 <__sread>:
 8009f84:	b510      	push	{r4, lr}
 8009f86:	460c      	mov	r4, r1
 8009f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f8c:	f000 f894 	bl	800a0b8 <_read_r>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	bfab      	itete	ge
 8009f94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f96:	89a3      	ldrhlt	r3, [r4, #12]
 8009f98:	181b      	addge	r3, r3, r0
 8009f9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f9e:	bfac      	ite	ge
 8009fa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009fa2:	81a3      	strhlt	r3, [r4, #12]
 8009fa4:	bd10      	pop	{r4, pc}

08009fa6 <__swrite>:
 8009fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009faa:	461f      	mov	r7, r3
 8009fac:	898b      	ldrh	r3, [r1, #12]
 8009fae:	05db      	lsls	r3, r3, #23
 8009fb0:	4605      	mov	r5, r0
 8009fb2:	460c      	mov	r4, r1
 8009fb4:	4616      	mov	r6, r2
 8009fb6:	d505      	bpl.n	8009fc4 <__swrite+0x1e>
 8009fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f000 f868 	bl	800a094 <_lseek_r>
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fce:	81a3      	strh	r3, [r4, #12]
 8009fd0:	4632      	mov	r2, r6
 8009fd2:	463b      	mov	r3, r7
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fda:	f000 b817 	b.w	800a00c <_write_r>

08009fde <__sseek>:
 8009fde:	b510      	push	{r4, lr}
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fe6:	f000 f855 	bl	800a094 <_lseek_r>
 8009fea:	1c43      	adds	r3, r0, #1
 8009fec:	89a3      	ldrh	r3, [r4, #12]
 8009fee:	bf15      	itete	ne
 8009ff0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ffa:	81a3      	strheq	r3, [r4, #12]
 8009ffc:	bf18      	it	ne
 8009ffe:	81a3      	strhne	r3, [r4, #12]
 800a000:	bd10      	pop	{r4, pc}

0800a002 <__sclose>:
 800a002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a006:	f000 b813 	b.w	800a030 <_close_r>
	...

0800a00c <_write_r>:
 800a00c:	b538      	push	{r3, r4, r5, lr}
 800a00e:	4d07      	ldr	r5, [pc, #28]	; (800a02c <_write_r+0x20>)
 800a010:	4604      	mov	r4, r0
 800a012:	4608      	mov	r0, r1
 800a014:	4611      	mov	r1, r2
 800a016:	2200      	movs	r2, #0
 800a018:	602a      	str	r2, [r5, #0]
 800a01a:	461a      	mov	r2, r3
 800a01c:	f7f7 fd57 	bl	8001ace <_write>
 800a020:	1c43      	adds	r3, r0, #1
 800a022:	d102      	bne.n	800a02a <_write_r+0x1e>
 800a024:	682b      	ldr	r3, [r5, #0]
 800a026:	b103      	cbz	r3, 800a02a <_write_r+0x1e>
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	bd38      	pop	{r3, r4, r5, pc}
 800a02c:	200054e8 	.word	0x200054e8

0800a030 <_close_r>:
 800a030:	b538      	push	{r3, r4, r5, lr}
 800a032:	4d06      	ldr	r5, [pc, #24]	; (800a04c <_close_r+0x1c>)
 800a034:	2300      	movs	r3, #0
 800a036:	4604      	mov	r4, r0
 800a038:	4608      	mov	r0, r1
 800a03a:	602b      	str	r3, [r5, #0]
 800a03c:	f7f7 fd63 	bl	8001b06 <_close>
 800a040:	1c43      	adds	r3, r0, #1
 800a042:	d102      	bne.n	800a04a <_close_r+0x1a>
 800a044:	682b      	ldr	r3, [r5, #0]
 800a046:	b103      	cbz	r3, 800a04a <_close_r+0x1a>
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	bd38      	pop	{r3, r4, r5, pc}
 800a04c:	200054e8 	.word	0x200054e8

0800a050 <_fstat_r>:
 800a050:	b538      	push	{r3, r4, r5, lr}
 800a052:	4d07      	ldr	r5, [pc, #28]	; (800a070 <_fstat_r+0x20>)
 800a054:	2300      	movs	r3, #0
 800a056:	4604      	mov	r4, r0
 800a058:	4608      	mov	r0, r1
 800a05a:	4611      	mov	r1, r2
 800a05c:	602b      	str	r3, [r5, #0]
 800a05e:	f7f7 fd5e 	bl	8001b1e <_fstat>
 800a062:	1c43      	adds	r3, r0, #1
 800a064:	d102      	bne.n	800a06c <_fstat_r+0x1c>
 800a066:	682b      	ldr	r3, [r5, #0]
 800a068:	b103      	cbz	r3, 800a06c <_fstat_r+0x1c>
 800a06a:	6023      	str	r3, [r4, #0]
 800a06c:	bd38      	pop	{r3, r4, r5, pc}
 800a06e:	bf00      	nop
 800a070:	200054e8 	.word	0x200054e8

0800a074 <_isatty_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	4d06      	ldr	r5, [pc, #24]	; (800a090 <_isatty_r+0x1c>)
 800a078:	2300      	movs	r3, #0
 800a07a:	4604      	mov	r4, r0
 800a07c:	4608      	mov	r0, r1
 800a07e:	602b      	str	r3, [r5, #0]
 800a080:	f7f7 fd5d 	bl	8001b3e <_isatty>
 800a084:	1c43      	adds	r3, r0, #1
 800a086:	d102      	bne.n	800a08e <_isatty_r+0x1a>
 800a088:	682b      	ldr	r3, [r5, #0]
 800a08a:	b103      	cbz	r3, 800a08e <_isatty_r+0x1a>
 800a08c:	6023      	str	r3, [r4, #0]
 800a08e:	bd38      	pop	{r3, r4, r5, pc}
 800a090:	200054e8 	.word	0x200054e8

0800a094 <_lseek_r>:
 800a094:	b538      	push	{r3, r4, r5, lr}
 800a096:	4d07      	ldr	r5, [pc, #28]	; (800a0b4 <_lseek_r+0x20>)
 800a098:	4604      	mov	r4, r0
 800a09a:	4608      	mov	r0, r1
 800a09c:	4611      	mov	r1, r2
 800a09e:	2200      	movs	r2, #0
 800a0a0:	602a      	str	r2, [r5, #0]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f7f7 fd56 	bl	8001b54 <_lseek>
 800a0a8:	1c43      	adds	r3, r0, #1
 800a0aa:	d102      	bne.n	800a0b2 <_lseek_r+0x1e>
 800a0ac:	682b      	ldr	r3, [r5, #0]
 800a0ae:	b103      	cbz	r3, 800a0b2 <_lseek_r+0x1e>
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	bd38      	pop	{r3, r4, r5, pc}
 800a0b4:	200054e8 	.word	0x200054e8

0800a0b8 <_read_r>:
 800a0b8:	b538      	push	{r3, r4, r5, lr}
 800a0ba:	4d07      	ldr	r5, [pc, #28]	; (800a0d8 <_read_r+0x20>)
 800a0bc:	4604      	mov	r4, r0
 800a0be:	4608      	mov	r0, r1
 800a0c0:	4611      	mov	r1, r2
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	602a      	str	r2, [r5, #0]
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	f7f7 fce4 	bl	8001a94 <_read>
 800a0cc:	1c43      	adds	r3, r0, #1
 800a0ce:	d102      	bne.n	800a0d6 <_read_r+0x1e>
 800a0d0:	682b      	ldr	r3, [r5, #0]
 800a0d2:	b103      	cbz	r3, 800a0d6 <_read_r+0x1e>
 800a0d4:	6023      	str	r3, [r4, #0]
 800a0d6:	bd38      	pop	{r3, r4, r5, pc}
 800a0d8:	200054e8 	.word	0x200054e8

0800a0dc <atan2>:
 800a0dc:	f000 b800 	b.w	800a0e0 <__ieee754_atan2>

0800a0e0 <__ieee754_atan2>:
 800a0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e4:	ec57 6b11 	vmov	r6, r7, d1
 800a0e8:	4273      	negs	r3, r6
 800a0ea:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a270 <__ieee754_atan2+0x190>
 800a0ee:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a0f2:	4333      	orrs	r3, r6
 800a0f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a0f8:	4573      	cmp	r3, lr
 800a0fa:	ec51 0b10 	vmov	r0, r1, d0
 800a0fe:	ee11 8a10 	vmov	r8, s2
 800a102:	d80a      	bhi.n	800a11a <__ieee754_atan2+0x3a>
 800a104:	4244      	negs	r4, r0
 800a106:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a10a:	4304      	orrs	r4, r0
 800a10c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a110:	4574      	cmp	r4, lr
 800a112:	ee10 9a10 	vmov	r9, s0
 800a116:	468c      	mov	ip, r1
 800a118:	d907      	bls.n	800a12a <__ieee754_atan2+0x4a>
 800a11a:	4632      	mov	r2, r6
 800a11c:	463b      	mov	r3, r7
 800a11e:	f7f6 f8b5 	bl	800028c <__adddf3>
 800a122:	ec41 0b10 	vmov	d0, r0, r1
 800a126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a12a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a12e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a132:	4334      	orrs	r4, r6
 800a134:	d103      	bne.n	800a13e <__ieee754_atan2+0x5e>
 800a136:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a13a:	f000 b89d 	b.w	800a278 <atan>
 800a13e:	17bc      	asrs	r4, r7, #30
 800a140:	f004 0402 	and.w	r4, r4, #2
 800a144:	ea53 0909 	orrs.w	r9, r3, r9
 800a148:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a14c:	d107      	bne.n	800a15e <__ieee754_atan2+0x7e>
 800a14e:	2c02      	cmp	r4, #2
 800a150:	d060      	beq.n	800a214 <__ieee754_atan2+0x134>
 800a152:	2c03      	cmp	r4, #3
 800a154:	d1e5      	bne.n	800a122 <__ieee754_atan2+0x42>
 800a156:	a142      	add	r1, pc, #264	; (adr r1, 800a260 <__ieee754_atan2+0x180>)
 800a158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a15c:	e7e1      	b.n	800a122 <__ieee754_atan2+0x42>
 800a15e:	ea52 0808 	orrs.w	r8, r2, r8
 800a162:	d106      	bne.n	800a172 <__ieee754_atan2+0x92>
 800a164:	f1bc 0f00 	cmp.w	ip, #0
 800a168:	da5f      	bge.n	800a22a <__ieee754_atan2+0x14a>
 800a16a:	a13f      	add	r1, pc, #252	; (adr r1, 800a268 <__ieee754_atan2+0x188>)
 800a16c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a170:	e7d7      	b.n	800a122 <__ieee754_atan2+0x42>
 800a172:	4572      	cmp	r2, lr
 800a174:	d10f      	bne.n	800a196 <__ieee754_atan2+0xb6>
 800a176:	4293      	cmp	r3, r2
 800a178:	f104 34ff 	add.w	r4, r4, #4294967295
 800a17c:	d107      	bne.n	800a18e <__ieee754_atan2+0xae>
 800a17e:	2c02      	cmp	r4, #2
 800a180:	d84c      	bhi.n	800a21c <__ieee754_atan2+0x13c>
 800a182:	4b35      	ldr	r3, [pc, #212]	; (800a258 <__ieee754_atan2+0x178>)
 800a184:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a188:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a18c:	e7c9      	b.n	800a122 <__ieee754_atan2+0x42>
 800a18e:	2c02      	cmp	r4, #2
 800a190:	d848      	bhi.n	800a224 <__ieee754_atan2+0x144>
 800a192:	4b32      	ldr	r3, [pc, #200]	; (800a25c <__ieee754_atan2+0x17c>)
 800a194:	e7f6      	b.n	800a184 <__ieee754_atan2+0xa4>
 800a196:	4573      	cmp	r3, lr
 800a198:	d0e4      	beq.n	800a164 <__ieee754_atan2+0x84>
 800a19a:	1a9b      	subs	r3, r3, r2
 800a19c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a1a0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a1a4:	da1e      	bge.n	800a1e4 <__ieee754_atan2+0x104>
 800a1a6:	2f00      	cmp	r7, #0
 800a1a8:	da01      	bge.n	800a1ae <__ieee754_atan2+0xce>
 800a1aa:	323c      	adds	r2, #60	; 0x3c
 800a1ac:	db1e      	blt.n	800a1ec <__ieee754_atan2+0x10c>
 800a1ae:	4632      	mov	r2, r6
 800a1b0:	463b      	mov	r3, r7
 800a1b2:	f7f6 fb4b 	bl	800084c <__aeabi_ddiv>
 800a1b6:	ec41 0b10 	vmov	d0, r0, r1
 800a1ba:	f000 f9fd 	bl	800a5b8 <fabs>
 800a1be:	f000 f85b 	bl	800a278 <atan>
 800a1c2:	ec51 0b10 	vmov	r0, r1, d0
 800a1c6:	2c01      	cmp	r4, #1
 800a1c8:	d013      	beq.n	800a1f2 <__ieee754_atan2+0x112>
 800a1ca:	2c02      	cmp	r4, #2
 800a1cc:	d015      	beq.n	800a1fa <__ieee754_atan2+0x11a>
 800a1ce:	2c00      	cmp	r4, #0
 800a1d0:	d0a7      	beq.n	800a122 <__ieee754_atan2+0x42>
 800a1d2:	a319      	add	r3, pc, #100	; (adr r3, 800a238 <__ieee754_atan2+0x158>)
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	f7f6 f856 	bl	8000288 <__aeabi_dsub>
 800a1dc:	a318      	add	r3, pc, #96	; (adr r3, 800a240 <__ieee754_atan2+0x160>)
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	e014      	b.n	800a20e <__ieee754_atan2+0x12e>
 800a1e4:	a118      	add	r1, pc, #96	; (adr r1, 800a248 <__ieee754_atan2+0x168>)
 800a1e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1ea:	e7ec      	b.n	800a1c6 <__ieee754_atan2+0xe6>
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	e7e9      	b.n	800a1c6 <__ieee754_atan2+0xe6>
 800a1f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	e793      	b.n	800a122 <__ieee754_atan2+0x42>
 800a1fa:	a30f      	add	r3, pc, #60	; (adr r3, 800a238 <__ieee754_atan2+0x158>)
 800a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a200:	f7f6 f842 	bl	8000288 <__aeabi_dsub>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	a10d      	add	r1, pc, #52	; (adr r1, 800a240 <__ieee754_atan2+0x160>)
 800a20a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a20e:	f7f6 f83b 	bl	8000288 <__aeabi_dsub>
 800a212:	e786      	b.n	800a122 <__ieee754_atan2+0x42>
 800a214:	a10a      	add	r1, pc, #40	; (adr r1, 800a240 <__ieee754_atan2+0x160>)
 800a216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a21a:	e782      	b.n	800a122 <__ieee754_atan2+0x42>
 800a21c:	a10c      	add	r1, pc, #48	; (adr r1, 800a250 <__ieee754_atan2+0x170>)
 800a21e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a222:	e77e      	b.n	800a122 <__ieee754_atan2+0x42>
 800a224:	2000      	movs	r0, #0
 800a226:	2100      	movs	r1, #0
 800a228:	e77b      	b.n	800a122 <__ieee754_atan2+0x42>
 800a22a:	a107      	add	r1, pc, #28	; (adr r1, 800a248 <__ieee754_atan2+0x168>)
 800a22c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a230:	e777      	b.n	800a122 <__ieee754_atan2+0x42>
 800a232:	bf00      	nop
 800a234:	f3af 8000 	nop.w
 800a238:	33145c07 	.word	0x33145c07
 800a23c:	3ca1a626 	.word	0x3ca1a626
 800a240:	54442d18 	.word	0x54442d18
 800a244:	400921fb 	.word	0x400921fb
 800a248:	54442d18 	.word	0x54442d18
 800a24c:	3ff921fb 	.word	0x3ff921fb
 800a250:	54442d18 	.word	0x54442d18
 800a254:	3fe921fb 	.word	0x3fe921fb
 800a258:	0800ab58 	.word	0x0800ab58
 800a25c:	0800ab70 	.word	0x0800ab70
 800a260:	54442d18 	.word	0x54442d18
 800a264:	c00921fb 	.word	0xc00921fb
 800a268:	54442d18 	.word	0x54442d18
 800a26c:	bff921fb 	.word	0xbff921fb
 800a270:	7ff00000 	.word	0x7ff00000
 800a274:	00000000 	.word	0x00000000

0800a278 <atan>:
 800a278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27c:	ec55 4b10 	vmov	r4, r5, d0
 800a280:	4bc3      	ldr	r3, [pc, #780]	; (800a590 <atan+0x318>)
 800a282:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a286:	429e      	cmp	r6, r3
 800a288:	46ab      	mov	fp, r5
 800a28a:	dd18      	ble.n	800a2be <atan+0x46>
 800a28c:	4bc1      	ldr	r3, [pc, #772]	; (800a594 <atan+0x31c>)
 800a28e:	429e      	cmp	r6, r3
 800a290:	dc01      	bgt.n	800a296 <atan+0x1e>
 800a292:	d109      	bne.n	800a2a8 <atan+0x30>
 800a294:	b144      	cbz	r4, 800a2a8 <atan+0x30>
 800a296:	4622      	mov	r2, r4
 800a298:	462b      	mov	r3, r5
 800a29a:	4620      	mov	r0, r4
 800a29c:	4629      	mov	r1, r5
 800a29e:	f7f5 fff5 	bl	800028c <__adddf3>
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	460d      	mov	r5, r1
 800a2a6:	e006      	b.n	800a2b6 <atan+0x3e>
 800a2a8:	f1bb 0f00 	cmp.w	fp, #0
 800a2ac:	f300 8131 	bgt.w	800a512 <atan+0x29a>
 800a2b0:	a59b      	add	r5, pc, #620	; (adr r5, 800a520 <atan+0x2a8>)
 800a2b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a2b6:	ec45 4b10 	vmov	d0, r4, r5
 800a2ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2be:	4bb6      	ldr	r3, [pc, #728]	; (800a598 <atan+0x320>)
 800a2c0:	429e      	cmp	r6, r3
 800a2c2:	dc14      	bgt.n	800a2ee <atan+0x76>
 800a2c4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a2c8:	429e      	cmp	r6, r3
 800a2ca:	dc0d      	bgt.n	800a2e8 <atan+0x70>
 800a2cc:	a396      	add	r3, pc, #600	; (adr r3, 800a528 <atan+0x2b0>)
 800a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d2:	ee10 0a10 	vmov	r0, s0
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	f7f5 ffd8 	bl	800028c <__adddf3>
 800a2dc:	4baf      	ldr	r3, [pc, #700]	; (800a59c <atan+0x324>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f7f6 fc1a 	bl	8000b18 <__aeabi_dcmpgt>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	d1e6      	bne.n	800a2b6 <atan+0x3e>
 800a2e8:	f04f 3aff 	mov.w	sl, #4294967295
 800a2ec:	e02b      	b.n	800a346 <atan+0xce>
 800a2ee:	f000 f963 	bl	800a5b8 <fabs>
 800a2f2:	4bab      	ldr	r3, [pc, #684]	; (800a5a0 <atan+0x328>)
 800a2f4:	429e      	cmp	r6, r3
 800a2f6:	ec55 4b10 	vmov	r4, r5, d0
 800a2fa:	f300 80bf 	bgt.w	800a47c <atan+0x204>
 800a2fe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a302:	429e      	cmp	r6, r3
 800a304:	f300 80a0 	bgt.w	800a448 <atan+0x1d0>
 800a308:	ee10 2a10 	vmov	r2, s0
 800a30c:	ee10 0a10 	vmov	r0, s0
 800a310:	462b      	mov	r3, r5
 800a312:	4629      	mov	r1, r5
 800a314:	f7f5 ffba 	bl	800028c <__adddf3>
 800a318:	4ba0      	ldr	r3, [pc, #640]	; (800a59c <atan+0x324>)
 800a31a:	2200      	movs	r2, #0
 800a31c:	f7f5 ffb4 	bl	8000288 <__aeabi_dsub>
 800a320:	2200      	movs	r2, #0
 800a322:	4606      	mov	r6, r0
 800a324:	460f      	mov	r7, r1
 800a326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a32a:	4620      	mov	r0, r4
 800a32c:	4629      	mov	r1, r5
 800a32e:	f7f5 ffad 	bl	800028c <__adddf3>
 800a332:	4602      	mov	r2, r0
 800a334:	460b      	mov	r3, r1
 800a336:	4630      	mov	r0, r6
 800a338:	4639      	mov	r1, r7
 800a33a:	f7f6 fa87 	bl	800084c <__aeabi_ddiv>
 800a33e:	f04f 0a00 	mov.w	sl, #0
 800a342:	4604      	mov	r4, r0
 800a344:	460d      	mov	r5, r1
 800a346:	4622      	mov	r2, r4
 800a348:	462b      	mov	r3, r5
 800a34a:	4620      	mov	r0, r4
 800a34c:	4629      	mov	r1, r5
 800a34e:	f7f6 f953 	bl	80005f8 <__aeabi_dmul>
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
 800a356:	4680      	mov	r8, r0
 800a358:	4689      	mov	r9, r1
 800a35a:	f7f6 f94d 	bl	80005f8 <__aeabi_dmul>
 800a35e:	a374      	add	r3, pc, #464	; (adr r3, 800a530 <atan+0x2b8>)
 800a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a364:	4606      	mov	r6, r0
 800a366:	460f      	mov	r7, r1
 800a368:	f7f6 f946 	bl	80005f8 <__aeabi_dmul>
 800a36c:	a372      	add	r3, pc, #456	; (adr r3, 800a538 <atan+0x2c0>)
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	f7f5 ff8b 	bl	800028c <__adddf3>
 800a376:	4632      	mov	r2, r6
 800a378:	463b      	mov	r3, r7
 800a37a:	f7f6 f93d 	bl	80005f8 <__aeabi_dmul>
 800a37e:	a370      	add	r3, pc, #448	; (adr r3, 800a540 <atan+0x2c8>)
 800a380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a384:	f7f5 ff82 	bl	800028c <__adddf3>
 800a388:	4632      	mov	r2, r6
 800a38a:	463b      	mov	r3, r7
 800a38c:	f7f6 f934 	bl	80005f8 <__aeabi_dmul>
 800a390:	a36d      	add	r3, pc, #436	; (adr r3, 800a548 <atan+0x2d0>)
 800a392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a396:	f7f5 ff79 	bl	800028c <__adddf3>
 800a39a:	4632      	mov	r2, r6
 800a39c:	463b      	mov	r3, r7
 800a39e:	f7f6 f92b 	bl	80005f8 <__aeabi_dmul>
 800a3a2:	a36b      	add	r3, pc, #428	; (adr r3, 800a550 <atan+0x2d8>)
 800a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a8:	f7f5 ff70 	bl	800028c <__adddf3>
 800a3ac:	4632      	mov	r2, r6
 800a3ae:	463b      	mov	r3, r7
 800a3b0:	f7f6 f922 	bl	80005f8 <__aeabi_dmul>
 800a3b4:	a368      	add	r3, pc, #416	; (adr r3, 800a558 <atan+0x2e0>)
 800a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ba:	f7f5 ff67 	bl	800028c <__adddf3>
 800a3be:	4642      	mov	r2, r8
 800a3c0:	464b      	mov	r3, r9
 800a3c2:	f7f6 f919 	bl	80005f8 <__aeabi_dmul>
 800a3c6:	a366      	add	r3, pc, #408	; (adr r3, 800a560 <atan+0x2e8>)
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	4680      	mov	r8, r0
 800a3ce:	4689      	mov	r9, r1
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	4639      	mov	r1, r7
 800a3d4:	f7f6 f910 	bl	80005f8 <__aeabi_dmul>
 800a3d8:	a363      	add	r3, pc, #396	; (adr r3, 800a568 <atan+0x2f0>)
 800a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3de:	f7f5 ff53 	bl	8000288 <__aeabi_dsub>
 800a3e2:	4632      	mov	r2, r6
 800a3e4:	463b      	mov	r3, r7
 800a3e6:	f7f6 f907 	bl	80005f8 <__aeabi_dmul>
 800a3ea:	a361      	add	r3, pc, #388	; (adr r3, 800a570 <atan+0x2f8>)
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	f7f5 ff4a 	bl	8000288 <__aeabi_dsub>
 800a3f4:	4632      	mov	r2, r6
 800a3f6:	463b      	mov	r3, r7
 800a3f8:	f7f6 f8fe 	bl	80005f8 <__aeabi_dmul>
 800a3fc:	a35e      	add	r3, pc, #376	; (adr r3, 800a578 <atan+0x300>)
 800a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a402:	f7f5 ff41 	bl	8000288 <__aeabi_dsub>
 800a406:	4632      	mov	r2, r6
 800a408:	463b      	mov	r3, r7
 800a40a:	f7f6 f8f5 	bl	80005f8 <__aeabi_dmul>
 800a40e:	a35c      	add	r3, pc, #368	; (adr r3, 800a580 <atan+0x308>)
 800a410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a414:	f7f5 ff38 	bl	8000288 <__aeabi_dsub>
 800a418:	4632      	mov	r2, r6
 800a41a:	463b      	mov	r3, r7
 800a41c:	f7f6 f8ec 	bl	80005f8 <__aeabi_dmul>
 800a420:	4602      	mov	r2, r0
 800a422:	460b      	mov	r3, r1
 800a424:	4640      	mov	r0, r8
 800a426:	4649      	mov	r1, r9
 800a428:	f7f5 ff30 	bl	800028c <__adddf3>
 800a42c:	4622      	mov	r2, r4
 800a42e:	462b      	mov	r3, r5
 800a430:	f7f6 f8e2 	bl	80005f8 <__aeabi_dmul>
 800a434:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	d14b      	bne.n	800a4d6 <atan+0x25e>
 800a43e:	4620      	mov	r0, r4
 800a440:	4629      	mov	r1, r5
 800a442:	f7f5 ff21 	bl	8000288 <__aeabi_dsub>
 800a446:	e72c      	b.n	800a2a2 <atan+0x2a>
 800a448:	ee10 0a10 	vmov	r0, s0
 800a44c:	4b53      	ldr	r3, [pc, #332]	; (800a59c <atan+0x324>)
 800a44e:	2200      	movs	r2, #0
 800a450:	4629      	mov	r1, r5
 800a452:	f7f5 ff19 	bl	8000288 <__aeabi_dsub>
 800a456:	4b51      	ldr	r3, [pc, #324]	; (800a59c <atan+0x324>)
 800a458:	4606      	mov	r6, r0
 800a45a:	460f      	mov	r7, r1
 800a45c:	2200      	movs	r2, #0
 800a45e:	4620      	mov	r0, r4
 800a460:	4629      	mov	r1, r5
 800a462:	f7f5 ff13 	bl	800028c <__adddf3>
 800a466:	4602      	mov	r2, r0
 800a468:	460b      	mov	r3, r1
 800a46a:	4630      	mov	r0, r6
 800a46c:	4639      	mov	r1, r7
 800a46e:	f7f6 f9ed 	bl	800084c <__aeabi_ddiv>
 800a472:	f04f 0a01 	mov.w	sl, #1
 800a476:	4604      	mov	r4, r0
 800a478:	460d      	mov	r5, r1
 800a47a:	e764      	b.n	800a346 <atan+0xce>
 800a47c:	4b49      	ldr	r3, [pc, #292]	; (800a5a4 <atan+0x32c>)
 800a47e:	429e      	cmp	r6, r3
 800a480:	da1d      	bge.n	800a4be <atan+0x246>
 800a482:	ee10 0a10 	vmov	r0, s0
 800a486:	4b48      	ldr	r3, [pc, #288]	; (800a5a8 <atan+0x330>)
 800a488:	2200      	movs	r2, #0
 800a48a:	4629      	mov	r1, r5
 800a48c:	f7f5 fefc 	bl	8000288 <__aeabi_dsub>
 800a490:	4b45      	ldr	r3, [pc, #276]	; (800a5a8 <atan+0x330>)
 800a492:	4606      	mov	r6, r0
 800a494:	460f      	mov	r7, r1
 800a496:	2200      	movs	r2, #0
 800a498:	4620      	mov	r0, r4
 800a49a:	4629      	mov	r1, r5
 800a49c:	f7f6 f8ac 	bl	80005f8 <__aeabi_dmul>
 800a4a0:	4b3e      	ldr	r3, [pc, #248]	; (800a59c <atan+0x324>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f7f5 fef2 	bl	800028c <__adddf3>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	4639      	mov	r1, r7
 800a4b0:	f7f6 f9cc 	bl	800084c <__aeabi_ddiv>
 800a4b4:	f04f 0a02 	mov.w	sl, #2
 800a4b8:	4604      	mov	r4, r0
 800a4ba:	460d      	mov	r5, r1
 800a4bc:	e743      	b.n	800a346 <atan+0xce>
 800a4be:	462b      	mov	r3, r5
 800a4c0:	ee10 2a10 	vmov	r2, s0
 800a4c4:	4939      	ldr	r1, [pc, #228]	; (800a5ac <atan+0x334>)
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	f7f6 f9c0 	bl	800084c <__aeabi_ddiv>
 800a4cc:	f04f 0a03 	mov.w	sl, #3
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	460d      	mov	r5, r1
 800a4d4:	e737      	b.n	800a346 <atan+0xce>
 800a4d6:	4b36      	ldr	r3, [pc, #216]	; (800a5b0 <atan+0x338>)
 800a4d8:	4e36      	ldr	r6, [pc, #216]	; (800a5b4 <atan+0x33c>)
 800a4da:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a4de:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a4e2:	e9da 2300 	ldrd	r2, r3, [sl]
 800a4e6:	f7f5 fecf 	bl	8000288 <__aeabi_dsub>
 800a4ea:	4622      	mov	r2, r4
 800a4ec:	462b      	mov	r3, r5
 800a4ee:	f7f5 fecb 	bl	8000288 <__aeabi_dsub>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a4fa:	f7f5 fec5 	bl	8000288 <__aeabi_dsub>
 800a4fe:	f1bb 0f00 	cmp.w	fp, #0
 800a502:	4604      	mov	r4, r0
 800a504:	460d      	mov	r5, r1
 800a506:	f6bf aed6 	bge.w	800a2b6 <atan+0x3e>
 800a50a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a50e:	461d      	mov	r5, r3
 800a510:	e6d1      	b.n	800a2b6 <atan+0x3e>
 800a512:	a51d      	add	r5, pc, #116	; (adr r5, 800a588 <atan+0x310>)
 800a514:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a518:	e6cd      	b.n	800a2b6 <atan+0x3e>
 800a51a:	bf00      	nop
 800a51c:	f3af 8000 	nop.w
 800a520:	54442d18 	.word	0x54442d18
 800a524:	bff921fb 	.word	0xbff921fb
 800a528:	8800759c 	.word	0x8800759c
 800a52c:	7e37e43c 	.word	0x7e37e43c
 800a530:	e322da11 	.word	0xe322da11
 800a534:	3f90ad3a 	.word	0x3f90ad3a
 800a538:	24760deb 	.word	0x24760deb
 800a53c:	3fa97b4b 	.word	0x3fa97b4b
 800a540:	a0d03d51 	.word	0xa0d03d51
 800a544:	3fb10d66 	.word	0x3fb10d66
 800a548:	c54c206e 	.word	0xc54c206e
 800a54c:	3fb745cd 	.word	0x3fb745cd
 800a550:	920083ff 	.word	0x920083ff
 800a554:	3fc24924 	.word	0x3fc24924
 800a558:	5555550d 	.word	0x5555550d
 800a55c:	3fd55555 	.word	0x3fd55555
 800a560:	2c6a6c2f 	.word	0x2c6a6c2f
 800a564:	bfa2b444 	.word	0xbfa2b444
 800a568:	52defd9a 	.word	0x52defd9a
 800a56c:	3fadde2d 	.word	0x3fadde2d
 800a570:	af749a6d 	.word	0xaf749a6d
 800a574:	3fb3b0f2 	.word	0x3fb3b0f2
 800a578:	fe231671 	.word	0xfe231671
 800a57c:	3fbc71c6 	.word	0x3fbc71c6
 800a580:	9998ebc4 	.word	0x9998ebc4
 800a584:	3fc99999 	.word	0x3fc99999
 800a588:	54442d18 	.word	0x54442d18
 800a58c:	3ff921fb 	.word	0x3ff921fb
 800a590:	440fffff 	.word	0x440fffff
 800a594:	7ff00000 	.word	0x7ff00000
 800a598:	3fdbffff 	.word	0x3fdbffff
 800a59c:	3ff00000 	.word	0x3ff00000
 800a5a0:	3ff2ffff 	.word	0x3ff2ffff
 800a5a4:	40038000 	.word	0x40038000
 800a5a8:	3ff80000 	.word	0x3ff80000
 800a5ac:	bff00000 	.word	0xbff00000
 800a5b0:	0800aba8 	.word	0x0800aba8
 800a5b4:	0800ab88 	.word	0x0800ab88

0800a5b8 <fabs>:
 800a5b8:	ec51 0b10 	vmov	r0, r1, d0
 800a5bc:	ee10 2a10 	vmov	r2, s0
 800a5c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a5c4:	ec43 2b10 	vmov	d0, r2, r3
 800a5c8:	4770      	bx	lr
	...

0800a5cc <_init>:
 800a5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ce:	bf00      	nop
 800a5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5d2:	bc08      	pop	{r3}
 800a5d4:	469e      	mov	lr, r3
 800a5d6:	4770      	bx	lr

0800a5d8 <_fini>:
 800a5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5da:	bf00      	nop
 800a5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5de:	bc08      	pop	{r3}
 800a5e0:	469e      	mov	lr, r3
 800a5e2:	4770      	bx	lr

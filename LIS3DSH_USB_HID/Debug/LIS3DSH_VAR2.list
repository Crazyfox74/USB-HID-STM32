
LIS3DSH_VAR2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  08011ea8  08011ea8  00021ea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012508  08012508  000302d0  2**0
                  CONTENTS
  4 .ARM          00000008  08012508  08012508  00022508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012510  08012510  000302d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012510  08012510  00022510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012514  08012514  00022514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  08012518  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302d0  2**0
                  CONTENTS
 10 .bss          0000793c  200002d0  200002d0  000302d0  2**3
                  ALLOC
 11 ._user_heap_stack 00006004  20007c0c  20007c0c  000302d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026190  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052d7  00000000  00000000  00056490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ec0  00000000  00000000  0005b768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001cb8  00000000  00000000  0005d628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027cad  00000000  00000000  0005f2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023e59  00000000  00000000  00086f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd6db  00000000  00000000  000aade6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001884c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000096a0  00000000  00000000  00188514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011e8c 	.word	0x08011e8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	08011e8c 	.word	0x08011e8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	ulStatsTimerTicks=0;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <configureTimerForRunTimeStats+0x14>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 8000eb6:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <configureTimerForRunTimeStats+0x18>)
 8000eb8:	f004 fd52 	bl	8005960 <HAL_TIM_Base_Start_IT>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200002ec 	.word	0x200002ec
 8000ec4:	20000408 	.word	0x20000408

08000ec8 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
	return ulStatsTimerTicks;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <getRunTimeCounterValue+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	200002ec 	.word	0x200002ec

08000ee0 <Acc_Inin>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Acc_Inin(void){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0

	uint8_t Reg_ctrl_4=0x20;
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	71fb      	strb	r3, [r7, #7]
	uint8_t acc_set=0x57;
 8000eea:	2357      	movs	r3, #87	; 0x57
 8000eec:	71bb      	strb	r3, [r7, #6]
	uint8_t Reg_ctrl_5=0x24;
 8000eee:	2324      	movs	r3, #36	; 0x24
 8000ef0:	717b      	strb	r3, [r7, #5]
	uint8_t acc_reg=0x00;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	713b      	strb	r3, [r7, #4]

	uint8_t Reg_ctrl_3=0x23;
 8000ef6:	2323      	movs	r3, #35	; 0x23
 8000ef8:	70fb      	strb	r3, [r7, #3]
	uint8_t acc_int=0x88;
 8000efa:	2388      	movs	r3, #136	; 0x88
 8000efc:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2108      	movs	r1, #8
 8000f02:	4822      	ldr	r0, [pc, #136]	; (8000f8c <Acc_Inin+0xac>)
 8000f04:	f001 ff84 	bl	8002e10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, &Reg_ctrl_4, 1);
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4820      	ldr	r0, [pc, #128]	; (8000f90 <Acc_Inin+0xb0>)
 8000f10:	f003 ffa6 	bl	8004e60 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(&hspi1, &acc_set, 1);
 8000f14:	1dbb      	adds	r3, r7, #6
 8000f16:	2201      	movs	r2, #1
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481d      	ldr	r0, [pc, #116]	; (8000f90 <Acc_Inin+0xb0>)
 8000f1c:	f003 ffa0 	bl	8004e60 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2108      	movs	r1, #8
 8000f24:	4819      	ldr	r0, [pc, #100]	; (8000f8c <Acc_Inin+0xac>)
 8000f26:	f001 ff73 	bl	8002e10 <HAL_GPIO_WritePin>



    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	4817      	ldr	r0, [pc, #92]	; (8000f8c <Acc_Inin+0xac>)
 8000f30:	f001 ff6e 	bl	8002e10 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi1, &Reg_ctrl_5, 1);
 8000f34:	1d7b      	adds	r3, r7, #5
 8000f36:	2201      	movs	r2, #1
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4815      	ldr	r0, [pc, #84]	; (8000f90 <Acc_Inin+0xb0>)
 8000f3c:	f003 ff90 	bl	8004e60 <HAL_SPI_Transmit_DMA>
    HAL_SPI_Transmit_DMA(&hspi1, &acc_reg, 1);
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2201      	movs	r2, #1
 8000f44:	4619      	mov	r1, r3
 8000f46:	4812      	ldr	r0, [pc, #72]	; (8000f90 <Acc_Inin+0xb0>)
 8000f48:	f003 ff8a 	bl	8004e60 <HAL_SPI_Transmit_DMA>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2108      	movs	r1, #8
 8000f50:	480e      	ldr	r0, [pc, #56]	; (8000f8c <Acc_Inin+0xac>)
 8000f52:	f001 ff5d 	bl	8002e10 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2108      	movs	r1, #8
 8000f5a:	480c      	ldr	r0, [pc, #48]	; (8000f8c <Acc_Inin+0xac>)
 8000f5c:	f001 ff58 	bl	8002e10 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi1, &Reg_ctrl_3, 1);
 8000f60:	1cfb      	adds	r3, r7, #3
 8000f62:	2201      	movs	r2, #1
 8000f64:	4619      	mov	r1, r3
 8000f66:	480a      	ldr	r0, [pc, #40]	; (8000f90 <Acc_Inin+0xb0>)
 8000f68:	f003 ff7a 	bl	8004e60 <HAL_SPI_Transmit_DMA>
    HAL_SPI_Transmit_DMA(&hspi1, &acc_int, 1);
 8000f6c:	1cbb      	adds	r3, r7, #2
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4619      	mov	r1, r3
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <Acc_Inin+0xb0>)
 8000f74:	f003 ff74 	bl	8004e60 <HAL_SPI_Transmit_DMA>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2108      	movs	r1, #8
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <Acc_Inin+0xac>)
 8000f7e:	f001 ff47 	bl	8002e10 <HAL_GPIO_WritePin>
//HAL_SPI_Transmit(&hspi1, &Reg_ctrl_5, 1, 100);
//HAL_SPI_Transmit(&hspi1, &acc_reg, 1, 100);
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
*/

}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	200002f0 	.word	0x200002f0

08000f94 <Filter_Kalman>:


double Filter_Kalman(double val) { //функция фильтрации
 8000f94:	b480      	push	{r7}
 8000f96:	b08b      	sub	sp, #44	; 0x2c
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	ed87 0b00 	vstr	d0, [r7]

	float varVolt = 0.3; // среднее отклонение (расчет в программе)
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <Filter_Kalman+0x50>)
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
	float varProcess = 0.2; // скорость реакции на изменение (подбирается вручную)
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <Filter_Kalman+0x54>)
 8000fa4:	623b      	str	r3, [r7, #32]
	float Pc = 0.0;
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
	float G = 0.0;
 8000fac:	f04f 0300 	mov.w	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
	float P = 1.0;
 8000fb2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000fb6:	617b      	str	r3, [r7, #20]
	float Xp = 0.0;
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
	float Zp = 0.0;
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
	float Xe = 0.0;
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
Zp = Xp;
Xe = G*(val-Zp)+Xp; // "фильтрованное" значение

return(Xe);
*/
	return(val);
 8000fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fce:	ec43 2b17 	vmov	d7, r2, r3
}
 8000fd2:	eeb0 0a47 	vmov.f32	s0, s14
 8000fd6:	eef0 0a67 	vmov.f32	s1, s15
 8000fda:	372c      	adds	r7, #44	; 0x2c
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	3e99999a 	.word	0x3e99999a
 8000fe8:	3e4ccccd 	.word	0x3e4ccccd

08000fec <LED_Proc>:

void LED_Proc(double angle_ax,double angle_ay){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	ed87 0b02 	vstr	d0, [r7, #8]
 8000ff6:	ed87 1b00 	vstr	d1, [r7]

	if(angle_ax>=10){
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	4b4e      	ldr	r3, [pc, #312]	; (8001138 <LED_Proc+0x14c>)
 8001000:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001004:	f7ff fd7e 	bl	8000b04 <__aeabi_dcmpge>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00b      	beq.n	8001026 <LED_Proc+0x3a>

		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001014:	4849      	ldr	r0, [pc, #292]	; (800113c <LED_Proc+0x150>)
 8001016:	f001 fefb 	bl	8002e10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001020:	4846      	ldr	r0, [pc, #280]	; (800113c <LED_Proc+0x150>)
 8001022:	f001 fef5 	bl	8002e10 <HAL_GPIO_WritePin>
	}
	if (angle_ax<=-10){
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	4b45      	ldr	r3, [pc, #276]	; (8001140 <LED_Proc+0x154>)
 800102c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001030:	f7ff fd5e 	bl	8000af0 <__aeabi_dcmple>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00b      	beq.n	8001052 <LED_Proc+0x66>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001040:	483e      	ldr	r0, [pc, #248]	; (800113c <LED_Proc+0x150>)
 8001042:	f001 fee5 	bl	8002e10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800104c:	483b      	ldr	r0, [pc, #236]	; (800113c <LED_Proc+0x150>)
 800104e:	f001 fedf 	bl	8002e10 <HAL_GPIO_WritePin>
	}


	if ((angle_ax>-10) && (angle_ax<10))
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <LED_Proc+0x154>)
 8001058:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800105c:	f7ff fd5c 	bl	8000b18 <__aeabi_dcmpgt>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d015      	beq.n	8001092 <LED_Proc+0xa6>
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	4b33      	ldr	r3, [pc, #204]	; (8001138 <LED_Proc+0x14c>)
 800106c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001070:	f7ff fd34 	bl	8000adc <__aeabi_dcmplt>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00b      	beq.n	8001092 <LED_Proc+0xa6>
	{
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001080:	482e      	ldr	r0, [pc, #184]	; (800113c <LED_Proc+0x150>)
 8001082:	f001 fec5 	bl	8002e10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800108c:	482b      	ldr	r0, [pc, #172]	; (800113c <LED_Proc+0x150>)
 800108e:	f001 febf 	bl	8002e10 <HAL_GPIO_WritePin>

	}

	if(angle_ay>=10){
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	4b28      	ldr	r3, [pc, #160]	; (8001138 <LED_Proc+0x14c>)
 8001098:	e9d7 0100 	ldrd	r0, r1, [r7]
 800109c:	f7ff fd32 	bl	8000b04 <__aeabi_dcmpge>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00b      	beq.n	80010be <LED_Proc+0xd2>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin,GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ac:	4823      	ldr	r0, [pc, #140]	; (800113c <LED_Proc+0x150>)
 80010ae:	f001 feaf 	bl	8002e10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin,GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b8:	4820      	ldr	r0, [pc, #128]	; (800113c <LED_Proc+0x150>)
 80010ba:	f001 fea9 	bl	8002e10 <HAL_GPIO_WritePin>
	}
	if (angle_ay<=-10){
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <LED_Proc+0x154>)
 80010c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010c8:	f7ff fd12 	bl	8000af0 <__aeabi_dcmple>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <LED_Proc+0xfe>

		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin,GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d8:	4818      	ldr	r0, [pc, #96]	; (800113c <LED_Proc+0x150>)
 80010da:	f001 fe99 	bl	8002e10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin,GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e4:	4815      	ldr	r0, [pc, #84]	; (800113c <LED_Proc+0x150>)
 80010e6:	f001 fe93 	bl	8002e10 <HAL_GPIO_WritePin>
	}


	if ((angle_ay>-10) && (angle_ay<10))
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <LED_Proc+0x154>)
 80010f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010f4:	f7ff fd10 	bl	8000b18 <__aeabi_dcmpgt>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d100      	bne.n	8001100 <LED_Proc+0x114>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin,GPIO_PIN_RESET);

	}

}
 80010fe:	e016      	b.n	800112e <LED_Proc+0x142>
	if ((angle_ay>-10) && (angle_ay<10))
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <LED_Proc+0x14c>)
 8001106:	e9d7 0100 	ldrd	r0, r1, [r7]
 800110a:	f7ff fce7 	bl	8000adc <__aeabi_dcmplt>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d100      	bne.n	8001116 <LED_Proc+0x12a>
}
 8001114:	e00b      	b.n	800112e <LED_Proc+0x142>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin,GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800111c:	4807      	ldr	r0, [pc, #28]	; (800113c <LED_Proc+0x150>)
 800111e:	f001 fe77 	bl	8002e10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin,GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <LED_Proc+0x150>)
 800112a:	f001 fe71 	bl	8002e10 <HAL_GPIO_WritePin>
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40240000 	.word	0x40240000
 800113c:	40020c00 	.word	0x40020c00
 8001140:	c0240000 	.word	0xc0240000

08001144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001148:	f001 f80e 	bl	8002168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114c:	f000 f888 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001150:	f000 f9ac 	bl	80014ac <MX_GPIO_Init>
  MX_DMA_Init();
 8001154:	f000 f982 	bl	800145c <MX_DMA_Init>
  MX_SPI1_Init();
 8001158:	f000 f8ec 	bl	8001334 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800115c:	f000 f954 	bl	8001408 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8001160:	f000 f91e 	bl	80013a0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Acc_Inin();
 8001164:	f7ff febc 	bl	8000ee0 <Acc_Inin>
  sprintf(test, "test of Accselerometr\r\n");
 8001168:	4927      	ldr	r1, [pc, #156]	; (8001208 <main+0xc4>)
 800116a:	4828      	ldr	r0, [pc, #160]	; (800120c <main+0xc8>)
 800116c:	f00d fb36 	bl	800e7dc <siprintf>
  CDC_Transmit_FS((uint8_t*)&test, strlen(test));
 8001170:	4826      	ldr	r0, [pc, #152]	; (800120c <main+0xc8>)
 8001172:	f7ff f82d 	bl	80001d0 <strlen>
 8001176:	4603      	mov	r3, r0
 8001178:	b29b      	uxth	r3, r3
 800117a:	4619      	mov	r1, r3
 800117c:	4823      	ldr	r0, [pc, #140]	; (800120c <main+0xc8>)
 800117e:	f00c f9f3 	bl	800d568 <CDC_Transmit_FS>
 // HAL_UART_Transmit(&huart2, (uint8_t*)&test, strlen(test), 100);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001182:	f008 fdd9 	bl	8009d38 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex1 */
  Mutex1Handle = osMutexNew(&Mutex1_attributes);
 8001186:	4822      	ldr	r0, [pc, #136]	; (8001210 <main+0xcc>)
 8001188:	f008 fecd 	bl	8009f26 <osMutexNew>
 800118c:	4603      	mov	r3, r0
 800118e:	4a21      	ldr	r2, [pc, #132]	; (8001214 <main+0xd0>)
 8001190:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of AccelSem */
  AccelSemHandle = osSemaphoreNew(1, 1, &AccelSem_attributes);
 8001192:	4a21      	ldr	r2, [pc, #132]	; (8001218 <main+0xd4>)
 8001194:	2101      	movs	r1, #1
 8001196:	2001      	movs	r0, #1
 8001198:	f008 ffd3 	bl	800a142 <osSemaphoreNew>
 800119c:	4603      	mov	r3, r0
 800119e:	4a1f      	ldr	r2, [pc, #124]	; (800121c <main+0xd8>)
 80011a0:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QUEUE_DATA */
  QUEUE_DATAHandle = osMessageQueueNew (2, sizeof(QUEUE_DATA), &QUEUE_DATA_attributes);
 80011a2:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <main+0xdc>)
 80011a4:	2100      	movs	r1, #0
 80011a6:	2002      	movs	r0, #2
 80011a8:	f009 f854 	bl	800a254 <osMessageQueueNew>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <main+0xe0>)
 80011b0:	6013      	str	r3, [r2, #0]

  /* creation of QUEUE_UART */
  QUEUE_UARTHandle = osMessageQueueNew (2, sizeof(QUEUE_UART), &QUEUE_UART_attributes);
 80011b2:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <main+0xe4>)
 80011b4:	2100      	movs	r1, #0
 80011b6:	2002      	movs	r0, #2
 80011b8:	f009 f84c 	bl	800a254 <osMessageQueueNew>
 80011bc:	4603      	mov	r3, r0
 80011be:	4a1b      	ldr	r2, [pc, #108]	; (800122c <main+0xe8>)
 80011c0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011c2:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <main+0xec>)
 80011c4:	2100      	movs	r1, #0
 80011c6:	481b      	ldr	r0, [pc, #108]	; (8001234 <main+0xf0>)
 80011c8:	f008 fe00 	bl	8009dcc <osThreadNew>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4a1a      	ldr	r2, [pc, #104]	; (8001238 <main+0xf4>)
 80011d0:	6013      	str	r3, [r2, #0]

  /* creation of Read_XYZ */
  Read_XYZHandle = osThreadNew(StartRead_XYZ, NULL, &Read_XYZ_attributes);
 80011d2:	4a1a      	ldr	r2, [pc, #104]	; (800123c <main+0xf8>)
 80011d4:	2100      	movs	r1, #0
 80011d6:	481a      	ldr	r0, [pc, #104]	; (8001240 <main+0xfc>)
 80011d8:	f008 fdf8 	bl	8009dcc <osThreadNew>
 80011dc:	4603      	mov	r3, r0
 80011de:	4a19      	ldr	r2, [pc, #100]	; (8001244 <main+0x100>)
 80011e0:	6013      	str	r3, [r2, #0]

  /* creation of Angle_Task */
  Angle_TaskHandle = osThreadNew(StartAngle_Task, NULL, &Angle_Task_attributes);
 80011e2:	4a19      	ldr	r2, [pc, #100]	; (8001248 <main+0x104>)
 80011e4:	2100      	movs	r1, #0
 80011e6:	4819      	ldr	r0, [pc, #100]	; (800124c <main+0x108>)
 80011e8:	f008 fdf0 	bl	8009dcc <osThreadNew>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4a18      	ldr	r2, [pc, #96]	; (8001250 <main+0x10c>)
 80011f0:	6013      	str	r3, [r2, #0]

  /* creation of Task_test */
  Task_testHandle = osThreadNew(StartTask_test, NULL, &Task_test_attributes);
 80011f2:	4a18      	ldr	r2, [pc, #96]	; (8001254 <main+0x110>)
 80011f4:	2100      	movs	r1, #0
 80011f6:	4818      	ldr	r0, [pc, #96]	; (8001258 <main+0x114>)
 80011f8:	f008 fde8 	bl	8009dcc <osThreadNew>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a17      	ldr	r2, [pc, #92]	; (800125c <main+0x118>)
 8001200:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001202:	f008 fdbd 	bl	8009d80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001206:	e7fe      	b.n	8001206 <main+0xc2>
 8001208:	08011f04 	.word	0x08011f04
 800120c:	200015e0 	.word	0x200015e0
 8001210:	08012078 	.word	0x08012078
 8001214:	200015d8 	.word	0x200015d8
 8001218:	08012088 	.word	0x08012088
 800121c:	200015dc 	.word	0x200015dc
 8001220:	08012048 	.word	0x08012048
 8001224:	200015d0 	.word	0x200015d0
 8001228:	08012060 	.word	0x08012060
 800122c:	200015d4 	.word	0x200015d4
 8001230:	08011fb8 	.word	0x08011fb8
 8001234:	080015c1 	.word	0x080015c1
 8001238:	20000494 	.word	0x20000494
 800123c:	08011fdc 	.word	0x08011fdc
 8001240:	080015d5 	.word	0x080015d5
 8001244:	20000498 	.word	0x20000498
 8001248:	08012000 	.word	0x08012000
 800124c:	08001781 	.word	0x08001781
 8001250:	20000900 	.word	0x20000900
 8001254:	08012024 	.word	0x08012024
 8001258:	08001a19 	.word	0x08001a19
 800125c:	20000d68 	.word	0x20000d68

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b094      	sub	sp, #80	; 0x50
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0320 	add.w	r3, r7, #32
 800126a:	2230      	movs	r2, #48	; 0x30
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f00c fe0e 	bl	800de90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	4b28      	ldr	r3, [pc, #160]	; (800132c <SystemClock_Config+0xcc>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	4a27      	ldr	r2, [pc, #156]	; (800132c <SystemClock_Config+0xcc>)
 800128e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001292:	6413      	str	r3, [r2, #64]	; 0x40
 8001294:	4b25      	ldr	r3, [pc, #148]	; (800132c <SystemClock_Config+0xcc>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	4b22      	ldr	r3, [pc, #136]	; (8001330 <SystemClock_Config+0xd0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a21      	ldr	r2, [pc, #132]	; (8001330 <SystemClock_Config+0xd0>)
 80012aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <SystemClock_Config+0xd0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012bc:	2301      	movs	r3, #1
 80012be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c6:	2302      	movs	r3, #2
 80012c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012d0:	2304      	movs	r3, #4
 80012d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012d4:	23a8      	movs	r3, #168	; 0xa8
 80012d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d8:	2302      	movs	r3, #2
 80012da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012dc:	2307      	movs	r3, #7
 80012de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e0:	f107 0320 	add.w	r3, r7, #32
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 f867 	bl	80043b8 <HAL_RCC_OscConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012f0:	f000 fc12 	bl	8001b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f4:	230f      	movs	r3, #15
 80012f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f8:	2302      	movs	r3, #2
 80012fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001300:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001304:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	2105      	movs	r1, #5
 8001312:	4618      	mov	r0, r3
 8001314:	f003 fac8 	bl	80048a8 <HAL_RCC_ClockConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800131e:	f000 fbfb 	bl	8001b18 <Error_Handler>
  }
}
 8001322:	bf00      	nop
 8001324:	3750      	adds	r7, #80	; 0x50
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40007000 	.word	0x40007000

08001334 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_SPI1_Init+0x64>)
 800133a:	4a18      	ldr	r2, [pc, #96]	; (800139c <MX_SPI1_Init+0x68>)
 800133c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <MX_SPI1_Init+0x64>)
 8001340:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001344:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_SPI1_Init+0x64>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_SPI1_Init+0x64>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_SPI1_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_SPI1_Init+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_SPI1_Init+0x64>)
 8001360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001364:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_SPI1_Init+0x64>)
 8001368:	2200      	movs	r2, #0
 800136a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <MX_SPI1_Init+0x64>)
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_SPI1_Init+0x64>)
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <MX_SPI1_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_SPI1_Init+0x64>)
 8001380:	220a      	movs	r2, #10
 8001382:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001384:	4804      	ldr	r0, [pc, #16]	; (8001398 <MX_SPI1_Init+0x64>)
 8001386:	f003 fce1 	bl	8004d4c <HAL_SPI_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001390:	f000 fbc2 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200002f0 	.word	0x200002f0
 800139c:	40013000 	.word	0x40013000

080013a0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a6:	463b      	mov	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_TIM7_Init+0x60>)
 80013b0:	4a14      	ldr	r2, [pc, #80]	; (8001404 <MX_TIM7_Init+0x64>)
 80013b2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <MX_TIM7_Init+0x60>)
 80013b6:	220f      	movs	r2, #15
 80013b8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_TIM7_Init+0x60>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_TIM7_Init+0x60>)
 80013c2:	2263      	movs	r2, #99	; 0x63
 80013c4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_TIM7_Init+0x60>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80013cc:	480c      	ldr	r0, [pc, #48]	; (8001400 <MX_TIM7_Init+0x60>)
 80013ce:	f004 fa77 	bl	80058c0 <HAL_TIM_Base_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80013d8:	f000 fb9e 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_TIM7_Init+0x60>)
 80013ea:	f004 fcf9 	bl	8005de0 <HAL_TIMEx_MasterConfigSynchronization>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80013f4:	f000 fb90 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000408 	.word	0x20000408
 8001404:	40001400 	.word	0x40001400

08001408 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <MX_USART2_UART_Init+0x50>)
 8001410:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001418:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800142e:	220c      	movs	r2, #12
 8001430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001440:	f004 fd5e 	bl	8005f00 <HAL_UART_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800144a:	f000 fb65 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000450 	.word	0x20000450
 8001458:	40004400 	.word	0x40004400

0800145c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <MX_DMA_Init+0x4c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <MX_DMA_Init+0x4c>)
 800146c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <MX_DMA_Init+0x4c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2105      	movs	r1, #5
 8001482:	2038      	movs	r0, #56	; 0x38
 8001484:	f000 ff8e 	bl	80023a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001488:	2038      	movs	r0, #56	; 0x38
 800148a:	f000 ffa7 	bl	80023dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2105      	movs	r1, #5
 8001492:	203b      	movs	r0, #59	; 0x3b
 8001494:	f000 ff86 	bl	80023a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001498:	203b      	movs	r0, #59	; 0x3b
 800149a:	f000 ff9f 	bl	80023dc <HAL_NVIC_EnableIRQ>

}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <MX_GPIO_Init+0x108>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a3a      	ldr	r2, [pc, #232]	; (80015b4 <MX_GPIO_Init+0x108>)
 80014cc:	f043 0310 	orr.w	r3, r3, #16
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <MX_GPIO_Init+0x108>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <MX_GPIO_Init+0x108>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a33      	ldr	r2, [pc, #204]	; (80015b4 <MX_GPIO_Init+0x108>)
 80014e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <MX_GPIO_Init+0x108>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <MX_GPIO_Init+0x108>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a2c      	ldr	r2, [pc, #176]	; (80015b4 <MX_GPIO_Init+0x108>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <MX_GPIO_Init+0x108>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <MX_GPIO_Init+0x108>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a25      	ldr	r2, [pc, #148]	; (80015b4 <MX_GPIO_Init+0x108>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <MX_GPIO_Init+0x108>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port, CS_LIS3DSH_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	2108      	movs	r1, #8
 8001536:	4820      	ldr	r0, [pc, #128]	; (80015b8 <MX_GPIO_Init+0x10c>)
 8001538:	f001 fc6a 	bl	8002e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001542:	481e      	ldr	r0, [pc, #120]	; (80015bc <MX_GPIO_Init+0x110>)
 8001544:	f001 fc64 	bl	8002e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_LIS3DSH_Pin */
  GPIO_InitStruct.Pin = CS_LIS3DSH_Pin;
 8001548:	2308      	movs	r3, #8
 800154a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_LIS3DSH_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	4816      	ldr	r0, [pc, #88]	; (80015b8 <MX_GPIO_Init+0x10c>)
 8001560:	f001 faba 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8001564:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	480f      	ldr	r0, [pc, #60]	; (80015bc <MX_GPIO_Init+0x110>)
 800157e:	f001 faab 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_Pin */
  GPIO_InitStruct.Pin = INT1_Pin;
 8001582:	2301      	movs	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001586:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT1_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	4808      	ldr	r0, [pc, #32]	; (80015b8 <MX_GPIO_Init+0x10c>)
 8001598:	f001 fa9e 	bl	8002ad8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2105      	movs	r1, #5
 80015a0:	2006      	movs	r0, #6
 80015a2:	f000 feff 	bl	80023a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015a6:	2006      	movs	r0, #6
 80015a8:	f000 ff18 	bl	80023dc <HAL_NVIC_EnableIRQ>

}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40020c00 	.word	0x40020c00

080015c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80015c8:	f00b ff10 	bl	800d3ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015cc:	2001      	movs	r0, #1
 80015ce:	f008 fc8f 	bl	8009ef0 <osDelay>
 80015d2:	e7fb      	b.n	80015cc <StartDefaultTask+0xc>

080015d4 <StartRead_XYZ>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRead_XYZ */
void StartRead_XYZ(void *argument)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRead_XYZ */
	//QUEUE_DATA XYZ;



	uint8_t X_read_L=XL_REG;
 80015dc:	2328      	movs	r3, #40	; 0x28
 80015de:	75bb      	strb	r3, [r7, #22]
	uint8_t OUT_X_H;
	uint8_t OUT_X_L;

	uint8_t Y_read_L=YL_REG;
 80015e0:	232a      	movs	r3, #42	; 0x2a
 80015e2:	74fb      	strb	r3, [r7, #19]
	uint8_t OUT_Y_H;
	uint8_t OUT_Y_L;

	uint8_t Z_read_L=ZL_REG;
 80015e4:	232c      	movs	r3, #44	; 0x2c
 80015e6:	743b      	strb	r3, [r7, #16]
	uint8_t OUT_Z_H;
	uint8_t OUT_Z_L;

	uint8_t Tmp_read=OUT_T_REG;
 80015e8:	230c      	movs	r3, #12
 80015ea:	75fb      	strb	r3, [r7, #23]
	int8_t Temp;


	uint8_t StatusReg = STATUS_REG;
 80015ec:	2327      	movs	r3, #39	; 0x27
 80015ee:	737b      	strb	r3, [r7, #13]
  {

	 // xSemaphoreTake(AccelSemHandle, portMAX_DELAY);
	//  osSemaphoreAcquire(AccelSemHandle, 50);
//	  osSemaphoreRelease(AccelSemHandle);
	  osMutexAcquire(Mutex1Handle, osWaitForever);
 80015f0:	4b5f      	ldr	r3, [pc, #380]	; (8001770 <StartRead_XYZ+0x19c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295
 80015f8:	4618      	mov	r0, r3
 80015fa:	f008 fd1a 	bl	800a032 <osMutexAcquire>


	 // taskENTER_CRITICAL();
	//		  {

	  StatusRegData=0x00;
 80015fe:	2300      	movs	r3, #0
 8001600:	733b      	strb	r3, [r7, #12]
	  while(StatusRegData!=0x08){
 8001602:	e021      	b.n	8001648 <StartRead_XYZ+0x74>

	    HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin , GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	2108      	movs	r1, #8
 8001608:	485a      	ldr	r0, [pc, #360]	; (8001774 <StartRead_XYZ+0x1a0>)
 800160a:	f001 fc01 	bl	8002e10 <HAL_GPIO_WritePin>
	    StatusReg|=0x80;
 800160e:	7b7b      	ldrb	r3, [r7, #13]
 8001610:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001614:	b2db      	uxtb	r3, r3
 8001616:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit_DMA(&hspi1, &StatusReg, 1);//(&hspi1, &X_read_L, 1, 100);
 8001618:	f107 030d 	add.w	r3, r7, #13
 800161c:	2201      	movs	r2, #1
 800161e:	4619      	mov	r1, r3
 8001620:	4855      	ldr	r0, [pc, #340]	; (8001778 <StartRead_XYZ+0x1a4>)
 8001622:	f003 fc1d 	bl	8004e60 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Receive_DMA(&hspi1, &StatusRegData, 1);//(&hspi1, &OUT_X_L, 1, 100);
 8001626:	f107 030c 	add.w	r3, r7, #12
 800162a:	2201      	movs	r2, #1
 800162c:	4619      	mov	r1, r3
 800162e:	4852      	ldr	r0, [pc, #328]	; (8001778 <StartRead_XYZ+0x1a4>)
 8001630:	f003 fccc 	bl	8004fcc <HAL_SPI_Receive_DMA>
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	2108      	movs	r1, #8
 8001638:	484e      	ldr	r0, [pc, #312]	; (8001774 <StartRead_XYZ+0x1a0>)
 800163a:	f001 fbe9 	bl	8002e10 <HAL_GPIO_WritePin>

		StatusRegData&=0x08;
 800163e:	7b3b      	ldrb	r3, [r7, #12]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	b2db      	uxtb	r3, r3
 8001646:	733b      	strb	r3, [r7, #12]
	  while(StatusRegData!=0x08){
 8001648:	7b3b      	ldrb	r3, [r7, #12]
 800164a:	2b08      	cmp	r3, #8
 800164c:	d1da      	bne.n	8001604 <StartRead_XYZ+0x30>
	  }

	    HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin , GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	2108      	movs	r1, #8
 8001652:	4848      	ldr	r0, [pc, #288]	; (8001774 <StartRead_XYZ+0x1a0>)
 8001654:	f001 fbdc 	bl	8002e10 <HAL_GPIO_WritePin>
		X_read_L=0x80|X_read_L;
 8001658:	7dbb      	ldrb	r3, [r7, #22]
 800165a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800165e:	b2db      	uxtb	r3, r3
 8001660:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit_DMA(&hspi1, &X_read_L, 1);//(&hspi1, &X_read_L, 1, 100);
 8001662:	f107 0316 	add.w	r3, r7, #22
 8001666:	2201      	movs	r2, #1
 8001668:	4619      	mov	r1, r3
 800166a:	4843      	ldr	r0, [pc, #268]	; (8001778 <StartRead_XYZ+0x1a4>)
 800166c:	f003 fbf8 	bl	8004e60 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Receive_DMA(&hspi1, &OUT_X_L, 1);//(&hspi1, &OUT_X_L, 1, 100);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2201      	movs	r2, #1
 8001676:	4619      	mov	r1, r3
 8001678:	483f      	ldr	r0, [pc, #252]	; (8001778 <StartRead_XYZ+0x1a4>)
 800167a:	f003 fca7 	bl	8004fcc <HAL_SPI_Receive_DMA>
	//	HAL_SPI_TransmitReceive_DMA(&hspi1, &X_read_L, &OUT_X_L, 1);
		//HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
		//X_read_H=0x80|X_read_H;
		//HAL_SPI_Transmit_DMA(&hspi1, &X_read_H, 1);//(&hspi1, &X_read_H, 1, 100);
		HAL_SPI_Receive_DMA(&hspi1, &OUT_X_H, 1);//(&hspi1, &OUT_X_H, 1, 100);
 800167e:	f107 0315 	add.w	r3, r7, #21
 8001682:	2201      	movs	r2, #1
 8001684:	4619      	mov	r1, r3
 8001686:	483c      	ldr	r0, [pc, #240]	; (8001778 <StartRead_XYZ+0x1a4>)
 8001688:	f003 fca0 	bl	8004fcc <HAL_SPI_Receive_DMA>
	//	HAL_SPI_TransmitReceive_DMA(&hspi1, &X_read_H, &OUT_X_H, 1);
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	2108      	movs	r1, #8
 8001690:	4838      	ldr	r0, [pc, #224]	; (8001774 <StartRead_XYZ+0x1a0>)
 8001692:	f001 fbbd 	bl	8002e10 <HAL_GPIO_WritePin>
	//	XYZ.X_16bit=((OUT_X_H<<8)|(OUT_X_L));

		accel.X_16bit=((OUT_X_H<<8)|(OUT_X_L));
 8001696:	7d7b      	ldrb	r3, [r7, #21]
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	b21a      	sxth	r2, r3
 800169c:	7d3b      	ldrb	r3, [r7, #20]
 800169e:	b21b      	sxth	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	4b35      	ldr	r3, [pc, #212]	; (800177c <StartRead_XYZ+0x1a8>)
 80016a6:	801a      	strh	r2, [r3, #0]



		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2108      	movs	r1, #8
 80016ac:	4831      	ldr	r0, [pc, #196]	; (8001774 <StartRead_XYZ+0x1a0>)
 80016ae:	f001 fbaf 	bl	8002e10 <HAL_GPIO_WritePin>
		Y_read_L=0x80|Y_read_L;
 80016b2:	7cfb      	ldrb	r3, [r7, #19]
 80016b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	74fb      	strb	r3, [r7, #19]
		HAL_SPI_Transmit_DMA(&hspi1, &Y_read_L, 1); //(&hspi1, &Y_read_L, 1, 100);
 80016bc:	f107 0313 	add.w	r3, r7, #19
 80016c0:	2201      	movs	r2, #1
 80016c2:	4619      	mov	r1, r3
 80016c4:	482c      	ldr	r0, [pc, #176]	; (8001778 <StartRead_XYZ+0x1a4>)
 80016c6:	f003 fbcb 	bl	8004e60 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Receive_DMA(&hspi1, &OUT_Y_L, 1); //(&hspi1, &OUT_Y_L, 1, 100);
 80016ca:	f107 0311 	add.w	r3, r7, #17
 80016ce:	2201      	movs	r2, #1
 80016d0:	4619      	mov	r1, r3
 80016d2:	4829      	ldr	r0, [pc, #164]	; (8001778 <StartRead_XYZ+0x1a4>)
 80016d4:	f003 fc7a 	bl	8004fcc <HAL_SPI_Receive_DMA>
	//	HAL_SPI_TransmitReceive_DMA(&hspi1, &Y_read_L, &OUT_Y_L, 1);
		//HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
		//Y_read_H=0x80|Y_read_H;
		//HAL_SPI_Transmit_DMA(&hspi1, &Y_read_H, 1); //(&hspi1, &Y_read_H, 1, 100);
		HAL_SPI_Receive_DMA(&hspi1, &OUT_Y_H, 1); //(&hspi1, &OUT_Y_H, 1, 100);
 80016d8:	f107 0312 	add.w	r3, r7, #18
 80016dc:	2201      	movs	r2, #1
 80016de:	4619      	mov	r1, r3
 80016e0:	4825      	ldr	r0, [pc, #148]	; (8001778 <StartRead_XYZ+0x1a4>)
 80016e2:	f003 fc73 	bl	8004fcc <HAL_SPI_Receive_DMA>
	//	HAL_SPI_TransmitReceive_DMA(&hspi1, &Y_read_H, &OUT_Y_H, 1);
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
 80016e6:	2201      	movs	r2, #1
 80016e8:	2108      	movs	r1, #8
 80016ea:	4822      	ldr	r0, [pc, #136]	; (8001774 <StartRead_XYZ+0x1a0>)
 80016ec:	f001 fb90 	bl	8002e10 <HAL_GPIO_WritePin>
	//	XYZ.Y_16bit=((OUT_Y_H<<8)|(OUT_Y_L));

		accel.Y_16bit=((OUT_Y_H<<8)|(OUT_Y_L));
 80016f0:	7cbb      	ldrb	r3, [r7, #18]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	7c7b      	ldrb	r3, [r7, #17]
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	4b1f      	ldr	r3, [pc, #124]	; (800177c <StartRead_XYZ+0x1a8>)
 8001700:	805a      	strh	r2, [r3, #2]

		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	2108      	movs	r1, #8
 8001706:	481b      	ldr	r0, [pc, #108]	; (8001774 <StartRead_XYZ+0x1a0>)
 8001708:	f001 fb82 	bl	8002e10 <HAL_GPIO_WritePin>
		Z_read_L=0x80|Z_read_L;
 800170c:	7c3b      	ldrb	r3, [r7, #16]
 800170e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001712:	b2db      	uxtb	r3, r3
 8001714:	743b      	strb	r3, [r7, #16]
		HAL_SPI_Transmit_DMA(&hspi1, &Z_read_L, 1); //(&hspi1, &Z_read_L, 1, 100);
 8001716:	f107 0310 	add.w	r3, r7, #16
 800171a:	2201      	movs	r2, #1
 800171c:	4619      	mov	r1, r3
 800171e:	4816      	ldr	r0, [pc, #88]	; (8001778 <StartRead_XYZ+0x1a4>)
 8001720:	f003 fb9e 	bl	8004e60 <HAL_SPI_Transmit_DMA>
		HAL_SPI_Receive_DMA(&hspi1, &OUT_Z_L, 1); //(&hspi1, &OUT_Z_L, 1, 100);
 8001724:	f107 030e 	add.w	r3, r7, #14
 8001728:	2201      	movs	r2, #1
 800172a:	4619      	mov	r1, r3
 800172c:	4812      	ldr	r0, [pc, #72]	; (8001778 <StartRead_XYZ+0x1a4>)
 800172e:	f003 fc4d 	bl	8004fcc <HAL_SPI_Receive_DMA>
	//	HAL_SPI_TransmitReceive_DMA(&hspi1, &Z_read_L, &OUT_Z_L, 1);
		//HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
		//Z_read_H=0x80|Z_read_H;
		//HAL_SPI_Transmit_DMA(&hspi1, &Z_read_H, 1); //(&hspi1, &Z_read_H, 1, 100);
		HAL_SPI_Receive_DMA(&hspi1, &OUT_Z_H, 1); //(&hspi1, &OUT_Z_H, 1, 100);
 8001732:	f107 030f 	add.w	r3, r7, #15
 8001736:	2201      	movs	r2, #1
 8001738:	4619      	mov	r1, r3
 800173a:	480f      	ldr	r0, [pc, #60]	; (8001778 <StartRead_XYZ+0x1a4>)
 800173c:	f003 fc46 	bl	8004fcc <HAL_SPI_Receive_DMA>
	//	HAL_SPI_TransmitReceive_DMA(&hspi1, &Z_read_H, &OUT_Z_H, 1);
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
 8001740:	2201      	movs	r2, #1
 8001742:	2108      	movs	r1, #8
 8001744:	480b      	ldr	r0, [pc, #44]	; (8001774 <StartRead_XYZ+0x1a0>)
 8001746:	f001 fb63 	bl	8002e10 <HAL_GPIO_WritePin>
	//	XYZ.Z_16bit=((OUT_Z_H<<8)|(OUT_Z_L));

		accel.Z_16bit=((OUT_Z_H<<8)|(OUT_Z_L));
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	b21a      	sxth	r2, r3
 8001750:	7bbb      	ldrb	r3, [r7, #14]
 8001752:	b21b      	sxth	r3, r3
 8001754:	4313      	orrs	r3, r2
 8001756:	b21a      	sxth	r2, r3
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <StartRead_XYZ+0x1a8>)
 800175a:	809a      	strh	r2, [r3, #4]


	//	osMessageQueuePut(QUEUE_DATAHandle, &XYZ, 0, 1);


		  osMutexRelease(Mutex1Handle);
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <StartRead_XYZ+0x19c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f008 fcb1 	bl	800a0c8 <osMutexRelease>

    osDelay(10);
 8001766:	200a      	movs	r0, #10
 8001768:	f008 fbc2 	bl	8009ef0 <osDelay>
	  osMutexAcquire(Mutex1Handle, osWaitForever);
 800176c:	e740      	b.n	80015f0 <StartRead_XYZ+0x1c>
 800176e:	bf00      	nop
 8001770:	200015d8 	.word	0x200015d8
 8001774:	40021000 	.word	0x40021000
 8001778:	200002f0 	.word	0x200002f0
 800177c:	20001600 	.word	0x20001600

08001780 <StartAngle_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAngle_Task */
void StartAngle_Task(void *argument)
{
 8001780:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001784:	b08c      	sub	sp, #48	; 0x30
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
	double X_1;
	double Y_1;
	double Z_1;


	double sens=SENS;
 800178a:	a39f      	add	r3, pc, #636	; (adr r3, 8001a08 <StartAngle_Task+0x288>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double TO_DEG=57.2958;
 8001794:	a39e      	add	r3, pc, #632	; (adr r3, 8001a10 <StartAngle_Task+0x290>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	e9c7 2308 	strd	r2, r3, [r7, #32]

  /* Infinite loop */
  for(;;)
  {
	  	  osMutexAcquire(Mutex1Handle, osWaitForever);
 800179e:	4b98      	ldr	r3, [pc, #608]	; (8001a00 <StartAngle_Task+0x280>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f04f 31ff 	mov.w	r1, #4294967295
 80017a6:	4618      	mov	r0, r3
 80017a8:	f008 fc43 	bl	800a032 <osMutexAcquire>



		  ///расчет коэффициентов для углов

		  accel.gx=(double)accel.X_16bit/sens;
 80017ac:	4b95      	ldr	r3, [pc, #596]	; (8001a04 <StartAngle_Task+0x284>)
 80017ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe feb6 	bl	8000524 <__aeabi_i2d>
 80017b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017bc:	f7ff f846 	bl	800084c <__aeabi_ddiv>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	498f      	ldr	r1, [pc, #572]	; (8001a04 <StartAngle_Task+0x284>)
 80017c6:	e9c1 2308 	strd	r2, r3, [r1, #32]
		  accel.gy=(double)accel.Y_16bit/sens;
 80017ca:	4b8e      	ldr	r3, [pc, #568]	; (8001a04 <StartAngle_Task+0x284>)
 80017cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fea7 	bl	8000524 <__aeabi_i2d>
 80017d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017da:	f7ff f837 	bl	800084c <__aeabi_ddiv>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4988      	ldr	r1, [pc, #544]	; (8001a04 <StartAngle_Task+0x284>)
 80017e4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		  accel.gz=(double)accel.Z_16bit/sens;
 80017e8:	4b86      	ldr	r3, [pc, #536]	; (8001a04 <StartAngle_Task+0x284>)
 80017ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fe98 	bl	8000524 <__aeabi_i2d>
 80017f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017f8:	f7ff f828 	bl	800084c <__aeabi_ddiv>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4980      	ldr	r1, [pc, #512]	; (8001a04 <StartAngle_Task+0x284>)
 8001802:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

		  ///расчет угла через арктангенс с умножением на константу для перевода из радианы в градусы



		  X_1=TO_DEG*atan(accel.gx/(sqrt(pow(accel.gy,2)+pow(accel.gz,2))));
 8001806:	4b7f      	ldr	r3, [pc, #508]	; (8001a04 <StartAngle_Task+0x284>)
 8001808:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800180c:	4b7d      	ldr	r3, [pc, #500]	; (8001a04 <StartAngle_Task+0x284>)
 800180e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001812:	ed9f 1b79 	vldr	d1, [pc, #484]	; 80019f8 <StartAngle_Task+0x278>
 8001816:	eeb0 0a47 	vmov.f32	s0, s14
 800181a:	eef0 0a67 	vmov.f32	s1, s15
 800181e:	f00f fbf5 	bl	801100c <pow>
 8001822:	ec59 8b10 	vmov	r8, r9, d0
 8001826:	4b77      	ldr	r3, [pc, #476]	; (8001a04 <StartAngle_Task+0x284>)
 8001828:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800182c:	ed9f 1b72 	vldr	d1, [pc, #456]	; 80019f8 <StartAngle_Task+0x278>
 8001830:	eeb0 0a47 	vmov.f32	s0, s14
 8001834:	eef0 0a67 	vmov.f32	s1, s15
 8001838:	f00f fbe8 	bl	801100c <pow>
 800183c:	ec53 2b10 	vmov	r2, r3, d0
 8001840:	4640      	mov	r0, r8
 8001842:	4649      	mov	r1, r9
 8001844:	f7fe fd22 	bl	800028c <__adddf3>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	ec43 2b17 	vmov	d7, r2, r3
 8001850:	eeb0 0a47 	vmov.f32	s0, s14
 8001854:	eef0 0a67 	vmov.f32	s1, s15
 8001858:	f00f fc48 	bl	80110ec <sqrt>
 800185c:	ec53 2b10 	vmov	r2, r3, d0
 8001860:	4620      	mov	r0, r4
 8001862:	4629      	mov	r1, r5
 8001864:	f7fe fff2 	bl	800084c <__aeabi_ddiv>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	ec43 2b17 	vmov	d7, r2, r3
 8001870:	eeb0 0a47 	vmov.f32	s0, s14
 8001874:	eef0 0a67 	vmov.f32	s1, s15
 8001878:	f00f fa1e 	bl	8010cb8 <atan>
 800187c:	ec53 2b10 	vmov	r2, r3, d0
 8001880:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001884:	f7fe feb8 	bl	80005f8 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		  Y_1=TO_DEG*atan(accel.gy/(sqrt(pow(accel.gx,2)+pow(accel.gz,2))));
 8001890:	4b5c      	ldr	r3, [pc, #368]	; (8001a04 <StartAngle_Task+0x284>)
 8001892:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001896:	4b5b      	ldr	r3, [pc, #364]	; (8001a04 <StartAngle_Task+0x284>)
 8001898:	ed93 7b08 	vldr	d7, [r3, #32]
 800189c:	ed9f 1b56 	vldr	d1, [pc, #344]	; 80019f8 <StartAngle_Task+0x278>
 80018a0:	eeb0 0a47 	vmov.f32	s0, s14
 80018a4:	eef0 0a67 	vmov.f32	s1, s15
 80018a8:	f00f fbb0 	bl	801100c <pow>
 80018ac:	ec59 8b10 	vmov	r8, r9, d0
 80018b0:	4b54      	ldr	r3, [pc, #336]	; (8001a04 <StartAngle_Task+0x284>)
 80018b2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80018b6:	ed9f 1b50 	vldr	d1, [pc, #320]	; 80019f8 <StartAngle_Task+0x278>
 80018ba:	eeb0 0a47 	vmov.f32	s0, s14
 80018be:	eef0 0a67 	vmov.f32	s1, s15
 80018c2:	f00f fba3 	bl	801100c <pow>
 80018c6:	ec53 2b10 	vmov	r2, r3, d0
 80018ca:	4640      	mov	r0, r8
 80018cc:	4649      	mov	r1, r9
 80018ce:	f7fe fcdd 	bl	800028c <__adddf3>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	ec43 2b17 	vmov	d7, r2, r3
 80018da:	eeb0 0a47 	vmov.f32	s0, s14
 80018de:	eef0 0a67 	vmov.f32	s1, s15
 80018e2:	f00f fc03 	bl	80110ec <sqrt>
 80018e6:	ec53 2b10 	vmov	r2, r3, d0
 80018ea:	4620      	mov	r0, r4
 80018ec:	4629      	mov	r1, r5
 80018ee:	f7fe ffad 	bl	800084c <__aeabi_ddiv>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	ec43 2b17 	vmov	d7, r2, r3
 80018fa:	eeb0 0a47 	vmov.f32	s0, s14
 80018fe:	eef0 0a67 	vmov.f32	s1, s15
 8001902:	f00f f9d9 	bl	8010cb8 <atan>
 8001906:	ec53 2b10 	vmov	r2, r3, d0
 800190a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800190e:	f7fe fe73 	bl	80005f8 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	e9c7 2304 	strd	r2, r3, [r7, #16]
		 Z_1=TO_DEG*atan(accel.gz/(sqrt(pow(accel.gx,2)+pow(accel.gy,2))));
 800191a:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <StartAngle_Task+0x284>)
 800191c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001920:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <StartAngle_Task+0x284>)
 8001922:	ed93 7b08 	vldr	d7, [r3, #32]
 8001926:	ed9f 1b34 	vldr	d1, [pc, #208]	; 80019f8 <StartAngle_Task+0x278>
 800192a:	eeb0 0a47 	vmov.f32	s0, s14
 800192e:	eef0 0a67 	vmov.f32	s1, s15
 8001932:	f00f fb6b 	bl	801100c <pow>
 8001936:	ec59 8b10 	vmov	r8, r9, d0
 800193a:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <StartAngle_Task+0x284>)
 800193c:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001940:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 80019f8 <StartAngle_Task+0x278>
 8001944:	eeb0 0a47 	vmov.f32	s0, s14
 8001948:	eef0 0a67 	vmov.f32	s1, s15
 800194c:	f00f fb5e 	bl	801100c <pow>
 8001950:	ec53 2b10 	vmov	r2, r3, d0
 8001954:	4640      	mov	r0, r8
 8001956:	4649      	mov	r1, r9
 8001958:	f7fe fc98 	bl	800028c <__adddf3>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	ec43 2b17 	vmov	d7, r2, r3
 8001964:	eeb0 0a47 	vmov.f32	s0, s14
 8001968:	eef0 0a67 	vmov.f32	s1, s15
 800196c:	f00f fbbe 	bl	80110ec <sqrt>
 8001970:	ec53 2b10 	vmov	r2, r3, d0
 8001974:	4620      	mov	r0, r4
 8001976:	4629      	mov	r1, r5
 8001978:	f7fe ff68 	bl	800084c <__aeabi_ddiv>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	ec43 2b17 	vmov	d7, r2, r3
 8001984:	eeb0 0a47 	vmov.f32	s0, s14
 8001988:	eef0 0a67 	vmov.f32	s1, s15
 800198c:	f00f f994 	bl	8010cb8 <atan>
 8001990:	ec53 2b10 	vmov	r2, r3, d0
 8001994:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001998:	f7fe fe2e 	bl	80005f8 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	e9c7 2302 	strd	r2, r3, [r7, #8]

		  accel.angle_ax=Filter_Kalman(X_1);
 80019a4:	ed97 0b06 	vldr	d0, [r7, #24]
 80019a8:	f7ff faf4 	bl	8000f94 <Filter_Kalman>
 80019ac:	eeb0 7a40 	vmov.f32	s14, s0
 80019b0:	eef0 7a60 	vmov.f32	s15, s1
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <StartAngle_Task+0x284>)
 80019b6:	ed83 7b02 	vstr	d7, [r3, #8]
		  accel.angle_ay=Filter_Kalman(Y_1);
 80019ba:	ed97 0b04 	vldr	d0, [r7, #16]
 80019be:	f7ff fae9 	bl	8000f94 <Filter_Kalman>
 80019c2:	eeb0 7a40 	vmov.f32	s14, s0
 80019c6:	eef0 7a60 	vmov.f32	s15, s1
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <StartAngle_Task+0x284>)
 80019cc:	ed83 7b04 	vstr	d7, [r3, #16]
		  accel.angle_az=Filter_Kalman(Z_1);
 80019d0:	ed97 0b02 	vldr	d0, [r7, #8]
 80019d4:	f7ff fade 	bl	8000f94 <Filter_Kalman>
 80019d8:	eeb0 7a40 	vmov.f32	s14, s0
 80019dc:	eef0 7a60 	vmov.f32	s15, s1
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <StartAngle_Task+0x284>)
 80019e2:	ed83 7b06 	vstr	d7, [r3, #24]
		  ///отправка в очередь


//	  osMessageQueuePut(QUEUE_UARTHandle, &Angle, 0, 1);

		  osMutexRelease(Mutex1Handle);
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <StartAngle_Task+0x280>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f008 fb6c 	bl	800a0c8 <osMutexRelease>


    osDelay(10);
 80019f0:	200a      	movs	r0, #10
 80019f2:	f008 fa7d 	bl	8009ef0 <osDelay>
	  	  osMutexAcquire(Mutex1Handle, osWaitForever);
 80019f6:	e6d2      	b.n	800179e <StartAngle_Task+0x1e>
 80019f8:	00000000 	.word	0x00000000
 80019fc:	40000000 	.word	0x40000000
 8001a00:	200015d8 	.word	0x200015d8
 8001a04:	20001600 	.word	0x20001600
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	40d07080 	.word	0x40d07080
 8001a10:	c63f1412 	.word	0xc63f1412
 8001a14:	404ca5dc 	.word	0x404ca5dc

08001a18 <StartTask_test>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_test */
void StartTask_test(void *argument)
{
 8001a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1a:	b0a1      	sub	sp, #132	; 0x84
 8001a1c:	af06      	add	r7, sp, #24
 8001a1e:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(Mutex1Handle, osWaitForever);
 8001a20:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <StartTask_test+0xc8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f008 fb02 	bl	800a032 <osMutexAcquire>



//	  osMessageQueueGet(QUEUE_UARTHandle, &Angle, 0, 1);

	  if(LED_flag==SET){
 8001a2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <StartTask_test+0xcc>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d010      	beq.n	8001a58 <StartTask_test+0x40>
	  LED_Proc(accel.angle_ax,accel.angle_ay);
 8001a36:	4b2c      	ldr	r3, [pc, #176]	; (8001ae8 <StartTask_test+0xd0>)
 8001a38:	ed93 7b02 	vldr	d7, [r3, #8]
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <StartTask_test+0xd0>)
 8001a3e:	ed93 6b04 	vldr	d6, [r3, #16]
 8001a42:	eeb0 1a46 	vmov.f32	s2, s12
 8001a46:	eef0 1a66 	vmov.f32	s3, s13
 8001a4a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a4e:	eef0 0a67 	vmov.f32	s1, s15
 8001a52:	f7ff facb 	bl	8000fec <LED_Proc>
 8001a56:	e017      	b.n	8001a88 <StartTask_test+0x70>
	  }
	  else{
		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin,GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a5e:	4823      	ldr	r0, [pc, #140]	; (8001aec <StartTask_test+0xd4>)
 8001a60:	f001 f9d6 	bl	8002e10 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a6a:	4820      	ldr	r0, [pc, #128]	; (8001aec <StartTask_test+0xd4>)
 8001a6c:	f001 f9d0 	bl	8002e10 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin,GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a76:	481d      	ldr	r0, [pc, #116]	; (8001aec <StartTask_test+0xd4>)
 8001a78:	f001 f9ca 	bl	8002e10 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,GPIO_PIN_RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a82:	481a      	ldr	r0, [pc, #104]	; (8001aec <StartTask_test+0xd4>)
 8001a84:	f001 f9c4 	bl	8002e10 <HAL_GPIO_WritePin>



	  ///вывод углов

	  snprintf(dataUART,sizeof(dataUART),"%.2f %.2f %.2f\r\n", accel.angle_ax, accel.angle_ay, accel.angle_az);
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <StartTask_test+0xd0>)
 8001a8a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a8e:	4916      	ldr	r1, [pc, #88]	; (8001ae8 <StartTask_test+0xd0>)
 8001a90:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001a94:	4c14      	ldr	r4, [pc, #80]	; (8001ae8 <StartTask_test+0xd0>)
 8001a96:	e9d4 4506 	ldrd	r4, r5, [r4, #24]
 8001a9a:	f107 0608 	add.w	r6, r7, #8
 8001a9e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001aa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001aa6:	e9cd 2300 	strd	r2, r3, [sp]
 8001aaa:	4a11      	ldr	r2, [pc, #68]	; (8001af0 <StartTask_test+0xd8>)
 8001aac:	215e      	movs	r1, #94	; 0x5e
 8001aae:	4630      	mov	r0, r6
 8001ab0:	f00c fe60 	bl	800e774 <sniprintf>
	//  snprintf(dataUART,sizeof(dataUART),"%.2f %.2f %.2f\r\n", Angle.angle_ax, Angle.angle_ay, Angle.angle_az);
	//  snprintf(dataUART,sizeof(dataUART),"1X_ax=%.2f 2Y_ay=%.2f 3Z_az=%.2f\r\n", Angle.angle_ax, Angle.angle_ay, Angle.angle_az);
	  CDC_Transmit_FS((uint8_t*)&dataUART, strlen(dataUART));
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fb89 	bl	80001d0 <strlen>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	f107 0308 	add.w	r3, r7, #8
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f00b fd4d 	bl	800d568 <CDC_Transmit_FS>
	//  HAL_UART_Transmit(&huart2, (uint8_t*)&dataUART, strlen(dataUART), osWaitForever);

	  osMutexRelease(Mutex1Handle);
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <StartTask_test+0xc8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f008 faf8 	bl	800a0c8 <osMutexRelease>

    osDelay(10);
 8001ad8:	200a      	movs	r0, #10
 8001ada:	f008 fa09 	bl	8009ef0 <osDelay>
	  osMutexAcquire(Mutex1Handle, osWaitForever);
 8001ade:	e79f      	b.n	8001a20 <StartTask_test+0x8>
 8001ae0:	200015d8 	.word	0x200015d8
 8001ae4:	200015fe 	.word	0x200015fe
 8001ae8:	20001600 	.word	0x20001600
 8001aec:	40020c00 	.word	0x40020c00
 8001af0:	08011f1c 	.word	0x08011f1c

08001af4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d101      	bne.n	8001b0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b06:	f000 fb51 	bl	80021ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40001000 	.word	0x40001000

08001b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b1c:	b672      	cpsid	i
}
 8001b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <Error_Handler+0x8>
	...

08001b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_MspInit+0x54>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	4a11      	ldr	r2, [pc, #68]	; (8001b78 <HAL_MspInit+0x54>)
 8001b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b38:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <HAL_MspInit+0x54>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_MspInit+0x54>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <HAL_MspInit+0x54>)
 8001b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b54:	6413      	str	r3, [r2, #64]	; 0x40
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <HAL_MspInit+0x54>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	210f      	movs	r1, #15
 8001b66:	f06f 0001 	mvn.w	r0, #1
 8001b6a:	f000 fc1b 	bl	80023a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800

08001b7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a47      	ldr	r2, [pc, #284]	; (8001cb8 <HAL_SPI_MspInit+0x13c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	f040 8088 	bne.w	8001cb0 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	4b45      	ldr	r3, [pc, #276]	; (8001cbc <HAL_SPI_MspInit+0x140>)
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba8:	4a44      	ldr	r2, [pc, #272]	; (8001cbc <HAL_SPI_MspInit+0x140>)
 8001baa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bae:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb0:	4b42      	ldr	r3, [pc, #264]	; (8001cbc <HAL_SPI_MspInit+0x140>)
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	4b3e      	ldr	r3, [pc, #248]	; (8001cbc <HAL_SPI_MspInit+0x140>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	4a3d      	ldr	r2, [pc, #244]	; (8001cbc <HAL_SPI_MspInit+0x140>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6313      	str	r3, [r2, #48]	; 0x30
 8001bcc:	4b3b      	ldr	r3, [pc, #236]	; (8001cbc <HAL_SPI_MspInit+0x140>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bd8:	23e0      	movs	r3, #224	; 0xe0
 8001bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001be8:	2305      	movs	r3, #5
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4833      	ldr	r0, [pc, #204]	; (8001cc0 <HAL_SPI_MspInit+0x144>)
 8001bf4:	f000 ff70 	bl	8002ad8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001bf8:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <HAL_SPI_MspInit+0x148>)
 8001bfa:	4a33      	ldr	r2, [pc, #204]	; (8001cc8 <HAL_SPI_MspInit+0x14c>)
 8001bfc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001bfe:	4b31      	ldr	r3, [pc, #196]	; (8001cc4 <HAL_SPI_MspInit+0x148>)
 8001c00:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001c04:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c06:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <HAL_SPI_MspInit+0x148>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <HAL_SPI_MspInit+0x148>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c12:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <HAL_SPI_MspInit+0x148>)
 8001c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c18:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <HAL_SPI_MspInit+0x148>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c20:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <HAL_SPI_MspInit+0x148>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001c26:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <HAL_SPI_MspInit+0x148>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <HAL_SPI_MspInit+0x148>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c32:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <HAL_SPI_MspInit+0x148>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001c38:	4822      	ldr	r0, [pc, #136]	; (8001cc4 <HAL_SPI_MspInit+0x148>)
 8001c3a:	f000 fbdd 	bl	80023f8 <HAL_DMA_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001c44:	f7ff ff68 	bl	8001b18 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <HAL_SPI_MspInit+0x148>)
 8001c4c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c4e:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <HAL_SPI_MspInit+0x148>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_SPI_MspInit+0x150>)
 8001c56:	4a1e      	ldr	r2, [pc, #120]	; (8001cd0 <HAL_SPI_MspInit+0x154>)
 8001c58:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <HAL_SPI_MspInit+0x150>)
 8001c5c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001c60:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <HAL_SPI_MspInit+0x150>)
 8001c64:	2240      	movs	r2, #64	; 0x40
 8001c66:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c68:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_SPI_MspInit+0x150>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_SPI_MspInit+0x150>)
 8001c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c74:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_SPI_MspInit+0x150>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_SPI_MspInit+0x150>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_SPI_MspInit+0x150>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c88:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_SPI_MspInit+0x150>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_SPI_MspInit+0x150>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001c94:	480d      	ldr	r0, [pc, #52]	; (8001ccc <HAL_SPI_MspInit+0x150>)
 8001c96:	f000 fbaf 	bl	80023f8 <HAL_DMA_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001ca0:	f7ff ff3a 	bl	8001b18 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <HAL_SPI_MspInit+0x150>)
 8001ca8:	649a      	str	r2, [r3, #72]	; 0x48
 8001caa:	4a08      	ldr	r2, [pc, #32]	; (8001ccc <HAL_SPI_MspInit+0x150>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cb0:	bf00      	nop
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40013000 	.word	0x40013000
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	20000348 	.word	0x20000348
 8001cc8:	40026410 	.word	0x40026410
 8001ccc:	200003a8 	.word	0x200003a8
 8001cd0:	40026458 	.word	0x40026458

08001cd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <HAL_TIM_Base_MspInit+0x48>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d115      	bne.n	8001d12 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <HAL_TIM_Base_MspInit+0x4c>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	4a0c      	ldr	r2, [pc, #48]	; (8001d20 <HAL_TIM_Base_MspInit+0x4c>)
 8001cf0:	f043 0320 	orr.w	r3, r3, #32
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_TIM_Base_MspInit+0x4c>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2105      	movs	r1, #5
 8001d06:	2037      	movs	r0, #55	; 0x37
 8001d08:	f000 fb4c 	bl	80023a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d0c:	2037      	movs	r0, #55	; 0x37
 8001d0e:	f000 fb65 	bl	80023dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40001400 	.word	0x40001400
 8001d20:	40023800 	.word	0x40023800

08001d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a19      	ldr	r2, [pc, #100]	; (8001da8 <HAL_UART_MspInit+0x84>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d12b      	bne.n	8001d9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <HAL_UART_MspInit+0x88>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a17      	ldr	r2, [pc, #92]	; (8001dac <HAL_UART_MspInit+0x88>)
 8001d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_UART_MspInit+0x88>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <HAL_UART_MspInit+0x88>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a10      	ldr	r2, [pc, #64]	; (8001dac <HAL_UART_MspInit+0x88>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_UART_MspInit+0x88>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d7e:	230c      	movs	r3, #12
 8001d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d8e:	2307      	movs	r3, #7
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <HAL_UART_MspInit+0x8c>)
 8001d9a:	f000 fe9d 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d9e:	bf00      	nop
 8001da0:	3728      	adds	r7, #40	; 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40004400 	.word	0x40004400
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40020000 	.word	0x40020000

08001db4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08e      	sub	sp, #56	; 0x38
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <HAL_InitTick+0xe4>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	4a32      	ldr	r2, [pc, #200]	; (8001e98 <HAL_InitTick+0xe4>)
 8001dce:	f043 0310 	orr.w	r3, r3, #16
 8001dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd4:	4b30      	ldr	r3, [pc, #192]	; (8001e98 <HAL_InitTick+0xe4>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001de0:	f107 0210 	add.w	r2, r7, #16
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4611      	mov	r1, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f002 ff7c 	bl	8004ce8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d103      	bne.n	8001e02 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001dfa:	f002 ff4d 	bl	8004c98 <HAL_RCC_GetPCLK1Freq>
 8001dfe:	6378      	str	r0, [r7, #52]	; 0x34
 8001e00:	e004      	b.n	8001e0c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e02:	f002 ff49 	bl	8004c98 <HAL_RCC_GetPCLK1Freq>
 8001e06:	4603      	mov	r3, r0
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0e:	4a23      	ldr	r2, [pc, #140]	; (8001e9c <HAL_InitTick+0xe8>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	0c9b      	lsrs	r3, r3, #18
 8001e16:	3b01      	subs	r3, #1
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e1a:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <HAL_InitTick+0xec>)
 8001e1c:	4a21      	ldr	r2, [pc, #132]	; (8001ea4 <HAL_InitTick+0xf0>)
 8001e1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e20:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <HAL_InitTick+0xec>)
 8001e22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e26:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e28:	4a1d      	ldr	r2, [pc, #116]	; (8001ea0 <HAL_InitTick+0xec>)
 8001e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <HAL_InitTick+0xec>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <HAL_InitTick+0xec>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e3a:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <HAL_InitTick+0xec>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001e40:	4817      	ldr	r0, [pc, #92]	; (8001ea0 <HAL_InitTick+0xec>)
 8001e42:	f003 fd3d 	bl	80058c0 <HAL_TIM_Base_Init>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001e4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d11b      	bne.n	8001e8c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001e54:	4812      	ldr	r0, [pc, #72]	; (8001ea0 <HAL_InitTick+0xec>)
 8001e56:	f003 fd83 	bl	8005960 <HAL_TIM_Base_Start_IT>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001e60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d111      	bne.n	8001e8c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e68:	2036      	movs	r0, #54	; 0x36
 8001e6a:	f000 fab7 	bl	80023dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b0f      	cmp	r3, #15
 8001e72:	d808      	bhi.n	8001e86 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001e74:	2200      	movs	r2, #0
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	2036      	movs	r0, #54	; 0x36
 8001e7a:	f000 fa93 	bl	80023a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <HAL_InitTick+0xf4>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	e002      	b.n	8001e8c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3738      	adds	r7, #56	; 0x38
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	431bde83 	.word	0x431bde83
 8001ea0:	20001638 	.word	0x20001638
 8001ea4:	40001000 	.word	0x40001000
 8001ea8:	20000004 	.word	0x20000004

08001eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <NMI_Handler+0x4>

08001eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb6:	e7fe      	b.n	8001eb6 <HardFault_Handler+0x4>

08001eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <MemManage_Handler+0x4>

08001ebe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <BusFault_Handler+0x4>

08001ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <UsageFault_Handler+0x4>

08001eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0

	*/

	//LED_flag=~LED_flag;
	//HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001edc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ee0:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <EXTI0_IRQHandler+0x18>)
 8001ee2:	f000 ffae 	bl	8002e42 <HAL_GPIO_TogglePin>
	//  osSemaphoreRelease(AccelSemHandle);

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_Pin);
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f000 ffc6 	bl	8002e78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

 // osSemaphoreAcquire(AccelSemHandle, 50);
  //xSemaphoreGiveFromISR(AccelSemHandle,100);
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40020c00 	.word	0x40020c00

08001ef4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <TIM6_DAC_IRQHandler+0x10>)
 8001efa:	f003 fda1 	bl	8005a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20001638 	.word	0x20001638

08001f08 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	ulStatsTimerTicks++;
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <TIM7_IRQHandler+0x18>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	3301      	adds	r3, #1
 8001f12:	4a03      	ldr	r2, [pc, #12]	; (8001f20 <TIM7_IRQHandler+0x18>)
 8001f14:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f16:	4803      	ldr	r0, [pc, #12]	; (8001f24 <TIM7_IRQHandler+0x1c>)
 8001f18:	f003 fd92 	bl	8005a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200002ec 	.word	0x200002ec
 8001f24:	20000408 	.word	0x20000408

08001f28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <DMA2_Stream0_IRQHandler+0x10>)
 8001f2e:	f000 fb69 	bl	8002604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000348 	.word	0x20000348

08001f3c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <DMA2_Stream3_IRQHandler+0x10>)
 8001f42:	f000 fb5f 	bl	8002604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200003a8 	.word	0x200003a8

08001f50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <OTG_FS_IRQHandler+0x10>)
 8001f56:	f001 f902 	bl	800315e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200074d0 	.word	0x200074d0

08001f64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
	return 1;
 8001f68:	2301      	movs	r3, #1
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <_kill>:

int _kill(int pid, int sig)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f7e:	f00b ff4f 	bl	800de20 <__errno>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2216      	movs	r2, #22
 8001f86:	601a      	str	r2, [r3, #0]
	return -1;
 8001f88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <_exit>:

void _exit (int status)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ffe7 	bl	8001f74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fa6:	e7fe      	b.n	8001fa6 <_exit+0x12>

08001fa8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	e00a      	b.n	8001fd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fba:	f3af 8000 	nop.w
 8001fbe:	4601      	mov	r1, r0
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	60ba      	str	r2, [r7, #8]
 8001fc6:	b2ca      	uxtb	r2, r1
 8001fc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	dbf0      	blt.n	8001fba <_read+0x12>
	}

return len;
 8001fd8:	687b      	ldr	r3, [r7, #4]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	e009      	b.n	8002008 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	60ba      	str	r2, [r7, #8]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	dbf1      	blt.n	8001ff4 <_write+0x12>
	}
	return len;
 8002010:	687b      	ldr	r3, [r7, #4]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <_close>:

int _close(int file)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
	return -1;
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002042:	605a      	str	r2, [r3, #4]
	return 0;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <_isatty>:

int _isatty(int file)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
	return 1;
 800205a:	2301      	movs	r3, #1
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
	return 0;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800208c:	4a14      	ldr	r2, [pc, #80]	; (80020e0 <_sbrk+0x5c>)
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <_sbrk+0x60>)
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <_sbrk+0x64>)
 80020a2:	4a12      	ldr	r2, [pc, #72]	; (80020ec <_sbrk+0x68>)
 80020a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <_sbrk+0x64>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d207      	bcs.n	80020c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b4:	f00b feb4 	bl	800de20 <__errno>
 80020b8:	4603      	mov	r3, r0
 80020ba:	220c      	movs	r2, #12
 80020bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
 80020c2:	e009      	b.n	80020d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <_sbrk+0x64>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ca:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <_sbrk+0x64>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <_sbrk+0x64>)
 80020d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020d6:	68fb      	ldr	r3, [r7, #12]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20020000 	.word	0x20020000
 80020e4:	00004000 	.word	0x00004000
 80020e8:	20001680 	.word	0x20001680
 80020ec:	20007c10 	.word	0x20007c10

080020f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <SystemInit+0x20>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fa:	4a05      	ldr	r2, [pc, #20]	; (8002110 <SystemInit+0x20>)
 80020fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800214c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002118:	480d      	ldr	r0, [pc, #52]	; (8002150 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800211a:	490e      	ldr	r1, [pc, #56]	; (8002154 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800211c:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002120:	e002      	b.n	8002128 <LoopCopyDataInit>

08002122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002126:	3304      	adds	r3, #4

08002128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800212c:	d3f9      	bcc.n	8002122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800212e:	4a0b      	ldr	r2, [pc, #44]	; (800215c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002130:	4c0b      	ldr	r4, [pc, #44]	; (8002160 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002134:	e001      	b.n	800213a <LoopFillZerobss>

08002136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002138:	3204      	adds	r2, #4

0800213a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800213a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800213c:	d3fb      	bcc.n	8002136 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800213e:	f7ff ffd7 	bl	80020f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002142:	f00b fe73 	bl	800de2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002146:	f7fe fffd 	bl	8001144 <main>
  bx  lr    
 800214a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800214c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002154:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8002158:	08012518 	.word	0x08012518
  ldr r2, =_sbss
 800215c:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8002160:	20007c0c 	.word	0x20007c0c

08002164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002164:	e7fe      	b.n	8002164 <ADC_IRQHandler>
	...

08002168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_Init+0x40>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <HAL_Init+0x40>)
 8002172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002176:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_Init+0x40>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <HAL_Init+0x40>)
 800217e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002182:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_Init+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a07      	ldr	r2, [pc, #28]	; (80021a8 <HAL_Init+0x40>)
 800218a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002190:	2003      	movs	r0, #3
 8002192:	f000 f8fc 	bl	800238e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002196:	200f      	movs	r0, #15
 8002198:	f7ff fe0c 	bl	8001db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800219c:	f7ff fcc2 	bl	8001b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023c00 	.word	0x40023c00

080021ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_IncTick+0x20>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_IncTick+0x24>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <HAL_IncTick+0x24>)
 80021be:	6013      	str	r3, [r2, #0]
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	20000008 	.word	0x20000008
 80021d0:	20001684 	.word	0x20001684

080021d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return uwTick;
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <HAL_GetTick+0x14>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20001684 	.word	0x20001684

080021ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f4:	f7ff ffee 	bl	80021d4 <HAL_GetTick>
 80021f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d005      	beq.n	8002212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <HAL_Delay+0x44>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4413      	add	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002212:	bf00      	nop
 8002214:	f7ff ffde 	bl	80021d4 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	429a      	cmp	r2, r3
 8002222:	d8f7      	bhi.n	8002214 <HAL_Delay+0x28>
  {
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000008 	.word	0x20000008

08002234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <__NVIC_SetPriorityGrouping+0x44>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002250:	4013      	ands	r3, r2
 8002252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800225c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002266:	4a04      	ldr	r2, [pc, #16]	; (8002278 <__NVIC_SetPriorityGrouping+0x44>)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	60d3      	str	r3, [r2, #12]
}
 800226c:	bf00      	nop
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <__NVIC_GetPriorityGrouping+0x18>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	f003 0307 	and.w	r3, r3, #7
}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	db0b      	blt.n	80022c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	f003 021f 	and.w	r2, r3, #31
 80022b0:	4907      	ldr	r1, [pc, #28]	; (80022d0 <__NVIC_EnableIRQ+0x38>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	2001      	movs	r0, #1
 80022ba:	fa00 f202 	lsl.w	r2, r0, r2
 80022be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	e000e100 	.word	0xe000e100

080022d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	6039      	str	r1, [r7, #0]
 80022de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	db0a      	blt.n	80022fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	490c      	ldr	r1, [pc, #48]	; (8002320 <__NVIC_SetPriority+0x4c>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	0112      	lsls	r2, r2, #4
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	440b      	add	r3, r1
 80022f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022fc:	e00a      	b.n	8002314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4908      	ldr	r1, [pc, #32]	; (8002324 <__NVIC_SetPriority+0x50>)
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	3b04      	subs	r3, #4
 800230c:	0112      	lsls	r2, r2, #4
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	440b      	add	r3, r1
 8002312:	761a      	strb	r2, [r3, #24]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000e100 	.word	0xe000e100
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002328:	b480      	push	{r7}
 800232a:	b089      	sub	sp, #36	; 0x24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f1c3 0307 	rsb	r3, r3, #7
 8002342:	2b04      	cmp	r3, #4
 8002344:	bf28      	it	cs
 8002346:	2304      	movcs	r3, #4
 8002348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3304      	adds	r3, #4
 800234e:	2b06      	cmp	r3, #6
 8002350:	d902      	bls.n	8002358 <NVIC_EncodePriority+0x30>
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3b03      	subs	r3, #3
 8002356:	e000      	b.n	800235a <NVIC_EncodePriority+0x32>
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	f04f 32ff 	mov.w	r2, #4294967295
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43da      	mvns	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	401a      	ands	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002370:	f04f 31ff 	mov.w	r1, #4294967295
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	43d9      	mvns	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002380:	4313      	orrs	r3, r2
         );
}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ff4c 	bl	8002234 <__NVIC_SetPriorityGrouping>
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b6:	f7ff ff61 	bl	800227c <__NVIC_GetPriorityGrouping>
 80023ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68b9      	ldr	r1, [r7, #8]
 80023c0:	6978      	ldr	r0, [r7, #20]
 80023c2:	f7ff ffb1 	bl	8002328 <NVIC_EncodePriority>
 80023c6:	4602      	mov	r2, r0
 80023c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023cc:	4611      	mov	r1, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff80 	bl	80022d4 <__NVIC_SetPriority>
}
 80023d4:	bf00      	nop
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ff54 	bl	8002298 <__NVIC_EnableIRQ>
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002404:	f7ff fee6 	bl	80021d4 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e099      	b.n	8002548 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002434:	e00f      	b.n	8002456 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002436:	f7ff fecd 	bl	80021d4 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b05      	cmp	r3, #5
 8002442:	d908      	bls.n	8002456 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2220      	movs	r2, #32
 8002448:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2203      	movs	r2, #3
 800244e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e078      	b.n	8002548 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1e8      	bne.n	8002436 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	4b38      	ldr	r3, [pc, #224]	; (8002550 <HAL_DMA_Init+0x158>)
 8002470:	4013      	ands	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002482:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d107      	bne.n	80024c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	4313      	orrs	r3, r2
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f023 0307 	bic.w	r3, r3, #7
 80024d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d117      	bne.n	800251a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00e      	beq.n	800251a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fa6f 	bl	80029e0 <DMA_CheckFifoParam>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2240      	movs	r2, #64	; 0x40
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002516:	2301      	movs	r3, #1
 8002518:	e016      	b.n	8002548 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fa26 	bl	8002974 <DMA_CalcBaseAndBitshift>
 8002528:	4603      	mov	r3, r0
 800252a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002530:	223f      	movs	r2, #63	; 0x3f
 8002532:	409a      	lsls	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	f010803f 	.word	0xf010803f

08002554 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_DMA_Start_IT+0x26>
 8002576:	2302      	movs	r3, #2
 8002578:	e040      	b.n	80025fc <HAL_DMA_Start_IT+0xa8>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d12f      	bne.n	80025ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2202      	movs	r2, #2
 8002592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f9b8 	bl	8002918 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ac:	223f      	movs	r2, #63	; 0x3f
 80025ae:	409a      	lsls	r2, r3
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0216 	orr.w	r2, r2, #22
 80025c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0208 	orr.w	r2, r2, #8
 80025da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	e005      	b.n	80025fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025f6:	2302      	movs	r3, #2
 80025f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002610:	4b8e      	ldr	r3, [pc, #568]	; (800284c <HAL_DMA_IRQHandler+0x248>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a8e      	ldr	r2, [pc, #568]	; (8002850 <HAL_DMA_IRQHandler+0x24c>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	0a9b      	lsrs	r3, r3, #10
 800261c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262e:	2208      	movs	r2, #8
 8002630:	409a      	lsls	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d01a      	beq.n	8002670 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d013      	beq.n	8002670 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0204 	bic.w	r2, r2, #4
 8002656:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	2208      	movs	r2, #8
 800265e:	409a      	lsls	r2, r3
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002674:	2201      	movs	r2, #1
 8002676:	409a      	lsls	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d012      	beq.n	80026a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00b      	beq.n	80026a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002692:	2201      	movs	r2, #1
 8002694:	409a      	lsls	r2, r3
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	f043 0202 	orr.w	r2, r3, #2
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026aa:	2204      	movs	r2, #4
 80026ac:	409a      	lsls	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d012      	beq.n	80026dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00b      	beq.n	80026dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c8:	2204      	movs	r2, #4
 80026ca:	409a      	lsls	r2, r3
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	f043 0204 	orr.w	r2, r3, #4
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e0:	2210      	movs	r2, #16
 80026e2:	409a      	lsls	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d043      	beq.n	8002774 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d03c      	beq.n	8002774 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	2210      	movs	r2, #16
 8002700:	409a      	lsls	r2, r3
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d018      	beq.n	8002746 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d108      	bne.n	8002734 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d024      	beq.n	8002774 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	4798      	blx	r3
 8002732:	e01f      	b.n	8002774 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01b      	beq.n	8002774 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	4798      	blx	r3
 8002744:	e016      	b.n	8002774 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d107      	bne.n	8002764 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0208 	bic.w	r2, r2, #8
 8002762:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	2220      	movs	r2, #32
 800277a:	409a      	lsls	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 808f 	beq.w	80028a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 8087 	beq.w	80028a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279a:	2220      	movs	r2, #32
 800279c:	409a      	lsls	r2, r3
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b05      	cmp	r3, #5
 80027ac:	d136      	bne.n	800281c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0216 	bic.w	r2, r2, #22
 80027bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d103      	bne.n	80027de <HAL_DMA_IRQHandler+0x1da>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d007      	beq.n	80027ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0208 	bic.w	r2, r2, #8
 80027ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f2:	223f      	movs	r2, #63	; 0x3f
 80027f4:	409a      	lsls	r2, r3
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280e:	2b00      	cmp	r3, #0
 8002810:	d07e      	beq.n	8002910 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
        }
        return;
 800281a:	e079      	b.n	8002910 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d01d      	beq.n	8002866 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10d      	bne.n	8002854 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	2b00      	cmp	r3, #0
 800283e:	d031      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	4798      	blx	r3
 8002848:	e02c      	b.n	80028a4 <HAL_DMA_IRQHandler+0x2a0>
 800284a:	bf00      	nop
 800284c:	20000000 	.word	0x20000000
 8002850:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d023      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
 8002864:	e01e      	b.n	80028a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10f      	bne.n	8002894 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0210 	bic.w	r2, r2, #16
 8002882:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d032      	beq.n	8002912 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d022      	beq.n	80028fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2205      	movs	r2, #5
 80028bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	3301      	adds	r3, #1
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d307      	bcc.n	80028ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f2      	bne.n	80028d0 <HAL_DMA_IRQHandler+0x2cc>
 80028ea:	e000      	b.n	80028ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
 800290e:	e000      	b.n	8002912 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002910:	bf00      	nop
    }
  }
}
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002934:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b40      	cmp	r3, #64	; 0x40
 8002944:	d108      	bne.n	8002958 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002956:	e007      	b.n	8002968 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	60da      	str	r2, [r3, #12]
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	3b10      	subs	r3, #16
 8002984:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <DMA_CalcBaseAndBitshift+0x64>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	091b      	lsrs	r3, r3, #4
 800298c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800298e:	4a13      	ldr	r2, [pc, #76]	; (80029dc <DMA_CalcBaseAndBitshift+0x68>)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4413      	add	r3, r2
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d909      	bls.n	80029b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029aa:	f023 0303 	bic.w	r3, r3, #3
 80029ae:	1d1a      	adds	r2, r3, #4
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	659a      	str	r2, [r3, #88]	; 0x58
 80029b4:	e007      	b.n	80029c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029be:	f023 0303 	bic.w	r3, r3, #3
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	aaaaaaab 	.word	0xaaaaaaab
 80029dc:	080120b0 	.word	0x080120b0

080029e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d11f      	bne.n	8002a3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d856      	bhi.n	8002aae <DMA_CheckFifoParam+0xce>
 8002a00:	a201      	add	r2, pc, #4	; (adr r2, 8002a08 <DMA_CheckFifoParam+0x28>)
 8002a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a06:	bf00      	nop
 8002a08:	08002a19 	.word	0x08002a19
 8002a0c:	08002a2b 	.word	0x08002a2b
 8002a10:	08002a19 	.word	0x08002a19
 8002a14:	08002aaf 	.word	0x08002aaf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d046      	beq.n	8002ab2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a28:	e043      	b.n	8002ab2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a32:	d140      	bne.n	8002ab6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a38:	e03d      	b.n	8002ab6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a42:	d121      	bne.n	8002a88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d837      	bhi.n	8002aba <DMA_CheckFifoParam+0xda>
 8002a4a:	a201      	add	r2, pc, #4	; (adr r2, 8002a50 <DMA_CheckFifoParam+0x70>)
 8002a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a50:	08002a61 	.word	0x08002a61
 8002a54:	08002a67 	.word	0x08002a67
 8002a58:	08002a61 	.word	0x08002a61
 8002a5c:	08002a79 	.word	0x08002a79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      break;
 8002a64:	e030      	b.n	8002ac8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d025      	beq.n	8002abe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a76:	e022      	b.n	8002abe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a80:	d11f      	bne.n	8002ac2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a86:	e01c      	b.n	8002ac2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d903      	bls.n	8002a96 <DMA_CheckFifoParam+0xb6>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d003      	beq.n	8002a9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a94:	e018      	b.n	8002ac8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	73fb      	strb	r3, [r7, #15]
      break;
 8002a9a:	e015      	b.n	8002ac8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00e      	beq.n	8002ac6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8002aac:	e00b      	b.n	8002ac6 <DMA_CheckFifoParam+0xe6>
      break;
 8002aae:	bf00      	nop
 8002ab0:	e00a      	b.n	8002ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ab2:	bf00      	nop
 8002ab4:	e008      	b.n	8002ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ab6:	bf00      	nop
 8002ab8:	e006      	b.n	8002ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8002aba:	bf00      	nop
 8002abc:	e004      	b.n	8002ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8002abe:	bf00      	nop
 8002ac0:	e002      	b.n	8002ac8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ac2:	bf00      	nop
 8002ac4:	e000      	b.n	8002ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ac6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop

08002ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	e16b      	b.n	8002dcc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	f040 815a 	bne.w	8002dc6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d005      	beq.n	8002b2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d130      	bne.n	8002b8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b60:	2201      	movs	r2, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 0201 	and.w	r2, r3, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d017      	beq.n	8002bc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d123      	bne.n	8002c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	08da      	lsrs	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3208      	adds	r2, #8
 8002bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	08da      	lsrs	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3208      	adds	r2, #8
 8002c16:	69b9      	ldr	r1, [r7, #24]
 8002c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0203 	and.w	r2, r3, #3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80b4 	beq.w	8002dc6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	4b60      	ldr	r3, [pc, #384]	; (8002de4 <HAL_GPIO_Init+0x30c>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	4a5f      	ldr	r2, [pc, #380]	; (8002de4 <HAL_GPIO_Init+0x30c>)
 8002c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6e:	4b5d      	ldr	r3, [pc, #372]	; (8002de4 <HAL_GPIO_Init+0x30c>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c7a:	4a5b      	ldr	r2, [pc, #364]	; (8002de8 <HAL_GPIO_Init+0x310>)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	220f      	movs	r2, #15
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a52      	ldr	r2, [pc, #328]	; (8002dec <HAL_GPIO_Init+0x314>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d02b      	beq.n	8002cfe <HAL_GPIO_Init+0x226>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a51      	ldr	r2, [pc, #324]	; (8002df0 <HAL_GPIO_Init+0x318>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d025      	beq.n	8002cfa <HAL_GPIO_Init+0x222>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a50      	ldr	r2, [pc, #320]	; (8002df4 <HAL_GPIO_Init+0x31c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d01f      	beq.n	8002cf6 <HAL_GPIO_Init+0x21e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4f      	ldr	r2, [pc, #316]	; (8002df8 <HAL_GPIO_Init+0x320>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d019      	beq.n	8002cf2 <HAL_GPIO_Init+0x21a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4e      	ldr	r2, [pc, #312]	; (8002dfc <HAL_GPIO_Init+0x324>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d013      	beq.n	8002cee <HAL_GPIO_Init+0x216>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4d      	ldr	r2, [pc, #308]	; (8002e00 <HAL_GPIO_Init+0x328>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00d      	beq.n	8002cea <HAL_GPIO_Init+0x212>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4c      	ldr	r2, [pc, #304]	; (8002e04 <HAL_GPIO_Init+0x32c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d007      	beq.n	8002ce6 <HAL_GPIO_Init+0x20e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a4b      	ldr	r2, [pc, #300]	; (8002e08 <HAL_GPIO_Init+0x330>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d101      	bne.n	8002ce2 <HAL_GPIO_Init+0x20a>
 8002cde:	2307      	movs	r3, #7
 8002ce0:	e00e      	b.n	8002d00 <HAL_GPIO_Init+0x228>
 8002ce2:	2308      	movs	r3, #8
 8002ce4:	e00c      	b.n	8002d00 <HAL_GPIO_Init+0x228>
 8002ce6:	2306      	movs	r3, #6
 8002ce8:	e00a      	b.n	8002d00 <HAL_GPIO_Init+0x228>
 8002cea:	2305      	movs	r3, #5
 8002cec:	e008      	b.n	8002d00 <HAL_GPIO_Init+0x228>
 8002cee:	2304      	movs	r3, #4
 8002cf0:	e006      	b.n	8002d00 <HAL_GPIO_Init+0x228>
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e004      	b.n	8002d00 <HAL_GPIO_Init+0x228>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e002      	b.n	8002d00 <HAL_GPIO_Init+0x228>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <HAL_GPIO_Init+0x228>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	f002 0203 	and.w	r2, r2, #3
 8002d06:	0092      	lsls	r2, r2, #2
 8002d08:	4093      	lsls	r3, r2
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d10:	4935      	ldr	r1, [pc, #212]	; (8002de8 <HAL_GPIO_Init+0x310>)
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	089b      	lsrs	r3, r3, #2
 8002d16:	3302      	adds	r3, #2
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d1e:	4b3b      	ldr	r3, [pc, #236]	; (8002e0c <HAL_GPIO_Init+0x334>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d42:	4a32      	ldr	r2, [pc, #200]	; (8002e0c <HAL_GPIO_Init+0x334>)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d48:	4b30      	ldr	r3, [pc, #192]	; (8002e0c <HAL_GPIO_Init+0x334>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d6c:	4a27      	ldr	r2, [pc, #156]	; (8002e0c <HAL_GPIO_Init+0x334>)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d72:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <HAL_GPIO_Init+0x334>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d96:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <HAL_GPIO_Init+0x334>)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <HAL_GPIO_Init+0x334>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dc0:	4a12      	ldr	r2, [pc, #72]	; (8002e0c <HAL_GPIO_Init+0x334>)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	61fb      	str	r3, [r7, #28]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	2b0f      	cmp	r3, #15
 8002dd0:	f67f ae90 	bls.w	8002af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	3724      	adds	r7, #36	; 0x24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40013800 	.word	0x40013800
 8002dec:	40020000 	.word	0x40020000
 8002df0:	40020400 	.word	0x40020400
 8002df4:	40020800 	.word	0x40020800
 8002df8:	40020c00 	.word	0x40020c00
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40021400 	.word	0x40021400
 8002e04:	40021800 	.word	0x40021800
 8002e08:	40021c00 	.word	0x40021c00
 8002e0c:	40013c00 	.word	0x40013c00

08002e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	807b      	strh	r3, [r7, #2]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e20:	787b      	ldrb	r3, [r7, #1]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e2c:	e003      	b.n	8002e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e2e:	887b      	ldrh	r3, [r7, #2]
 8002e30:	041a      	lsls	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	619a      	str	r2, [r3, #24]
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b085      	sub	sp, #20
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e54:	887a      	ldrh	r2, [r7, #2]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	041a      	lsls	r2, r3, #16
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	43d9      	mvns	r1, r3
 8002e60:	887b      	ldrh	r3, [r7, #2]
 8002e62:	400b      	ands	r3, r1
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	619a      	str	r2, [r3, #24]
}
 8002e6a:	bf00      	nop
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
	...

08002e78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e82:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d006      	beq.n	8002e9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e8e:	4a05      	ldr	r2, [pc, #20]	; (8002ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 f806 	bl	8002ea8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40013c00 	.word	0x40013c00

08002ea8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec0:	b08f      	sub	sp, #60	; 0x3c
 8002ec2:	af0a      	add	r7, sp, #40	; 0x28
 8002ec4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e10f      	b.n	80030f0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f00a fc84 	bl	800d7f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d102      	bne.n	8002f0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f003 fbcd 	bl	80066ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	687e      	ldr	r6, [r7, #4]
 8002f1c:	466d      	mov	r5, sp
 8002f1e:	f106 0410 	add.w	r4, r6, #16
 8002f22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f32:	1d33      	adds	r3, r6, #4
 8002f34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f36:	6838      	ldr	r0, [r7, #0]
 8002f38:	f003 faa4 	bl	8006484 <USB_CoreInit>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d005      	beq.n	8002f4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2202      	movs	r2, #2
 8002f46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0d0      	b.n	80030f0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2100      	movs	r1, #0
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 fbbb 	bl	80066d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	73fb      	strb	r3, [r7, #15]
 8002f5e:	e04a      	b.n	8002ff6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	333d      	adds	r3, #61	; 0x3d
 8002f70:	2201      	movs	r2, #1
 8002f72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f74:	7bfa      	ldrb	r2, [r7, #15]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	333c      	adds	r3, #60	; 0x3c
 8002f84:	7bfa      	ldrb	r2, [r7, #15]
 8002f86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	b298      	uxth	r0, r3
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	3344      	adds	r3, #68	; 0x44
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	3340      	adds	r3, #64	; 0x40
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fb4:	7bfa      	ldrb	r2, [r7, #15]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3348      	adds	r3, #72	; 0x48
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	334c      	adds	r3, #76	; 0x4c
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fdc:	7bfa      	ldrb	r2, [r7, #15]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	3354      	adds	r3, #84	; 0x54
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	73fb      	strb	r3, [r7, #15]
 8002ff6:	7bfa      	ldrb	r2, [r7, #15]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d3af      	bcc.n	8002f60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003000:	2300      	movs	r3, #0
 8003002:	73fb      	strb	r3, [r7, #15]
 8003004:	e044      	b.n	8003090 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800301c:	7bfa      	ldrb	r2, [r7, #15]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003032:	7bfa      	ldrb	r2, [r7, #15]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800305e:	7bfa      	ldrb	r2, [r7, #15]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003074:	7bfa      	ldrb	r2, [r7, #15]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	3301      	adds	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	429a      	cmp	r2, r3
 8003098:	d3b5      	bcc.n	8003006 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	687e      	ldr	r6, [r7, #4]
 80030a2:	466d      	mov	r5, sp
 80030a4:	f106 0410 	add.w	r4, r6, #16
 80030a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80030b8:	1d33      	adds	r3, r6, #4
 80030ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030bc:	6838      	ldr	r0, [r7, #0]
 80030be:	f003 fb53 	bl	8006768 <USB_DevInit>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e00d      	b.n	80030f0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f004 fca2 	bl	8007a32 <USB_DevDisconnect>

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_PCD_Start+0x1c>
 8003110:	2302      	movs	r3, #2
 8003112:	e020      	b.n	8003156 <HAL_PCD_Start+0x5e>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	2b01      	cmp	r3, #1
 8003122:	d109      	bne.n	8003138 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003128:	2b01      	cmp	r3, #1
 800312a:	d005      	beq.n	8003138 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f003 faa5 	bl	800668c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f004 fc52 	bl	80079f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800315e:	b590      	push	{r4, r7, lr}
 8003160:	b08d      	sub	sp, #52	; 0x34
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f004 fd10 	bl	8007b9a <USB_GetMode>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	f040 848a 	bne.w	8003a96 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f004 fc74 	bl	8007a74 <USB_ReadInterrupts>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8480 	beq.w	8003a94 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	0a1b      	lsrs	r3, r3, #8
 800319e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f004 fc61 	bl	8007a74 <USB_ReadInterrupts>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d107      	bne.n	80031cc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f002 0202 	and.w	r2, r2, #2
 80031ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f004 fc4f 	bl	8007a74 <USB_ReadInterrupts>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b10      	cmp	r3, #16
 80031de:	d161      	bne.n	80032a4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0210 	bic.w	r2, r2, #16
 80031ee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	f003 020f 	and.w	r2, r3, #15
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	4413      	add	r3, r2
 800320c:	3304      	adds	r3, #4
 800320e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	0c5b      	lsrs	r3, r3, #17
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	2b02      	cmp	r3, #2
 800321a:	d124      	bne.n	8003266 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003222:	4013      	ands	r3, r2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d035      	beq.n	8003294 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003232:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003236:	b29b      	uxth	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	6a38      	ldr	r0, [r7, #32]
 800323c:	f004 fa86 	bl	800774c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800324c:	441a      	add	r2, r3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	6a1a      	ldr	r2, [r3, #32]
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800325e:	441a      	add	r2, r3
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	621a      	str	r2, [r3, #32]
 8003264:	e016      	b.n	8003294 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	0c5b      	lsrs	r3, r3, #17
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	2b06      	cmp	r3, #6
 8003270:	d110      	bne.n	8003294 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003278:	2208      	movs	r2, #8
 800327a:	4619      	mov	r1, r3
 800327c:	6a38      	ldr	r0, [r7, #32]
 800327e:	f004 fa65 	bl	800774c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	6a1a      	ldr	r2, [r3, #32]
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800328e:	441a      	add	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0210 	orr.w	r2, r2, #16
 80032a2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f004 fbe3 	bl	8007a74 <USB_ReadInterrupts>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032b8:	f040 80a7 	bne.w	800340a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f004 fbe8 	bl	8007a9a <USB_ReadDevAllOutEpInterrupt>
 80032ca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80032cc:	e099      	b.n	8003402 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 808e 	beq.w	80033f6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f004 fc0c 	bl	8007b02 <USB_ReadDevOutEPInterrupt>
 80032ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00c      	beq.n	8003310 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003302:	461a      	mov	r2, r3
 8003304:	2301      	movs	r3, #1
 8003306:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fec2 	bl	8004094 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00c      	beq.n	8003334 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	4413      	add	r3, r2
 8003322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003326:	461a      	mov	r2, r3
 8003328:	2308      	movs	r3, #8
 800332a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800332c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 ff98 	bl	8004264 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	4413      	add	r3, r2
 8003346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334a:	461a      	mov	r2, r3
 800334c:	2310      	movs	r3, #16
 800334e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d030      	beq.n	80033bc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003362:	2b80      	cmp	r3, #128	; 0x80
 8003364:	d109      	bne.n	800337a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003374:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003378:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800337a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	4413      	add	r3, r2
 800338c:	3304      	adds	r3, #4
 800338e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	78db      	ldrb	r3, [r3, #3]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d108      	bne.n	80033aa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2200      	movs	r2, #0
 800339c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	4619      	mov	r1, r3
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f00a fb2d 	bl	800da04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b6:	461a      	mov	r2, r3
 80033b8:	2302      	movs	r3, #2
 80033ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d2:	461a      	mov	r2, r3
 80033d4:	2320      	movs	r3, #32
 80033d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ee:	461a      	mov	r2, r3
 80033f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	3301      	adds	r3, #1
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fe:	085b      	lsrs	r3, r3, #1
 8003400:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003404:	2b00      	cmp	r3, #0
 8003406:	f47f af62 	bne.w	80032ce <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f004 fb30 	bl	8007a74 <USB_ReadInterrupts>
 8003414:	4603      	mov	r3, r0
 8003416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800341a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800341e:	f040 80db 	bne.w	80035d8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f004 fb51 	bl	8007ace <USB_ReadDevAllInEpInterrupt>
 800342c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003432:	e0cd      	b.n	80035d0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80c2 	beq.w	80035c4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	4611      	mov	r1, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f004 fb77 	bl	8007b3e <USB_ReadDevInEPInterrupt>
 8003450:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d057      	beq.n	800350c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	2201      	movs	r2, #1
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	43db      	mvns	r3, r3
 8003476:	69f9      	ldr	r1, [r7, #28]
 8003478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800347c:	4013      	ands	r3, r2
 800347e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800348c:	461a      	mov	r2, r3
 800348e:	2301      	movs	r3, #1
 8003490:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d132      	bne.n	8003500 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349e:	4613      	mov	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	334c      	adds	r3, #76	; 0x4c
 80034aa:	6819      	ldr	r1, [r3, #0]
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4403      	add	r3, r0
 80034ba:	3348      	adds	r3, #72	; 0x48
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4419      	add	r1, r3
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4403      	add	r3, r0
 80034ce:	334c      	adds	r3, #76	; 0x4c
 80034d0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d113      	bne.n	8003500 <HAL_PCD_IRQHandler+0x3a2>
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	3354      	adds	r3, #84	; 0x54
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d108      	bne.n	8003500 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034f8:	461a      	mov	r2, r3
 80034fa:	2101      	movs	r1, #1
 80034fc:	f004 fb7e 	bl	8007bfc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	b2db      	uxtb	r3, r3
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f00a f9f7 	bl	800d8fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	4413      	add	r3, r2
 800351e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003522:	461a      	mov	r2, r3
 8003524:	2308      	movs	r3, #8
 8003526:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353e:	461a      	mov	r2, r3
 8003540:	2310      	movs	r3, #16
 8003542:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	4413      	add	r3, r2
 8003556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355a:	461a      	mov	r2, r3
 800355c:	2340      	movs	r3, #64	; 0x40
 800355e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d023      	beq.n	80035b2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800356a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800356c:	6a38      	ldr	r0, [r7, #32]
 800356e:	f003 fa5f 	bl	8006a30 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	3338      	adds	r3, #56	; 0x38
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	3304      	adds	r3, #4
 8003584:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	78db      	ldrb	r3, [r3, #3]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d108      	bne.n	80035a0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	b2db      	uxtb	r3, r3
 8003598:	4619      	mov	r1, r3
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f00a fa44 	bl	800da28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ac:	461a      	mov	r2, r3
 80035ae:	2302      	movs	r3, #2
 80035b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fcdb 	bl	8003f7a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	3301      	adds	r3, #1
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	085b      	lsrs	r3, r3, #1
 80035ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f47f af2e 	bne.w	8003434 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f004 fa49 	bl	8007a74 <USB_ReadInterrupts>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035ec:	d122      	bne.n	8003634 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003608:	2b01      	cmp	r3, #1
 800360a:	d108      	bne.n	800361e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003614:	2100      	movs	r1, #0
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fec2 	bl	80043a0 <HAL_PCDEx_LPM_Callback>
 800361c:	e002      	b.n	8003624 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f00a f9e2 	bl	800d9e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003632:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f004 fa1b 	bl	8007a74 <USB_ReadInterrupts>
 800363e:	4603      	mov	r3, r0
 8003640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003648:	d112      	bne.n	8003670 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b01      	cmp	r3, #1
 8003658:	d102      	bne.n	8003660 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f00a f99e 	bl	800d99c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695a      	ldr	r2, [r3, #20]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800366e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f004 f9fd 	bl	8007a74 <USB_ReadInterrupts>
 800367a:	4603      	mov	r3, r0
 800367c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003684:	f040 80b7 	bne.w	80037f6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003696:	f023 0301 	bic.w	r3, r3, #1
 800369a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2110      	movs	r1, #16
 80036a2:	4618      	mov	r0, r3
 80036a4:	f003 f9c4 	bl	8006a30 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a8:	2300      	movs	r3, #0
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ac:	e046      	b.n	800373c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ba:	461a      	mov	r2, r3
 80036bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036d2:	0151      	lsls	r1, r2, #5
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	440a      	add	r2, r1
 80036d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ee:	461a      	mov	r2, r3
 80036f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003706:	0151      	lsls	r1, r2, #5
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	440a      	add	r2, r1
 800370c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003710:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003714:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	4413      	add	r3, r2
 800371e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003726:	0151      	lsls	r1, r2, #5
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	440a      	add	r2, r1
 800372c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003730:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003734:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003738:	3301      	adds	r3, #1
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003742:	429a      	cmp	r2, r3
 8003744:	d3b3      	bcc.n	80036ae <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003754:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003758:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	2b00      	cmp	r3, #0
 8003760:	d016      	beq.n	8003790 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003772:	f043 030b 	orr.w	r3, r3, #11
 8003776:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003788:	f043 030b 	orr.w	r3, r3, #11
 800378c:	6453      	str	r3, [r2, #68]	; 0x44
 800378e:	e015      	b.n	80037bc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800379e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037a2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80037a6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b6:	f043 030b 	orr.w	r3, r3, #11
 80037ba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037ce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037e0:	461a      	mov	r2, r3
 80037e2:	f004 fa0b 	bl	8007bfc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695a      	ldr	r2, [r3, #20]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80037f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f004 f93a 	bl	8007a74 <USB_ReadInterrupts>
 8003800:	4603      	mov	r3, r0
 8003802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800380a:	d124      	bne.n	8003856 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f004 f9d0 	bl	8007bb6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f003 f985 	bl	8006b2a <USB_GetDevSpeed>
 8003820:	4603      	mov	r3, r0
 8003822:	461a      	mov	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681c      	ldr	r4, [r3, #0]
 800382c:	f001 fa28 	bl	8004c80 <HAL_RCC_GetHCLKFreq>
 8003830:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003836:	b2db      	uxtb	r3, r3
 8003838:	461a      	mov	r2, r3
 800383a:	4620      	mov	r0, r4
 800383c:	f002 fe84 	bl	8006548 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f00a f882 	bl	800d94a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003854:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f004 f90a 	bl	8007a74 <USB_ReadInterrupts>
 8003860:	4603      	mov	r3, r0
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b08      	cmp	r3, #8
 8003868:	d10a      	bne.n	8003880 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f00a f85f 	bl	800d92e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f002 0208 	and.w	r2, r2, #8
 800387e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f004 f8f5 	bl	8007a74 <USB_ReadInterrupts>
 800388a:	4603      	mov	r3, r0
 800388c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003890:	2b80      	cmp	r3, #128	; 0x80
 8003892:	d122      	bne.n	80038da <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038a0:	2301      	movs	r3, #1
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
 80038a4:	e014      	b.n	80038d0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038aa:	4613      	mov	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d105      	bne.n	80038ca <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	4619      	mov	r1, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fb27 	bl	8003f18 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	3301      	adds	r3, #1
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d3e5      	bcc.n	80038a6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f004 f8c8 	bl	8007a74 <USB_ReadInterrupts>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ee:	d13b      	bne.n	8003968 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038f0:	2301      	movs	r3, #1
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
 80038f4:	e02b      	b.n	800394e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390a:	4613      	mov	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	3340      	adds	r3, #64	; 0x40
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d115      	bne.n	8003948 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800391c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800391e:	2b00      	cmp	r3, #0
 8003920:	da12      	bge.n	8003948 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003926:	4613      	mov	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	333f      	adds	r3, #63	; 0x3f
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800393e:	b2db      	uxtb	r3, r3
 8003940:	4619      	mov	r1, r3
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fae8 	bl	8003f18 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	3301      	adds	r3, #1
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003954:	429a      	cmp	r2, r3
 8003956:	d3ce      	bcc.n	80038f6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003966:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f004 f881 	bl	8007a74 <USB_ReadInterrupts>
 8003972:	4603      	mov	r3, r0
 8003974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003978:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800397c:	d155      	bne.n	8003a2a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800397e:	2301      	movs	r3, #1
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
 8003982:	e045      	b.n	8003a10 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d12e      	bne.n	8003a0a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	da2b      	bge.n	8003a0a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80039be:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d121      	bne.n	8003a0a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ca:	4613      	mov	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80039d8:	2201      	movs	r2, #1
 80039da:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a06:	6053      	str	r3, [r2, #4]
            break;
 8003a08:	e007      	b.n	8003a1a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d3b4      	bcc.n	8003984 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f004 f820 	bl	8007a74 <USB_ReadInterrupts>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3e:	d10a      	bne.n	8003a56 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f00a f803 	bl	800da4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f004 f80a 	bl	8007a74 <USB_ReadInterrupts>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d115      	bne.n	8003a96 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f009 fff3 	bl	800da68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	e000      	b.n	8003a96 <HAL_PCD_IRQHandler+0x938>
      return;
 8003a94:	bf00      	nop
    }
  }
}
 8003a96:	3734      	adds	r7, #52	; 0x34
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd90      	pop	{r4, r7, pc}

08003a9c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_PCD_SetAddress+0x1a>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e013      	b.n	8003ade <HAL_PCD_SetAddress+0x42>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	78fa      	ldrb	r2, [r7, #3]
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f003 ff68 	bl	80079a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	4608      	mov	r0, r1
 8003af0:	4611      	mov	r1, r2
 8003af2:	461a      	mov	r2, r3
 8003af4:	4603      	mov	r3, r0
 8003af6:	70fb      	strb	r3, [r7, #3]
 8003af8:	460b      	mov	r3, r1
 8003afa:	803b      	strh	r3, [r7, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	da0f      	bge.n	8003b2c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	f003 020f 	and.w	r2, r3, #15
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	3338      	adds	r3, #56	; 0x38
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	4413      	add	r3, r2
 8003b20:	3304      	adds	r3, #4
 8003b22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	705a      	strb	r2, [r3, #1]
 8003b2a:	e00f      	b.n	8003b4c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	f003 020f 	and.w	r2, r3, #15
 8003b32:	4613      	mov	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4413      	add	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	3304      	adds	r3, #4
 8003b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b58:	883a      	ldrh	r2, [r7, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	78ba      	ldrb	r2, [r7, #2]
 8003b62:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	785b      	ldrb	r3, [r3, #1]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d004      	beq.n	8003b76 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b76:	78bb      	ldrb	r3, [r7, #2]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d102      	bne.n	8003b82 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_PCD_EP_Open+0xaa>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e00e      	b.n	8003bae <HAL_PCD_EP_Open+0xc8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68f9      	ldr	r1, [r7, #12]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f002 ffe8 	bl	8006b74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003bac:	7afb      	ldrb	r3, [r7, #11]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	da0f      	bge.n	8003bea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	f003 020f 	and.w	r2, r3, #15
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	3338      	adds	r3, #56	; 0x38
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	3304      	adds	r3, #4
 8003be0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	705a      	strb	r2, [r3, #1]
 8003be8:	e00f      	b.n	8003c0a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	f003 020f 	and.w	r2, r3, #15
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	4413      	add	r3, r2
 8003c00:	3304      	adds	r3, #4
 8003c02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_PCD_EP_Close+0x6e>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e00e      	b.n	8003c42 <HAL_PCD_EP_Close+0x8c>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68f9      	ldr	r1, [r7, #12]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f003 f826 	bl	8006c84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b086      	sub	sp, #24
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	460b      	mov	r3, r1
 8003c58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c5a:	7afb      	ldrb	r3, [r7, #11]
 8003c5c:	f003 020f 	and.w	r2, r3, #15
 8003c60:	4613      	mov	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	3304      	adds	r3, #4
 8003c72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2200      	movs	r2, #0
 8003c84:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c8c:	7afb      	ldrb	r3, [r7, #11]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d102      	bne.n	8003ca6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ca6:	7afb      	ldrb	r3, [r7, #11]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	6979      	ldr	r1, [r7, #20]
 8003cbe:	f003 fb05 	bl	80072cc <USB_EP0StartXfer>
 8003cc2:	e008      	b.n	8003cd6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	6979      	ldr	r1, [r7, #20]
 8003cd2:	f003 f8b3 	bl	8006e3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	f003 020f 	and.w	r2, r3, #15
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003d02:	681b      	ldr	r3, [r3, #0]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d20:	7afb      	ldrb	r3, [r7, #11]
 8003d22:	f003 020f 	and.w	r2, r3, #15
 8003d26:	4613      	mov	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	3338      	adds	r3, #56	; 0x38
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	3304      	adds	r3, #4
 8003d36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2200      	movs	r2, #0
 8003d48:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d50:	7afb      	ldrb	r3, [r7, #11]
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d102      	bne.n	8003d6a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d6a:	7afb      	ldrb	r3, [r7, #11]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d109      	bne.n	8003d88 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	6979      	ldr	r1, [r7, #20]
 8003d82:	f003 faa3 	bl	80072cc <USB_EP0StartXfer>
 8003d86:	e008      	b.n	8003d9a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	6979      	ldr	r1, [r7, #20]
 8003d96:	f003 f851 	bl	8006e3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	f003 020f 	and.w	r2, r3, #15
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d901      	bls.n	8003dc2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e050      	b.n	8003e64 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	da0f      	bge.n	8003dea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	f003 020f 	and.w	r2, r3, #15
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	3338      	adds	r3, #56	; 0x38
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4413      	add	r3, r2
 8003dde:	3304      	adds	r3, #4
 8003de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2201      	movs	r2, #1
 8003de6:	705a      	strb	r2, [r3, #1]
 8003de8:	e00d      	b.n	8003e06 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	4613      	mov	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_PCD_EP_SetStall+0x82>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e01e      	b.n	8003e64 <HAL_PCD_EP_SetStall+0xc0>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68f9      	ldr	r1, [r7, #12]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f003 fce1 	bl	80077fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e3a:	78fb      	ldrb	r3, [r7, #3]
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10a      	bne.n	8003e5a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	b2d9      	uxtb	r1, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e54:	461a      	mov	r2, r3
 8003e56:	f003 fed1 	bl	8007bfc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	f003 020f 	and.w	r2, r3, #15
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d901      	bls.n	8003e8a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e042      	b.n	8003f10 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	da0f      	bge.n	8003eb2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	f003 020f 	and.w	r2, r3, #15
 8003e98:	4613      	mov	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	3338      	adds	r3, #56	; 0x38
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	705a      	strb	r2, [r3, #1]
 8003eb0:	e00f      	b.n	8003ed2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	f003 020f 	and.w	r2, r3, #15
 8003eb8:	4613      	mov	r3, r2
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3304      	adds	r3, #4
 8003eca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_PCD_EP_ClrStall+0x86>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e00e      	b.n	8003f10 <HAL_PCD_EP_ClrStall+0xa4>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68f9      	ldr	r1, [r7, #12]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f003 fce9 	bl	80078d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	da0c      	bge.n	8003f46 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	f003 020f 	and.w	r2, r3, #15
 8003f32:	4613      	mov	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	3338      	adds	r3, #56	; 0x38
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	4413      	add	r3, r2
 8003f40:	3304      	adds	r3, #4
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	e00c      	b.n	8003f60 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	f003 020f 	and.w	r2, r3, #15
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68f9      	ldr	r1, [r7, #12]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f003 fb08 	bl	800757c <USB_EPStopXfer>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f70:	7afb      	ldrb	r3, [r7, #11]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b08a      	sub	sp, #40	; 0x28
 8003f7e:	af02      	add	r7, sp, #8
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	3338      	adds	r3, #56	; 0x38
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1a      	ldr	r2, [r3, #32]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d901      	bls.n	8003fb2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e06c      	b.n	800408c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d902      	bls.n	8003fce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	3303      	adds	r3, #3
 8003fd2:	089b      	lsrs	r3, r3, #2
 8003fd4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fd6:	e02b      	b.n	8004030 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d902      	bls.n	8003ff4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	3303      	adds	r3, #3
 8003ff8:	089b      	lsrs	r3, r3, #2
 8003ffa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6919      	ldr	r1, [r3, #16]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	b2da      	uxtb	r2, r3
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800400c:	b2db      	uxtb	r3, r3
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	4603      	mov	r3, r0
 8004012:	6978      	ldr	r0, [r7, #20]
 8004014:	f003 fb5c 	bl	80076d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	441a      	add	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a1a      	ldr	r2, [r3, #32]
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	441a      	add	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	b29b      	uxth	r3, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	429a      	cmp	r2, r3
 8004044:	d809      	bhi.n	800405a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a1a      	ldr	r2, [r3, #32]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800404e:	429a      	cmp	r2, r3
 8004050:	d203      	bcs.n	800405a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1be      	bne.n	8003fd8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	429a      	cmp	r2, r3
 8004064:	d811      	bhi.n	800408a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	2201      	movs	r2, #1
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	43db      	mvns	r3, r3
 8004080:	6939      	ldr	r1, [r7, #16]
 8004082:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004086:	4013      	ands	r3, r2
 8004088:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3720      	adds	r7, #32
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	333c      	adds	r3, #60	; 0x3c
 80040ac:	3304      	adds	r3, #4
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d17b      	bne.n	80041c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d015      	beq.n	8004100 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	4a61      	ldr	r2, [pc, #388]	; (800425c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	f240 80b9 	bls.w	8004250 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80b3 	beq.w	8004250 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f6:	461a      	mov	r2, r3
 80040f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040fc:	6093      	str	r3, [r2, #8]
 80040fe:	e0a7      	b.n	8004250 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004116:	461a      	mov	r2, r3
 8004118:	2320      	movs	r3, #32
 800411a:	6093      	str	r3, [r2, #8]
 800411c:	e098      	b.n	8004250 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004124:	2b00      	cmp	r3, #0
 8004126:	f040 8093 	bne.w	8004250 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	4a4b      	ldr	r2, [pc, #300]	; (800425c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d90f      	bls.n	8004152 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004148:	461a      	mov	r2, r3
 800414a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800414e:	6093      	str	r3, [r2, #8]
 8004150:	e07e      	b.n	8004250 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	4413      	add	r3, r2
 8004164:	3304      	adds	r3, #4
 8004166:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	69da      	ldr	r2, [r3, #28]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	0159      	lsls	r1, r3, #5
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	440b      	add	r3, r1
 8004174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800417e:	1ad2      	subs	r2, r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d114      	bne.n	80041b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800419c:	461a      	mov	r2, r3
 800419e:	2101      	movs	r1, #1
 80041a0:	f003 fd2c 	bl	8007bfc <USB_EP0_OutStart>
 80041a4:	e006      	b.n	80041b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	441a      	add	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	4619      	mov	r1, r3
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f009 fb82 	bl	800d8c4 <HAL_PCD_DataOutStageCallback>
 80041c0:	e046      	b.n	8004250 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	4a26      	ldr	r2, [pc, #152]	; (8004260 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d124      	bne.n	8004214 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e0:	461a      	mov	r2, r3
 80041e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041e6:	6093      	str	r3, [r2, #8]
 80041e8:	e032      	b.n	8004250 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004200:	461a      	mov	r2, r3
 8004202:	2320      	movs	r3, #32
 8004204:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	4619      	mov	r1, r3
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f009 fb59 	bl	800d8c4 <HAL_PCD_DataOutStageCallback>
 8004212:	e01d      	b.n	8004250 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d114      	bne.n	8004244 <PCD_EP_OutXfrComplete_int+0x1b0>
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	4613      	mov	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	4413      	add	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d108      	bne.n	8004244 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800423c:	461a      	mov	r2, r3
 800423e:	2100      	movs	r1, #0
 8004240:	f003 fcdc 	bl	8007bfc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	4619      	mov	r1, r3
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f009 fb3a 	bl	800d8c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3720      	adds	r7, #32
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	4f54300a 	.word	0x4f54300a
 8004260:	4f54310a 	.word	0x4f54310a

08004264 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	333c      	adds	r3, #60	; 0x3c
 800427c:	3304      	adds	r3, #4
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4a15      	ldr	r2, [pc, #84]	; (80042ec <PCD_EP_OutSetupPacket_int+0x88>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d90e      	bls.n	80042b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d009      	beq.n	80042b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b0:	461a      	mov	r2, r3
 80042b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f009 faf1 	bl	800d8a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <PCD_EP_OutSetupPacket_int+0x88>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d90c      	bls.n	80042e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d108      	bne.n	80042e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042d8:	461a      	mov	r2, r3
 80042da:	2101      	movs	r1, #1
 80042dc:	f003 fc8e 	bl	8007bfc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	4f54300a 	.word	0x4f54300a

080042f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	70fb      	strb	r3, [r7, #3]
 80042fc:	4613      	mov	r3, r2
 80042fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d107      	bne.n	800431e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800430e:	883b      	ldrh	r3, [r7, #0]
 8004310:	0419      	lsls	r1, r3, #16
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	430a      	orrs	r2, r1
 800431a:	629a      	str	r2, [r3, #40]	; 0x28
 800431c:	e028      	b.n	8004370 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004324:	0c1b      	lsrs	r3, r3, #16
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	4413      	add	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800432c:	2300      	movs	r3, #0
 800432e:	73fb      	strb	r3, [r7, #15]
 8004330:	e00d      	b.n	800434e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	3340      	adds	r3, #64	; 0x40
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	0c1b      	lsrs	r3, r3, #16
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	4413      	add	r3, r2
 8004346:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004348:	7bfb      	ldrb	r3, [r7, #15]
 800434a:	3301      	adds	r3, #1
 800434c:	73fb      	strb	r3, [r7, #15]
 800434e:	7bfa      	ldrb	r2, [r7, #15]
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	3b01      	subs	r3, #1
 8004354:	429a      	cmp	r2, r3
 8004356:	d3ec      	bcc.n	8004332 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004358:	883b      	ldrh	r3, [r7, #0]
 800435a:	0418      	lsls	r0, r3, #16
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6819      	ldr	r1, [r3, #0]
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	3b01      	subs	r3, #1
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	4302      	orrs	r2, r0
 8004368:	3340      	adds	r3, #64	; 0x40
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	460b      	mov	r3, r1
 8004388:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	887a      	ldrh	r2, [r7, #2]
 8004390:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e267      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d075      	beq.n	80044c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043d6:	4b88      	ldr	r3, [pc, #544]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d00c      	beq.n	80043fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043e2:	4b85      	ldr	r3, [pc, #532]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d112      	bne.n	8004414 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ee:	4b82      	ldr	r3, [pc, #520]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043fa:	d10b      	bne.n	8004414 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043fc:	4b7e      	ldr	r3, [pc, #504]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d05b      	beq.n	80044c0 <HAL_RCC_OscConfig+0x108>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d157      	bne.n	80044c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e242      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441c:	d106      	bne.n	800442c <HAL_RCC_OscConfig+0x74>
 800441e:	4b76      	ldr	r3, [pc, #472]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a75      	ldr	r2, [pc, #468]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	e01d      	b.n	8004468 <HAL_RCC_OscConfig+0xb0>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004434:	d10c      	bne.n	8004450 <HAL_RCC_OscConfig+0x98>
 8004436:	4b70      	ldr	r3, [pc, #448]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a6f      	ldr	r2, [pc, #444]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 800443c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	4b6d      	ldr	r3, [pc, #436]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a6c      	ldr	r2, [pc, #432]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	e00b      	b.n	8004468 <HAL_RCC_OscConfig+0xb0>
 8004450:	4b69      	ldr	r3, [pc, #420]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a68      	ldr	r2, [pc, #416]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	4b66      	ldr	r3, [pc, #408]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a65      	ldr	r2, [pc, #404]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d013      	beq.n	8004498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004470:	f7fd feb0 	bl	80021d4 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004478:	f7fd feac 	bl	80021d4 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b64      	cmp	r3, #100	; 0x64
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e207      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448a:	4b5b      	ldr	r3, [pc, #364]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0f0      	beq.n	8004478 <HAL_RCC_OscConfig+0xc0>
 8004496:	e014      	b.n	80044c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004498:	f7fd fe9c 	bl	80021d4 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a0:	f7fd fe98 	bl	80021d4 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b64      	cmp	r3, #100	; 0x64
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e1f3      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044b2:	4b51      	ldr	r3, [pc, #324]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0xe8>
 80044be:	e000      	b.n	80044c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d063      	beq.n	8004596 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ce:	4b4a      	ldr	r3, [pc, #296]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00b      	beq.n	80044f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044da:	4b47      	ldr	r3, [pc, #284]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d11c      	bne.n	8004520 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044e6:	4b44      	ldr	r3, [pc, #272]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d116      	bne.n	8004520 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044f2:	4b41      	ldr	r3, [pc, #260]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <HAL_RCC_OscConfig+0x152>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d001      	beq.n	800450a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e1c7      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800450a:	4b3b      	ldr	r3, [pc, #236]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	4937      	ldr	r1, [pc, #220]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 800451a:	4313      	orrs	r3, r2
 800451c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451e:	e03a      	b.n	8004596 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d020      	beq.n	800456a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004528:	4b34      	ldr	r3, [pc, #208]	; (80045fc <HAL_RCC_OscConfig+0x244>)
 800452a:	2201      	movs	r2, #1
 800452c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452e:	f7fd fe51 	bl	80021d4 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004536:	f7fd fe4d 	bl	80021d4 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e1a8      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004548:	4b2b      	ldr	r3, [pc, #172]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004554:	4b28      	ldr	r3, [pc, #160]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4925      	ldr	r1, [pc, #148]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004564:	4313      	orrs	r3, r2
 8004566:	600b      	str	r3, [r1, #0]
 8004568:	e015      	b.n	8004596 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800456a:	4b24      	ldr	r3, [pc, #144]	; (80045fc <HAL_RCC_OscConfig+0x244>)
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fd fe30 	bl	80021d4 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004578:	f7fd fe2c 	bl	80021d4 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e187      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800458a:	4b1b      	ldr	r3, [pc, #108]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d036      	beq.n	8004610 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d016      	beq.n	80045d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045aa:	4b15      	ldr	r3, [pc, #84]	; (8004600 <HAL_RCC_OscConfig+0x248>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b0:	f7fd fe10 	bl	80021d4 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045b8:	f7fd fe0c 	bl	80021d4 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e167      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ca:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80045cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0x200>
 80045d6:	e01b      	b.n	8004610 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <HAL_RCC_OscConfig+0x248>)
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045de:	f7fd fdf9 	bl	80021d4 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e4:	e00e      	b.n	8004604 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045e6:	f7fd fdf5 	bl	80021d4 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d907      	bls.n	8004604 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e150      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
 80045f8:	40023800 	.word	0x40023800
 80045fc:	42470000 	.word	0x42470000
 8004600:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004604:	4b88      	ldr	r3, [pc, #544]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1ea      	bne.n	80045e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8097 	beq.w	800474c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800461e:	2300      	movs	r3, #0
 8004620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004622:	4b81      	ldr	r3, [pc, #516]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10f      	bne.n	800464e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800462e:	2300      	movs	r3, #0
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	4b7d      	ldr	r3, [pc, #500]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	4a7c      	ldr	r2, [pc, #496]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463c:	6413      	str	r3, [r2, #64]	; 0x40
 800463e:	4b7a      	ldr	r3, [pc, #488]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800464a:	2301      	movs	r3, #1
 800464c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464e:	4b77      	ldr	r3, [pc, #476]	; (800482c <HAL_RCC_OscConfig+0x474>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004656:	2b00      	cmp	r3, #0
 8004658:	d118      	bne.n	800468c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800465a:	4b74      	ldr	r3, [pc, #464]	; (800482c <HAL_RCC_OscConfig+0x474>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a73      	ldr	r2, [pc, #460]	; (800482c <HAL_RCC_OscConfig+0x474>)
 8004660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004666:	f7fd fdb5 	bl	80021d4 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466e:	f7fd fdb1 	bl	80021d4 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e10c      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004680:	4b6a      	ldr	r3, [pc, #424]	; (800482c <HAL_RCC_OscConfig+0x474>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d106      	bne.n	80046a2 <HAL_RCC_OscConfig+0x2ea>
 8004694:	4b64      	ldr	r3, [pc, #400]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004698:	4a63      	ldr	r2, [pc, #396]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	6713      	str	r3, [r2, #112]	; 0x70
 80046a0:	e01c      	b.n	80046dc <HAL_RCC_OscConfig+0x324>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b05      	cmp	r3, #5
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x30c>
 80046aa:	4b5f      	ldr	r3, [pc, #380]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	4a5e      	ldr	r2, [pc, #376]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80046b0:	f043 0304 	orr.w	r3, r3, #4
 80046b4:	6713      	str	r3, [r2, #112]	; 0x70
 80046b6:	4b5c      	ldr	r3, [pc, #368]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	4a5b      	ldr	r2, [pc, #364]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	6713      	str	r3, [r2, #112]	; 0x70
 80046c2:	e00b      	b.n	80046dc <HAL_RCC_OscConfig+0x324>
 80046c4:	4b58      	ldr	r3, [pc, #352]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	4a57      	ldr	r2, [pc, #348]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80046ca:	f023 0301 	bic.w	r3, r3, #1
 80046ce:	6713      	str	r3, [r2, #112]	; 0x70
 80046d0:	4b55      	ldr	r3, [pc, #340]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	4a54      	ldr	r2, [pc, #336]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80046d6:	f023 0304 	bic.w	r3, r3, #4
 80046da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d015      	beq.n	8004710 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e4:	f7fd fd76 	bl	80021d4 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ea:	e00a      	b.n	8004702 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ec:	f7fd fd72 	bl	80021d4 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e0cb      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004702:	4b49      	ldr	r3, [pc, #292]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0ee      	beq.n	80046ec <HAL_RCC_OscConfig+0x334>
 800470e:	e014      	b.n	800473a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004710:	f7fd fd60 	bl	80021d4 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004716:	e00a      	b.n	800472e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004718:	f7fd fd5c 	bl	80021d4 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	; 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e0b5      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800472e:	4b3e      	ldr	r3, [pc, #248]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1ee      	bne.n	8004718 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800473a:	7dfb      	ldrb	r3, [r7, #23]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d105      	bne.n	800474c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004740:	4b39      	ldr	r3, [pc, #228]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	4a38      	ldr	r2, [pc, #224]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800474a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80a1 	beq.w	8004898 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004756:	4b34      	ldr	r3, [pc, #208]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b08      	cmp	r3, #8
 8004760:	d05c      	beq.n	800481c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d141      	bne.n	80047ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476a:	4b31      	ldr	r3, [pc, #196]	; (8004830 <HAL_RCC_OscConfig+0x478>)
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004770:	f7fd fd30 	bl	80021d4 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004778:	f7fd fd2c 	bl	80021d4 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e087      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478a:	4b27      	ldr	r3, [pc, #156]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f0      	bne.n	8004778 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69da      	ldr	r2, [r3, #28]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	019b      	lsls	r3, r3, #6
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	085b      	lsrs	r3, r3, #1
 80047ae:	3b01      	subs	r3, #1
 80047b0:	041b      	lsls	r3, r3, #16
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	061b      	lsls	r3, r3, #24
 80047ba:	491b      	ldr	r1, [pc, #108]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047c0:	4b1b      	ldr	r3, [pc, #108]	; (8004830 <HAL_RCC_OscConfig+0x478>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c6:	f7fd fd05 	bl	80021d4 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ce:	f7fd fd01 	bl	80021d4 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e05c      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e0:	4b11      	ldr	r3, [pc, #68]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0f0      	beq.n	80047ce <HAL_RCC_OscConfig+0x416>
 80047ec:	e054      	b.n	8004898 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ee:	4b10      	ldr	r3, [pc, #64]	; (8004830 <HAL_RCC_OscConfig+0x478>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f4:	f7fd fcee 	bl	80021d4 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fc:	f7fd fcea 	bl	80021d4 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e045      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480e:	4b06      	ldr	r3, [pc, #24]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0x444>
 800481a:	e03d      	b.n	8004898 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d107      	bne.n	8004834 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e038      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
 8004828:	40023800 	.word	0x40023800
 800482c:	40007000 	.word	0x40007000
 8004830:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004834:	4b1b      	ldr	r3, [pc, #108]	; (80048a4 <HAL_RCC_OscConfig+0x4ec>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d028      	beq.n	8004894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800484c:	429a      	cmp	r2, r3
 800484e:	d121      	bne.n	8004894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d11a      	bne.n	8004894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004864:	4013      	ands	r3, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800486a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800486c:	4293      	cmp	r3, r2
 800486e:	d111      	bne.n	8004894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	085b      	lsrs	r3, r3, #1
 800487c:	3b01      	subs	r3, #1
 800487e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004880:	429a      	cmp	r2, r3
 8004882:	d107      	bne.n	8004894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004890:	429a      	cmp	r2, r3
 8004892:	d001      	beq.n	8004898 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40023800 	.word	0x40023800

080048a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0cc      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048bc:	4b68      	ldr	r3, [pc, #416]	; (8004a60 <HAL_RCC_ClockConfig+0x1b8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d90c      	bls.n	80048e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ca:	4b65      	ldr	r3, [pc, #404]	; (8004a60 <HAL_RCC_ClockConfig+0x1b8>)
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d2:	4b63      	ldr	r3, [pc, #396]	; (8004a60 <HAL_RCC_ClockConfig+0x1b8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d001      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0b8      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d020      	beq.n	8004932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048fc:	4b59      	ldr	r3, [pc, #356]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	4a58      	ldr	r2, [pc, #352]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004906:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004914:	4b53      	ldr	r3, [pc, #332]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	4a52      	ldr	r2, [pc, #328]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800491e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004920:	4b50      	ldr	r3, [pc, #320]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	494d      	ldr	r1, [pc, #308]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	4313      	orrs	r3, r2
 8004930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d044      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d107      	bne.n	8004956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004946:	4b47      	ldr	r3, [pc, #284]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d119      	bne.n	8004986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e07f      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b02      	cmp	r3, #2
 800495c:	d003      	beq.n	8004966 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004962:	2b03      	cmp	r3, #3
 8004964:	d107      	bne.n	8004976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004966:	4b3f      	ldr	r3, [pc, #252]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d109      	bne.n	8004986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e06f      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004976:	4b3b      	ldr	r3, [pc, #236]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e067      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004986:	4b37      	ldr	r3, [pc, #220]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f023 0203 	bic.w	r2, r3, #3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	4934      	ldr	r1, [pc, #208]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	4313      	orrs	r3, r2
 8004996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004998:	f7fd fc1c 	bl	80021d4 <HAL_GetTick>
 800499c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a0:	f7fd fc18 	bl	80021d4 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e04f      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b6:	4b2b      	ldr	r3, [pc, #172]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 020c 	and.w	r2, r3, #12
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d1eb      	bne.n	80049a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049c8:	4b25      	ldr	r3, [pc, #148]	; (8004a60 <HAL_RCC_ClockConfig+0x1b8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d20c      	bcs.n	80049f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d6:	4b22      	ldr	r3, [pc, #136]	; (8004a60 <HAL_RCC_ClockConfig+0x1b8>)
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049de:	4b20      	ldr	r3, [pc, #128]	; (8004a60 <HAL_RCC_ClockConfig+0x1b8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d001      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e032      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d008      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049fc:	4b19      	ldr	r3, [pc, #100]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	4916      	ldr	r1, [pc, #88]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d009      	beq.n	8004a2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a1a:	4b12      	ldr	r3, [pc, #72]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	490e      	ldr	r1, [pc, #56]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a2e:	f000 f821 	bl	8004a74 <HAL_RCC_GetSysClockFreq>
 8004a32:	4602      	mov	r2, r0
 8004a34:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	091b      	lsrs	r3, r3, #4
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	490a      	ldr	r1, [pc, #40]	; (8004a68 <HAL_RCC_ClockConfig+0x1c0>)
 8004a40:	5ccb      	ldrb	r3, [r1, r3]
 8004a42:	fa22 f303 	lsr.w	r3, r2, r3
 8004a46:	4a09      	ldr	r2, [pc, #36]	; (8004a6c <HAL_RCC_ClockConfig+0x1c4>)
 8004a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a4a:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fd f9b0 	bl	8001db4 <HAL_InitTick>

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40023c00 	.word	0x40023c00
 8004a64:	40023800 	.word	0x40023800
 8004a68:	08012098 	.word	0x08012098
 8004a6c:	20000000 	.word	0x20000000
 8004a70:	20000004 	.word	0x20000004

08004a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a78:	b094      	sub	sp, #80	; 0x50
 8004a7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a80:	2300      	movs	r3, #0
 8004a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a84:	2300      	movs	r3, #0
 8004a86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a8c:	4b79      	ldr	r3, [pc, #484]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 030c 	and.w	r3, r3, #12
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d00d      	beq.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	f200 80e1 	bhi.w	8004c60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d003      	beq.n	8004aae <HAL_RCC_GetSysClockFreq+0x3a>
 8004aa6:	e0db      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004aa8:	4b73      	ldr	r3, [pc, #460]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8004aaa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004aac:	e0db      	b.n	8004c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aae:	4b73      	ldr	r3, [pc, #460]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x208>)
 8004ab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ab2:	e0d8      	b.n	8004c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ab4:	4b6f      	ldr	r3, [pc, #444]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004abc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004abe:	4b6d      	ldr	r3, [pc, #436]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d063      	beq.n	8004b92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aca:	4b6a      	ldr	r3, [pc, #424]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	099b      	lsrs	r3, r3, #6
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ad4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004adc:	633b      	str	r3, [r7, #48]	; 0x30
 8004ade:	2300      	movs	r3, #0
 8004ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ae2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ae6:	4622      	mov	r2, r4
 8004ae8:	462b      	mov	r3, r5
 8004aea:	f04f 0000 	mov.w	r0, #0
 8004aee:	f04f 0100 	mov.w	r1, #0
 8004af2:	0159      	lsls	r1, r3, #5
 8004af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004af8:	0150      	lsls	r0, r2, #5
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4621      	mov	r1, r4
 8004b00:	1a51      	subs	r1, r2, r1
 8004b02:	6139      	str	r1, [r7, #16]
 8004b04:	4629      	mov	r1, r5
 8004b06:	eb63 0301 	sbc.w	r3, r3, r1
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b18:	4659      	mov	r1, fp
 8004b1a:	018b      	lsls	r3, r1, #6
 8004b1c:	4651      	mov	r1, sl
 8004b1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b22:	4651      	mov	r1, sl
 8004b24:	018a      	lsls	r2, r1, #6
 8004b26:	4651      	mov	r1, sl
 8004b28:	ebb2 0801 	subs.w	r8, r2, r1
 8004b2c:	4659      	mov	r1, fp
 8004b2e:	eb63 0901 	sbc.w	r9, r3, r1
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b46:	4690      	mov	r8, r2
 8004b48:	4699      	mov	r9, r3
 8004b4a:	4623      	mov	r3, r4
 8004b4c:	eb18 0303 	adds.w	r3, r8, r3
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	462b      	mov	r3, r5
 8004b54:	eb49 0303 	adc.w	r3, r9, r3
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b66:	4629      	mov	r1, r5
 8004b68:	024b      	lsls	r3, r1, #9
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b70:	4621      	mov	r1, r4
 8004b72:	024a      	lsls	r2, r1, #9
 8004b74:	4610      	mov	r0, r2
 8004b76:	4619      	mov	r1, r3
 8004b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b84:	f7fc f810 	bl	8000ba8 <__aeabi_uldivmod>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b90:	e058      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b92:	4b38      	ldr	r3, [pc, #224]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	099b      	lsrs	r3, r3, #6
 8004b98:	2200      	movs	r2, #0
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ba2:	623b      	str	r3, [r7, #32]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bac:	4642      	mov	r2, r8
 8004bae:	464b      	mov	r3, r9
 8004bb0:	f04f 0000 	mov.w	r0, #0
 8004bb4:	f04f 0100 	mov.w	r1, #0
 8004bb8:	0159      	lsls	r1, r3, #5
 8004bba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bbe:	0150      	lsls	r0, r2, #5
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4641      	mov	r1, r8
 8004bc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bca:	4649      	mov	r1, r9
 8004bcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004be0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004be4:	ebb2 040a 	subs.w	r4, r2, sl
 8004be8:	eb63 050b 	sbc.w	r5, r3, fp
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	00eb      	lsls	r3, r5, #3
 8004bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bfa:	00e2      	lsls	r2, r4, #3
 8004bfc:	4614      	mov	r4, r2
 8004bfe:	461d      	mov	r5, r3
 8004c00:	4643      	mov	r3, r8
 8004c02:	18e3      	adds	r3, r4, r3
 8004c04:	603b      	str	r3, [r7, #0]
 8004c06:	464b      	mov	r3, r9
 8004c08:	eb45 0303 	adc.w	r3, r5, r3
 8004c0c:	607b      	str	r3, [r7, #4]
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	028b      	lsls	r3, r1, #10
 8004c1e:	4621      	mov	r1, r4
 8004c20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c24:	4621      	mov	r1, r4
 8004c26:	028a      	lsls	r2, r1, #10
 8004c28:	4610      	mov	r0, r2
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c2e:	2200      	movs	r2, #0
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	61fa      	str	r2, [r7, #28]
 8004c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c38:	f7fb ffb6 	bl	8000ba8 <__aeabi_uldivmod>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4613      	mov	r3, r2
 8004c42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c44:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	0c1b      	lsrs	r3, r3, #16
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	3301      	adds	r3, #1
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c5e:	e002      	b.n	8004c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3750      	adds	r7, #80	; 0x50
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c72:	bf00      	nop
 8004c74:	40023800 	.word	0x40023800
 8004c78:	00f42400 	.word	0x00f42400
 8004c7c:	007a1200 	.word	0x007a1200

08004c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c84:	4b03      	ldr	r3, [pc, #12]	; (8004c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c86:	681b      	ldr	r3, [r3, #0]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	20000000 	.word	0x20000000

08004c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c9c:	f7ff fff0 	bl	8004c80 <HAL_RCC_GetHCLKFreq>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	0a9b      	lsrs	r3, r3, #10
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	4903      	ldr	r1, [pc, #12]	; (8004cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cae:	5ccb      	ldrb	r3, [r1, r3]
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	080120a8 	.word	0x080120a8

08004cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cc4:	f7ff ffdc 	bl	8004c80 <HAL_RCC_GetHCLKFreq>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	0b5b      	lsrs	r3, r3, #13
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	4903      	ldr	r1, [pc, #12]	; (8004ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cd6:	5ccb      	ldrb	r3, [r1, r3]
 8004cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	080120a8 	.word	0x080120a8

08004ce8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	220f      	movs	r2, #15
 8004cf6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004cf8:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <HAL_RCC_GetClockConfig+0x5c>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 0203 	and.w	r2, r3, #3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d04:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <HAL_RCC_GetClockConfig+0x5c>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d10:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <HAL_RCC_GetClockConfig+0x5c>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d1c:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <HAL_RCC_GetClockConfig+0x5c>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	08db      	lsrs	r3, r3, #3
 8004d22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d2a:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <HAL_RCC_GetClockConfig+0x60>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0207 	and.w	r2, r3, #7
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	601a      	str	r2, [r3, #0]
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40023800 	.word	0x40023800
 8004d48:	40023c00 	.word	0x40023c00

08004d4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e07b      	b.n	8004e56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d108      	bne.n	8004d78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d6e:	d009      	beq.n	8004d84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	61da      	str	r2, [r3, #28]
 8004d76:	e005      	b.n	8004d84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fc feec 	bl	8001b7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	431a      	orrs	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e08:	ea42 0103 	orr.w	r1, r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	0c1b      	lsrs	r3, r3, #16
 8004e22:	f003 0104 	and.w	r1, r3, #4
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	f003 0210 	and.w	r2, r3, #16
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_SPI_Transmit_DMA+0x20>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e09b      	b.n	8004fb8 <HAL_SPI_Transmit_DMA+0x158>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d002      	beq.n	8004e9a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004e94:	2302      	movs	r3, #2
 8004e96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e98:	e089      	b.n	8004fae <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <HAL_SPI_Transmit_DMA+0x46>
 8004ea0:	88fb      	ldrh	r3, [r7, #6]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d102      	bne.n	8004eac <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004eaa:	e080      	b.n	8004fae <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2203      	movs	r2, #3
 8004eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	88fa      	ldrh	r2, [r7, #6]
 8004ec4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	88fa      	ldrh	r2, [r7, #6]
 8004eca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef2:	d10f      	bne.n	8004f14 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f18:	4a29      	ldr	r2, [pc, #164]	; (8004fc0 <HAL_SPI_Transmit_DMA+0x160>)
 8004f1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f20:	4a28      	ldr	r2, [pc, #160]	; (8004fc4 <HAL_SPI_Transmit_DMA+0x164>)
 8004f22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f28:	4a27      	ldr	r2, [pc, #156]	; (8004fc8 <HAL_SPI_Transmit_DMA+0x168>)
 8004f2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f30:	2200      	movs	r2, #0
 8004f32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	330c      	adds	r3, #12
 8004f44:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f4a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004f4c:	f7fd fb02 	bl	8002554 <HAL_DMA_Start_IT>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00c      	beq.n	8004f70 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	f043 0210 	orr.w	r2, r3, #16
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004f6e:	e01e      	b.n	8004fae <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7a:	2b40      	cmp	r3, #64	; 0x40
 8004f7c:	d007      	beq.n	8004f8e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f8c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0220 	orr.w	r2, r2, #32
 8004f9c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f042 0202 	orr.w	r2, r2, #2
 8004fac:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	080055cd 	.word	0x080055cd
 8004fc4:	080053ed 	.word	0x080053ed
 8004fc8:	08005621 	.word	0x08005621

08004fcc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d110      	bne.n	8005008 <HAL_SPI_Receive_DMA+0x3c>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fee:	d10b      	bne.n	8005008 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004ff8:	88fb      	ldrh	r3, [r7, #6]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 f8ac 	bl	800515c <HAL_SPI_TransmitReceive_DMA>
 8005004:	4603      	mov	r3, r0
 8005006:	e09f      	b.n	8005148 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_SPI_Receive_DMA+0x4a>
 8005012:	2302      	movs	r3, #2
 8005014:	e098      	b.n	8005148 <HAL_SPI_Receive_DMA+0x17c>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b01      	cmp	r3, #1
 8005028:	d002      	beq.n	8005030 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800502a:	2302      	movs	r3, #2
 800502c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800502e:	e086      	b.n	800513e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <HAL_SPI_Receive_DMA+0x70>
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d102      	bne.n	8005042 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005040:	e07d      	b.n	800513e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2204      	movs	r2, #4
 8005046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	88fa      	ldrh	r2, [r7, #6]
 800505a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	88fa      	ldrh	r2, [r7, #6]
 8005060:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005082:	d10f      	bne.n	80050a4 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005092:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a8:	4a29      	ldr	r2, [pc, #164]	; (8005150 <HAL_SPI_Receive_DMA+0x184>)
 80050aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b0:	4a28      	ldr	r2, [pc, #160]	; (8005154 <HAL_SPI_Receive_DMA+0x188>)
 80050b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b8:	4a27      	ldr	r2, [pc, #156]	; (8005158 <HAL_SPI_Receive_DMA+0x18c>)
 80050ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c0:	2200      	movs	r2, #0
 80050c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	330c      	adds	r3, #12
 80050ce:	4619      	mov	r1, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050da:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80050dc:	f7fd fa3a 	bl	8002554 <HAL_DMA_Start_IT>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00c      	beq.n	8005100 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	f043 0210 	orr.w	r2, r3, #16
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80050fe:	e01e      	b.n	800513e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510a:	2b40      	cmp	r3, #64	; 0x40
 800510c:	d007      	beq.n	800511e <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800511c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0220 	orr.w	r2, r2, #32
 800512c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0201 	orr.w	r2, r2, #1
 800513c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005146:	7dfb      	ldrb	r3, [r7, #23]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	080055e9 	.word	0x080055e9
 8005154:	08005495 	.word	0x08005495
 8005158:	08005621 	.word	0x08005621

0800515c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_SPI_TransmitReceive_DMA+0x20>
 8005178:	2302      	movs	r3, #2
 800517a:	e0e3      	b.n	8005344 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800518a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005192:	7dbb      	ldrb	r3, [r7, #22]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d00d      	beq.n	80051b4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800519e:	d106      	bne.n	80051ae <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d102      	bne.n	80051ae <HAL_SPI_TransmitReceive_DMA+0x52>
 80051a8:	7dbb      	ldrb	r3, [r7, #22]
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d002      	beq.n	80051b4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80051ae:	2302      	movs	r3, #2
 80051b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051b2:	e0c2      	b.n	800533a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80051c0:	887b      	ldrh	r3, [r7, #2]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d102      	bne.n	80051cc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051ca:	e0b6      	b.n	800533a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d003      	beq.n	80051e0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2205      	movs	r2, #5
 80051dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	887a      	ldrh	r2, [r7, #2]
 80051f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	887a      	ldrh	r2, [r7, #2]
 80051f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	887a      	ldrh	r2, [r7, #2]
 8005202:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	887a      	ldrh	r2, [r7, #2]
 8005208:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b04      	cmp	r3, #4
 8005220:	d108      	bne.n	8005234 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005226:	4a49      	ldr	r2, [pc, #292]	; (800534c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005228:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800522e:	4a48      	ldr	r2, [pc, #288]	; (8005350 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005230:	63da      	str	r2, [r3, #60]	; 0x3c
 8005232:	e007      	b.n	8005244 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005238:	4a46      	ldr	r2, [pc, #280]	; (8005354 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800523a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005240:	4a45      	ldr	r2, [pc, #276]	; (8005358 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8005242:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005248:	4a44      	ldr	r2, [pc, #272]	; (800535c <HAL_SPI_TransmitReceive_DMA+0x200>)
 800524a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005250:	2200      	movs	r2, #0
 8005252:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	330c      	adds	r3, #12
 800525e:	4619      	mov	r1, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800526a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800526c:	f7fd f972 	bl	8002554 <HAL_DMA_Start_IT>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00c      	beq.n	8005290 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527a:	f043 0210 	orr.w	r2, r3, #16
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800528e:	e054      	b.n	800533a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a4:	2200      	movs	r2, #0
 80052a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ac:	2200      	movs	r2, #0
 80052ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b4:	2200      	movs	r2, #0
 80052b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052bc:	2200      	movs	r2, #0
 80052be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c8:	4619      	mov	r1, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	330c      	adds	r3, #12
 80052d0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052d6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80052d8:	f7fd f93c 	bl	8002554 <HAL_DMA_Start_IT>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00c      	beq.n	80052fc <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e6:	f043 0210 	orr.w	r2, r3, #16
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80052fa:	e01e      	b.n	800533a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005306:	2b40      	cmp	r3, #64	; 0x40
 8005308:	d007      	beq.n	800531a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005318:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0220 	orr.w	r2, r2, #32
 8005328:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0202 	orr.w	r2, r2, #2
 8005338:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005342:	7dfb      	ldrb	r3, [r7, #23]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	080055e9 	.word	0x080055e9
 8005350:	08005495 	.word	0x08005495
 8005354:	08005605 	.word	0x08005605
 8005358:	0800553d 	.word	0x0800553d
 800535c:	08005621 	.word	0x08005621

08005360 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053fa:	f7fc feeb 	bl	80021d4 <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800540e:	d03b      	beq.n	8005488 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0220 	bic.w	r2, r2, #32
 800541e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0202 	bic.w	r2, r2, #2
 800542e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	2164      	movs	r1, #100	; 0x64
 8005434:	6978      	ldr	r0, [r7, #20]
 8005436:	f000 fa01 	bl	800583c <SPI_EndRxTxTransaction>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005444:	f043 0220 	orr.w	r2, r3, #32
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005454:	2300      	movs	r3, #0
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2200      	movs	r2, #0
 800546e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005480:	6978      	ldr	r0, [r7, #20]
 8005482:	f7ff ffa9 	bl	80053d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005486:	e002      	b.n	800548e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005488:	6978      	ldr	r0, [r7, #20]
 800548a:	f7ff ff69 	bl	8005360 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054a2:	f7fc fe97 	bl	80021d4 <HAL_GetTick>
 80054a6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b6:	d03b      	beq.n	8005530 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0220 	bic.w	r2, r2, #32
 80054c6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10d      	bne.n	80054ec <SPI_DMAReceiveCplt+0x58>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054d8:	d108      	bne.n	80054ec <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0203 	bic.w	r2, r2, #3
 80054e8:	605a      	str	r2, [r3, #4]
 80054ea:	e007      	b.n	80054fc <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0201 	bic.w	r2, r2, #1
 80054fa:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	2164      	movs	r1, #100	; 0x64
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f935 	bl	8005770 <SPI_EndRxTransaction>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f7ff ff55 	bl	80053d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800552e:	e002      	b.n	8005536 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f7ff ff1f 	bl	8005374 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800554a:	f7fc fe43 	bl	80021d4 <HAL_GetTick>
 800554e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800555e:	d02f      	beq.n	80055c0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0220 	bic.w	r2, r2, #32
 800556e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	2164      	movs	r1, #100	; 0x64
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f961 	bl	800583c <SPI_EndRxTxTransaction>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0203 	bic.w	r2, r2, #3
 800559a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f7ff ff0d 	bl	80053d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80055be:	e002      	b.n	80055c6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f7ff fee1 	bl	8005388 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f7ff fede 	bl	800539c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055e0:	bf00      	nop
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f7ff feda 	bl	80053b0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055fc:	bf00      	nop
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005610:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f7ff fed6 	bl	80053c4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0203 	bic.w	r2, r2, #3
 800563c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	f043 0210 	orr.w	r2, r3, #16
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f7ff fec0 	bl	80053d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	4613      	mov	r3, r2
 800566e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005670:	f7fc fdb0 	bl	80021d4 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	4413      	add	r3, r2
 800567e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005680:	f7fc fda8 	bl	80021d4 <HAL_GetTick>
 8005684:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005686:	4b39      	ldr	r3, [pc, #228]	; (800576c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	015b      	lsls	r3, r3, #5
 800568c:	0d1b      	lsrs	r3, r3, #20
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	fb02 f303 	mul.w	r3, r2, r3
 8005694:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005696:	e054      	b.n	8005742 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569e:	d050      	beq.n	8005742 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056a0:	f7fc fd98 	bl	80021d4 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	69fa      	ldr	r2, [r7, #28]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d902      	bls.n	80056b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d13d      	bne.n	8005732 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056ce:	d111      	bne.n	80056f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d8:	d004      	beq.n	80056e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e2:	d107      	bne.n	80056f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056fc:	d10f      	bne.n	800571e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800571c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e017      	b.n	8005762 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	3b01      	subs	r3, #1
 8005740:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4013      	ands	r3, r2
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	429a      	cmp	r2, r3
 8005750:	bf0c      	ite	eq
 8005752:	2301      	moveq	r3, #1
 8005754:	2300      	movne	r3, #0
 8005756:	b2db      	uxtb	r3, r3
 8005758:	461a      	mov	r2, r3
 800575a:	79fb      	ldrb	r3, [r7, #7]
 800575c:	429a      	cmp	r2, r3
 800575e:	d19b      	bne.n	8005698 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3720      	adds	r7, #32
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20000000 	.word	0x20000000

08005770 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005784:	d111      	bne.n	80057aa <SPI_EndRxTransaction+0x3a>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800578e:	d004      	beq.n	800579a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005798:	d107      	bne.n	80057aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057b2:	d12a      	bne.n	800580a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057bc:	d012      	beq.n	80057e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2200      	movs	r2, #0
 80057c6:	2180      	movs	r1, #128	; 0x80
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f7ff ff49 	bl	8005660 <SPI_WaitFlagStateUntilTimeout>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d02d      	beq.n	8005830 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d8:	f043 0220 	orr.w	r2, r3, #32
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e026      	b.n	8005832 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2200      	movs	r2, #0
 80057ec:	2101      	movs	r1, #1
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff ff36 	bl	8005660 <SPI_WaitFlagStateUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d01a      	beq.n	8005830 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fe:	f043 0220 	orr.w	r2, r3, #32
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e013      	b.n	8005832 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2200      	movs	r2, #0
 8005812:	2101      	movs	r1, #1
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f7ff ff23 	bl	8005660 <SPI_WaitFlagStateUntilTimeout>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d007      	beq.n	8005830 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005824:	f043 0220 	orr.w	r2, r3, #32
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e000      	b.n	8005832 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af02      	add	r7, sp, #8
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005848:	4b1b      	ldr	r3, [pc, #108]	; (80058b8 <SPI_EndRxTxTransaction+0x7c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a1b      	ldr	r2, [pc, #108]	; (80058bc <SPI_EndRxTxTransaction+0x80>)
 800584e:	fba2 2303 	umull	r2, r3, r2, r3
 8005852:	0d5b      	lsrs	r3, r3, #21
 8005854:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005858:	fb02 f303 	mul.w	r3, r2, r3
 800585c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005866:	d112      	bne.n	800588e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2200      	movs	r2, #0
 8005870:	2180      	movs	r1, #128	; 0x80
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f7ff fef4 	bl	8005660 <SPI_WaitFlagStateUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d016      	beq.n	80058ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005882:	f043 0220 	orr.w	r2, r3, #32
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e00f      	b.n	80058ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00a      	beq.n	80058aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	3b01      	subs	r3, #1
 8005898:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a4:	2b80      	cmp	r3, #128	; 0x80
 80058a6:	d0f2      	beq.n	800588e <SPI_EndRxTxTransaction+0x52>
 80058a8:	e000      	b.n	80058ac <SPI_EndRxTxTransaction+0x70>
        break;
 80058aa:	bf00      	nop
  }

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20000000 	.word	0x20000000
 80058bc:	165e9f81 	.word	0x165e9f81

080058c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e041      	b.n	8005956 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fc f9f4 	bl	8001cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	4610      	mov	r0, r2
 8005900:	f000 f9ce 	bl	8005ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b01      	cmp	r3, #1
 8005972:	d001      	beq.n	8005978 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e04e      	b.n	8005a16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0201 	orr.w	r2, r2, #1
 800598e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a23      	ldr	r2, [pc, #140]	; (8005a24 <HAL_TIM_Base_Start_IT+0xc4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d022      	beq.n	80059e0 <HAL_TIM_Base_Start_IT+0x80>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a2:	d01d      	beq.n	80059e0 <HAL_TIM_Base_Start_IT+0x80>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1f      	ldr	r2, [pc, #124]	; (8005a28 <HAL_TIM_Base_Start_IT+0xc8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d018      	beq.n	80059e0 <HAL_TIM_Base_Start_IT+0x80>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a1e      	ldr	r2, [pc, #120]	; (8005a2c <HAL_TIM_Base_Start_IT+0xcc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d013      	beq.n	80059e0 <HAL_TIM_Base_Start_IT+0x80>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a1c      	ldr	r2, [pc, #112]	; (8005a30 <HAL_TIM_Base_Start_IT+0xd0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00e      	beq.n	80059e0 <HAL_TIM_Base_Start_IT+0x80>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1b      	ldr	r2, [pc, #108]	; (8005a34 <HAL_TIM_Base_Start_IT+0xd4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d009      	beq.n	80059e0 <HAL_TIM_Base_Start_IT+0x80>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a19      	ldr	r2, [pc, #100]	; (8005a38 <HAL_TIM_Base_Start_IT+0xd8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d004      	beq.n	80059e0 <HAL_TIM_Base_Start_IT+0x80>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a18      	ldr	r2, [pc, #96]	; (8005a3c <HAL_TIM_Base_Start_IT+0xdc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d111      	bne.n	8005a04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b06      	cmp	r3, #6
 80059f0:	d010      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0201 	orr.w	r2, r2, #1
 8005a00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a02:	e007      	b.n	8005a14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0201 	orr.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	40010000 	.word	0x40010000
 8005a28:	40000400 	.word	0x40000400
 8005a2c:	40000800 	.word	0x40000800
 8005a30:	40000c00 	.word	0x40000c00
 8005a34:	40010400 	.word	0x40010400
 8005a38:	40014000 	.word	0x40014000
 8005a3c:	40001800 	.word	0x40001800

08005a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d122      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d11b      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0202 	mvn.w	r2, #2
 8005a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f8ee 	bl	8005c64 <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f8e0 	bl	8005c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f8f1 	bl	8005c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d122      	bne.n	8005af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d11b      	bne.n	8005af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0204 	mvn.w	r2, #4
 8005ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f8c4 	bl	8005c64 <HAL_TIM_IC_CaptureCallback>
 8005adc:	e005      	b.n	8005aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f8b6 	bl	8005c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f8c7 	bl	8005c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d122      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d11b      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0208 	mvn.w	r2, #8
 8005b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2204      	movs	r2, #4
 8005b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f89a 	bl	8005c64 <HAL_TIM_IC_CaptureCallback>
 8005b30:	e005      	b.n	8005b3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f88c 	bl	8005c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f89d 	bl	8005c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0310 	and.w	r3, r3, #16
 8005b4e:	2b10      	cmp	r3, #16
 8005b50:	d122      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d11b      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0210 	mvn.w	r2, #16
 8005b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2208      	movs	r2, #8
 8005b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f870 	bl	8005c64 <HAL_TIM_IC_CaptureCallback>
 8005b84:	e005      	b.n	8005b92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f862 	bl	8005c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f873 	bl	8005c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d10e      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d107      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0201 	mvn.w	r2, #1
 8005bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fb ff98 	bl	8001af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bce:	2b80      	cmp	r3, #128	; 0x80
 8005bd0:	d10e      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bdc:	2b80      	cmp	r3, #128	; 0x80
 8005bde:	d107      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f97e 	bl	8005eec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfa:	2b40      	cmp	r3, #64	; 0x40
 8005bfc:	d10e      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c08:	2b40      	cmp	r3, #64	; 0x40
 8005c0a:	d107      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f838 	bl	8005c8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	d10e      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0320 	and.w	r3, r3, #32
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d107      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0220 	mvn.w	r2, #32
 8005c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f948 	bl	8005ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c48:	bf00      	nop
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a40      	ldr	r2, [pc, #256]	; (8005db4 <TIM_Base_SetConfig+0x114>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d013      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cbe:	d00f      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a3d      	ldr	r2, [pc, #244]	; (8005db8 <TIM_Base_SetConfig+0x118>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00b      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a3c      	ldr	r2, [pc, #240]	; (8005dbc <TIM_Base_SetConfig+0x11c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d007      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a3b      	ldr	r2, [pc, #236]	; (8005dc0 <TIM_Base_SetConfig+0x120>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d003      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a3a      	ldr	r2, [pc, #232]	; (8005dc4 <TIM_Base_SetConfig+0x124>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d108      	bne.n	8005cf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a2f      	ldr	r2, [pc, #188]	; (8005db4 <TIM_Base_SetConfig+0x114>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d02b      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d00:	d027      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a2c      	ldr	r2, [pc, #176]	; (8005db8 <TIM_Base_SetConfig+0x118>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d023      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a2b      	ldr	r2, [pc, #172]	; (8005dbc <TIM_Base_SetConfig+0x11c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d01f      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a2a      	ldr	r2, [pc, #168]	; (8005dc0 <TIM_Base_SetConfig+0x120>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d01b      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a29      	ldr	r2, [pc, #164]	; (8005dc4 <TIM_Base_SetConfig+0x124>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d017      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a28      	ldr	r2, [pc, #160]	; (8005dc8 <TIM_Base_SetConfig+0x128>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d013      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a27      	ldr	r2, [pc, #156]	; (8005dcc <TIM_Base_SetConfig+0x12c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00f      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a26      	ldr	r2, [pc, #152]	; (8005dd0 <TIM_Base_SetConfig+0x130>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00b      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a25      	ldr	r2, [pc, #148]	; (8005dd4 <TIM_Base_SetConfig+0x134>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d007      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a24      	ldr	r2, [pc, #144]	; (8005dd8 <TIM_Base_SetConfig+0x138>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d003      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a23      	ldr	r2, [pc, #140]	; (8005ddc <TIM_Base_SetConfig+0x13c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d108      	bne.n	8005d64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a0a      	ldr	r2, [pc, #40]	; (8005db4 <TIM_Base_SetConfig+0x114>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d003      	beq.n	8005d98 <TIM_Base_SetConfig+0xf8>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a0c      	ldr	r2, [pc, #48]	; (8005dc4 <TIM_Base_SetConfig+0x124>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d103      	bne.n	8005da0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	615a      	str	r2, [r3, #20]
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	40010000 	.word	0x40010000
 8005db8:	40000400 	.word	0x40000400
 8005dbc:	40000800 	.word	0x40000800
 8005dc0:	40000c00 	.word	0x40000c00
 8005dc4:	40010400 	.word	0x40010400
 8005dc8:	40014000 	.word	0x40014000
 8005dcc:	40014400 	.word	0x40014400
 8005dd0:	40014800 	.word	0x40014800
 8005dd4:	40001800 	.word	0x40001800
 8005dd8:	40001c00 	.word	0x40001c00
 8005ddc:	40002000 	.word	0x40002000

08005de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e05a      	b.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a21      	ldr	r2, [pc, #132]	; (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d022      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e44:	d01d      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1d      	ldr	r2, [pc, #116]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d018      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a1b      	ldr	r2, [pc, #108]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d013      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a1a      	ldr	r2, [pc, #104]	; (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d00e      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a18      	ldr	r2, [pc, #96]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d009      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a17      	ldr	r2, [pc, #92]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d004      	beq.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a15      	ldr	r2, [pc, #84]	; (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d10c      	bne.n	8005e9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40010000 	.word	0x40010000
 8005ec0:	40000400 	.word	0x40000400
 8005ec4:	40000800 	.word	0x40000800
 8005ec8:	40000c00 	.word	0x40000c00
 8005ecc:	40010400 	.word	0x40010400
 8005ed0:	40014000 	.word	0x40014000
 8005ed4:	40001800 	.word	0x40001800

08005ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e03f      	b.n	8005f92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d106      	bne.n	8005f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fb fefc 	bl	8001d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2224      	movs	r2, #36	; 0x24
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f829 	bl	8005f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691a      	ldr	r2, [r3, #16]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695a      	ldr	r2, [r3, #20]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fa0:	b0c0      	sub	sp, #256	; 0x100
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb8:	68d9      	ldr	r1, [r3, #12]
 8005fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	ea40 0301 	orr.w	r3, r0, r1
 8005fc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ff4:	f021 010c 	bic.w	r1, r1, #12
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006002:	430b      	orrs	r3, r1
 8006004:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006016:	6999      	ldr	r1, [r3, #24]
 8006018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	ea40 0301 	orr.w	r3, r0, r1
 8006022:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	4b8f      	ldr	r3, [pc, #572]	; (8006268 <UART_SetConfig+0x2cc>)
 800602c:	429a      	cmp	r2, r3
 800602e:	d005      	beq.n	800603c <UART_SetConfig+0xa0>
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	4b8d      	ldr	r3, [pc, #564]	; (800626c <UART_SetConfig+0x2d0>)
 8006038:	429a      	cmp	r2, r3
 800603a:	d104      	bne.n	8006046 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800603c:	f7fe fe40 	bl	8004cc0 <HAL_RCC_GetPCLK2Freq>
 8006040:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006044:	e003      	b.n	800604e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006046:	f7fe fe27 	bl	8004c98 <HAL_RCC_GetPCLK1Freq>
 800604a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800604e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006058:	f040 810c 	bne.w	8006274 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800605c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006060:	2200      	movs	r2, #0
 8006062:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006066:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800606a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800606e:	4622      	mov	r2, r4
 8006070:	462b      	mov	r3, r5
 8006072:	1891      	adds	r1, r2, r2
 8006074:	65b9      	str	r1, [r7, #88]	; 0x58
 8006076:	415b      	adcs	r3, r3
 8006078:	65fb      	str	r3, [r7, #92]	; 0x5c
 800607a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800607e:	4621      	mov	r1, r4
 8006080:	eb12 0801 	adds.w	r8, r2, r1
 8006084:	4629      	mov	r1, r5
 8006086:	eb43 0901 	adc.w	r9, r3, r1
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	f04f 0300 	mov.w	r3, #0
 8006092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800609a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800609e:	4690      	mov	r8, r2
 80060a0:	4699      	mov	r9, r3
 80060a2:	4623      	mov	r3, r4
 80060a4:	eb18 0303 	adds.w	r3, r8, r3
 80060a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060ac:	462b      	mov	r3, r5
 80060ae:	eb49 0303 	adc.w	r3, r9, r3
 80060b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060ca:	460b      	mov	r3, r1
 80060cc:	18db      	adds	r3, r3, r3
 80060ce:	653b      	str	r3, [r7, #80]	; 0x50
 80060d0:	4613      	mov	r3, r2
 80060d2:	eb42 0303 	adc.w	r3, r2, r3
 80060d6:	657b      	str	r3, [r7, #84]	; 0x54
 80060d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060e0:	f7fa fd62 	bl	8000ba8 <__aeabi_uldivmod>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4b61      	ldr	r3, [pc, #388]	; (8006270 <UART_SetConfig+0x2d4>)
 80060ea:	fba3 2302 	umull	r2, r3, r3, r2
 80060ee:	095b      	lsrs	r3, r3, #5
 80060f0:	011c      	lsls	r4, r3, #4
 80060f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006100:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006104:	4642      	mov	r2, r8
 8006106:	464b      	mov	r3, r9
 8006108:	1891      	adds	r1, r2, r2
 800610a:	64b9      	str	r1, [r7, #72]	; 0x48
 800610c:	415b      	adcs	r3, r3
 800610e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006110:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006114:	4641      	mov	r1, r8
 8006116:	eb12 0a01 	adds.w	sl, r2, r1
 800611a:	4649      	mov	r1, r9
 800611c:	eb43 0b01 	adc.w	fp, r3, r1
 8006120:	f04f 0200 	mov.w	r2, #0
 8006124:	f04f 0300 	mov.w	r3, #0
 8006128:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800612c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006134:	4692      	mov	sl, r2
 8006136:	469b      	mov	fp, r3
 8006138:	4643      	mov	r3, r8
 800613a:	eb1a 0303 	adds.w	r3, sl, r3
 800613e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006142:	464b      	mov	r3, r9
 8006144:	eb4b 0303 	adc.w	r3, fp, r3
 8006148:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800614c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006158:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800615c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006160:	460b      	mov	r3, r1
 8006162:	18db      	adds	r3, r3, r3
 8006164:	643b      	str	r3, [r7, #64]	; 0x40
 8006166:	4613      	mov	r3, r2
 8006168:	eb42 0303 	adc.w	r3, r2, r3
 800616c:	647b      	str	r3, [r7, #68]	; 0x44
 800616e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006172:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006176:	f7fa fd17 	bl	8000ba8 <__aeabi_uldivmod>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	4611      	mov	r1, r2
 8006180:	4b3b      	ldr	r3, [pc, #236]	; (8006270 <UART_SetConfig+0x2d4>)
 8006182:	fba3 2301 	umull	r2, r3, r3, r1
 8006186:	095b      	lsrs	r3, r3, #5
 8006188:	2264      	movs	r2, #100	; 0x64
 800618a:	fb02 f303 	mul.w	r3, r2, r3
 800618e:	1acb      	subs	r3, r1, r3
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006196:	4b36      	ldr	r3, [pc, #216]	; (8006270 <UART_SetConfig+0x2d4>)
 8006198:	fba3 2302 	umull	r2, r3, r3, r2
 800619c:	095b      	lsrs	r3, r3, #5
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061a4:	441c      	add	r4, r3
 80061a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061b8:	4642      	mov	r2, r8
 80061ba:	464b      	mov	r3, r9
 80061bc:	1891      	adds	r1, r2, r2
 80061be:	63b9      	str	r1, [r7, #56]	; 0x38
 80061c0:	415b      	adcs	r3, r3
 80061c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061c8:	4641      	mov	r1, r8
 80061ca:	1851      	adds	r1, r2, r1
 80061cc:	6339      	str	r1, [r7, #48]	; 0x30
 80061ce:	4649      	mov	r1, r9
 80061d0:	414b      	adcs	r3, r1
 80061d2:	637b      	str	r3, [r7, #52]	; 0x34
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061e0:	4659      	mov	r1, fp
 80061e2:	00cb      	lsls	r3, r1, #3
 80061e4:	4651      	mov	r1, sl
 80061e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ea:	4651      	mov	r1, sl
 80061ec:	00ca      	lsls	r2, r1, #3
 80061ee:	4610      	mov	r0, r2
 80061f0:	4619      	mov	r1, r3
 80061f2:	4603      	mov	r3, r0
 80061f4:	4642      	mov	r2, r8
 80061f6:	189b      	adds	r3, r3, r2
 80061f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061fc:	464b      	mov	r3, r9
 80061fe:	460a      	mov	r2, r1
 8006200:	eb42 0303 	adc.w	r3, r2, r3
 8006204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006214:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006218:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800621c:	460b      	mov	r3, r1
 800621e:	18db      	adds	r3, r3, r3
 8006220:	62bb      	str	r3, [r7, #40]	; 0x28
 8006222:	4613      	mov	r3, r2
 8006224:	eb42 0303 	adc.w	r3, r2, r3
 8006228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800622a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800622e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006232:	f7fa fcb9 	bl	8000ba8 <__aeabi_uldivmod>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	4b0d      	ldr	r3, [pc, #52]	; (8006270 <UART_SetConfig+0x2d4>)
 800623c:	fba3 1302 	umull	r1, r3, r3, r2
 8006240:	095b      	lsrs	r3, r3, #5
 8006242:	2164      	movs	r1, #100	; 0x64
 8006244:	fb01 f303 	mul.w	r3, r1, r3
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	3332      	adds	r3, #50	; 0x32
 800624e:	4a08      	ldr	r2, [pc, #32]	; (8006270 <UART_SetConfig+0x2d4>)
 8006250:	fba2 2303 	umull	r2, r3, r2, r3
 8006254:	095b      	lsrs	r3, r3, #5
 8006256:	f003 0207 	and.w	r2, r3, #7
 800625a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4422      	add	r2, r4
 8006262:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006264:	e105      	b.n	8006472 <UART_SetConfig+0x4d6>
 8006266:	bf00      	nop
 8006268:	40011000 	.word	0x40011000
 800626c:	40011400 	.word	0x40011400
 8006270:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006278:	2200      	movs	r2, #0
 800627a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800627e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006282:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006286:	4642      	mov	r2, r8
 8006288:	464b      	mov	r3, r9
 800628a:	1891      	adds	r1, r2, r2
 800628c:	6239      	str	r1, [r7, #32]
 800628e:	415b      	adcs	r3, r3
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
 8006292:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006296:	4641      	mov	r1, r8
 8006298:	1854      	adds	r4, r2, r1
 800629a:	4649      	mov	r1, r9
 800629c:	eb43 0501 	adc.w	r5, r3, r1
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	00eb      	lsls	r3, r5, #3
 80062aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062ae:	00e2      	lsls	r2, r4, #3
 80062b0:	4614      	mov	r4, r2
 80062b2:	461d      	mov	r5, r3
 80062b4:	4643      	mov	r3, r8
 80062b6:	18e3      	adds	r3, r4, r3
 80062b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062bc:	464b      	mov	r3, r9
 80062be:	eb45 0303 	adc.w	r3, r5, r3
 80062c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	f04f 0300 	mov.w	r3, #0
 80062de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062e2:	4629      	mov	r1, r5
 80062e4:	008b      	lsls	r3, r1, #2
 80062e6:	4621      	mov	r1, r4
 80062e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062ec:	4621      	mov	r1, r4
 80062ee:	008a      	lsls	r2, r1, #2
 80062f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062f4:	f7fa fc58 	bl	8000ba8 <__aeabi_uldivmod>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4b60      	ldr	r3, [pc, #384]	; (8006480 <UART_SetConfig+0x4e4>)
 80062fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006302:	095b      	lsrs	r3, r3, #5
 8006304:	011c      	lsls	r4, r3, #4
 8006306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800630a:	2200      	movs	r2, #0
 800630c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006310:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006314:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006318:	4642      	mov	r2, r8
 800631a:	464b      	mov	r3, r9
 800631c:	1891      	adds	r1, r2, r2
 800631e:	61b9      	str	r1, [r7, #24]
 8006320:	415b      	adcs	r3, r3
 8006322:	61fb      	str	r3, [r7, #28]
 8006324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006328:	4641      	mov	r1, r8
 800632a:	1851      	adds	r1, r2, r1
 800632c:	6139      	str	r1, [r7, #16]
 800632e:	4649      	mov	r1, r9
 8006330:	414b      	adcs	r3, r1
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	f04f 0200 	mov.w	r2, #0
 8006338:	f04f 0300 	mov.w	r3, #0
 800633c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006340:	4659      	mov	r1, fp
 8006342:	00cb      	lsls	r3, r1, #3
 8006344:	4651      	mov	r1, sl
 8006346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800634a:	4651      	mov	r1, sl
 800634c:	00ca      	lsls	r2, r1, #3
 800634e:	4610      	mov	r0, r2
 8006350:	4619      	mov	r1, r3
 8006352:	4603      	mov	r3, r0
 8006354:	4642      	mov	r2, r8
 8006356:	189b      	adds	r3, r3, r2
 8006358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800635c:	464b      	mov	r3, r9
 800635e:	460a      	mov	r2, r1
 8006360:	eb42 0303 	adc.w	r3, r2, r3
 8006364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	67bb      	str	r3, [r7, #120]	; 0x78
 8006372:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006374:	f04f 0200 	mov.w	r2, #0
 8006378:	f04f 0300 	mov.w	r3, #0
 800637c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006380:	4649      	mov	r1, r9
 8006382:	008b      	lsls	r3, r1, #2
 8006384:	4641      	mov	r1, r8
 8006386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800638a:	4641      	mov	r1, r8
 800638c:	008a      	lsls	r2, r1, #2
 800638e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006392:	f7fa fc09 	bl	8000ba8 <__aeabi_uldivmod>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4b39      	ldr	r3, [pc, #228]	; (8006480 <UART_SetConfig+0x4e4>)
 800639c:	fba3 1302 	umull	r1, r3, r3, r2
 80063a0:	095b      	lsrs	r3, r3, #5
 80063a2:	2164      	movs	r1, #100	; 0x64
 80063a4:	fb01 f303 	mul.w	r3, r1, r3
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	3332      	adds	r3, #50	; 0x32
 80063ae:	4a34      	ldr	r2, [pc, #208]	; (8006480 <UART_SetConfig+0x4e4>)
 80063b0:	fba2 2303 	umull	r2, r3, r2, r3
 80063b4:	095b      	lsrs	r3, r3, #5
 80063b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063ba:	441c      	add	r4, r3
 80063bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063c0:	2200      	movs	r2, #0
 80063c2:	673b      	str	r3, [r7, #112]	; 0x70
 80063c4:	677a      	str	r2, [r7, #116]	; 0x74
 80063c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063ca:	4642      	mov	r2, r8
 80063cc:	464b      	mov	r3, r9
 80063ce:	1891      	adds	r1, r2, r2
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	415b      	adcs	r3, r3
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063da:	4641      	mov	r1, r8
 80063dc:	1851      	adds	r1, r2, r1
 80063de:	6039      	str	r1, [r7, #0]
 80063e0:	4649      	mov	r1, r9
 80063e2:	414b      	adcs	r3, r1
 80063e4:	607b      	str	r3, [r7, #4]
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063f2:	4659      	mov	r1, fp
 80063f4:	00cb      	lsls	r3, r1, #3
 80063f6:	4651      	mov	r1, sl
 80063f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063fc:	4651      	mov	r1, sl
 80063fe:	00ca      	lsls	r2, r1, #3
 8006400:	4610      	mov	r0, r2
 8006402:	4619      	mov	r1, r3
 8006404:	4603      	mov	r3, r0
 8006406:	4642      	mov	r2, r8
 8006408:	189b      	adds	r3, r3, r2
 800640a:	66bb      	str	r3, [r7, #104]	; 0x68
 800640c:	464b      	mov	r3, r9
 800640e:	460a      	mov	r2, r1
 8006410:	eb42 0303 	adc.w	r3, r2, r3
 8006414:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	663b      	str	r3, [r7, #96]	; 0x60
 8006420:	667a      	str	r2, [r7, #100]	; 0x64
 8006422:	f04f 0200 	mov.w	r2, #0
 8006426:	f04f 0300 	mov.w	r3, #0
 800642a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800642e:	4649      	mov	r1, r9
 8006430:	008b      	lsls	r3, r1, #2
 8006432:	4641      	mov	r1, r8
 8006434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006438:	4641      	mov	r1, r8
 800643a:	008a      	lsls	r2, r1, #2
 800643c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006440:	f7fa fbb2 	bl	8000ba8 <__aeabi_uldivmod>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <UART_SetConfig+0x4e4>)
 800644a:	fba3 1302 	umull	r1, r3, r3, r2
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	2164      	movs	r1, #100	; 0x64
 8006452:	fb01 f303 	mul.w	r3, r1, r3
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	3332      	adds	r3, #50	; 0x32
 800645c:	4a08      	ldr	r2, [pc, #32]	; (8006480 <UART_SetConfig+0x4e4>)
 800645e:	fba2 2303 	umull	r2, r3, r2, r3
 8006462:	095b      	lsrs	r3, r3, #5
 8006464:	f003 020f 	and.w	r2, r3, #15
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4422      	add	r2, r4
 8006470:	609a      	str	r2, [r3, #8]
}
 8006472:	bf00      	nop
 8006474:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006478:	46bd      	mov	sp, r7
 800647a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800647e:	bf00      	nop
 8006480:	51eb851f 	.word	0x51eb851f

08006484 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006484:	b084      	sub	sp, #16
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	f107 001c 	add.w	r0, r7, #28
 8006492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	2b01      	cmp	r3, #1
 800649a:	d122      	bne.n	80064e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80064b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d105      	bne.n	80064d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f001 fbee 	bl	8007cb8 <USB_CoreReset>
 80064dc:	4603      	mov	r3, r0
 80064de:	73fb      	strb	r3, [r7, #15]
 80064e0:	e01a      	b.n	8006518 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 fbe2 	bl	8007cb8 <USB_CoreReset>
 80064f4:	4603      	mov	r3, r0
 80064f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d106      	bne.n	800650c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	639a      	str	r2, [r3, #56]	; 0x38
 800650a:	e005      	b.n	8006518 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	2b01      	cmp	r3, #1
 800651c:	d10b      	bne.n	8006536 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f043 0206 	orr.w	r2, r3, #6
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f043 0220 	orr.w	r2, r3, #32
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006536:	7bfb      	ldrb	r3, [r7, #15]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006542:	b004      	add	sp, #16
 8006544:	4770      	bx	lr
	...

08006548 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	4613      	mov	r3, r2
 8006554:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006556:	79fb      	ldrb	r3, [r7, #7]
 8006558:	2b02      	cmp	r3, #2
 800655a:	d165      	bne.n	8006628 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4a41      	ldr	r2, [pc, #260]	; (8006664 <USB_SetTurnaroundTime+0x11c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d906      	bls.n	8006572 <USB_SetTurnaroundTime+0x2a>
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4a40      	ldr	r2, [pc, #256]	; (8006668 <USB_SetTurnaroundTime+0x120>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d202      	bcs.n	8006572 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800656c:	230f      	movs	r3, #15
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	e062      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	4a3c      	ldr	r2, [pc, #240]	; (8006668 <USB_SetTurnaroundTime+0x120>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d306      	bcc.n	8006588 <USB_SetTurnaroundTime+0x40>
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	4a3b      	ldr	r2, [pc, #236]	; (800666c <USB_SetTurnaroundTime+0x124>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d202      	bcs.n	8006588 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006582:	230e      	movs	r3, #14
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	e057      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4a38      	ldr	r2, [pc, #224]	; (800666c <USB_SetTurnaroundTime+0x124>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d306      	bcc.n	800659e <USB_SetTurnaroundTime+0x56>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4a37      	ldr	r2, [pc, #220]	; (8006670 <USB_SetTurnaroundTime+0x128>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d202      	bcs.n	800659e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006598:	230d      	movs	r3, #13
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	e04c      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	4a33      	ldr	r2, [pc, #204]	; (8006670 <USB_SetTurnaroundTime+0x128>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d306      	bcc.n	80065b4 <USB_SetTurnaroundTime+0x6c>
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	4a32      	ldr	r2, [pc, #200]	; (8006674 <USB_SetTurnaroundTime+0x12c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d802      	bhi.n	80065b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80065ae:	230c      	movs	r3, #12
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	e041      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4a2f      	ldr	r2, [pc, #188]	; (8006674 <USB_SetTurnaroundTime+0x12c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d906      	bls.n	80065ca <USB_SetTurnaroundTime+0x82>
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	4a2e      	ldr	r2, [pc, #184]	; (8006678 <USB_SetTurnaroundTime+0x130>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d802      	bhi.n	80065ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80065c4:	230b      	movs	r3, #11
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	e036      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	4a2a      	ldr	r2, [pc, #168]	; (8006678 <USB_SetTurnaroundTime+0x130>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d906      	bls.n	80065e0 <USB_SetTurnaroundTime+0x98>
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	4a29      	ldr	r2, [pc, #164]	; (800667c <USB_SetTurnaroundTime+0x134>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d802      	bhi.n	80065e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80065da:	230a      	movs	r3, #10
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	e02b      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	4a26      	ldr	r2, [pc, #152]	; (800667c <USB_SetTurnaroundTime+0x134>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d906      	bls.n	80065f6 <USB_SetTurnaroundTime+0xae>
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	4a25      	ldr	r2, [pc, #148]	; (8006680 <USB_SetTurnaroundTime+0x138>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d202      	bcs.n	80065f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80065f0:	2309      	movs	r3, #9
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	e020      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	4a21      	ldr	r2, [pc, #132]	; (8006680 <USB_SetTurnaroundTime+0x138>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d306      	bcc.n	800660c <USB_SetTurnaroundTime+0xc4>
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	4a20      	ldr	r2, [pc, #128]	; (8006684 <USB_SetTurnaroundTime+0x13c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d802      	bhi.n	800660c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006606:	2308      	movs	r3, #8
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	e015      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	4a1d      	ldr	r2, [pc, #116]	; (8006684 <USB_SetTurnaroundTime+0x13c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d906      	bls.n	8006622 <USB_SetTurnaroundTime+0xda>
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4a1c      	ldr	r2, [pc, #112]	; (8006688 <USB_SetTurnaroundTime+0x140>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d202      	bcs.n	8006622 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800661c:	2307      	movs	r3, #7
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	e00a      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006622:	2306      	movs	r3, #6
 8006624:	617b      	str	r3, [r7, #20]
 8006626:	e007      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d102      	bne.n	8006634 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800662e:	2309      	movs	r3, #9
 8006630:	617b      	str	r3, [r7, #20]
 8006632:	e001      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006634:	2309      	movs	r3, #9
 8006636:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	029b      	lsls	r3, r3, #10
 800664c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006650:	431a      	orrs	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	371c      	adds	r7, #28
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	00d8acbf 	.word	0x00d8acbf
 8006668:	00e4e1c0 	.word	0x00e4e1c0
 800666c:	00f42400 	.word	0x00f42400
 8006670:	01067380 	.word	0x01067380
 8006674:	011a499f 	.word	0x011a499f
 8006678:	01312cff 	.word	0x01312cff
 800667c:	014ca43f 	.word	0x014ca43f
 8006680:	016e3600 	.word	0x016e3600
 8006684:	01a6ab1f 	.word	0x01a6ab1f
 8006688:	01e84800 	.word	0x01e84800

0800668c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f043 0201 	orr.w	r2, r3, #1
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f023 0201 	bic.w	r2, r3, #1
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d115      	bne.n	800671e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066fe:	2001      	movs	r0, #1
 8006700:	f7fb fd74 	bl	80021ec <HAL_Delay>
      ms++;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	3301      	adds	r3, #1
 8006708:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f001 fa45 	bl	8007b9a <USB_GetMode>
 8006710:	4603      	mov	r3, r0
 8006712:	2b01      	cmp	r3, #1
 8006714:	d01e      	beq.n	8006754 <USB_SetCurrentMode+0x84>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b31      	cmp	r3, #49	; 0x31
 800671a:	d9f0      	bls.n	80066fe <USB_SetCurrentMode+0x2e>
 800671c:	e01a      	b.n	8006754 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800671e:	78fb      	ldrb	r3, [r7, #3]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d115      	bne.n	8006750 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006730:	2001      	movs	r0, #1
 8006732:	f7fb fd5b 	bl	80021ec <HAL_Delay>
      ms++;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	3301      	adds	r3, #1
 800673a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 fa2c 	bl	8007b9a <USB_GetMode>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d005      	beq.n	8006754 <USB_SetCurrentMode+0x84>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b31      	cmp	r3, #49	; 0x31
 800674c:	d9f0      	bls.n	8006730 <USB_SetCurrentMode+0x60>
 800674e:	e001      	b.n	8006754 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e005      	b.n	8006760 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b32      	cmp	r3, #50	; 0x32
 8006758:	d101      	bne.n	800675e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006768:	b084      	sub	sp, #16
 800676a:	b580      	push	{r7, lr}
 800676c:	b086      	sub	sp, #24
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006776:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006782:	2300      	movs	r3, #0
 8006784:	613b      	str	r3, [r7, #16]
 8006786:	e009      	b.n	800679c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	3340      	adds	r3, #64	; 0x40
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	2200      	movs	r2, #0
 8006794:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	3301      	adds	r3, #1
 800679a:	613b      	str	r3, [r7, #16]
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2b0e      	cmp	r3, #14
 80067a0:	d9f2      	bls.n	8006788 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80067a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d11c      	bne.n	80067e2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067b6:	f043 0302 	orr.w	r3, r3, #2
 80067ba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	639a      	str	r2, [r3, #56]	; 0x38
 80067e0:	e00b      	b.n	80067fa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006800:	461a      	mov	r2, r3
 8006802:	2300      	movs	r3, #0
 8006804:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680c:	4619      	mov	r1, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006814:	461a      	mov	r2, r3
 8006816:	680b      	ldr	r3, [r1, #0]
 8006818:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	2b01      	cmp	r3, #1
 800681e:	d10c      	bne.n	800683a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006822:	2b00      	cmp	r3, #0
 8006824:	d104      	bne.n	8006830 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006826:	2100      	movs	r1, #0
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f965 	bl	8006af8 <USB_SetDevSpeed>
 800682e:	e008      	b.n	8006842 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006830:	2101      	movs	r1, #1
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f960 	bl	8006af8 <USB_SetDevSpeed>
 8006838:	e003      	b.n	8006842 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800683a:	2103      	movs	r1, #3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f95b 	bl	8006af8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006842:	2110      	movs	r1, #16
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f8f3 	bl	8006a30 <USB_FlushTxFifo>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f91f 	bl	8006a98 <USB_FlushRxFifo>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686a:	461a      	mov	r2, r3
 800686c:	2300      	movs	r3, #0
 800686e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006876:	461a      	mov	r2, r3
 8006878:	2300      	movs	r3, #0
 800687a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006882:	461a      	mov	r2, r3
 8006884:	2300      	movs	r3, #0
 8006886:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006888:	2300      	movs	r3, #0
 800688a:	613b      	str	r3, [r7, #16]
 800688c:	e043      	b.n	8006916 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068a4:	d118      	bne.n	80068d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10a      	bne.n	80068c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b8:	461a      	mov	r2, r3
 80068ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068be:	6013      	str	r3, [r2, #0]
 80068c0:	e013      	b.n	80068ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ce:	461a      	mov	r2, r3
 80068d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	e008      	b.n	80068ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e4:	461a      	mov	r2, r3
 80068e6:	2300      	movs	r3, #0
 80068e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f6:	461a      	mov	r2, r3
 80068f8:	2300      	movs	r3, #0
 80068fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006908:	461a      	mov	r2, r3
 800690a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800690e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	3301      	adds	r3, #1
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	429a      	cmp	r2, r3
 800691c:	d3b7      	bcc.n	800688e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800691e:	2300      	movs	r3, #0
 8006920:	613b      	str	r3, [r7, #16]
 8006922:	e043      	b.n	80069ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800693a:	d118      	bne.n	800696e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10a      	bne.n	8006958 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694e:	461a      	mov	r2, r3
 8006950:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	e013      	b.n	8006980 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006964:	461a      	mov	r2, r3
 8006966:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800696a:	6013      	str	r3, [r2, #0]
 800696c:	e008      	b.n	8006980 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800697a:	461a      	mov	r2, r3
 800697c:	2300      	movs	r3, #0
 800697e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698c:	461a      	mov	r2, r3
 800698e:	2300      	movs	r3, #0
 8006990:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699e:	461a      	mov	r2, r3
 80069a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	3301      	adds	r3, #1
 80069aa:	613b      	str	r3, [r7, #16]
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d3b7      	bcc.n	8006924 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80069d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d105      	bne.n	80069e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	f043 0210 	orr.w	r2, r3, #16
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	699a      	ldr	r2, [r3, #24]
 80069ec:	4b0f      	ldr	r3, [pc, #60]	; (8006a2c <USB_DevInit+0x2c4>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	f043 0208 	orr.w	r2, r3, #8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d107      	bne.n	8006a1c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a14:	f043 0304 	orr.w	r3, r3, #4
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a28:	b004      	add	sp, #16
 8006a2a:	4770      	bx	lr
 8006a2c:	803c3800 	.word	0x803c3800

08006a30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3301      	adds	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4a13      	ldr	r2, [pc, #76]	; (8006a94 <USB_FlushTxFifo+0x64>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d901      	bls.n	8006a50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e01b      	b.n	8006a88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	daf2      	bge.n	8006a3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	019b      	lsls	r3, r3, #6
 8006a60:	f043 0220 	orr.w	r2, r3, #32
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4a08      	ldr	r2, [pc, #32]	; (8006a94 <USB_FlushTxFifo+0x64>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d901      	bls.n	8006a7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e006      	b.n	8006a88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	d0f0      	beq.n	8006a68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	00030d40 	.word	0x00030d40

08006a98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4a11      	ldr	r2, [pc, #68]	; (8006af4 <USB_FlushRxFifo+0x5c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d901      	bls.n	8006ab6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e018      	b.n	8006ae8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	daf2      	bge.n	8006aa4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2210      	movs	r2, #16
 8006ac6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	3301      	adds	r3, #1
 8006acc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4a08      	ldr	r2, [pc, #32]	; (8006af4 <USB_FlushRxFifo+0x5c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d901      	bls.n	8006ada <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e006      	b.n	8006ae8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f003 0310 	and.w	r3, r3, #16
 8006ae2:	2b10      	cmp	r3, #16
 8006ae4:	d0f0      	beq.n	8006ac8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3714      	adds	r7, #20
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	00030d40 	.word	0x00030d40

08006af8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	78fb      	ldrb	r3, [r7, #3]
 8006b12:	68f9      	ldr	r1, [r7, #12]
 8006b14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b087      	sub	sp, #28
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 0306 	and.w	r3, r3, #6
 8006b42:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	75fb      	strb	r3, [r7, #23]
 8006b4e:	e00a      	b.n	8006b66 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d002      	beq.n	8006b5c <USB_GetDevSpeed+0x32>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2b06      	cmp	r3, #6
 8006b5a:	d102      	bne.n	8006b62 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	75fb      	strb	r3, [r7, #23]
 8006b60:	e001      	b.n	8006b66 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006b62:	230f      	movs	r3, #15
 8006b64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	371c      	adds	r7, #28
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	785b      	ldrb	r3, [r3, #1]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d13a      	bne.n	8006c06 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b96:	69da      	ldr	r2, [r3, #28]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	f003 030f 	and.w	r3, r3, #15
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	68f9      	ldr	r1, [r7, #12]
 8006baa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d155      	bne.n	8006c74 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	015a      	lsls	r2, r3, #5
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	791b      	ldrb	r3, [r3, #4]
 8006be2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006be4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	059b      	lsls	r3, r3, #22
 8006bea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006bec:	4313      	orrs	r3, r2
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	0151      	lsls	r1, r2, #5
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	440a      	add	r2, r1
 8006bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	e036      	b.n	8006c74 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0c:	69da      	ldr	r2, [r3, #28]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	f003 030f 	and.w	r3, r3, #15
 8006c16:	2101      	movs	r1, #1
 8006c18:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1c:	041b      	lsls	r3, r3, #16
 8006c1e:	68f9      	ldr	r1, [r7, #12]
 8006c20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c24:	4313      	orrs	r3, r2
 8006c26:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d11a      	bne.n	8006c74 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	791b      	ldrb	r3, [r3, #4]
 8006c58:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c5a:	430b      	orrs	r3, r1
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	0151      	lsls	r1, r2, #5
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	440a      	add	r2, r1
 8006c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c72:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
	...

08006c84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	785b      	ldrb	r3, [r3, #1]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d161      	bne.n	8006d64 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cb6:	d11f      	bne.n	8006cf8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	0151      	lsls	r1, r2, #5
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	440a      	add	r2, r1
 8006cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cd6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	0151      	lsls	r1, r2, #5
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	440a      	add	r2, r1
 8006cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cf6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	f003 030f 	and.w	r3, r3, #15
 8006d08:	2101      	movs	r1, #1
 8006d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	43db      	mvns	r3, r3
 8006d12:	68f9      	ldr	r1, [r7, #12]
 8006d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d18:	4013      	ands	r3, r2
 8006d1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d22:	69da      	ldr	r2, [r3, #28]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	f003 030f 	and.w	r3, r3, #15
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	43db      	mvns	r3, r3
 8006d36:	68f9      	ldr	r1, [r7, #12]
 8006d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	0159      	lsls	r1, r3, #5
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	440b      	add	r3, r1
 8006d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4b35      	ldr	r3, [pc, #212]	; (8006e34 <USB_DeactivateEndpoint+0x1b0>)
 8006d5e:	4013      	ands	r3, r2
 8006d60:	600b      	str	r3, [r1, #0]
 8006d62:	e060      	b.n	8006e26 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d7a:	d11f      	bne.n	8006dbc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	0151      	lsls	r1, r2, #5
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	440a      	add	r2, r1
 8006d92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d9a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	0151      	lsls	r1, r2, #5
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	440a      	add	r2, r1
 8006db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	f003 030f 	and.w	r3, r3, #15
 8006dcc:	2101      	movs	r1, #1
 8006dce:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd2:	041b      	lsls	r3, r3, #16
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	68f9      	ldr	r1, [r7, #12]
 8006dd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ddc:	4013      	ands	r3, r2
 8006dde:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de6:	69da      	ldr	r2, [r3, #28]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	f003 030f 	and.w	r3, r3, #15
 8006df0:	2101      	movs	r1, #1
 8006df2:	fa01 f303 	lsl.w	r3, r1, r3
 8006df6:	041b      	lsls	r3, r3, #16
 8006df8:	43db      	mvns	r3, r3
 8006dfa:	68f9      	ldr	r1, [r7, #12]
 8006dfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e00:	4013      	ands	r3, r2
 8006e02:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	0159      	lsls	r1, r3, #5
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	440b      	add	r3, r1
 8006e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4b05      	ldr	r3, [pc, #20]	; (8006e38 <USB_DeactivateEndpoint+0x1b4>)
 8006e22:	4013      	ands	r3, r2
 8006e24:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	ec337800 	.word	0xec337800
 8006e38:	eff37800 	.word	0xeff37800

08006e3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b08a      	sub	sp, #40	; 0x28
 8006e40:	af02      	add	r7, sp, #8
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	4613      	mov	r3, r2
 8006e48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	785b      	ldrb	r3, [r3, #1]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	f040 815c 	bne.w	8007116 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d132      	bne.n	8006ecc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	0151      	lsls	r1, r2, #5
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	440a      	add	r2, r1
 8006e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	0151      	lsls	r1, r2, #5
 8006e9c:	69fa      	ldr	r2, [r7, #28]
 8006e9e:	440a      	add	r2, r1
 8006ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ea4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ea8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	0151      	lsls	r1, r2, #5
 8006ebc:	69fa      	ldr	r2, [r7, #28]
 8006ebe:	440a      	add	r2, r1
 8006ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ec4:	0cdb      	lsrs	r3, r3, #19
 8006ec6:	04db      	lsls	r3, r3, #19
 8006ec8:	6113      	str	r3, [r2, #16]
 8006eca:	e074      	b.n	8006fb6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	0151      	lsls	r1, r2, #5
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	440a      	add	r2, r1
 8006ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ee6:	0cdb      	lsrs	r3, r3, #19
 8006ee8:	04db      	lsls	r3, r3, #19
 8006eea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	0151      	lsls	r1, r2, #5
 8006efe:	69fa      	ldr	r2, [r7, #28]
 8006f00:	440a      	add	r2, r1
 8006f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	6999      	ldr	r1, [r3, #24]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	440b      	add	r3, r1
 8006f28:	1e59      	subs	r1, r3, #1
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f32:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006f34:	4b9d      	ldr	r3, [pc, #628]	; (80071ac <USB_EPStartXfer+0x370>)
 8006f36:	400b      	ands	r3, r1
 8006f38:	69b9      	ldr	r1, [r7, #24]
 8006f3a:	0148      	lsls	r0, r1, #5
 8006f3c:	69f9      	ldr	r1, [r7, #28]
 8006f3e:	4401      	add	r1, r0
 8006f40:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f44:	4313      	orrs	r3, r2
 8006f46:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f54:	691a      	ldr	r2, [r3, #16]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f5e:	69b9      	ldr	r1, [r7, #24]
 8006f60:	0148      	lsls	r0, r1, #5
 8006f62:	69f9      	ldr	r1, [r7, #28]
 8006f64:	4401      	add	r1, r0
 8006f66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	791b      	ldrb	r3, [r3, #4]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d11f      	bne.n	8006fb6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	0151      	lsls	r1, r2, #5
 8006f88:	69fa      	ldr	r2, [r7, #28]
 8006f8a:	440a      	add	r2, r1
 8006f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f90:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006f94:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	0151      	lsls	r1, r2, #5
 8006fa8:	69fa      	ldr	r2, [r7, #28]
 8006faa:	440a      	add	r2, r1
 8006fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fb4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006fb6:	79fb      	ldrb	r3, [r7, #7]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d14b      	bne.n	8007054 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	791b      	ldrb	r3, [r3, #4]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d128      	bne.n	8007032 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d110      	bne.n	8007012 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69ba      	ldr	r2, [r7, #24]
 8007000:	0151      	lsls	r1, r2, #5
 8007002:	69fa      	ldr	r2, [r7, #28]
 8007004:	440a      	add	r2, r1
 8007006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800700a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	e00f      	b.n	8007032 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	0151      	lsls	r1, r2, #5
 8007024:	69fa      	ldr	r2, [r7, #28]
 8007026:	440a      	add	r2, r1
 8007028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800702c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007030:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	0151      	lsls	r1, r2, #5
 8007044:	69fa      	ldr	r2, [r7, #28]
 8007046:	440a      	add	r2, r1
 8007048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800704c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	e133      	b.n	80072bc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	0151      	lsls	r1, r2, #5
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	440a      	add	r2, r1
 800706a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800706e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007072:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	791b      	ldrb	r3, [r3, #4]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d015      	beq.n	80070a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 811b 	beq.w	80072bc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	f003 030f 	and.w	r3, r3, #15
 8007096:	2101      	movs	r1, #1
 8007098:	fa01 f303 	lsl.w	r3, r1, r3
 800709c:	69f9      	ldr	r1, [r7, #28]
 800709e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070a2:	4313      	orrs	r3, r2
 80070a4:	634b      	str	r3, [r1, #52]	; 0x34
 80070a6:	e109      	b.n	80072bc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d110      	bne.n	80070da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	0151      	lsls	r1, r2, #5
 80070ca:	69fa      	ldr	r2, [r7, #28]
 80070cc:	440a      	add	r2, r1
 80070ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	e00f      	b.n	80070fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	0151      	lsls	r1, r2, #5
 80070ec:	69fa      	ldr	r2, [r7, #28]
 80070ee:	440a      	add	r2, r1
 80070f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	6919      	ldr	r1, [r3, #16]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	781a      	ldrb	r2, [r3, #0]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	b298      	uxth	r0, r3
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	4603      	mov	r3, r0
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 fade 	bl	80076d0 <USB_WritePacket>
 8007114:	e0d2      	b.n	80072bc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	0151      	lsls	r1, r2, #5
 8007128:	69fa      	ldr	r2, [r7, #28]
 800712a:	440a      	add	r2, r1
 800712c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007130:	0cdb      	lsrs	r3, r3, #19
 8007132:	04db      	lsls	r3, r3, #19
 8007134:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	0151      	lsls	r1, r2, #5
 8007148:	69fa      	ldr	r2, [r7, #28]
 800714a:	440a      	add	r2, r1
 800714c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007150:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007154:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007158:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d126      	bne.n	80071b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716e:	691a      	ldr	r2, [r3, #16]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007178:	69b9      	ldr	r1, [r7, #24]
 800717a:	0148      	lsls	r0, r1, #5
 800717c:	69f9      	ldr	r1, [r7, #28]
 800717e:	4401      	add	r1, r0
 8007180:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007184:	4313      	orrs	r3, r2
 8007186:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	4413      	add	r3, r2
 8007190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	69ba      	ldr	r2, [r7, #24]
 8007198:	0151      	lsls	r1, r2, #5
 800719a:	69fa      	ldr	r2, [r7, #28]
 800719c:	440a      	add	r2, r1
 800719e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071a6:	6113      	str	r3, [r2, #16]
 80071a8:	e03a      	b.n	8007220 <USB_EPStartXfer+0x3e4>
 80071aa:	bf00      	nop
 80071ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	699a      	ldr	r2, [r3, #24]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	4413      	add	r3, r2
 80071ba:	1e5a      	subs	r2, r3, #1
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	8afa      	ldrh	r2, [r7, #22]
 80071cc:	fb03 f202 	mul.w	r2, r3, r2
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e0:	691a      	ldr	r2, [r3, #16]
 80071e2:	8afb      	ldrh	r3, [r7, #22]
 80071e4:	04d9      	lsls	r1, r3, #19
 80071e6:	4b38      	ldr	r3, [pc, #224]	; (80072c8 <USB_EPStartXfer+0x48c>)
 80071e8:	400b      	ands	r3, r1
 80071ea:	69b9      	ldr	r1, [r7, #24]
 80071ec:	0148      	lsls	r0, r1, #5
 80071ee:	69f9      	ldr	r1, [r7, #28]
 80071f0:	4401      	add	r1, r0
 80071f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071f6:	4313      	orrs	r3, r2
 80071f8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007206:	691a      	ldr	r2, [r3, #16]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007210:	69b9      	ldr	r1, [r7, #24]
 8007212:	0148      	lsls	r0, r1, #5
 8007214:	69f9      	ldr	r1, [r7, #28]
 8007216:	4401      	add	r1, r0
 8007218:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800721c:	4313      	orrs	r3, r2
 800721e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007220:	79fb      	ldrb	r3, [r7, #7]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d10d      	bne.n	8007242 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	6919      	ldr	r1, [r3, #16]
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	4413      	add	r3, r2
 800723a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723e:	460a      	mov	r2, r1
 8007240:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	791b      	ldrb	r3, [r3, #4]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d128      	bne.n	800729c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007256:	2b00      	cmp	r3, #0
 8007258:	d110      	bne.n	800727c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	0151      	lsls	r1, r2, #5
 800726c:	69fa      	ldr	r2, [r7, #28]
 800726e:	440a      	add	r2, r1
 8007270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007274:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	e00f      	b.n	800729c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69ba      	ldr	r2, [r7, #24]
 800728c:	0151      	lsls	r1, r2, #5
 800728e:	69fa      	ldr	r2, [r7, #28]
 8007290:	440a      	add	r2, r1
 8007292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800729a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	0151      	lsls	r1, r2, #5
 80072ae:	69fa      	ldr	r2, [r7, #28]
 80072b0:	440a      	add	r2, r1
 80072b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3720      	adds	r7, #32
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	1ff80000 	.word	0x1ff80000

080072cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	4613      	mov	r3, r2
 80072d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	785b      	ldrb	r3, [r3, #1]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	f040 80ce 	bne.w	800748a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d132      	bne.n	800735c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	0151      	lsls	r1, r2, #5
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	440a      	add	r2, r1
 800730c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007310:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007314:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007318:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	0151      	lsls	r1, r2, #5
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	440a      	add	r2, r1
 8007330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007338:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	4413      	add	r3, r2
 8007342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	0151      	lsls	r1, r2, #5
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	440a      	add	r2, r1
 8007350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007354:	0cdb      	lsrs	r3, r3, #19
 8007356:	04db      	lsls	r3, r3, #19
 8007358:	6113      	str	r3, [r2, #16]
 800735a:	e04e      	b.n	80073fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	0151      	lsls	r1, r2, #5
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	440a      	add	r2, r1
 8007372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007376:	0cdb      	lsrs	r3, r3, #19
 8007378:	04db      	lsls	r3, r3, #19
 800737a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	0151      	lsls	r1, r2, #5
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	440a      	add	r2, r1
 8007392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007396:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800739a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800739e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	699a      	ldr	r2, [r3, #24]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d903      	bls.n	80073b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	0151      	lsls	r1, r2, #5
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	440a      	add	r2, r1
 80073ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e0:	691a      	ldr	r2, [r3, #16]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073ea:	6939      	ldr	r1, [r7, #16]
 80073ec:	0148      	lsls	r0, r1, #5
 80073ee:	6979      	ldr	r1, [r7, #20]
 80073f0:	4401      	add	r1, r0
 80073f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80073f6:	4313      	orrs	r3, r2
 80073f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d11e      	bne.n	800743e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d009      	beq.n	800741c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007414:	461a      	mov	r2, r3
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	0151      	lsls	r1, r2, #5
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	440a      	add	r2, r1
 8007432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007436:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800743a:	6013      	str	r3, [r2, #0]
 800743c:	e097      	b.n	800756e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	0151      	lsls	r1, r2, #5
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	440a      	add	r2, r1
 8007454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007458:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800745c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	2b00      	cmp	r3, #0
 8007464:	f000 8083 	beq.w	800756e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	f003 030f 	and.w	r3, r3, #15
 8007478:	2101      	movs	r1, #1
 800747a:	fa01 f303 	lsl.w	r3, r1, r3
 800747e:	6979      	ldr	r1, [r7, #20]
 8007480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007484:	4313      	orrs	r3, r2
 8007486:	634b      	str	r3, [r1, #52]	; 0x34
 8007488:	e071      	b.n	800756e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	4413      	add	r3, r2
 8007492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	0151      	lsls	r1, r2, #5
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	440a      	add	r2, r1
 80074a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074a4:	0cdb      	lsrs	r3, r3, #19
 80074a6:	04db      	lsls	r3, r3, #19
 80074a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	0151      	lsls	r1, r2, #5
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	440a      	add	r2, r1
 80074c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	0151      	lsls	r1, r2, #5
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	440a      	add	r2, r1
 80074fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007504:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007512:	691a      	ldr	r2, [r3, #16]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800751c:	6939      	ldr	r1, [r7, #16]
 800751e:	0148      	lsls	r0, r1, #5
 8007520:	6979      	ldr	r1, [r7, #20]
 8007522:	4401      	add	r1, r0
 8007524:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007528:	4313      	orrs	r3, r2
 800752a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800752c:	79fb      	ldrb	r3, [r7, #7]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d10d      	bne.n	800754e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d009      	beq.n	800754e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	6919      	ldr	r1, [r3, #16]
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754a:	460a      	mov	r2, r1
 800754c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	4413      	add	r3, r2
 8007556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	0151      	lsls	r1, r2, #5
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	440a      	add	r2, r1
 8007564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007568:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800756c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	371c      	adds	r7, #28
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	785b      	ldrb	r3, [r3, #1]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d14a      	bne.n	8007630 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075b2:	f040 8086 	bne.w	80076c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	7812      	ldrb	r2, [r2, #0]
 80075ca:	0151      	lsls	r1, r2, #5
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	440a      	add	r2, r1
 80075d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	7812      	ldrb	r2, [r2, #0]
 80075ee:	0151      	lsls	r1, r2, #5
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	440a      	add	r2, r1
 80075f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3301      	adds	r3, #1
 8007602:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f242 7210 	movw	r2, #10000	; 0x2710
 800760a:	4293      	cmp	r3, r2
 800760c:	d902      	bls.n	8007614 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	75fb      	strb	r3, [r7, #23]
          break;
 8007612:	e056      	b.n	80076c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	4413      	add	r3, r2
 800761e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800762c:	d0e7      	beq.n	80075fe <USB_EPStopXfer+0x82>
 800762e:	e048      	b.n	80076c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	4413      	add	r3, r2
 800763a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007648:	d13b      	bne.n	80076c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	7812      	ldrb	r2, [r2, #0]
 800765e:	0151      	lsls	r1, r2, #5
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	440a      	add	r2, r1
 8007664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007668:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800766c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	7812      	ldrb	r2, [r2, #0]
 8007682:	0151      	lsls	r1, r2, #5
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	440a      	add	r2, r1
 8007688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800768c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007690:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3301      	adds	r3, #1
 8007696:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f242 7210 	movw	r2, #10000	; 0x2710
 800769e:	4293      	cmp	r3, r2
 80076a0:	d902      	bls.n	80076a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	75fb      	strb	r3, [r7, #23]
          break;
 80076a6:	e00c      	b.n	80076c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076c0:	d0e7      	beq.n	8007692 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	371c      	adds	r7, #28
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b089      	sub	sp, #36	; 0x24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	4611      	mov	r1, r2
 80076dc:	461a      	mov	r2, r3
 80076de:	460b      	mov	r3, r1
 80076e0:	71fb      	strb	r3, [r7, #7]
 80076e2:	4613      	mov	r3, r2
 80076e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80076ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d123      	bne.n	800773e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80076f6:	88bb      	ldrh	r3, [r7, #4]
 80076f8:	3303      	adds	r3, #3
 80076fa:	089b      	lsrs	r3, r3, #2
 80076fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80076fe:	2300      	movs	r3, #0
 8007700:	61bb      	str	r3, [r7, #24]
 8007702:	e018      	b.n	8007736 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007704:	79fb      	ldrb	r3, [r7, #7]
 8007706:	031a      	lsls	r2, r3, #12
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	4413      	add	r3, r2
 800770c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007710:	461a      	mov	r2, r3
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	3301      	adds	r3, #1
 800771c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	3301      	adds	r3, #1
 8007722:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	3301      	adds	r3, #1
 8007728:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	3301      	adds	r3, #1
 800772e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	3301      	adds	r3, #1
 8007734:	61bb      	str	r3, [r7, #24]
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	429a      	cmp	r2, r3
 800773c:	d3e2      	bcc.n	8007704 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3724      	adds	r7, #36	; 0x24
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800774c:	b480      	push	{r7}
 800774e:	b08b      	sub	sp, #44	; 0x2c
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	4613      	mov	r3, r2
 8007758:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007762:	88fb      	ldrh	r3, [r7, #6]
 8007764:	089b      	lsrs	r3, r3, #2
 8007766:	b29b      	uxth	r3, r3
 8007768:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800776a:	88fb      	ldrh	r3, [r7, #6]
 800776c:	f003 0303 	and.w	r3, r3, #3
 8007770:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007772:	2300      	movs	r3, #0
 8007774:	623b      	str	r3, [r7, #32]
 8007776:	e014      	b.n	80077a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	601a      	str	r2, [r3, #0]
    pDest++;
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	3301      	adds	r3, #1
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	3301      	adds	r3, #1
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	3301      	adds	r3, #1
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	3301      	adds	r3, #1
 800779a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	3301      	adds	r3, #1
 80077a0:	623b      	str	r3, [r7, #32]
 80077a2:	6a3a      	ldr	r2, [r7, #32]
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d3e6      	bcc.n	8007778 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80077aa:	8bfb      	ldrh	r3, [r7, #30]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d01e      	beq.n	80077ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ba:	461a      	mov	r2, r3
 80077bc:	f107 0310 	add.w	r3, r7, #16
 80077c0:	6812      	ldr	r2, [r2, #0]
 80077c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	fa22 f303 	lsr.w	r3, r2, r3
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	701a      	strb	r2, [r3, #0]
      i++;
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	3301      	adds	r3, #1
 80077da:	623b      	str	r3, [r7, #32]
      pDest++;
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	3301      	adds	r3, #1
 80077e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80077e2:	8bfb      	ldrh	r3, [r7, #30]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80077e8:	8bfb      	ldrh	r3, [r7, #30]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1ea      	bne.n	80077c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	372c      	adds	r7, #44	; 0x2c
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	785b      	ldrb	r3, [r3, #1]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d12c      	bne.n	8007872 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4413      	add	r3, r2
 8007820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	db12      	blt.n	8007850 <USB_EPSetStall+0x54>
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00f      	beq.n	8007850 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	440a      	add	r2, r1
 8007846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800784a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800784e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	0151      	lsls	r1, r2, #5
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	440a      	add	r2, r1
 8007866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800786a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	e02b      	b.n	80078ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	db12      	blt.n	80078aa <USB_EPSetStall+0xae>
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00f      	beq.n	80078aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	0151      	lsls	r1, r2, #5
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	440a      	add	r2, r1
 80078a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	0151      	lsls	r1, r2, #5
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	440a      	add	r2, r1
 80078c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	785b      	ldrb	r3, [r3, #1]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d128      	bne.n	8007946 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	0151      	lsls	r1, r2, #5
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	440a      	add	r2, r1
 800790a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800790e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007912:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	791b      	ldrb	r3, [r3, #4]
 8007918:	2b03      	cmp	r3, #3
 800791a:	d003      	beq.n	8007924 <USB_EPClearStall+0x4c>
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	791b      	ldrb	r3, [r3, #4]
 8007920:	2b02      	cmp	r3, #2
 8007922:	d138      	bne.n	8007996 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	0151      	lsls	r1, r2, #5
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	440a      	add	r2, r1
 800793a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800793e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007942:	6013      	str	r3, [r2, #0]
 8007944:	e027      	b.n	8007996 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	4413      	add	r3, r2
 800794e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	0151      	lsls	r1, r2, #5
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	440a      	add	r2, r1
 800795c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007960:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007964:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	791b      	ldrb	r3, [r3, #4]
 800796a:	2b03      	cmp	r3, #3
 800796c:	d003      	beq.n	8007976 <USB_EPClearStall+0x9e>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	791b      	ldrb	r3, [r3, #4]
 8007972:	2b02      	cmp	r3, #2
 8007974:	d10f      	bne.n	8007996 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	0151      	lsls	r1, r2, #5
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	440a      	add	r2, r1
 800798c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007994:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80079c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	78fb      	ldrb	r3, [r7, #3]
 80079d2:	011b      	lsls	r3, r3, #4
 80079d4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80079d8:	68f9      	ldr	r1, [r7, #12]
 80079da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079de:	4313      	orrs	r3, r2
 80079e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a0a:	f023 0303 	bic.w	r3, r3, #3
 8007a0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a1e:	f023 0302 	bic.w	r3, r3, #2
 8007a22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b085      	sub	sp, #20
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a4c:	f023 0303 	bic.w	r3, r3, #3
 8007a50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a60:	f043 0302 	orr.w	r3, r3, #2
 8007a64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	4013      	ands	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b085      	sub	sp, #20
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	4013      	ands	r3, r2
 8007abc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	0c1b      	lsrs	r3, r3, #16
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b085      	sub	sp, #20
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	4013      	ands	r3, r2
 8007af0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	b29b      	uxth	r3, r3
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b085      	sub	sp, #20
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007b12:	78fb      	ldrb	r3, [r7, #3]
 8007b14:	015a      	lsls	r2, r3, #5
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b30:	68bb      	ldr	r3, [r7, #8]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b087      	sub	sp, #28
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	460b      	mov	r3, r1
 8007b48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b60:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007b62:	78fb      	ldrb	r3, [r7, #3]
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b6e:	01db      	lsls	r3, r3, #7
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4013      	ands	r3, r2
 8007b8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b085      	sub	sp, #20
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bd0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007bd4:	f023 0307 	bic.w	r3, r3, #7
 8007bd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	460b      	mov	r3, r1
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	333c      	adds	r3, #60	; 0x3c
 8007c12:	3304      	adds	r3, #4
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	4a26      	ldr	r2, [pc, #152]	; (8007cb4 <USB_EP0_OutStart+0xb8>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d90a      	bls.n	8007c36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c30:	d101      	bne.n	8007c36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	e037      	b.n	8007ca6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	2300      	movs	r3, #0
 8007c40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c64:	f043 0318 	orr.w	r3, r3, #24
 8007c68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c78:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007c7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007c7e:	7afb      	ldrb	r3, [r7, #11]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d10f      	bne.n	8007ca4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c9e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007ca2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	371c      	adds	r7, #28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	4f54300a 	.word	0x4f54300a

08007cb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	4a13      	ldr	r2, [pc, #76]	; (8007d1c <USB_CoreReset+0x64>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d901      	bls.n	8007cd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e01b      	b.n	8007d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	daf2      	bge.n	8007cc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	f043 0201 	orr.w	r2, r3, #1
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4a09      	ldr	r2, [pc, #36]	; (8007d1c <USB_CoreReset+0x64>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d901      	bls.n	8007d00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e006      	b.n	8007d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d0f0      	beq.n	8007cee <USB_CoreReset+0x36>

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	00030d40 	.word	0x00030d40

08007d20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007d2c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007d30:	f006 f832 	bl	800dd98 <USBD_static_malloc>
 8007d34:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d109      	bne.n	8007d50 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	32b0      	adds	r2, #176	; 0xb0
 8007d46:	2100      	movs	r1, #0
 8007d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	e0d4      	b.n	8007efa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007d50:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007d54:	2100      	movs	r1, #0
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f006 f89a 	bl	800de90 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	32b0      	adds	r2, #176	; 0xb0
 8007d66:	68f9      	ldr	r1, [r7, #12]
 8007d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	32b0      	adds	r2, #176	; 0xb0
 8007d76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	7c1b      	ldrb	r3, [r3, #16]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d138      	bne.n	8007dfa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007d88:	4b5e      	ldr	r3, [pc, #376]	; (8007f04 <USBD_CDC_Init+0x1e4>)
 8007d8a:	7819      	ldrb	r1, [r3, #0]
 8007d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d90:	2202      	movs	r2, #2
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f005 fedd 	bl	800db52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007d98:	4b5a      	ldr	r3, [pc, #360]	; (8007f04 <USBD_CDC_Init+0x1e4>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	f003 020f 	and.w	r2, r3, #15
 8007da0:	6879      	ldr	r1, [r7, #4]
 8007da2:	4613      	mov	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	440b      	add	r3, r1
 8007dac:	3324      	adds	r3, #36	; 0x24
 8007dae:	2201      	movs	r2, #1
 8007db0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007db2:	4b55      	ldr	r3, [pc, #340]	; (8007f08 <USBD_CDC_Init+0x1e8>)
 8007db4:	7819      	ldrb	r1, [r3, #0]
 8007db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dba:	2202      	movs	r2, #2
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f005 fec8 	bl	800db52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007dc2:	4b51      	ldr	r3, [pc, #324]	; (8007f08 <USBD_CDC_Init+0x1e8>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	f003 020f 	and.w	r2, r3, #15
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	440b      	add	r3, r1
 8007dd6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007dda:	2201      	movs	r2, #1
 8007ddc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007dde:	4b4b      	ldr	r3, [pc, #300]	; (8007f0c <USBD_CDC_Init+0x1ec>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	f003 020f 	and.w	r2, r3, #15
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	4613      	mov	r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4413      	add	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	440b      	add	r3, r1
 8007df2:	3326      	adds	r3, #38	; 0x26
 8007df4:	2210      	movs	r2, #16
 8007df6:	801a      	strh	r2, [r3, #0]
 8007df8:	e035      	b.n	8007e66 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007dfa:	4b42      	ldr	r3, [pc, #264]	; (8007f04 <USBD_CDC_Init+0x1e4>)
 8007dfc:	7819      	ldrb	r1, [r3, #0]
 8007dfe:	2340      	movs	r3, #64	; 0x40
 8007e00:	2202      	movs	r2, #2
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f005 fea5 	bl	800db52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007e08:	4b3e      	ldr	r3, [pc, #248]	; (8007f04 <USBD_CDC_Init+0x1e4>)
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	f003 020f 	and.w	r2, r3, #15
 8007e10:	6879      	ldr	r1, [r7, #4]
 8007e12:	4613      	mov	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	440b      	add	r3, r1
 8007e1c:	3324      	adds	r3, #36	; 0x24
 8007e1e:	2201      	movs	r2, #1
 8007e20:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007e22:	4b39      	ldr	r3, [pc, #228]	; (8007f08 <USBD_CDC_Init+0x1e8>)
 8007e24:	7819      	ldrb	r1, [r3, #0]
 8007e26:	2340      	movs	r3, #64	; 0x40
 8007e28:	2202      	movs	r2, #2
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f005 fe91 	bl	800db52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007e30:	4b35      	ldr	r3, [pc, #212]	; (8007f08 <USBD_CDC_Init+0x1e8>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	f003 020f 	and.w	r2, r3, #15
 8007e38:	6879      	ldr	r1, [r7, #4]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	440b      	add	r3, r1
 8007e44:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e48:	2201      	movs	r2, #1
 8007e4a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007e4c:	4b2f      	ldr	r3, [pc, #188]	; (8007f0c <USBD_CDC_Init+0x1ec>)
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	f003 020f 	and.w	r2, r3, #15
 8007e54:	6879      	ldr	r1, [r7, #4]
 8007e56:	4613      	mov	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	440b      	add	r3, r1
 8007e60:	3326      	adds	r3, #38	; 0x26
 8007e62:	2210      	movs	r2, #16
 8007e64:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007e66:	4b29      	ldr	r3, [pc, #164]	; (8007f0c <USBD_CDC_Init+0x1ec>)
 8007e68:	7819      	ldrb	r1, [r3, #0]
 8007e6a:	2308      	movs	r3, #8
 8007e6c:	2203      	movs	r2, #3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f005 fe6f 	bl	800db52 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007e74:	4b25      	ldr	r3, [pc, #148]	; (8007f0c <USBD_CDC_Init+0x1ec>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	f003 020f 	and.w	r2, r3, #15
 8007e7c:	6879      	ldr	r1, [r7, #4]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4413      	add	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	440b      	add	r3, r1
 8007e88:	3324      	adds	r3, #36	; 0x24
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	33b0      	adds	r3, #176	; 0xb0
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d101      	bne.n	8007ec8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e018      	b.n	8007efa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	7c1b      	ldrb	r3, [r3, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10a      	bne.n	8007ee6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ed0:	4b0d      	ldr	r3, [pc, #52]	; (8007f08 <USBD_CDC_Init+0x1e8>)
 8007ed2:	7819      	ldrb	r1, [r3, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f005 ff26 	bl	800dd30 <USBD_LL_PrepareReceive>
 8007ee4:	e008      	b.n	8007ef8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ee6:	4b08      	ldr	r3, [pc, #32]	; (8007f08 <USBD_CDC_Init+0x1e8>)
 8007ee8:	7819      	ldrb	r1, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ef0:	2340      	movs	r3, #64	; 0x40
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f005 ff1c 	bl	800dd30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000093 	.word	0x20000093
 8007f08:	20000094 	.word	0x20000094
 8007f0c:	20000095 	.word	0x20000095

08007f10 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007f1c:	4b3a      	ldr	r3, [pc, #232]	; (8008008 <USBD_CDC_DeInit+0xf8>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	4619      	mov	r1, r3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f005 fe3b 	bl	800db9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007f28:	4b37      	ldr	r3, [pc, #220]	; (8008008 <USBD_CDC_DeInit+0xf8>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	f003 020f 	and.w	r2, r3, #15
 8007f30:	6879      	ldr	r1, [r7, #4]
 8007f32:	4613      	mov	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	440b      	add	r3, r1
 8007f3c:	3324      	adds	r3, #36	; 0x24
 8007f3e:	2200      	movs	r2, #0
 8007f40:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007f42:	4b32      	ldr	r3, [pc, #200]	; (800800c <USBD_CDC_DeInit+0xfc>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f005 fe28 	bl	800db9e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007f4e:	4b2f      	ldr	r3, [pc, #188]	; (800800c <USBD_CDC_DeInit+0xfc>)
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	f003 020f 	and.w	r2, r3, #15
 8007f56:	6879      	ldr	r1, [r7, #4]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	440b      	add	r3, r1
 8007f62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f66:	2200      	movs	r2, #0
 8007f68:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007f6a:	4b29      	ldr	r3, [pc, #164]	; (8008010 <USBD_CDC_DeInit+0x100>)
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f005 fe14 	bl	800db9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007f76:	4b26      	ldr	r3, [pc, #152]	; (8008010 <USBD_CDC_DeInit+0x100>)
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	f003 020f 	and.w	r2, r3, #15
 8007f7e:	6879      	ldr	r1, [r7, #4]
 8007f80:	4613      	mov	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	440b      	add	r3, r1
 8007f8a:	3324      	adds	r3, #36	; 0x24
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007f90:	4b1f      	ldr	r3, [pc, #124]	; (8008010 <USBD_CDC_DeInit+0x100>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	f003 020f 	and.w	r2, r3, #15
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	440b      	add	r3, r1
 8007fa4:	3326      	adds	r3, #38	; 0x26
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	32b0      	adds	r2, #176	; 0xb0
 8007fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d01f      	beq.n	8007ffc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	33b0      	adds	r3, #176	; 0xb0
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	32b0      	adds	r2, #176	; 0xb0
 8007fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f005 fee8 	bl	800ddb4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	32b0      	adds	r2, #176	; 0xb0
 8007fee:	2100      	movs	r1, #0
 8007ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20000093 	.word	0x20000093
 800800c:	20000094 	.word	0x20000094
 8008010:	20000095 	.word	0x20000095

08008014 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	32b0      	adds	r2, #176	; 0xb0
 8008028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800802c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800802e:	2300      	movs	r3, #0
 8008030:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008040:	2303      	movs	r3, #3
 8008042:	e0bf      	b.n	80081c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800804c:	2b00      	cmp	r3, #0
 800804e:	d050      	beq.n	80080f2 <USBD_CDC_Setup+0xde>
 8008050:	2b20      	cmp	r3, #32
 8008052:	f040 80af 	bne.w	80081b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	88db      	ldrh	r3, [r3, #6]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d03a      	beq.n	80080d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	b25b      	sxtb	r3, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	da1b      	bge.n	80080a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	33b0      	adds	r3, #176	; 0xb0
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800807e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	88d2      	ldrh	r2, [r2, #6]
 8008084:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	88db      	ldrh	r3, [r3, #6]
 800808a:	2b07      	cmp	r3, #7
 800808c:	bf28      	it	cs
 800808e:	2307      	movcs	r3, #7
 8008090:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	89fa      	ldrh	r2, [r7, #14]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 fd89 	bl	8009bb0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800809e:	e090      	b.n	80081c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	785a      	ldrb	r2, [r3, #1]
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	88db      	ldrh	r3, [r3, #6]
 80080ae:	2b3f      	cmp	r3, #63	; 0x3f
 80080b0:	d803      	bhi.n	80080ba <USBD_CDC_Setup+0xa6>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	88db      	ldrh	r3, [r3, #6]
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	e000      	b.n	80080bc <USBD_CDC_Setup+0xa8>
 80080ba:	2240      	movs	r2, #64	; 0x40
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80080c2:	6939      	ldr	r1, [r7, #16]
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80080ca:	461a      	mov	r2, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f001 fd9b 	bl	8009c08 <USBD_CtlPrepareRx>
      break;
 80080d2:	e076      	b.n	80081c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	33b0      	adds	r3, #176	; 0xb0
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	7850      	ldrb	r0, [r2, #1]
 80080ea:	2200      	movs	r2, #0
 80080ec:	6839      	ldr	r1, [r7, #0]
 80080ee:	4798      	blx	r3
      break;
 80080f0:	e067      	b.n	80081c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	785b      	ldrb	r3, [r3, #1]
 80080f6:	2b0b      	cmp	r3, #11
 80080f8:	d851      	bhi.n	800819e <USBD_CDC_Setup+0x18a>
 80080fa:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <USBD_CDC_Setup+0xec>)
 80080fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008100:	08008131 	.word	0x08008131
 8008104:	080081ad 	.word	0x080081ad
 8008108:	0800819f 	.word	0x0800819f
 800810c:	0800819f 	.word	0x0800819f
 8008110:	0800819f 	.word	0x0800819f
 8008114:	0800819f 	.word	0x0800819f
 8008118:	0800819f 	.word	0x0800819f
 800811c:	0800819f 	.word	0x0800819f
 8008120:	0800819f 	.word	0x0800819f
 8008124:	0800819f 	.word	0x0800819f
 8008128:	0800815b 	.word	0x0800815b
 800812c:	08008185 	.word	0x08008185
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b03      	cmp	r3, #3
 800813a:	d107      	bne.n	800814c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800813c:	f107 030a 	add.w	r3, r7, #10
 8008140:	2202      	movs	r2, #2
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f001 fd33 	bl	8009bb0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800814a:	e032      	b.n	80081b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f001 fcbd 	bl	8009ace <USBD_CtlError>
            ret = USBD_FAIL;
 8008154:	2303      	movs	r3, #3
 8008156:	75fb      	strb	r3, [r7, #23]
          break;
 8008158:	e02b      	b.n	80081b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b03      	cmp	r3, #3
 8008164:	d107      	bne.n	8008176 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008166:	f107 030d 	add.w	r3, r7, #13
 800816a:	2201      	movs	r2, #1
 800816c:	4619      	mov	r1, r3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f001 fd1e 	bl	8009bb0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008174:	e01d      	b.n	80081b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f001 fca8 	bl	8009ace <USBD_CtlError>
            ret = USBD_FAIL;
 800817e:	2303      	movs	r3, #3
 8008180:	75fb      	strb	r3, [r7, #23]
          break;
 8008182:	e016      	b.n	80081b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b03      	cmp	r3, #3
 800818e:	d00f      	beq.n	80081b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f001 fc9b 	bl	8009ace <USBD_CtlError>
            ret = USBD_FAIL;
 8008198:	2303      	movs	r3, #3
 800819a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800819c:	e008      	b.n	80081b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 fc94 	bl	8009ace <USBD_CtlError>
          ret = USBD_FAIL;
 80081a6:	2303      	movs	r3, #3
 80081a8:	75fb      	strb	r3, [r7, #23]
          break;
 80081aa:	e002      	b.n	80081b2 <USBD_CDC_Setup+0x19e>
          break;
 80081ac:	bf00      	nop
 80081ae:	e008      	b.n	80081c2 <USBD_CDC_Setup+0x1ae>
          break;
 80081b0:	bf00      	nop
      }
      break;
 80081b2:	e006      	b.n	80081c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f001 fc89 	bl	8009ace <USBD_CtlError>
      ret = USBD_FAIL;
 80081bc:	2303      	movs	r3, #3
 80081be:	75fb      	strb	r3, [r7, #23]
      break;
 80081c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3718      	adds	r7, #24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	32b0      	adds	r2, #176	; 0xb0
 80081ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e065      	b.n	80082c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	32b0      	adds	r2, #176	; 0xb0
 8008200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008204:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008206:	78fb      	ldrb	r3, [r7, #3]
 8008208:	f003 020f 	and.w	r2, r3, #15
 800820c:	6879      	ldr	r1, [r7, #4]
 800820e:	4613      	mov	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	440b      	add	r3, r1
 8008218:	3318      	adds	r3, #24
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d02f      	beq.n	8008280 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	f003 020f 	and.w	r2, r3, #15
 8008226:	6879      	ldr	r1, [r7, #4]
 8008228:	4613      	mov	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	440b      	add	r3, r1
 8008232:	3318      	adds	r3, #24
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	78fb      	ldrb	r3, [r7, #3]
 8008238:	f003 010f 	and.w	r1, r3, #15
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	460b      	mov	r3, r1
 8008240:	00db      	lsls	r3, r3, #3
 8008242:	440b      	add	r3, r1
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4403      	add	r3, r0
 8008248:	3348      	adds	r3, #72	; 0x48
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008250:	fb01 f303 	mul.w	r3, r1, r3
 8008254:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008256:	2b00      	cmp	r3, #0
 8008258:	d112      	bne.n	8008280 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800825a:	78fb      	ldrb	r3, [r7, #3]
 800825c:	f003 020f 	and.w	r2, r3, #15
 8008260:	6879      	ldr	r1, [r7, #4]
 8008262:	4613      	mov	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	440b      	add	r3, r1
 800826c:	3318      	adds	r3, #24
 800826e:	2200      	movs	r2, #0
 8008270:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008272:	78f9      	ldrb	r1, [r7, #3]
 8008274:	2300      	movs	r3, #0
 8008276:	2200      	movs	r2, #0
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f005 fd38 	bl	800dcee <USBD_LL_Transmit>
 800827e:	e01f      	b.n	80082c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2200      	movs	r2, #0
 8008284:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	33b0      	adds	r3, #176	; 0xb0
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d010      	beq.n	80082c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	33b0      	adds	r3, #176	; 0xb0
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80082bc:	78fa      	ldrb	r2, [r7, #3]
 80082be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	460b      	mov	r3, r1
 80082d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	32b0      	adds	r2, #176	; 0xb0
 80082e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	32b0      	adds	r2, #176	; 0xb0
 80082f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e01a      	b.n	8008332 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80082fc:	78fb      	ldrb	r3, [r7, #3]
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f005 fd36 	bl	800dd72 <USBD_LL_GetRxDataSize>
 8008306:	4602      	mov	r2, r0
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	33b0      	adds	r3, #176	; 0xb0
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800832c:	4611      	mov	r1, r2
 800832e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	32b0      	adds	r2, #176	; 0xb0
 800834c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008350:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008358:	2303      	movs	r3, #3
 800835a:	e025      	b.n	80083a8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	33b0      	adds	r3, #176	; 0xb0
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d01a      	beq.n	80083a6 <USBD_CDC_EP0_RxReady+0x6c>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008376:	2bff      	cmp	r3, #255	; 0xff
 8008378:	d015      	beq.n	80083a6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	33b0      	adds	r3, #176	; 0xb0
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008392:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800839a:	b292      	uxth	r2, r2
 800839c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	22ff      	movs	r2, #255	; 0xff
 80083a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80083b8:	2182      	movs	r1, #130	; 0x82
 80083ba:	4818      	ldr	r0, [pc, #96]	; (800841c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80083bc:	f000 fd4f 	bl	8008e5e <USBD_GetEpDesc>
 80083c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80083c2:	2101      	movs	r1, #1
 80083c4:	4815      	ldr	r0, [pc, #84]	; (800841c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80083c6:	f000 fd4a 	bl	8008e5e <USBD_GetEpDesc>
 80083ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80083cc:	2181      	movs	r1, #129	; 0x81
 80083ce:	4813      	ldr	r0, [pc, #76]	; (800841c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80083d0:	f000 fd45 	bl	8008e5e <USBD_GetEpDesc>
 80083d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2210      	movs	r2, #16
 80083e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d006      	beq.n	80083f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083f0:	711a      	strb	r2, [r3, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d006      	beq.n	800840a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008404:	711a      	strb	r2, [r3, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2243      	movs	r2, #67	; 0x43
 800840e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008410:	4b02      	ldr	r3, [pc, #8]	; (800841c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008412:	4618      	mov	r0, r3
 8008414:	3718      	adds	r7, #24
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	20000050 	.word	0x20000050

08008420 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008428:	2182      	movs	r1, #130	; 0x82
 800842a:	4818      	ldr	r0, [pc, #96]	; (800848c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800842c:	f000 fd17 	bl	8008e5e <USBD_GetEpDesc>
 8008430:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008432:	2101      	movs	r1, #1
 8008434:	4815      	ldr	r0, [pc, #84]	; (800848c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008436:	f000 fd12 	bl	8008e5e <USBD_GetEpDesc>
 800843a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800843c:	2181      	movs	r1, #129	; 0x81
 800843e:	4813      	ldr	r0, [pc, #76]	; (800848c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008440:	f000 fd0d 	bl	8008e5e <USBD_GetEpDesc>
 8008444:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2210      	movs	r2, #16
 8008450:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d006      	beq.n	8008466 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	2200      	movs	r2, #0
 800845c:	711a      	strb	r2, [r3, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f042 0202 	orr.w	r2, r2, #2
 8008464:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d006      	beq.n	800847a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	711a      	strb	r2, [r3, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f042 0202 	orr.w	r2, r2, #2
 8008478:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2243      	movs	r2, #67	; 0x43
 800847e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008480:	4b02      	ldr	r3, [pc, #8]	; (800848c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008482:	4618      	mov	r0, r3
 8008484:	3718      	adds	r7, #24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	20000050 	.word	0x20000050

08008490 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008498:	2182      	movs	r1, #130	; 0x82
 800849a:	4818      	ldr	r0, [pc, #96]	; (80084fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800849c:	f000 fcdf 	bl	8008e5e <USBD_GetEpDesc>
 80084a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80084a2:	2101      	movs	r1, #1
 80084a4:	4815      	ldr	r0, [pc, #84]	; (80084fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80084a6:	f000 fcda 	bl	8008e5e <USBD_GetEpDesc>
 80084aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80084ac:	2181      	movs	r1, #129	; 0x81
 80084ae:	4813      	ldr	r0, [pc, #76]	; (80084fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80084b0:	f000 fcd5 	bl	8008e5e <USBD_GetEpDesc>
 80084b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	2210      	movs	r2, #16
 80084c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d006      	beq.n	80084d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084d0:	711a      	strb	r2, [r3, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d006      	beq.n	80084ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084e4:	711a      	strb	r2, [r3, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2243      	movs	r2, #67	; 0x43
 80084ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80084f0:	4b02      	ldr	r3, [pc, #8]	; (80084fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3718      	adds	r7, #24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20000050 	.word	0x20000050

08008500 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	220a      	movs	r2, #10
 800850c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800850e:	4b03      	ldr	r3, [pc, #12]	; (800851c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr
 800851c:	2000000c 	.word	0x2000000c

08008520 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008530:	2303      	movs	r3, #3
 8008532:	e009      	b.n	8008548 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	33b0      	adds	r3, #176	; 0xb0
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008554:	b480      	push	{r7}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	32b0      	adds	r2, #176	; 0xb0
 800856a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008576:	2303      	movs	r3, #3
 8008578:	e008      	b.n	800858c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	371c      	adds	r7, #28
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	32b0      	adds	r2, #176	; 0xb0
 80085ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e004      	b.n	80085c6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
	...

080085d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	32b0      	adds	r2, #176	; 0xb0
 80085e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80085ec:	2301      	movs	r3, #1
 80085ee:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	32b0      	adds	r2, #176	; 0xb0
 80085fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d101      	bne.n	8008606 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008602:	2303      	movs	r3, #3
 8008604:	e025      	b.n	8008652 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800860c:	2b00      	cmp	r3, #0
 800860e:	d11f      	bne.n	8008650 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2201      	movs	r2, #1
 8008614:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008618:	4b10      	ldr	r3, [pc, #64]	; (800865c <USBD_CDC_TransmitPacket+0x88>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	f003 020f 	and.w	r2, r3, #15
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	4613      	mov	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4403      	add	r3, r0
 8008632:	3318      	adds	r3, #24
 8008634:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008636:	4b09      	ldr	r3, [pc, #36]	; (800865c <USBD_CDC_TransmitPacket+0x88>)
 8008638:	7819      	ldrb	r1, [r3, #0]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f005 fb51 	bl	800dcee <USBD_LL_Transmit>

    ret = USBD_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008650:	7bfb      	ldrb	r3, [r7, #15]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20000093 	.word	0x20000093

08008660 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	32b0      	adds	r2, #176	; 0xb0
 8008672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008676:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	32b0      	adds	r2, #176	; 0xb0
 8008682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800868a:	2303      	movs	r3, #3
 800868c:	e018      	b.n	80086c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	7c1b      	ldrb	r3, [r3, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10a      	bne.n	80086ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008696:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <USBD_CDC_ReceivePacket+0x68>)
 8008698:	7819      	ldrb	r1, [r3, #0]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f005 fb43 	bl	800dd30 <USBD_LL_PrepareReceive>
 80086aa:	e008      	b.n	80086be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80086ac:	4b06      	ldr	r3, [pc, #24]	; (80086c8 <USBD_CDC_ReceivePacket+0x68>)
 80086ae:	7819      	ldrb	r1, [r3, #0]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086b6:	2340      	movs	r3, #64	; 0x40
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f005 fb39 	bl	800dd30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20000094 	.word	0x20000094

080086cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	4613      	mov	r3, r2
 80086d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d101      	bne.n	80086e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e01f      	b.n	8008724 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d003      	beq.n	800870a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	79fa      	ldrb	r2, [r7, #7]
 8008716:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f005 f9b3 	bl	800da84 <USBD_LL_Init>
 800871e:	4603      	mov	r3, r0
 8008720:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008722:	7dfb      	ldrb	r3, [r7, #23]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3718      	adds	r7, #24
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008736:	2300      	movs	r3, #0
 8008738:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008740:	2303      	movs	r3, #3
 8008742:	e025      	b.n	8008790 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	32ae      	adds	r2, #174	; 0xae
 8008756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00f      	beq.n	8008780 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	32ae      	adds	r2, #174	; 0xae
 800876a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800876e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008770:	f107 020e 	add.w	r2, r7, #14
 8008774:	4610      	mov	r0, r2
 8008776:	4798      	blx	r3
 8008778:	4602      	mov	r2, r0
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008786:	1c5a      	adds	r2, r3, #1
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f005 f9bb 	bl	800db1c <USBD_LL_Start>
 80087a6:	4603      	mov	r3, r0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80087b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b084      	sub	sp, #16
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	460b      	mov	r3, r1
 80087d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d009      	beq.n	80087f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	78fa      	ldrb	r2, [r7, #3]
 80087ea:	4611      	mov	r1, r2
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	4798      	blx	r3
 80087f0:	4603      	mov	r3, r0
 80087f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b084      	sub	sp, #16
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	460b      	mov	r3, r1
 8008808:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	78fa      	ldrb	r2, [r7, #3]
 8008818:	4611      	mov	r1, r2
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	4798      	blx	r3
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008824:	2303      	movs	r3, #3
 8008826:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008828:	7bfb      	ldrb	r3, [r7, #15]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	4618      	mov	r0, r3
 8008846:	f001 f908 	bl	8009a5a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2201      	movs	r2, #1
 800884e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008858:	461a      	mov	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008866:	f003 031f 	and.w	r3, r3, #31
 800886a:	2b02      	cmp	r3, #2
 800886c:	d01a      	beq.n	80088a4 <USBD_LL_SetupStage+0x72>
 800886e:	2b02      	cmp	r3, #2
 8008870:	d822      	bhi.n	80088b8 <USBD_LL_SetupStage+0x86>
 8008872:	2b00      	cmp	r3, #0
 8008874:	d002      	beq.n	800887c <USBD_LL_SetupStage+0x4a>
 8008876:	2b01      	cmp	r3, #1
 8008878:	d00a      	beq.n	8008890 <USBD_LL_SetupStage+0x5e>
 800887a:	e01d      	b.n	80088b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008882:	4619      	mov	r1, r3
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fb5f 	bl	8008f48 <USBD_StdDevReq>
 800888a:	4603      	mov	r3, r0
 800888c:	73fb      	strb	r3, [r7, #15]
      break;
 800888e:	e020      	b.n	80088d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fbc7 	bl	800902c <USBD_StdItfReq>
 800889e:	4603      	mov	r3, r0
 80088a0:	73fb      	strb	r3, [r7, #15]
      break;
 80088a2:	e016      	b.n	80088d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fc29 	bl	8009104 <USBD_StdEPReq>
 80088b2:	4603      	mov	r3, r0
 80088b4:	73fb      	strb	r3, [r7, #15]
      break;
 80088b6:	e00c      	b.n	80088d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80088be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f005 f988 	bl	800dbdc <USBD_LL_StallEP>
 80088cc:	4603      	mov	r3, r0
 80088ce:	73fb      	strb	r3, [r7, #15]
      break;
 80088d0:	bf00      	nop
  }

  return ret;
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	460b      	mov	r3, r1
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80088ee:	7afb      	ldrb	r3, [r7, #11]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d16e      	bne.n	80089d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80088fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008902:	2b03      	cmp	r3, #3
 8008904:	f040 8098 	bne.w	8008a38 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	689a      	ldr	r2, [r3, #8]
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	429a      	cmp	r2, r3
 8008912:	d913      	bls.n	800893c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	689a      	ldr	r2, [r3, #8]
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	1ad2      	subs	r2, r2, r3
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	68da      	ldr	r2, [r3, #12]
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	4293      	cmp	r3, r2
 800892c:	bf28      	it	cs
 800892e:	4613      	movcs	r3, r2
 8008930:	461a      	mov	r2, r3
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f001 f984 	bl	8009c42 <USBD_CtlContinueRx>
 800893a:	e07d      	b.n	8008a38 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008942:	f003 031f 	and.w	r3, r3, #31
 8008946:	2b02      	cmp	r3, #2
 8008948:	d014      	beq.n	8008974 <USBD_LL_DataOutStage+0x98>
 800894a:	2b02      	cmp	r3, #2
 800894c:	d81d      	bhi.n	800898a <USBD_LL_DataOutStage+0xae>
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <USBD_LL_DataOutStage+0x7c>
 8008952:	2b01      	cmp	r3, #1
 8008954:	d003      	beq.n	800895e <USBD_LL_DataOutStage+0x82>
 8008956:	e018      	b.n	800898a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008958:	2300      	movs	r3, #0
 800895a:	75bb      	strb	r3, [r7, #22]
            break;
 800895c:	e018      	b.n	8008990 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008964:	b2db      	uxtb	r3, r3
 8008966:	4619      	mov	r1, r3
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f000 fa5e 	bl	8008e2a <USBD_CoreFindIF>
 800896e:	4603      	mov	r3, r0
 8008970:	75bb      	strb	r3, [r7, #22]
            break;
 8008972:	e00d      	b.n	8008990 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800897a:	b2db      	uxtb	r3, r3
 800897c:	4619      	mov	r1, r3
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 fa60 	bl	8008e44 <USBD_CoreFindEP>
 8008984:	4603      	mov	r3, r0
 8008986:	75bb      	strb	r3, [r7, #22]
            break;
 8008988:	e002      	b.n	8008990 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	75bb      	strb	r3, [r7, #22]
            break;
 800898e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008990:	7dbb      	ldrb	r3, [r7, #22]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d119      	bne.n	80089ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800899c:	b2db      	uxtb	r3, r3
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d113      	bne.n	80089ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80089a2:	7dba      	ldrb	r2, [r7, #22]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	32ae      	adds	r2, #174	; 0xae
 80089a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00b      	beq.n	80089ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80089b2:	7dba      	ldrb	r2, [r7, #22]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80089ba:	7dba      	ldrb	r2, [r7, #22]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	32ae      	adds	r2, #174	; 0xae
 80089c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f001 f94a 	bl	8009c64 <USBD_CtlSendStatus>
 80089d0:	e032      	b.n	8008a38 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80089d2:	7afb      	ldrb	r3, [r7, #11]
 80089d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	4619      	mov	r1, r3
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 fa31 	bl	8008e44 <USBD_CoreFindEP>
 80089e2:	4603      	mov	r3, r0
 80089e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089e6:	7dbb      	ldrb	r3, [r7, #22]
 80089e8:	2bff      	cmp	r3, #255	; 0xff
 80089ea:	d025      	beq.n	8008a38 <USBD_LL_DataOutStage+0x15c>
 80089ec:	7dbb      	ldrb	r3, [r7, #22]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d122      	bne.n	8008a38 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d117      	bne.n	8008a2e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80089fe:	7dba      	ldrb	r2, [r7, #22]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	32ae      	adds	r2, #174	; 0xae
 8008a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00f      	beq.n	8008a2e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008a0e:	7dba      	ldrb	r2, [r7, #22]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008a16:	7dba      	ldrb	r2, [r7, #22]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	32ae      	adds	r2, #174	; 0xae
 8008a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	7afa      	ldrb	r2, [r7, #11]
 8008a24:	4611      	mov	r1, r2
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	4798      	blx	r3
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008a2e:	7dfb      	ldrb	r3, [r7, #23]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008a34:	7dfb      	ldrb	r3, [r7, #23]
 8008a36:	e000      	b.n	8008a3a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b086      	sub	sp, #24
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	607a      	str	r2, [r7, #4]
 8008a4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008a50:	7afb      	ldrb	r3, [r7, #11]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d16f      	bne.n	8008b36 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	3314      	adds	r3, #20
 8008a5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d15a      	bne.n	8008b1c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	689a      	ldr	r2, [r3, #8]
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d914      	bls.n	8008a9c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	689a      	ldr	r2, [r3, #8]
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	1ad2      	subs	r2, r2, r3
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	461a      	mov	r2, r3
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f001 f8ac 	bl	8009be6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a8e:	2300      	movs	r3, #0
 8008a90:	2200      	movs	r2, #0
 8008a92:	2100      	movs	r1, #0
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f005 f94b 	bl	800dd30 <USBD_LL_PrepareReceive>
 8008a9a:	e03f      	b.n	8008b1c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	68da      	ldr	r2, [r3, #12]
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d11c      	bne.n	8008ae2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	685a      	ldr	r2, [r3, #4]
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d316      	bcc.n	8008ae2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d20f      	bcs.n	8008ae2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f001 f88d 	bl	8009be6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2100      	movs	r1, #0
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f005 f928 	bl	800dd30 <USBD_LL_PrepareReceive>
 8008ae0:	e01c      	b.n	8008b1c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d10f      	bne.n	8008b0e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d009      	beq.n	8008b0e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b0e:	2180      	movs	r1, #128	; 0x80
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f005 f863 	bl	800dbdc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f001 f8b7 	bl	8009c8a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d03a      	beq.n	8008b9c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f7ff fe42 	bl	80087b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008b34:	e032      	b.n	8008b9c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008b36:	7afb      	ldrb	r3, [r7, #11]
 8008b38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	4619      	mov	r1, r3
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f000 f97f 	bl	8008e44 <USBD_CoreFindEP>
 8008b46:	4603      	mov	r3, r0
 8008b48:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b4a:	7dfb      	ldrb	r3, [r7, #23]
 8008b4c:	2bff      	cmp	r3, #255	; 0xff
 8008b4e:	d025      	beq.n	8008b9c <USBD_LL_DataInStage+0x15a>
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d122      	bne.n	8008b9c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d11c      	bne.n	8008b9c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008b62:	7dfa      	ldrb	r2, [r7, #23]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	32ae      	adds	r2, #174	; 0xae
 8008b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d014      	beq.n	8008b9c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008b72:	7dfa      	ldrb	r2, [r7, #23]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008b7a:	7dfa      	ldrb	r2, [r7, #23]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	32ae      	adds	r2, #174	; 0xae
 8008b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b84:	695b      	ldr	r3, [r3, #20]
 8008b86:	7afa      	ldrb	r2, [r7, #11]
 8008b88:	4611      	mov	r1, r2
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	4798      	blx	r3
 8008b8e:	4603      	mov	r3, r0
 8008b90:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008b92:	7dbb      	ldrb	r3, [r7, #22]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d001      	beq.n	8008b9c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008b98:	7dbb      	ldrb	r3, [r7, #22]
 8008b9a:	e000      	b.n	8008b9e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3718      	adds	r7, #24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b084      	sub	sp, #16
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d014      	beq.n	8008c0c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00e      	beq.n	8008c0c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	6852      	ldr	r2, [r2, #4]
 8008bfa:	b2d2      	uxtb	r2, r2
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	4798      	blx	r3
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c0c:	2340      	movs	r3, #64	; 0x40
 8008c0e:	2200      	movs	r2, #0
 8008c10:	2100      	movs	r1, #0
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f004 ff9d 	bl	800db52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2240      	movs	r2, #64	; 0x40
 8008c24:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c28:	2340      	movs	r3, #64	; 0x40
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	2180      	movs	r1, #128	; 0x80
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f004 ff8f 	bl	800db52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2240      	movs	r2, #64	; 0x40
 8008c3e:	621a      	str	r2, [r3, #32]

  return ret;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	460b      	mov	r3, r1
 8008c54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	78fa      	ldrb	r2, [r7, #3]
 8008c5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b083      	sub	sp, #12
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2204      	movs	r2, #4
 8008c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	370c      	adds	r7, #12
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b083      	sub	sp, #12
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b04      	cmp	r3, #4
 8008ca8:	d106      	bne.n	8008cb8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	370c      	adds	r7, #12
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b082      	sub	sp, #8
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b03      	cmp	r3, #3
 8008cd8:	d110      	bne.n	8008cfc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00b      	beq.n	8008cfc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cea:	69db      	ldr	r3, [r3, #28]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d005      	beq.n	8008cfc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf6:	69db      	ldr	r3, [r3, #28]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b082      	sub	sp, #8
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	32ae      	adds	r2, #174	; 0xae
 8008d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e01c      	b.n	8008d62 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d115      	bne.n	8008d60 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	32ae      	adds	r2, #174	; 0xae
 8008d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00b      	beq.n	8008d60 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	32ae      	adds	r2, #174	; 0xae
 8008d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	78fa      	ldrb	r2, [r7, #3]
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b082      	sub	sp, #8
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	460b      	mov	r3, r1
 8008d74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	32ae      	adds	r2, #174	; 0xae
 8008d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e01c      	b.n	8008dc6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d115      	bne.n	8008dc4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	32ae      	adds	r2, #174	; 0xae
 8008da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00b      	beq.n	8008dc4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	32ae      	adds	r2, #174	; 0xae
 8008db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbc:	78fa      	ldrb	r2, [r7, #3]
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b083      	sub	sp, #12
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00e      	beq.n	8008e20 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	6852      	ldr	r2, [r2, #4]
 8008e0e:	b2d2      	uxtb	r2, r2
 8008e10:	4611      	mov	r1, r2
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	4798      	blx	r3
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008e2a:	b480      	push	{r7}
 8008e2c:	b083      	sub	sp, #12
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	460b      	mov	r3, r1
 8008e34:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008e36:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008e50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b086      	sub	sp, #24
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	460b      	mov	r3, r1
 8008e68:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008e72:	2300      	movs	r3, #0
 8008e74:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	885b      	ldrh	r3, [r3, #2]
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d920      	bls.n	8008ec8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008e8e:	e013      	b.n	8008eb8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008e90:	f107 030a 	add.w	r3, r7, #10
 8008e94:	4619      	mov	r1, r3
 8008e96:	6978      	ldr	r0, [r7, #20]
 8008e98:	f000 f81b 	bl	8008ed2 <USBD_GetNextDesc>
 8008e9c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	785b      	ldrb	r3, [r3, #1]
 8008ea2:	2b05      	cmp	r3, #5
 8008ea4:	d108      	bne.n	8008eb8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	789b      	ldrb	r3, [r3, #2]
 8008eae:	78fa      	ldrb	r2, [r7, #3]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d008      	beq.n	8008ec6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	885b      	ldrh	r3, [r3, #2]
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	897b      	ldrh	r3, [r7, #10]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d8e5      	bhi.n	8008e90 <USBD_GetEpDesc+0x32>
 8008ec4:	e000      	b.n	8008ec8 <USBD_GetEpDesc+0x6a>
          break;
 8008ec6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008ec8:	693b      	ldr	r3, [r7, #16]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3718      	adds	r7, #24
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b085      	sub	sp, #20
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	881a      	ldrh	r2, [r3, #0]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	4413      	add	r3, r2
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4413      	add	r3, r2
 8008efc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008efe:	68fb      	ldr	r3, [r7, #12]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3714      	adds	r7, #20
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	3301      	adds	r3, #1
 8008f22:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008f2a:	8a3b      	ldrh	r3, [r7, #16]
 8008f2c:	021b      	lsls	r3, r3, #8
 8008f2e:	b21a      	sxth	r2, r3
 8008f30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	b21b      	sxth	r3, r3
 8008f38:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008f3a:	89fb      	ldrh	r3, [r7, #14]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	371c      	adds	r7, #28
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f5e:	2b40      	cmp	r3, #64	; 0x40
 8008f60:	d005      	beq.n	8008f6e <USBD_StdDevReq+0x26>
 8008f62:	2b40      	cmp	r3, #64	; 0x40
 8008f64:	d857      	bhi.n	8009016 <USBD_StdDevReq+0xce>
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00f      	beq.n	8008f8a <USBD_StdDevReq+0x42>
 8008f6a:	2b20      	cmp	r3, #32
 8008f6c:	d153      	bne.n	8009016 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	32ae      	adds	r2, #174	; 0xae
 8008f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	4798      	blx	r3
 8008f84:	4603      	mov	r3, r0
 8008f86:	73fb      	strb	r3, [r7, #15]
      break;
 8008f88:	e04a      	b.n	8009020 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	785b      	ldrb	r3, [r3, #1]
 8008f8e:	2b09      	cmp	r3, #9
 8008f90:	d83b      	bhi.n	800900a <USBD_StdDevReq+0xc2>
 8008f92:	a201      	add	r2, pc, #4	; (adr r2, 8008f98 <USBD_StdDevReq+0x50>)
 8008f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f98:	08008fed 	.word	0x08008fed
 8008f9c:	08009001 	.word	0x08009001
 8008fa0:	0800900b 	.word	0x0800900b
 8008fa4:	08008ff7 	.word	0x08008ff7
 8008fa8:	0800900b 	.word	0x0800900b
 8008fac:	08008fcb 	.word	0x08008fcb
 8008fb0:	08008fc1 	.word	0x08008fc1
 8008fb4:	0800900b 	.word	0x0800900b
 8008fb8:	08008fe3 	.word	0x08008fe3
 8008fbc:	08008fd5 	.word	0x08008fd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fa3c 	bl	8009440 <USBD_GetDescriptor>
          break;
 8008fc8:	e024      	b.n	8009014 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008fca:	6839      	ldr	r1, [r7, #0]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fba1 	bl	8009714 <USBD_SetAddress>
          break;
 8008fd2:	e01f      	b.n	8009014 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fbe0 	bl	800979c <USBD_SetConfig>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	73fb      	strb	r3, [r7, #15]
          break;
 8008fe0:	e018      	b.n	8009014 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fc83 	bl	80098f0 <USBD_GetConfig>
          break;
 8008fea:	e013      	b.n	8009014 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fcb4 	bl	800995c <USBD_GetStatus>
          break;
 8008ff4:	e00e      	b.n	8009014 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008ff6:	6839      	ldr	r1, [r7, #0]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 fce3 	bl	80099c4 <USBD_SetFeature>
          break;
 8008ffe:	e009      	b.n	8009014 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 fd07 	bl	8009a16 <USBD_ClrFeature>
          break;
 8009008:	e004      	b.n	8009014 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800900a:	6839      	ldr	r1, [r7, #0]
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fd5e 	bl	8009ace <USBD_CtlError>
          break;
 8009012:	bf00      	nop
      }
      break;
 8009014:	e004      	b.n	8009020 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009016:	6839      	ldr	r1, [r7, #0]
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fd58 	bl	8009ace <USBD_CtlError>
      break;
 800901e:	bf00      	nop
  }

  return ret;
 8009020:	7bfb      	ldrb	r3, [r7, #15]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop

0800902c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009042:	2b40      	cmp	r3, #64	; 0x40
 8009044:	d005      	beq.n	8009052 <USBD_StdItfReq+0x26>
 8009046:	2b40      	cmp	r3, #64	; 0x40
 8009048:	d852      	bhi.n	80090f0 <USBD_StdItfReq+0xc4>
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <USBD_StdItfReq+0x26>
 800904e:	2b20      	cmp	r3, #32
 8009050:	d14e      	bne.n	80090f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009058:	b2db      	uxtb	r3, r3
 800905a:	3b01      	subs	r3, #1
 800905c:	2b02      	cmp	r3, #2
 800905e:	d840      	bhi.n	80090e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	889b      	ldrh	r3, [r3, #4]
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b01      	cmp	r3, #1
 8009068:	d836      	bhi.n	80090d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	889b      	ldrh	r3, [r3, #4]
 800906e:	b2db      	uxtb	r3, r3
 8009070:	4619      	mov	r1, r3
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7ff fed9 	bl	8008e2a <USBD_CoreFindIF>
 8009078:	4603      	mov	r3, r0
 800907a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800907c:	7bbb      	ldrb	r3, [r7, #14]
 800907e:	2bff      	cmp	r3, #255	; 0xff
 8009080:	d01d      	beq.n	80090be <USBD_StdItfReq+0x92>
 8009082:	7bbb      	ldrb	r3, [r7, #14]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d11a      	bne.n	80090be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009088:	7bba      	ldrb	r2, [r7, #14]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	32ae      	adds	r2, #174	; 0xae
 800908e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00f      	beq.n	80090b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009098:	7bba      	ldrb	r2, [r7, #14]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80090a0:	7bba      	ldrb	r2, [r7, #14]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	32ae      	adds	r2, #174	; 0xae
 80090a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	4798      	blx	r3
 80090b2:	4603      	mov	r3, r0
 80090b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80090b6:	e004      	b.n	80090c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80090b8:	2303      	movs	r3, #3
 80090ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80090bc:	e001      	b.n	80090c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80090be:	2303      	movs	r3, #3
 80090c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	88db      	ldrh	r3, [r3, #6]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d110      	bne.n	80090ec <USBD_StdItfReq+0xc0>
 80090ca:	7bfb      	ldrb	r3, [r7, #15]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10d      	bne.n	80090ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fdc7 	bl	8009c64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80090d6:	e009      	b.n	80090ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fcf7 	bl	8009ace <USBD_CtlError>
          break;
 80090e0:	e004      	b.n	80090ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fcf2 	bl	8009ace <USBD_CtlError>
          break;
 80090ea:	e000      	b.n	80090ee <USBD_StdItfReq+0xc2>
          break;
 80090ec:	bf00      	nop
      }
      break;
 80090ee:	e004      	b.n	80090fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fceb 	bl	8009ace <USBD_CtlError>
      break;
 80090f8:	bf00      	nop
  }

  return ret;
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800910e:	2300      	movs	r3, #0
 8009110:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	889b      	ldrh	r3, [r3, #4]
 8009116:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009120:	2b40      	cmp	r3, #64	; 0x40
 8009122:	d007      	beq.n	8009134 <USBD_StdEPReq+0x30>
 8009124:	2b40      	cmp	r3, #64	; 0x40
 8009126:	f200 817f 	bhi.w	8009428 <USBD_StdEPReq+0x324>
 800912a:	2b00      	cmp	r3, #0
 800912c:	d02a      	beq.n	8009184 <USBD_StdEPReq+0x80>
 800912e:	2b20      	cmp	r3, #32
 8009130:	f040 817a 	bne.w	8009428 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009134:	7bbb      	ldrb	r3, [r7, #14]
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff fe83 	bl	8008e44 <USBD_CoreFindEP>
 800913e:	4603      	mov	r3, r0
 8009140:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009142:	7b7b      	ldrb	r3, [r7, #13]
 8009144:	2bff      	cmp	r3, #255	; 0xff
 8009146:	f000 8174 	beq.w	8009432 <USBD_StdEPReq+0x32e>
 800914a:	7b7b      	ldrb	r3, [r7, #13]
 800914c:	2b00      	cmp	r3, #0
 800914e:	f040 8170 	bne.w	8009432 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009152:	7b7a      	ldrb	r2, [r7, #13]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800915a:	7b7a      	ldrb	r2, [r7, #13]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	32ae      	adds	r2, #174	; 0xae
 8009160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 8163 	beq.w	8009432 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800916c:	7b7a      	ldrb	r2, [r7, #13]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	32ae      	adds	r2, #174	; 0xae
 8009172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	4798      	blx	r3
 800917e:	4603      	mov	r3, r0
 8009180:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009182:	e156      	b.n	8009432 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	785b      	ldrb	r3, [r3, #1]
 8009188:	2b03      	cmp	r3, #3
 800918a:	d008      	beq.n	800919e <USBD_StdEPReq+0x9a>
 800918c:	2b03      	cmp	r3, #3
 800918e:	f300 8145 	bgt.w	800941c <USBD_StdEPReq+0x318>
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 809b 	beq.w	80092ce <USBD_StdEPReq+0x1ca>
 8009198:	2b01      	cmp	r3, #1
 800919a:	d03c      	beq.n	8009216 <USBD_StdEPReq+0x112>
 800919c:	e13e      	b.n	800941c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d002      	beq.n	80091b0 <USBD_StdEPReq+0xac>
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d016      	beq.n	80091dc <USBD_StdEPReq+0xd8>
 80091ae:	e02c      	b.n	800920a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00d      	beq.n	80091d2 <USBD_StdEPReq+0xce>
 80091b6:	7bbb      	ldrb	r3, [r7, #14]
 80091b8:	2b80      	cmp	r3, #128	; 0x80
 80091ba:	d00a      	beq.n	80091d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f004 fd0b 	bl	800dbdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80091c6:	2180      	movs	r1, #128	; 0x80
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f004 fd07 	bl	800dbdc <USBD_LL_StallEP>
 80091ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80091d0:	e020      	b.n	8009214 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fc7a 	bl	8009ace <USBD_CtlError>
              break;
 80091da:	e01b      	b.n	8009214 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	885b      	ldrh	r3, [r3, #2]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10e      	bne.n	8009202 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80091e4:	7bbb      	ldrb	r3, [r7, #14]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00b      	beq.n	8009202 <USBD_StdEPReq+0xfe>
 80091ea:	7bbb      	ldrb	r3, [r7, #14]
 80091ec:	2b80      	cmp	r3, #128	; 0x80
 80091ee:	d008      	beq.n	8009202 <USBD_StdEPReq+0xfe>
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	88db      	ldrh	r3, [r3, #6]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d104      	bne.n	8009202 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80091f8:	7bbb      	ldrb	r3, [r7, #14]
 80091fa:	4619      	mov	r1, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f004 fced 	bl	800dbdc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fd2e 	bl	8009c64 <USBD_CtlSendStatus>

              break;
 8009208:	e004      	b.n	8009214 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fc5e 	bl	8009ace <USBD_CtlError>
              break;
 8009212:	bf00      	nop
          }
          break;
 8009214:	e107      	b.n	8009426 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800921c:	b2db      	uxtb	r3, r3
 800921e:	2b02      	cmp	r3, #2
 8009220:	d002      	beq.n	8009228 <USBD_StdEPReq+0x124>
 8009222:	2b03      	cmp	r3, #3
 8009224:	d016      	beq.n	8009254 <USBD_StdEPReq+0x150>
 8009226:	e04b      	b.n	80092c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00d      	beq.n	800924a <USBD_StdEPReq+0x146>
 800922e:	7bbb      	ldrb	r3, [r7, #14]
 8009230:	2b80      	cmp	r3, #128	; 0x80
 8009232:	d00a      	beq.n	800924a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f004 fccf 	bl	800dbdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800923e:	2180      	movs	r1, #128	; 0x80
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f004 fccb 	bl	800dbdc <USBD_LL_StallEP>
 8009246:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009248:	e040      	b.n	80092cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fc3e 	bl	8009ace <USBD_CtlError>
              break;
 8009252:	e03b      	b.n	80092cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	885b      	ldrh	r3, [r3, #2]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d136      	bne.n	80092ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009262:	2b00      	cmp	r3, #0
 8009264:	d004      	beq.n	8009270 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009266:	7bbb      	ldrb	r3, [r7, #14]
 8009268:	4619      	mov	r1, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f004 fcd5 	bl	800dc1a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fcf7 	bl	8009c64 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009276:	7bbb      	ldrb	r3, [r7, #14]
 8009278:	4619      	mov	r1, r3
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7ff fde2 	bl	8008e44 <USBD_CoreFindEP>
 8009280:	4603      	mov	r3, r0
 8009282:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009284:	7b7b      	ldrb	r3, [r7, #13]
 8009286:	2bff      	cmp	r3, #255	; 0xff
 8009288:	d01f      	beq.n	80092ca <USBD_StdEPReq+0x1c6>
 800928a:	7b7b      	ldrb	r3, [r7, #13]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d11c      	bne.n	80092ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009290:	7b7a      	ldrb	r2, [r7, #13]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009298:	7b7a      	ldrb	r2, [r7, #13]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	32ae      	adds	r2, #174	; 0xae
 800929e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d010      	beq.n	80092ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80092a8:	7b7a      	ldrb	r2, [r7, #13]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	32ae      	adds	r2, #174	; 0xae
 80092ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	4798      	blx	r3
 80092ba:	4603      	mov	r3, r0
 80092bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80092be:	e004      	b.n	80092ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80092c0:	6839      	ldr	r1, [r7, #0]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fc03 	bl	8009ace <USBD_CtlError>
              break;
 80092c8:	e000      	b.n	80092cc <USBD_StdEPReq+0x1c8>
              break;
 80092ca:	bf00      	nop
          }
          break;
 80092cc:	e0ab      	b.n	8009426 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d002      	beq.n	80092e0 <USBD_StdEPReq+0x1dc>
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d032      	beq.n	8009344 <USBD_StdEPReq+0x240>
 80092de:	e097      	b.n	8009410 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092e0:	7bbb      	ldrb	r3, [r7, #14]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d007      	beq.n	80092f6 <USBD_StdEPReq+0x1f2>
 80092e6:	7bbb      	ldrb	r3, [r7, #14]
 80092e8:	2b80      	cmp	r3, #128	; 0x80
 80092ea:	d004      	beq.n	80092f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fbed 	bl	8009ace <USBD_CtlError>
                break;
 80092f4:	e091      	b.n	800941a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	da0b      	bge.n	8009316 <USBD_StdEPReq+0x212>
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009304:	4613      	mov	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	3310      	adds	r3, #16
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	4413      	add	r3, r2
 8009312:	3304      	adds	r3, #4
 8009314:	e00b      	b.n	800932e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009316:	7bbb      	ldrb	r3, [r7, #14]
 8009318:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800931c:	4613      	mov	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	4413      	add	r3, r2
 800932c:	3304      	adds	r3, #4
 800932e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	2200      	movs	r2, #0
 8009334:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2202      	movs	r2, #2
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fc37 	bl	8009bb0 <USBD_CtlSendData>
              break;
 8009342:	e06a      	b.n	800941a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009344:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009348:	2b00      	cmp	r3, #0
 800934a:	da11      	bge.n	8009370 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800934c:	7bbb      	ldrb	r3, [r7, #14]
 800934e:	f003 020f 	and.w	r2, r3, #15
 8009352:	6879      	ldr	r1, [r7, #4]
 8009354:	4613      	mov	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4413      	add	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	440b      	add	r3, r1
 800935e:	3324      	adds	r3, #36	; 0x24
 8009360:	881b      	ldrh	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d117      	bne.n	8009396 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009366:	6839      	ldr	r1, [r7, #0]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fbb0 	bl	8009ace <USBD_CtlError>
                  break;
 800936e:	e054      	b.n	800941a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009370:	7bbb      	ldrb	r3, [r7, #14]
 8009372:	f003 020f 	and.w	r2, r3, #15
 8009376:	6879      	ldr	r1, [r7, #4]
 8009378:	4613      	mov	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	440b      	add	r3, r1
 8009382:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009386:	881b      	ldrh	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d104      	bne.n	8009396 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fb9d 	bl	8009ace <USBD_CtlError>
                  break;
 8009394:	e041      	b.n	800941a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009396:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800939a:	2b00      	cmp	r3, #0
 800939c:	da0b      	bge.n	80093b6 <USBD_StdEPReq+0x2b2>
 800939e:	7bbb      	ldrb	r3, [r7, #14]
 80093a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093a4:	4613      	mov	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4413      	add	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	3310      	adds	r3, #16
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	4413      	add	r3, r2
 80093b2:	3304      	adds	r3, #4
 80093b4:	e00b      	b.n	80093ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093b6:	7bbb      	ldrb	r3, [r7, #14]
 80093b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093bc:	4613      	mov	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	4413      	add	r3, r2
 80093cc:	3304      	adds	r3, #4
 80093ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d002      	beq.n	80093dc <USBD_StdEPReq+0x2d8>
 80093d6:	7bbb      	ldrb	r3, [r7, #14]
 80093d8:	2b80      	cmp	r3, #128	; 0x80
 80093da:	d103      	bne.n	80093e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]
 80093e2:	e00e      	b.n	8009402 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f004 fc35 	bl	800dc58 <USBD_LL_IsStallEP>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d003      	beq.n	80093fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2201      	movs	r2, #1
 80093f8:	601a      	str	r2, [r3, #0]
 80093fa:	e002      	b.n	8009402 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2200      	movs	r2, #0
 8009400:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	2202      	movs	r2, #2
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fbd1 	bl	8009bb0 <USBD_CtlSendData>
              break;
 800940e:	e004      	b.n	800941a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009410:	6839      	ldr	r1, [r7, #0]
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 fb5b 	bl	8009ace <USBD_CtlError>
              break;
 8009418:	bf00      	nop
          }
          break;
 800941a:	e004      	b.n	8009426 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fb55 	bl	8009ace <USBD_CtlError>
          break;
 8009424:	bf00      	nop
      }
      break;
 8009426:	e005      	b.n	8009434 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fb4f 	bl	8009ace <USBD_CtlError>
      break;
 8009430:	e000      	b.n	8009434 <USBD_StdEPReq+0x330>
      break;
 8009432:	bf00      	nop
  }

  return ret;
 8009434:	7bfb      	ldrb	r3, [r7, #15]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
	...

08009440 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800944a:	2300      	movs	r3, #0
 800944c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800944e:	2300      	movs	r3, #0
 8009450:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	885b      	ldrh	r3, [r3, #2]
 800945a:	0a1b      	lsrs	r3, r3, #8
 800945c:	b29b      	uxth	r3, r3
 800945e:	3b01      	subs	r3, #1
 8009460:	2b06      	cmp	r3, #6
 8009462:	f200 8128 	bhi.w	80096b6 <USBD_GetDescriptor+0x276>
 8009466:	a201      	add	r2, pc, #4	; (adr r2, 800946c <USBD_GetDescriptor+0x2c>)
 8009468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946c:	08009489 	.word	0x08009489
 8009470:	080094a1 	.word	0x080094a1
 8009474:	080094e1 	.word	0x080094e1
 8009478:	080096b7 	.word	0x080096b7
 800947c:	080096b7 	.word	0x080096b7
 8009480:	08009657 	.word	0x08009657
 8009484:	08009683 	.word	0x08009683
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	7c12      	ldrb	r2, [r2, #16]
 8009494:	f107 0108 	add.w	r1, r7, #8
 8009498:	4610      	mov	r0, r2
 800949a:	4798      	blx	r3
 800949c:	60f8      	str	r0, [r7, #12]
      break;
 800949e:	e112      	b.n	80096c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	7c1b      	ldrb	r3, [r3, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10d      	bne.n	80094c4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b0:	f107 0208 	add.w	r2, r7, #8
 80094b4:	4610      	mov	r0, r2
 80094b6:	4798      	blx	r3
 80094b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	3301      	adds	r3, #1
 80094be:	2202      	movs	r2, #2
 80094c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80094c2:	e100      	b.n	80096c6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094cc:	f107 0208 	add.w	r2, r7, #8
 80094d0:	4610      	mov	r0, r2
 80094d2:	4798      	blx	r3
 80094d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	3301      	adds	r3, #1
 80094da:	2202      	movs	r2, #2
 80094dc:	701a      	strb	r2, [r3, #0]
      break;
 80094de:	e0f2      	b.n	80096c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	885b      	ldrh	r3, [r3, #2]
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b05      	cmp	r3, #5
 80094e8:	f200 80ac 	bhi.w	8009644 <USBD_GetDescriptor+0x204>
 80094ec:	a201      	add	r2, pc, #4	; (adr r2, 80094f4 <USBD_GetDescriptor+0xb4>)
 80094ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f2:	bf00      	nop
 80094f4:	0800950d 	.word	0x0800950d
 80094f8:	08009541 	.word	0x08009541
 80094fc:	08009575 	.word	0x08009575
 8009500:	080095a9 	.word	0x080095a9
 8009504:	080095dd 	.word	0x080095dd
 8009508:	08009611 	.word	0x08009611
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00b      	beq.n	8009530 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	7c12      	ldrb	r2, [r2, #16]
 8009524:	f107 0108 	add.w	r1, r7, #8
 8009528:	4610      	mov	r0, r2
 800952a:	4798      	blx	r3
 800952c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800952e:	e091      	b.n	8009654 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 facb 	bl	8009ace <USBD_CtlError>
            err++;
 8009538:	7afb      	ldrb	r3, [r7, #11]
 800953a:	3301      	adds	r3, #1
 800953c:	72fb      	strb	r3, [r7, #11]
          break;
 800953e:	e089      	b.n	8009654 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00b      	beq.n	8009564 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	7c12      	ldrb	r2, [r2, #16]
 8009558:	f107 0108 	add.w	r1, r7, #8
 800955c:	4610      	mov	r0, r2
 800955e:	4798      	blx	r3
 8009560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009562:	e077      	b.n	8009654 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fab1 	bl	8009ace <USBD_CtlError>
            err++;
 800956c:	7afb      	ldrb	r3, [r7, #11]
 800956e:	3301      	adds	r3, #1
 8009570:	72fb      	strb	r3, [r7, #11]
          break;
 8009572:	e06f      	b.n	8009654 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00b      	beq.n	8009598 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	7c12      	ldrb	r2, [r2, #16]
 800958c:	f107 0108 	add.w	r1, r7, #8
 8009590:	4610      	mov	r0, r2
 8009592:	4798      	blx	r3
 8009594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009596:	e05d      	b.n	8009654 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fa97 	bl	8009ace <USBD_CtlError>
            err++;
 80095a0:	7afb      	ldrb	r3, [r7, #11]
 80095a2:	3301      	adds	r3, #1
 80095a4:	72fb      	strb	r3, [r7, #11]
          break;
 80095a6:	e055      	b.n	8009654 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00b      	beq.n	80095cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	7c12      	ldrb	r2, [r2, #16]
 80095c0:	f107 0108 	add.w	r1, r7, #8
 80095c4:	4610      	mov	r0, r2
 80095c6:	4798      	blx	r3
 80095c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095ca:	e043      	b.n	8009654 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fa7d 	bl	8009ace <USBD_CtlError>
            err++;
 80095d4:	7afb      	ldrb	r3, [r7, #11]
 80095d6:	3301      	adds	r3, #1
 80095d8:	72fb      	strb	r3, [r7, #11]
          break;
 80095da:	e03b      	b.n	8009654 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095e2:	695b      	ldr	r3, [r3, #20]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00b      	beq.n	8009600 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ee:	695b      	ldr	r3, [r3, #20]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	7c12      	ldrb	r2, [r2, #16]
 80095f4:	f107 0108 	add.w	r1, r7, #8
 80095f8:	4610      	mov	r0, r2
 80095fa:	4798      	blx	r3
 80095fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095fe:	e029      	b.n	8009654 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fa63 	bl	8009ace <USBD_CtlError>
            err++;
 8009608:	7afb      	ldrb	r3, [r7, #11]
 800960a:	3301      	adds	r3, #1
 800960c:	72fb      	strb	r3, [r7, #11]
          break;
 800960e:	e021      	b.n	8009654 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00b      	beq.n	8009634 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009622:	699b      	ldr	r3, [r3, #24]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	7c12      	ldrb	r2, [r2, #16]
 8009628:	f107 0108 	add.w	r1, r7, #8
 800962c:	4610      	mov	r0, r2
 800962e:	4798      	blx	r3
 8009630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009632:	e00f      	b.n	8009654 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fa49 	bl	8009ace <USBD_CtlError>
            err++;
 800963c:	7afb      	ldrb	r3, [r7, #11]
 800963e:	3301      	adds	r3, #1
 8009640:	72fb      	strb	r3, [r7, #11]
          break;
 8009642:	e007      	b.n	8009654 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fa41 	bl	8009ace <USBD_CtlError>
          err++;
 800964c:	7afb      	ldrb	r3, [r7, #11]
 800964e:	3301      	adds	r3, #1
 8009650:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009652:	bf00      	nop
      }
      break;
 8009654:	e037      	b.n	80096c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	7c1b      	ldrb	r3, [r3, #16]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d109      	bne.n	8009672 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009666:	f107 0208 	add.w	r2, r7, #8
 800966a:	4610      	mov	r0, r2
 800966c:	4798      	blx	r3
 800966e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009670:	e029      	b.n	80096c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fa2a 	bl	8009ace <USBD_CtlError>
        err++;
 800967a:	7afb      	ldrb	r3, [r7, #11]
 800967c:	3301      	adds	r3, #1
 800967e:	72fb      	strb	r3, [r7, #11]
      break;
 8009680:	e021      	b.n	80096c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	7c1b      	ldrb	r3, [r3, #16]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10d      	bne.n	80096a6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009692:	f107 0208 	add.w	r2, r7, #8
 8009696:	4610      	mov	r0, r2
 8009698:	4798      	blx	r3
 800969a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	3301      	adds	r3, #1
 80096a0:	2207      	movs	r2, #7
 80096a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096a4:	e00f      	b.n	80096c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80096a6:	6839      	ldr	r1, [r7, #0]
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 fa10 	bl	8009ace <USBD_CtlError>
        err++;
 80096ae:	7afb      	ldrb	r3, [r7, #11]
 80096b0:	3301      	adds	r3, #1
 80096b2:	72fb      	strb	r3, [r7, #11]
      break;
 80096b4:	e007      	b.n	80096c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80096b6:	6839      	ldr	r1, [r7, #0]
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fa08 	bl	8009ace <USBD_CtlError>
      err++;
 80096be:	7afb      	ldrb	r3, [r7, #11]
 80096c0:	3301      	adds	r3, #1
 80096c2:	72fb      	strb	r3, [r7, #11]
      break;
 80096c4:	bf00      	nop
  }

  if (err != 0U)
 80096c6:	7afb      	ldrb	r3, [r7, #11]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d11e      	bne.n	800970a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	88db      	ldrh	r3, [r3, #6]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d016      	beq.n	8009702 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80096d4:	893b      	ldrh	r3, [r7, #8]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00e      	beq.n	80096f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	88da      	ldrh	r2, [r3, #6]
 80096de:	893b      	ldrh	r3, [r7, #8]
 80096e0:	4293      	cmp	r3, r2
 80096e2:	bf28      	it	cs
 80096e4:	4613      	movcs	r3, r2
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80096ea:	893b      	ldrh	r3, [r7, #8]
 80096ec:	461a      	mov	r2, r3
 80096ee:	68f9      	ldr	r1, [r7, #12]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fa5d 	bl	8009bb0 <USBD_CtlSendData>
 80096f6:	e009      	b.n	800970c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f9e7 	bl	8009ace <USBD_CtlError>
 8009700:	e004      	b.n	800970c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 faae 	bl	8009c64 <USBD_CtlSendStatus>
 8009708:	e000      	b.n	800970c <USBD_GetDescriptor+0x2cc>
    return;
 800970a:	bf00      	nop
  }
}
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop

08009714 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	889b      	ldrh	r3, [r3, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d131      	bne.n	800978a <USBD_SetAddress+0x76>
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	88db      	ldrh	r3, [r3, #6]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d12d      	bne.n	800978a <USBD_SetAddress+0x76>
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	885b      	ldrh	r3, [r3, #2]
 8009732:	2b7f      	cmp	r3, #127	; 0x7f
 8009734:	d829      	bhi.n	800978a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	885b      	ldrh	r3, [r3, #2]
 800973a:	b2db      	uxtb	r3, r3
 800973c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009740:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b03      	cmp	r3, #3
 800974c:	d104      	bne.n	8009758 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 f9bc 	bl	8009ace <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009756:	e01d      	b.n	8009794 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	7bfa      	ldrb	r2, [r7, #15]
 800975c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009760:	7bfb      	ldrb	r3, [r7, #15]
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f004 faa3 	bl	800dcb0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fa7a 	bl	8009c64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009770:	7bfb      	ldrb	r3, [r7, #15]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d004      	beq.n	8009780 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2202      	movs	r2, #2
 800977a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800977e:	e009      	b.n	8009794 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009788:	e004      	b.n	8009794 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f99e 	bl	8009ace <USBD_CtlError>
  }
}
 8009792:	bf00      	nop
 8009794:	bf00      	nop
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	885b      	ldrh	r3, [r3, #2]
 80097ae:	b2da      	uxtb	r2, r3
 80097b0:	4b4e      	ldr	r3, [pc, #312]	; (80098ec <USBD_SetConfig+0x150>)
 80097b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80097b4:	4b4d      	ldr	r3, [pc, #308]	; (80098ec <USBD_SetConfig+0x150>)
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d905      	bls.n	80097c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f985 	bl	8009ace <USBD_CtlError>
    return USBD_FAIL;
 80097c4:	2303      	movs	r3, #3
 80097c6:	e08c      	b.n	80098e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d002      	beq.n	80097da <USBD_SetConfig+0x3e>
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	d029      	beq.n	800982c <USBD_SetConfig+0x90>
 80097d8:	e075      	b.n	80098c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80097da:	4b44      	ldr	r3, [pc, #272]	; (80098ec <USBD_SetConfig+0x150>)
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d020      	beq.n	8009824 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80097e2:	4b42      	ldr	r3, [pc, #264]	; (80098ec <USBD_SetConfig+0x150>)
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80097ec:	4b3f      	ldr	r3, [pc, #252]	; (80098ec <USBD_SetConfig+0x150>)
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	4619      	mov	r1, r3
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7fe ffe7 	bl	80087c6 <USBD_SetClassConfig>
 80097f8:	4603      	mov	r3, r0
 80097fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d008      	beq.n	8009814 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009802:	6839      	ldr	r1, [r7, #0]
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 f962 	bl	8009ace <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2202      	movs	r2, #2
 800980e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009812:	e065      	b.n	80098e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 fa25 	bl	8009c64 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2203      	movs	r2, #3
 800981e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009822:	e05d      	b.n	80098e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fa1d 	bl	8009c64 <USBD_CtlSendStatus>
      break;
 800982a:	e059      	b.n	80098e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800982c:	4b2f      	ldr	r3, [pc, #188]	; (80098ec <USBD_SetConfig+0x150>)
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d112      	bne.n	800985a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2202      	movs	r2, #2
 8009838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800983c:	4b2b      	ldr	r3, [pc, #172]	; (80098ec <USBD_SetConfig+0x150>)
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	461a      	mov	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009846:	4b29      	ldr	r3, [pc, #164]	; (80098ec <USBD_SetConfig+0x150>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7fe ffd6 	bl	80087fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fa06 	bl	8009c64 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009858:	e042      	b.n	80098e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800985a:	4b24      	ldr	r3, [pc, #144]	; (80098ec <USBD_SetConfig+0x150>)
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	461a      	mov	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	429a      	cmp	r2, r3
 8009866:	d02a      	beq.n	80098be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	b2db      	uxtb	r3, r3
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7fe ffc4 	bl	80087fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009876:	4b1d      	ldr	r3, [pc, #116]	; (80098ec <USBD_SetConfig+0x150>)
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	461a      	mov	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009880:	4b1a      	ldr	r3, [pc, #104]	; (80098ec <USBD_SetConfig+0x150>)
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f7fe ff9d 	bl	80087c6 <USBD_SetClassConfig>
 800988c:	4603      	mov	r3, r0
 800988e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009890:	7bfb      	ldrb	r3, [r7, #15]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00f      	beq.n	80098b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f918 	bl	8009ace <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	4619      	mov	r1, r3
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f7fe ffa9 	bl	80087fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2202      	movs	r2, #2
 80098b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80098b4:	e014      	b.n	80098e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f9d4 	bl	8009c64 <USBD_CtlSendStatus>
      break;
 80098bc:	e010      	b.n	80098e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f9d0 	bl	8009c64 <USBD_CtlSendStatus>
      break;
 80098c4:	e00c      	b.n	80098e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f900 	bl	8009ace <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80098ce:	4b07      	ldr	r3, [pc, #28]	; (80098ec <USBD_SetConfig+0x150>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7fe ff92 	bl	80087fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80098da:	2303      	movs	r3, #3
 80098dc:	73fb      	strb	r3, [r7, #15]
      break;
 80098de:	bf00      	nop
  }

  return ret;
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	20001688 	.word	0x20001688

080098f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	88db      	ldrh	r3, [r3, #6]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d004      	beq.n	800990c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009902:	6839      	ldr	r1, [r7, #0]
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 f8e2 	bl	8009ace <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800990a:	e023      	b.n	8009954 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009912:	b2db      	uxtb	r3, r3
 8009914:	2b02      	cmp	r3, #2
 8009916:	dc02      	bgt.n	800991e <USBD_GetConfig+0x2e>
 8009918:	2b00      	cmp	r3, #0
 800991a:	dc03      	bgt.n	8009924 <USBD_GetConfig+0x34>
 800991c:	e015      	b.n	800994a <USBD_GetConfig+0x5a>
 800991e:	2b03      	cmp	r3, #3
 8009920:	d00b      	beq.n	800993a <USBD_GetConfig+0x4a>
 8009922:	e012      	b.n	800994a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	3308      	adds	r3, #8
 800992e:	2201      	movs	r2, #1
 8009930:	4619      	mov	r1, r3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f93c 	bl	8009bb0 <USBD_CtlSendData>
        break;
 8009938:	e00c      	b.n	8009954 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	3304      	adds	r3, #4
 800993e:	2201      	movs	r2, #1
 8009940:	4619      	mov	r1, r3
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f934 	bl	8009bb0 <USBD_CtlSendData>
        break;
 8009948:	e004      	b.n	8009954 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800994a:	6839      	ldr	r1, [r7, #0]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 f8be 	bl	8009ace <USBD_CtlError>
        break;
 8009952:	bf00      	nop
}
 8009954:	bf00      	nop
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800996c:	b2db      	uxtb	r3, r3
 800996e:	3b01      	subs	r3, #1
 8009970:	2b02      	cmp	r3, #2
 8009972:	d81e      	bhi.n	80099b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	88db      	ldrh	r3, [r3, #6]
 8009978:	2b02      	cmp	r3, #2
 800997a:	d004      	beq.n	8009986 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800997c:	6839      	ldr	r1, [r7, #0]
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f8a5 	bl	8009ace <USBD_CtlError>
        break;
 8009984:	e01a      	b.n	80099bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009992:	2b00      	cmp	r3, #0
 8009994:	d005      	beq.n	80099a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	f043 0202 	orr.w	r2, r3, #2
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	330c      	adds	r3, #12
 80099a6:	2202      	movs	r2, #2
 80099a8:	4619      	mov	r1, r3
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f900 	bl	8009bb0 <USBD_CtlSendData>
      break;
 80099b0:	e004      	b.n	80099bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f88a 	bl	8009ace <USBD_CtlError>
      break;
 80099ba:	bf00      	nop
  }
}
 80099bc:	bf00      	nop
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	885b      	ldrh	r3, [r3, #2]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d107      	bne.n	80099e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2201      	movs	r2, #1
 80099da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f940 	bl	8009c64 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80099e4:	e013      	b.n	8009a0e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	885b      	ldrh	r3, [r3, #2]
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d10b      	bne.n	8009a06 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	889b      	ldrh	r3, [r3, #4]
 80099f2:	0a1b      	lsrs	r3, r3, #8
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	b2da      	uxtb	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f930 	bl	8009c64 <USBD_CtlSendStatus>
}
 8009a04:	e003      	b.n	8009a0e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009a06:	6839      	ldr	r1, [r7, #0]
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f860 	bl	8009ace <USBD_CtlError>
}
 8009a0e:	bf00      	nop
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b082      	sub	sp, #8
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d80b      	bhi.n	8009a46 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	885b      	ldrh	r3, [r3, #2]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d10c      	bne.n	8009a50 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f910 	bl	8009c64 <USBD_CtlSendStatus>
      }
      break;
 8009a44:	e004      	b.n	8009a50 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f840 	bl	8009ace <USBD_CtlError>
      break;
 8009a4e:	e000      	b.n	8009a52 <USBD_ClrFeature+0x3c>
      break;
 8009a50:	bf00      	nop
  }
}
 8009a52:	bf00      	nop
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b084      	sub	sp, #16
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
 8009a62:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	781a      	ldrb	r2, [r3, #0]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	3301      	adds	r3, #1
 8009a74:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	781a      	ldrb	r2, [r3, #0]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	3301      	adds	r3, #1
 8009a82:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f7ff fa41 	bl	8008f0c <SWAPBYTE>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	3301      	adds	r3, #1
 8009a96:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f7ff fa34 	bl	8008f0c <SWAPBYTE>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f7ff fa27 	bl	8008f0c <SWAPBYTE>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	80da      	strh	r2, [r3, #6]
}
 8009ac6:	bf00      	nop
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b082      	sub	sp, #8
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ad8:	2180      	movs	r1, #128	; 0x80
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f004 f87e 	bl	800dbdc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f004 f87a 	bl	800dbdc <USBD_LL_StallEP>
}
 8009ae8:	bf00      	nop
 8009aea:	3708      	adds	r7, #8
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b086      	sub	sp, #24
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009afc:	2300      	movs	r3, #0
 8009afe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d036      	beq.n	8009b74 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009b0a:	6938      	ldr	r0, [r7, #16]
 8009b0c:	f000 f836 	bl	8009b7c <USBD_GetLen>
 8009b10:	4603      	mov	r3, r0
 8009b12:	3301      	adds	r3, #1
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	005b      	lsls	r3, r3, #1
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009b1e:	7dfb      	ldrb	r3, [r7, #23]
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	4413      	add	r3, r2
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	7812      	ldrb	r2, [r2, #0]
 8009b28:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b2a:	7dfb      	ldrb	r3, [r7, #23]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009b30:	7dfb      	ldrb	r3, [r7, #23]
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	4413      	add	r3, r2
 8009b36:	2203      	movs	r2, #3
 8009b38:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b3a:	7dfb      	ldrb	r3, [r7, #23]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009b40:	e013      	b.n	8009b6a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009b42:	7dfb      	ldrb	r3, [r7, #23]
 8009b44:	68ba      	ldr	r2, [r7, #8]
 8009b46:	4413      	add	r3, r2
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	7812      	ldrb	r2, [r2, #0]
 8009b4c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	3301      	adds	r3, #1
 8009b52:	613b      	str	r3, [r7, #16]
    idx++;
 8009b54:	7dfb      	ldrb	r3, [r7, #23]
 8009b56:	3301      	adds	r3, #1
 8009b58:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009b5a:	7dfb      	ldrb	r3, [r7, #23]
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	4413      	add	r3, r2
 8009b60:	2200      	movs	r2, #0
 8009b62:	701a      	strb	r2, [r3, #0]
    idx++;
 8009b64:	7dfb      	ldrb	r3, [r7, #23]
 8009b66:	3301      	adds	r3, #1
 8009b68:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1e7      	bne.n	8009b42 <USBD_GetString+0x52>
 8009b72:	e000      	b.n	8009b76 <USBD_GetString+0x86>
    return;
 8009b74:	bf00      	nop
  }
}
 8009b76:	3718      	adds	r7, #24
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009b84:	2300      	movs	r3, #0
 8009b86:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009b8c:	e005      	b.n	8009b9a <USBD_GetLen+0x1e>
  {
    len++;
 8009b8e:	7bfb      	ldrb	r3, [r7, #15]
 8009b90:	3301      	adds	r3, #1
 8009b92:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	3301      	adds	r3, #1
 8009b98:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1f5      	bne.n	8009b8e <USBD_GetLen+0x12>
  }

  return len;
 8009ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f004 f889 	bl	800dcee <USBD_LL_Transmit>

  return USBD_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	60f8      	str	r0, [r7, #12]
 8009bee:	60b9      	str	r1, [r7, #8]
 8009bf0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f004 f878 	bl	800dcee <USBD_LL_Transmit>

  return USBD_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2203      	movs	r2, #3
 8009c18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	2100      	movs	r1, #0
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f004 f87c 	bl	800dd30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	60f8      	str	r0, [r7, #12]
 8009c4a:	60b9      	str	r1, [r7, #8]
 8009c4c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	2100      	movs	r1, #0
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	f004 f86b 	bl	800dd30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2204      	movs	r2, #4
 8009c70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009c74:	2300      	movs	r3, #0
 8009c76:	2200      	movs	r2, #0
 8009c78:	2100      	movs	r1, #0
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f004 f837 	bl	800dcee <USBD_LL_Transmit>

  return USBD_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b082      	sub	sp, #8
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2205      	movs	r2, #5
 8009c96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f004 f845 	bl	800dd30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <__NVIC_SetPriority>:
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	6039      	str	r1, [r7, #0]
 8009cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	db0a      	blt.n	8009cda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	b2da      	uxtb	r2, r3
 8009cc8:	490c      	ldr	r1, [pc, #48]	; (8009cfc <__NVIC_SetPriority+0x4c>)
 8009cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cce:	0112      	lsls	r2, r2, #4
 8009cd0:	b2d2      	uxtb	r2, r2
 8009cd2:	440b      	add	r3, r1
 8009cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009cd8:	e00a      	b.n	8009cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	b2da      	uxtb	r2, r3
 8009cde:	4908      	ldr	r1, [pc, #32]	; (8009d00 <__NVIC_SetPriority+0x50>)
 8009ce0:	79fb      	ldrb	r3, [r7, #7]
 8009ce2:	f003 030f 	and.w	r3, r3, #15
 8009ce6:	3b04      	subs	r3, #4
 8009ce8:	0112      	lsls	r2, r2, #4
 8009cea:	b2d2      	uxtb	r2, r2
 8009cec:	440b      	add	r3, r1
 8009cee:	761a      	strb	r2, [r3, #24]
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	e000e100 	.word	0xe000e100
 8009d00:	e000ed00 	.word	0xe000ed00

08009d04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009d04:	b580      	push	{r7, lr}
 8009d06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009d08:	4b05      	ldr	r3, [pc, #20]	; (8009d20 <SysTick_Handler+0x1c>)
 8009d0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009d0c:	f002 fa06 	bl	800c11c <xTaskGetSchedulerState>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d001      	beq.n	8009d1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009d16:	f003 f8ef 	bl	800cef8 <xPortSysTickHandler>
  }
}
 8009d1a:	bf00      	nop
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	e000e010 	.word	0xe000e010

08009d24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009d24:	b580      	push	{r7, lr}
 8009d26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009d28:	2100      	movs	r1, #0
 8009d2a:	f06f 0004 	mvn.w	r0, #4
 8009d2e:	f7ff ffbf 	bl	8009cb0 <__NVIC_SetPriority>
#endif
}
 8009d32:	bf00      	nop
 8009d34:	bd80      	pop	{r7, pc}
	...

08009d38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d3e:	f3ef 8305 	mrs	r3, IPSR
 8009d42:	603b      	str	r3, [r7, #0]
  return(result);
 8009d44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d003      	beq.n	8009d52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009d4a:	f06f 0305 	mvn.w	r3, #5
 8009d4e:	607b      	str	r3, [r7, #4]
 8009d50:	e00c      	b.n	8009d6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009d52:	4b0a      	ldr	r3, [pc, #40]	; (8009d7c <osKernelInitialize+0x44>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d105      	bne.n	8009d66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009d5a:	4b08      	ldr	r3, [pc, #32]	; (8009d7c <osKernelInitialize+0x44>)
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	607b      	str	r3, [r7, #4]
 8009d64:	e002      	b.n	8009d6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009d66:	f04f 33ff 	mov.w	r3, #4294967295
 8009d6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d6c:	687b      	ldr	r3, [r7, #4]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	2000168c 	.word	0x2000168c

08009d80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d86:	f3ef 8305 	mrs	r3, IPSR
 8009d8a:	603b      	str	r3, [r7, #0]
  return(result);
 8009d8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d003      	beq.n	8009d9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009d92:	f06f 0305 	mvn.w	r3, #5
 8009d96:	607b      	str	r3, [r7, #4]
 8009d98:	e010      	b.n	8009dbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009d9a:	4b0b      	ldr	r3, [pc, #44]	; (8009dc8 <osKernelStart+0x48>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d109      	bne.n	8009db6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009da2:	f7ff ffbf 	bl	8009d24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009da6:	4b08      	ldr	r3, [pc, #32]	; (8009dc8 <osKernelStart+0x48>)
 8009da8:	2202      	movs	r2, #2
 8009daa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009dac:	f001 fd42 	bl	800b834 <vTaskStartScheduler>
      stat = osOK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	607b      	str	r3, [r7, #4]
 8009db4:	e002      	b.n	8009dbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009db6:	f04f 33ff 	mov.w	r3, #4294967295
 8009dba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009dbc:	687b      	ldr	r3, [r7, #4]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3708      	adds	r7, #8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	2000168c 	.word	0x2000168c

08009dcc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b08e      	sub	sp, #56	; 0x38
 8009dd0:	af04      	add	r7, sp, #16
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ddc:	f3ef 8305 	mrs	r3, IPSR
 8009de0:	617b      	str	r3, [r7, #20]
  return(result);
 8009de2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d17e      	bne.n	8009ee6 <osThreadNew+0x11a>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d07b      	beq.n	8009ee6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009dee:	2380      	movs	r3, #128	; 0x80
 8009df0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009df2:	2318      	movs	r3, #24
 8009df4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009df6:	2300      	movs	r3, #0
 8009df8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8009dfe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d045      	beq.n	8009e92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d002      	beq.n	8009e14 <osThreadNew+0x48>
        name = attr->name;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d002      	beq.n	8009e22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	699b      	ldr	r3, [r3, #24]
 8009e20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d008      	beq.n	8009e3a <osThreadNew+0x6e>
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	2b38      	cmp	r3, #56	; 0x38
 8009e2c:	d805      	bhi.n	8009e3a <osThreadNew+0x6e>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <osThreadNew+0x72>
        return (NULL);
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	e054      	b.n	8009ee8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	695b      	ldr	r3, [r3, #20]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d003      	beq.n	8009e4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	695b      	ldr	r3, [r3, #20]
 8009e4a:	089b      	lsrs	r3, r3, #2
 8009e4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00e      	beq.n	8009e74 <osThreadNew+0xa8>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	2b63      	cmp	r3, #99	; 0x63
 8009e5c:	d90a      	bls.n	8009e74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d006      	beq.n	8009e74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	695b      	ldr	r3, [r3, #20]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d002      	beq.n	8009e74 <osThreadNew+0xa8>
        mem = 1;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	61bb      	str	r3, [r7, #24]
 8009e72:	e010      	b.n	8009e96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10c      	bne.n	8009e96 <osThreadNew+0xca>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d108      	bne.n	8009e96 <osThreadNew+0xca>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d104      	bne.n	8009e96 <osThreadNew+0xca>
          mem = 0;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	61bb      	str	r3, [r7, #24]
 8009e90:	e001      	b.n	8009e96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d110      	bne.n	8009ebe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ea4:	9202      	str	r2, [sp, #8]
 8009ea6:	9301      	str	r3, [sp, #4]
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	6a3a      	ldr	r2, [r7, #32]
 8009eb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f001 fae2 	bl	800b47c <xTaskCreateStatic>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	613b      	str	r3, [r7, #16]
 8009ebc:	e013      	b.n	8009ee6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d110      	bne.n	8009ee6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009ec4:	6a3b      	ldr	r3, [r7, #32]
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	f107 0310 	add.w	r3, r7, #16
 8009ecc:	9301      	str	r3, [sp, #4]
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f001 fb2d 	bl	800b536 <xTaskCreate>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d001      	beq.n	8009ee6 <osThreadNew+0x11a>
            hTask = NULL;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009ee6:	693b      	ldr	r3, [r7, #16]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3728      	adds	r7, #40	; 0x28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ef8:	f3ef 8305 	mrs	r3, IPSR
 8009efc:	60bb      	str	r3, [r7, #8]
  return(result);
 8009efe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d003      	beq.n	8009f0c <osDelay+0x1c>
    stat = osErrorISR;
 8009f04:	f06f 0305 	mvn.w	r3, #5
 8009f08:	60fb      	str	r3, [r7, #12]
 8009f0a:	e007      	b.n	8009f1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d002      	beq.n	8009f1c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f001 fc58 	bl	800b7cc <vTaskDelay>
    }
  }

  return (stat);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b088      	sub	sp, #32
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f32:	f3ef 8305 	mrs	r3, IPSR
 8009f36:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f38:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d174      	bne.n	800a028 <osMutexNew+0x102>
    if (attr != NULL) {
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d003      	beq.n	8009f4c <osMutexNew+0x26>
      type = attr->attr_bits;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	61bb      	str	r3, [r7, #24]
 8009f4a:	e001      	b.n	8009f50 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	f003 0301 	and.w	r3, r3, #1
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d002      	beq.n	8009f60 <osMutexNew+0x3a>
      rmtx = 1U;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	617b      	str	r3, [r7, #20]
 8009f5e:	e001      	b.n	8009f64 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009f60:	2300      	movs	r3, #0
 8009f62:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	f003 0308 	and.w	r3, r3, #8
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d15c      	bne.n	800a028 <osMutexNew+0x102>
      mem = -1;
 8009f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f72:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d015      	beq.n	8009fa6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d006      	beq.n	8009f90 <osMutexNew+0x6a>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	2b4f      	cmp	r3, #79	; 0x4f
 8009f88:	d902      	bls.n	8009f90 <osMutexNew+0x6a>
          mem = 1;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	613b      	str	r3, [r7, #16]
 8009f8e:	e00c      	b.n	8009faa <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d108      	bne.n	8009faa <osMutexNew+0x84>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d104      	bne.n	8009faa <osMutexNew+0x84>
            mem = 0;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	613b      	str	r3, [r7, #16]
 8009fa4:	e001      	b.n	8009faa <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d112      	bne.n	8009fd6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d007      	beq.n	8009fc6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	2004      	movs	r0, #4
 8009fbe:	f000 fc14 	bl	800a7ea <xQueueCreateMutexStatic>
 8009fc2:	61f8      	str	r0, [r7, #28]
 8009fc4:	e016      	b.n	8009ff4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	4619      	mov	r1, r3
 8009fcc:	2001      	movs	r0, #1
 8009fce:	f000 fc0c 	bl	800a7ea <xQueueCreateMutexStatic>
 8009fd2:	61f8      	str	r0, [r7, #28]
 8009fd4:	e00e      	b.n	8009ff4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10b      	bne.n	8009ff4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d004      	beq.n	8009fec <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009fe2:	2004      	movs	r0, #4
 8009fe4:	f000 fbe9 	bl	800a7ba <xQueueCreateMutex>
 8009fe8:	61f8      	str	r0, [r7, #28]
 8009fea:	e003      	b.n	8009ff4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009fec:	2001      	movs	r0, #1
 8009fee:	f000 fbe4 	bl	800a7ba <xQueueCreateMutex>
 8009ff2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00c      	beq.n	800a014 <osMutexNew+0xee>
        if (attr != NULL) {
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d003      	beq.n	800a008 <osMutexNew+0xe2>
          name = attr->name;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	60fb      	str	r3, [r7, #12]
 800a006:	e001      	b.n	800a00c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a008:	2300      	movs	r3, #0
 800a00a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a00c:	68f9      	ldr	r1, [r7, #12]
 800a00e:	69f8      	ldr	r0, [r7, #28]
 800a010:	f001 f9ac 	bl	800b36c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d006      	beq.n	800a028 <osMutexNew+0x102>
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d003      	beq.n	800a028 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	f043 0301 	orr.w	r3, r3, #1
 800a026:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a028:	69fb      	ldr	r3, [r7, #28]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3720      	adds	r7, #32
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a032:	b580      	push	{r7, lr}
 800a034:	b086      	sub	sp, #24
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f023 0301 	bic.w	r3, r3, #1
 800a042:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a050:	f3ef 8305 	mrs	r3, IPSR
 800a054:	60bb      	str	r3, [r7, #8]
  return(result);
 800a056:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d003      	beq.n	800a064 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a05c:	f06f 0305 	mvn.w	r3, #5
 800a060:	617b      	str	r3, [r7, #20]
 800a062:	e02c      	b.n	800a0be <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d103      	bne.n	800a072 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a06a:	f06f 0303 	mvn.w	r3, #3
 800a06e:	617b      	str	r3, [r7, #20]
 800a070:	e025      	b.n	800a0be <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d011      	beq.n	800a09c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	6938      	ldr	r0, [r7, #16]
 800a07c:	f000 fc04 	bl	800a888 <xQueueTakeMutexRecursive>
 800a080:	4603      	mov	r3, r0
 800a082:	2b01      	cmp	r3, #1
 800a084:	d01b      	beq.n	800a0be <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d003      	beq.n	800a094 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800a08c:	f06f 0301 	mvn.w	r3, #1
 800a090:	617b      	str	r3, [r7, #20]
 800a092:	e014      	b.n	800a0be <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a094:	f06f 0302 	mvn.w	r3, #2
 800a098:	617b      	str	r3, [r7, #20]
 800a09a:	e010      	b.n	800a0be <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	6938      	ldr	r0, [r7, #16]
 800a0a0:	f000 ff0c 	bl	800aebc <xQueueSemaphoreTake>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d009      	beq.n	800a0be <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d003      	beq.n	800a0b8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800a0b0:	f06f 0301 	mvn.w	r3, #1
 800a0b4:	617b      	str	r3, [r7, #20]
 800a0b6:	e002      	b.n	800a0be <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a0b8:	f06f 0302 	mvn.w	r3, #2
 800a0bc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800a0be:	697b      	ldr	r3, [r7, #20]
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3718      	adds	r7, #24
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b086      	sub	sp, #24
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f023 0301 	bic.w	r3, r3, #1
 800a0d6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0e4:	f3ef 8305 	mrs	r3, IPSR
 800a0e8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0ea:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d003      	beq.n	800a0f8 <osMutexRelease+0x30>
    stat = osErrorISR;
 800a0f0:	f06f 0305 	mvn.w	r3, #5
 800a0f4:	617b      	str	r3, [r7, #20]
 800a0f6:	e01f      	b.n	800a138 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d103      	bne.n	800a106 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800a0fe:	f06f 0303 	mvn.w	r3, #3
 800a102:	617b      	str	r3, [r7, #20]
 800a104:	e018      	b.n	800a138 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d009      	beq.n	800a120 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a10c:	6938      	ldr	r0, [r7, #16]
 800a10e:	f000 fb87 	bl	800a820 <xQueueGiveMutexRecursive>
 800a112:	4603      	mov	r3, r0
 800a114:	2b01      	cmp	r3, #1
 800a116:	d00f      	beq.n	800a138 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a118:	f06f 0302 	mvn.w	r3, #2
 800a11c:	617b      	str	r3, [r7, #20]
 800a11e:	e00b      	b.n	800a138 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a120:	2300      	movs	r3, #0
 800a122:	2200      	movs	r2, #0
 800a124:	2100      	movs	r1, #0
 800a126:	6938      	ldr	r0, [r7, #16]
 800a128:	f000 fc4e 	bl	800a9c8 <xQueueGenericSend>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d002      	beq.n	800a138 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a132:	f06f 0302 	mvn.w	r3, #2
 800a136:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a138:	697b      	ldr	r3, [r7, #20]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a142:	b580      	push	{r7, lr}
 800a144:	b08a      	sub	sp, #40	; 0x28
 800a146:	af02      	add	r7, sp, #8
 800a148:	60f8      	str	r0, [r7, #12]
 800a14a:	60b9      	str	r1, [r7, #8]
 800a14c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a14e:	2300      	movs	r3, #0
 800a150:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a152:	f3ef 8305 	mrs	r3, IPSR
 800a156:	613b      	str	r3, [r7, #16]
  return(result);
 800a158:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d175      	bne.n	800a24a <osSemaphoreNew+0x108>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d072      	beq.n	800a24a <osSemaphoreNew+0x108>
 800a164:	68ba      	ldr	r2, [r7, #8]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d86e      	bhi.n	800a24a <osSemaphoreNew+0x108>
    mem = -1;
 800a16c:	f04f 33ff 	mov.w	r3, #4294967295
 800a170:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d015      	beq.n	800a1a4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d006      	beq.n	800a18e <osSemaphoreNew+0x4c>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	2b4f      	cmp	r3, #79	; 0x4f
 800a186:	d902      	bls.n	800a18e <osSemaphoreNew+0x4c>
        mem = 1;
 800a188:	2301      	movs	r3, #1
 800a18a:	61bb      	str	r3, [r7, #24]
 800a18c:	e00c      	b.n	800a1a8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d108      	bne.n	800a1a8 <osSemaphoreNew+0x66>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d104      	bne.n	800a1a8 <osSemaphoreNew+0x66>
          mem = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	61bb      	str	r3, [r7, #24]
 800a1a2:	e001      	b.n	800a1a8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ae:	d04c      	beq.n	800a24a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d128      	bne.n	800a208 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d10a      	bne.n	800a1d2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	2203      	movs	r2, #3
 800a1c2:	9200      	str	r2, [sp, #0]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	2001      	movs	r0, #1
 800a1ca:	f000 fa07 	bl	800a5dc <xQueueGenericCreateStatic>
 800a1ce:	61f8      	str	r0, [r7, #28]
 800a1d0:	e005      	b.n	800a1de <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a1d2:	2203      	movs	r2, #3
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	2001      	movs	r0, #1
 800a1d8:	f000 fa78 	bl	800a6cc <xQueueGenericCreate>
 800a1dc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d022      	beq.n	800a22a <osSemaphoreNew+0xe8>
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d01f      	beq.n	800a22a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	69f8      	ldr	r0, [r7, #28]
 800a1f2:	f000 fbe9 	bl	800a9c8 <xQueueGenericSend>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d016      	beq.n	800a22a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a1fc:	69f8      	ldr	r0, [r7, #28]
 800a1fe:	f000 ff69 	bl	800b0d4 <vQueueDelete>
            hSemaphore = NULL;
 800a202:	2300      	movs	r3, #0
 800a204:	61fb      	str	r3, [r7, #28]
 800a206:	e010      	b.n	800a22a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d108      	bne.n	800a220 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	461a      	mov	r2, r3
 800a214:	68b9      	ldr	r1, [r7, #8]
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f000 fb6c 	bl	800a8f4 <xQueueCreateCountingSemaphoreStatic>
 800a21c:	61f8      	str	r0, [r7, #28]
 800a21e:	e004      	b.n	800a22a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a220:	68b9      	ldr	r1, [r7, #8]
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f000 fb9d 	bl	800a962 <xQueueCreateCountingSemaphore>
 800a228:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00c      	beq.n	800a24a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d003      	beq.n	800a23e <osSemaphoreNew+0xfc>
          name = attr->name;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	617b      	str	r3, [r7, #20]
 800a23c:	e001      	b.n	800a242 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a23e:	2300      	movs	r3, #0
 800a240:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a242:	6979      	ldr	r1, [r7, #20]
 800a244:	69f8      	ldr	r0, [r7, #28]
 800a246:	f001 f891 	bl	800b36c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a24a:	69fb      	ldr	r3, [r7, #28]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3720      	adds	r7, #32
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a254:	b580      	push	{r7, lr}
 800a256:	b08a      	sub	sp, #40	; 0x28
 800a258:	af02      	add	r7, sp, #8
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a260:	2300      	movs	r3, #0
 800a262:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a264:	f3ef 8305 	mrs	r3, IPSR
 800a268:	613b      	str	r3, [r7, #16]
  return(result);
 800a26a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d15f      	bne.n	800a330 <osMessageQueueNew+0xdc>
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d05c      	beq.n	800a330 <osMessageQueueNew+0xdc>
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d059      	beq.n	800a330 <osMessageQueueNew+0xdc>
    mem = -1;
 800a27c:	f04f 33ff 	mov.w	r3, #4294967295
 800a280:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d029      	beq.n	800a2dc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d012      	beq.n	800a2b6 <osMessageQueueNew+0x62>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	2b4f      	cmp	r3, #79	; 0x4f
 800a296:	d90e      	bls.n	800a2b6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00a      	beq.n	800a2b6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	695a      	ldr	r2, [r3, #20]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	68b9      	ldr	r1, [r7, #8]
 800a2a8:	fb01 f303 	mul.w	r3, r1, r3
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d302      	bcc.n	800a2b6 <osMessageQueueNew+0x62>
        mem = 1;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	61bb      	str	r3, [r7, #24]
 800a2b4:	e014      	b.n	800a2e0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d110      	bne.n	800a2e0 <osMessageQueueNew+0x8c>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10c      	bne.n	800a2e0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d108      	bne.n	800a2e0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d104      	bne.n	800a2e0 <osMessageQueueNew+0x8c>
          mem = 0;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	61bb      	str	r3, [r7, #24]
 800a2da:	e001      	b.n	800a2e0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d10b      	bne.n	800a2fe <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	691a      	ldr	r2, [r3, #16]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	9100      	str	r1, [sp, #0]
 800a2f2:	68b9      	ldr	r1, [r7, #8]
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 f971 	bl	800a5dc <xQueueGenericCreateStatic>
 800a2fa:	61f8      	str	r0, [r7, #28]
 800a2fc:	e008      	b.n	800a310 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d105      	bne.n	800a310 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a304:	2200      	movs	r2, #0
 800a306:	68b9      	ldr	r1, [r7, #8]
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 f9df 	bl	800a6cc <xQueueGenericCreate>
 800a30e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00c      	beq.n	800a330 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d003      	beq.n	800a324 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	617b      	str	r3, [r7, #20]
 800a322:	e001      	b.n	800a328 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a324:	2300      	movs	r3, #0
 800a326:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a328:	6979      	ldr	r1, [r7, #20]
 800a32a:	69f8      	ldr	r0, [r7, #28]
 800a32c:	f001 f81e 	bl	800b36c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a330:	69fb      	ldr	r3, [r7, #28]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3720      	adds	r7, #32
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
	...

0800a33c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	4a07      	ldr	r2, [pc, #28]	; (800a368 <vApplicationGetIdleTaskMemory+0x2c>)
 800a34c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	4a06      	ldr	r2, [pc, #24]	; (800a36c <vApplicationGetIdleTaskMemory+0x30>)
 800a352:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2280      	movs	r2, #128	; 0x80
 800a358:	601a      	str	r2, [r3, #0]
}
 800a35a:	bf00      	nop
 800a35c:	3714      	adds	r7, #20
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	20001690 	.word	0x20001690
 800a36c:	200016f4 	.word	0x200016f4

0800a370 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	4a07      	ldr	r2, [pc, #28]	; (800a39c <vApplicationGetTimerTaskMemory+0x2c>)
 800a380:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	4a06      	ldr	r2, [pc, #24]	; (800a3a0 <vApplicationGetTimerTaskMemory+0x30>)
 800a386:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a38e:	601a      	str	r2, [r3, #0]
}
 800a390:	bf00      	nop
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr
 800a39c:	200018f4 	.word	0x200018f4
 800a3a0:	20001958 	.word	0x20001958

0800a3a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f103 0208 	add.w	r2, r3, #8
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f103 0208 	add.w	r2, r3, #8
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f103 0208 	add.w	r2, r3, #8
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a3f2:	bf00      	nop
 800a3f4:	370c      	adds	r7, #12
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr

0800a3fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3fe:	b480      	push	{r7}
 800a400:	b085      	sub	sp, #20
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	689a      	ldr	r2, [r3, #8]
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	683a      	ldr	r2, [r7, #0]
 800a422:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	1c5a      	adds	r2, r3, #1
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	601a      	str	r2, [r3, #0]
}
 800a43a:	bf00      	nop
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr

0800a446 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a446:	b480      	push	{r7}
 800a448:	b085      	sub	sp, #20
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
 800a44e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a45c:	d103      	bne.n	800a466 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	60fb      	str	r3, [r7, #12]
 800a464:	e00c      	b.n	800a480 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	3308      	adds	r3, #8
 800a46a:	60fb      	str	r3, [r7, #12]
 800a46c:	e002      	b.n	800a474 <vListInsert+0x2e>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	60fb      	str	r3, [r7, #12]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d2f6      	bcs.n	800a46e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	685a      	ldr	r2, [r3, #4]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	1c5a      	adds	r2, r3, #1
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	601a      	str	r2, [r3, #0]
}
 800a4ac:	bf00      	nop
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	6892      	ldr	r2, [r2, #8]
 800a4ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	6852      	ldr	r2, [r2, #4]
 800a4d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d103      	bne.n	800a4ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	689a      	ldr	r2, [r3, #8]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	1e5a      	subs	r2, r3, #1
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10a      	bne.n	800a536 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a532:	bf00      	nop
 800a534:	e7fe      	b.n	800a534 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a536:	f002 fc4d 	bl	800cdd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a542:	68f9      	ldr	r1, [r7, #12]
 800a544:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a546:	fb01 f303 	mul.w	r3, r1, r3
 800a54a:	441a      	add	r2, r3
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2200      	movs	r2, #0
 800a554:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a566:	3b01      	subs	r3, #1
 800a568:	68f9      	ldr	r1, [r7, #12]
 800a56a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a56c:	fb01 f303 	mul.w	r3, r1, r3
 800a570:	441a      	add	r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	22ff      	movs	r2, #255	; 0xff
 800a57a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	22ff      	movs	r2, #255	; 0xff
 800a582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d114      	bne.n	800a5b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d01a      	beq.n	800a5ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	3310      	adds	r3, #16
 800a598:	4618      	mov	r0, r3
 800a59a:	f001 fbf1 	bl	800bd80 <xTaskRemoveFromEventList>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d012      	beq.n	800a5ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a5a4:	4b0c      	ldr	r3, [pc, #48]	; (800a5d8 <xQueueGenericReset+0xcc>)
 800a5a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5aa:	601a      	str	r2, [r3, #0]
 800a5ac:	f3bf 8f4f 	dsb	sy
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	e009      	b.n	800a5ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	3310      	adds	r3, #16
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7ff fef2 	bl	800a3a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	3324      	adds	r3, #36	; 0x24
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7ff feed 	bl	800a3a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a5ca:	f002 fc33 	bl	800ce34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a5ce:	2301      	movs	r3, #1
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	e000ed04 	.word	0xe000ed04

0800a5dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b08e      	sub	sp, #56	; 0x38
 800a5e0:	af02      	add	r7, sp, #8
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
 800a5e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10a      	bne.n	800a606 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f4:	f383 8811 	msr	BASEPRI, r3
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a602:	bf00      	nop
 800a604:	e7fe      	b.n	800a604 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10a      	bne.n	800a622 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a61e:	bf00      	nop
 800a620:	e7fe      	b.n	800a620 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d002      	beq.n	800a62e <xQueueGenericCreateStatic+0x52>
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <xQueueGenericCreateStatic+0x56>
 800a62e:	2301      	movs	r3, #1
 800a630:	e000      	b.n	800a634 <xQueueGenericCreateStatic+0x58>
 800a632:	2300      	movs	r3, #0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d10a      	bne.n	800a64e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63c:	f383 8811 	msr	BASEPRI, r3
 800a640:	f3bf 8f6f 	isb	sy
 800a644:	f3bf 8f4f 	dsb	sy
 800a648:	623b      	str	r3, [r7, #32]
}
 800a64a:	bf00      	nop
 800a64c:	e7fe      	b.n	800a64c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d102      	bne.n	800a65a <xQueueGenericCreateStatic+0x7e>
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d101      	bne.n	800a65e <xQueueGenericCreateStatic+0x82>
 800a65a:	2301      	movs	r3, #1
 800a65c:	e000      	b.n	800a660 <xQueueGenericCreateStatic+0x84>
 800a65e:	2300      	movs	r3, #0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10a      	bne.n	800a67a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a668:	f383 8811 	msr	BASEPRI, r3
 800a66c:	f3bf 8f6f 	isb	sy
 800a670:	f3bf 8f4f 	dsb	sy
 800a674:	61fb      	str	r3, [r7, #28]
}
 800a676:	bf00      	nop
 800a678:	e7fe      	b.n	800a678 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a67a:	2350      	movs	r3, #80	; 0x50
 800a67c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	2b50      	cmp	r3, #80	; 0x50
 800a682:	d00a      	beq.n	800a69a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	61bb      	str	r3, [r7, #24]
}
 800a696:	bf00      	nop
 800a698:	e7fe      	b.n	800a698 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a69a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00d      	beq.n	800a6c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	4613      	mov	r3, r2
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	68b9      	ldr	r1, [r7, #8]
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f000 f83f 	bl	800a740 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3730      	adds	r7, #48	; 0x30
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08a      	sub	sp, #40	; 0x28
 800a6d0:	af02      	add	r7, sp, #8
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10a      	bne.n	800a6f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	613b      	str	r3, [r7, #16]
}
 800a6f2:	bf00      	nop
 800a6f4:	e7fe      	b.n	800a6f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	fb02 f303 	mul.w	r3, r2, r3
 800a6fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	3350      	adds	r3, #80	; 0x50
 800a704:	4618      	mov	r0, r3
 800a706:	f002 fc87 	bl	800d018 <pvPortMalloc>
 800a70a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d011      	beq.n	800a736 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	3350      	adds	r3, #80	; 0x50
 800a71a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	2200      	movs	r2, #0
 800a720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a724:	79fa      	ldrb	r2, [r7, #7]
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	4613      	mov	r3, r2
 800a72c:	697a      	ldr	r2, [r7, #20]
 800a72e:	68b9      	ldr	r1, [r7, #8]
 800a730:	68f8      	ldr	r0, [r7, #12]
 800a732:	f000 f805 	bl	800a740 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a736:	69bb      	ldr	r3, [r7, #24]
	}
 800a738:	4618      	mov	r0, r3
 800a73a:	3720      	adds	r7, #32
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
 800a74c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d103      	bne.n	800a75c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	69ba      	ldr	r2, [r7, #24]
 800a758:	601a      	str	r2, [r3, #0]
 800a75a:	e002      	b.n	800a762 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a76e:	2101      	movs	r1, #1
 800a770:	69b8      	ldr	r0, [r7, #24]
 800a772:	f7ff fecb 	bl	800a50c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	78fa      	ldrb	r2, [r7, #3]
 800a77a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a77e:	bf00      	nop
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a786:	b580      	push	{r7, lr}
 800a788:	b082      	sub	sp, #8
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00e      	beq.n	800a7b2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f90b 	bl	800a9c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a7b2:	bf00      	nop
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b086      	sub	sp, #24
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	617b      	str	r3, [r7, #20]
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a7cc:	79fb      	ldrb	r3, [r7, #7]
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	6939      	ldr	r1, [r7, #16]
 800a7d2:	6978      	ldr	r0, [r7, #20]
 800a7d4:	f7ff ff7a 	bl	800a6cc <xQueueGenericCreate>
 800a7d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f7ff ffd3 	bl	800a786 <prvInitialiseMutex>

		return xNewQueue;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
	}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3718      	adds	r7, #24
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b088      	sub	sp, #32
 800a7ee:	af02      	add	r7, sp, #8
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	6039      	str	r1, [r7, #0]
 800a7f4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	617b      	str	r3, [r7, #20]
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a7fe:	79fb      	ldrb	r3, [r7, #7]
 800a800:	9300      	str	r3, [sp, #0]
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	2200      	movs	r2, #0
 800a806:	6939      	ldr	r1, [r7, #16]
 800a808:	6978      	ldr	r0, [r7, #20]
 800a80a:	f7ff fee7 	bl	800a5dc <xQueueGenericCreateStatic>
 800a80e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f7ff ffb8 	bl	800a786 <prvInitialiseMutex>

		return xNewQueue;
 800a816:	68fb      	ldr	r3, [r7, #12]
	}
 800a818:	4618      	mov	r0, r3
 800a81a:	3718      	adds	r7, #24
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a820:	b590      	push	{r4, r7, lr}
 800a822:	b087      	sub	sp, #28
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10a      	bne.n	800a848 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800a832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a836:	f383 8811 	msr	BASEPRI, r3
 800a83a:	f3bf 8f6f 	isb	sy
 800a83e:	f3bf 8f4f 	dsb	sy
 800a842:	60fb      	str	r3, [r7, #12]
}
 800a844:	bf00      	nop
 800a846:	e7fe      	b.n	800a846 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	689c      	ldr	r4, [r3, #8]
 800a84c:	f001 fc56 	bl	800c0fc <xTaskGetCurrentTaskHandle>
 800a850:	4603      	mov	r3, r0
 800a852:	429c      	cmp	r4, r3
 800a854:	d111      	bne.n	800a87a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	1e5a      	subs	r2, r3, #1
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d105      	bne.n	800a874 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a868:	2300      	movs	r3, #0
 800a86a:	2200      	movs	r2, #0
 800a86c:	2100      	movs	r1, #0
 800a86e:	6938      	ldr	r0, [r7, #16]
 800a870:	f000 f8aa 	bl	800a9c8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a874:	2301      	movs	r3, #1
 800a876:	617b      	str	r3, [r7, #20]
 800a878:	e001      	b.n	800a87e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a87a:	2300      	movs	r3, #0
 800a87c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a87e:	697b      	ldr	r3, [r7, #20]
	}
 800a880:	4618      	mov	r0, r3
 800a882:	371c      	adds	r7, #28
 800a884:	46bd      	mov	sp, r7
 800a886:	bd90      	pop	{r4, r7, pc}

0800a888 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a888:	b590      	push	{r4, r7, lr}
 800a88a:	b087      	sub	sp, #28
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d10a      	bne.n	800a8b2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800a89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a0:	f383 8811 	msr	BASEPRI, r3
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	60fb      	str	r3, [r7, #12]
}
 800a8ae:	bf00      	nop
 800a8b0:	e7fe      	b.n	800a8b0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	689c      	ldr	r4, [r3, #8]
 800a8b6:	f001 fc21 	bl	800c0fc <xTaskGetCurrentTaskHandle>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	429c      	cmp	r4, r3
 800a8be:	d107      	bne.n	800a8d0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	1c5a      	adds	r2, r3, #1
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	617b      	str	r3, [r7, #20]
 800a8ce:	e00c      	b.n	800a8ea <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	6938      	ldr	r0, [r7, #16]
 800a8d4:	f000 faf2 	bl	800aebc <xQueueSemaphoreTake>
 800a8d8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d004      	beq.n	800a8ea <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	1c5a      	adds	r2, r3, #1
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a8ea:	697b      	ldr	r3, [r7, #20]
	}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	371c      	adds	r7, #28
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd90      	pop	{r4, r7, pc}

0800a8f4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b08a      	sub	sp, #40	; 0x28
 800a8f8:	af02      	add	r7, sp, #8
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10a      	bne.n	800a91c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	61bb      	str	r3, [r7, #24]
}
 800a918:	bf00      	nop
 800a91a:	e7fe      	b.n	800a91a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	429a      	cmp	r2, r3
 800a922:	d90a      	bls.n	800a93a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a928:	f383 8811 	msr	BASEPRI, r3
 800a92c:	f3bf 8f6f 	isb	sy
 800a930:	f3bf 8f4f 	dsb	sy
 800a934:	617b      	str	r3, [r7, #20]
}
 800a936:	bf00      	nop
 800a938:	e7fe      	b.n	800a938 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a93a:	2302      	movs	r3, #2
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	2100      	movs	r1, #0
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f7ff fe49 	bl	800a5dc <xQueueGenericCreateStatic>
 800a94a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d002      	beq.n	800a958 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a958:	69fb      	ldr	r3, [r7, #28]
	}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3720      	adds	r7, #32
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a962:	b580      	push	{r7, lr}
 800a964:	b086      	sub	sp, #24
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10a      	bne.n	800a988 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	613b      	str	r3, [r7, #16]
}
 800a984:	bf00      	nop
 800a986:	e7fe      	b.n	800a986 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a988:	683a      	ldr	r2, [r7, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d90a      	bls.n	800a9a6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a994:	f383 8811 	msr	BASEPRI, r3
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	60fb      	str	r3, [r7, #12]
}
 800a9a2:	bf00      	nop
 800a9a4:	e7fe      	b.n	800a9a4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a9a6:	2202      	movs	r2, #2
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f7ff fe8e 	bl	800a6cc <xQueueGenericCreate>
 800a9b0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d002      	beq.n	800a9be <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a9be:	697b      	ldr	r3, [r7, #20]
	}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3718      	adds	r7, #24
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b08e      	sub	sp, #56	; 0x38
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d10a      	bne.n	800a9fa <xQueueGenericSend+0x32>
	__asm volatile
 800a9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e8:	f383 8811 	msr	BASEPRI, r3
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a9f6:	bf00      	nop
 800a9f8:	e7fe      	b.n	800a9f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d103      	bne.n	800aa08 <xQueueGenericSend+0x40>
 800aa00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d101      	bne.n	800aa0c <xQueueGenericSend+0x44>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e000      	b.n	800aa0e <xQueueGenericSend+0x46>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d10a      	bne.n	800aa28 <xQueueGenericSend+0x60>
	__asm volatile
 800aa12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa16:	f383 8811 	msr	BASEPRI, r3
 800aa1a:	f3bf 8f6f 	isb	sy
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa24:	bf00      	nop
 800aa26:	e7fe      	b.n	800aa26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d103      	bne.n	800aa36 <xQueueGenericSend+0x6e>
 800aa2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d101      	bne.n	800aa3a <xQueueGenericSend+0x72>
 800aa36:	2301      	movs	r3, #1
 800aa38:	e000      	b.n	800aa3c <xQueueGenericSend+0x74>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10a      	bne.n	800aa56 <xQueueGenericSend+0x8e>
	__asm volatile
 800aa40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa44:	f383 8811 	msr	BASEPRI, r3
 800aa48:	f3bf 8f6f 	isb	sy
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	623b      	str	r3, [r7, #32]
}
 800aa52:	bf00      	nop
 800aa54:	e7fe      	b.n	800aa54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa56:	f001 fb61 	bl	800c11c <xTaskGetSchedulerState>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d102      	bne.n	800aa66 <xQueueGenericSend+0x9e>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d101      	bne.n	800aa6a <xQueueGenericSend+0xa2>
 800aa66:	2301      	movs	r3, #1
 800aa68:	e000      	b.n	800aa6c <xQueueGenericSend+0xa4>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d10a      	bne.n	800aa86 <xQueueGenericSend+0xbe>
	__asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	61fb      	str	r3, [r7, #28]
}
 800aa82:	bf00      	nop
 800aa84:	e7fe      	b.n	800aa84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa86:	f002 f9a5 	bl	800cdd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d302      	bcc.n	800aa9c <xQueueGenericSend+0xd4>
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d129      	bne.n	800aaf0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	68b9      	ldr	r1, [r7, #8]
 800aaa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaa2:	f000 fb52 	bl	800b14a <prvCopyDataToQueue>
 800aaa6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d010      	beq.n	800aad2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab2:	3324      	adds	r3, #36	; 0x24
 800aab4:	4618      	mov	r0, r3
 800aab6:	f001 f963 	bl	800bd80 <xTaskRemoveFromEventList>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d013      	beq.n	800aae8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aac0:	4b3f      	ldr	r3, [pc, #252]	; (800abc0 <xQueueGenericSend+0x1f8>)
 800aac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aac6:	601a      	str	r2, [r3, #0]
 800aac8:	f3bf 8f4f 	dsb	sy
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	e00a      	b.n	800aae8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d007      	beq.n	800aae8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aad8:	4b39      	ldr	r3, [pc, #228]	; (800abc0 <xQueueGenericSend+0x1f8>)
 800aada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aade:	601a      	str	r2, [r3, #0]
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aae8:	f002 f9a4 	bl	800ce34 <vPortExitCritical>
				return pdPASS;
 800aaec:	2301      	movs	r3, #1
 800aaee:	e063      	b.n	800abb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d103      	bne.n	800aafe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aaf6:	f002 f99d 	bl	800ce34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aafa:	2300      	movs	r3, #0
 800aafc:	e05c      	b.n	800abb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d106      	bne.n	800ab12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab04:	f107 0314 	add.w	r3, r7, #20
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f001 f99d 	bl	800be48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab12:	f002 f98f 	bl	800ce34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab16:	f000 fef5 	bl	800b904 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab1a:	f002 f95b 	bl	800cdd4 <vPortEnterCritical>
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab24:	b25b      	sxtb	r3, r3
 800ab26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab2a:	d103      	bne.n	800ab34 <xQueueGenericSend+0x16c>
 800ab2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab3a:	b25b      	sxtb	r3, r3
 800ab3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab40:	d103      	bne.n	800ab4a <xQueueGenericSend+0x182>
 800ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab4a:	f002 f973 	bl	800ce34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab4e:	1d3a      	adds	r2, r7, #4
 800ab50:	f107 0314 	add.w	r3, r7, #20
 800ab54:	4611      	mov	r1, r2
 800ab56:	4618      	mov	r0, r3
 800ab58:	f001 f98c 	bl	800be74 <xTaskCheckForTimeOut>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d124      	bne.n	800abac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ab62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab64:	f000 fbe9 	bl	800b33a <prvIsQueueFull>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d018      	beq.n	800aba0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	3310      	adds	r3, #16
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	4611      	mov	r1, r2
 800ab76:	4618      	mov	r0, r3
 800ab78:	f001 f8b2 	bl	800bce0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ab7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab7e:	f000 fb74 	bl	800b26a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ab82:	f000 fecd 	bl	800b920 <xTaskResumeAll>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f47f af7c 	bne.w	800aa86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ab8e:	4b0c      	ldr	r3, [pc, #48]	; (800abc0 <xQueueGenericSend+0x1f8>)
 800ab90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab94:	601a      	str	r2, [r3, #0]
 800ab96:	f3bf 8f4f 	dsb	sy
 800ab9a:	f3bf 8f6f 	isb	sy
 800ab9e:	e772      	b.n	800aa86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aba2:	f000 fb62 	bl	800b26a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aba6:	f000 febb 	bl	800b920 <xTaskResumeAll>
 800abaa:	e76c      	b.n	800aa86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800abac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abae:	f000 fb5c 	bl	800b26a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abb2:	f000 feb5 	bl	800b920 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800abb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3738      	adds	r7, #56	; 0x38
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}
 800abc0:	e000ed04 	.word	0xe000ed04

0800abc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b090      	sub	sp, #64	; 0x40
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
 800abd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800abd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10a      	bne.n	800abf2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800abee:	bf00      	nop
 800abf0:	e7fe      	b.n	800abf0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d103      	bne.n	800ac00 <xQueueGenericSendFromISR+0x3c>
 800abf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d101      	bne.n	800ac04 <xQueueGenericSendFromISR+0x40>
 800ac00:	2301      	movs	r3, #1
 800ac02:	e000      	b.n	800ac06 <xQueueGenericSendFromISR+0x42>
 800ac04:	2300      	movs	r3, #0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d10a      	bne.n	800ac20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ac0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0e:	f383 8811 	msr	BASEPRI, r3
 800ac12:	f3bf 8f6f 	isb	sy
 800ac16:	f3bf 8f4f 	dsb	sy
 800ac1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac1c:	bf00      	nop
 800ac1e:	e7fe      	b.n	800ac1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d103      	bne.n	800ac2e <xQueueGenericSendFromISR+0x6a>
 800ac26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d101      	bne.n	800ac32 <xQueueGenericSendFromISR+0x6e>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e000      	b.n	800ac34 <xQueueGenericSendFromISR+0x70>
 800ac32:	2300      	movs	r3, #0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d10a      	bne.n	800ac4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ac38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3c:	f383 8811 	msr	BASEPRI, r3
 800ac40:	f3bf 8f6f 	isb	sy
 800ac44:	f3bf 8f4f 	dsb	sy
 800ac48:	623b      	str	r3, [r7, #32]
}
 800ac4a:	bf00      	nop
 800ac4c:	e7fe      	b.n	800ac4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac4e:	f002 f9a3 	bl	800cf98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ac52:	f3ef 8211 	mrs	r2, BASEPRI
 800ac56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5a:	f383 8811 	msr	BASEPRI, r3
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	61fa      	str	r2, [r7, #28]
 800ac68:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ac6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d302      	bcc.n	800ac80 <xQueueGenericSendFromISR+0xbc>
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d12f      	bne.n	800ace0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ac80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac90:	683a      	ldr	r2, [r7, #0]
 800ac92:	68b9      	ldr	r1, [r7, #8]
 800ac94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ac96:	f000 fa58 	bl	800b14a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ac9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca2:	d112      	bne.n	800acca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d016      	beq.n	800acda <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acae:	3324      	adds	r3, #36	; 0x24
 800acb0:	4618      	mov	r0, r3
 800acb2:	f001 f865 	bl	800bd80 <xTaskRemoveFromEventList>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d00e      	beq.n	800acda <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d00b      	beq.n	800acda <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2201      	movs	r2, #1
 800acc6:	601a      	str	r2, [r3, #0]
 800acc8:	e007      	b.n	800acda <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800acca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800acce:	3301      	adds	r3, #1
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	b25a      	sxtb	r2, r3
 800acd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800acda:	2301      	movs	r3, #1
 800acdc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800acde:	e001      	b.n	800ace4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ace0:	2300      	movs	r3, #0
 800ace2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ace4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800acee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800acf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3740      	adds	r7, #64	; 0x40
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
	...

0800acfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b08c      	sub	sp, #48	; 0x30
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10a      	bne.n	800ad2c <xQueueReceive+0x30>
	__asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	623b      	str	r3, [r7, #32]
}
 800ad28:	bf00      	nop
 800ad2a:	e7fe      	b.n	800ad2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d103      	bne.n	800ad3a <xQueueReceive+0x3e>
 800ad32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d101      	bne.n	800ad3e <xQueueReceive+0x42>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e000      	b.n	800ad40 <xQueueReceive+0x44>
 800ad3e:	2300      	movs	r3, #0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10a      	bne.n	800ad5a <xQueueReceive+0x5e>
	__asm volatile
 800ad44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad48:	f383 8811 	msr	BASEPRI, r3
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	61fb      	str	r3, [r7, #28]
}
 800ad56:	bf00      	nop
 800ad58:	e7fe      	b.n	800ad58 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad5a:	f001 f9df 	bl	800c11c <xTaskGetSchedulerState>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d102      	bne.n	800ad6a <xQueueReceive+0x6e>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <xQueueReceive+0x72>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e000      	b.n	800ad70 <xQueueReceive+0x74>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10a      	bne.n	800ad8a <xQueueReceive+0x8e>
	__asm volatile
 800ad74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	61bb      	str	r3, [r7, #24]
}
 800ad86:	bf00      	nop
 800ad88:	e7fe      	b.n	800ad88 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad8a:	f002 f823 	bl	800cdd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d01f      	beq.n	800adda <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad9a:	68b9      	ldr	r1, [r7, #8]
 800ad9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad9e:	f000 fa3e 	bl	800b21e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ada2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada4:	1e5a      	subs	r2, r3, #1
 800ada6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00f      	beq.n	800add2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb4:	3310      	adds	r3, #16
 800adb6:	4618      	mov	r0, r3
 800adb8:	f000 ffe2 	bl	800bd80 <xTaskRemoveFromEventList>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d007      	beq.n	800add2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800adc2:	4b3d      	ldr	r3, [pc, #244]	; (800aeb8 <xQueueReceive+0x1bc>)
 800adc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adc8:	601a      	str	r2, [r3, #0]
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800add2:	f002 f82f 	bl	800ce34 <vPortExitCritical>
				return pdPASS;
 800add6:	2301      	movs	r3, #1
 800add8:	e069      	b.n	800aeae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d103      	bne.n	800ade8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ade0:	f002 f828 	bl	800ce34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ade4:	2300      	movs	r3, #0
 800ade6:	e062      	b.n	800aeae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ade8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adea:	2b00      	cmp	r3, #0
 800adec:	d106      	bne.n	800adfc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800adee:	f107 0310 	add.w	r3, r7, #16
 800adf2:	4618      	mov	r0, r3
 800adf4:	f001 f828 	bl	800be48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800adf8:	2301      	movs	r3, #1
 800adfa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800adfc:	f002 f81a 	bl	800ce34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae00:	f000 fd80 	bl	800b904 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae04:	f001 ffe6 	bl	800cdd4 <vPortEnterCritical>
 800ae08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae0e:	b25b      	sxtb	r3, r3
 800ae10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae14:	d103      	bne.n	800ae1e <xQueueReceive+0x122>
 800ae16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae24:	b25b      	sxtb	r3, r3
 800ae26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae2a:	d103      	bne.n	800ae34 <xQueueReceive+0x138>
 800ae2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae34:	f001 fffe 	bl	800ce34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae38:	1d3a      	adds	r2, r7, #4
 800ae3a:	f107 0310 	add.w	r3, r7, #16
 800ae3e:	4611      	mov	r1, r2
 800ae40:	4618      	mov	r0, r3
 800ae42:	f001 f817 	bl	800be74 <xTaskCheckForTimeOut>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d123      	bne.n	800ae94 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae4e:	f000 fa5e 	bl	800b30e <prvIsQueueEmpty>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d017      	beq.n	800ae88 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5a:	3324      	adds	r3, #36	; 0x24
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	4611      	mov	r1, r2
 800ae60:	4618      	mov	r0, r3
 800ae62:	f000 ff3d 	bl	800bce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae68:	f000 f9ff 	bl	800b26a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae6c:	f000 fd58 	bl	800b920 <xTaskResumeAll>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d189      	bne.n	800ad8a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ae76:	4b10      	ldr	r3, [pc, #64]	; (800aeb8 <xQueueReceive+0x1bc>)
 800ae78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae7c:	601a      	str	r2, [r3, #0]
 800ae7e:	f3bf 8f4f 	dsb	sy
 800ae82:	f3bf 8f6f 	isb	sy
 800ae86:	e780      	b.n	800ad8a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae8a:	f000 f9ee 	bl	800b26a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae8e:	f000 fd47 	bl	800b920 <xTaskResumeAll>
 800ae92:	e77a      	b.n	800ad8a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae96:	f000 f9e8 	bl	800b26a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae9a:	f000 fd41 	bl	800b920 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aea0:	f000 fa35 	bl	800b30e <prvIsQueueEmpty>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f43f af6f 	beq.w	800ad8a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aeac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3730      	adds	r7, #48	; 0x30
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	e000ed04 	.word	0xe000ed04

0800aebc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b08e      	sub	sp, #56	; 0x38
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aec6:	2300      	movs	r3, #0
 800aec8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aece:	2300      	movs	r3, #0
 800aed0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10a      	bne.n	800aeee <xQueueSemaphoreTake+0x32>
	__asm volatile
 800aed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aedc:	f383 8811 	msr	BASEPRI, r3
 800aee0:	f3bf 8f6f 	isb	sy
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	623b      	str	r3, [r7, #32]
}
 800aeea:	bf00      	nop
 800aeec:	e7fe      	b.n	800aeec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aeee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00a      	beq.n	800af0c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800aef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefa:	f383 8811 	msr	BASEPRI, r3
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	f3bf 8f4f 	dsb	sy
 800af06:	61fb      	str	r3, [r7, #28]
}
 800af08:	bf00      	nop
 800af0a:	e7fe      	b.n	800af0a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af0c:	f001 f906 	bl	800c11c <xTaskGetSchedulerState>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d102      	bne.n	800af1c <xQueueSemaphoreTake+0x60>
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d101      	bne.n	800af20 <xQueueSemaphoreTake+0x64>
 800af1c:	2301      	movs	r3, #1
 800af1e:	e000      	b.n	800af22 <xQueueSemaphoreTake+0x66>
 800af20:	2300      	movs	r3, #0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d10a      	bne.n	800af3c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800af26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2a:	f383 8811 	msr	BASEPRI, r3
 800af2e:	f3bf 8f6f 	isb	sy
 800af32:	f3bf 8f4f 	dsb	sy
 800af36:	61bb      	str	r3, [r7, #24]
}
 800af38:	bf00      	nop
 800af3a:	e7fe      	b.n	800af3a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af3c:	f001 ff4a 	bl	800cdd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800af40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af44:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800af46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d024      	beq.n	800af96 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800af4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4e:	1e5a      	subs	r2, r3, #1
 800af50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af52:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d104      	bne.n	800af66 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800af5c:	f001 fa54 	bl	800c408 <pvTaskIncrementMutexHeldCount>
 800af60:	4602      	mov	r2, r0
 800af62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af64:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af68:	691b      	ldr	r3, [r3, #16]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00f      	beq.n	800af8e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af70:	3310      	adds	r3, #16
 800af72:	4618      	mov	r0, r3
 800af74:	f000 ff04 	bl	800bd80 <xTaskRemoveFromEventList>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d007      	beq.n	800af8e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800af7e:	4b54      	ldr	r3, [pc, #336]	; (800b0d0 <xQueueSemaphoreTake+0x214>)
 800af80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af84:	601a      	str	r2, [r3, #0]
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800af8e:	f001 ff51 	bl	800ce34 <vPortExitCritical>
				return pdPASS;
 800af92:	2301      	movs	r3, #1
 800af94:	e097      	b.n	800b0c6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d111      	bne.n	800afc0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800af9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00a      	beq.n	800afb8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800afa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	617b      	str	r3, [r7, #20]
}
 800afb4:	bf00      	nop
 800afb6:	e7fe      	b.n	800afb6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800afb8:	f001 ff3c 	bl	800ce34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800afbc:	2300      	movs	r3, #0
 800afbe:	e082      	b.n	800b0c6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800afc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d106      	bne.n	800afd4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800afc6:	f107 030c 	add.w	r3, r7, #12
 800afca:	4618      	mov	r0, r3
 800afcc:	f000 ff3c 	bl	800be48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800afd0:	2301      	movs	r3, #1
 800afd2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800afd4:	f001 ff2e 	bl	800ce34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800afd8:	f000 fc94 	bl	800b904 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800afdc:	f001 fefa 	bl	800cdd4 <vPortEnterCritical>
 800afe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afe6:	b25b      	sxtb	r3, r3
 800afe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afec:	d103      	bne.n	800aff6 <xQueueSemaphoreTake+0x13a>
 800afee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff0:	2200      	movs	r2, #0
 800aff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800affc:	b25b      	sxtb	r3, r3
 800affe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b002:	d103      	bne.n	800b00c <xQueueSemaphoreTake+0x150>
 800b004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b006:	2200      	movs	r2, #0
 800b008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b00c:	f001 ff12 	bl	800ce34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b010:	463a      	mov	r2, r7
 800b012:	f107 030c 	add.w	r3, r7, #12
 800b016:	4611      	mov	r1, r2
 800b018:	4618      	mov	r0, r3
 800b01a:	f000 ff2b 	bl	800be74 <xTaskCheckForTimeOut>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d132      	bne.n	800b08a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b024:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b026:	f000 f972 	bl	800b30e <prvIsQueueEmpty>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d026      	beq.n	800b07e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d109      	bne.n	800b04c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b038:	f001 fecc 	bl	800cdd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	4618      	mov	r0, r3
 800b042:	f001 f889 	bl	800c158 <xTaskPriorityInherit>
 800b046:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b048:	f001 fef4 	bl	800ce34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04e:	3324      	adds	r3, #36	; 0x24
 800b050:	683a      	ldr	r2, [r7, #0]
 800b052:	4611      	mov	r1, r2
 800b054:	4618      	mov	r0, r3
 800b056:	f000 fe43 	bl	800bce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b05a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b05c:	f000 f905 	bl	800b26a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b060:	f000 fc5e 	bl	800b920 <xTaskResumeAll>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	f47f af68 	bne.w	800af3c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b06c:	4b18      	ldr	r3, [pc, #96]	; (800b0d0 <xQueueSemaphoreTake+0x214>)
 800b06e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b072:	601a      	str	r2, [r3, #0]
 800b074:	f3bf 8f4f 	dsb	sy
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	e75e      	b.n	800af3c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b07e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b080:	f000 f8f3 	bl	800b26a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b084:	f000 fc4c 	bl	800b920 <xTaskResumeAll>
 800b088:	e758      	b.n	800af3c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b08a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b08c:	f000 f8ed 	bl	800b26a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b090:	f000 fc46 	bl	800b920 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b094:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b096:	f000 f93a 	bl	800b30e <prvIsQueueEmpty>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f43f af4d 	beq.w	800af3c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00d      	beq.n	800b0c4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b0a8:	f001 fe94 	bl	800cdd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b0ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0ae:	f000 f834 	bl	800b11a <prvGetDisinheritPriorityAfterTimeout>
 800b0b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f001 f922 	bl	800c304 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b0c0:	f001 feb8 	bl	800ce34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b0c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3738      	adds	r7, #56	; 0x38
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	e000ed04 	.word	0xe000ed04

0800b0d4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d10a      	bne.n	800b0fc <vQueueDelete+0x28>
	__asm volatile
 800b0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ea:	f383 8811 	msr	BASEPRI, r3
 800b0ee:	f3bf 8f6f 	isb	sy
 800b0f2:	f3bf 8f4f 	dsb	sy
 800b0f6:	60bb      	str	r3, [r7, #8]
}
 800b0f8:	bf00      	nop
 800b0fa:	e7fe      	b.n	800b0fa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f000 f95f 	bl	800b3c0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d102      	bne.n	800b112 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f002 f84f 	bl	800d1b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b112:	bf00      	nop
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b11a:	b480      	push	{r7}
 800b11c:	b085      	sub	sp, #20
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b126:	2b00      	cmp	r3, #0
 800b128:	d006      	beq.n	800b138 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b134:	60fb      	str	r3, [r7, #12]
 800b136:	e001      	b.n	800b13c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b138:	2300      	movs	r3, #0
 800b13a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b13c:	68fb      	ldr	r3, [r7, #12]
	}
 800b13e:	4618      	mov	r0, r3
 800b140:	3714      	adds	r7, #20
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b086      	sub	sp, #24
 800b14e:	af00      	add	r7, sp, #0
 800b150:	60f8      	str	r0, [r7, #12]
 800b152:	60b9      	str	r1, [r7, #8]
 800b154:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b156:	2300      	movs	r3, #0
 800b158:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b15e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b164:	2b00      	cmp	r3, #0
 800b166:	d10d      	bne.n	800b184 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d14d      	bne.n	800b20c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	4618      	mov	r0, r3
 800b176:	f001 f857 	bl	800c228 <xTaskPriorityDisinherit>
 800b17a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2200      	movs	r2, #0
 800b180:	609a      	str	r2, [r3, #8]
 800b182:	e043      	b.n	800b20c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d119      	bne.n	800b1be <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6858      	ldr	r0, [r3, #4]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b192:	461a      	mov	r2, r3
 800b194:	68b9      	ldr	r1, [r7, #8]
 800b196:	f002 fe6d 	bl	800de74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	685a      	ldr	r2, [r3, #4]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a2:	441a      	add	r2, r3
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	685a      	ldr	r2, [r3, #4]
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d32b      	bcc.n	800b20c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	605a      	str	r2, [r3, #4]
 800b1bc:	e026      	b.n	800b20c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	68d8      	ldr	r0, [r3, #12]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	68b9      	ldr	r1, [r7, #8]
 800b1ca:	f002 fe53 	bl	800de74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	68da      	ldr	r2, [r3, #12]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d6:	425b      	negs	r3, r3
 800b1d8:	441a      	add	r2, r3
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	68da      	ldr	r2, [r3, #12]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d207      	bcs.n	800b1fa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	689a      	ldr	r2, [r3, #8]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f2:	425b      	negs	r3, r3
 800b1f4:	441a      	add	r2, r3
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d105      	bne.n	800b20c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d002      	beq.n	800b20c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	3b01      	subs	r3, #1
 800b20a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	1c5a      	adds	r2, r3, #1
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b214:	697b      	ldr	r3, [r7, #20]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b082      	sub	sp, #8
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d018      	beq.n	800b262 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	68da      	ldr	r2, [r3, #12]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b238:	441a      	add	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	68da      	ldr	r2, [r3, #12]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	429a      	cmp	r2, r3
 800b248:	d303      	bcc.n	800b252 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	68d9      	ldr	r1, [r3, #12]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25a:	461a      	mov	r2, r3
 800b25c:	6838      	ldr	r0, [r7, #0]
 800b25e:	f002 fe09 	bl	800de74 <memcpy>
	}
}
 800b262:	bf00      	nop
 800b264:	3708      	adds	r7, #8
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b084      	sub	sp, #16
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b272:	f001 fdaf 	bl	800cdd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b27c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b27e:	e011      	b.n	800b2a4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b284:	2b00      	cmp	r3, #0
 800b286:	d012      	beq.n	800b2ae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	3324      	adds	r3, #36	; 0x24
 800b28c:	4618      	mov	r0, r3
 800b28e:	f000 fd77 	bl	800bd80 <xTaskRemoveFromEventList>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d001      	beq.n	800b29c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b298:	f000 fe4e 	bl	800bf38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b29c:	7bfb      	ldrb	r3, [r7, #15]
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	dce9      	bgt.n	800b280 <prvUnlockQueue+0x16>
 800b2ac:	e000      	b.n	800b2b0 <prvUnlockQueue+0x46>
					break;
 800b2ae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	22ff      	movs	r2, #255	; 0xff
 800b2b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b2b8:	f001 fdbc 	bl	800ce34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b2bc:	f001 fd8a 	bl	800cdd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2c6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2c8:	e011      	b.n	800b2ee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d012      	beq.n	800b2f8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	3310      	adds	r3, #16
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f000 fd52 	bl	800bd80 <xTaskRemoveFromEventList>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b2e2:	f000 fe29 	bl	800bf38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b2e6:	7bbb      	ldrb	r3, [r7, #14]
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	dce9      	bgt.n	800b2ca <prvUnlockQueue+0x60>
 800b2f6:	e000      	b.n	800b2fa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b2f8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	22ff      	movs	r2, #255	; 0xff
 800b2fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b302:	f001 fd97 	bl	800ce34 <vPortExitCritical>
}
 800b306:	bf00      	nop
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b084      	sub	sp, #16
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b316:	f001 fd5d 	bl	800cdd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d102      	bne.n	800b328 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b322:	2301      	movs	r3, #1
 800b324:	60fb      	str	r3, [r7, #12]
 800b326:	e001      	b.n	800b32c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b328:	2300      	movs	r3, #0
 800b32a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b32c:	f001 fd82 	bl	800ce34 <vPortExitCritical>

	return xReturn;
 800b330:	68fb      	ldr	r3, [r7, #12]
}
 800b332:	4618      	mov	r0, r3
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b084      	sub	sp, #16
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b342:	f001 fd47 	bl	800cdd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b34e:	429a      	cmp	r2, r3
 800b350:	d102      	bne.n	800b358 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b352:	2301      	movs	r3, #1
 800b354:	60fb      	str	r3, [r7, #12]
 800b356:	e001      	b.n	800b35c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b358:	2300      	movs	r3, #0
 800b35a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b35c:	f001 fd6a 	bl	800ce34 <vPortExitCritical>

	return xReturn;
 800b360:	68fb      	ldr	r3, [r7, #12]
}
 800b362:	4618      	mov	r0, r3
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
	...

0800b36c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b376:	2300      	movs	r3, #0
 800b378:	60fb      	str	r3, [r7, #12]
 800b37a:	e014      	b.n	800b3a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b37c:	4a0f      	ldr	r2, [pc, #60]	; (800b3bc <vQueueAddToRegistry+0x50>)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d10b      	bne.n	800b3a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b388:	490c      	ldr	r1, [pc, #48]	; (800b3bc <vQueueAddToRegistry+0x50>)
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b392:	4a0a      	ldr	r2, [pc, #40]	; (800b3bc <vQueueAddToRegistry+0x50>)
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	00db      	lsls	r3, r3, #3
 800b398:	4413      	add	r3, r2
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b39e:	e006      	b.n	800b3ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	60fb      	str	r3, [r7, #12]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2b07      	cmp	r3, #7
 800b3aa:	d9e7      	bls.n	800b37c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b3ac:	bf00      	nop
 800b3ae:	bf00      	nop
 800b3b0:	3714      	adds	r7, #20
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	20001d58 	.word	0x20001d58

0800b3c0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	60fb      	str	r3, [r7, #12]
 800b3cc:	e016      	b.n	800b3fc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b3ce:	4a10      	ldr	r2, [pc, #64]	; (800b410 <vQueueUnregisterQueue+0x50>)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	00db      	lsls	r3, r3, #3
 800b3d4:	4413      	add	r3, r2
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d10b      	bne.n	800b3f6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b3de:	4a0c      	ldr	r2, [pc, #48]	; (800b410 <vQueueUnregisterQueue+0x50>)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b3e8:	4a09      	ldr	r2, [pc, #36]	; (800b410 <vQueueUnregisterQueue+0x50>)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	00db      	lsls	r3, r3, #3
 800b3ee:	4413      	add	r3, r2
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	605a      	str	r2, [r3, #4]
				break;
 800b3f4:	e006      	b.n	800b404 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	60fb      	str	r3, [r7, #12]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2b07      	cmp	r3, #7
 800b400:	d9e5      	bls.n	800b3ce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b402:	bf00      	nop
 800b404:	bf00      	nop
 800b406:	3714      	adds	r7, #20
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	20001d58 	.word	0x20001d58

0800b414 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b414:	b580      	push	{r7, lr}
 800b416:	b086      	sub	sp, #24
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b424:	f001 fcd6 	bl	800cdd4 <vPortEnterCritical>
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b42e:	b25b      	sxtb	r3, r3
 800b430:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b434:	d103      	bne.n	800b43e <vQueueWaitForMessageRestricted+0x2a>
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b444:	b25b      	sxtb	r3, r3
 800b446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b44a:	d103      	bne.n	800b454 <vQueueWaitForMessageRestricted+0x40>
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	2200      	movs	r2, #0
 800b450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b454:	f001 fcee 	bl	800ce34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d106      	bne.n	800b46e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	3324      	adds	r3, #36	; 0x24
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	68b9      	ldr	r1, [r7, #8]
 800b468:	4618      	mov	r0, r3
 800b46a:	f000 fc5d 	bl	800bd28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b46e:	6978      	ldr	r0, [r7, #20]
 800b470:	f7ff fefb 	bl	800b26a <prvUnlockQueue>
	}
 800b474:	bf00      	nop
 800b476:	3718      	adds	r7, #24
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b08e      	sub	sp, #56	; 0x38
 800b480:	af04      	add	r7, sp, #16
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	607a      	str	r2, [r7, #4]
 800b488:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b48a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10a      	bne.n	800b4a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b494:	f383 8811 	msr	BASEPRI, r3
 800b498:	f3bf 8f6f 	isb	sy
 800b49c:	f3bf 8f4f 	dsb	sy
 800b4a0:	623b      	str	r3, [r7, #32]
}
 800b4a2:	bf00      	nop
 800b4a4:	e7fe      	b.n	800b4a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d10a      	bne.n	800b4c2 <xTaskCreateStatic+0x46>
	__asm volatile
 800b4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b0:	f383 8811 	msr	BASEPRI, r3
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	61fb      	str	r3, [r7, #28]
}
 800b4be:	bf00      	nop
 800b4c0:	e7fe      	b.n	800b4c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b4c2:	2364      	movs	r3, #100	; 0x64
 800b4c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	2b64      	cmp	r3, #100	; 0x64
 800b4ca:	d00a      	beq.n	800b4e2 <xTaskCreateStatic+0x66>
	__asm volatile
 800b4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d0:	f383 8811 	msr	BASEPRI, r3
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	61bb      	str	r3, [r7, #24]
}
 800b4de:	bf00      	nop
 800b4e0:	e7fe      	b.n	800b4e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b4e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d01e      	beq.n	800b528 <xTaskCreateStatic+0xac>
 800b4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d01b      	beq.n	800b528 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fc:	2202      	movs	r2, #2
 800b4fe:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b502:	2300      	movs	r3, #0
 800b504:	9303      	str	r3, [sp, #12]
 800b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b508:	9302      	str	r3, [sp, #8]
 800b50a:	f107 0314 	add.w	r3, r7, #20
 800b50e:	9301      	str	r3, [sp, #4]
 800b510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	68b9      	ldr	r1, [r7, #8]
 800b51a:	68f8      	ldr	r0, [r7, #12]
 800b51c:	f000 f850 	bl	800b5c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b520:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b522:	f000 f8e3 	bl	800b6ec <prvAddNewTaskToReadyList>
 800b526:	e001      	b.n	800b52c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b528:	2300      	movs	r3, #0
 800b52a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b52c:	697b      	ldr	r3, [r7, #20]
	}
 800b52e:	4618      	mov	r0, r3
 800b530:	3728      	adds	r7, #40	; 0x28
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b536:	b580      	push	{r7, lr}
 800b538:	b08c      	sub	sp, #48	; 0x30
 800b53a:	af04      	add	r7, sp, #16
 800b53c:	60f8      	str	r0, [r7, #12]
 800b53e:	60b9      	str	r1, [r7, #8]
 800b540:	603b      	str	r3, [r7, #0]
 800b542:	4613      	mov	r3, r2
 800b544:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b546:	88fb      	ldrh	r3, [r7, #6]
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	4618      	mov	r0, r3
 800b54c:	f001 fd64 	bl	800d018 <pvPortMalloc>
 800b550:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d00e      	beq.n	800b576 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b558:	2064      	movs	r0, #100	; 0x64
 800b55a:	f001 fd5d 	bl	800d018 <pvPortMalloc>
 800b55e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d003      	beq.n	800b56e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	697a      	ldr	r2, [r7, #20]
 800b56a:	631a      	str	r2, [r3, #48]	; 0x30
 800b56c:	e005      	b.n	800b57a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b56e:	6978      	ldr	r0, [r7, #20]
 800b570:	f001 fe1e 	bl	800d1b0 <vPortFree>
 800b574:	e001      	b.n	800b57a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b576:	2300      	movs	r3, #0
 800b578:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d017      	beq.n	800b5b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	2200      	movs	r2, #0
 800b584:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b588:	88fa      	ldrh	r2, [r7, #6]
 800b58a:	2300      	movs	r3, #0
 800b58c:	9303      	str	r3, [sp, #12]
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	9302      	str	r3, [sp, #8]
 800b592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b594:	9301      	str	r3, [sp, #4]
 800b596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b598:	9300      	str	r3, [sp, #0]
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	68b9      	ldr	r1, [r7, #8]
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f000 f80e 	bl	800b5c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5a4:	69f8      	ldr	r0, [r7, #28]
 800b5a6:	f000 f8a1 	bl	800b6ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	61bb      	str	r3, [r7, #24]
 800b5ae:	e002      	b.n	800b5b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b5b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b5b6:	69bb      	ldr	r3, [r7, #24]
	}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3720      	adds	r7, #32
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b088      	sub	sp, #32
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
 800b5cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	21a5      	movs	r1, #165	; 0xa5
 800b5da:	f002 fc59 	bl	800de90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	4413      	add	r3, r2
 800b5ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	f023 0307 	bic.w	r3, r3, #7
 800b5f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	f003 0307 	and.w	r3, r3, #7
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d00a      	beq.n	800b618 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b606:	f383 8811 	msr	BASEPRI, r3
 800b60a:	f3bf 8f6f 	isb	sy
 800b60e:	f3bf 8f4f 	dsb	sy
 800b612:	617b      	str	r3, [r7, #20]
}
 800b614:	bf00      	nop
 800b616:	e7fe      	b.n	800b616 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800b618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61a:	69ba      	ldr	r2, [r7, #24]
 800b61c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d01f      	beq.n	800b664 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b624:	2300      	movs	r3, #0
 800b626:	61fb      	str	r3, [r7, #28]
 800b628:	e012      	b.n	800b650 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b62a:	68ba      	ldr	r2, [r7, #8]
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	4413      	add	r3, r2
 800b630:	7819      	ldrb	r1, [r3, #0]
 800b632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	4413      	add	r3, r2
 800b638:	3334      	adds	r3, #52	; 0x34
 800b63a:	460a      	mov	r2, r1
 800b63c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	4413      	add	r3, r2
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d006      	beq.n	800b658 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	3301      	adds	r3, #1
 800b64e:	61fb      	str	r3, [r7, #28]
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	2b0f      	cmp	r3, #15
 800b654:	d9e9      	bls.n	800b62a <prvInitialiseNewTask+0x6a>
 800b656:	e000      	b.n	800b65a <prvInitialiseNewTask+0x9a>
			{
				break;
 800b658:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b662:	e003      	b.n	800b66c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b666:	2200      	movs	r2, #0
 800b668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66e:	2b37      	cmp	r3, #55	; 0x37
 800b670:	d901      	bls.n	800b676 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b672:	2337      	movs	r3, #55	; 0x37
 800b674:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b67a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b680:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800b682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b684:	2200      	movs	r2, #0
 800b686:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68a:	3304      	adds	r3, #4
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7fe fea9 	bl	800a3e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b694:	3318      	adds	r3, #24
 800b696:	4618      	mov	r0, r3
 800b698:	f7fe fea4 	bl	800a3e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6b0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	68f9      	ldr	r1, [r7, #12]
 800b6ca:	69b8      	ldr	r0, [r7, #24]
 800b6cc:	f001 fa52 	bl	800cb74 <pxPortInitialiseStack>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d002      	beq.n	800b6e2 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6e2:	bf00      	nop
 800b6e4:	3720      	adds	r7, #32
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
	...

0800b6ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b6f4:	f001 fb6e 	bl	800cdd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b6f8:	4b2d      	ldr	r3, [pc, #180]	; (800b7b0 <prvAddNewTaskToReadyList+0xc4>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	4a2c      	ldr	r2, [pc, #176]	; (800b7b0 <prvAddNewTaskToReadyList+0xc4>)
 800b700:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b702:	4b2c      	ldr	r3, [pc, #176]	; (800b7b4 <prvAddNewTaskToReadyList+0xc8>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d109      	bne.n	800b71e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b70a:	4a2a      	ldr	r2, [pc, #168]	; (800b7b4 <prvAddNewTaskToReadyList+0xc8>)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b710:	4b27      	ldr	r3, [pc, #156]	; (800b7b0 <prvAddNewTaskToReadyList+0xc4>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2b01      	cmp	r3, #1
 800b716:	d110      	bne.n	800b73a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b718:	f000 fc32 	bl	800bf80 <prvInitialiseTaskLists>
 800b71c:	e00d      	b.n	800b73a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b71e:	4b26      	ldr	r3, [pc, #152]	; (800b7b8 <prvAddNewTaskToReadyList+0xcc>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d109      	bne.n	800b73a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b726:	4b23      	ldr	r3, [pc, #140]	; (800b7b4 <prvAddNewTaskToReadyList+0xc8>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b730:	429a      	cmp	r2, r3
 800b732:	d802      	bhi.n	800b73a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b734:	4a1f      	ldr	r2, [pc, #124]	; (800b7b4 <prvAddNewTaskToReadyList+0xc8>)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b73a:	4b20      	ldr	r3, [pc, #128]	; (800b7bc <prvAddNewTaskToReadyList+0xd0>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	3301      	adds	r3, #1
 800b740:	4a1e      	ldr	r2, [pc, #120]	; (800b7bc <prvAddNewTaskToReadyList+0xd0>)
 800b742:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b744:	4b1d      	ldr	r3, [pc, #116]	; (800b7bc <prvAddNewTaskToReadyList+0xd0>)
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b750:	4b1b      	ldr	r3, [pc, #108]	; (800b7c0 <prvAddNewTaskToReadyList+0xd4>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	429a      	cmp	r2, r3
 800b756:	d903      	bls.n	800b760 <prvAddNewTaskToReadyList+0x74>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75c:	4a18      	ldr	r2, [pc, #96]	; (800b7c0 <prvAddNewTaskToReadyList+0xd4>)
 800b75e:	6013      	str	r3, [r2, #0]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b764:	4613      	mov	r3, r2
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	4413      	add	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	4a15      	ldr	r2, [pc, #84]	; (800b7c4 <prvAddNewTaskToReadyList+0xd8>)
 800b76e:	441a      	add	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	3304      	adds	r3, #4
 800b774:	4619      	mov	r1, r3
 800b776:	4610      	mov	r0, r2
 800b778:	f7fe fe41 	bl	800a3fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b77c:	f001 fb5a 	bl	800ce34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b780:	4b0d      	ldr	r3, [pc, #52]	; (800b7b8 <prvAddNewTaskToReadyList+0xcc>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d00e      	beq.n	800b7a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b788:	4b0a      	ldr	r3, [pc, #40]	; (800b7b4 <prvAddNewTaskToReadyList+0xc8>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b792:	429a      	cmp	r2, r3
 800b794:	d207      	bcs.n	800b7a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b796:	4b0c      	ldr	r3, [pc, #48]	; (800b7c8 <prvAddNewTaskToReadyList+0xdc>)
 800b798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b79c:	601a      	str	r2, [r3, #0]
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7a6:	bf00      	nop
 800b7a8:	3708      	adds	r7, #8
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	2000226c 	.word	0x2000226c
 800b7b4:	20001d98 	.word	0x20001d98
 800b7b8:	20002278 	.word	0x20002278
 800b7bc:	20002288 	.word	0x20002288
 800b7c0:	20002274 	.word	0x20002274
 800b7c4:	20001d9c 	.word	0x20001d9c
 800b7c8:	e000ed04 	.word	0xe000ed04

0800b7cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d017      	beq.n	800b80e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b7de:	4b13      	ldr	r3, [pc, #76]	; (800b82c <vTaskDelay+0x60>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d00a      	beq.n	800b7fc <vTaskDelay+0x30>
	__asm volatile
 800b7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ea:	f383 8811 	msr	BASEPRI, r3
 800b7ee:	f3bf 8f6f 	isb	sy
 800b7f2:	f3bf 8f4f 	dsb	sy
 800b7f6:	60bb      	str	r3, [r7, #8]
}
 800b7f8:	bf00      	nop
 800b7fa:	e7fe      	b.n	800b7fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b7fc:	f000 f882 	bl	800b904 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b800:	2100      	movs	r1, #0
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f000 fe14 	bl	800c430 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b808:	f000 f88a 	bl	800b920 <xTaskResumeAll>
 800b80c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d107      	bne.n	800b824 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b814:	4b06      	ldr	r3, [pc, #24]	; (800b830 <vTaskDelay+0x64>)
 800b816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b81a:	601a      	str	r2, [r3, #0]
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b824:	bf00      	nop
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	20002294 	.word	0x20002294
 800b830:	e000ed04 	.word	0xe000ed04

0800b834 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b08a      	sub	sp, #40	; 0x28
 800b838:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b83a:	2300      	movs	r3, #0
 800b83c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b83e:	2300      	movs	r3, #0
 800b840:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b842:	463a      	mov	r2, r7
 800b844:	1d39      	adds	r1, r7, #4
 800b846:	f107 0308 	add.w	r3, r7, #8
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7fe fd76 	bl	800a33c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b850:	6839      	ldr	r1, [r7, #0]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	9202      	str	r2, [sp, #8]
 800b858:	9301      	str	r3, [sp, #4]
 800b85a:	2300      	movs	r3, #0
 800b85c:	9300      	str	r3, [sp, #0]
 800b85e:	2300      	movs	r3, #0
 800b860:	460a      	mov	r2, r1
 800b862:	4922      	ldr	r1, [pc, #136]	; (800b8ec <vTaskStartScheduler+0xb8>)
 800b864:	4822      	ldr	r0, [pc, #136]	; (800b8f0 <vTaskStartScheduler+0xbc>)
 800b866:	f7ff fe09 	bl	800b47c <xTaskCreateStatic>
 800b86a:	4603      	mov	r3, r0
 800b86c:	4a21      	ldr	r2, [pc, #132]	; (800b8f4 <vTaskStartScheduler+0xc0>)
 800b86e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b870:	4b20      	ldr	r3, [pc, #128]	; (800b8f4 <vTaskStartScheduler+0xc0>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d002      	beq.n	800b87e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b878:	2301      	movs	r3, #1
 800b87a:	617b      	str	r3, [r7, #20]
 800b87c:	e001      	b.n	800b882 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b87e:	2300      	movs	r3, #0
 800b880:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	2b01      	cmp	r3, #1
 800b886:	d102      	bne.n	800b88e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b888:	f000 fe26 	bl	800c4d8 <xTimerCreateTimerTask>
 800b88c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	2b01      	cmp	r3, #1
 800b892:	d118      	bne.n	800b8c6 <vTaskStartScheduler+0x92>
	__asm volatile
 800b894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b898:	f383 8811 	msr	BASEPRI, r3
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	613b      	str	r3, [r7, #16]
}
 800b8a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b8a8:	4b13      	ldr	r3, [pc, #76]	; (800b8f8 <vTaskStartScheduler+0xc4>)
 800b8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b8b0:	4b12      	ldr	r3, [pc, #72]	; (800b8fc <vTaskStartScheduler+0xc8>)
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b8b6:	4b12      	ldr	r3, [pc, #72]	; (800b900 <vTaskStartScheduler+0xcc>)
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b8bc:	f7f5 faf6 	bl	8000eac <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b8c0:	f001 f9e6 	bl	800cc90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b8c4:	e00e      	b.n	800b8e4 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8cc:	d10a      	bne.n	800b8e4 <vTaskStartScheduler+0xb0>
	__asm volatile
 800b8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	60fb      	str	r3, [r7, #12]
}
 800b8e0:	bf00      	nop
 800b8e2:	e7fe      	b.n	800b8e2 <vTaskStartScheduler+0xae>
}
 800b8e4:	bf00      	nop
 800b8e6:	3718      	adds	r7, #24
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	08011f30 	.word	0x08011f30
 800b8f0:	0800bf51 	.word	0x0800bf51
 800b8f4:	20002290 	.word	0x20002290
 800b8f8:	2000228c 	.word	0x2000228c
 800b8fc:	20002278 	.word	0x20002278
 800b900:	20002270 	.word	0x20002270

0800b904 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b904:	b480      	push	{r7}
 800b906:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b908:	4b04      	ldr	r3, [pc, #16]	; (800b91c <vTaskSuspendAll+0x18>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	3301      	adds	r3, #1
 800b90e:	4a03      	ldr	r2, [pc, #12]	; (800b91c <vTaskSuspendAll+0x18>)
 800b910:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b912:	bf00      	nop
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr
 800b91c:	20002294 	.word	0x20002294

0800b920 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b926:	2300      	movs	r3, #0
 800b928:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b92a:	2300      	movs	r3, #0
 800b92c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b92e:	4b42      	ldr	r3, [pc, #264]	; (800ba38 <xTaskResumeAll+0x118>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10a      	bne.n	800b94c <xTaskResumeAll+0x2c>
	__asm volatile
 800b936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	603b      	str	r3, [r7, #0]
}
 800b948:	bf00      	nop
 800b94a:	e7fe      	b.n	800b94a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b94c:	f001 fa42 	bl	800cdd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b950:	4b39      	ldr	r3, [pc, #228]	; (800ba38 <xTaskResumeAll+0x118>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	3b01      	subs	r3, #1
 800b956:	4a38      	ldr	r2, [pc, #224]	; (800ba38 <xTaskResumeAll+0x118>)
 800b958:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b95a:	4b37      	ldr	r3, [pc, #220]	; (800ba38 <xTaskResumeAll+0x118>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d162      	bne.n	800ba28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b962:	4b36      	ldr	r3, [pc, #216]	; (800ba3c <xTaskResumeAll+0x11c>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d05e      	beq.n	800ba28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b96a:	e02f      	b.n	800b9cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b96c:	4b34      	ldr	r3, [pc, #208]	; (800ba40 <xTaskResumeAll+0x120>)
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	3318      	adds	r3, #24
 800b978:	4618      	mov	r0, r3
 800b97a:	f7fe fd9d 	bl	800a4b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	3304      	adds	r3, #4
 800b982:	4618      	mov	r0, r3
 800b984:	f7fe fd98 	bl	800a4b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98c:	4b2d      	ldr	r3, [pc, #180]	; (800ba44 <xTaskResumeAll+0x124>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	429a      	cmp	r2, r3
 800b992:	d903      	bls.n	800b99c <xTaskResumeAll+0x7c>
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b998:	4a2a      	ldr	r2, [pc, #168]	; (800ba44 <xTaskResumeAll+0x124>)
 800b99a:	6013      	str	r3, [r2, #0]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	4413      	add	r3, r2
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	4a27      	ldr	r2, [pc, #156]	; (800ba48 <xTaskResumeAll+0x128>)
 800b9aa:	441a      	add	r2, r3
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	3304      	adds	r3, #4
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	4610      	mov	r0, r2
 800b9b4:	f7fe fd23 	bl	800a3fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9bc:	4b23      	ldr	r3, [pc, #140]	; (800ba4c <xTaskResumeAll+0x12c>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d302      	bcc.n	800b9cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b9c6:	4b22      	ldr	r3, [pc, #136]	; (800ba50 <xTaskResumeAll+0x130>)
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9cc:	4b1c      	ldr	r3, [pc, #112]	; (800ba40 <xTaskResumeAll+0x120>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d1cb      	bne.n	800b96c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d001      	beq.n	800b9de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b9da:	f000 fb6f 	bl	800c0bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b9de:	4b1d      	ldr	r3, [pc, #116]	; (800ba54 <xTaskResumeAll+0x134>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d010      	beq.n	800ba0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b9ea:	f000 f847 	bl	800ba7c <xTaskIncrementTick>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d002      	beq.n	800b9fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b9f4:	4b16      	ldr	r3, [pc, #88]	; (800ba50 <xTaskResumeAll+0x130>)
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1f1      	bne.n	800b9ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ba06:	4b13      	ldr	r3, [pc, #76]	; (800ba54 <xTaskResumeAll+0x134>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba0c:	4b10      	ldr	r3, [pc, #64]	; (800ba50 <xTaskResumeAll+0x130>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d009      	beq.n	800ba28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba14:	2301      	movs	r3, #1
 800ba16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba18:	4b0f      	ldr	r3, [pc, #60]	; (800ba58 <xTaskResumeAll+0x138>)
 800ba1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba1e:	601a      	str	r2, [r3, #0]
 800ba20:	f3bf 8f4f 	dsb	sy
 800ba24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba28:	f001 fa04 	bl	800ce34 <vPortExitCritical>

	return xAlreadyYielded;
 800ba2c:	68bb      	ldr	r3, [r7, #8]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	20002294 	.word	0x20002294
 800ba3c:	2000226c 	.word	0x2000226c
 800ba40:	2000222c 	.word	0x2000222c
 800ba44:	20002274 	.word	0x20002274
 800ba48:	20001d9c 	.word	0x20001d9c
 800ba4c:	20001d98 	.word	0x20001d98
 800ba50:	20002280 	.word	0x20002280
 800ba54:	2000227c 	.word	0x2000227c
 800ba58:	e000ed04 	.word	0xe000ed04

0800ba5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ba62:	4b05      	ldr	r3, [pc, #20]	; (800ba78 <xTaskGetTickCount+0x1c>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ba68:	687b      	ldr	r3, [r7, #4]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	370c      	adds	r7, #12
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	20002270 	.word	0x20002270

0800ba7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b086      	sub	sp, #24
 800ba80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba82:	2300      	movs	r3, #0
 800ba84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba86:	4b4f      	ldr	r3, [pc, #316]	; (800bbc4 <xTaskIncrementTick+0x148>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f040 808f 	bne.w	800bbae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba90:	4b4d      	ldr	r3, [pc, #308]	; (800bbc8 <xTaskIncrementTick+0x14c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	3301      	adds	r3, #1
 800ba96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba98:	4a4b      	ldr	r2, [pc, #300]	; (800bbc8 <xTaskIncrementTick+0x14c>)
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d120      	bne.n	800bae6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800baa4:	4b49      	ldr	r3, [pc, #292]	; (800bbcc <xTaskIncrementTick+0x150>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00a      	beq.n	800bac4 <xTaskIncrementTick+0x48>
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	603b      	str	r3, [r7, #0]
}
 800bac0:	bf00      	nop
 800bac2:	e7fe      	b.n	800bac2 <xTaskIncrementTick+0x46>
 800bac4:	4b41      	ldr	r3, [pc, #260]	; (800bbcc <xTaskIncrementTick+0x150>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	60fb      	str	r3, [r7, #12]
 800baca:	4b41      	ldr	r3, [pc, #260]	; (800bbd0 <xTaskIncrementTick+0x154>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a3f      	ldr	r2, [pc, #252]	; (800bbcc <xTaskIncrementTick+0x150>)
 800bad0:	6013      	str	r3, [r2, #0]
 800bad2:	4a3f      	ldr	r2, [pc, #252]	; (800bbd0 <xTaskIncrementTick+0x154>)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6013      	str	r3, [r2, #0]
 800bad8:	4b3e      	ldr	r3, [pc, #248]	; (800bbd4 <xTaskIncrementTick+0x158>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	3301      	adds	r3, #1
 800bade:	4a3d      	ldr	r2, [pc, #244]	; (800bbd4 <xTaskIncrementTick+0x158>)
 800bae0:	6013      	str	r3, [r2, #0]
 800bae2:	f000 faeb 	bl	800c0bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bae6:	4b3c      	ldr	r3, [pc, #240]	; (800bbd8 <xTaskIncrementTick+0x15c>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	693a      	ldr	r2, [r7, #16]
 800baec:	429a      	cmp	r2, r3
 800baee:	d349      	bcc.n	800bb84 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800baf0:	4b36      	ldr	r3, [pc, #216]	; (800bbcc <xTaskIncrementTick+0x150>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d104      	bne.n	800bb04 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bafa:	4b37      	ldr	r3, [pc, #220]	; (800bbd8 <xTaskIncrementTick+0x15c>)
 800bafc:	f04f 32ff 	mov.w	r2, #4294967295
 800bb00:	601a      	str	r2, [r3, #0]
					break;
 800bb02:	e03f      	b.n	800bb84 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb04:	4b31      	ldr	r3, [pc, #196]	; (800bbcc <xTaskIncrementTick+0x150>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb14:	693a      	ldr	r2, [r7, #16]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d203      	bcs.n	800bb24 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb1c:	4a2e      	ldr	r2, [pc, #184]	; (800bbd8 <xTaskIncrementTick+0x15c>)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb22:	e02f      	b.n	800bb84 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	3304      	adds	r3, #4
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7fe fcc5 	bl	800a4b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d004      	beq.n	800bb40 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	3318      	adds	r3, #24
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fe fcbc 	bl	800a4b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb44:	4b25      	ldr	r3, [pc, #148]	; (800bbdc <xTaskIncrementTick+0x160>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d903      	bls.n	800bb54 <xTaskIncrementTick+0xd8>
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb50:	4a22      	ldr	r2, [pc, #136]	; (800bbdc <xTaskIncrementTick+0x160>)
 800bb52:	6013      	str	r3, [r2, #0]
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb58:	4613      	mov	r3, r2
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	4413      	add	r3, r2
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	4a1f      	ldr	r2, [pc, #124]	; (800bbe0 <xTaskIncrementTick+0x164>)
 800bb62:	441a      	add	r2, r3
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	3304      	adds	r3, #4
 800bb68:	4619      	mov	r1, r3
 800bb6a:	4610      	mov	r0, r2
 800bb6c:	f7fe fc47 	bl	800a3fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb74:	4b1b      	ldr	r3, [pc, #108]	; (800bbe4 <xTaskIncrementTick+0x168>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d3b8      	bcc.n	800baf0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb82:	e7b5      	b.n	800baf0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb84:	4b17      	ldr	r3, [pc, #92]	; (800bbe4 <xTaskIncrementTick+0x168>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb8a:	4915      	ldr	r1, [pc, #84]	; (800bbe0 <xTaskIncrementTick+0x164>)
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	4413      	add	r3, r2
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	440b      	add	r3, r1
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d901      	bls.n	800bba0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bba0:	4b11      	ldr	r3, [pc, #68]	; (800bbe8 <xTaskIncrementTick+0x16c>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d007      	beq.n	800bbb8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	617b      	str	r3, [r7, #20]
 800bbac:	e004      	b.n	800bbb8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bbae:	4b0f      	ldr	r3, [pc, #60]	; (800bbec <xTaskIncrementTick+0x170>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	4a0d      	ldr	r2, [pc, #52]	; (800bbec <xTaskIncrementTick+0x170>)
 800bbb6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bbb8:	697b      	ldr	r3, [r7, #20]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3718      	adds	r7, #24
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	20002294 	.word	0x20002294
 800bbc8:	20002270 	.word	0x20002270
 800bbcc:	20002224 	.word	0x20002224
 800bbd0:	20002228 	.word	0x20002228
 800bbd4:	20002284 	.word	0x20002284
 800bbd8:	2000228c 	.word	0x2000228c
 800bbdc:	20002274 	.word	0x20002274
 800bbe0:	20001d9c 	.word	0x20001d9c
 800bbe4:	20001d98 	.word	0x20001d98
 800bbe8:	20002280 	.word	0x20002280
 800bbec:	2000227c 	.word	0x2000227c

0800bbf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bbf6:	4b33      	ldr	r3, [pc, #204]	; (800bcc4 <vTaskSwitchContext+0xd4>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d003      	beq.n	800bc06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bbfe:	4b32      	ldr	r3, [pc, #200]	; (800bcc8 <vTaskSwitchContext+0xd8>)
 800bc00:	2201      	movs	r2, #1
 800bc02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc04:	e05a      	b.n	800bcbc <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 800bc06:	4b30      	ldr	r3, [pc, #192]	; (800bcc8 <vTaskSwitchContext+0xd8>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800bc0c:	f7f5 f95c 	bl	8000ec8 <getRunTimeCounterValue>
 800bc10:	4603      	mov	r3, r0
 800bc12:	4a2e      	ldr	r2, [pc, #184]	; (800bccc <vTaskSwitchContext+0xdc>)
 800bc14:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800bc16:	4b2d      	ldr	r3, [pc, #180]	; (800bccc <vTaskSwitchContext+0xdc>)
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	4b2d      	ldr	r3, [pc, #180]	; (800bcd0 <vTaskSwitchContext+0xe0>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d909      	bls.n	800bc36 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800bc22:	4b2c      	ldr	r3, [pc, #176]	; (800bcd4 <vTaskSwitchContext+0xe4>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800bc28:	4a28      	ldr	r2, [pc, #160]	; (800bccc <vTaskSwitchContext+0xdc>)
 800bc2a:	6810      	ldr	r0, [r2, #0]
 800bc2c:	4a28      	ldr	r2, [pc, #160]	; (800bcd0 <vTaskSwitchContext+0xe0>)
 800bc2e:	6812      	ldr	r2, [r2, #0]
 800bc30:	1a82      	subs	r2, r0, r2
 800bc32:	440a      	add	r2, r1
 800bc34:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800bc36:	4b25      	ldr	r3, [pc, #148]	; (800bccc <vTaskSwitchContext+0xdc>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a25      	ldr	r2, [pc, #148]	; (800bcd0 <vTaskSwitchContext+0xe0>)
 800bc3c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc3e:	4b26      	ldr	r3, [pc, #152]	; (800bcd8 <vTaskSwitchContext+0xe8>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	60fb      	str	r3, [r7, #12]
 800bc44:	e010      	b.n	800bc68 <vTaskSwitchContext+0x78>
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10a      	bne.n	800bc62 <vTaskSwitchContext+0x72>
	__asm volatile
 800bc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc50:	f383 8811 	msr	BASEPRI, r3
 800bc54:	f3bf 8f6f 	isb	sy
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	607b      	str	r3, [r7, #4]
}
 800bc5e:	bf00      	nop
 800bc60:	e7fe      	b.n	800bc60 <vTaskSwitchContext+0x70>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	3b01      	subs	r3, #1
 800bc66:	60fb      	str	r3, [r7, #12]
 800bc68:	491c      	ldr	r1, [pc, #112]	; (800bcdc <vTaskSwitchContext+0xec>)
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4413      	add	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	440b      	add	r3, r1
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d0e4      	beq.n	800bc46 <vTaskSwitchContext+0x56>
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	4613      	mov	r3, r2
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	4413      	add	r3, r2
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	4a15      	ldr	r2, [pc, #84]	; (800bcdc <vTaskSwitchContext+0xec>)
 800bc88:	4413      	add	r3, r2
 800bc8a:	60bb      	str	r3, [r7, #8]
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	685a      	ldr	r2, [r3, #4]
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	605a      	str	r2, [r3, #4]
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	685a      	ldr	r2, [r3, #4]
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	3308      	adds	r3, #8
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d104      	bne.n	800bcac <vTaskSwitchContext+0xbc>
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	685a      	ldr	r2, [r3, #4]
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	605a      	str	r2, [r3, #4]
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	4a08      	ldr	r2, [pc, #32]	; (800bcd4 <vTaskSwitchContext+0xe4>)
 800bcb4:	6013      	str	r3, [r2, #0]
 800bcb6:	4a08      	ldr	r2, [pc, #32]	; (800bcd8 <vTaskSwitchContext+0xe8>)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6013      	str	r3, [r2, #0]
}
 800bcbc:	bf00      	nop
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	20002294 	.word	0x20002294
 800bcc8:	20002280 	.word	0x20002280
 800bccc:	2000229c 	.word	0x2000229c
 800bcd0:	20002298 	.word	0x20002298
 800bcd4:	20001d98 	.word	0x20001d98
 800bcd8:	20002274 	.word	0x20002274
 800bcdc:	20001d9c 	.word	0x20001d9c

0800bce0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d10a      	bne.n	800bd06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	60fb      	str	r3, [r7, #12]
}
 800bd02:	bf00      	nop
 800bd04:	e7fe      	b.n	800bd04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd06:	4b07      	ldr	r3, [pc, #28]	; (800bd24 <vTaskPlaceOnEventList+0x44>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	3318      	adds	r3, #24
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f7fe fb99 	bl	800a446 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd14:	2101      	movs	r1, #1
 800bd16:	6838      	ldr	r0, [r7, #0]
 800bd18:	f000 fb8a 	bl	800c430 <prvAddCurrentTaskToDelayedList>
}
 800bd1c:	bf00      	nop
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	20001d98 	.word	0x20001d98

0800bd28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10a      	bne.n	800bd50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3e:	f383 8811 	msr	BASEPRI, r3
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	617b      	str	r3, [r7, #20]
}
 800bd4c:	bf00      	nop
 800bd4e:	e7fe      	b.n	800bd4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd50:	4b0a      	ldr	r3, [pc, #40]	; (800bd7c <vTaskPlaceOnEventListRestricted+0x54>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	3318      	adds	r3, #24
 800bd56:	4619      	mov	r1, r3
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f7fe fb50 	bl	800a3fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d002      	beq.n	800bd6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bd64:	f04f 33ff 	mov.w	r3, #4294967295
 800bd68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd6a:	6879      	ldr	r1, [r7, #4]
 800bd6c:	68b8      	ldr	r0, [r7, #8]
 800bd6e:	f000 fb5f 	bl	800c430 <prvAddCurrentTaskToDelayedList>
	}
 800bd72:	bf00      	nop
 800bd74:	3718      	adds	r7, #24
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	20001d98 	.word	0x20001d98

0800bd80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d10a      	bne.n	800bdac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9a:	f383 8811 	msr	BASEPRI, r3
 800bd9e:	f3bf 8f6f 	isb	sy
 800bda2:	f3bf 8f4f 	dsb	sy
 800bda6:	60fb      	str	r3, [r7, #12]
}
 800bda8:	bf00      	nop
 800bdaa:	e7fe      	b.n	800bdaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	3318      	adds	r3, #24
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7fe fb81 	bl	800a4b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdb6:	4b1e      	ldr	r3, [pc, #120]	; (800be30 <xTaskRemoveFromEventList+0xb0>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d11d      	bne.n	800bdfa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	3304      	adds	r3, #4
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7fe fb78 	bl	800a4b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdcc:	4b19      	ldr	r3, [pc, #100]	; (800be34 <xTaskRemoveFromEventList+0xb4>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d903      	bls.n	800bddc <xTaskRemoveFromEventList+0x5c>
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd8:	4a16      	ldr	r2, [pc, #88]	; (800be34 <xTaskRemoveFromEventList+0xb4>)
 800bdda:	6013      	str	r3, [r2, #0]
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde0:	4613      	mov	r3, r2
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	4413      	add	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	4a13      	ldr	r2, [pc, #76]	; (800be38 <xTaskRemoveFromEventList+0xb8>)
 800bdea:	441a      	add	r2, r3
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	3304      	adds	r3, #4
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	f7fe fb03 	bl	800a3fe <vListInsertEnd>
 800bdf8:	e005      	b.n	800be06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	3318      	adds	r3, #24
 800bdfe:	4619      	mov	r1, r3
 800be00:	480e      	ldr	r0, [pc, #56]	; (800be3c <xTaskRemoveFromEventList+0xbc>)
 800be02:	f7fe fafc 	bl	800a3fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be0a:	4b0d      	ldr	r3, [pc, #52]	; (800be40 <xTaskRemoveFromEventList+0xc0>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be10:	429a      	cmp	r2, r3
 800be12:	d905      	bls.n	800be20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be14:	2301      	movs	r3, #1
 800be16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be18:	4b0a      	ldr	r3, [pc, #40]	; (800be44 <xTaskRemoveFromEventList+0xc4>)
 800be1a:	2201      	movs	r2, #1
 800be1c:	601a      	str	r2, [r3, #0]
 800be1e:	e001      	b.n	800be24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800be20:	2300      	movs	r3, #0
 800be22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be24:	697b      	ldr	r3, [r7, #20]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3718      	adds	r7, #24
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	20002294 	.word	0x20002294
 800be34:	20002274 	.word	0x20002274
 800be38:	20001d9c 	.word	0x20001d9c
 800be3c:	2000222c 	.word	0x2000222c
 800be40:	20001d98 	.word	0x20001d98
 800be44:	20002280 	.word	0x20002280

0800be48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be50:	4b06      	ldr	r3, [pc, #24]	; (800be6c <vTaskInternalSetTimeOutState+0x24>)
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be58:	4b05      	ldr	r3, [pc, #20]	; (800be70 <vTaskInternalSetTimeOutState+0x28>)
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	605a      	str	r2, [r3, #4]
}
 800be60:	bf00      	nop
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr
 800be6c:	20002284 	.word	0x20002284
 800be70:	20002270 	.word	0x20002270

0800be74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b088      	sub	sp, #32
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10a      	bne.n	800be9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	613b      	str	r3, [r7, #16]
}
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d10a      	bne.n	800beb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea4:	f383 8811 	msr	BASEPRI, r3
 800bea8:	f3bf 8f6f 	isb	sy
 800beac:	f3bf 8f4f 	dsb	sy
 800beb0:	60fb      	str	r3, [r7, #12]
}
 800beb2:	bf00      	nop
 800beb4:	e7fe      	b.n	800beb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800beb6:	f000 ff8d 	bl	800cdd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800beba:	4b1d      	ldr	r3, [pc, #116]	; (800bf30 <xTaskCheckForTimeOut+0xbc>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	69ba      	ldr	r2, [r7, #24]
 800bec6:	1ad3      	subs	r3, r2, r3
 800bec8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed2:	d102      	bne.n	800beda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bed4:	2300      	movs	r3, #0
 800bed6:	61fb      	str	r3, [r7, #28]
 800bed8:	e023      	b.n	800bf22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681a      	ldr	r2, [r3, #0]
 800bede:	4b15      	ldr	r3, [pc, #84]	; (800bf34 <xTaskCheckForTimeOut+0xc0>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d007      	beq.n	800bef6 <xTaskCheckForTimeOut+0x82>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	69ba      	ldr	r2, [r7, #24]
 800beec:	429a      	cmp	r2, r3
 800beee:	d302      	bcc.n	800bef6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bef0:	2301      	movs	r3, #1
 800bef2:	61fb      	str	r3, [r7, #28]
 800bef4:	e015      	b.n	800bf22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	697a      	ldr	r2, [r7, #20]
 800befc:	429a      	cmp	r2, r3
 800befe:	d20b      	bcs.n	800bf18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	1ad2      	subs	r2, r2, r3
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f7ff ff9b 	bl	800be48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf12:	2300      	movs	r3, #0
 800bf14:	61fb      	str	r3, [r7, #28]
 800bf16:	e004      	b.n	800bf22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf22:	f000 ff87 	bl	800ce34 <vPortExitCritical>

	return xReturn;
 800bf26:	69fb      	ldr	r3, [r7, #28]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3720      	adds	r7, #32
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	20002270 	.word	0x20002270
 800bf34:	20002284 	.word	0x20002284

0800bf38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf38:	b480      	push	{r7}
 800bf3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf3c:	4b03      	ldr	r3, [pc, #12]	; (800bf4c <vTaskMissedYield+0x14>)
 800bf3e:	2201      	movs	r2, #1
 800bf40:	601a      	str	r2, [r3, #0]
}
 800bf42:	bf00      	nop
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr
 800bf4c:	20002280 	.word	0x20002280

0800bf50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf58:	f000 f852 	bl	800c000 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf5c:	4b06      	ldr	r3, [pc, #24]	; (800bf78 <prvIdleTask+0x28>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d9f9      	bls.n	800bf58 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf64:	4b05      	ldr	r3, [pc, #20]	; (800bf7c <prvIdleTask+0x2c>)
 800bf66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf6a:	601a      	str	r2, [r3, #0]
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf74:	e7f0      	b.n	800bf58 <prvIdleTask+0x8>
 800bf76:	bf00      	nop
 800bf78:	20001d9c 	.word	0x20001d9c
 800bf7c:	e000ed04 	.word	0xe000ed04

0800bf80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf86:	2300      	movs	r3, #0
 800bf88:	607b      	str	r3, [r7, #4]
 800bf8a:	e00c      	b.n	800bfa6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	4613      	mov	r3, r2
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	4413      	add	r3, r2
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	4a12      	ldr	r2, [pc, #72]	; (800bfe0 <prvInitialiseTaskLists+0x60>)
 800bf98:	4413      	add	r3, r2
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7fe fa02 	bl	800a3a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	607b      	str	r3, [r7, #4]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2b37      	cmp	r3, #55	; 0x37
 800bfaa:	d9ef      	bls.n	800bf8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bfac:	480d      	ldr	r0, [pc, #52]	; (800bfe4 <prvInitialiseTaskLists+0x64>)
 800bfae:	f7fe f9f9 	bl	800a3a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bfb2:	480d      	ldr	r0, [pc, #52]	; (800bfe8 <prvInitialiseTaskLists+0x68>)
 800bfb4:	f7fe f9f6 	bl	800a3a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bfb8:	480c      	ldr	r0, [pc, #48]	; (800bfec <prvInitialiseTaskLists+0x6c>)
 800bfba:	f7fe f9f3 	bl	800a3a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bfbe:	480c      	ldr	r0, [pc, #48]	; (800bff0 <prvInitialiseTaskLists+0x70>)
 800bfc0:	f7fe f9f0 	bl	800a3a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bfc4:	480b      	ldr	r0, [pc, #44]	; (800bff4 <prvInitialiseTaskLists+0x74>)
 800bfc6:	f7fe f9ed 	bl	800a3a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bfca:	4b0b      	ldr	r3, [pc, #44]	; (800bff8 <prvInitialiseTaskLists+0x78>)
 800bfcc:	4a05      	ldr	r2, [pc, #20]	; (800bfe4 <prvInitialiseTaskLists+0x64>)
 800bfce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bfd0:	4b0a      	ldr	r3, [pc, #40]	; (800bffc <prvInitialiseTaskLists+0x7c>)
 800bfd2:	4a05      	ldr	r2, [pc, #20]	; (800bfe8 <prvInitialiseTaskLists+0x68>)
 800bfd4:	601a      	str	r2, [r3, #0]
}
 800bfd6:	bf00      	nop
 800bfd8:	3708      	adds	r7, #8
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	20001d9c 	.word	0x20001d9c
 800bfe4:	200021fc 	.word	0x200021fc
 800bfe8:	20002210 	.word	0x20002210
 800bfec:	2000222c 	.word	0x2000222c
 800bff0:	20002240 	.word	0x20002240
 800bff4:	20002258 	.word	0x20002258
 800bff8:	20002224 	.word	0x20002224
 800bffc:	20002228 	.word	0x20002228

0800c000 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c006:	e019      	b.n	800c03c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c008:	f000 fee4 	bl	800cdd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c00c:	4b10      	ldr	r3, [pc, #64]	; (800c050 <prvCheckTasksWaitingTermination+0x50>)
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	3304      	adds	r3, #4
 800c018:	4618      	mov	r0, r3
 800c01a:	f7fe fa4d 	bl	800a4b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c01e:	4b0d      	ldr	r3, [pc, #52]	; (800c054 <prvCheckTasksWaitingTermination+0x54>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	3b01      	subs	r3, #1
 800c024:	4a0b      	ldr	r2, [pc, #44]	; (800c054 <prvCheckTasksWaitingTermination+0x54>)
 800c026:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c028:	4b0b      	ldr	r3, [pc, #44]	; (800c058 <prvCheckTasksWaitingTermination+0x58>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	3b01      	subs	r3, #1
 800c02e:	4a0a      	ldr	r2, [pc, #40]	; (800c058 <prvCheckTasksWaitingTermination+0x58>)
 800c030:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c032:	f000 feff 	bl	800ce34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f810 	bl	800c05c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c03c:	4b06      	ldr	r3, [pc, #24]	; (800c058 <prvCheckTasksWaitingTermination+0x58>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d1e1      	bne.n	800c008 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c044:	bf00      	nop
 800c046:	bf00      	nop
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	20002240 	.word	0x20002240
 800c054:	2000226c 	.word	0x2000226c
 800c058:	20002254 	.word	0x20002254

0800c05c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d108      	bne.n	800c080 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c072:	4618      	mov	r0, r3
 800c074:	f001 f89c 	bl	800d1b0 <vPortFree>
				vPortFree( pxTCB );
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f001 f899 	bl	800d1b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c07e:	e018      	b.n	800c0b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800c086:	2b01      	cmp	r3, #1
 800c088:	d103      	bne.n	800c092 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f001 f890 	bl	800d1b0 <vPortFree>
	}
 800c090:	e00f      	b.n	800c0b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800c098:	2b02      	cmp	r3, #2
 800c09a:	d00a      	beq.n	800c0b2 <prvDeleteTCB+0x56>
	__asm volatile
 800c09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a0:	f383 8811 	msr	BASEPRI, r3
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	60fb      	str	r3, [r7, #12]
}
 800c0ae:	bf00      	nop
 800c0b0:	e7fe      	b.n	800c0b0 <prvDeleteTCB+0x54>
	}
 800c0b2:	bf00      	nop
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
	...

0800c0bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0c2:	4b0c      	ldr	r3, [pc, #48]	; (800c0f4 <prvResetNextTaskUnblockTime+0x38>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d104      	bne.n	800c0d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c0cc:	4b0a      	ldr	r3, [pc, #40]	; (800c0f8 <prvResetNextTaskUnblockTime+0x3c>)
 800c0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c0d4:	e008      	b.n	800c0e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0d6:	4b07      	ldr	r3, [pc, #28]	; (800c0f4 <prvResetNextTaskUnblockTime+0x38>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	4a04      	ldr	r2, [pc, #16]	; (800c0f8 <prvResetNextTaskUnblockTime+0x3c>)
 800c0e6:	6013      	str	r3, [r2, #0]
}
 800c0e8:	bf00      	nop
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr
 800c0f4:	20002224 	.word	0x20002224
 800c0f8:	2000228c 	.word	0x2000228c

0800c0fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b083      	sub	sp, #12
 800c100:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c102:	4b05      	ldr	r3, [pc, #20]	; (800c118 <xTaskGetCurrentTaskHandle+0x1c>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c108:	687b      	ldr	r3, [r7, #4]
	}
 800c10a:	4618      	mov	r0, r3
 800c10c:	370c      	adds	r7, #12
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	20001d98 	.word	0x20001d98

0800c11c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c122:	4b0b      	ldr	r3, [pc, #44]	; (800c150 <xTaskGetSchedulerState+0x34>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d102      	bne.n	800c130 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c12a:	2301      	movs	r3, #1
 800c12c:	607b      	str	r3, [r7, #4]
 800c12e:	e008      	b.n	800c142 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c130:	4b08      	ldr	r3, [pc, #32]	; (800c154 <xTaskGetSchedulerState+0x38>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d102      	bne.n	800c13e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c138:	2302      	movs	r3, #2
 800c13a:	607b      	str	r3, [r7, #4]
 800c13c:	e001      	b.n	800c142 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c13e:	2300      	movs	r3, #0
 800c140:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c142:	687b      	ldr	r3, [r7, #4]
	}
 800c144:	4618      	mov	r0, r3
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr
 800c150:	20002278 	.word	0x20002278
 800c154:	20002294 	.word	0x20002294

0800c158 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c164:	2300      	movs	r3, #0
 800c166:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d051      	beq.n	800c212 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c172:	4b2a      	ldr	r3, [pc, #168]	; (800c21c <xTaskPriorityInherit+0xc4>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c178:	429a      	cmp	r2, r3
 800c17a:	d241      	bcs.n	800c200 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	699b      	ldr	r3, [r3, #24]
 800c180:	2b00      	cmp	r3, #0
 800c182:	db06      	blt.n	800c192 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c184:	4b25      	ldr	r3, [pc, #148]	; (800c21c <xTaskPriorityInherit+0xc4>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	6959      	ldr	r1, [r3, #20]
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c19a:	4613      	mov	r3, r2
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	4413      	add	r3, r2
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	4a1f      	ldr	r2, [pc, #124]	; (800c220 <xTaskPriorityInherit+0xc8>)
 800c1a4:	4413      	add	r3, r2
 800c1a6:	4299      	cmp	r1, r3
 800c1a8:	d122      	bne.n	800c1f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fe f982 	bl	800a4b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c1b4:	4b19      	ldr	r3, [pc, #100]	; (800c21c <xTaskPriorityInherit+0xc4>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1c2:	4b18      	ldr	r3, [pc, #96]	; (800c224 <xTaskPriorityInherit+0xcc>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d903      	bls.n	800c1d2 <xTaskPriorityInherit+0x7a>
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ce:	4a15      	ldr	r2, [pc, #84]	; (800c224 <xTaskPriorityInherit+0xcc>)
 800c1d0:	6013      	str	r3, [r2, #0]
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	4413      	add	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	4a10      	ldr	r2, [pc, #64]	; (800c220 <xTaskPriorityInherit+0xc8>)
 800c1e0:	441a      	add	r2, r3
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	3304      	adds	r3, #4
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	4610      	mov	r0, r2
 800c1ea:	f7fe f908 	bl	800a3fe <vListInsertEnd>
 800c1ee:	e004      	b.n	800c1fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c1f0:	4b0a      	ldr	r3, [pc, #40]	; (800c21c <xTaskPriorityInherit+0xc4>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	60fb      	str	r3, [r7, #12]
 800c1fe:	e008      	b.n	800c212 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c204:	4b05      	ldr	r3, [pc, #20]	; (800c21c <xTaskPriorityInherit+0xc4>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d201      	bcs.n	800c212 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c20e:	2301      	movs	r3, #1
 800c210:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c212:	68fb      	ldr	r3, [r7, #12]
	}
 800c214:	4618      	mov	r0, r3
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	20001d98 	.word	0x20001d98
 800c220:	20001d9c 	.word	0x20001d9c
 800c224:	20002274 	.word	0x20002274

0800c228 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b086      	sub	sp, #24
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c234:	2300      	movs	r3, #0
 800c236:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d056      	beq.n	800c2ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c23e:	4b2e      	ldr	r3, [pc, #184]	; (800c2f8 <xTaskPriorityDisinherit+0xd0>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	693a      	ldr	r2, [r7, #16]
 800c244:	429a      	cmp	r2, r3
 800c246:	d00a      	beq.n	800c25e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24c:	f383 8811 	msr	BASEPRI, r3
 800c250:	f3bf 8f6f 	isb	sy
 800c254:	f3bf 8f4f 	dsb	sy
 800c258:	60fb      	str	r3, [r7, #12]
}
 800c25a:	bf00      	nop
 800c25c:	e7fe      	b.n	800c25c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c262:	2b00      	cmp	r3, #0
 800c264:	d10a      	bne.n	800c27c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26a:	f383 8811 	msr	BASEPRI, r3
 800c26e:	f3bf 8f6f 	isb	sy
 800c272:	f3bf 8f4f 	dsb	sy
 800c276:	60bb      	str	r3, [r7, #8]
}
 800c278:	bf00      	nop
 800c27a:	e7fe      	b.n	800c27a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c280:	1e5a      	subs	r2, r3, #1
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c28e:	429a      	cmp	r2, r3
 800c290:	d02c      	beq.n	800c2ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c296:	2b00      	cmp	r3, #0
 800c298:	d128      	bne.n	800c2ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	3304      	adds	r3, #4
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7fe f90a 	bl	800a4b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2bc:	4b0f      	ldr	r3, [pc, #60]	; (800c2fc <xTaskPriorityDisinherit+0xd4>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d903      	bls.n	800c2cc <xTaskPriorityDisinherit+0xa4>
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c8:	4a0c      	ldr	r2, [pc, #48]	; (800c2fc <xTaskPriorityDisinherit+0xd4>)
 800c2ca:	6013      	str	r3, [r2, #0]
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	4413      	add	r3, r2
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	4a09      	ldr	r2, [pc, #36]	; (800c300 <xTaskPriorityDisinherit+0xd8>)
 800c2da:	441a      	add	r2, r3
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	3304      	adds	r3, #4
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	4610      	mov	r0, r2
 800c2e4:	f7fe f88b 	bl	800a3fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c2ec:	697b      	ldr	r3, [r7, #20]
	}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3718      	adds	r7, #24
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	20001d98 	.word	0x20001d98
 800c2fc:	20002274 	.word	0x20002274
 800c300:	20001d9c 	.word	0x20001d9c

0800c304 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c304:	b580      	push	{r7, lr}
 800c306:	b088      	sub	sp, #32
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c312:	2301      	movs	r3, #1
 800c314:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d06a      	beq.n	800c3f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c320:	2b00      	cmp	r3, #0
 800c322:	d10a      	bne.n	800c33a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c328:	f383 8811 	msr	BASEPRI, r3
 800c32c:	f3bf 8f6f 	isb	sy
 800c330:	f3bf 8f4f 	dsb	sy
 800c334:	60fb      	str	r3, [r7, #12]
}
 800c336:	bf00      	nop
 800c338:	e7fe      	b.n	800c338 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c33e:	683a      	ldr	r2, [r7, #0]
 800c340:	429a      	cmp	r2, r3
 800c342:	d902      	bls.n	800c34a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	61fb      	str	r3, [r7, #28]
 800c348:	e002      	b.n	800c350 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c34e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c350:	69bb      	ldr	r3, [r7, #24]
 800c352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c354:	69fa      	ldr	r2, [r7, #28]
 800c356:	429a      	cmp	r2, r3
 800c358:	d04b      	beq.n	800c3f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c35e:	697a      	ldr	r2, [r7, #20]
 800c360:	429a      	cmp	r2, r3
 800c362:	d146      	bne.n	800c3f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c364:	4b25      	ldr	r3, [pc, #148]	; (800c3fc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	69ba      	ldr	r2, [r7, #24]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d10a      	bne.n	800c384 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	60bb      	str	r3, [r7, #8]
}
 800c380:	bf00      	nop
 800c382:	e7fe      	b.n	800c382 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c388:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	69fa      	ldr	r2, [r7, #28]
 800c38e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	699b      	ldr	r3, [r3, #24]
 800c394:	2b00      	cmp	r3, #0
 800c396:	db04      	blt.n	800c3a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c3a2:	69bb      	ldr	r3, [r7, #24]
 800c3a4:	6959      	ldr	r1, [r3, #20]
 800c3a6:	693a      	ldr	r2, [r7, #16]
 800c3a8:	4613      	mov	r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	4413      	add	r3, r2
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	4a13      	ldr	r2, [pc, #76]	; (800c400 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c3b2:	4413      	add	r3, r2
 800c3b4:	4299      	cmp	r1, r3
 800c3b6:	d11c      	bne.n	800c3f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	3304      	adds	r3, #4
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7fe f87b 	bl	800a4b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3c6:	4b0f      	ldr	r3, [pc, #60]	; (800c404 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d903      	bls.n	800c3d6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d2:	4a0c      	ldr	r2, [pc, #48]	; (800c404 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c3d4:	6013      	str	r3, [r2, #0]
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3da:	4613      	mov	r3, r2
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4413      	add	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	4a07      	ldr	r2, [pc, #28]	; (800c400 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c3e4:	441a      	add	r2, r3
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	3304      	adds	r3, #4
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	4610      	mov	r0, r2
 800c3ee:	f7fe f806 	bl	800a3fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c3f2:	bf00      	nop
 800c3f4:	3720      	adds	r7, #32
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	20001d98 	.word	0x20001d98
 800c400:	20001d9c 	.word	0x20001d9c
 800c404:	20002274 	.word	0x20002274

0800c408 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c408:	b480      	push	{r7}
 800c40a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c40c:	4b07      	ldr	r3, [pc, #28]	; (800c42c <pvTaskIncrementMutexHeldCount+0x24>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d004      	beq.n	800c41e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c414:	4b05      	ldr	r3, [pc, #20]	; (800c42c <pvTaskIncrementMutexHeldCount+0x24>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c41a:	3201      	adds	r2, #1
 800c41c:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800c41e:	4b03      	ldr	r3, [pc, #12]	; (800c42c <pvTaskIncrementMutexHeldCount+0x24>)
 800c420:	681b      	ldr	r3, [r3, #0]
	}
 800c422:	4618      	mov	r0, r3
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr
 800c42c:	20001d98 	.word	0x20001d98

0800c430 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c43a:	4b21      	ldr	r3, [pc, #132]	; (800c4c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c440:	4b20      	ldr	r3, [pc, #128]	; (800c4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	3304      	adds	r3, #4
 800c446:	4618      	mov	r0, r3
 800c448:	f7fe f836 	bl	800a4b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c452:	d10a      	bne.n	800c46a <prvAddCurrentTaskToDelayedList+0x3a>
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d007      	beq.n	800c46a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c45a:	4b1a      	ldr	r3, [pc, #104]	; (800c4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	3304      	adds	r3, #4
 800c460:	4619      	mov	r1, r3
 800c462:	4819      	ldr	r0, [pc, #100]	; (800c4c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800c464:	f7fd ffcb 	bl	800a3fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c468:	e026      	b.n	800c4b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c46a:	68fa      	ldr	r2, [r7, #12]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	4413      	add	r3, r2
 800c470:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c472:	4b14      	ldr	r3, [pc, #80]	; (800c4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	68ba      	ldr	r2, [r7, #8]
 800c478:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c47a:	68ba      	ldr	r2, [r7, #8]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d209      	bcs.n	800c496 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c482:	4b12      	ldr	r3, [pc, #72]	; (800c4cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	4b0f      	ldr	r3, [pc, #60]	; (800c4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	3304      	adds	r3, #4
 800c48c:	4619      	mov	r1, r3
 800c48e:	4610      	mov	r0, r2
 800c490:	f7fd ffd9 	bl	800a446 <vListInsert>
}
 800c494:	e010      	b.n	800c4b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c496:	4b0e      	ldr	r3, [pc, #56]	; (800c4d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	4b0a      	ldr	r3, [pc, #40]	; (800c4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	3304      	adds	r3, #4
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	4610      	mov	r0, r2
 800c4a4:	f7fd ffcf 	bl	800a446 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c4a8:	4b0a      	ldr	r3, [pc, #40]	; (800c4d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d202      	bcs.n	800c4b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c4b2:	4a08      	ldr	r2, [pc, #32]	; (800c4d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	6013      	str	r3, [r2, #0]
}
 800c4b8:	bf00      	nop
 800c4ba:	3710      	adds	r7, #16
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	20002270 	.word	0x20002270
 800c4c4:	20001d98 	.word	0x20001d98
 800c4c8:	20002258 	.word	0x20002258
 800c4cc:	20002228 	.word	0x20002228
 800c4d0:	20002224 	.word	0x20002224
 800c4d4:	2000228c 	.word	0x2000228c

0800c4d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b08a      	sub	sp, #40	; 0x28
 800c4dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c4e2:	f000 fb07 	bl	800caf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c4e6:	4b1c      	ldr	r3, [pc, #112]	; (800c558 <xTimerCreateTimerTask+0x80>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d021      	beq.n	800c532 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c4f6:	1d3a      	adds	r2, r7, #4
 800c4f8:	f107 0108 	add.w	r1, r7, #8
 800c4fc:	f107 030c 	add.w	r3, r7, #12
 800c500:	4618      	mov	r0, r3
 800c502:	f7fd ff35 	bl	800a370 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c506:	6879      	ldr	r1, [r7, #4]
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	68fa      	ldr	r2, [r7, #12]
 800c50c:	9202      	str	r2, [sp, #8]
 800c50e:	9301      	str	r3, [sp, #4]
 800c510:	2302      	movs	r3, #2
 800c512:	9300      	str	r3, [sp, #0]
 800c514:	2300      	movs	r3, #0
 800c516:	460a      	mov	r2, r1
 800c518:	4910      	ldr	r1, [pc, #64]	; (800c55c <xTimerCreateTimerTask+0x84>)
 800c51a:	4811      	ldr	r0, [pc, #68]	; (800c560 <xTimerCreateTimerTask+0x88>)
 800c51c:	f7fe ffae 	bl	800b47c <xTaskCreateStatic>
 800c520:	4603      	mov	r3, r0
 800c522:	4a10      	ldr	r2, [pc, #64]	; (800c564 <xTimerCreateTimerTask+0x8c>)
 800c524:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c526:	4b0f      	ldr	r3, [pc, #60]	; (800c564 <xTimerCreateTimerTask+0x8c>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d001      	beq.n	800c532 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c52e:	2301      	movs	r3, #1
 800c530:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d10a      	bne.n	800c54e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53c:	f383 8811 	msr	BASEPRI, r3
 800c540:	f3bf 8f6f 	isb	sy
 800c544:	f3bf 8f4f 	dsb	sy
 800c548:	613b      	str	r3, [r7, #16]
}
 800c54a:	bf00      	nop
 800c54c:	e7fe      	b.n	800c54c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c54e:	697b      	ldr	r3, [r7, #20]
}
 800c550:	4618      	mov	r0, r3
 800c552:	3718      	adds	r7, #24
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	200022d0 	.word	0x200022d0
 800c55c:	08011f60 	.word	0x08011f60
 800c560:	0800c69d 	.word	0x0800c69d
 800c564:	200022d4 	.word	0x200022d4

0800c568 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b08a      	sub	sp, #40	; 0x28
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	607a      	str	r2, [r7, #4]
 800c574:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c576:	2300      	movs	r3, #0
 800c578:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d10a      	bne.n	800c596 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	623b      	str	r3, [r7, #32]
}
 800c592:	bf00      	nop
 800c594:	e7fe      	b.n	800c594 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c596:	4b1a      	ldr	r3, [pc, #104]	; (800c600 <xTimerGenericCommand+0x98>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d02a      	beq.n	800c5f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	2b05      	cmp	r3, #5
 800c5ae:	dc18      	bgt.n	800c5e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c5b0:	f7ff fdb4 	bl	800c11c <xTaskGetSchedulerState>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	d109      	bne.n	800c5ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c5ba:	4b11      	ldr	r3, [pc, #68]	; (800c600 <xTimerGenericCommand+0x98>)
 800c5bc:	6818      	ldr	r0, [r3, #0]
 800c5be:	f107 0110 	add.w	r1, r7, #16
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5c6:	f7fe f9ff 	bl	800a9c8 <xQueueGenericSend>
 800c5ca:	6278      	str	r0, [r7, #36]	; 0x24
 800c5cc:	e012      	b.n	800c5f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c5ce:	4b0c      	ldr	r3, [pc, #48]	; (800c600 <xTimerGenericCommand+0x98>)
 800c5d0:	6818      	ldr	r0, [r3, #0]
 800c5d2:	f107 0110 	add.w	r1, r7, #16
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f7fe f9f5 	bl	800a9c8 <xQueueGenericSend>
 800c5de:	6278      	str	r0, [r7, #36]	; 0x24
 800c5e0:	e008      	b.n	800c5f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c5e2:	4b07      	ldr	r3, [pc, #28]	; (800c600 <xTimerGenericCommand+0x98>)
 800c5e4:	6818      	ldr	r0, [r3, #0]
 800c5e6:	f107 0110 	add.w	r1, r7, #16
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	683a      	ldr	r2, [r7, #0]
 800c5ee:	f7fe fae9 	bl	800abc4 <xQueueGenericSendFromISR>
 800c5f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3728      	adds	r7, #40	; 0x28
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	200022d0 	.word	0x200022d0

0800c604 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b088      	sub	sp, #32
 800c608:	af02      	add	r7, sp, #8
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c60e:	4b22      	ldr	r3, [pc, #136]	; (800c698 <prvProcessExpiredTimer+0x94>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	3304      	adds	r3, #4
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7fd ff4b 	bl	800a4b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c628:	f003 0304 	and.w	r3, r3, #4
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d022      	beq.n	800c676 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	699a      	ldr	r2, [r3, #24]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	18d1      	adds	r1, r2, r3
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	683a      	ldr	r2, [r7, #0]
 800c63c:	6978      	ldr	r0, [r7, #20]
 800c63e:	f000 f8d1 	bl	800c7e4 <prvInsertTimerInActiveList>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d01f      	beq.n	800c688 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c648:	2300      	movs	r3, #0
 800c64a:	9300      	str	r3, [sp, #0]
 800c64c:	2300      	movs	r3, #0
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	2100      	movs	r1, #0
 800c652:	6978      	ldr	r0, [r7, #20]
 800c654:	f7ff ff88 	bl	800c568 <xTimerGenericCommand>
 800c658:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d113      	bne.n	800c688 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c664:	f383 8811 	msr	BASEPRI, r3
 800c668:	f3bf 8f6f 	isb	sy
 800c66c:	f3bf 8f4f 	dsb	sy
 800c670:	60fb      	str	r3, [r7, #12]
}
 800c672:	bf00      	nop
 800c674:	e7fe      	b.n	800c674 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c67c:	f023 0301 	bic.w	r3, r3, #1
 800c680:	b2da      	uxtb	r2, r3
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	6a1b      	ldr	r3, [r3, #32]
 800c68c:	6978      	ldr	r0, [r7, #20]
 800c68e:	4798      	blx	r3
}
 800c690:	bf00      	nop
 800c692:	3718      	adds	r7, #24
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	200022c8 	.word	0x200022c8

0800c69c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6a4:	f107 0308 	add.w	r3, r7, #8
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f000 f857 	bl	800c75c <prvGetNextExpireTime>
 800c6ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f000 f803 	bl	800c6c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c6ba:	f000 f8d5 	bl	800c868 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6be:	e7f1      	b.n	800c6a4 <prvTimerTask+0x8>

0800c6c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c6ca:	f7ff f91b 	bl	800b904 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c6ce:	f107 0308 	add.w	r3, r7, #8
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f000 f866 	bl	800c7a4 <prvSampleTimeNow>
 800c6d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d130      	bne.n	800c742 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d10a      	bne.n	800c6fc <prvProcessTimerOrBlockTask+0x3c>
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d806      	bhi.n	800c6fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c6ee:	f7ff f917 	bl	800b920 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c6f2:	68f9      	ldr	r1, [r7, #12]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f7ff ff85 	bl	800c604 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c6fa:	e024      	b.n	800c746 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d008      	beq.n	800c714 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c702:	4b13      	ldr	r3, [pc, #76]	; (800c750 <prvProcessTimerOrBlockTask+0x90>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d101      	bne.n	800c710 <prvProcessTimerOrBlockTask+0x50>
 800c70c:	2301      	movs	r3, #1
 800c70e:	e000      	b.n	800c712 <prvProcessTimerOrBlockTask+0x52>
 800c710:	2300      	movs	r3, #0
 800c712:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c714:	4b0f      	ldr	r3, [pc, #60]	; (800c754 <prvProcessTimerOrBlockTask+0x94>)
 800c716:	6818      	ldr	r0, [r3, #0]
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	1ad3      	subs	r3, r2, r3
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	4619      	mov	r1, r3
 800c722:	f7fe fe77 	bl	800b414 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c726:	f7ff f8fb 	bl	800b920 <xTaskResumeAll>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d10a      	bne.n	800c746 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c730:	4b09      	ldr	r3, [pc, #36]	; (800c758 <prvProcessTimerOrBlockTask+0x98>)
 800c732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c736:	601a      	str	r2, [r3, #0]
 800c738:	f3bf 8f4f 	dsb	sy
 800c73c:	f3bf 8f6f 	isb	sy
}
 800c740:	e001      	b.n	800c746 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c742:	f7ff f8ed 	bl	800b920 <xTaskResumeAll>
}
 800c746:	bf00      	nop
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	200022cc 	.word	0x200022cc
 800c754:	200022d0 	.word	0x200022d0
 800c758:	e000ed04 	.word	0xe000ed04

0800c75c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c75c:	b480      	push	{r7}
 800c75e:	b085      	sub	sp, #20
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c764:	4b0e      	ldr	r3, [pc, #56]	; (800c7a0 <prvGetNextExpireTime+0x44>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d101      	bne.n	800c772 <prvGetNextExpireTime+0x16>
 800c76e:	2201      	movs	r2, #1
 800c770:	e000      	b.n	800c774 <prvGetNextExpireTime+0x18>
 800c772:	2200      	movs	r2, #0
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d105      	bne.n	800c78c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c780:	4b07      	ldr	r3, [pc, #28]	; (800c7a0 <prvGetNextExpireTime+0x44>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	60fb      	str	r3, [r7, #12]
 800c78a:	e001      	b.n	800c790 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c78c:	2300      	movs	r3, #0
 800c78e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c790:	68fb      	ldr	r3, [r7, #12]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3714      	adds	r7, #20
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	200022c8 	.word	0x200022c8

0800c7a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c7ac:	f7ff f956 	bl	800ba5c <xTaskGetTickCount>
 800c7b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c7b2:	4b0b      	ldr	r3, [pc, #44]	; (800c7e0 <prvSampleTimeNow+0x3c>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d205      	bcs.n	800c7c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c7bc:	f000 f936 	bl	800ca2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	601a      	str	r2, [r3, #0]
 800c7c6:	e002      	b.n	800c7ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c7ce:	4a04      	ldr	r2, [pc, #16]	; (800c7e0 <prvSampleTimeNow+0x3c>)
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	200022d8 	.word	0x200022d8

0800c7e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b086      	sub	sp, #24
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	607a      	str	r2, [r7, #4]
 800c7f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	68fa      	ldr	r2, [r7, #12]
 800c800:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c802:	68ba      	ldr	r2, [r7, #8]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	429a      	cmp	r2, r3
 800c808:	d812      	bhi.n	800c830 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	1ad2      	subs	r2, r2, r3
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	699b      	ldr	r3, [r3, #24]
 800c814:	429a      	cmp	r2, r3
 800c816:	d302      	bcc.n	800c81e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c818:	2301      	movs	r3, #1
 800c81a:	617b      	str	r3, [r7, #20]
 800c81c:	e01b      	b.n	800c856 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c81e:	4b10      	ldr	r3, [pc, #64]	; (800c860 <prvInsertTimerInActiveList+0x7c>)
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	3304      	adds	r3, #4
 800c826:	4619      	mov	r1, r3
 800c828:	4610      	mov	r0, r2
 800c82a:	f7fd fe0c 	bl	800a446 <vListInsert>
 800c82e:	e012      	b.n	800c856 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	429a      	cmp	r2, r3
 800c836:	d206      	bcs.n	800c846 <prvInsertTimerInActiveList+0x62>
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d302      	bcc.n	800c846 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c840:	2301      	movs	r3, #1
 800c842:	617b      	str	r3, [r7, #20]
 800c844:	e007      	b.n	800c856 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c846:	4b07      	ldr	r3, [pc, #28]	; (800c864 <prvInsertTimerInActiveList+0x80>)
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	3304      	adds	r3, #4
 800c84e:	4619      	mov	r1, r3
 800c850:	4610      	mov	r0, r2
 800c852:	f7fd fdf8 	bl	800a446 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c856:	697b      	ldr	r3, [r7, #20]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3718      	adds	r7, #24
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	200022cc 	.word	0x200022cc
 800c864:	200022c8 	.word	0x200022c8

0800c868 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b08e      	sub	sp, #56	; 0x38
 800c86c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c86e:	e0ca      	b.n	800ca06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	da18      	bge.n	800c8a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c876:	1d3b      	adds	r3, r7, #4
 800c878:	3304      	adds	r3, #4
 800c87a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d10a      	bne.n	800c898 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c886:	f383 8811 	msr	BASEPRI, r3
 800c88a:	f3bf 8f6f 	isb	sy
 800c88e:	f3bf 8f4f 	dsb	sy
 800c892:	61fb      	str	r3, [r7, #28]
}
 800c894:	bf00      	nop
 800c896:	e7fe      	b.n	800c896 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c89e:	6850      	ldr	r0, [r2, #4]
 800c8a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8a2:	6892      	ldr	r2, [r2, #8]
 800c8a4:	4611      	mov	r1, r2
 800c8a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	f2c0 80aa 	blt.w	800ca04 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b6:	695b      	ldr	r3, [r3, #20]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d004      	beq.n	800c8c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8be:	3304      	adds	r3, #4
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7fd fdf9 	bl	800a4b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c8c6:	463b      	mov	r3, r7
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7ff ff6b 	bl	800c7a4 <prvSampleTimeNow>
 800c8ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b09      	cmp	r3, #9
 800c8d4:	f200 8097 	bhi.w	800ca06 <prvProcessReceivedCommands+0x19e>
 800c8d8:	a201      	add	r2, pc, #4	; (adr r2, 800c8e0 <prvProcessReceivedCommands+0x78>)
 800c8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8de:	bf00      	nop
 800c8e0:	0800c909 	.word	0x0800c909
 800c8e4:	0800c909 	.word	0x0800c909
 800c8e8:	0800c909 	.word	0x0800c909
 800c8ec:	0800c97d 	.word	0x0800c97d
 800c8f0:	0800c991 	.word	0x0800c991
 800c8f4:	0800c9db 	.word	0x0800c9db
 800c8f8:	0800c909 	.word	0x0800c909
 800c8fc:	0800c909 	.word	0x0800c909
 800c900:	0800c97d 	.word	0x0800c97d
 800c904:	0800c991 	.word	0x0800c991
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c90e:	f043 0301 	orr.w	r3, r3, #1
 800c912:	b2da      	uxtb	r2, r3
 800c914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c916:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91e:	699b      	ldr	r3, [r3, #24]
 800c920:	18d1      	adds	r1, r2, r3
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c928:	f7ff ff5c 	bl	800c7e4 <prvInsertTimerInActiveList>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d069      	beq.n	800ca06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c934:	6a1b      	ldr	r3, [r3, #32]
 800c936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c938:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c940:	f003 0304 	and.w	r3, r3, #4
 800c944:	2b00      	cmp	r3, #0
 800c946:	d05e      	beq.n	800ca06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94c:	699b      	ldr	r3, [r3, #24]
 800c94e:	441a      	add	r2, r3
 800c950:	2300      	movs	r3, #0
 800c952:	9300      	str	r3, [sp, #0]
 800c954:	2300      	movs	r3, #0
 800c956:	2100      	movs	r1, #0
 800c958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c95a:	f7ff fe05 	bl	800c568 <xTimerGenericCommand>
 800c95e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c960:	6a3b      	ldr	r3, [r7, #32]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d14f      	bne.n	800ca06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c96a:	f383 8811 	msr	BASEPRI, r3
 800c96e:	f3bf 8f6f 	isb	sy
 800c972:	f3bf 8f4f 	dsb	sy
 800c976:	61bb      	str	r3, [r7, #24]
}
 800c978:	bf00      	nop
 800c97a:	e7fe      	b.n	800c97a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c982:	f023 0301 	bic.w	r3, r3, #1
 800c986:	b2da      	uxtb	r2, r3
 800c988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c98e:	e03a      	b.n	800ca06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c996:	f043 0301 	orr.w	r3, r3, #1
 800c99a:	b2da      	uxtb	r2, r3
 800c99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9aa:	699b      	ldr	r3, [r3, #24]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d10a      	bne.n	800c9c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	617b      	str	r3, [r7, #20]
}
 800c9c2:	bf00      	nop
 800c9c4:	e7fe      	b.n	800c9c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c8:	699a      	ldr	r2, [r3, #24]
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9cc:	18d1      	adds	r1, r2, r3
 800c9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9d4:	f7ff ff06 	bl	800c7e4 <prvInsertTimerInActiveList>
					break;
 800c9d8:	e015      	b.n	800ca06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9e0:	f003 0302 	and.w	r3, r3, #2
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d103      	bne.n	800c9f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c9e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9ea:	f000 fbe1 	bl	800d1b0 <vPortFree>
 800c9ee:	e00a      	b.n	800ca06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9f6:	f023 0301 	bic.w	r3, r3, #1
 800c9fa:	b2da      	uxtb	r2, r3
 800c9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ca02:	e000      	b.n	800ca06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ca04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca06:	4b08      	ldr	r3, [pc, #32]	; (800ca28 <prvProcessReceivedCommands+0x1c0>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	1d39      	adds	r1, r7, #4
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fe f974 	bl	800acfc <xQueueReceive>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	f47f af2a 	bne.w	800c870 <prvProcessReceivedCommands+0x8>
	}
}
 800ca1c:	bf00      	nop
 800ca1e:	bf00      	nop
 800ca20:	3730      	adds	r7, #48	; 0x30
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	200022d0 	.word	0x200022d0

0800ca2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b088      	sub	sp, #32
 800ca30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca32:	e048      	b.n	800cac6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca34:	4b2d      	ldr	r3, [pc, #180]	; (800caec <prvSwitchTimerLists+0xc0>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca3e:	4b2b      	ldr	r3, [pc, #172]	; (800caec <prvSwitchTimerLists+0xc0>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	68db      	ldr	r3, [r3, #12]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	3304      	adds	r3, #4
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7fd fd33 	bl	800a4b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6a1b      	ldr	r3, [r3, #32]
 800ca56:	68f8      	ldr	r0, [r7, #12]
 800ca58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca60:	f003 0304 	and.w	r3, r3, #4
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d02e      	beq.n	800cac6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	699b      	ldr	r3, [r3, #24]
 800ca6c:	693a      	ldr	r2, [r7, #16]
 800ca6e:	4413      	add	r3, r2
 800ca70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d90e      	bls.n	800ca98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	68ba      	ldr	r2, [r7, #8]
 800ca7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	68fa      	ldr	r2, [r7, #12]
 800ca84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca86:	4b19      	ldr	r3, [pc, #100]	; (800caec <prvSwitchTimerLists+0xc0>)
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	3304      	adds	r3, #4
 800ca8e:	4619      	mov	r1, r3
 800ca90:	4610      	mov	r0, r2
 800ca92:	f7fd fcd8 	bl	800a446 <vListInsert>
 800ca96:	e016      	b.n	800cac6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca98:	2300      	movs	r3, #0
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	693a      	ldr	r2, [r7, #16]
 800caa0:	2100      	movs	r1, #0
 800caa2:	68f8      	ldr	r0, [r7, #12]
 800caa4:	f7ff fd60 	bl	800c568 <xTimerGenericCommand>
 800caa8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d10a      	bne.n	800cac6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab4:	f383 8811 	msr	BASEPRI, r3
 800cab8:	f3bf 8f6f 	isb	sy
 800cabc:	f3bf 8f4f 	dsb	sy
 800cac0:	603b      	str	r3, [r7, #0]
}
 800cac2:	bf00      	nop
 800cac4:	e7fe      	b.n	800cac4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cac6:	4b09      	ldr	r3, [pc, #36]	; (800caec <prvSwitchTimerLists+0xc0>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d1b1      	bne.n	800ca34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cad0:	4b06      	ldr	r3, [pc, #24]	; (800caec <prvSwitchTimerLists+0xc0>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cad6:	4b06      	ldr	r3, [pc, #24]	; (800caf0 <prvSwitchTimerLists+0xc4>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a04      	ldr	r2, [pc, #16]	; (800caec <prvSwitchTimerLists+0xc0>)
 800cadc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cade:	4a04      	ldr	r2, [pc, #16]	; (800caf0 <prvSwitchTimerLists+0xc4>)
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	6013      	str	r3, [r2, #0]
}
 800cae4:	bf00      	nop
 800cae6:	3718      	adds	r7, #24
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	200022c8 	.word	0x200022c8
 800caf0:	200022cc 	.word	0x200022cc

0800caf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cafa:	f000 f96b 	bl	800cdd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cafe:	4b15      	ldr	r3, [pc, #84]	; (800cb54 <prvCheckForValidListAndQueue+0x60>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d120      	bne.n	800cb48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cb06:	4814      	ldr	r0, [pc, #80]	; (800cb58 <prvCheckForValidListAndQueue+0x64>)
 800cb08:	f7fd fc4c 	bl	800a3a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cb0c:	4813      	ldr	r0, [pc, #76]	; (800cb5c <prvCheckForValidListAndQueue+0x68>)
 800cb0e:	f7fd fc49 	bl	800a3a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cb12:	4b13      	ldr	r3, [pc, #76]	; (800cb60 <prvCheckForValidListAndQueue+0x6c>)
 800cb14:	4a10      	ldr	r2, [pc, #64]	; (800cb58 <prvCheckForValidListAndQueue+0x64>)
 800cb16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cb18:	4b12      	ldr	r3, [pc, #72]	; (800cb64 <prvCheckForValidListAndQueue+0x70>)
 800cb1a:	4a10      	ldr	r2, [pc, #64]	; (800cb5c <prvCheckForValidListAndQueue+0x68>)
 800cb1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cb1e:	2300      	movs	r3, #0
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	4b11      	ldr	r3, [pc, #68]	; (800cb68 <prvCheckForValidListAndQueue+0x74>)
 800cb24:	4a11      	ldr	r2, [pc, #68]	; (800cb6c <prvCheckForValidListAndQueue+0x78>)
 800cb26:	2110      	movs	r1, #16
 800cb28:	200a      	movs	r0, #10
 800cb2a:	f7fd fd57 	bl	800a5dc <xQueueGenericCreateStatic>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	4a08      	ldr	r2, [pc, #32]	; (800cb54 <prvCheckForValidListAndQueue+0x60>)
 800cb32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cb34:	4b07      	ldr	r3, [pc, #28]	; (800cb54 <prvCheckForValidListAndQueue+0x60>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d005      	beq.n	800cb48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cb3c:	4b05      	ldr	r3, [pc, #20]	; (800cb54 <prvCheckForValidListAndQueue+0x60>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	490b      	ldr	r1, [pc, #44]	; (800cb70 <prvCheckForValidListAndQueue+0x7c>)
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7fe fc12 	bl	800b36c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb48:	f000 f974 	bl	800ce34 <vPortExitCritical>
}
 800cb4c:	bf00      	nop
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	200022d0 	.word	0x200022d0
 800cb58:	200022a0 	.word	0x200022a0
 800cb5c:	200022b4 	.word	0x200022b4
 800cb60:	200022c8 	.word	0x200022c8
 800cb64:	200022cc 	.word	0x200022cc
 800cb68:	2000237c 	.word	0x2000237c
 800cb6c:	200022dc 	.word	0x200022dc
 800cb70:	08011f68 	.word	0x08011f68

0800cb74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb74:	b480      	push	{r7}
 800cb76:	b085      	sub	sp, #20
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	3b04      	subs	r3, #4
 800cb84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	3b04      	subs	r3, #4
 800cb92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	f023 0201 	bic.w	r2, r3, #1
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	3b04      	subs	r3, #4
 800cba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cba4:	4a0c      	ldr	r2, [pc, #48]	; (800cbd8 <pxPortInitialiseStack+0x64>)
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	3b14      	subs	r3, #20
 800cbae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	3b04      	subs	r3, #4
 800cbba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f06f 0202 	mvn.w	r2, #2
 800cbc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	3b20      	subs	r3, #32
 800cbc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cbca:	68fb      	ldr	r3, [r7, #12]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3714      	adds	r7, #20
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr
 800cbd8:	0800cbdd 	.word	0x0800cbdd

0800cbdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b085      	sub	sp, #20
 800cbe0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cbe6:	4b12      	ldr	r3, [pc, #72]	; (800cc30 <prvTaskExitError+0x54>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbee:	d00a      	beq.n	800cc06 <prvTaskExitError+0x2a>
	__asm volatile
 800cbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf4:	f383 8811 	msr	BASEPRI, r3
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	60fb      	str	r3, [r7, #12]
}
 800cc02:	bf00      	nop
 800cc04:	e7fe      	b.n	800cc04 <prvTaskExitError+0x28>
	__asm volatile
 800cc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0a:	f383 8811 	msr	BASEPRI, r3
 800cc0e:	f3bf 8f6f 	isb	sy
 800cc12:	f3bf 8f4f 	dsb	sy
 800cc16:	60bb      	str	r3, [r7, #8]
}
 800cc18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cc1a:	bf00      	nop
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d0fc      	beq.n	800cc1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cc22:	bf00      	nop
 800cc24:	bf00      	nop
 800cc26:	3714      	adds	r7, #20
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr
 800cc30:	20000098 	.word	0x20000098
	...

0800cc40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc40:	4b07      	ldr	r3, [pc, #28]	; (800cc60 <pxCurrentTCBConst2>)
 800cc42:	6819      	ldr	r1, [r3, #0]
 800cc44:	6808      	ldr	r0, [r1, #0]
 800cc46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc4a:	f380 8809 	msr	PSP, r0
 800cc4e:	f3bf 8f6f 	isb	sy
 800cc52:	f04f 0000 	mov.w	r0, #0
 800cc56:	f380 8811 	msr	BASEPRI, r0
 800cc5a:	4770      	bx	lr
 800cc5c:	f3af 8000 	nop.w

0800cc60 <pxCurrentTCBConst2>:
 800cc60:	20001d98 	.word	0x20001d98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc64:	bf00      	nop
 800cc66:	bf00      	nop

0800cc68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cc68:	4808      	ldr	r0, [pc, #32]	; (800cc8c <prvPortStartFirstTask+0x24>)
 800cc6a:	6800      	ldr	r0, [r0, #0]
 800cc6c:	6800      	ldr	r0, [r0, #0]
 800cc6e:	f380 8808 	msr	MSP, r0
 800cc72:	f04f 0000 	mov.w	r0, #0
 800cc76:	f380 8814 	msr	CONTROL, r0
 800cc7a:	b662      	cpsie	i
 800cc7c:	b661      	cpsie	f
 800cc7e:	f3bf 8f4f 	dsb	sy
 800cc82:	f3bf 8f6f 	isb	sy
 800cc86:	df00      	svc	0
 800cc88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc8a:	bf00      	nop
 800cc8c:	e000ed08 	.word	0xe000ed08

0800cc90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b086      	sub	sp, #24
 800cc94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc96:	4b46      	ldr	r3, [pc, #280]	; (800cdb0 <xPortStartScheduler+0x120>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4a46      	ldr	r2, [pc, #280]	; (800cdb4 <xPortStartScheduler+0x124>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d10a      	bne.n	800ccb6 <xPortStartScheduler+0x26>
	__asm volatile
 800cca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca4:	f383 8811 	msr	BASEPRI, r3
 800cca8:	f3bf 8f6f 	isb	sy
 800ccac:	f3bf 8f4f 	dsb	sy
 800ccb0:	613b      	str	r3, [r7, #16]
}
 800ccb2:	bf00      	nop
 800ccb4:	e7fe      	b.n	800ccb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ccb6:	4b3e      	ldr	r3, [pc, #248]	; (800cdb0 <xPortStartScheduler+0x120>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a3f      	ldr	r2, [pc, #252]	; (800cdb8 <xPortStartScheduler+0x128>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d10a      	bne.n	800ccd6 <xPortStartScheduler+0x46>
	__asm volatile
 800ccc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	60fb      	str	r3, [r7, #12]
}
 800ccd2:	bf00      	nop
 800ccd4:	e7fe      	b.n	800ccd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ccd6:	4b39      	ldr	r3, [pc, #228]	; (800cdbc <xPortStartScheduler+0x12c>)
 800ccd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	22ff      	movs	r2, #255	; 0xff
 800cce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ccf0:	78fb      	ldrb	r3, [r7, #3]
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ccf8:	b2da      	uxtb	r2, r3
 800ccfa:	4b31      	ldr	r3, [pc, #196]	; (800cdc0 <xPortStartScheduler+0x130>)
 800ccfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ccfe:	4b31      	ldr	r3, [pc, #196]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd00:	2207      	movs	r2, #7
 800cd02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd04:	e009      	b.n	800cd1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cd06:	4b2f      	ldr	r3, [pc, #188]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	4a2d      	ldr	r2, [pc, #180]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cd10:	78fb      	ldrb	r3, [r7, #3]
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	005b      	lsls	r3, r3, #1
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd1a:	78fb      	ldrb	r3, [r7, #3]
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd22:	2b80      	cmp	r3, #128	; 0x80
 800cd24:	d0ef      	beq.n	800cd06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cd26:	4b27      	ldr	r3, [pc, #156]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f1c3 0307 	rsb	r3, r3, #7
 800cd2e:	2b04      	cmp	r3, #4
 800cd30:	d00a      	beq.n	800cd48 <xPortStartScheduler+0xb8>
	__asm volatile
 800cd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd36:	f383 8811 	msr	BASEPRI, r3
 800cd3a:	f3bf 8f6f 	isb	sy
 800cd3e:	f3bf 8f4f 	dsb	sy
 800cd42:	60bb      	str	r3, [r7, #8]
}
 800cd44:	bf00      	nop
 800cd46:	e7fe      	b.n	800cd46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd48:	4b1e      	ldr	r3, [pc, #120]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	021b      	lsls	r3, r3, #8
 800cd4e:	4a1d      	ldr	r2, [pc, #116]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd52:	4b1c      	ldr	r3, [pc, #112]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cd5a:	4a1a      	ldr	r2, [pc, #104]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	b2da      	uxtb	r2, r3
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd66:	4b18      	ldr	r3, [pc, #96]	; (800cdc8 <xPortStartScheduler+0x138>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a17      	ldr	r2, [pc, #92]	; (800cdc8 <xPortStartScheduler+0x138>)
 800cd6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cd70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cd72:	4b15      	ldr	r3, [pc, #84]	; (800cdc8 <xPortStartScheduler+0x138>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a14      	ldr	r2, [pc, #80]	; (800cdc8 <xPortStartScheduler+0x138>)
 800cd78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cd7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd7e:	f000 f8dd 	bl	800cf3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd82:	4b12      	ldr	r3, [pc, #72]	; (800cdcc <xPortStartScheduler+0x13c>)
 800cd84:	2200      	movs	r2, #0
 800cd86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd88:	f000 f8fc 	bl	800cf84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd8c:	4b10      	ldr	r3, [pc, #64]	; (800cdd0 <xPortStartScheduler+0x140>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a0f      	ldr	r2, [pc, #60]	; (800cdd0 <xPortStartScheduler+0x140>)
 800cd92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd98:	f7ff ff66 	bl	800cc68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd9c:	f7fe ff28 	bl	800bbf0 <vTaskSwitchContext>
	prvTaskExitError();
 800cda0:	f7ff ff1c 	bl	800cbdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3718      	adds	r7, #24
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	e000ed00 	.word	0xe000ed00
 800cdb4:	410fc271 	.word	0x410fc271
 800cdb8:	410fc270 	.word	0x410fc270
 800cdbc:	e000e400 	.word	0xe000e400
 800cdc0:	200023cc 	.word	0x200023cc
 800cdc4:	200023d0 	.word	0x200023d0
 800cdc8:	e000ed20 	.word	0xe000ed20
 800cdcc:	20000098 	.word	0x20000098
 800cdd0:	e000ef34 	.word	0xe000ef34

0800cdd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
	__asm volatile
 800cdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdde:	f383 8811 	msr	BASEPRI, r3
 800cde2:	f3bf 8f6f 	isb	sy
 800cde6:	f3bf 8f4f 	dsb	sy
 800cdea:	607b      	str	r3, [r7, #4]
}
 800cdec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cdee:	4b0f      	ldr	r3, [pc, #60]	; (800ce2c <vPortEnterCritical+0x58>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	4a0d      	ldr	r2, [pc, #52]	; (800ce2c <vPortEnterCritical+0x58>)
 800cdf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cdf8:	4b0c      	ldr	r3, [pc, #48]	; (800ce2c <vPortEnterCritical+0x58>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d10f      	bne.n	800ce20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce00:	4b0b      	ldr	r3, [pc, #44]	; (800ce30 <vPortEnterCritical+0x5c>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00a      	beq.n	800ce20 <vPortEnterCritical+0x4c>
	__asm volatile
 800ce0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0e:	f383 8811 	msr	BASEPRI, r3
 800ce12:	f3bf 8f6f 	isb	sy
 800ce16:	f3bf 8f4f 	dsb	sy
 800ce1a:	603b      	str	r3, [r7, #0]
}
 800ce1c:	bf00      	nop
 800ce1e:	e7fe      	b.n	800ce1e <vPortEnterCritical+0x4a>
	}
}
 800ce20:	bf00      	nop
 800ce22:	370c      	adds	r7, #12
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr
 800ce2c:	20000098 	.word	0x20000098
 800ce30:	e000ed04 	.word	0xe000ed04

0800ce34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce3a:	4b12      	ldr	r3, [pc, #72]	; (800ce84 <vPortExitCritical+0x50>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d10a      	bne.n	800ce58 <vPortExitCritical+0x24>
	__asm volatile
 800ce42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce46:	f383 8811 	msr	BASEPRI, r3
 800ce4a:	f3bf 8f6f 	isb	sy
 800ce4e:	f3bf 8f4f 	dsb	sy
 800ce52:	607b      	str	r3, [r7, #4]
}
 800ce54:	bf00      	nop
 800ce56:	e7fe      	b.n	800ce56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ce58:	4b0a      	ldr	r3, [pc, #40]	; (800ce84 <vPortExitCritical+0x50>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	3b01      	subs	r3, #1
 800ce5e:	4a09      	ldr	r2, [pc, #36]	; (800ce84 <vPortExitCritical+0x50>)
 800ce60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce62:	4b08      	ldr	r3, [pc, #32]	; (800ce84 <vPortExitCritical+0x50>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d105      	bne.n	800ce76 <vPortExitCritical+0x42>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	f383 8811 	msr	BASEPRI, r3
}
 800ce74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce76:	bf00      	nop
 800ce78:	370c      	adds	r7, #12
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	20000098 	.word	0x20000098
	...

0800ce90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce90:	f3ef 8009 	mrs	r0, PSP
 800ce94:	f3bf 8f6f 	isb	sy
 800ce98:	4b15      	ldr	r3, [pc, #84]	; (800cef0 <pxCurrentTCBConst>)
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	f01e 0f10 	tst.w	lr, #16
 800cea0:	bf08      	it	eq
 800cea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceaa:	6010      	str	r0, [r2, #0]
 800ceac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ceb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ceb4:	f380 8811 	msr	BASEPRI, r0
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	f3bf 8f6f 	isb	sy
 800cec0:	f7fe fe96 	bl	800bbf0 <vTaskSwitchContext>
 800cec4:	f04f 0000 	mov.w	r0, #0
 800cec8:	f380 8811 	msr	BASEPRI, r0
 800cecc:	bc09      	pop	{r0, r3}
 800cece:	6819      	ldr	r1, [r3, #0]
 800ced0:	6808      	ldr	r0, [r1, #0]
 800ced2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced6:	f01e 0f10 	tst.w	lr, #16
 800ceda:	bf08      	it	eq
 800cedc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cee0:	f380 8809 	msr	PSP, r0
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	4770      	bx	lr
 800ceea:	bf00      	nop
 800ceec:	f3af 8000 	nop.w

0800cef0 <pxCurrentTCBConst>:
 800cef0:	20001d98 	.word	0x20001d98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cef4:	bf00      	nop
 800cef6:	bf00      	nop

0800cef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
	__asm volatile
 800cefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf02:	f383 8811 	msr	BASEPRI, r3
 800cf06:	f3bf 8f6f 	isb	sy
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	607b      	str	r3, [r7, #4]
}
 800cf10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cf12:	f7fe fdb3 	bl	800ba7c <xTaskIncrementTick>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d003      	beq.n	800cf24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf1c:	4b06      	ldr	r3, [pc, #24]	; (800cf38 <xPortSysTickHandler+0x40>)
 800cf1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf22:	601a      	str	r2, [r3, #0]
 800cf24:	2300      	movs	r3, #0
 800cf26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	f383 8811 	msr	BASEPRI, r3
}
 800cf2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cf30:	bf00      	nop
 800cf32:	3708      	adds	r7, #8
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	e000ed04 	.word	0xe000ed04

0800cf3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf40:	4b0b      	ldr	r3, [pc, #44]	; (800cf70 <vPortSetupTimerInterrupt+0x34>)
 800cf42:	2200      	movs	r2, #0
 800cf44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf46:	4b0b      	ldr	r3, [pc, #44]	; (800cf74 <vPortSetupTimerInterrupt+0x38>)
 800cf48:	2200      	movs	r2, #0
 800cf4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf4c:	4b0a      	ldr	r3, [pc, #40]	; (800cf78 <vPortSetupTimerInterrupt+0x3c>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a0a      	ldr	r2, [pc, #40]	; (800cf7c <vPortSetupTimerInterrupt+0x40>)
 800cf52:	fba2 2303 	umull	r2, r3, r2, r3
 800cf56:	099b      	lsrs	r3, r3, #6
 800cf58:	4a09      	ldr	r2, [pc, #36]	; (800cf80 <vPortSetupTimerInterrupt+0x44>)
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf5e:	4b04      	ldr	r3, [pc, #16]	; (800cf70 <vPortSetupTimerInterrupt+0x34>)
 800cf60:	2207      	movs	r2, #7
 800cf62:	601a      	str	r2, [r3, #0]
}
 800cf64:	bf00      	nop
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop
 800cf70:	e000e010 	.word	0xe000e010
 800cf74:	e000e018 	.word	0xe000e018
 800cf78:	20000000 	.word	0x20000000
 800cf7c:	10624dd3 	.word	0x10624dd3
 800cf80:	e000e014 	.word	0xe000e014

0800cf84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cf94 <vPortEnableVFP+0x10>
 800cf88:	6801      	ldr	r1, [r0, #0]
 800cf8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cf8e:	6001      	str	r1, [r0, #0]
 800cf90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf92:	bf00      	nop
 800cf94:	e000ed88 	.word	0xe000ed88

0800cf98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf98:	b480      	push	{r7}
 800cf9a:	b085      	sub	sp, #20
 800cf9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf9e:	f3ef 8305 	mrs	r3, IPSR
 800cfa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2b0f      	cmp	r3, #15
 800cfa8:	d914      	bls.n	800cfd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cfaa:	4a17      	ldr	r2, [pc, #92]	; (800d008 <vPortValidateInterruptPriority+0x70>)
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	4413      	add	r3, r2
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cfb4:	4b15      	ldr	r3, [pc, #84]	; (800d00c <vPortValidateInterruptPriority+0x74>)
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	7afa      	ldrb	r2, [r7, #11]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d20a      	bcs.n	800cfd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	607b      	str	r3, [r7, #4]
}
 800cfd0:	bf00      	nop
 800cfd2:	e7fe      	b.n	800cfd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cfd4:	4b0e      	ldr	r3, [pc, #56]	; (800d010 <vPortValidateInterruptPriority+0x78>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cfdc:	4b0d      	ldr	r3, [pc, #52]	; (800d014 <vPortValidateInterruptPriority+0x7c>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d90a      	bls.n	800cffa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe8:	f383 8811 	msr	BASEPRI, r3
 800cfec:	f3bf 8f6f 	isb	sy
 800cff0:	f3bf 8f4f 	dsb	sy
 800cff4:	603b      	str	r3, [r7, #0]
}
 800cff6:	bf00      	nop
 800cff8:	e7fe      	b.n	800cff8 <vPortValidateInterruptPriority+0x60>
	}
 800cffa:	bf00      	nop
 800cffc:	3714      	adds	r7, #20
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr
 800d006:	bf00      	nop
 800d008:	e000e3f0 	.word	0xe000e3f0
 800d00c:	200023cc 	.word	0x200023cc
 800d010:	e000ed0c 	.word	0xe000ed0c
 800d014:	200023d0 	.word	0x200023d0

0800d018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b08a      	sub	sp, #40	; 0x28
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d020:	2300      	movs	r3, #0
 800d022:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d024:	f7fe fc6e 	bl	800b904 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d028:	4b5b      	ldr	r3, [pc, #364]	; (800d198 <pvPortMalloc+0x180>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d101      	bne.n	800d034 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d030:	f000 f920 	bl	800d274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d034:	4b59      	ldr	r3, [pc, #356]	; (800d19c <pvPortMalloc+0x184>)
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	4013      	ands	r3, r2
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f040 8093 	bne.w	800d168 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d01d      	beq.n	800d084 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d048:	2208      	movs	r2, #8
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	4413      	add	r3, r2
 800d04e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f003 0307 	and.w	r3, r3, #7
 800d056:	2b00      	cmp	r3, #0
 800d058:	d014      	beq.n	800d084 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f023 0307 	bic.w	r3, r3, #7
 800d060:	3308      	adds	r3, #8
 800d062:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f003 0307 	and.w	r3, r3, #7
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00a      	beq.n	800d084 <pvPortMalloc+0x6c>
	__asm volatile
 800d06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d072:	f383 8811 	msr	BASEPRI, r3
 800d076:	f3bf 8f6f 	isb	sy
 800d07a:	f3bf 8f4f 	dsb	sy
 800d07e:	617b      	str	r3, [r7, #20]
}
 800d080:	bf00      	nop
 800d082:	e7fe      	b.n	800d082 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d06e      	beq.n	800d168 <pvPortMalloc+0x150>
 800d08a:	4b45      	ldr	r3, [pc, #276]	; (800d1a0 <pvPortMalloc+0x188>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	429a      	cmp	r2, r3
 800d092:	d869      	bhi.n	800d168 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d094:	4b43      	ldr	r3, [pc, #268]	; (800d1a4 <pvPortMalloc+0x18c>)
 800d096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d098:	4b42      	ldr	r3, [pc, #264]	; (800d1a4 <pvPortMalloc+0x18c>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d09e:	e004      	b.n	800d0aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d903      	bls.n	800d0bc <pvPortMalloc+0xa4>
 800d0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d1f1      	bne.n	800d0a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d0bc:	4b36      	ldr	r3, [pc, #216]	; (800d198 <pvPortMalloc+0x180>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d050      	beq.n	800d168 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d0c6:	6a3b      	ldr	r3, [r7, #32]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2208      	movs	r2, #8
 800d0cc:	4413      	add	r3, r2
 800d0ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	6a3b      	ldr	r3, [r7, #32]
 800d0d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0da:	685a      	ldr	r2, [r3, #4]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	1ad2      	subs	r2, r2, r3
 800d0e0:	2308      	movs	r3, #8
 800d0e2:	005b      	lsls	r3, r3, #1
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d91f      	bls.n	800d128 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d0e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	f003 0307 	and.w	r3, r3, #7
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d00a      	beq.n	800d110 <pvPortMalloc+0xf8>
	__asm volatile
 800d0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fe:	f383 8811 	msr	BASEPRI, r3
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	f3bf 8f4f 	dsb	sy
 800d10a:	613b      	str	r3, [r7, #16]
}
 800d10c:	bf00      	nop
 800d10e:	e7fe      	b.n	800d10e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d112:	685a      	ldr	r2, [r3, #4]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	1ad2      	subs	r2, r2, r3
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d122:	69b8      	ldr	r0, [r7, #24]
 800d124:	f000 f908 	bl	800d338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d128:	4b1d      	ldr	r3, [pc, #116]	; (800d1a0 <pvPortMalloc+0x188>)
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	1ad3      	subs	r3, r2, r3
 800d132:	4a1b      	ldr	r2, [pc, #108]	; (800d1a0 <pvPortMalloc+0x188>)
 800d134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d136:	4b1a      	ldr	r3, [pc, #104]	; (800d1a0 <pvPortMalloc+0x188>)
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	4b1b      	ldr	r3, [pc, #108]	; (800d1a8 <pvPortMalloc+0x190>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d203      	bcs.n	800d14a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d142:	4b17      	ldr	r3, [pc, #92]	; (800d1a0 <pvPortMalloc+0x188>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a18      	ldr	r2, [pc, #96]	; (800d1a8 <pvPortMalloc+0x190>)
 800d148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14c:	685a      	ldr	r2, [r3, #4]
 800d14e:	4b13      	ldr	r3, [pc, #76]	; (800d19c <pvPortMalloc+0x184>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	431a      	orrs	r2, r3
 800d154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15a:	2200      	movs	r2, #0
 800d15c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d15e:	4b13      	ldr	r3, [pc, #76]	; (800d1ac <pvPortMalloc+0x194>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	3301      	adds	r3, #1
 800d164:	4a11      	ldr	r2, [pc, #68]	; (800d1ac <pvPortMalloc+0x194>)
 800d166:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d168:	f7fe fbda 	bl	800b920 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	f003 0307 	and.w	r3, r3, #7
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00a      	beq.n	800d18c <pvPortMalloc+0x174>
	__asm volatile
 800d176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17a:	f383 8811 	msr	BASEPRI, r3
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f3bf 8f4f 	dsb	sy
 800d186:	60fb      	str	r3, [r7, #12]
}
 800d188:	bf00      	nop
 800d18a:	e7fe      	b.n	800d18a <pvPortMalloc+0x172>
	return pvReturn;
 800d18c:	69fb      	ldr	r3, [r7, #28]
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3728      	adds	r7, #40	; 0x28
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	20005fdc 	.word	0x20005fdc
 800d19c:	20005ff0 	.word	0x20005ff0
 800d1a0:	20005fe0 	.word	0x20005fe0
 800d1a4:	20005fd4 	.word	0x20005fd4
 800d1a8:	20005fe4 	.word	0x20005fe4
 800d1ac:	20005fe8 	.word	0x20005fe8

0800d1b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b086      	sub	sp, #24
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d04d      	beq.n	800d25e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d1c2:	2308      	movs	r3, #8
 800d1c4:	425b      	negs	r3, r3
 800d1c6:	697a      	ldr	r2, [r7, #20]
 800d1c8:	4413      	add	r3, r2
 800d1ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	685a      	ldr	r2, [r3, #4]
 800d1d4:	4b24      	ldr	r3, [pc, #144]	; (800d268 <vPortFree+0xb8>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4013      	ands	r3, r2
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d10a      	bne.n	800d1f4 <vPortFree+0x44>
	__asm volatile
 800d1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e2:	f383 8811 	msr	BASEPRI, r3
 800d1e6:	f3bf 8f6f 	isb	sy
 800d1ea:	f3bf 8f4f 	dsb	sy
 800d1ee:	60fb      	str	r3, [r7, #12]
}
 800d1f0:	bf00      	nop
 800d1f2:	e7fe      	b.n	800d1f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00a      	beq.n	800d212 <vPortFree+0x62>
	__asm volatile
 800d1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d200:	f383 8811 	msr	BASEPRI, r3
 800d204:	f3bf 8f6f 	isb	sy
 800d208:	f3bf 8f4f 	dsb	sy
 800d20c:	60bb      	str	r3, [r7, #8]
}
 800d20e:	bf00      	nop
 800d210:	e7fe      	b.n	800d210 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	685a      	ldr	r2, [r3, #4]
 800d216:	4b14      	ldr	r3, [pc, #80]	; (800d268 <vPortFree+0xb8>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4013      	ands	r3, r2
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d01e      	beq.n	800d25e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d11a      	bne.n	800d25e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	685a      	ldr	r2, [r3, #4]
 800d22c:	4b0e      	ldr	r3, [pc, #56]	; (800d268 <vPortFree+0xb8>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	43db      	mvns	r3, r3
 800d232:	401a      	ands	r2, r3
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d238:	f7fe fb64 	bl	800b904 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	685a      	ldr	r2, [r3, #4]
 800d240:	4b0a      	ldr	r3, [pc, #40]	; (800d26c <vPortFree+0xbc>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4413      	add	r3, r2
 800d246:	4a09      	ldr	r2, [pc, #36]	; (800d26c <vPortFree+0xbc>)
 800d248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d24a:	6938      	ldr	r0, [r7, #16]
 800d24c:	f000 f874 	bl	800d338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d250:	4b07      	ldr	r3, [pc, #28]	; (800d270 <vPortFree+0xc0>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	3301      	adds	r3, #1
 800d256:	4a06      	ldr	r2, [pc, #24]	; (800d270 <vPortFree+0xc0>)
 800d258:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d25a:	f7fe fb61 	bl	800b920 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d25e:	bf00      	nop
 800d260:	3718      	adds	r7, #24
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	20005ff0 	.word	0x20005ff0
 800d26c:	20005fe0 	.word	0x20005fe0
 800d270:	20005fec 	.word	0x20005fec

0800d274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d274:	b480      	push	{r7}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d27a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d27e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d280:	4b27      	ldr	r3, [pc, #156]	; (800d320 <prvHeapInit+0xac>)
 800d282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f003 0307 	and.w	r3, r3, #7
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d00c      	beq.n	800d2a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	3307      	adds	r3, #7
 800d292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f023 0307 	bic.w	r3, r3, #7
 800d29a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d29c:	68ba      	ldr	r2, [r7, #8]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	1ad3      	subs	r3, r2, r3
 800d2a2:	4a1f      	ldr	r2, [pc, #124]	; (800d320 <prvHeapInit+0xac>)
 800d2a4:	4413      	add	r3, r2
 800d2a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d2ac:	4a1d      	ldr	r2, [pc, #116]	; (800d324 <prvHeapInit+0xb0>)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d2b2:	4b1c      	ldr	r3, [pc, #112]	; (800d324 <prvHeapInit+0xb0>)
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	68ba      	ldr	r2, [r7, #8]
 800d2bc:	4413      	add	r3, r2
 800d2be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d2c0:	2208      	movs	r2, #8
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	1a9b      	subs	r3, r3, r2
 800d2c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f023 0307 	bic.w	r3, r3, #7
 800d2ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	4a15      	ldr	r2, [pc, #84]	; (800d328 <prvHeapInit+0xb4>)
 800d2d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d2d6:	4b14      	ldr	r3, [pc, #80]	; (800d328 <prvHeapInit+0xb4>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d2de:	4b12      	ldr	r3, [pc, #72]	; (800d328 <prvHeapInit+0xb4>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	1ad2      	subs	r2, r2, r3
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d2f4:	4b0c      	ldr	r3, [pc, #48]	; (800d328 <prvHeapInit+0xb4>)
 800d2f6:	681a      	ldr	r2, [r3, #0]
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	4a0a      	ldr	r2, [pc, #40]	; (800d32c <prvHeapInit+0xb8>)
 800d302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	4a09      	ldr	r2, [pc, #36]	; (800d330 <prvHeapInit+0xbc>)
 800d30a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d30c:	4b09      	ldr	r3, [pc, #36]	; (800d334 <prvHeapInit+0xc0>)
 800d30e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d312:	601a      	str	r2, [r3, #0]
}
 800d314:	bf00      	nop
 800d316:	3714      	adds	r7, #20
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr
 800d320:	200023d4 	.word	0x200023d4
 800d324:	20005fd4 	.word	0x20005fd4
 800d328:	20005fdc 	.word	0x20005fdc
 800d32c:	20005fe4 	.word	0x20005fe4
 800d330:	20005fe0 	.word	0x20005fe0
 800d334:	20005ff0 	.word	0x20005ff0

0800d338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d338:	b480      	push	{r7}
 800d33a:	b085      	sub	sp, #20
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d340:	4b28      	ldr	r3, [pc, #160]	; (800d3e4 <prvInsertBlockIntoFreeList+0xac>)
 800d342:	60fb      	str	r3, [r7, #12]
 800d344:	e002      	b.n	800d34c <prvInsertBlockIntoFreeList+0x14>
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	60fb      	str	r3, [r7, #12]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	429a      	cmp	r2, r3
 800d354:	d8f7      	bhi.n	800d346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	68ba      	ldr	r2, [r7, #8]
 800d360:	4413      	add	r3, r2
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	429a      	cmp	r2, r3
 800d366:	d108      	bne.n	800d37a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	685a      	ldr	r2, [r3, #4]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	441a      	add	r2, r3
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	68ba      	ldr	r2, [r7, #8]
 800d384:	441a      	add	r2, r3
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d118      	bne.n	800d3c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681a      	ldr	r2, [r3, #0]
 800d392:	4b15      	ldr	r3, [pc, #84]	; (800d3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	429a      	cmp	r2, r3
 800d398:	d00d      	beq.n	800d3b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	685a      	ldr	r2, [r3, #4]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	441a      	add	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	601a      	str	r2, [r3, #0]
 800d3b4:	e008      	b.n	800d3c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d3b6:	4b0c      	ldr	r3, [pc, #48]	; (800d3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	601a      	str	r2, [r3, #0]
 800d3be:	e003      	b.n	800d3c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d002      	beq.n	800d3d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3d6:	bf00      	nop
 800d3d8:	3714      	adds	r7, #20
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr
 800d3e2:	bf00      	nop
 800d3e4:	20005fd4 	.word	0x20005fd4
 800d3e8:	20005fdc 	.word	0x20005fdc

0800d3ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	4912      	ldr	r1, [pc, #72]	; (800d43c <MX_USB_DEVICE_Init+0x50>)
 800d3f4:	4812      	ldr	r0, [pc, #72]	; (800d440 <MX_USB_DEVICE_Init+0x54>)
 800d3f6:	f7fb f969 	bl	80086cc <USBD_Init>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d001      	beq.n	800d404 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d400:	f7f4 fb8a 	bl	8001b18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d404:	490f      	ldr	r1, [pc, #60]	; (800d444 <MX_USB_DEVICE_Init+0x58>)
 800d406:	480e      	ldr	r0, [pc, #56]	; (800d440 <MX_USB_DEVICE_Init+0x54>)
 800d408:	f7fb f990 	bl	800872c <USBD_RegisterClass>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d001      	beq.n	800d416 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d412:	f7f4 fb81 	bl	8001b18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d416:	490c      	ldr	r1, [pc, #48]	; (800d448 <MX_USB_DEVICE_Init+0x5c>)
 800d418:	4809      	ldr	r0, [pc, #36]	; (800d440 <MX_USB_DEVICE_Init+0x54>)
 800d41a:	f7fb f881 	bl	8008520 <USBD_CDC_RegisterInterface>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d001      	beq.n	800d428 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d424:	f7f4 fb78 	bl	8001b18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d428:	4805      	ldr	r0, [pc, #20]	; (800d440 <MX_USB_DEVICE_Init+0x54>)
 800d42a:	f7fb f9b5 	bl	8008798 <USBD_Start>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d001      	beq.n	800d438 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d434:	f7f4 fb70 	bl	8001b18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d438:	bf00      	nop
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	200000b0 	.word	0x200000b0
 800d440:	20005ff4 	.word	0x20005ff4
 800d444:	20000018 	.word	0x20000018
 800d448:	2000009c 	.word	0x2000009c

0800d44c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d450:	2200      	movs	r2, #0
 800d452:	4905      	ldr	r1, [pc, #20]	; (800d468 <CDC_Init_FS+0x1c>)
 800d454:	4805      	ldr	r0, [pc, #20]	; (800d46c <CDC_Init_FS+0x20>)
 800d456:	f7fb f87d 	bl	8008554 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d45a:	4905      	ldr	r1, [pc, #20]	; (800d470 <CDC_Init_FS+0x24>)
 800d45c:	4803      	ldr	r0, [pc, #12]	; (800d46c <CDC_Init_FS+0x20>)
 800d45e:	f7fb f89b 	bl	8008598 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d462:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d464:	4618      	mov	r0, r3
 800d466:	bd80      	pop	{r7, pc}
 800d468:	20006ad0 	.word	0x20006ad0
 800d46c:	20005ff4 	.word	0x20005ff4
 800d470:	200062d0 	.word	0x200062d0

0800d474 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d474:	b480      	push	{r7}
 800d476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d478:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	4603      	mov	r3, r0
 800d48c:	6039      	str	r1, [r7, #0]
 800d48e:	71fb      	strb	r3, [r7, #7]
 800d490:	4613      	mov	r3, r2
 800d492:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d494:	79fb      	ldrb	r3, [r7, #7]
 800d496:	2b23      	cmp	r3, #35	; 0x23
 800d498:	d84a      	bhi.n	800d530 <CDC_Control_FS+0xac>
 800d49a:	a201      	add	r2, pc, #4	; (adr r2, 800d4a0 <CDC_Control_FS+0x1c>)
 800d49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4a0:	0800d531 	.word	0x0800d531
 800d4a4:	0800d531 	.word	0x0800d531
 800d4a8:	0800d531 	.word	0x0800d531
 800d4ac:	0800d531 	.word	0x0800d531
 800d4b0:	0800d531 	.word	0x0800d531
 800d4b4:	0800d531 	.word	0x0800d531
 800d4b8:	0800d531 	.word	0x0800d531
 800d4bc:	0800d531 	.word	0x0800d531
 800d4c0:	0800d531 	.word	0x0800d531
 800d4c4:	0800d531 	.word	0x0800d531
 800d4c8:	0800d531 	.word	0x0800d531
 800d4cc:	0800d531 	.word	0x0800d531
 800d4d0:	0800d531 	.word	0x0800d531
 800d4d4:	0800d531 	.word	0x0800d531
 800d4d8:	0800d531 	.word	0x0800d531
 800d4dc:	0800d531 	.word	0x0800d531
 800d4e0:	0800d531 	.word	0x0800d531
 800d4e4:	0800d531 	.word	0x0800d531
 800d4e8:	0800d531 	.word	0x0800d531
 800d4ec:	0800d531 	.word	0x0800d531
 800d4f0:	0800d531 	.word	0x0800d531
 800d4f4:	0800d531 	.word	0x0800d531
 800d4f8:	0800d531 	.word	0x0800d531
 800d4fc:	0800d531 	.word	0x0800d531
 800d500:	0800d531 	.word	0x0800d531
 800d504:	0800d531 	.word	0x0800d531
 800d508:	0800d531 	.word	0x0800d531
 800d50c:	0800d531 	.word	0x0800d531
 800d510:	0800d531 	.word	0x0800d531
 800d514:	0800d531 	.word	0x0800d531
 800d518:	0800d531 	.word	0x0800d531
 800d51c:	0800d531 	.word	0x0800d531
 800d520:	0800d531 	.word	0x0800d531
 800d524:	0800d531 	.word	0x0800d531
 800d528:	0800d531 	.word	0x0800d531
 800d52c:	0800d531 	.word	0x0800d531
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d530:	bf00      	nop
  }

  return (USBD_OK);
 800d532:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d534:	4618      	mov	r0, r3
 800d536:	370c      	adds	r7, #12
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr

0800d540 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d54a:	6879      	ldr	r1, [r7, #4]
 800d54c:	4805      	ldr	r0, [pc, #20]	; (800d564 <CDC_Receive_FS+0x24>)
 800d54e:	f7fb f823 	bl	8008598 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d552:	4804      	ldr	r0, [pc, #16]	; (800d564 <CDC_Receive_FS+0x24>)
 800d554:	f7fb f884 	bl	8008660 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d558:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3708      	adds	r7, #8
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	20005ff4 	.word	0x20005ff4

0800d568 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b084      	sub	sp, #16
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	460b      	mov	r3, r1
 800d572:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d574:	2300      	movs	r3, #0
 800d576:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d578:	4b0d      	ldr	r3, [pc, #52]	; (800d5b0 <CDC_Transmit_FS+0x48>)
 800d57a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d57e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d586:	2b00      	cmp	r3, #0
 800d588:	d001      	beq.n	800d58e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d58a:	2301      	movs	r3, #1
 800d58c:	e00b      	b.n	800d5a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d58e:	887b      	ldrh	r3, [r7, #2]
 800d590:	461a      	mov	r2, r3
 800d592:	6879      	ldr	r1, [r7, #4]
 800d594:	4806      	ldr	r0, [pc, #24]	; (800d5b0 <CDC_Transmit_FS+0x48>)
 800d596:	f7fa ffdd 	bl	8008554 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d59a:	4805      	ldr	r0, [pc, #20]	; (800d5b0 <CDC_Transmit_FS+0x48>)
 800d59c:	f7fb f81a 	bl	80085d4 <USBD_CDC_TransmitPacket>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3710      	adds	r7, #16
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}
 800d5ae:	bf00      	nop
 800d5b0:	20005ff4 	.word	0x20005ff4

0800d5b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b087      	sub	sp, #28
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	60f8      	str	r0, [r7, #12]
 800d5bc:	60b9      	str	r1, [r7, #8]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d5c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	371c      	adds	r7, #28
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr
	...

0800d5d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b083      	sub	sp, #12
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	4603      	mov	r3, r0
 800d5e0:	6039      	str	r1, [r7, #0]
 800d5e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	2212      	movs	r2, #18
 800d5e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d5ea:	4b03      	ldr	r3, [pc, #12]	; (800d5f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	370c      	adds	r7, #12
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr
 800d5f8:	200000cc 	.word	0x200000cc

0800d5fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	4603      	mov	r3, r0
 800d604:	6039      	str	r1, [r7, #0]
 800d606:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	2204      	movs	r2, #4
 800d60c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d60e:	4b03      	ldr	r3, [pc, #12]	; (800d61c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d610:	4618      	mov	r0, r3
 800d612:	370c      	adds	r7, #12
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr
 800d61c:	200000e0 	.word	0x200000e0

0800d620 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	4603      	mov	r3, r0
 800d628:	6039      	str	r1, [r7, #0]
 800d62a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d62c:	79fb      	ldrb	r3, [r7, #7]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d105      	bne.n	800d63e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d632:	683a      	ldr	r2, [r7, #0]
 800d634:	4907      	ldr	r1, [pc, #28]	; (800d654 <USBD_FS_ProductStrDescriptor+0x34>)
 800d636:	4808      	ldr	r0, [pc, #32]	; (800d658 <USBD_FS_ProductStrDescriptor+0x38>)
 800d638:	f7fc fa5a 	bl	8009af0 <USBD_GetString>
 800d63c:	e004      	b.n	800d648 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d63e:	683a      	ldr	r2, [r7, #0]
 800d640:	4904      	ldr	r1, [pc, #16]	; (800d654 <USBD_FS_ProductStrDescriptor+0x34>)
 800d642:	4805      	ldr	r0, [pc, #20]	; (800d658 <USBD_FS_ProductStrDescriptor+0x38>)
 800d644:	f7fc fa54 	bl	8009af0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d648:	4b02      	ldr	r3, [pc, #8]	; (800d654 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3708      	adds	r7, #8
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
 800d652:	bf00      	nop
 800d654:	200072d0 	.word	0x200072d0
 800d658:	08011f70 	.word	0x08011f70

0800d65c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	4603      	mov	r3, r0
 800d664:	6039      	str	r1, [r7, #0]
 800d666:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d668:	683a      	ldr	r2, [r7, #0]
 800d66a:	4904      	ldr	r1, [pc, #16]	; (800d67c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d66c:	4804      	ldr	r0, [pc, #16]	; (800d680 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d66e:	f7fc fa3f 	bl	8009af0 <USBD_GetString>
  return USBD_StrDesc;
 800d672:	4b02      	ldr	r3, [pc, #8]	; (800d67c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d674:	4618      	mov	r0, r3
 800d676:	3708      	adds	r7, #8
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	200072d0 	.word	0x200072d0
 800d680:	08011f88 	.word	0x08011f88

0800d684 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b082      	sub	sp, #8
 800d688:	af00      	add	r7, sp, #0
 800d68a:	4603      	mov	r3, r0
 800d68c:	6039      	str	r1, [r7, #0]
 800d68e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	221a      	movs	r2, #26
 800d694:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d696:	f000 f843 	bl	800d720 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d69a:	4b02      	ldr	r3, [pc, #8]	; (800d6a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	200000e4 	.word	0x200000e4

0800d6a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	6039      	str	r1, [r7, #0]
 800d6b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d6b4:	79fb      	ldrb	r3, [r7, #7]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d105      	bne.n	800d6c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d6ba:	683a      	ldr	r2, [r7, #0]
 800d6bc:	4907      	ldr	r1, [pc, #28]	; (800d6dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d6be:	4808      	ldr	r0, [pc, #32]	; (800d6e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d6c0:	f7fc fa16 	bl	8009af0 <USBD_GetString>
 800d6c4:	e004      	b.n	800d6d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d6c6:	683a      	ldr	r2, [r7, #0]
 800d6c8:	4904      	ldr	r1, [pc, #16]	; (800d6dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d6ca:	4805      	ldr	r0, [pc, #20]	; (800d6e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d6cc:	f7fc fa10 	bl	8009af0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6d0:	4b02      	ldr	r3, [pc, #8]	; (800d6dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3708      	adds	r7, #8
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	200072d0 	.word	0x200072d0
 800d6e0:	08011f9c 	.word	0x08011f9c

0800d6e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	6039      	str	r1, [r7, #0]
 800d6ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d6f0:	79fb      	ldrb	r3, [r7, #7]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d105      	bne.n	800d702 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d6f6:	683a      	ldr	r2, [r7, #0]
 800d6f8:	4907      	ldr	r1, [pc, #28]	; (800d718 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d6fa:	4808      	ldr	r0, [pc, #32]	; (800d71c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d6fc:	f7fc f9f8 	bl	8009af0 <USBD_GetString>
 800d700:	e004      	b.n	800d70c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d702:	683a      	ldr	r2, [r7, #0]
 800d704:	4904      	ldr	r1, [pc, #16]	; (800d718 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d706:	4805      	ldr	r0, [pc, #20]	; (800d71c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d708:	f7fc f9f2 	bl	8009af0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d70c:	4b02      	ldr	r3, [pc, #8]	; (800d718 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3708      	adds	r7, #8
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	200072d0 	.word	0x200072d0
 800d71c:	08011fa8 	.word	0x08011fa8

0800d720 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d726:	4b0f      	ldr	r3, [pc, #60]	; (800d764 <Get_SerialNum+0x44>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d72c:	4b0e      	ldr	r3, [pc, #56]	; (800d768 <Get_SerialNum+0x48>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d732:	4b0e      	ldr	r3, [pc, #56]	; (800d76c <Get_SerialNum+0x4c>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d738:	68fa      	ldr	r2, [r7, #12]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	4413      	add	r3, r2
 800d73e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d009      	beq.n	800d75a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d746:	2208      	movs	r2, #8
 800d748:	4909      	ldr	r1, [pc, #36]	; (800d770 <Get_SerialNum+0x50>)
 800d74a:	68f8      	ldr	r0, [r7, #12]
 800d74c:	f000 f814 	bl	800d778 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d750:	2204      	movs	r2, #4
 800d752:	4908      	ldr	r1, [pc, #32]	; (800d774 <Get_SerialNum+0x54>)
 800d754:	68b8      	ldr	r0, [r7, #8]
 800d756:	f000 f80f 	bl	800d778 <IntToUnicode>
  }
}
 800d75a:	bf00      	nop
 800d75c:	3710      	adds	r7, #16
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	1fff7a10 	.word	0x1fff7a10
 800d768:	1fff7a14 	.word	0x1fff7a14
 800d76c:	1fff7a18 	.word	0x1fff7a18
 800d770:	200000e6 	.word	0x200000e6
 800d774:	200000f6 	.word	0x200000f6

0800d778 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d778:	b480      	push	{r7}
 800d77a:	b087      	sub	sp, #28
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	4613      	mov	r3, r2
 800d784:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d786:	2300      	movs	r3, #0
 800d788:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d78a:	2300      	movs	r3, #0
 800d78c:	75fb      	strb	r3, [r7, #23]
 800d78e:	e027      	b.n	800d7e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	0f1b      	lsrs	r3, r3, #28
 800d794:	2b09      	cmp	r3, #9
 800d796:	d80b      	bhi.n	800d7b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	0f1b      	lsrs	r3, r3, #28
 800d79c:	b2da      	uxtb	r2, r3
 800d79e:	7dfb      	ldrb	r3, [r7, #23]
 800d7a0:	005b      	lsls	r3, r3, #1
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	440b      	add	r3, r1
 800d7a8:	3230      	adds	r2, #48	; 0x30
 800d7aa:	b2d2      	uxtb	r2, r2
 800d7ac:	701a      	strb	r2, [r3, #0]
 800d7ae:	e00a      	b.n	800d7c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	0f1b      	lsrs	r3, r3, #28
 800d7b4:	b2da      	uxtb	r2, r3
 800d7b6:	7dfb      	ldrb	r3, [r7, #23]
 800d7b8:	005b      	lsls	r3, r3, #1
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	440b      	add	r3, r1
 800d7c0:	3237      	adds	r2, #55	; 0x37
 800d7c2:	b2d2      	uxtb	r2, r2
 800d7c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	011b      	lsls	r3, r3, #4
 800d7ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d7cc:	7dfb      	ldrb	r3, [r7, #23]
 800d7ce:	005b      	lsls	r3, r3, #1
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	68ba      	ldr	r2, [r7, #8]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d7da:	7dfb      	ldrb	r3, [r7, #23]
 800d7dc:	3301      	adds	r3, #1
 800d7de:	75fb      	strb	r3, [r7, #23]
 800d7e0:	7dfa      	ldrb	r2, [r7, #23]
 800d7e2:	79fb      	ldrb	r3, [r7, #7]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d3d3      	bcc.n	800d790 <IntToUnicode+0x18>
  }
}
 800d7e8:	bf00      	nop
 800d7ea:	bf00      	nop
 800d7ec:	371c      	adds	r7, #28
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr
	...

0800d7f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b08a      	sub	sp, #40	; 0x28
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d800:	f107 0314 	add.w	r3, r7, #20
 800d804:	2200      	movs	r2, #0
 800d806:	601a      	str	r2, [r3, #0]
 800d808:	605a      	str	r2, [r3, #4]
 800d80a:	609a      	str	r2, [r3, #8]
 800d80c:	60da      	str	r2, [r3, #12]
 800d80e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d818:	d13a      	bne.n	800d890 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d81a:	2300      	movs	r3, #0
 800d81c:	613b      	str	r3, [r7, #16]
 800d81e:	4b1e      	ldr	r3, [pc, #120]	; (800d898 <HAL_PCD_MspInit+0xa0>)
 800d820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d822:	4a1d      	ldr	r2, [pc, #116]	; (800d898 <HAL_PCD_MspInit+0xa0>)
 800d824:	f043 0301 	orr.w	r3, r3, #1
 800d828:	6313      	str	r3, [r2, #48]	; 0x30
 800d82a:	4b1b      	ldr	r3, [pc, #108]	; (800d898 <HAL_PCD_MspInit+0xa0>)
 800d82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d82e:	f003 0301 	and.w	r3, r3, #1
 800d832:	613b      	str	r3, [r7, #16]
 800d834:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d836:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d83a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d83c:	2302      	movs	r3, #2
 800d83e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d840:	2300      	movs	r3, #0
 800d842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d844:	2303      	movs	r3, #3
 800d846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d848:	230a      	movs	r3, #10
 800d84a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d84c:	f107 0314 	add.w	r3, r7, #20
 800d850:	4619      	mov	r1, r3
 800d852:	4812      	ldr	r0, [pc, #72]	; (800d89c <HAL_PCD_MspInit+0xa4>)
 800d854:	f7f5 f940 	bl	8002ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d858:	4b0f      	ldr	r3, [pc, #60]	; (800d898 <HAL_PCD_MspInit+0xa0>)
 800d85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d85c:	4a0e      	ldr	r2, [pc, #56]	; (800d898 <HAL_PCD_MspInit+0xa0>)
 800d85e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d862:	6353      	str	r3, [r2, #52]	; 0x34
 800d864:	2300      	movs	r3, #0
 800d866:	60fb      	str	r3, [r7, #12]
 800d868:	4b0b      	ldr	r3, [pc, #44]	; (800d898 <HAL_PCD_MspInit+0xa0>)
 800d86a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d86c:	4a0a      	ldr	r2, [pc, #40]	; (800d898 <HAL_PCD_MspInit+0xa0>)
 800d86e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d872:	6453      	str	r3, [r2, #68]	; 0x44
 800d874:	4b08      	ldr	r3, [pc, #32]	; (800d898 <HAL_PCD_MspInit+0xa0>)
 800d876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d87c:	60fb      	str	r3, [r7, #12]
 800d87e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d880:	2200      	movs	r2, #0
 800d882:	2105      	movs	r1, #5
 800d884:	2043      	movs	r0, #67	; 0x43
 800d886:	f7f4 fd8d 	bl	80023a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d88a:	2043      	movs	r0, #67	; 0x43
 800d88c:	f7f4 fda6 	bl	80023dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d890:	bf00      	nop
 800d892:	3728      	adds	r7, #40	; 0x28
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	40023800 	.word	0x40023800
 800d89c:	40020000 	.word	0x40020000

0800d8a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	4610      	mov	r0, r2
 800d8b8:	f7fa ffbb 	bl	8008832 <USBD_LL_SetupStage>
}
 800d8bc:	bf00      	nop
 800d8be:	3708      	adds	r7, #8
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d8d6:	78fa      	ldrb	r2, [r7, #3]
 800d8d8:	6879      	ldr	r1, [r7, #4]
 800d8da:	4613      	mov	r3, r2
 800d8dc:	00db      	lsls	r3, r3, #3
 800d8de:	4413      	add	r3, r2
 800d8e0:	009b      	lsls	r3, r3, #2
 800d8e2:	440b      	add	r3, r1
 800d8e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	78fb      	ldrb	r3, [r7, #3]
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	f7fa fff5 	bl	80088dc <USBD_LL_DataOutStage>
}
 800d8f2:	bf00      	nop
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}

0800d8fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b082      	sub	sp, #8
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]
 800d902:	460b      	mov	r3, r1
 800d904:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d90c:	78fa      	ldrb	r2, [r7, #3]
 800d90e:	6879      	ldr	r1, [r7, #4]
 800d910:	4613      	mov	r3, r2
 800d912:	00db      	lsls	r3, r3, #3
 800d914:	4413      	add	r3, r2
 800d916:	009b      	lsls	r3, r3, #2
 800d918:	440b      	add	r3, r1
 800d91a:	334c      	adds	r3, #76	; 0x4c
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	78fb      	ldrb	r3, [r7, #3]
 800d920:	4619      	mov	r1, r3
 800d922:	f7fb f88e 	bl	8008a42 <USBD_LL_DataInStage>
}
 800d926:	bf00      	nop
 800d928:	3708      	adds	r7, #8
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}

0800d92e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d92e:	b580      	push	{r7, lr}
 800d930:	b082      	sub	sp, #8
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7fb f9c2 	bl	8008cc6 <USBD_LL_SOF>
}
 800d942:	bf00      	nop
 800d944:	3708      	adds	r7, #8
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}

0800d94a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d94a:	b580      	push	{r7, lr}
 800d94c:	b084      	sub	sp, #16
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d952:	2301      	movs	r3, #1
 800d954:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	68db      	ldr	r3, [r3, #12]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d102      	bne.n	800d964 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d95e:	2300      	movs	r3, #0
 800d960:	73fb      	strb	r3, [r7, #15]
 800d962:	e008      	b.n	800d976 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	2b02      	cmp	r3, #2
 800d96a:	d102      	bne.n	800d972 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d96c:	2301      	movs	r3, #1
 800d96e:	73fb      	strb	r3, [r7, #15]
 800d970:	e001      	b.n	800d976 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d972:	f7f4 f8d1 	bl	8001b18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d97c:	7bfa      	ldrb	r2, [r7, #15]
 800d97e:	4611      	mov	r1, r2
 800d980:	4618      	mov	r0, r3
 800d982:	f7fb f962 	bl	8008c4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7fb f90a 	bl	8008ba6 <USBD_LL_Reset>
}
 800d992:	bf00      	nop
 800d994:	3710      	adds	r7, #16
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
	...

0800d99c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f7fb f95d 	bl	8008c6a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	687a      	ldr	r2, [r7, #4]
 800d9bc:	6812      	ldr	r2, [r2, #0]
 800d9be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d9c2:	f043 0301 	orr.w	r3, r3, #1
 800d9c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6a1b      	ldr	r3, [r3, #32]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d005      	beq.n	800d9dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9d0:	4b04      	ldr	r3, [pc, #16]	; (800d9e4 <HAL_PCD_SuspendCallback+0x48>)
 800d9d2:	691b      	ldr	r3, [r3, #16]
 800d9d4:	4a03      	ldr	r2, [pc, #12]	; (800d9e4 <HAL_PCD_SuspendCallback+0x48>)
 800d9d6:	f043 0306 	orr.w	r3, r3, #6
 800d9da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d9dc:	bf00      	nop
 800d9de:	3708      	adds	r7, #8
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	e000ed00 	.word	0xe000ed00

0800d9e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7fb f94d 	bl	8008c96 <USBD_LL_Resume>
}
 800d9fc:	bf00      	nop
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b082      	sub	sp, #8
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	460b      	mov	r3, r1
 800da0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da16:	78fa      	ldrb	r2, [r7, #3]
 800da18:	4611      	mov	r1, r2
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fb f9a5 	bl	8008d6a <USBD_LL_IsoOUTIncomplete>
}
 800da20:	bf00      	nop
 800da22:	3708      	adds	r7, #8
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	460b      	mov	r3, r1
 800da32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da3a:	78fa      	ldrb	r2, [r7, #3]
 800da3c:	4611      	mov	r1, r2
 800da3e:	4618      	mov	r0, r3
 800da40:	f7fb f961 	bl	8008d06 <USBD_LL_IsoINIncomplete>
}
 800da44:	bf00      	nop
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b082      	sub	sp, #8
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7fb f9b7 	bl	8008dce <USBD_LL_DevConnected>
}
 800da60:	bf00      	nop
 800da62:	3708      	adds	r7, #8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da76:	4618      	mov	r0, r3
 800da78:	f7fb f9b4 	bl	8008de4 <USBD_LL_DevDisconnected>
}
 800da7c:	bf00      	nop
 800da7e:	3708      	adds	r7, #8
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d13c      	bne.n	800db0e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800da94:	4a20      	ldr	r2, [pc, #128]	; (800db18 <USBD_LL_Init+0x94>)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	4a1e      	ldr	r2, [pc, #120]	; (800db18 <USBD_LL_Init+0x94>)
 800daa0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800daa4:	4b1c      	ldr	r3, [pc, #112]	; (800db18 <USBD_LL_Init+0x94>)
 800daa6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800daaa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800daac:	4b1a      	ldr	r3, [pc, #104]	; (800db18 <USBD_LL_Init+0x94>)
 800daae:	2204      	movs	r2, #4
 800dab0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dab2:	4b19      	ldr	r3, [pc, #100]	; (800db18 <USBD_LL_Init+0x94>)
 800dab4:	2202      	movs	r2, #2
 800dab6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dab8:	4b17      	ldr	r3, [pc, #92]	; (800db18 <USBD_LL_Init+0x94>)
 800daba:	2200      	movs	r2, #0
 800dabc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dabe:	4b16      	ldr	r3, [pc, #88]	; (800db18 <USBD_LL_Init+0x94>)
 800dac0:	2202      	movs	r2, #2
 800dac2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dac4:	4b14      	ldr	r3, [pc, #80]	; (800db18 <USBD_LL_Init+0x94>)
 800dac6:	2200      	movs	r2, #0
 800dac8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800daca:	4b13      	ldr	r3, [pc, #76]	; (800db18 <USBD_LL_Init+0x94>)
 800dacc:	2200      	movs	r2, #0
 800dace:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dad0:	4b11      	ldr	r3, [pc, #68]	; (800db18 <USBD_LL_Init+0x94>)
 800dad2:	2200      	movs	r2, #0
 800dad4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dad6:	4b10      	ldr	r3, [pc, #64]	; (800db18 <USBD_LL_Init+0x94>)
 800dad8:	2200      	movs	r2, #0
 800dada:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dadc:	4b0e      	ldr	r3, [pc, #56]	; (800db18 <USBD_LL_Init+0x94>)
 800dade:	2200      	movs	r2, #0
 800dae0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dae2:	480d      	ldr	r0, [pc, #52]	; (800db18 <USBD_LL_Init+0x94>)
 800dae4:	f7f5 f9eb 	bl	8002ebe <HAL_PCD_Init>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d001      	beq.n	800daf2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800daee:	f7f4 f813 	bl	8001b18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800daf2:	2180      	movs	r1, #128	; 0x80
 800daf4:	4808      	ldr	r0, [pc, #32]	; (800db18 <USBD_LL_Init+0x94>)
 800daf6:	f7f6 fc42 	bl	800437e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dafa:	2240      	movs	r2, #64	; 0x40
 800dafc:	2100      	movs	r1, #0
 800dafe:	4806      	ldr	r0, [pc, #24]	; (800db18 <USBD_LL_Init+0x94>)
 800db00:	f7f6 fbf6 	bl	80042f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800db04:	2280      	movs	r2, #128	; 0x80
 800db06:	2101      	movs	r1, #1
 800db08:	4803      	ldr	r0, [pc, #12]	; (800db18 <USBD_LL_Init+0x94>)
 800db0a:	f7f6 fbf1 	bl	80042f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800db0e:	2300      	movs	r3, #0
}
 800db10:	4618      	mov	r0, r3
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	200074d0 	.word	0x200074d0

0800db1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db24:	2300      	movs	r3, #0
 800db26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db28:	2300      	movs	r3, #0
 800db2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db32:	4618      	mov	r0, r3
 800db34:	f7f5 fae0 	bl	80030f8 <HAL_PCD_Start>
 800db38:	4603      	mov	r3, r0
 800db3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db3c:	7bfb      	ldrb	r3, [r7, #15]
 800db3e:	4618      	mov	r0, r3
 800db40:	f000 f942 	bl	800ddc8 <USBD_Get_USB_Status>
 800db44:	4603      	mov	r3, r0
 800db46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db48:	7bbb      	ldrb	r3, [r7, #14]
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3710      	adds	r7, #16
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}

0800db52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800db52:	b580      	push	{r7, lr}
 800db54:	b084      	sub	sp, #16
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
 800db5a:	4608      	mov	r0, r1
 800db5c:	4611      	mov	r1, r2
 800db5e:	461a      	mov	r2, r3
 800db60:	4603      	mov	r3, r0
 800db62:	70fb      	strb	r3, [r7, #3]
 800db64:	460b      	mov	r3, r1
 800db66:	70bb      	strb	r3, [r7, #2]
 800db68:	4613      	mov	r3, r2
 800db6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db6c:	2300      	movs	r3, #0
 800db6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db70:	2300      	movs	r3, #0
 800db72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800db7a:	78bb      	ldrb	r3, [r7, #2]
 800db7c:	883a      	ldrh	r2, [r7, #0]
 800db7e:	78f9      	ldrb	r1, [r7, #3]
 800db80:	f7f5 ffb1 	bl	8003ae6 <HAL_PCD_EP_Open>
 800db84:	4603      	mov	r3, r0
 800db86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db88:	7bfb      	ldrb	r3, [r7, #15]
 800db8a:	4618      	mov	r0, r3
 800db8c:	f000 f91c 	bl	800ddc8 <USBD_Get_USB_Status>
 800db90:	4603      	mov	r3, r0
 800db92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db94:	7bbb      	ldrb	r3, [r7, #14]
}
 800db96:	4618      	mov	r0, r3
 800db98:	3710      	adds	r7, #16
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b084      	sub	sp, #16
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
 800dba6:	460b      	mov	r3, r1
 800dba8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dbb8:	78fa      	ldrb	r2, [r7, #3]
 800dbba:	4611      	mov	r1, r2
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f7f5 fffa 	bl	8003bb6 <HAL_PCD_EP_Close>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbc6:	7bfb      	ldrb	r3, [r7, #15]
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f000 f8fd 	bl	800ddc8 <USBD_Get_USB_Status>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3710      	adds	r7, #16
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbec:	2300      	movs	r3, #0
 800dbee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dbf6:	78fa      	ldrb	r2, [r7, #3]
 800dbf8:	4611      	mov	r1, r2
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7f6 f8d2 	bl	8003da4 <HAL_PCD_EP_SetStall>
 800dc00:	4603      	mov	r3, r0
 800dc02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc04:	7bfb      	ldrb	r3, [r7, #15]
 800dc06:	4618      	mov	r0, r3
 800dc08:	f000 f8de 	bl	800ddc8 <USBD_Get_USB_Status>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc10:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3710      	adds	r7, #16
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}

0800dc1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b084      	sub	sp, #16
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
 800dc22:	460b      	mov	r3, r1
 800dc24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc26:	2300      	movs	r3, #0
 800dc28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dc34:	78fa      	ldrb	r2, [r7, #3]
 800dc36:	4611      	mov	r1, r2
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7f6 f917 	bl	8003e6c <HAL_PCD_EP_ClrStall>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc42:	7bfb      	ldrb	r3, [r7, #15]
 800dc44:	4618      	mov	r0, r3
 800dc46:	f000 f8bf 	bl	800ddc8 <USBD_Get_USB_Status>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b085      	sub	sp, #20
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	460b      	mov	r3, r1
 800dc62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dc6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dc6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	da0b      	bge.n	800dc8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dc74:	78fb      	ldrb	r3, [r7, #3]
 800dc76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc7a:	68f9      	ldr	r1, [r7, #12]
 800dc7c:	4613      	mov	r3, r2
 800dc7e:	00db      	lsls	r3, r3, #3
 800dc80:	4413      	add	r3, r2
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	440b      	add	r3, r1
 800dc86:	333e      	adds	r3, #62	; 0x3e
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	e00b      	b.n	800dca4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dc8c:	78fb      	ldrb	r3, [r7, #3]
 800dc8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc92:	68f9      	ldr	r1, [r7, #12]
 800dc94:	4613      	mov	r3, r2
 800dc96:	00db      	lsls	r3, r3, #3
 800dc98:	4413      	add	r3, r2
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	440b      	add	r3, r1
 800dc9e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800dca2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3714      	adds	r7, #20
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	460b      	mov	r3, r1
 800dcba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dcca:	78fa      	ldrb	r2, [r7, #3]
 800dccc:	4611      	mov	r1, r2
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7f5 fee4 	bl	8003a9c <HAL_PCD_SetAddress>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcd8:	7bfb      	ldrb	r3, [r7, #15]
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f000 f874 	bl	800ddc8 <USBD_Get_USB_Status>
 800dce0:	4603      	mov	r3, r0
 800dce2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dce4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3710      	adds	r7, #16
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}

0800dcee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dcee:	b580      	push	{r7, lr}
 800dcf0:	b086      	sub	sp, #24
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	60f8      	str	r0, [r7, #12]
 800dcf6:	607a      	str	r2, [r7, #4]
 800dcf8:	603b      	str	r3, [r7, #0]
 800dcfa:	460b      	mov	r3, r1
 800dcfc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd02:	2300      	movs	r3, #0
 800dd04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dd0c:	7af9      	ldrb	r1, [r7, #11]
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	687a      	ldr	r2, [r7, #4]
 800dd12:	f7f5 fffd 	bl	8003d10 <HAL_PCD_EP_Transmit>
 800dd16:	4603      	mov	r3, r0
 800dd18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd1a:	7dfb      	ldrb	r3, [r7, #23]
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f000 f853 	bl	800ddc8 <USBD_Get_USB_Status>
 800dd22:	4603      	mov	r3, r0
 800dd24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd26:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3718      	adds	r7, #24
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b086      	sub	sp, #24
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	607a      	str	r2, [r7, #4]
 800dd3a:	603b      	str	r3, [r7, #0]
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd40:	2300      	movs	r3, #0
 800dd42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd44:	2300      	movs	r3, #0
 800dd46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dd4e:	7af9      	ldrb	r1, [r7, #11]
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	f7f5 ff79 	bl	8003c4a <HAL_PCD_EP_Receive>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd5c:	7dfb      	ldrb	r3, [r7, #23]
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f000 f832 	bl	800ddc8 <USBD_Get_USB_Status>
 800dd64:	4603      	mov	r3, r0
 800dd66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd68:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3718      	adds	r7, #24
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b082      	sub	sp, #8
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd84:	78fa      	ldrb	r2, [r7, #3]
 800dd86:	4611      	mov	r1, r2
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7f5 ffa9 	bl	8003ce0 <HAL_PCD_EP_GetRxCount>
 800dd8e:	4603      	mov	r3, r0
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dda0:	4b03      	ldr	r3, [pc, #12]	; (800ddb0 <USBD_static_malloc+0x18>)
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	370c      	adds	r7, #12
 800dda6:	46bd      	mov	sp, r7
 800dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop
 800ddb0:	200079dc 	.word	0x200079dc

0800ddb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]

}
 800ddbc:	bf00      	nop
 800ddbe:	370c      	adds	r7, #12
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b085      	sub	sp, #20
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	4603      	mov	r3, r0
 800ddd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ddd6:	79fb      	ldrb	r3, [r7, #7]
 800ddd8:	2b03      	cmp	r3, #3
 800ddda:	d817      	bhi.n	800de0c <USBD_Get_USB_Status+0x44>
 800dddc:	a201      	add	r2, pc, #4	; (adr r2, 800dde4 <USBD_Get_USB_Status+0x1c>)
 800ddde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde2:	bf00      	nop
 800dde4:	0800ddf5 	.word	0x0800ddf5
 800dde8:	0800ddfb 	.word	0x0800ddfb
 800ddec:	0800de01 	.word	0x0800de01
 800ddf0:	0800de07 	.word	0x0800de07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ddf8:	e00b      	b.n	800de12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ddfa:	2303      	movs	r3, #3
 800ddfc:	73fb      	strb	r3, [r7, #15]
    break;
 800ddfe:	e008      	b.n	800de12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de00:	2301      	movs	r3, #1
 800de02:	73fb      	strb	r3, [r7, #15]
    break;
 800de04:	e005      	b.n	800de12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de06:	2303      	movs	r3, #3
 800de08:	73fb      	strb	r3, [r7, #15]
    break;
 800de0a:	e002      	b.n	800de12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800de0c:	2303      	movs	r3, #3
 800de0e:	73fb      	strb	r3, [r7, #15]
    break;
 800de10:	bf00      	nop
  }
  return usb_status;
 800de12:	7bfb      	ldrb	r3, [r7, #15]
}
 800de14:	4618      	mov	r0, r3
 800de16:	3714      	adds	r7, #20
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <__errno>:
 800de20:	4b01      	ldr	r3, [pc, #4]	; (800de28 <__errno+0x8>)
 800de22:	6818      	ldr	r0, [r3, #0]
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop
 800de28:	20000100 	.word	0x20000100

0800de2c <__libc_init_array>:
 800de2c:	b570      	push	{r4, r5, r6, lr}
 800de2e:	4d0d      	ldr	r5, [pc, #52]	; (800de64 <__libc_init_array+0x38>)
 800de30:	4c0d      	ldr	r4, [pc, #52]	; (800de68 <__libc_init_array+0x3c>)
 800de32:	1b64      	subs	r4, r4, r5
 800de34:	10a4      	asrs	r4, r4, #2
 800de36:	2600      	movs	r6, #0
 800de38:	42a6      	cmp	r6, r4
 800de3a:	d109      	bne.n	800de50 <__libc_init_array+0x24>
 800de3c:	4d0b      	ldr	r5, [pc, #44]	; (800de6c <__libc_init_array+0x40>)
 800de3e:	4c0c      	ldr	r4, [pc, #48]	; (800de70 <__libc_init_array+0x44>)
 800de40:	f004 f824 	bl	8011e8c <_init>
 800de44:	1b64      	subs	r4, r4, r5
 800de46:	10a4      	asrs	r4, r4, #2
 800de48:	2600      	movs	r6, #0
 800de4a:	42a6      	cmp	r6, r4
 800de4c:	d105      	bne.n	800de5a <__libc_init_array+0x2e>
 800de4e:	bd70      	pop	{r4, r5, r6, pc}
 800de50:	f855 3b04 	ldr.w	r3, [r5], #4
 800de54:	4798      	blx	r3
 800de56:	3601      	adds	r6, #1
 800de58:	e7ee      	b.n	800de38 <__libc_init_array+0xc>
 800de5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800de5e:	4798      	blx	r3
 800de60:	3601      	adds	r6, #1
 800de62:	e7f2      	b.n	800de4a <__libc_init_array+0x1e>
 800de64:	08012510 	.word	0x08012510
 800de68:	08012510 	.word	0x08012510
 800de6c:	08012510 	.word	0x08012510
 800de70:	08012514 	.word	0x08012514

0800de74 <memcpy>:
 800de74:	440a      	add	r2, r1
 800de76:	4291      	cmp	r1, r2
 800de78:	f100 33ff 	add.w	r3, r0, #4294967295
 800de7c:	d100      	bne.n	800de80 <memcpy+0xc>
 800de7e:	4770      	bx	lr
 800de80:	b510      	push	{r4, lr}
 800de82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de8a:	4291      	cmp	r1, r2
 800de8c:	d1f9      	bne.n	800de82 <memcpy+0xe>
 800de8e:	bd10      	pop	{r4, pc}

0800de90 <memset>:
 800de90:	4402      	add	r2, r0
 800de92:	4603      	mov	r3, r0
 800de94:	4293      	cmp	r3, r2
 800de96:	d100      	bne.n	800de9a <memset+0xa>
 800de98:	4770      	bx	lr
 800de9a:	f803 1b01 	strb.w	r1, [r3], #1
 800de9e:	e7f9      	b.n	800de94 <memset+0x4>

0800dea0 <__cvt>:
 800dea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dea4:	ec55 4b10 	vmov	r4, r5, d0
 800dea8:	2d00      	cmp	r5, #0
 800deaa:	460e      	mov	r6, r1
 800deac:	4619      	mov	r1, r3
 800deae:	462b      	mov	r3, r5
 800deb0:	bfbb      	ittet	lt
 800deb2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800deb6:	461d      	movlt	r5, r3
 800deb8:	2300      	movge	r3, #0
 800deba:	232d      	movlt	r3, #45	; 0x2d
 800debc:	700b      	strb	r3, [r1, #0]
 800debe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dec0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dec4:	4691      	mov	r9, r2
 800dec6:	f023 0820 	bic.w	r8, r3, #32
 800deca:	bfbc      	itt	lt
 800decc:	4622      	movlt	r2, r4
 800dece:	4614      	movlt	r4, r2
 800ded0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ded4:	d005      	beq.n	800dee2 <__cvt+0x42>
 800ded6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800deda:	d100      	bne.n	800dede <__cvt+0x3e>
 800dedc:	3601      	adds	r6, #1
 800dede:	2102      	movs	r1, #2
 800dee0:	e000      	b.n	800dee4 <__cvt+0x44>
 800dee2:	2103      	movs	r1, #3
 800dee4:	ab03      	add	r3, sp, #12
 800dee6:	9301      	str	r3, [sp, #4]
 800dee8:	ab02      	add	r3, sp, #8
 800deea:	9300      	str	r3, [sp, #0]
 800deec:	ec45 4b10 	vmov	d0, r4, r5
 800def0:	4653      	mov	r3, sl
 800def2:	4632      	mov	r2, r6
 800def4:	f000 fd20 	bl	800e938 <_dtoa_r>
 800def8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800defc:	4607      	mov	r7, r0
 800defe:	d102      	bne.n	800df06 <__cvt+0x66>
 800df00:	f019 0f01 	tst.w	r9, #1
 800df04:	d022      	beq.n	800df4c <__cvt+0xac>
 800df06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800df0a:	eb07 0906 	add.w	r9, r7, r6
 800df0e:	d110      	bne.n	800df32 <__cvt+0x92>
 800df10:	783b      	ldrb	r3, [r7, #0]
 800df12:	2b30      	cmp	r3, #48	; 0x30
 800df14:	d10a      	bne.n	800df2c <__cvt+0x8c>
 800df16:	2200      	movs	r2, #0
 800df18:	2300      	movs	r3, #0
 800df1a:	4620      	mov	r0, r4
 800df1c:	4629      	mov	r1, r5
 800df1e:	f7f2 fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800df22:	b918      	cbnz	r0, 800df2c <__cvt+0x8c>
 800df24:	f1c6 0601 	rsb	r6, r6, #1
 800df28:	f8ca 6000 	str.w	r6, [sl]
 800df2c:	f8da 3000 	ldr.w	r3, [sl]
 800df30:	4499      	add	r9, r3
 800df32:	2200      	movs	r2, #0
 800df34:	2300      	movs	r3, #0
 800df36:	4620      	mov	r0, r4
 800df38:	4629      	mov	r1, r5
 800df3a:	f7f2 fdc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800df3e:	b108      	cbz	r0, 800df44 <__cvt+0xa4>
 800df40:	f8cd 900c 	str.w	r9, [sp, #12]
 800df44:	2230      	movs	r2, #48	; 0x30
 800df46:	9b03      	ldr	r3, [sp, #12]
 800df48:	454b      	cmp	r3, r9
 800df4a:	d307      	bcc.n	800df5c <__cvt+0xbc>
 800df4c:	9b03      	ldr	r3, [sp, #12]
 800df4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df50:	1bdb      	subs	r3, r3, r7
 800df52:	4638      	mov	r0, r7
 800df54:	6013      	str	r3, [r2, #0]
 800df56:	b004      	add	sp, #16
 800df58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df5c:	1c59      	adds	r1, r3, #1
 800df5e:	9103      	str	r1, [sp, #12]
 800df60:	701a      	strb	r2, [r3, #0]
 800df62:	e7f0      	b.n	800df46 <__cvt+0xa6>

0800df64 <__exponent>:
 800df64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df66:	4603      	mov	r3, r0
 800df68:	2900      	cmp	r1, #0
 800df6a:	bfb8      	it	lt
 800df6c:	4249      	neglt	r1, r1
 800df6e:	f803 2b02 	strb.w	r2, [r3], #2
 800df72:	bfb4      	ite	lt
 800df74:	222d      	movlt	r2, #45	; 0x2d
 800df76:	222b      	movge	r2, #43	; 0x2b
 800df78:	2909      	cmp	r1, #9
 800df7a:	7042      	strb	r2, [r0, #1]
 800df7c:	dd2a      	ble.n	800dfd4 <__exponent+0x70>
 800df7e:	f10d 0407 	add.w	r4, sp, #7
 800df82:	46a4      	mov	ip, r4
 800df84:	270a      	movs	r7, #10
 800df86:	46a6      	mov	lr, r4
 800df88:	460a      	mov	r2, r1
 800df8a:	fb91 f6f7 	sdiv	r6, r1, r7
 800df8e:	fb07 1516 	mls	r5, r7, r6, r1
 800df92:	3530      	adds	r5, #48	; 0x30
 800df94:	2a63      	cmp	r2, #99	; 0x63
 800df96:	f104 34ff 	add.w	r4, r4, #4294967295
 800df9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800df9e:	4631      	mov	r1, r6
 800dfa0:	dcf1      	bgt.n	800df86 <__exponent+0x22>
 800dfa2:	3130      	adds	r1, #48	; 0x30
 800dfa4:	f1ae 0502 	sub.w	r5, lr, #2
 800dfa8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dfac:	1c44      	adds	r4, r0, #1
 800dfae:	4629      	mov	r1, r5
 800dfb0:	4561      	cmp	r1, ip
 800dfb2:	d30a      	bcc.n	800dfca <__exponent+0x66>
 800dfb4:	f10d 0209 	add.w	r2, sp, #9
 800dfb8:	eba2 020e 	sub.w	r2, r2, lr
 800dfbc:	4565      	cmp	r5, ip
 800dfbe:	bf88      	it	hi
 800dfc0:	2200      	movhi	r2, #0
 800dfc2:	4413      	add	r3, r2
 800dfc4:	1a18      	subs	r0, r3, r0
 800dfc6:	b003      	add	sp, #12
 800dfc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfce:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dfd2:	e7ed      	b.n	800dfb0 <__exponent+0x4c>
 800dfd4:	2330      	movs	r3, #48	; 0x30
 800dfd6:	3130      	adds	r1, #48	; 0x30
 800dfd8:	7083      	strb	r3, [r0, #2]
 800dfda:	70c1      	strb	r1, [r0, #3]
 800dfdc:	1d03      	adds	r3, r0, #4
 800dfde:	e7f1      	b.n	800dfc4 <__exponent+0x60>

0800dfe0 <_printf_float>:
 800dfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe4:	ed2d 8b02 	vpush	{d8}
 800dfe8:	b08d      	sub	sp, #52	; 0x34
 800dfea:	460c      	mov	r4, r1
 800dfec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dff0:	4616      	mov	r6, r2
 800dff2:	461f      	mov	r7, r3
 800dff4:	4605      	mov	r5, r0
 800dff6:	f001 fa8d 	bl	800f514 <_localeconv_r>
 800dffa:	f8d0 a000 	ldr.w	sl, [r0]
 800dffe:	4650      	mov	r0, sl
 800e000:	f7f2 f8e6 	bl	80001d0 <strlen>
 800e004:	2300      	movs	r3, #0
 800e006:	930a      	str	r3, [sp, #40]	; 0x28
 800e008:	6823      	ldr	r3, [r4, #0]
 800e00a:	9305      	str	r3, [sp, #20]
 800e00c:	f8d8 3000 	ldr.w	r3, [r8]
 800e010:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e014:	3307      	adds	r3, #7
 800e016:	f023 0307 	bic.w	r3, r3, #7
 800e01a:	f103 0208 	add.w	r2, r3, #8
 800e01e:	f8c8 2000 	str.w	r2, [r8]
 800e022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e026:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e02a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e02e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e032:	9307      	str	r3, [sp, #28]
 800e034:	f8cd 8018 	str.w	r8, [sp, #24]
 800e038:	ee08 0a10 	vmov	s16, r0
 800e03c:	4b9f      	ldr	r3, [pc, #636]	; (800e2bc <_printf_float+0x2dc>)
 800e03e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e042:	f04f 32ff 	mov.w	r2, #4294967295
 800e046:	f7f2 fd71 	bl	8000b2c <__aeabi_dcmpun>
 800e04a:	bb88      	cbnz	r0, 800e0b0 <_printf_float+0xd0>
 800e04c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e050:	4b9a      	ldr	r3, [pc, #616]	; (800e2bc <_printf_float+0x2dc>)
 800e052:	f04f 32ff 	mov.w	r2, #4294967295
 800e056:	f7f2 fd4b 	bl	8000af0 <__aeabi_dcmple>
 800e05a:	bb48      	cbnz	r0, 800e0b0 <_printf_float+0xd0>
 800e05c:	2200      	movs	r2, #0
 800e05e:	2300      	movs	r3, #0
 800e060:	4640      	mov	r0, r8
 800e062:	4649      	mov	r1, r9
 800e064:	f7f2 fd3a 	bl	8000adc <__aeabi_dcmplt>
 800e068:	b110      	cbz	r0, 800e070 <_printf_float+0x90>
 800e06a:	232d      	movs	r3, #45	; 0x2d
 800e06c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e070:	4b93      	ldr	r3, [pc, #588]	; (800e2c0 <_printf_float+0x2e0>)
 800e072:	4894      	ldr	r0, [pc, #592]	; (800e2c4 <_printf_float+0x2e4>)
 800e074:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e078:	bf94      	ite	ls
 800e07a:	4698      	movls	r8, r3
 800e07c:	4680      	movhi	r8, r0
 800e07e:	2303      	movs	r3, #3
 800e080:	6123      	str	r3, [r4, #16]
 800e082:	9b05      	ldr	r3, [sp, #20]
 800e084:	f023 0204 	bic.w	r2, r3, #4
 800e088:	6022      	str	r2, [r4, #0]
 800e08a:	f04f 0900 	mov.w	r9, #0
 800e08e:	9700      	str	r7, [sp, #0]
 800e090:	4633      	mov	r3, r6
 800e092:	aa0b      	add	r2, sp, #44	; 0x2c
 800e094:	4621      	mov	r1, r4
 800e096:	4628      	mov	r0, r5
 800e098:	f000 f9d8 	bl	800e44c <_printf_common>
 800e09c:	3001      	adds	r0, #1
 800e09e:	f040 8090 	bne.w	800e1c2 <_printf_float+0x1e2>
 800e0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a6:	b00d      	add	sp, #52	; 0x34
 800e0a8:	ecbd 8b02 	vpop	{d8}
 800e0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0b0:	4642      	mov	r2, r8
 800e0b2:	464b      	mov	r3, r9
 800e0b4:	4640      	mov	r0, r8
 800e0b6:	4649      	mov	r1, r9
 800e0b8:	f7f2 fd38 	bl	8000b2c <__aeabi_dcmpun>
 800e0bc:	b140      	cbz	r0, 800e0d0 <_printf_float+0xf0>
 800e0be:	464b      	mov	r3, r9
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	bfbc      	itt	lt
 800e0c4:	232d      	movlt	r3, #45	; 0x2d
 800e0c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e0ca:	487f      	ldr	r0, [pc, #508]	; (800e2c8 <_printf_float+0x2e8>)
 800e0cc:	4b7f      	ldr	r3, [pc, #508]	; (800e2cc <_printf_float+0x2ec>)
 800e0ce:	e7d1      	b.n	800e074 <_printf_float+0x94>
 800e0d0:	6863      	ldr	r3, [r4, #4]
 800e0d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e0d6:	9206      	str	r2, [sp, #24]
 800e0d8:	1c5a      	adds	r2, r3, #1
 800e0da:	d13f      	bne.n	800e15c <_printf_float+0x17c>
 800e0dc:	2306      	movs	r3, #6
 800e0de:	6063      	str	r3, [r4, #4]
 800e0e0:	9b05      	ldr	r3, [sp, #20]
 800e0e2:	6861      	ldr	r1, [r4, #4]
 800e0e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	9303      	str	r3, [sp, #12]
 800e0ec:	ab0a      	add	r3, sp, #40	; 0x28
 800e0ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e0f2:	ab09      	add	r3, sp, #36	; 0x24
 800e0f4:	ec49 8b10 	vmov	d0, r8, r9
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	6022      	str	r2, [r4, #0]
 800e0fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e100:	4628      	mov	r0, r5
 800e102:	f7ff fecd 	bl	800dea0 <__cvt>
 800e106:	9b06      	ldr	r3, [sp, #24]
 800e108:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e10a:	2b47      	cmp	r3, #71	; 0x47
 800e10c:	4680      	mov	r8, r0
 800e10e:	d108      	bne.n	800e122 <_printf_float+0x142>
 800e110:	1cc8      	adds	r0, r1, #3
 800e112:	db02      	blt.n	800e11a <_printf_float+0x13a>
 800e114:	6863      	ldr	r3, [r4, #4]
 800e116:	4299      	cmp	r1, r3
 800e118:	dd41      	ble.n	800e19e <_printf_float+0x1be>
 800e11a:	f1ab 0b02 	sub.w	fp, fp, #2
 800e11e:	fa5f fb8b 	uxtb.w	fp, fp
 800e122:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e126:	d820      	bhi.n	800e16a <_printf_float+0x18a>
 800e128:	3901      	subs	r1, #1
 800e12a:	465a      	mov	r2, fp
 800e12c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e130:	9109      	str	r1, [sp, #36]	; 0x24
 800e132:	f7ff ff17 	bl	800df64 <__exponent>
 800e136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e138:	1813      	adds	r3, r2, r0
 800e13a:	2a01      	cmp	r2, #1
 800e13c:	4681      	mov	r9, r0
 800e13e:	6123      	str	r3, [r4, #16]
 800e140:	dc02      	bgt.n	800e148 <_printf_float+0x168>
 800e142:	6822      	ldr	r2, [r4, #0]
 800e144:	07d2      	lsls	r2, r2, #31
 800e146:	d501      	bpl.n	800e14c <_printf_float+0x16c>
 800e148:	3301      	adds	r3, #1
 800e14a:	6123      	str	r3, [r4, #16]
 800e14c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e150:	2b00      	cmp	r3, #0
 800e152:	d09c      	beq.n	800e08e <_printf_float+0xae>
 800e154:	232d      	movs	r3, #45	; 0x2d
 800e156:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e15a:	e798      	b.n	800e08e <_printf_float+0xae>
 800e15c:	9a06      	ldr	r2, [sp, #24]
 800e15e:	2a47      	cmp	r2, #71	; 0x47
 800e160:	d1be      	bne.n	800e0e0 <_printf_float+0x100>
 800e162:	2b00      	cmp	r3, #0
 800e164:	d1bc      	bne.n	800e0e0 <_printf_float+0x100>
 800e166:	2301      	movs	r3, #1
 800e168:	e7b9      	b.n	800e0de <_printf_float+0xfe>
 800e16a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e16e:	d118      	bne.n	800e1a2 <_printf_float+0x1c2>
 800e170:	2900      	cmp	r1, #0
 800e172:	6863      	ldr	r3, [r4, #4]
 800e174:	dd0b      	ble.n	800e18e <_printf_float+0x1ae>
 800e176:	6121      	str	r1, [r4, #16]
 800e178:	b913      	cbnz	r3, 800e180 <_printf_float+0x1a0>
 800e17a:	6822      	ldr	r2, [r4, #0]
 800e17c:	07d0      	lsls	r0, r2, #31
 800e17e:	d502      	bpl.n	800e186 <_printf_float+0x1a6>
 800e180:	3301      	adds	r3, #1
 800e182:	440b      	add	r3, r1
 800e184:	6123      	str	r3, [r4, #16]
 800e186:	65a1      	str	r1, [r4, #88]	; 0x58
 800e188:	f04f 0900 	mov.w	r9, #0
 800e18c:	e7de      	b.n	800e14c <_printf_float+0x16c>
 800e18e:	b913      	cbnz	r3, 800e196 <_printf_float+0x1b6>
 800e190:	6822      	ldr	r2, [r4, #0]
 800e192:	07d2      	lsls	r2, r2, #31
 800e194:	d501      	bpl.n	800e19a <_printf_float+0x1ba>
 800e196:	3302      	adds	r3, #2
 800e198:	e7f4      	b.n	800e184 <_printf_float+0x1a4>
 800e19a:	2301      	movs	r3, #1
 800e19c:	e7f2      	b.n	800e184 <_printf_float+0x1a4>
 800e19e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e1a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1a4:	4299      	cmp	r1, r3
 800e1a6:	db05      	blt.n	800e1b4 <_printf_float+0x1d4>
 800e1a8:	6823      	ldr	r3, [r4, #0]
 800e1aa:	6121      	str	r1, [r4, #16]
 800e1ac:	07d8      	lsls	r0, r3, #31
 800e1ae:	d5ea      	bpl.n	800e186 <_printf_float+0x1a6>
 800e1b0:	1c4b      	adds	r3, r1, #1
 800e1b2:	e7e7      	b.n	800e184 <_printf_float+0x1a4>
 800e1b4:	2900      	cmp	r1, #0
 800e1b6:	bfd4      	ite	le
 800e1b8:	f1c1 0202 	rsble	r2, r1, #2
 800e1bc:	2201      	movgt	r2, #1
 800e1be:	4413      	add	r3, r2
 800e1c0:	e7e0      	b.n	800e184 <_printf_float+0x1a4>
 800e1c2:	6823      	ldr	r3, [r4, #0]
 800e1c4:	055a      	lsls	r2, r3, #21
 800e1c6:	d407      	bmi.n	800e1d8 <_printf_float+0x1f8>
 800e1c8:	6923      	ldr	r3, [r4, #16]
 800e1ca:	4642      	mov	r2, r8
 800e1cc:	4631      	mov	r1, r6
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	47b8      	blx	r7
 800e1d2:	3001      	adds	r0, #1
 800e1d4:	d12c      	bne.n	800e230 <_printf_float+0x250>
 800e1d6:	e764      	b.n	800e0a2 <_printf_float+0xc2>
 800e1d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e1dc:	f240 80e0 	bls.w	800e3a0 <_printf_float+0x3c0>
 800e1e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	f7f2 fc6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e1ec:	2800      	cmp	r0, #0
 800e1ee:	d034      	beq.n	800e25a <_printf_float+0x27a>
 800e1f0:	4a37      	ldr	r2, [pc, #220]	; (800e2d0 <_printf_float+0x2f0>)
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	4631      	mov	r1, r6
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	47b8      	blx	r7
 800e1fa:	3001      	adds	r0, #1
 800e1fc:	f43f af51 	beq.w	800e0a2 <_printf_float+0xc2>
 800e200:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e204:	429a      	cmp	r2, r3
 800e206:	db02      	blt.n	800e20e <_printf_float+0x22e>
 800e208:	6823      	ldr	r3, [r4, #0]
 800e20a:	07d8      	lsls	r0, r3, #31
 800e20c:	d510      	bpl.n	800e230 <_printf_float+0x250>
 800e20e:	ee18 3a10 	vmov	r3, s16
 800e212:	4652      	mov	r2, sl
 800e214:	4631      	mov	r1, r6
 800e216:	4628      	mov	r0, r5
 800e218:	47b8      	blx	r7
 800e21a:	3001      	adds	r0, #1
 800e21c:	f43f af41 	beq.w	800e0a2 <_printf_float+0xc2>
 800e220:	f04f 0800 	mov.w	r8, #0
 800e224:	f104 091a 	add.w	r9, r4, #26
 800e228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e22a:	3b01      	subs	r3, #1
 800e22c:	4543      	cmp	r3, r8
 800e22e:	dc09      	bgt.n	800e244 <_printf_float+0x264>
 800e230:	6823      	ldr	r3, [r4, #0]
 800e232:	079b      	lsls	r3, r3, #30
 800e234:	f100 8105 	bmi.w	800e442 <_printf_float+0x462>
 800e238:	68e0      	ldr	r0, [r4, #12]
 800e23a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e23c:	4298      	cmp	r0, r3
 800e23e:	bfb8      	it	lt
 800e240:	4618      	movlt	r0, r3
 800e242:	e730      	b.n	800e0a6 <_printf_float+0xc6>
 800e244:	2301      	movs	r3, #1
 800e246:	464a      	mov	r2, r9
 800e248:	4631      	mov	r1, r6
 800e24a:	4628      	mov	r0, r5
 800e24c:	47b8      	blx	r7
 800e24e:	3001      	adds	r0, #1
 800e250:	f43f af27 	beq.w	800e0a2 <_printf_float+0xc2>
 800e254:	f108 0801 	add.w	r8, r8, #1
 800e258:	e7e6      	b.n	800e228 <_printf_float+0x248>
 800e25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	dc39      	bgt.n	800e2d4 <_printf_float+0x2f4>
 800e260:	4a1b      	ldr	r2, [pc, #108]	; (800e2d0 <_printf_float+0x2f0>)
 800e262:	2301      	movs	r3, #1
 800e264:	4631      	mov	r1, r6
 800e266:	4628      	mov	r0, r5
 800e268:	47b8      	blx	r7
 800e26a:	3001      	adds	r0, #1
 800e26c:	f43f af19 	beq.w	800e0a2 <_printf_float+0xc2>
 800e270:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e274:	4313      	orrs	r3, r2
 800e276:	d102      	bne.n	800e27e <_printf_float+0x29e>
 800e278:	6823      	ldr	r3, [r4, #0]
 800e27a:	07d9      	lsls	r1, r3, #31
 800e27c:	d5d8      	bpl.n	800e230 <_printf_float+0x250>
 800e27e:	ee18 3a10 	vmov	r3, s16
 800e282:	4652      	mov	r2, sl
 800e284:	4631      	mov	r1, r6
 800e286:	4628      	mov	r0, r5
 800e288:	47b8      	blx	r7
 800e28a:	3001      	adds	r0, #1
 800e28c:	f43f af09 	beq.w	800e0a2 <_printf_float+0xc2>
 800e290:	f04f 0900 	mov.w	r9, #0
 800e294:	f104 0a1a 	add.w	sl, r4, #26
 800e298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e29a:	425b      	negs	r3, r3
 800e29c:	454b      	cmp	r3, r9
 800e29e:	dc01      	bgt.n	800e2a4 <_printf_float+0x2c4>
 800e2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2a2:	e792      	b.n	800e1ca <_printf_float+0x1ea>
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	4652      	mov	r2, sl
 800e2a8:	4631      	mov	r1, r6
 800e2aa:	4628      	mov	r0, r5
 800e2ac:	47b8      	blx	r7
 800e2ae:	3001      	adds	r0, #1
 800e2b0:	f43f aef7 	beq.w	800e0a2 <_printf_float+0xc2>
 800e2b4:	f109 0901 	add.w	r9, r9, #1
 800e2b8:	e7ee      	b.n	800e298 <_printf_float+0x2b8>
 800e2ba:	bf00      	nop
 800e2bc:	7fefffff 	.word	0x7fefffff
 800e2c0:	080120bc 	.word	0x080120bc
 800e2c4:	080120c0 	.word	0x080120c0
 800e2c8:	080120c8 	.word	0x080120c8
 800e2cc:	080120c4 	.word	0x080120c4
 800e2d0:	080120cc 	.word	0x080120cc
 800e2d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	bfa8      	it	ge
 800e2dc:	461a      	movge	r2, r3
 800e2de:	2a00      	cmp	r2, #0
 800e2e0:	4691      	mov	r9, r2
 800e2e2:	dc37      	bgt.n	800e354 <_printf_float+0x374>
 800e2e4:	f04f 0b00 	mov.w	fp, #0
 800e2e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2ec:	f104 021a 	add.w	r2, r4, #26
 800e2f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e2f2:	9305      	str	r3, [sp, #20]
 800e2f4:	eba3 0309 	sub.w	r3, r3, r9
 800e2f8:	455b      	cmp	r3, fp
 800e2fa:	dc33      	bgt.n	800e364 <_printf_float+0x384>
 800e2fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e300:	429a      	cmp	r2, r3
 800e302:	db3b      	blt.n	800e37c <_printf_float+0x39c>
 800e304:	6823      	ldr	r3, [r4, #0]
 800e306:	07da      	lsls	r2, r3, #31
 800e308:	d438      	bmi.n	800e37c <_printf_float+0x39c>
 800e30a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e30c:	9a05      	ldr	r2, [sp, #20]
 800e30e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e310:	1a9a      	subs	r2, r3, r2
 800e312:	eba3 0901 	sub.w	r9, r3, r1
 800e316:	4591      	cmp	r9, r2
 800e318:	bfa8      	it	ge
 800e31a:	4691      	movge	r9, r2
 800e31c:	f1b9 0f00 	cmp.w	r9, #0
 800e320:	dc35      	bgt.n	800e38e <_printf_float+0x3ae>
 800e322:	f04f 0800 	mov.w	r8, #0
 800e326:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e32a:	f104 0a1a 	add.w	sl, r4, #26
 800e32e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e332:	1a9b      	subs	r3, r3, r2
 800e334:	eba3 0309 	sub.w	r3, r3, r9
 800e338:	4543      	cmp	r3, r8
 800e33a:	f77f af79 	ble.w	800e230 <_printf_float+0x250>
 800e33e:	2301      	movs	r3, #1
 800e340:	4652      	mov	r2, sl
 800e342:	4631      	mov	r1, r6
 800e344:	4628      	mov	r0, r5
 800e346:	47b8      	blx	r7
 800e348:	3001      	adds	r0, #1
 800e34a:	f43f aeaa 	beq.w	800e0a2 <_printf_float+0xc2>
 800e34e:	f108 0801 	add.w	r8, r8, #1
 800e352:	e7ec      	b.n	800e32e <_printf_float+0x34e>
 800e354:	4613      	mov	r3, r2
 800e356:	4631      	mov	r1, r6
 800e358:	4642      	mov	r2, r8
 800e35a:	4628      	mov	r0, r5
 800e35c:	47b8      	blx	r7
 800e35e:	3001      	adds	r0, #1
 800e360:	d1c0      	bne.n	800e2e4 <_printf_float+0x304>
 800e362:	e69e      	b.n	800e0a2 <_printf_float+0xc2>
 800e364:	2301      	movs	r3, #1
 800e366:	4631      	mov	r1, r6
 800e368:	4628      	mov	r0, r5
 800e36a:	9205      	str	r2, [sp, #20]
 800e36c:	47b8      	blx	r7
 800e36e:	3001      	adds	r0, #1
 800e370:	f43f ae97 	beq.w	800e0a2 <_printf_float+0xc2>
 800e374:	9a05      	ldr	r2, [sp, #20]
 800e376:	f10b 0b01 	add.w	fp, fp, #1
 800e37a:	e7b9      	b.n	800e2f0 <_printf_float+0x310>
 800e37c:	ee18 3a10 	vmov	r3, s16
 800e380:	4652      	mov	r2, sl
 800e382:	4631      	mov	r1, r6
 800e384:	4628      	mov	r0, r5
 800e386:	47b8      	blx	r7
 800e388:	3001      	adds	r0, #1
 800e38a:	d1be      	bne.n	800e30a <_printf_float+0x32a>
 800e38c:	e689      	b.n	800e0a2 <_printf_float+0xc2>
 800e38e:	9a05      	ldr	r2, [sp, #20]
 800e390:	464b      	mov	r3, r9
 800e392:	4442      	add	r2, r8
 800e394:	4631      	mov	r1, r6
 800e396:	4628      	mov	r0, r5
 800e398:	47b8      	blx	r7
 800e39a:	3001      	adds	r0, #1
 800e39c:	d1c1      	bne.n	800e322 <_printf_float+0x342>
 800e39e:	e680      	b.n	800e0a2 <_printf_float+0xc2>
 800e3a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3a2:	2a01      	cmp	r2, #1
 800e3a4:	dc01      	bgt.n	800e3aa <_printf_float+0x3ca>
 800e3a6:	07db      	lsls	r3, r3, #31
 800e3a8:	d538      	bpl.n	800e41c <_printf_float+0x43c>
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	4642      	mov	r2, r8
 800e3ae:	4631      	mov	r1, r6
 800e3b0:	4628      	mov	r0, r5
 800e3b2:	47b8      	blx	r7
 800e3b4:	3001      	adds	r0, #1
 800e3b6:	f43f ae74 	beq.w	800e0a2 <_printf_float+0xc2>
 800e3ba:	ee18 3a10 	vmov	r3, s16
 800e3be:	4652      	mov	r2, sl
 800e3c0:	4631      	mov	r1, r6
 800e3c2:	4628      	mov	r0, r5
 800e3c4:	47b8      	blx	r7
 800e3c6:	3001      	adds	r0, #1
 800e3c8:	f43f ae6b 	beq.w	800e0a2 <_printf_float+0xc2>
 800e3cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	f7f2 fb78 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3d8:	b9d8      	cbnz	r0, 800e412 <_printf_float+0x432>
 800e3da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3dc:	f108 0201 	add.w	r2, r8, #1
 800e3e0:	3b01      	subs	r3, #1
 800e3e2:	4631      	mov	r1, r6
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	47b8      	blx	r7
 800e3e8:	3001      	adds	r0, #1
 800e3ea:	d10e      	bne.n	800e40a <_printf_float+0x42a>
 800e3ec:	e659      	b.n	800e0a2 <_printf_float+0xc2>
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	4652      	mov	r2, sl
 800e3f2:	4631      	mov	r1, r6
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	47b8      	blx	r7
 800e3f8:	3001      	adds	r0, #1
 800e3fa:	f43f ae52 	beq.w	800e0a2 <_printf_float+0xc2>
 800e3fe:	f108 0801 	add.w	r8, r8, #1
 800e402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e404:	3b01      	subs	r3, #1
 800e406:	4543      	cmp	r3, r8
 800e408:	dcf1      	bgt.n	800e3ee <_printf_float+0x40e>
 800e40a:	464b      	mov	r3, r9
 800e40c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e410:	e6dc      	b.n	800e1cc <_printf_float+0x1ec>
 800e412:	f04f 0800 	mov.w	r8, #0
 800e416:	f104 0a1a 	add.w	sl, r4, #26
 800e41a:	e7f2      	b.n	800e402 <_printf_float+0x422>
 800e41c:	2301      	movs	r3, #1
 800e41e:	4642      	mov	r2, r8
 800e420:	e7df      	b.n	800e3e2 <_printf_float+0x402>
 800e422:	2301      	movs	r3, #1
 800e424:	464a      	mov	r2, r9
 800e426:	4631      	mov	r1, r6
 800e428:	4628      	mov	r0, r5
 800e42a:	47b8      	blx	r7
 800e42c:	3001      	adds	r0, #1
 800e42e:	f43f ae38 	beq.w	800e0a2 <_printf_float+0xc2>
 800e432:	f108 0801 	add.w	r8, r8, #1
 800e436:	68e3      	ldr	r3, [r4, #12]
 800e438:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e43a:	1a5b      	subs	r3, r3, r1
 800e43c:	4543      	cmp	r3, r8
 800e43e:	dcf0      	bgt.n	800e422 <_printf_float+0x442>
 800e440:	e6fa      	b.n	800e238 <_printf_float+0x258>
 800e442:	f04f 0800 	mov.w	r8, #0
 800e446:	f104 0919 	add.w	r9, r4, #25
 800e44a:	e7f4      	b.n	800e436 <_printf_float+0x456>

0800e44c <_printf_common>:
 800e44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e450:	4616      	mov	r6, r2
 800e452:	4699      	mov	r9, r3
 800e454:	688a      	ldr	r2, [r1, #8]
 800e456:	690b      	ldr	r3, [r1, #16]
 800e458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e45c:	4293      	cmp	r3, r2
 800e45e:	bfb8      	it	lt
 800e460:	4613      	movlt	r3, r2
 800e462:	6033      	str	r3, [r6, #0]
 800e464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e468:	4607      	mov	r7, r0
 800e46a:	460c      	mov	r4, r1
 800e46c:	b10a      	cbz	r2, 800e472 <_printf_common+0x26>
 800e46e:	3301      	adds	r3, #1
 800e470:	6033      	str	r3, [r6, #0]
 800e472:	6823      	ldr	r3, [r4, #0]
 800e474:	0699      	lsls	r1, r3, #26
 800e476:	bf42      	ittt	mi
 800e478:	6833      	ldrmi	r3, [r6, #0]
 800e47a:	3302      	addmi	r3, #2
 800e47c:	6033      	strmi	r3, [r6, #0]
 800e47e:	6825      	ldr	r5, [r4, #0]
 800e480:	f015 0506 	ands.w	r5, r5, #6
 800e484:	d106      	bne.n	800e494 <_printf_common+0x48>
 800e486:	f104 0a19 	add.w	sl, r4, #25
 800e48a:	68e3      	ldr	r3, [r4, #12]
 800e48c:	6832      	ldr	r2, [r6, #0]
 800e48e:	1a9b      	subs	r3, r3, r2
 800e490:	42ab      	cmp	r3, r5
 800e492:	dc26      	bgt.n	800e4e2 <_printf_common+0x96>
 800e494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e498:	1e13      	subs	r3, r2, #0
 800e49a:	6822      	ldr	r2, [r4, #0]
 800e49c:	bf18      	it	ne
 800e49e:	2301      	movne	r3, #1
 800e4a0:	0692      	lsls	r2, r2, #26
 800e4a2:	d42b      	bmi.n	800e4fc <_printf_common+0xb0>
 800e4a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4a8:	4649      	mov	r1, r9
 800e4aa:	4638      	mov	r0, r7
 800e4ac:	47c0      	blx	r8
 800e4ae:	3001      	adds	r0, #1
 800e4b0:	d01e      	beq.n	800e4f0 <_printf_common+0xa4>
 800e4b2:	6823      	ldr	r3, [r4, #0]
 800e4b4:	68e5      	ldr	r5, [r4, #12]
 800e4b6:	6832      	ldr	r2, [r6, #0]
 800e4b8:	f003 0306 	and.w	r3, r3, #6
 800e4bc:	2b04      	cmp	r3, #4
 800e4be:	bf08      	it	eq
 800e4c0:	1aad      	subeq	r5, r5, r2
 800e4c2:	68a3      	ldr	r3, [r4, #8]
 800e4c4:	6922      	ldr	r2, [r4, #16]
 800e4c6:	bf0c      	ite	eq
 800e4c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e4cc:	2500      	movne	r5, #0
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	bfc4      	itt	gt
 800e4d2:	1a9b      	subgt	r3, r3, r2
 800e4d4:	18ed      	addgt	r5, r5, r3
 800e4d6:	2600      	movs	r6, #0
 800e4d8:	341a      	adds	r4, #26
 800e4da:	42b5      	cmp	r5, r6
 800e4dc:	d11a      	bne.n	800e514 <_printf_common+0xc8>
 800e4de:	2000      	movs	r0, #0
 800e4e0:	e008      	b.n	800e4f4 <_printf_common+0xa8>
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	4652      	mov	r2, sl
 800e4e6:	4649      	mov	r1, r9
 800e4e8:	4638      	mov	r0, r7
 800e4ea:	47c0      	blx	r8
 800e4ec:	3001      	adds	r0, #1
 800e4ee:	d103      	bne.n	800e4f8 <_printf_common+0xac>
 800e4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4f8:	3501      	adds	r5, #1
 800e4fa:	e7c6      	b.n	800e48a <_printf_common+0x3e>
 800e4fc:	18e1      	adds	r1, r4, r3
 800e4fe:	1c5a      	adds	r2, r3, #1
 800e500:	2030      	movs	r0, #48	; 0x30
 800e502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e506:	4422      	add	r2, r4
 800e508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e50c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e510:	3302      	adds	r3, #2
 800e512:	e7c7      	b.n	800e4a4 <_printf_common+0x58>
 800e514:	2301      	movs	r3, #1
 800e516:	4622      	mov	r2, r4
 800e518:	4649      	mov	r1, r9
 800e51a:	4638      	mov	r0, r7
 800e51c:	47c0      	blx	r8
 800e51e:	3001      	adds	r0, #1
 800e520:	d0e6      	beq.n	800e4f0 <_printf_common+0xa4>
 800e522:	3601      	adds	r6, #1
 800e524:	e7d9      	b.n	800e4da <_printf_common+0x8e>
	...

0800e528 <_printf_i>:
 800e528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e52c:	7e0f      	ldrb	r7, [r1, #24]
 800e52e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e530:	2f78      	cmp	r7, #120	; 0x78
 800e532:	4691      	mov	r9, r2
 800e534:	4680      	mov	r8, r0
 800e536:	460c      	mov	r4, r1
 800e538:	469a      	mov	sl, r3
 800e53a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e53e:	d807      	bhi.n	800e550 <_printf_i+0x28>
 800e540:	2f62      	cmp	r7, #98	; 0x62
 800e542:	d80a      	bhi.n	800e55a <_printf_i+0x32>
 800e544:	2f00      	cmp	r7, #0
 800e546:	f000 80d8 	beq.w	800e6fa <_printf_i+0x1d2>
 800e54a:	2f58      	cmp	r7, #88	; 0x58
 800e54c:	f000 80a3 	beq.w	800e696 <_printf_i+0x16e>
 800e550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e558:	e03a      	b.n	800e5d0 <_printf_i+0xa8>
 800e55a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e55e:	2b15      	cmp	r3, #21
 800e560:	d8f6      	bhi.n	800e550 <_printf_i+0x28>
 800e562:	a101      	add	r1, pc, #4	; (adr r1, 800e568 <_printf_i+0x40>)
 800e564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e568:	0800e5c1 	.word	0x0800e5c1
 800e56c:	0800e5d5 	.word	0x0800e5d5
 800e570:	0800e551 	.word	0x0800e551
 800e574:	0800e551 	.word	0x0800e551
 800e578:	0800e551 	.word	0x0800e551
 800e57c:	0800e551 	.word	0x0800e551
 800e580:	0800e5d5 	.word	0x0800e5d5
 800e584:	0800e551 	.word	0x0800e551
 800e588:	0800e551 	.word	0x0800e551
 800e58c:	0800e551 	.word	0x0800e551
 800e590:	0800e551 	.word	0x0800e551
 800e594:	0800e6e1 	.word	0x0800e6e1
 800e598:	0800e605 	.word	0x0800e605
 800e59c:	0800e6c3 	.word	0x0800e6c3
 800e5a0:	0800e551 	.word	0x0800e551
 800e5a4:	0800e551 	.word	0x0800e551
 800e5a8:	0800e703 	.word	0x0800e703
 800e5ac:	0800e551 	.word	0x0800e551
 800e5b0:	0800e605 	.word	0x0800e605
 800e5b4:	0800e551 	.word	0x0800e551
 800e5b8:	0800e551 	.word	0x0800e551
 800e5bc:	0800e6cb 	.word	0x0800e6cb
 800e5c0:	682b      	ldr	r3, [r5, #0]
 800e5c2:	1d1a      	adds	r2, r3, #4
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	602a      	str	r2, [r5, #0]
 800e5c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	e0a3      	b.n	800e71c <_printf_i+0x1f4>
 800e5d4:	6820      	ldr	r0, [r4, #0]
 800e5d6:	6829      	ldr	r1, [r5, #0]
 800e5d8:	0606      	lsls	r6, r0, #24
 800e5da:	f101 0304 	add.w	r3, r1, #4
 800e5de:	d50a      	bpl.n	800e5f6 <_printf_i+0xce>
 800e5e0:	680e      	ldr	r6, [r1, #0]
 800e5e2:	602b      	str	r3, [r5, #0]
 800e5e4:	2e00      	cmp	r6, #0
 800e5e6:	da03      	bge.n	800e5f0 <_printf_i+0xc8>
 800e5e8:	232d      	movs	r3, #45	; 0x2d
 800e5ea:	4276      	negs	r6, r6
 800e5ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5f0:	485e      	ldr	r0, [pc, #376]	; (800e76c <_printf_i+0x244>)
 800e5f2:	230a      	movs	r3, #10
 800e5f4:	e019      	b.n	800e62a <_printf_i+0x102>
 800e5f6:	680e      	ldr	r6, [r1, #0]
 800e5f8:	602b      	str	r3, [r5, #0]
 800e5fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e5fe:	bf18      	it	ne
 800e600:	b236      	sxthne	r6, r6
 800e602:	e7ef      	b.n	800e5e4 <_printf_i+0xbc>
 800e604:	682b      	ldr	r3, [r5, #0]
 800e606:	6820      	ldr	r0, [r4, #0]
 800e608:	1d19      	adds	r1, r3, #4
 800e60a:	6029      	str	r1, [r5, #0]
 800e60c:	0601      	lsls	r1, r0, #24
 800e60e:	d501      	bpl.n	800e614 <_printf_i+0xec>
 800e610:	681e      	ldr	r6, [r3, #0]
 800e612:	e002      	b.n	800e61a <_printf_i+0xf2>
 800e614:	0646      	lsls	r6, r0, #25
 800e616:	d5fb      	bpl.n	800e610 <_printf_i+0xe8>
 800e618:	881e      	ldrh	r6, [r3, #0]
 800e61a:	4854      	ldr	r0, [pc, #336]	; (800e76c <_printf_i+0x244>)
 800e61c:	2f6f      	cmp	r7, #111	; 0x6f
 800e61e:	bf0c      	ite	eq
 800e620:	2308      	moveq	r3, #8
 800e622:	230a      	movne	r3, #10
 800e624:	2100      	movs	r1, #0
 800e626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e62a:	6865      	ldr	r5, [r4, #4]
 800e62c:	60a5      	str	r5, [r4, #8]
 800e62e:	2d00      	cmp	r5, #0
 800e630:	bfa2      	ittt	ge
 800e632:	6821      	ldrge	r1, [r4, #0]
 800e634:	f021 0104 	bicge.w	r1, r1, #4
 800e638:	6021      	strge	r1, [r4, #0]
 800e63a:	b90e      	cbnz	r6, 800e640 <_printf_i+0x118>
 800e63c:	2d00      	cmp	r5, #0
 800e63e:	d04d      	beq.n	800e6dc <_printf_i+0x1b4>
 800e640:	4615      	mov	r5, r2
 800e642:	fbb6 f1f3 	udiv	r1, r6, r3
 800e646:	fb03 6711 	mls	r7, r3, r1, r6
 800e64a:	5dc7      	ldrb	r7, [r0, r7]
 800e64c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e650:	4637      	mov	r7, r6
 800e652:	42bb      	cmp	r3, r7
 800e654:	460e      	mov	r6, r1
 800e656:	d9f4      	bls.n	800e642 <_printf_i+0x11a>
 800e658:	2b08      	cmp	r3, #8
 800e65a:	d10b      	bne.n	800e674 <_printf_i+0x14c>
 800e65c:	6823      	ldr	r3, [r4, #0]
 800e65e:	07de      	lsls	r6, r3, #31
 800e660:	d508      	bpl.n	800e674 <_printf_i+0x14c>
 800e662:	6923      	ldr	r3, [r4, #16]
 800e664:	6861      	ldr	r1, [r4, #4]
 800e666:	4299      	cmp	r1, r3
 800e668:	bfde      	ittt	le
 800e66a:	2330      	movle	r3, #48	; 0x30
 800e66c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e670:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e674:	1b52      	subs	r2, r2, r5
 800e676:	6122      	str	r2, [r4, #16]
 800e678:	f8cd a000 	str.w	sl, [sp]
 800e67c:	464b      	mov	r3, r9
 800e67e:	aa03      	add	r2, sp, #12
 800e680:	4621      	mov	r1, r4
 800e682:	4640      	mov	r0, r8
 800e684:	f7ff fee2 	bl	800e44c <_printf_common>
 800e688:	3001      	adds	r0, #1
 800e68a:	d14c      	bne.n	800e726 <_printf_i+0x1fe>
 800e68c:	f04f 30ff 	mov.w	r0, #4294967295
 800e690:	b004      	add	sp, #16
 800e692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e696:	4835      	ldr	r0, [pc, #212]	; (800e76c <_printf_i+0x244>)
 800e698:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e69c:	6829      	ldr	r1, [r5, #0]
 800e69e:	6823      	ldr	r3, [r4, #0]
 800e6a0:	f851 6b04 	ldr.w	r6, [r1], #4
 800e6a4:	6029      	str	r1, [r5, #0]
 800e6a6:	061d      	lsls	r5, r3, #24
 800e6a8:	d514      	bpl.n	800e6d4 <_printf_i+0x1ac>
 800e6aa:	07df      	lsls	r7, r3, #31
 800e6ac:	bf44      	itt	mi
 800e6ae:	f043 0320 	orrmi.w	r3, r3, #32
 800e6b2:	6023      	strmi	r3, [r4, #0]
 800e6b4:	b91e      	cbnz	r6, 800e6be <_printf_i+0x196>
 800e6b6:	6823      	ldr	r3, [r4, #0]
 800e6b8:	f023 0320 	bic.w	r3, r3, #32
 800e6bc:	6023      	str	r3, [r4, #0]
 800e6be:	2310      	movs	r3, #16
 800e6c0:	e7b0      	b.n	800e624 <_printf_i+0xfc>
 800e6c2:	6823      	ldr	r3, [r4, #0]
 800e6c4:	f043 0320 	orr.w	r3, r3, #32
 800e6c8:	6023      	str	r3, [r4, #0]
 800e6ca:	2378      	movs	r3, #120	; 0x78
 800e6cc:	4828      	ldr	r0, [pc, #160]	; (800e770 <_printf_i+0x248>)
 800e6ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e6d2:	e7e3      	b.n	800e69c <_printf_i+0x174>
 800e6d4:	0659      	lsls	r1, r3, #25
 800e6d6:	bf48      	it	mi
 800e6d8:	b2b6      	uxthmi	r6, r6
 800e6da:	e7e6      	b.n	800e6aa <_printf_i+0x182>
 800e6dc:	4615      	mov	r5, r2
 800e6de:	e7bb      	b.n	800e658 <_printf_i+0x130>
 800e6e0:	682b      	ldr	r3, [r5, #0]
 800e6e2:	6826      	ldr	r6, [r4, #0]
 800e6e4:	6961      	ldr	r1, [r4, #20]
 800e6e6:	1d18      	adds	r0, r3, #4
 800e6e8:	6028      	str	r0, [r5, #0]
 800e6ea:	0635      	lsls	r5, r6, #24
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	d501      	bpl.n	800e6f4 <_printf_i+0x1cc>
 800e6f0:	6019      	str	r1, [r3, #0]
 800e6f2:	e002      	b.n	800e6fa <_printf_i+0x1d2>
 800e6f4:	0670      	lsls	r0, r6, #25
 800e6f6:	d5fb      	bpl.n	800e6f0 <_printf_i+0x1c8>
 800e6f8:	8019      	strh	r1, [r3, #0]
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	6123      	str	r3, [r4, #16]
 800e6fe:	4615      	mov	r5, r2
 800e700:	e7ba      	b.n	800e678 <_printf_i+0x150>
 800e702:	682b      	ldr	r3, [r5, #0]
 800e704:	1d1a      	adds	r2, r3, #4
 800e706:	602a      	str	r2, [r5, #0]
 800e708:	681d      	ldr	r5, [r3, #0]
 800e70a:	6862      	ldr	r2, [r4, #4]
 800e70c:	2100      	movs	r1, #0
 800e70e:	4628      	mov	r0, r5
 800e710:	f7f1 fd66 	bl	80001e0 <memchr>
 800e714:	b108      	cbz	r0, 800e71a <_printf_i+0x1f2>
 800e716:	1b40      	subs	r0, r0, r5
 800e718:	6060      	str	r0, [r4, #4]
 800e71a:	6863      	ldr	r3, [r4, #4]
 800e71c:	6123      	str	r3, [r4, #16]
 800e71e:	2300      	movs	r3, #0
 800e720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e724:	e7a8      	b.n	800e678 <_printf_i+0x150>
 800e726:	6923      	ldr	r3, [r4, #16]
 800e728:	462a      	mov	r2, r5
 800e72a:	4649      	mov	r1, r9
 800e72c:	4640      	mov	r0, r8
 800e72e:	47d0      	blx	sl
 800e730:	3001      	adds	r0, #1
 800e732:	d0ab      	beq.n	800e68c <_printf_i+0x164>
 800e734:	6823      	ldr	r3, [r4, #0]
 800e736:	079b      	lsls	r3, r3, #30
 800e738:	d413      	bmi.n	800e762 <_printf_i+0x23a>
 800e73a:	68e0      	ldr	r0, [r4, #12]
 800e73c:	9b03      	ldr	r3, [sp, #12]
 800e73e:	4298      	cmp	r0, r3
 800e740:	bfb8      	it	lt
 800e742:	4618      	movlt	r0, r3
 800e744:	e7a4      	b.n	800e690 <_printf_i+0x168>
 800e746:	2301      	movs	r3, #1
 800e748:	4632      	mov	r2, r6
 800e74a:	4649      	mov	r1, r9
 800e74c:	4640      	mov	r0, r8
 800e74e:	47d0      	blx	sl
 800e750:	3001      	adds	r0, #1
 800e752:	d09b      	beq.n	800e68c <_printf_i+0x164>
 800e754:	3501      	adds	r5, #1
 800e756:	68e3      	ldr	r3, [r4, #12]
 800e758:	9903      	ldr	r1, [sp, #12]
 800e75a:	1a5b      	subs	r3, r3, r1
 800e75c:	42ab      	cmp	r3, r5
 800e75e:	dcf2      	bgt.n	800e746 <_printf_i+0x21e>
 800e760:	e7eb      	b.n	800e73a <_printf_i+0x212>
 800e762:	2500      	movs	r5, #0
 800e764:	f104 0619 	add.w	r6, r4, #25
 800e768:	e7f5      	b.n	800e756 <_printf_i+0x22e>
 800e76a:	bf00      	nop
 800e76c:	080120ce 	.word	0x080120ce
 800e770:	080120df 	.word	0x080120df

0800e774 <sniprintf>:
 800e774:	b40c      	push	{r2, r3}
 800e776:	b530      	push	{r4, r5, lr}
 800e778:	4b17      	ldr	r3, [pc, #92]	; (800e7d8 <sniprintf+0x64>)
 800e77a:	1e0c      	subs	r4, r1, #0
 800e77c:	681d      	ldr	r5, [r3, #0]
 800e77e:	b09d      	sub	sp, #116	; 0x74
 800e780:	da08      	bge.n	800e794 <sniprintf+0x20>
 800e782:	238b      	movs	r3, #139	; 0x8b
 800e784:	602b      	str	r3, [r5, #0]
 800e786:	f04f 30ff 	mov.w	r0, #4294967295
 800e78a:	b01d      	add	sp, #116	; 0x74
 800e78c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e790:	b002      	add	sp, #8
 800e792:	4770      	bx	lr
 800e794:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e798:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e79c:	bf14      	ite	ne
 800e79e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e7a2:	4623      	moveq	r3, r4
 800e7a4:	9304      	str	r3, [sp, #16]
 800e7a6:	9307      	str	r3, [sp, #28]
 800e7a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e7ac:	9002      	str	r0, [sp, #8]
 800e7ae:	9006      	str	r0, [sp, #24]
 800e7b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e7b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e7b6:	ab21      	add	r3, sp, #132	; 0x84
 800e7b8:	a902      	add	r1, sp, #8
 800e7ba:	4628      	mov	r0, r5
 800e7bc:	9301      	str	r3, [sp, #4]
 800e7be:	f001 fb8b 	bl	800fed8 <_svfiprintf_r>
 800e7c2:	1c43      	adds	r3, r0, #1
 800e7c4:	bfbc      	itt	lt
 800e7c6:	238b      	movlt	r3, #139	; 0x8b
 800e7c8:	602b      	strlt	r3, [r5, #0]
 800e7ca:	2c00      	cmp	r4, #0
 800e7cc:	d0dd      	beq.n	800e78a <sniprintf+0x16>
 800e7ce:	9b02      	ldr	r3, [sp, #8]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	701a      	strb	r2, [r3, #0]
 800e7d4:	e7d9      	b.n	800e78a <sniprintf+0x16>
 800e7d6:	bf00      	nop
 800e7d8:	20000100 	.word	0x20000100

0800e7dc <siprintf>:
 800e7dc:	b40e      	push	{r1, r2, r3}
 800e7de:	b500      	push	{lr}
 800e7e0:	b09c      	sub	sp, #112	; 0x70
 800e7e2:	ab1d      	add	r3, sp, #116	; 0x74
 800e7e4:	9002      	str	r0, [sp, #8]
 800e7e6:	9006      	str	r0, [sp, #24]
 800e7e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e7ec:	4809      	ldr	r0, [pc, #36]	; (800e814 <siprintf+0x38>)
 800e7ee:	9107      	str	r1, [sp, #28]
 800e7f0:	9104      	str	r1, [sp, #16]
 800e7f2:	4909      	ldr	r1, [pc, #36]	; (800e818 <siprintf+0x3c>)
 800e7f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7f8:	9105      	str	r1, [sp, #20]
 800e7fa:	6800      	ldr	r0, [r0, #0]
 800e7fc:	9301      	str	r3, [sp, #4]
 800e7fe:	a902      	add	r1, sp, #8
 800e800:	f001 fb6a 	bl	800fed8 <_svfiprintf_r>
 800e804:	9b02      	ldr	r3, [sp, #8]
 800e806:	2200      	movs	r2, #0
 800e808:	701a      	strb	r2, [r3, #0]
 800e80a:	b01c      	add	sp, #112	; 0x70
 800e80c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e810:	b003      	add	sp, #12
 800e812:	4770      	bx	lr
 800e814:	20000100 	.word	0x20000100
 800e818:	ffff0208 	.word	0xffff0208

0800e81c <quorem>:
 800e81c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e820:	6903      	ldr	r3, [r0, #16]
 800e822:	690c      	ldr	r4, [r1, #16]
 800e824:	42a3      	cmp	r3, r4
 800e826:	4607      	mov	r7, r0
 800e828:	f2c0 8081 	blt.w	800e92e <quorem+0x112>
 800e82c:	3c01      	subs	r4, #1
 800e82e:	f101 0814 	add.w	r8, r1, #20
 800e832:	f100 0514 	add.w	r5, r0, #20
 800e836:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e83a:	9301      	str	r3, [sp, #4]
 800e83c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e840:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e844:	3301      	adds	r3, #1
 800e846:	429a      	cmp	r2, r3
 800e848:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e84c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e850:	fbb2 f6f3 	udiv	r6, r2, r3
 800e854:	d331      	bcc.n	800e8ba <quorem+0x9e>
 800e856:	f04f 0e00 	mov.w	lr, #0
 800e85a:	4640      	mov	r0, r8
 800e85c:	46ac      	mov	ip, r5
 800e85e:	46f2      	mov	sl, lr
 800e860:	f850 2b04 	ldr.w	r2, [r0], #4
 800e864:	b293      	uxth	r3, r2
 800e866:	fb06 e303 	mla	r3, r6, r3, lr
 800e86a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e86e:	b29b      	uxth	r3, r3
 800e870:	ebaa 0303 	sub.w	r3, sl, r3
 800e874:	f8dc a000 	ldr.w	sl, [ip]
 800e878:	0c12      	lsrs	r2, r2, #16
 800e87a:	fa13 f38a 	uxtah	r3, r3, sl
 800e87e:	fb06 e202 	mla	r2, r6, r2, lr
 800e882:	9300      	str	r3, [sp, #0]
 800e884:	9b00      	ldr	r3, [sp, #0]
 800e886:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e88a:	b292      	uxth	r2, r2
 800e88c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e890:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e894:	f8bd 3000 	ldrh.w	r3, [sp]
 800e898:	4581      	cmp	r9, r0
 800e89a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e89e:	f84c 3b04 	str.w	r3, [ip], #4
 800e8a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e8a6:	d2db      	bcs.n	800e860 <quorem+0x44>
 800e8a8:	f855 300b 	ldr.w	r3, [r5, fp]
 800e8ac:	b92b      	cbnz	r3, 800e8ba <quorem+0x9e>
 800e8ae:	9b01      	ldr	r3, [sp, #4]
 800e8b0:	3b04      	subs	r3, #4
 800e8b2:	429d      	cmp	r5, r3
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	d32e      	bcc.n	800e916 <quorem+0xfa>
 800e8b8:	613c      	str	r4, [r7, #16]
 800e8ba:	4638      	mov	r0, r7
 800e8bc:	f001 f8b8 	bl	800fa30 <__mcmp>
 800e8c0:	2800      	cmp	r0, #0
 800e8c2:	db24      	blt.n	800e90e <quorem+0xf2>
 800e8c4:	3601      	adds	r6, #1
 800e8c6:	4628      	mov	r0, r5
 800e8c8:	f04f 0c00 	mov.w	ip, #0
 800e8cc:	f858 2b04 	ldr.w	r2, [r8], #4
 800e8d0:	f8d0 e000 	ldr.w	lr, [r0]
 800e8d4:	b293      	uxth	r3, r2
 800e8d6:	ebac 0303 	sub.w	r3, ip, r3
 800e8da:	0c12      	lsrs	r2, r2, #16
 800e8dc:	fa13 f38e 	uxtah	r3, r3, lr
 800e8e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e8e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e8e8:	b29b      	uxth	r3, r3
 800e8ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8ee:	45c1      	cmp	r9, r8
 800e8f0:	f840 3b04 	str.w	r3, [r0], #4
 800e8f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e8f8:	d2e8      	bcs.n	800e8cc <quorem+0xb0>
 800e8fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e8fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e902:	b922      	cbnz	r2, 800e90e <quorem+0xf2>
 800e904:	3b04      	subs	r3, #4
 800e906:	429d      	cmp	r5, r3
 800e908:	461a      	mov	r2, r3
 800e90a:	d30a      	bcc.n	800e922 <quorem+0x106>
 800e90c:	613c      	str	r4, [r7, #16]
 800e90e:	4630      	mov	r0, r6
 800e910:	b003      	add	sp, #12
 800e912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e916:	6812      	ldr	r2, [r2, #0]
 800e918:	3b04      	subs	r3, #4
 800e91a:	2a00      	cmp	r2, #0
 800e91c:	d1cc      	bne.n	800e8b8 <quorem+0x9c>
 800e91e:	3c01      	subs	r4, #1
 800e920:	e7c7      	b.n	800e8b2 <quorem+0x96>
 800e922:	6812      	ldr	r2, [r2, #0]
 800e924:	3b04      	subs	r3, #4
 800e926:	2a00      	cmp	r2, #0
 800e928:	d1f0      	bne.n	800e90c <quorem+0xf0>
 800e92a:	3c01      	subs	r4, #1
 800e92c:	e7eb      	b.n	800e906 <quorem+0xea>
 800e92e:	2000      	movs	r0, #0
 800e930:	e7ee      	b.n	800e910 <quorem+0xf4>
 800e932:	0000      	movs	r0, r0
 800e934:	0000      	movs	r0, r0
	...

0800e938 <_dtoa_r>:
 800e938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e93c:	ed2d 8b04 	vpush	{d8-d9}
 800e940:	ec57 6b10 	vmov	r6, r7, d0
 800e944:	b093      	sub	sp, #76	; 0x4c
 800e946:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e948:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e94c:	9106      	str	r1, [sp, #24]
 800e94e:	ee10 aa10 	vmov	sl, s0
 800e952:	4604      	mov	r4, r0
 800e954:	9209      	str	r2, [sp, #36]	; 0x24
 800e956:	930c      	str	r3, [sp, #48]	; 0x30
 800e958:	46bb      	mov	fp, r7
 800e95a:	b975      	cbnz	r5, 800e97a <_dtoa_r+0x42>
 800e95c:	2010      	movs	r0, #16
 800e95e:	f000 fddd 	bl	800f51c <malloc>
 800e962:	4602      	mov	r2, r0
 800e964:	6260      	str	r0, [r4, #36]	; 0x24
 800e966:	b920      	cbnz	r0, 800e972 <_dtoa_r+0x3a>
 800e968:	4ba7      	ldr	r3, [pc, #668]	; (800ec08 <_dtoa_r+0x2d0>)
 800e96a:	21ea      	movs	r1, #234	; 0xea
 800e96c:	48a7      	ldr	r0, [pc, #668]	; (800ec0c <_dtoa_r+0x2d4>)
 800e96e:	f001 fbc3 	bl	80100f8 <__assert_func>
 800e972:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e976:	6005      	str	r5, [r0, #0]
 800e978:	60c5      	str	r5, [r0, #12]
 800e97a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e97c:	6819      	ldr	r1, [r3, #0]
 800e97e:	b151      	cbz	r1, 800e996 <_dtoa_r+0x5e>
 800e980:	685a      	ldr	r2, [r3, #4]
 800e982:	604a      	str	r2, [r1, #4]
 800e984:	2301      	movs	r3, #1
 800e986:	4093      	lsls	r3, r2
 800e988:	608b      	str	r3, [r1, #8]
 800e98a:	4620      	mov	r0, r4
 800e98c:	f000 fe0e 	bl	800f5ac <_Bfree>
 800e990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e992:	2200      	movs	r2, #0
 800e994:	601a      	str	r2, [r3, #0]
 800e996:	1e3b      	subs	r3, r7, #0
 800e998:	bfaa      	itet	ge
 800e99a:	2300      	movge	r3, #0
 800e99c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e9a0:	f8c8 3000 	strge.w	r3, [r8]
 800e9a4:	4b9a      	ldr	r3, [pc, #616]	; (800ec10 <_dtoa_r+0x2d8>)
 800e9a6:	bfbc      	itt	lt
 800e9a8:	2201      	movlt	r2, #1
 800e9aa:	f8c8 2000 	strlt.w	r2, [r8]
 800e9ae:	ea33 030b 	bics.w	r3, r3, fp
 800e9b2:	d11b      	bne.n	800e9ec <_dtoa_r+0xb4>
 800e9b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9b6:	f242 730f 	movw	r3, #9999	; 0x270f
 800e9ba:	6013      	str	r3, [r2, #0]
 800e9bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e9c0:	4333      	orrs	r3, r6
 800e9c2:	f000 8592 	beq.w	800f4ea <_dtoa_r+0xbb2>
 800e9c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9c8:	b963      	cbnz	r3, 800e9e4 <_dtoa_r+0xac>
 800e9ca:	4b92      	ldr	r3, [pc, #584]	; (800ec14 <_dtoa_r+0x2dc>)
 800e9cc:	e022      	b.n	800ea14 <_dtoa_r+0xdc>
 800e9ce:	4b92      	ldr	r3, [pc, #584]	; (800ec18 <_dtoa_r+0x2e0>)
 800e9d0:	9301      	str	r3, [sp, #4]
 800e9d2:	3308      	adds	r3, #8
 800e9d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e9d6:	6013      	str	r3, [r2, #0]
 800e9d8:	9801      	ldr	r0, [sp, #4]
 800e9da:	b013      	add	sp, #76	; 0x4c
 800e9dc:	ecbd 8b04 	vpop	{d8-d9}
 800e9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e4:	4b8b      	ldr	r3, [pc, #556]	; (800ec14 <_dtoa_r+0x2dc>)
 800e9e6:	9301      	str	r3, [sp, #4]
 800e9e8:	3303      	adds	r3, #3
 800e9ea:	e7f3      	b.n	800e9d4 <_dtoa_r+0x9c>
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	4650      	mov	r0, sl
 800e9f2:	4659      	mov	r1, fp
 800e9f4:	f7f2 f868 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9f8:	ec4b ab19 	vmov	d9, sl, fp
 800e9fc:	4680      	mov	r8, r0
 800e9fe:	b158      	cbz	r0, 800ea18 <_dtoa_r+0xe0>
 800ea00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea02:	2301      	movs	r3, #1
 800ea04:	6013      	str	r3, [r2, #0]
 800ea06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	f000 856b 	beq.w	800f4e4 <_dtoa_r+0xbac>
 800ea0e:	4883      	ldr	r0, [pc, #524]	; (800ec1c <_dtoa_r+0x2e4>)
 800ea10:	6018      	str	r0, [r3, #0]
 800ea12:	1e43      	subs	r3, r0, #1
 800ea14:	9301      	str	r3, [sp, #4]
 800ea16:	e7df      	b.n	800e9d8 <_dtoa_r+0xa0>
 800ea18:	ec4b ab10 	vmov	d0, sl, fp
 800ea1c:	aa10      	add	r2, sp, #64	; 0x40
 800ea1e:	a911      	add	r1, sp, #68	; 0x44
 800ea20:	4620      	mov	r0, r4
 800ea22:	f001 f8ab 	bl	800fb7c <__d2b>
 800ea26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ea2a:	ee08 0a10 	vmov	s16, r0
 800ea2e:	2d00      	cmp	r5, #0
 800ea30:	f000 8084 	beq.w	800eb3c <_dtoa_r+0x204>
 800ea34:	ee19 3a90 	vmov	r3, s19
 800ea38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ea40:	4656      	mov	r6, sl
 800ea42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ea46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ea4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ea4e:	4b74      	ldr	r3, [pc, #464]	; (800ec20 <_dtoa_r+0x2e8>)
 800ea50:	2200      	movs	r2, #0
 800ea52:	4630      	mov	r0, r6
 800ea54:	4639      	mov	r1, r7
 800ea56:	f7f1 fc17 	bl	8000288 <__aeabi_dsub>
 800ea5a:	a365      	add	r3, pc, #404	; (adr r3, 800ebf0 <_dtoa_r+0x2b8>)
 800ea5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea60:	f7f1 fdca 	bl	80005f8 <__aeabi_dmul>
 800ea64:	a364      	add	r3, pc, #400	; (adr r3, 800ebf8 <_dtoa_r+0x2c0>)
 800ea66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6a:	f7f1 fc0f 	bl	800028c <__adddf3>
 800ea6e:	4606      	mov	r6, r0
 800ea70:	4628      	mov	r0, r5
 800ea72:	460f      	mov	r7, r1
 800ea74:	f7f1 fd56 	bl	8000524 <__aeabi_i2d>
 800ea78:	a361      	add	r3, pc, #388	; (adr r3, 800ec00 <_dtoa_r+0x2c8>)
 800ea7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea7e:	f7f1 fdbb 	bl	80005f8 <__aeabi_dmul>
 800ea82:	4602      	mov	r2, r0
 800ea84:	460b      	mov	r3, r1
 800ea86:	4630      	mov	r0, r6
 800ea88:	4639      	mov	r1, r7
 800ea8a:	f7f1 fbff 	bl	800028c <__adddf3>
 800ea8e:	4606      	mov	r6, r0
 800ea90:	460f      	mov	r7, r1
 800ea92:	f7f2 f861 	bl	8000b58 <__aeabi_d2iz>
 800ea96:	2200      	movs	r2, #0
 800ea98:	9000      	str	r0, [sp, #0]
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	4630      	mov	r0, r6
 800ea9e:	4639      	mov	r1, r7
 800eaa0:	f7f2 f81c 	bl	8000adc <__aeabi_dcmplt>
 800eaa4:	b150      	cbz	r0, 800eabc <_dtoa_r+0x184>
 800eaa6:	9800      	ldr	r0, [sp, #0]
 800eaa8:	f7f1 fd3c 	bl	8000524 <__aeabi_i2d>
 800eaac:	4632      	mov	r2, r6
 800eaae:	463b      	mov	r3, r7
 800eab0:	f7f2 f80a 	bl	8000ac8 <__aeabi_dcmpeq>
 800eab4:	b910      	cbnz	r0, 800eabc <_dtoa_r+0x184>
 800eab6:	9b00      	ldr	r3, [sp, #0]
 800eab8:	3b01      	subs	r3, #1
 800eaba:	9300      	str	r3, [sp, #0]
 800eabc:	9b00      	ldr	r3, [sp, #0]
 800eabe:	2b16      	cmp	r3, #22
 800eac0:	d85a      	bhi.n	800eb78 <_dtoa_r+0x240>
 800eac2:	9a00      	ldr	r2, [sp, #0]
 800eac4:	4b57      	ldr	r3, [pc, #348]	; (800ec24 <_dtoa_r+0x2ec>)
 800eac6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eace:	ec51 0b19 	vmov	r0, r1, d9
 800ead2:	f7f2 f803 	bl	8000adc <__aeabi_dcmplt>
 800ead6:	2800      	cmp	r0, #0
 800ead8:	d050      	beq.n	800eb7c <_dtoa_r+0x244>
 800eada:	9b00      	ldr	r3, [sp, #0]
 800eadc:	3b01      	subs	r3, #1
 800eade:	9300      	str	r3, [sp, #0]
 800eae0:	2300      	movs	r3, #0
 800eae2:	930b      	str	r3, [sp, #44]	; 0x2c
 800eae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eae6:	1b5d      	subs	r5, r3, r5
 800eae8:	1e6b      	subs	r3, r5, #1
 800eaea:	9305      	str	r3, [sp, #20]
 800eaec:	bf45      	ittet	mi
 800eaee:	f1c5 0301 	rsbmi	r3, r5, #1
 800eaf2:	9304      	strmi	r3, [sp, #16]
 800eaf4:	2300      	movpl	r3, #0
 800eaf6:	2300      	movmi	r3, #0
 800eaf8:	bf4c      	ite	mi
 800eafa:	9305      	strmi	r3, [sp, #20]
 800eafc:	9304      	strpl	r3, [sp, #16]
 800eafe:	9b00      	ldr	r3, [sp, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	db3d      	blt.n	800eb80 <_dtoa_r+0x248>
 800eb04:	9b05      	ldr	r3, [sp, #20]
 800eb06:	9a00      	ldr	r2, [sp, #0]
 800eb08:	920a      	str	r2, [sp, #40]	; 0x28
 800eb0a:	4413      	add	r3, r2
 800eb0c:	9305      	str	r3, [sp, #20]
 800eb0e:	2300      	movs	r3, #0
 800eb10:	9307      	str	r3, [sp, #28]
 800eb12:	9b06      	ldr	r3, [sp, #24]
 800eb14:	2b09      	cmp	r3, #9
 800eb16:	f200 8089 	bhi.w	800ec2c <_dtoa_r+0x2f4>
 800eb1a:	2b05      	cmp	r3, #5
 800eb1c:	bfc4      	itt	gt
 800eb1e:	3b04      	subgt	r3, #4
 800eb20:	9306      	strgt	r3, [sp, #24]
 800eb22:	9b06      	ldr	r3, [sp, #24]
 800eb24:	f1a3 0302 	sub.w	r3, r3, #2
 800eb28:	bfcc      	ite	gt
 800eb2a:	2500      	movgt	r5, #0
 800eb2c:	2501      	movle	r5, #1
 800eb2e:	2b03      	cmp	r3, #3
 800eb30:	f200 8087 	bhi.w	800ec42 <_dtoa_r+0x30a>
 800eb34:	e8df f003 	tbb	[pc, r3]
 800eb38:	59383a2d 	.word	0x59383a2d
 800eb3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800eb40:	441d      	add	r5, r3
 800eb42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eb46:	2b20      	cmp	r3, #32
 800eb48:	bfc1      	itttt	gt
 800eb4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eb4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800eb52:	fa0b f303 	lslgt.w	r3, fp, r3
 800eb56:	fa26 f000 	lsrgt.w	r0, r6, r0
 800eb5a:	bfda      	itte	le
 800eb5c:	f1c3 0320 	rsble	r3, r3, #32
 800eb60:	fa06 f003 	lslle.w	r0, r6, r3
 800eb64:	4318      	orrgt	r0, r3
 800eb66:	f7f1 fccd 	bl	8000504 <__aeabi_ui2d>
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	4606      	mov	r6, r0
 800eb6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800eb72:	3d01      	subs	r5, #1
 800eb74:	930e      	str	r3, [sp, #56]	; 0x38
 800eb76:	e76a      	b.n	800ea4e <_dtoa_r+0x116>
 800eb78:	2301      	movs	r3, #1
 800eb7a:	e7b2      	b.n	800eae2 <_dtoa_r+0x1aa>
 800eb7c:	900b      	str	r0, [sp, #44]	; 0x2c
 800eb7e:	e7b1      	b.n	800eae4 <_dtoa_r+0x1ac>
 800eb80:	9b04      	ldr	r3, [sp, #16]
 800eb82:	9a00      	ldr	r2, [sp, #0]
 800eb84:	1a9b      	subs	r3, r3, r2
 800eb86:	9304      	str	r3, [sp, #16]
 800eb88:	4253      	negs	r3, r2
 800eb8a:	9307      	str	r3, [sp, #28]
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	930a      	str	r3, [sp, #40]	; 0x28
 800eb90:	e7bf      	b.n	800eb12 <_dtoa_r+0x1da>
 800eb92:	2300      	movs	r3, #0
 800eb94:	9308      	str	r3, [sp, #32]
 800eb96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	dc55      	bgt.n	800ec48 <_dtoa_r+0x310>
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eba2:	461a      	mov	r2, r3
 800eba4:	9209      	str	r2, [sp, #36]	; 0x24
 800eba6:	e00c      	b.n	800ebc2 <_dtoa_r+0x28a>
 800eba8:	2301      	movs	r3, #1
 800ebaa:	e7f3      	b.n	800eb94 <_dtoa_r+0x25c>
 800ebac:	2300      	movs	r3, #0
 800ebae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebb0:	9308      	str	r3, [sp, #32]
 800ebb2:	9b00      	ldr	r3, [sp, #0]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	9302      	str	r3, [sp, #8]
 800ebb8:	3301      	adds	r3, #1
 800ebba:	2b01      	cmp	r3, #1
 800ebbc:	9303      	str	r3, [sp, #12]
 800ebbe:	bfb8      	it	lt
 800ebc0:	2301      	movlt	r3, #1
 800ebc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	6042      	str	r2, [r0, #4]
 800ebc8:	2204      	movs	r2, #4
 800ebca:	f102 0614 	add.w	r6, r2, #20
 800ebce:	429e      	cmp	r6, r3
 800ebd0:	6841      	ldr	r1, [r0, #4]
 800ebd2:	d93d      	bls.n	800ec50 <_dtoa_r+0x318>
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	f000 fca9 	bl	800f52c <_Balloc>
 800ebda:	9001      	str	r0, [sp, #4]
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	d13b      	bne.n	800ec58 <_dtoa_r+0x320>
 800ebe0:	4b11      	ldr	r3, [pc, #68]	; (800ec28 <_dtoa_r+0x2f0>)
 800ebe2:	4602      	mov	r2, r0
 800ebe4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ebe8:	e6c0      	b.n	800e96c <_dtoa_r+0x34>
 800ebea:	2301      	movs	r3, #1
 800ebec:	e7df      	b.n	800ebae <_dtoa_r+0x276>
 800ebee:	bf00      	nop
 800ebf0:	636f4361 	.word	0x636f4361
 800ebf4:	3fd287a7 	.word	0x3fd287a7
 800ebf8:	8b60c8b3 	.word	0x8b60c8b3
 800ebfc:	3fc68a28 	.word	0x3fc68a28
 800ec00:	509f79fb 	.word	0x509f79fb
 800ec04:	3fd34413 	.word	0x3fd34413
 800ec08:	080120fd 	.word	0x080120fd
 800ec0c:	08012114 	.word	0x08012114
 800ec10:	7ff00000 	.word	0x7ff00000
 800ec14:	080120f9 	.word	0x080120f9
 800ec18:	080120f0 	.word	0x080120f0
 800ec1c:	080120cd 	.word	0x080120cd
 800ec20:	3ff80000 	.word	0x3ff80000
 800ec24:	08012208 	.word	0x08012208
 800ec28:	0801216f 	.word	0x0801216f
 800ec2c:	2501      	movs	r5, #1
 800ec2e:	2300      	movs	r3, #0
 800ec30:	9306      	str	r3, [sp, #24]
 800ec32:	9508      	str	r5, [sp, #32]
 800ec34:	f04f 33ff 	mov.w	r3, #4294967295
 800ec38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	2312      	movs	r3, #18
 800ec40:	e7b0      	b.n	800eba4 <_dtoa_r+0x26c>
 800ec42:	2301      	movs	r3, #1
 800ec44:	9308      	str	r3, [sp, #32]
 800ec46:	e7f5      	b.n	800ec34 <_dtoa_r+0x2fc>
 800ec48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ec4e:	e7b8      	b.n	800ebc2 <_dtoa_r+0x28a>
 800ec50:	3101      	adds	r1, #1
 800ec52:	6041      	str	r1, [r0, #4]
 800ec54:	0052      	lsls	r2, r2, #1
 800ec56:	e7b8      	b.n	800ebca <_dtoa_r+0x292>
 800ec58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec5a:	9a01      	ldr	r2, [sp, #4]
 800ec5c:	601a      	str	r2, [r3, #0]
 800ec5e:	9b03      	ldr	r3, [sp, #12]
 800ec60:	2b0e      	cmp	r3, #14
 800ec62:	f200 809d 	bhi.w	800eda0 <_dtoa_r+0x468>
 800ec66:	2d00      	cmp	r5, #0
 800ec68:	f000 809a 	beq.w	800eda0 <_dtoa_r+0x468>
 800ec6c:	9b00      	ldr	r3, [sp, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	dd32      	ble.n	800ecd8 <_dtoa_r+0x3a0>
 800ec72:	4ab7      	ldr	r2, [pc, #732]	; (800ef50 <_dtoa_r+0x618>)
 800ec74:	f003 030f 	and.w	r3, r3, #15
 800ec78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ec7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ec80:	9b00      	ldr	r3, [sp, #0]
 800ec82:	05d8      	lsls	r0, r3, #23
 800ec84:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ec88:	d516      	bpl.n	800ecb8 <_dtoa_r+0x380>
 800ec8a:	4bb2      	ldr	r3, [pc, #712]	; (800ef54 <_dtoa_r+0x61c>)
 800ec8c:	ec51 0b19 	vmov	r0, r1, d9
 800ec90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ec94:	f7f1 fdda 	bl	800084c <__aeabi_ddiv>
 800ec98:	f007 070f 	and.w	r7, r7, #15
 800ec9c:	4682      	mov	sl, r0
 800ec9e:	468b      	mov	fp, r1
 800eca0:	2503      	movs	r5, #3
 800eca2:	4eac      	ldr	r6, [pc, #688]	; (800ef54 <_dtoa_r+0x61c>)
 800eca4:	b957      	cbnz	r7, 800ecbc <_dtoa_r+0x384>
 800eca6:	4642      	mov	r2, r8
 800eca8:	464b      	mov	r3, r9
 800ecaa:	4650      	mov	r0, sl
 800ecac:	4659      	mov	r1, fp
 800ecae:	f7f1 fdcd 	bl	800084c <__aeabi_ddiv>
 800ecb2:	4682      	mov	sl, r0
 800ecb4:	468b      	mov	fp, r1
 800ecb6:	e028      	b.n	800ed0a <_dtoa_r+0x3d2>
 800ecb8:	2502      	movs	r5, #2
 800ecba:	e7f2      	b.n	800eca2 <_dtoa_r+0x36a>
 800ecbc:	07f9      	lsls	r1, r7, #31
 800ecbe:	d508      	bpl.n	800ecd2 <_dtoa_r+0x39a>
 800ecc0:	4640      	mov	r0, r8
 800ecc2:	4649      	mov	r1, r9
 800ecc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ecc8:	f7f1 fc96 	bl	80005f8 <__aeabi_dmul>
 800eccc:	3501      	adds	r5, #1
 800ecce:	4680      	mov	r8, r0
 800ecd0:	4689      	mov	r9, r1
 800ecd2:	107f      	asrs	r7, r7, #1
 800ecd4:	3608      	adds	r6, #8
 800ecd6:	e7e5      	b.n	800eca4 <_dtoa_r+0x36c>
 800ecd8:	f000 809b 	beq.w	800ee12 <_dtoa_r+0x4da>
 800ecdc:	9b00      	ldr	r3, [sp, #0]
 800ecde:	4f9d      	ldr	r7, [pc, #628]	; (800ef54 <_dtoa_r+0x61c>)
 800ece0:	425e      	negs	r6, r3
 800ece2:	4b9b      	ldr	r3, [pc, #620]	; (800ef50 <_dtoa_r+0x618>)
 800ece4:	f006 020f 	and.w	r2, r6, #15
 800ece8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ecec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf0:	ec51 0b19 	vmov	r0, r1, d9
 800ecf4:	f7f1 fc80 	bl	80005f8 <__aeabi_dmul>
 800ecf8:	1136      	asrs	r6, r6, #4
 800ecfa:	4682      	mov	sl, r0
 800ecfc:	468b      	mov	fp, r1
 800ecfe:	2300      	movs	r3, #0
 800ed00:	2502      	movs	r5, #2
 800ed02:	2e00      	cmp	r6, #0
 800ed04:	d17a      	bne.n	800edfc <_dtoa_r+0x4c4>
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d1d3      	bne.n	800ecb2 <_dtoa_r+0x37a>
 800ed0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	f000 8082 	beq.w	800ee16 <_dtoa_r+0x4de>
 800ed12:	4b91      	ldr	r3, [pc, #580]	; (800ef58 <_dtoa_r+0x620>)
 800ed14:	2200      	movs	r2, #0
 800ed16:	4650      	mov	r0, sl
 800ed18:	4659      	mov	r1, fp
 800ed1a:	f7f1 fedf 	bl	8000adc <__aeabi_dcmplt>
 800ed1e:	2800      	cmp	r0, #0
 800ed20:	d079      	beq.n	800ee16 <_dtoa_r+0x4de>
 800ed22:	9b03      	ldr	r3, [sp, #12]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d076      	beq.n	800ee16 <_dtoa_r+0x4de>
 800ed28:	9b02      	ldr	r3, [sp, #8]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	dd36      	ble.n	800ed9c <_dtoa_r+0x464>
 800ed2e:	9b00      	ldr	r3, [sp, #0]
 800ed30:	4650      	mov	r0, sl
 800ed32:	4659      	mov	r1, fp
 800ed34:	1e5f      	subs	r7, r3, #1
 800ed36:	2200      	movs	r2, #0
 800ed38:	4b88      	ldr	r3, [pc, #544]	; (800ef5c <_dtoa_r+0x624>)
 800ed3a:	f7f1 fc5d 	bl	80005f8 <__aeabi_dmul>
 800ed3e:	9e02      	ldr	r6, [sp, #8]
 800ed40:	4682      	mov	sl, r0
 800ed42:	468b      	mov	fp, r1
 800ed44:	3501      	adds	r5, #1
 800ed46:	4628      	mov	r0, r5
 800ed48:	f7f1 fbec 	bl	8000524 <__aeabi_i2d>
 800ed4c:	4652      	mov	r2, sl
 800ed4e:	465b      	mov	r3, fp
 800ed50:	f7f1 fc52 	bl	80005f8 <__aeabi_dmul>
 800ed54:	4b82      	ldr	r3, [pc, #520]	; (800ef60 <_dtoa_r+0x628>)
 800ed56:	2200      	movs	r2, #0
 800ed58:	f7f1 fa98 	bl	800028c <__adddf3>
 800ed5c:	46d0      	mov	r8, sl
 800ed5e:	46d9      	mov	r9, fp
 800ed60:	4682      	mov	sl, r0
 800ed62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ed66:	2e00      	cmp	r6, #0
 800ed68:	d158      	bne.n	800ee1c <_dtoa_r+0x4e4>
 800ed6a:	4b7e      	ldr	r3, [pc, #504]	; (800ef64 <_dtoa_r+0x62c>)
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	4640      	mov	r0, r8
 800ed70:	4649      	mov	r1, r9
 800ed72:	f7f1 fa89 	bl	8000288 <__aeabi_dsub>
 800ed76:	4652      	mov	r2, sl
 800ed78:	465b      	mov	r3, fp
 800ed7a:	4680      	mov	r8, r0
 800ed7c:	4689      	mov	r9, r1
 800ed7e:	f7f1 fecb 	bl	8000b18 <__aeabi_dcmpgt>
 800ed82:	2800      	cmp	r0, #0
 800ed84:	f040 8295 	bne.w	800f2b2 <_dtoa_r+0x97a>
 800ed88:	4652      	mov	r2, sl
 800ed8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ed8e:	4640      	mov	r0, r8
 800ed90:	4649      	mov	r1, r9
 800ed92:	f7f1 fea3 	bl	8000adc <__aeabi_dcmplt>
 800ed96:	2800      	cmp	r0, #0
 800ed98:	f040 8289 	bne.w	800f2ae <_dtoa_r+0x976>
 800ed9c:	ec5b ab19 	vmov	sl, fp, d9
 800eda0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	f2c0 8148 	blt.w	800f038 <_dtoa_r+0x700>
 800eda8:	9a00      	ldr	r2, [sp, #0]
 800edaa:	2a0e      	cmp	r2, #14
 800edac:	f300 8144 	bgt.w	800f038 <_dtoa_r+0x700>
 800edb0:	4b67      	ldr	r3, [pc, #412]	; (800ef50 <_dtoa_r+0x618>)
 800edb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800edba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	f280 80d5 	bge.w	800ef6c <_dtoa_r+0x634>
 800edc2:	9b03      	ldr	r3, [sp, #12]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f300 80d1 	bgt.w	800ef6c <_dtoa_r+0x634>
 800edca:	f040 826f 	bne.w	800f2ac <_dtoa_r+0x974>
 800edce:	4b65      	ldr	r3, [pc, #404]	; (800ef64 <_dtoa_r+0x62c>)
 800edd0:	2200      	movs	r2, #0
 800edd2:	4640      	mov	r0, r8
 800edd4:	4649      	mov	r1, r9
 800edd6:	f7f1 fc0f 	bl	80005f8 <__aeabi_dmul>
 800edda:	4652      	mov	r2, sl
 800eddc:	465b      	mov	r3, fp
 800edde:	f7f1 fe91 	bl	8000b04 <__aeabi_dcmpge>
 800ede2:	9e03      	ldr	r6, [sp, #12]
 800ede4:	4637      	mov	r7, r6
 800ede6:	2800      	cmp	r0, #0
 800ede8:	f040 8245 	bne.w	800f276 <_dtoa_r+0x93e>
 800edec:	9d01      	ldr	r5, [sp, #4]
 800edee:	2331      	movs	r3, #49	; 0x31
 800edf0:	f805 3b01 	strb.w	r3, [r5], #1
 800edf4:	9b00      	ldr	r3, [sp, #0]
 800edf6:	3301      	adds	r3, #1
 800edf8:	9300      	str	r3, [sp, #0]
 800edfa:	e240      	b.n	800f27e <_dtoa_r+0x946>
 800edfc:	07f2      	lsls	r2, r6, #31
 800edfe:	d505      	bpl.n	800ee0c <_dtoa_r+0x4d4>
 800ee00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee04:	f7f1 fbf8 	bl	80005f8 <__aeabi_dmul>
 800ee08:	3501      	adds	r5, #1
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	1076      	asrs	r6, r6, #1
 800ee0e:	3708      	adds	r7, #8
 800ee10:	e777      	b.n	800ed02 <_dtoa_r+0x3ca>
 800ee12:	2502      	movs	r5, #2
 800ee14:	e779      	b.n	800ed0a <_dtoa_r+0x3d2>
 800ee16:	9f00      	ldr	r7, [sp, #0]
 800ee18:	9e03      	ldr	r6, [sp, #12]
 800ee1a:	e794      	b.n	800ed46 <_dtoa_r+0x40e>
 800ee1c:	9901      	ldr	r1, [sp, #4]
 800ee1e:	4b4c      	ldr	r3, [pc, #304]	; (800ef50 <_dtoa_r+0x618>)
 800ee20:	4431      	add	r1, r6
 800ee22:	910d      	str	r1, [sp, #52]	; 0x34
 800ee24:	9908      	ldr	r1, [sp, #32]
 800ee26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ee2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ee2e:	2900      	cmp	r1, #0
 800ee30:	d043      	beq.n	800eeba <_dtoa_r+0x582>
 800ee32:	494d      	ldr	r1, [pc, #308]	; (800ef68 <_dtoa_r+0x630>)
 800ee34:	2000      	movs	r0, #0
 800ee36:	f7f1 fd09 	bl	800084c <__aeabi_ddiv>
 800ee3a:	4652      	mov	r2, sl
 800ee3c:	465b      	mov	r3, fp
 800ee3e:	f7f1 fa23 	bl	8000288 <__aeabi_dsub>
 800ee42:	9d01      	ldr	r5, [sp, #4]
 800ee44:	4682      	mov	sl, r0
 800ee46:	468b      	mov	fp, r1
 800ee48:	4649      	mov	r1, r9
 800ee4a:	4640      	mov	r0, r8
 800ee4c:	f7f1 fe84 	bl	8000b58 <__aeabi_d2iz>
 800ee50:	4606      	mov	r6, r0
 800ee52:	f7f1 fb67 	bl	8000524 <__aeabi_i2d>
 800ee56:	4602      	mov	r2, r0
 800ee58:	460b      	mov	r3, r1
 800ee5a:	4640      	mov	r0, r8
 800ee5c:	4649      	mov	r1, r9
 800ee5e:	f7f1 fa13 	bl	8000288 <__aeabi_dsub>
 800ee62:	3630      	adds	r6, #48	; 0x30
 800ee64:	f805 6b01 	strb.w	r6, [r5], #1
 800ee68:	4652      	mov	r2, sl
 800ee6a:	465b      	mov	r3, fp
 800ee6c:	4680      	mov	r8, r0
 800ee6e:	4689      	mov	r9, r1
 800ee70:	f7f1 fe34 	bl	8000adc <__aeabi_dcmplt>
 800ee74:	2800      	cmp	r0, #0
 800ee76:	d163      	bne.n	800ef40 <_dtoa_r+0x608>
 800ee78:	4642      	mov	r2, r8
 800ee7a:	464b      	mov	r3, r9
 800ee7c:	4936      	ldr	r1, [pc, #216]	; (800ef58 <_dtoa_r+0x620>)
 800ee7e:	2000      	movs	r0, #0
 800ee80:	f7f1 fa02 	bl	8000288 <__aeabi_dsub>
 800ee84:	4652      	mov	r2, sl
 800ee86:	465b      	mov	r3, fp
 800ee88:	f7f1 fe28 	bl	8000adc <__aeabi_dcmplt>
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	f040 80b5 	bne.w	800effc <_dtoa_r+0x6c4>
 800ee92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee94:	429d      	cmp	r5, r3
 800ee96:	d081      	beq.n	800ed9c <_dtoa_r+0x464>
 800ee98:	4b30      	ldr	r3, [pc, #192]	; (800ef5c <_dtoa_r+0x624>)
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	4650      	mov	r0, sl
 800ee9e:	4659      	mov	r1, fp
 800eea0:	f7f1 fbaa 	bl	80005f8 <__aeabi_dmul>
 800eea4:	4b2d      	ldr	r3, [pc, #180]	; (800ef5c <_dtoa_r+0x624>)
 800eea6:	4682      	mov	sl, r0
 800eea8:	468b      	mov	fp, r1
 800eeaa:	4640      	mov	r0, r8
 800eeac:	4649      	mov	r1, r9
 800eeae:	2200      	movs	r2, #0
 800eeb0:	f7f1 fba2 	bl	80005f8 <__aeabi_dmul>
 800eeb4:	4680      	mov	r8, r0
 800eeb6:	4689      	mov	r9, r1
 800eeb8:	e7c6      	b.n	800ee48 <_dtoa_r+0x510>
 800eeba:	4650      	mov	r0, sl
 800eebc:	4659      	mov	r1, fp
 800eebe:	f7f1 fb9b 	bl	80005f8 <__aeabi_dmul>
 800eec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eec4:	9d01      	ldr	r5, [sp, #4]
 800eec6:	930f      	str	r3, [sp, #60]	; 0x3c
 800eec8:	4682      	mov	sl, r0
 800eeca:	468b      	mov	fp, r1
 800eecc:	4649      	mov	r1, r9
 800eece:	4640      	mov	r0, r8
 800eed0:	f7f1 fe42 	bl	8000b58 <__aeabi_d2iz>
 800eed4:	4606      	mov	r6, r0
 800eed6:	f7f1 fb25 	bl	8000524 <__aeabi_i2d>
 800eeda:	3630      	adds	r6, #48	; 0x30
 800eedc:	4602      	mov	r2, r0
 800eede:	460b      	mov	r3, r1
 800eee0:	4640      	mov	r0, r8
 800eee2:	4649      	mov	r1, r9
 800eee4:	f7f1 f9d0 	bl	8000288 <__aeabi_dsub>
 800eee8:	f805 6b01 	strb.w	r6, [r5], #1
 800eeec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eeee:	429d      	cmp	r5, r3
 800eef0:	4680      	mov	r8, r0
 800eef2:	4689      	mov	r9, r1
 800eef4:	f04f 0200 	mov.w	r2, #0
 800eef8:	d124      	bne.n	800ef44 <_dtoa_r+0x60c>
 800eefa:	4b1b      	ldr	r3, [pc, #108]	; (800ef68 <_dtoa_r+0x630>)
 800eefc:	4650      	mov	r0, sl
 800eefe:	4659      	mov	r1, fp
 800ef00:	f7f1 f9c4 	bl	800028c <__adddf3>
 800ef04:	4602      	mov	r2, r0
 800ef06:	460b      	mov	r3, r1
 800ef08:	4640      	mov	r0, r8
 800ef0a:	4649      	mov	r1, r9
 800ef0c:	f7f1 fe04 	bl	8000b18 <__aeabi_dcmpgt>
 800ef10:	2800      	cmp	r0, #0
 800ef12:	d173      	bne.n	800effc <_dtoa_r+0x6c4>
 800ef14:	4652      	mov	r2, sl
 800ef16:	465b      	mov	r3, fp
 800ef18:	4913      	ldr	r1, [pc, #76]	; (800ef68 <_dtoa_r+0x630>)
 800ef1a:	2000      	movs	r0, #0
 800ef1c:	f7f1 f9b4 	bl	8000288 <__aeabi_dsub>
 800ef20:	4602      	mov	r2, r0
 800ef22:	460b      	mov	r3, r1
 800ef24:	4640      	mov	r0, r8
 800ef26:	4649      	mov	r1, r9
 800ef28:	f7f1 fdd8 	bl	8000adc <__aeabi_dcmplt>
 800ef2c:	2800      	cmp	r0, #0
 800ef2e:	f43f af35 	beq.w	800ed9c <_dtoa_r+0x464>
 800ef32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ef34:	1e6b      	subs	r3, r5, #1
 800ef36:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ef3c:	2b30      	cmp	r3, #48	; 0x30
 800ef3e:	d0f8      	beq.n	800ef32 <_dtoa_r+0x5fa>
 800ef40:	9700      	str	r7, [sp, #0]
 800ef42:	e049      	b.n	800efd8 <_dtoa_r+0x6a0>
 800ef44:	4b05      	ldr	r3, [pc, #20]	; (800ef5c <_dtoa_r+0x624>)
 800ef46:	f7f1 fb57 	bl	80005f8 <__aeabi_dmul>
 800ef4a:	4680      	mov	r8, r0
 800ef4c:	4689      	mov	r9, r1
 800ef4e:	e7bd      	b.n	800eecc <_dtoa_r+0x594>
 800ef50:	08012208 	.word	0x08012208
 800ef54:	080121e0 	.word	0x080121e0
 800ef58:	3ff00000 	.word	0x3ff00000
 800ef5c:	40240000 	.word	0x40240000
 800ef60:	401c0000 	.word	0x401c0000
 800ef64:	40140000 	.word	0x40140000
 800ef68:	3fe00000 	.word	0x3fe00000
 800ef6c:	9d01      	ldr	r5, [sp, #4]
 800ef6e:	4656      	mov	r6, sl
 800ef70:	465f      	mov	r7, fp
 800ef72:	4642      	mov	r2, r8
 800ef74:	464b      	mov	r3, r9
 800ef76:	4630      	mov	r0, r6
 800ef78:	4639      	mov	r1, r7
 800ef7a:	f7f1 fc67 	bl	800084c <__aeabi_ddiv>
 800ef7e:	f7f1 fdeb 	bl	8000b58 <__aeabi_d2iz>
 800ef82:	4682      	mov	sl, r0
 800ef84:	f7f1 face 	bl	8000524 <__aeabi_i2d>
 800ef88:	4642      	mov	r2, r8
 800ef8a:	464b      	mov	r3, r9
 800ef8c:	f7f1 fb34 	bl	80005f8 <__aeabi_dmul>
 800ef90:	4602      	mov	r2, r0
 800ef92:	460b      	mov	r3, r1
 800ef94:	4630      	mov	r0, r6
 800ef96:	4639      	mov	r1, r7
 800ef98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ef9c:	f7f1 f974 	bl	8000288 <__aeabi_dsub>
 800efa0:	f805 6b01 	strb.w	r6, [r5], #1
 800efa4:	9e01      	ldr	r6, [sp, #4]
 800efa6:	9f03      	ldr	r7, [sp, #12]
 800efa8:	1bae      	subs	r6, r5, r6
 800efaa:	42b7      	cmp	r7, r6
 800efac:	4602      	mov	r2, r0
 800efae:	460b      	mov	r3, r1
 800efb0:	d135      	bne.n	800f01e <_dtoa_r+0x6e6>
 800efb2:	f7f1 f96b 	bl	800028c <__adddf3>
 800efb6:	4642      	mov	r2, r8
 800efb8:	464b      	mov	r3, r9
 800efba:	4606      	mov	r6, r0
 800efbc:	460f      	mov	r7, r1
 800efbe:	f7f1 fdab 	bl	8000b18 <__aeabi_dcmpgt>
 800efc2:	b9d0      	cbnz	r0, 800effa <_dtoa_r+0x6c2>
 800efc4:	4642      	mov	r2, r8
 800efc6:	464b      	mov	r3, r9
 800efc8:	4630      	mov	r0, r6
 800efca:	4639      	mov	r1, r7
 800efcc:	f7f1 fd7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800efd0:	b110      	cbz	r0, 800efd8 <_dtoa_r+0x6a0>
 800efd2:	f01a 0f01 	tst.w	sl, #1
 800efd6:	d110      	bne.n	800effa <_dtoa_r+0x6c2>
 800efd8:	4620      	mov	r0, r4
 800efda:	ee18 1a10 	vmov	r1, s16
 800efde:	f000 fae5 	bl	800f5ac <_Bfree>
 800efe2:	2300      	movs	r3, #0
 800efe4:	9800      	ldr	r0, [sp, #0]
 800efe6:	702b      	strb	r3, [r5, #0]
 800efe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efea:	3001      	adds	r0, #1
 800efec:	6018      	str	r0, [r3, #0]
 800efee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	f43f acf1 	beq.w	800e9d8 <_dtoa_r+0xa0>
 800eff6:	601d      	str	r5, [r3, #0]
 800eff8:	e4ee      	b.n	800e9d8 <_dtoa_r+0xa0>
 800effa:	9f00      	ldr	r7, [sp, #0]
 800effc:	462b      	mov	r3, r5
 800effe:	461d      	mov	r5, r3
 800f000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f004:	2a39      	cmp	r2, #57	; 0x39
 800f006:	d106      	bne.n	800f016 <_dtoa_r+0x6de>
 800f008:	9a01      	ldr	r2, [sp, #4]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d1f7      	bne.n	800effe <_dtoa_r+0x6c6>
 800f00e:	9901      	ldr	r1, [sp, #4]
 800f010:	2230      	movs	r2, #48	; 0x30
 800f012:	3701      	adds	r7, #1
 800f014:	700a      	strb	r2, [r1, #0]
 800f016:	781a      	ldrb	r2, [r3, #0]
 800f018:	3201      	adds	r2, #1
 800f01a:	701a      	strb	r2, [r3, #0]
 800f01c:	e790      	b.n	800ef40 <_dtoa_r+0x608>
 800f01e:	4ba6      	ldr	r3, [pc, #664]	; (800f2b8 <_dtoa_r+0x980>)
 800f020:	2200      	movs	r2, #0
 800f022:	f7f1 fae9 	bl	80005f8 <__aeabi_dmul>
 800f026:	2200      	movs	r2, #0
 800f028:	2300      	movs	r3, #0
 800f02a:	4606      	mov	r6, r0
 800f02c:	460f      	mov	r7, r1
 800f02e:	f7f1 fd4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f032:	2800      	cmp	r0, #0
 800f034:	d09d      	beq.n	800ef72 <_dtoa_r+0x63a>
 800f036:	e7cf      	b.n	800efd8 <_dtoa_r+0x6a0>
 800f038:	9a08      	ldr	r2, [sp, #32]
 800f03a:	2a00      	cmp	r2, #0
 800f03c:	f000 80d7 	beq.w	800f1ee <_dtoa_r+0x8b6>
 800f040:	9a06      	ldr	r2, [sp, #24]
 800f042:	2a01      	cmp	r2, #1
 800f044:	f300 80ba 	bgt.w	800f1bc <_dtoa_r+0x884>
 800f048:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f04a:	2a00      	cmp	r2, #0
 800f04c:	f000 80b2 	beq.w	800f1b4 <_dtoa_r+0x87c>
 800f050:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f054:	9e07      	ldr	r6, [sp, #28]
 800f056:	9d04      	ldr	r5, [sp, #16]
 800f058:	9a04      	ldr	r2, [sp, #16]
 800f05a:	441a      	add	r2, r3
 800f05c:	9204      	str	r2, [sp, #16]
 800f05e:	9a05      	ldr	r2, [sp, #20]
 800f060:	2101      	movs	r1, #1
 800f062:	441a      	add	r2, r3
 800f064:	4620      	mov	r0, r4
 800f066:	9205      	str	r2, [sp, #20]
 800f068:	f000 fb58 	bl	800f71c <__i2b>
 800f06c:	4607      	mov	r7, r0
 800f06e:	2d00      	cmp	r5, #0
 800f070:	dd0c      	ble.n	800f08c <_dtoa_r+0x754>
 800f072:	9b05      	ldr	r3, [sp, #20]
 800f074:	2b00      	cmp	r3, #0
 800f076:	dd09      	ble.n	800f08c <_dtoa_r+0x754>
 800f078:	42ab      	cmp	r3, r5
 800f07a:	9a04      	ldr	r2, [sp, #16]
 800f07c:	bfa8      	it	ge
 800f07e:	462b      	movge	r3, r5
 800f080:	1ad2      	subs	r2, r2, r3
 800f082:	9204      	str	r2, [sp, #16]
 800f084:	9a05      	ldr	r2, [sp, #20]
 800f086:	1aed      	subs	r5, r5, r3
 800f088:	1ad3      	subs	r3, r2, r3
 800f08a:	9305      	str	r3, [sp, #20]
 800f08c:	9b07      	ldr	r3, [sp, #28]
 800f08e:	b31b      	cbz	r3, 800f0d8 <_dtoa_r+0x7a0>
 800f090:	9b08      	ldr	r3, [sp, #32]
 800f092:	2b00      	cmp	r3, #0
 800f094:	f000 80af 	beq.w	800f1f6 <_dtoa_r+0x8be>
 800f098:	2e00      	cmp	r6, #0
 800f09a:	dd13      	ble.n	800f0c4 <_dtoa_r+0x78c>
 800f09c:	4639      	mov	r1, r7
 800f09e:	4632      	mov	r2, r6
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	f000 fbfb 	bl	800f89c <__pow5mult>
 800f0a6:	ee18 2a10 	vmov	r2, s16
 800f0aa:	4601      	mov	r1, r0
 800f0ac:	4607      	mov	r7, r0
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f000 fb4a 	bl	800f748 <__multiply>
 800f0b4:	ee18 1a10 	vmov	r1, s16
 800f0b8:	4680      	mov	r8, r0
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	f000 fa76 	bl	800f5ac <_Bfree>
 800f0c0:	ee08 8a10 	vmov	s16, r8
 800f0c4:	9b07      	ldr	r3, [sp, #28]
 800f0c6:	1b9a      	subs	r2, r3, r6
 800f0c8:	d006      	beq.n	800f0d8 <_dtoa_r+0x7a0>
 800f0ca:	ee18 1a10 	vmov	r1, s16
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	f000 fbe4 	bl	800f89c <__pow5mult>
 800f0d4:	ee08 0a10 	vmov	s16, r0
 800f0d8:	2101      	movs	r1, #1
 800f0da:	4620      	mov	r0, r4
 800f0dc:	f000 fb1e 	bl	800f71c <__i2b>
 800f0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	4606      	mov	r6, r0
 800f0e6:	f340 8088 	ble.w	800f1fa <_dtoa_r+0x8c2>
 800f0ea:	461a      	mov	r2, r3
 800f0ec:	4601      	mov	r1, r0
 800f0ee:	4620      	mov	r0, r4
 800f0f0:	f000 fbd4 	bl	800f89c <__pow5mult>
 800f0f4:	9b06      	ldr	r3, [sp, #24]
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	4606      	mov	r6, r0
 800f0fa:	f340 8081 	ble.w	800f200 <_dtoa_r+0x8c8>
 800f0fe:	f04f 0800 	mov.w	r8, #0
 800f102:	6933      	ldr	r3, [r6, #16]
 800f104:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f108:	6918      	ldr	r0, [r3, #16]
 800f10a:	f000 fab7 	bl	800f67c <__hi0bits>
 800f10e:	f1c0 0020 	rsb	r0, r0, #32
 800f112:	9b05      	ldr	r3, [sp, #20]
 800f114:	4418      	add	r0, r3
 800f116:	f010 001f 	ands.w	r0, r0, #31
 800f11a:	f000 8092 	beq.w	800f242 <_dtoa_r+0x90a>
 800f11e:	f1c0 0320 	rsb	r3, r0, #32
 800f122:	2b04      	cmp	r3, #4
 800f124:	f340 808a 	ble.w	800f23c <_dtoa_r+0x904>
 800f128:	f1c0 001c 	rsb	r0, r0, #28
 800f12c:	9b04      	ldr	r3, [sp, #16]
 800f12e:	4403      	add	r3, r0
 800f130:	9304      	str	r3, [sp, #16]
 800f132:	9b05      	ldr	r3, [sp, #20]
 800f134:	4403      	add	r3, r0
 800f136:	4405      	add	r5, r0
 800f138:	9305      	str	r3, [sp, #20]
 800f13a:	9b04      	ldr	r3, [sp, #16]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	dd07      	ble.n	800f150 <_dtoa_r+0x818>
 800f140:	ee18 1a10 	vmov	r1, s16
 800f144:	461a      	mov	r2, r3
 800f146:	4620      	mov	r0, r4
 800f148:	f000 fc02 	bl	800f950 <__lshift>
 800f14c:	ee08 0a10 	vmov	s16, r0
 800f150:	9b05      	ldr	r3, [sp, #20]
 800f152:	2b00      	cmp	r3, #0
 800f154:	dd05      	ble.n	800f162 <_dtoa_r+0x82a>
 800f156:	4631      	mov	r1, r6
 800f158:	461a      	mov	r2, r3
 800f15a:	4620      	mov	r0, r4
 800f15c:	f000 fbf8 	bl	800f950 <__lshift>
 800f160:	4606      	mov	r6, r0
 800f162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f164:	2b00      	cmp	r3, #0
 800f166:	d06e      	beq.n	800f246 <_dtoa_r+0x90e>
 800f168:	ee18 0a10 	vmov	r0, s16
 800f16c:	4631      	mov	r1, r6
 800f16e:	f000 fc5f 	bl	800fa30 <__mcmp>
 800f172:	2800      	cmp	r0, #0
 800f174:	da67      	bge.n	800f246 <_dtoa_r+0x90e>
 800f176:	9b00      	ldr	r3, [sp, #0]
 800f178:	3b01      	subs	r3, #1
 800f17a:	ee18 1a10 	vmov	r1, s16
 800f17e:	9300      	str	r3, [sp, #0]
 800f180:	220a      	movs	r2, #10
 800f182:	2300      	movs	r3, #0
 800f184:	4620      	mov	r0, r4
 800f186:	f000 fa33 	bl	800f5f0 <__multadd>
 800f18a:	9b08      	ldr	r3, [sp, #32]
 800f18c:	ee08 0a10 	vmov	s16, r0
 800f190:	2b00      	cmp	r3, #0
 800f192:	f000 81b1 	beq.w	800f4f8 <_dtoa_r+0xbc0>
 800f196:	2300      	movs	r3, #0
 800f198:	4639      	mov	r1, r7
 800f19a:	220a      	movs	r2, #10
 800f19c:	4620      	mov	r0, r4
 800f19e:	f000 fa27 	bl	800f5f0 <__multadd>
 800f1a2:	9b02      	ldr	r3, [sp, #8]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	4607      	mov	r7, r0
 800f1a8:	f300 808e 	bgt.w	800f2c8 <_dtoa_r+0x990>
 800f1ac:	9b06      	ldr	r3, [sp, #24]
 800f1ae:	2b02      	cmp	r3, #2
 800f1b0:	dc51      	bgt.n	800f256 <_dtoa_r+0x91e>
 800f1b2:	e089      	b.n	800f2c8 <_dtoa_r+0x990>
 800f1b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f1b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f1ba:	e74b      	b.n	800f054 <_dtoa_r+0x71c>
 800f1bc:	9b03      	ldr	r3, [sp, #12]
 800f1be:	1e5e      	subs	r6, r3, #1
 800f1c0:	9b07      	ldr	r3, [sp, #28]
 800f1c2:	42b3      	cmp	r3, r6
 800f1c4:	bfbf      	itttt	lt
 800f1c6:	9b07      	ldrlt	r3, [sp, #28]
 800f1c8:	9607      	strlt	r6, [sp, #28]
 800f1ca:	1af2      	sublt	r2, r6, r3
 800f1cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f1ce:	bfb6      	itet	lt
 800f1d0:	189b      	addlt	r3, r3, r2
 800f1d2:	1b9e      	subge	r6, r3, r6
 800f1d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f1d6:	9b03      	ldr	r3, [sp, #12]
 800f1d8:	bfb8      	it	lt
 800f1da:	2600      	movlt	r6, #0
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	bfb7      	itett	lt
 800f1e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f1e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f1e8:	1a9d      	sublt	r5, r3, r2
 800f1ea:	2300      	movlt	r3, #0
 800f1ec:	e734      	b.n	800f058 <_dtoa_r+0x720>
 800f1ee:	9e07      	ldr	r6, [sp, #28]
 800f1f0:	9d04      	ldr	r5, [sp, #16]
 800f1f2:	9f08      	ldr	r7, [sp, #32]
 800f1f4:	e73b      	b.n	800f06e <_dtoa_r+0x736>
 800f1f6:	9a07      	ldr	r2, [sp, #28]
 800f1f8:	e767      	b.n	800f0ca <_dtoa_r+0x792>
 800f1fa:	9b06      	ldr	r3, [sp, #24]
 800f1fc:	2b01      	cmp	r3, #1
 800f1fe:	dc18      	bgt.n	800f232 <_dtoa_r+0x8fa>
 800f200:	f1ba 0f00 	cmp.w	sl, #0
 800f204:	d115      	bne.n	800f232 <_dtoa_r+0x8fa>
 800f206:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f20a:	b993      	cbnz	r3, 800f232 <_dtoa_r+0x8fa>
 800f20c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f210:	0d1b      	lsrs	r3, r3, #20
 800f212:	051b      	lsls	r3, r3, #20
 800f214:	b183      	cbz	r3, 800f238 <_dtoa_r+0x900>
 800f216:	9b04      	ldr	r3, [sp, #16]
 800f218:	3301      	adds	r3, #1
 800f21a:	9304      	str	r3, [sp, #16]
 800f21c:	9b05      	ldr	r3, [sp, #20]
 800f21e:	3301      	adds	r3, #1
 800f220:	9305      	str	r3, [sp, #20]
 800f222:	f04f 0801 	mov.w	r8, #1
 800f226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f228:	2b00      	cmp	r3, #0
 800f22a:	f47f af6a 	bne.w	800f102 <_dtoa_r+0x7ca>
 800f22e:	2001      	movs	r0, #1
 800f230:	e76f      	b.n	800f112 <_dtoa_r+0x7da>
 800f232:	f04f 0800 	mov.w	r8, #0
 800f236:	e7f6      	b.n	800f226 <_dtoa_r+0x8ee>
 800f238:	4698      	mov	r8, r3
 800f23a:	e7f4      	b.n	800f226 <_dtoa_r+0x8ee>
 800f23c:	f43f af7d 	beq.w	800f13a <_dtoa_r+0x802>
 800f240:	4618      	mov	r0, r3
 800f242:	301c      	adds	r0, #28
 800f244:	e772      	b.n	800f12c <_dtoa_r+0x7f4>
 800f246:	9b03      	ldr	r3, [sp, #12]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	dc37      	bgt.n	800f2bc <_dtoa_r+0x984>
 800f24c:	9b06      	ldr	r3, [sp, #24]
 800f24e:	2b02      	cmp	r3, #2
 800f250:	dd34      	ble.n	800f2bc <_dtoa_r+0x984>
 800f252:	9b03      	ldr	r3, [sp, #12]
 800f254:	9302      	str	r3, [sp, #8]
 800f256:	9b02      	ldr	r3, [sp, #8]
 800f258:	b96b      	cbnz	r3, 800f276 <_dtoa_r+0x93e>
 800f25a:	4631      	mov	r1, r6
 800f25c:	2205      	movs	r2, #5
 800f25e:	4620      	mov	r0, r4
 800f260:	f000 f9c6 	bl	800f5f0 <__multadd>
 800f264:	4601      	mov	r1, r0
 800f266:	4606      	mov	r6, r0
 800f268:	ee18 0a10 	vmov	r0, s16
 800f26c:	f000 fbe0 	bl	800fa30 <__mcmp>
 800f270:	2800      	cmp	r0, #0
 800f272:	f73f adbb 	bgt.w	800edec <_dtoa_r+0x4b4>
 800f276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f278:	9d01      	ldr	r5, [sp, #4]
 800f27a:	43db      	mvns	r3, r3
 800f27c:	9300      	str	r3, [sp, #0]
 800f27e:	f04f 0800 	mov.w	r8, #0
 800f282:	4631      	mov	r1, r6
 800f284:	4620      	mov	r0, r4
 800f286:	f000 f991 	bl	800f5ac <_Bfree>
 800f28a:	2f00      	cmp	r7, #0
 800f28c:	f43f aea4 	beq.w	800efd8 <_dtoa_r+0x6a0>
 800f290:	f1b8 0f00 	cmp.w	r8, #0
 800f294:	d005      	beq.n	800f2a2 <_dtoa_r+0x96a>
 800f296:	45b8      	cmp	r8, r7
 800f298:	d003      	beq.n	800f2a2 <_dtoa_r+0x96a>
 800f29a:	4641      	mov	r1, r8
 800f29c:	4620      	mov	r0, r4
 800f29e:	f000 f985 	bl	800f5ac <_Bfree>
 800f2a2:	4639      	mov	r1, r7
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	f000 f981 	bl	800f5ac <_Bfree>
 800f2aa:	e695      	b.n	800efd8 <_dtoa_r+0x6a0>
 800f2ac:	2600      	movs	r6, #0
 800f2ae:	4637      	mov	r7, r6
 800f2b0:	e7e1      	b.n	800f276 <_dtoa_r+0x93e>
 800f2b2:	9700      	str	r7, [sp, #0]
 800f2b4:	4637      	mov	r7, r6
 800f2b6:	e599      	b.n	800edec <_dtoa_r+0x4b4>
 800f2b8:	40240000 	.word	0x40240000
 800f2bc:	9b08      	ldr	r3, [sp, #32]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	f000 80ca 	beq.w	800f458 <_dtoa_r+0xb20>
 800f2c4:	9b03      	ldr	r3, [sp, #12]
 800f2c6:	9302      	str	r3, [sp, #8]
 800f2c8:	2d00      	cmp	r5, #0
 800f2ca:	dd05      	ble.n	800f2d8 <_dtoa_r+0x9a0>
 800f2cc:	4639      	mov	r1, r7
 800f2ce:	462a      	mov	r2, r5
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	f000 fb3d 	bl	800f950 <__lshift>
 800f2d6:	4607      	mov	r7, r0
 800f2d8:	f1b8 0f00 	cmp.w	r8, #0
 800f2dc:	d05b      	beq.n	800f396 <_dtoa_r+0xa5e>
 800f2de:	6879      	ldr	r1, [r7, #4]
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	f000 f923 	bl	800f52c <_Balloc>
 800f2e6:	4605      	mov	r5, r0
 800f2e8:	b928      	cbnz	r0, 800f2f6 <_dtoa_r+0x9be>
 800f2ea:	4b87      	ldr	r3, [pc, #540]	; (800f508 <_dtoa_r+0xbd0>)
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f2f2:	f7ff bb3b 	b.w	800e96c <_dtoa_r+0x34>
 800f2f6:	693a      	ldr	r2, [r7, #16]
 800f2f8:	3202      	adds	r2, #2
 800f2fa:	0092      	lsls	r2, r2, #2
 800f2fc:	f107 010c 	add.w	r1, r7, #12
 800f300:	300c      	adds	r0, #12
 800f302:	f7fe fdb7 	bl	800de74 <memcpy>
 800f306:	2201      	movs	r2, #1
 800f308:	4629      	mov	r1, r5
 800f30a:	4620      	mov	r0, r4
 800f30c:	f000 fb20 	bl	800f950 <__lshift>
 800f310:	9b01      	ldr	r3, [sp, #4]
 800f312:	f103 0901 	add.w	r9, r3, #1
 800f316:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f31a:	4413      	add	r3, r2
 800f31c:	9305      	str	r3, [sp, #20]
 800f31e:	f00a 0301 	and.w	r3, sl, #1
 800f322:	46b8      	mov	r8, r7
 800f324:	9304      	str	r3, [sp, #16]
 800f326:	4607      	mov	r7, r0
 800f328:	4631      	mov	r1, r6
 800f32a:	ee18 0a10 	vmov	r0, s16
 800f32e:	f7ff fa75 	bl	800e81c <quorem>
 800f332:	4641      	mov	r1, r8
 800f334:	9002      	str	r0, [sp, #8]
 800f336:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f33a:	ee18 0a10 	vmov	r0, s16
 800f33e:	f000 fb77 	bl	800fa30 <__mcmp>
 800f342:	463a      	mov	r2, r7
 800f344:	9003      	str	r0, [sp, #12]
 800f346:	4631      	mov	r1, r6
 800f348:	4620      	mov	r0, r4
 800f34a:	f000 fb8d 	bl	800fa68 <__mdiff>
 800f34e:	68c2      	ldr	r2, [r0, #12]
 800f350:	f109 3bff 	add.w	fp, r9, #4294967295
 800f354:	4605      	mov	r5, r0
 800f356:	bb02      	cbnz	r2, 800f39a <_dtoa_r+0xa62>
 800f358:	4601      	mov	r1, r0
 800f35a:	ee18 0a10 	vmov	r0, s16
 800f35e:	f000 fb67 	bl	800fa30 <__mcmp>
 800f362:	4602      	mov	r2, r0
 800f364:	4629      	mov	r1, r5
 800f366:	4620      	mov	r0, r4
 800f368:	9207      	str	r2, [sp, #28]
 800f36a:	f000 f91f 	bl	800f5ac <_Bfree>
 800f36e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f372:	ea43 0102 	orr.w	r1, r3, r2
 800f376:	9b04      	ldr	r3, [sp, #16]
 800f378:	430b      	orrs	r3, r1
 800f37a:	464d      	mov	r5, r9
 800f37c:	d10f      	bne.n	800f39e <_dtoa_r+0xa66>
 800f37e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f382:	d02a      	beq.n	800f3da <_dtoa_r+0xaa2>
 800f384:	9b03      	ldr	r3, [sp, #12]
 800f386:	2b00      	cmp	r3, #0
 800f388:	dd02      	ble.n	800f390 <_dtoa_r+0xa58>
 800f38a:	9b02      	ldr	r3, [sp, #8]
 800f38c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f390:	f88b a000 	strb.w	sl, [fp]
 800f394:	e775      	b.n	800f282 <_dtoa_r+0x94a>
 800f396:	4638      	mov	r0, r7
 800f398:	e7ba      	b.n	800f310 <_dtoa_r+0x9d8>
 800f39a:	2201      	movs	r2, #1
 800f39c:	e7e2      	b.n	800f364 <_dtoa_r+0xa2c>
 800f39e:	9b03      	ldr	r3, [sp, #12]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	db04      	blt.n	800f3ae <_dtoa_r+0xa76>
 800f3a4:	9906      	ldr	r1, [sp, #24]
 800f3a6:	430b      	orrs	r3, r1
 800f3a8:	9904      	ldr	r1, [sp, #16]
 800f3aa:	430b      	orrs	r3, r1
 800f3ac:	d122      	bne.n	800f3f4 <_dtoa_r+0xabc>
 800f3ae:	2a00      	cmp	r2, #0
 800f3b0:	ddee      	ble.n	800f390 <_dtoa_r+0xa58>
 800f3b2:	ee18 1a10 	vmov	r1, s16
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	4620      	mov	r0, r4
 800f3ba:	f000 fac9 	bl	800f950 <__lshift>
 800f3be:	4631      	mov	r1, r6
 800f3c0:	ee08 0a10 	vmov	s16, r0
 800f3c4:	f000 fb34 	bl	800fa30 <__mcmp>
 800f3c8:	2800      	cmp	r0, #0
 800f3ca:	dc03      	bgt.n	800f3d4 <_dtoa_r+0xa9c>
 800f3cc:	d1e0      	bne.n	800f390 <_dtoa_r+0xa58>
 800f3ce:	f01a 0f01 	tst.w	sl, #1
 800f3d2:	d0dd      	beq.n	800f390 <_dtoa_r+0xa58>
 800f3d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f3d8:	d1d7      	bne.n	800f38a <_dtoa_r+0xa52>
 800f3da:	2339      	movs	r3, #57	; 0x39
 800f3dc:	f88b 3000 	strb.w	r3, [fp]
 800f3e0:	462b      	mov	r3, r5
 800f3e2:	461d      	mov	r5, r3
 800f3e4:	3b01      	subs	r3, #1
 800f3e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f3ea:	2a39      	cmp	r2, #57	; 0x39
 800f3ec:	d071      	beq.n	800f4d2 <_dtoa_r+0xb9a>
 800f3ee:	3201      	adds	r2, #1
 800f3f0:	701a      	strb	r2, [r3, #0]
 800f3f2:	e746      	b.n	800f282 <_dtoa_r+0x94a>
 800f3f4:	2a00      	cmp	r2, #0
 800f3f6:	dd07      	ble.n	800f408 <_dtoa_r+0xad0>
 800f3f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f3fc:	d0ed      	beq.n	800f3da <_dtoa_r+0xaa2>
 800f3fe:	f10a 0301 	add.w	r3, sl, #1
 800f402:	f88b 3000 	strb.w	r3, [fp]
 800f406:	e73c      	b.n	800f282 <_dtoa_r+0x94a>
 800f408:	9b05      	ldr	r3, [sp, #20]
 800f40a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f40e:	4599      	cmp	r9, r3
 800f410:	d047      	beq.n	800f4a2 <_dtoa_r+0xb6a>
 800f412:	ee18 1a10 	vmov	r1, s16
 800f416:	2300      	movs	r3, #0
 800f418:	220a      	movs	r2, #10
 800f41a:	4620      	mov	r0, r4
 800f41c:	f000 f8e8 	bl	800f5f0 <__multadd>
 800f420:	45b8      	cmp	r8, r7
 800f422:	ee08 0a10 	vmov	s16, r0
 800f426:	f04f 0300 	mov.w	r3, #0
 800f42a:	f04f 020a 	mov.w	r2, #10
 800f42e:	4641      	mov	r1, r8
 800f430:	4620      	mov	r0, r4
 800f432:	d106      	bne.n	800f442 <_dtoa_r+0xb0a>
 800f434:	f000 f8dc 	bl	800f5f0 <__multadd>
 800f438:	4680      	mov	r8, r0
 800f43a:	4607      	mov	r7, r0
 800f43c:	f109 0901 	add.w	r9, r9, #1
 800f440:	e772      	b.n	800f328 <_dtoa_r+0x9f0>
 800f442:	f000 f8d5 	bl	800f5f0 <__multadd>
 800f446:	4639      	mov	r1, r7
 800f448:	4680      	mov	r8, r0
 800f44a:	2300      	movs	r3, #0
 800f44c:	220a      	movs	r2, #10
 800f44e:	4620      	mov	r0, r4
 800f450:	f000 f8ce 	bl	800f5f0 <__multadd>
 800f454:	4607      	mov	r7, r0
 800f456:	e7f1      	b.n	800f43c <_dtoa_r+0xb04>
 800f458:	9b03      	ldr	r3, [sp, #12]
 800f45a:	9302      	str	r3, [sp, #8]
 800f45c:	9d01      	ldr	r5, [sp, #4]
 800f45e:	ee18 0a10 	vmov	r0, s16
 800f462:	4631      	mov	r1, r6
 800f464:	f7ff f9da 	bl	800e81c <quorem>
 800f468:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f46c:	9b01      	ldr	r3, [sp, #4]
 800f46e:	f805 ab01 	strb.w	sl, [r5], #1
 800f472:	1aea      	subs	r2, r5, r3
 800f474:	9b02      	ldr	r3, [sp, #8]
 800f476:	4293      	cmp	r3, r2
 800f478:	dd09      	ble.n	800f48e <_dtoa_r+0xb56>
 800f47a:	ee18 1a10 	vmov	r1, s16
 800f47e:	2300      	movs	r3, #0
 800f480:	220a      	movs	r2, #10
 800f482:	4620      	mov	r0, r4
 800f484:	f000 f8b4 	bl	800f5f0 <__multadd>
 800f488:	ee08 0a10 	vmov	s16, r0
 800f48c:	e7e7      	b.n	800f45e <_dtoa_r+0xb26>
 800f48e:	9b02      	ldr	r3, [sp, #8]
 800f490:	2b00      	cmp	r3, #0
 800f492:	bfc8      	it	gt
 800f494:	461d      	movgt	r5, r3
 800f496:	9b01      	ldr	r3, [sp, #4]
 800f498:	bfd8      	it	le
 800f49a:	2501      	movle	r5, #1
 800f49c:	441d      	add	r5, r3
 800f49e:	f04f 0800 	mov.w	r8, #0
 800f4a2:	ee18 1a10 	vmov	r1, s16
 800f4a6:	2201      	movs	r2, #1
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	f000 fa51 	bl	800f950 <__lshift>
 800f4ae:	4631      	mov	r1, r6
 800f4b0:	ee08 0a10 	vmov	s16, r0
 800f4b4:	f000 fabc 	bl	800fa30 <__mcmp>
 800f4b8:	2800      	cmp	r0, #0
 800f4ba:	dc91      	bgt.n	800f3e0 <_dtoa_r+0xaa8>
 800f4bc:	d102      	bne.n	800f4c4 <_dtoa_r+0xb8c>
 800f4be:	f01a 0f01 	tst.w	sl, #1
 800f4c2:	d18d      	bne.n	800f3e0 <_dtoa_r+0xaa8>
 800f4c4:	462b      	mov	r3, r5
 800f4c6:	461d      	mov	r5, r3
 800f4c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f4cc:	2a30      	cmp	r2, #48	; 0x30
 800f4ce:	d0fa      	beq.n	800f4c6 <_dtoa_r+0xb8e>
 800f4d0:	e6d7      	b.n	800f282 <_dtoa_r+0x94a>
 800f4d2:	9a01      	ldr	r2, [sp, #4]
 800f4d4:	429a      	cmp	r2, r3
 800f4d6:	d184      	bne.n	800f3e2 <_dtoa_r+0xaaa>
 800f4d8:	9b00      	ldr	r3, [sp, #0]
 800f4da:	3301      	adds	r3, #1
 800f4dc:	9300      	str	r3, [sp, #0]
 800f4de:	2331      	movs	r3, #49	; 0x31
 800f4e0:	7013      	strb	r3, [r2, #0]
 800f4e2:	e6ce      	b.n	800f282 <_dtoa_r+0x94a>
 800f4e4:	4b09      	ldr	r3, [pc, #36]	; (800f50c <_dtoa_r+0xbd4>)
 800f4e6:	f7ff ba95 	b.w	800ea14 <_dtoa_r+0xdc>
 800f4ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	f47f aa6e 	bne.w	800e9ce <_dtoa_r+0x96>
 800f4f2:	4b07      	ldr	r3, [pc, #28]	; (800f510 <_dtoa_r+0xbd8>)
 800f4f4:	f7ff ba8e 	b.w	800ea14 <_dtoa_r+0xdc>
 800f4f8:	9b02      	ldr	r3, [sp, #8]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	dcae      	bgt.n	800f45c <_dtoa_r+0xb24>
 800f4fe:	9b06      	ldr	r3, [sp, #24]
 800f500:	2b02      	cmp	r3, #2
 800f502:	f73f aea8 	bgt.w	800f256 <_dtoa_r+0x91e>
 800f506:	e7a9      	b.n	800f45c <_dtoa_r+0xb24>
 800f508:	0801216f 	.word	0x0801216f
 800f50c:	080120cc 	.word	0x080120cc
 800f510:	080120f0 	.word	0x080120f0

0800f514 <_localeconv_r>:
 800f514:	4800      	ldr	r0, [pc, #0]	; (800f518 <_localeconv_r+0x4>)
 800f516:	4770      	bx	lr
 800f518:	20000254 	.word	0x20000254

0800f51c <malloc>:
 800f51c:	4b02      	ldr	r3, [pc, #8]	; (800f528 <malloc+0xc>)
 800f51e:	4601      	mov	r1, r0
 800f520:	6818      	ldr	r0, [r3, #0]
 800f522:	f000 bc09 	b.w	800fd38 <_malloc_r>
 800f526:	bf00      	nop
 800f528:	20000100 	.word	0x20000100

0800f52c <_Balloc>:
 800f52c:	b570      	push	{r4, r5, r6, lr}
 800f52e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f530:	4604      	mov	r4, r0
 800f532:	460d      	mov	r5, r1
 800f534:	b976      	cbnz	r6, 800f554 <_Balloc+0x28>
 800f536:	2010      	movs	r0, #16
 800f538:	f7ff fff0 	bl	800f51c <malloc>
 800f53c:	4602      	mov	r2, r0
 800f53e:	6260      	str	r0, [r4, #36]	; 0x24
 800f540:	b920      	cbnz	r0, 800f54c <_Balloc+0x20>
 800f542:	4b18      	ldr	r3, [pc, #96]	; (800f5a4 <_Balloc+0x78>)
 800f544:	4818      	ldr	r0, [pc, #96]	; (800f5a8 <_Balloc+0x7c>)
 800f546:	2166      	movs	r1, #102	; 0x66
 800f548:	f000 fdd6 	bl	80100f8 <__assert_func>
 800f54c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f550:	6006      	str	r6, [r0, #0]
 800f552:	60c6      	str	r6, [r0, #12]
 800f554:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f556:	68f3      	ldr	r3, [r6, #12]
 800f558:	b183      	cbz	r3, 800f57c <_Balloc+0x50>
 800f55a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f55c:	68db      	ldr	r3, [r3, #12]
 800f55e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f562:	b9b8      	cbnz	r0, 800f594 <_Balloc+0x68>
 800f564:	2101      	movs	r1, #1
 800f566:	fa01 f605 	lsl.w	r6, r1, r5
 800f56a:	1d72      	adds	r2, r6, #5
 800f56c:	0092      	lsls	r2, r2, #2
 800f56e:	4620      	mov	r0, r4
 800f570:	f000 fb60 	bl	800fc34 <_calloc_r>
 800f574:	b160      	cbz	r0, 800f590 <_Balloc+0x64>
 800f576:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f57a:	e00e      	b.n	800f59a <_Balloc+0x6e>
 800f57c:	2221      	movs	r2, #33	; 0x21
 800f57e:	2104      	movs	r1, #4
 800f580:	4620      	mov	r0, r4
 800f582:	f000 fb57 	bl	800fc34 <_calloc_r>
 800f586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f588:	60f0      	str	r0, [r6, #12]
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d1e4      	bne.n	800f55a <_Balloc+0x2e>
 800f590:	2000      	movs	r0, #0
 800f592:	bd70      	pop	{r4, r5, r6, pc}
 800f594:	6802      	ldr	r2, [r0, #0]
 800f596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f59a:	2300      	movs	r3, #0
 800f59c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f5a0:	e7f7      	b.n	800f592 <_Balloc+0x66>
 800f5a2:	bf00      	nop
 800f5a4:	080120fd 	.word	0x080120fd
 800f5a8:	08012180 	.word	0x08012180

0800f5ac <_Bfree>:
 800f5ac:	b570      	push	{r4, r5, r6, lr}
 800f5ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f5b0:	4605      	mov	r5, r0
 800f5b2:	460c      	mov	r4, r1
 800f5b4:	b976      	cbnz	r6, 800f5d4 <_Bfree+0x28>
 800f5b6:	2010      	movs	r0, #16
 800f5b8:	f7ff ffb0 	bl	800f51c <malloc>
 800f5bc:	4602      	mov	r2, r0
 800f5be:	6268      	str	r0, [r5, #36]	; 0x24
 800f5c0:	b920      	cbnz	r0, 800f5cc <_Bfree+0x20>
 800f5c2:	4b09      	ldr	r3, [pc, #36]	; (800f5e8 <_Bfree+0x3c>)
 800f5c4:	4809      	ldr	r0, [pc, #36]	; (800f5ec <_Bfree+0x40>)
 800f5c6:	218a      	movs	r1, #138	; 0x8a
 800f5c8:	f000 fd96 	bl	80100f8 <__assert_func>
 800f5cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f5d0:	6006      	str	r6, [r0, #0]
 800f5d2:	60c6      	str	r6, [r0, #12]
 800f5d4:	b13c      	cbz	r4, 800f5e6 <_Bfree+0x3a>
 800f5d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f5d8:	6862      	ldr	r2, [r4, #4]
 800f5da:	68db      	ldr	r3, [r3, #12]
 800f5dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f5e0:	6021      	str	r1, [r4, #0]
 800f5e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f5e6:	bd70      	pop	{r4, r5, r6, pc}
 800f5e8:	080120fd 	.word	0x080120fd
 800f5ec:	08012180 	.word	0x08012180

0800f5f0 <__multadd>:
 800f5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5f4:	690d      	ldr	r5, [r1, #16]
 800f5f6:	4607      	mov	r7, r0
 800f5f8:	460c      	mov	r4, r1
 800f5fa:	461e      	mov	r6, r3
 800f5fc:	f101 0c14 	add.w	ip, r1, #20
 800f600:	2000      	movs	r0, #0
 800f602:	f8dc 3000 	ldr.w	r3, [ip]
 800f606:	b299      	uxth	r1, r3
 800f608:	fb02 6101 	mla	r1, r2, r1, r6
 800f60c:	0c1e      	lsrs	r6, r3, #16
 800f60e:	0c0b      	lsrs	r3, r1, #16
 800f610:	fb02 3306 	mla	r3, r2, r6, r3
 800f614:	b289      	uxth	r1, r1
 800f616:	3001      	adds	r0, #1
 800f618:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f61c:	4285      	cmp	r5, r0
 800f61e:	f84c 1b04 	str.w	r1, [ip], #4
 800f622:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f626:	dcec      	bgt.n	800f602 <__multadd+0x12>
 800f628:	b30e      	cbz	r6, 800f66e <__multadd+0x7e>
 800f62a:	68a3      	ldr	r3, [r4, #8]
 800f62c:	42ab      	cmp	r3, r5
 800f62e:	dc19      	bgt.n	800f664 <__multadd+0x74>
 800f630:	6861      	ldr	r1, [r4, #4]
 800f632:	4638      	mov	r0, r7
 800f634:	3101      	adds	r1, #1
 800f636:	f7ff ff79 	bl	800f52c <_Balloc>
 800f63a:	4680      	mov	r8, r0
 800f63c:	b928      	cbnz	r0, 800f64a <__multadd+0x5a>
 800f63e:	4602      	mov	r2, r0
 800f640:	4b0c      	ldr	r3, [pc, #48]	; (800f674 <__multadd+0x84>)
 800f642:	480d      	ldr	r0, [pc, #52]	; (800f678 <__multadd+0x88>)
 800f644:	21b5      	movs	r1, #181	; 0xb5
 800f646:	f000 fd57 	bl	80100f8 <__assert_func>
 800f64a:	6922      	ldr	r2, [r4, #16]
 800f64c:	3202      	adds	r2, #2
 800f64e:	f104 010c 	add.w	r1, r4, #12
 800f652:	0092      	lsls	r2, r2, #2
 800f654:	300c      	adds	r0, #12
 800f656:	f7fe fc0d 	bl	800de74 <memcpy>
 800f65a:	4621      	mov	r1, r4
 800f65c:	4638      	mov	r0, r7
 800f65e:	f7ff ffa5 	bl	800f5ac <_Bfree>
 800f662:	4644      	mov	r4, r8
 800f664:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f668:	3501      	adds	r5, #1
 800f66a:	615e      	str	r6, [r3, #20]
 800f66c:	6125      	str	r5, [r4, #16]
 800f66e:	4620      	mov	r0, r4
 800f670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f674:	0801216f 	.word	0x0801216f
 800f678:	08012180 	.word	0x08012180

0800f67c <__hi0bits>:
 800f67c:	0c03      	lsrs	r3, r0, #16
 800f67e:	041b      	lsls	r3, r3, #16
 800f680:	b9d3      	cbnz	r3, 800f6b8 <__hi0bits+0x3c>
 800f682:	0400      	lsls	r0, r0, #16
 800f684:	2310      	movs	r3, #16
 800f686:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f68a:	bf04      	itt	eq
 800f68c:	0200      	lsleq	r0, r0, #8
 800f68e:	3308      	addeq	r3, #8
 800f690:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f694:	bf04      	itt	eq
 800f696:	0100      	lsleq	r0, r0, #4
 800f698:	3304      	addeq	r3, #4
 800f69a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f69e:	bf04      	itt	eq
 800f6a0:	0080      	lsleq	r0, r0, #2
 800f6a2:	3302      	addeq	r3, #2
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	db05      	blt.n	800f6b4 <__hi0bits+0x38>
 800f6a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f6ac:	f103 0301 	add.w	r3, r3, #1
 800f6b0:	bf08      	it	eq
 800f6b2:	2320      	moveq	r3, #32
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	4770      	bx	lr
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	e7e4      	b.n	800f686 <__hi0bits+0xa>

0800f6bc <__lo0bits>:
 800f6bc:	6803      	ldr	r3, [r0, #0]
 800f6be:	f013 0207 	ands.w	r2, r3, #7
 800f6c2:	4601      	mov	r1, r0
 800f6c4:	d00b      	beq.n	800f6de <__lo0bits+0x22>
 800f6c6:	07da      	lsls	r2, r3, #31
 800f6c8:	d423      	bmi.n	800f712 <__lo0bits+0x56>
 800f6ca:	0798      	lsls	r0, r3, #30
 800f6cc:	bf49      	itett	mi
 800f6ce:	085b      	lsrmi	r3, r3, #1
 800f6d0:	089b      	lsrpl	r3, r3, #2
 800f6d2:	2001      	movmi	r0, #1
 800f6d4:	600b      	strmi	r3, [r1, #0]
 800f6d6:	bf5c      	itt	pl
 800f6d8:	600b      	strpl	r3, [r1, #0]
 800f6da:	2002      	movpl	r0, #2
 800f6dc:	4770      	bx	lr
 800f6de:	b298      	uxth	r0, r3
 800f6e0:	b9a8      	cbnz	r0, 800f70e <__lo0bits+0x52>
 800f6e2:	0c1b      	lsrs	r3, r3, #16
 800f6e4:	2010      	movs	r0, #16
 800f6e6:	b2da      	uxtb	r2, r3
 800f6e8:	b90a      	cbnz	r2, 800f6ee <__lo0bits+0x32>
 800f6ea:	3008      	adds	r0, #8
 800f6ec:	0a1b      	lsrs	r3, r3, #8
 800f6ee:	071a      	lsls	r2, r3, #28
 800f6f0:	bf04      	itt	eq
 800f6f2:	091b      	lsreq	r3, r3, #4
 800f6f4:	3004      	addeq	r0, #4
 800f6f6:	079a      	lsls	r2, r3, #30
 800f6f8:	bf04      	itt	eq
 800f6fa:	089b      	lsreq	r3, r3, #2
 800f6fc:	3002      	addeq	r0, #2
 800f6fe:	07da      	lsls	r2, r3, #31
 800f700:	d403      	bmi.n	800f70a <__lo0bits+0x4e>
 800f702:	085b      	lsrs	r3, r3, #1
 800f704:	f100 0001 	add.w	r0, r0, #1
 800f708:	d005      	beq.n	800f716 <__lo0bits+0x5a>
 800f70a:	600b      	str	r3, [r1, #0]
 800f70c:	4770      	bx	lr
 800f70e:	4610      	mov	r0, r2
 800f710:	e7e9      	b.n	800f6e6 <__lo0bits+0x2a>
 800f712:	2000      	movs	r0, #0
 800f714:	4770      	bx	lr
 800f716:	2020      	movs	r0, #32
 800f718:	4770      	bx	lr
	...

0800f71c <__i2b>:
 800f71c:	b510      	push	{r4, lr}
 800f71e:	460c      	mov	r4, r1
 800f720:	2101      	movs	r1, #1
 800f722:	f7ff ff03 	bl	800f52c <_Balloc>
 800f726:	4602      	mov	r2, r0
 800f728:	b928      	cbnz	r0, 800f736 <__i2b+0x1a>
 800f72a:	4b05      	ldr	r3, [pc, #20]	; (800f740 <__i2b+0x24>)
 800f72c:	4805      	ldr	r0, [pc, #20]	; (800f744 <__i2b+0x28>)
 800f72e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f732:	f000 fce1 	bl	80100f8 <__assert_func>
 800f736:	2301      	movs	r3, #1
 800f738:	6144      	str	r4, [r0, #20]
 800f73a:	6103      	str	r3, [r0, #16]
 800f73c:	bd10      	pop	{r4, pc}
 800f73e:	bf00      	nop
 800f740:	0801216f 	.word	0x0801216f
 800f744:	08012180 	.word	0x08012180

0800f748 <__multiply>:
 800f748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f74c:	4691      	mov	r9, r2
 800f74e:	690a      	ldr	r2, [r1, #16]
 800f750:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f754:	429a      	cmp	r2, r3
 800f756:	bfb8      	it	lt
 800f758:	460b      	movlt	r3, r1
 800f75a:	460c      	mov	r4, r1
 800f75c:	bfbc      	itt	lt
 800f75e:	464c      	movlt	r4, r9
 800f760:	4699      	movlt	r9, r3
 800f762:	6927      	ldr	r7, [r4, #16]
 800f764:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f768:	68a3      	ldr	r3, [r4, #8]
 800f76a:	6861      	ldr	r1, [r4, #4]
 800f76c:	eb07 060a 	add.w	r6, r7, sl
 800f770:	42b3      	cmp	r3, r6
 800f772:	b085      	sub	sp, #20
 800f774:	bfb8      	it	lt
 800f776:	3101      	addlt	r1, #1
 800f778:	f7ff fed8 	bl	800f52c <_Balloc>
 800f77c:	b930      	cbnz	r0, 800f78c <__multiply+0x44>
 800f77e:	4602      	mov	r2, r0
 800f780:	4b44      	ldr	r3, [pc, #272]	; (800f894 <__multiply+0x14c>)
 800f782:	4845      	ldr	r0, [pc, #276]	; (800f898 <__multiply+0x150>)
 800f784:	f240 115d 	movw	r1, #349	; 0x15d
 800f788:	f000 fcb6 	bl	80100f8 <__assert_func>
 800f78c:	f100 0514 	add.w	r5, r0, #20
 800f790:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f794:	462b      	mov	r3, r5
 800f796:	2200      	movs	r2, #0
 800f798:	4543      	cmp	r3, r8
 800f79a:	d321      	bcc.n	800f7e0 <__multiply+0x98>
 800f79c:	f104 0314 	add.w	r3, r4, #20
 800f7a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f7a4:	f109 0314 	add.w	r3, r9, #20
 800f7a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f7ac:	9202      	str	r2, [sp, #8]
 800f7ae:	1b3a      	subs	r2, r7, r4
 800f7b0:	3a15      	subs	r2, #21
 800f7b2:	f022 0203 	bic.w	r2, r2, #3
 800f7b6:	3204      	adds	r2, #4
 800f7b8:	f104 0115 	add.w	r1, r4, #21
 800f7bc:	428f      	cmp	r7, r1
 800f7be:	bf38      	it	cc
 800f7c0:	2204      	movcc	r2, #4
 800f7c2:	9201      	str	r2, [sp, #4]
 800f7c4:	9a02      	ldr	r2, [sp, #8]
 800f7c6:	9303      	str	r3, [sp, #12]
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d80c      	bhi.n	800f7e6 <__multiply+0x9e>
 800f7cc:	2e00      	cmp	r6, #0
 800f7ce:	dd03      	ble.n	800f7d8 <__multiply+0x90>
 800f7d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d05a      	beq.n	800f88e <__multiply+0x146>
 800f7d8:	6106      	str	r6, [r0, #16]
 800f7da:	b005      	add	sp, #20
 800f7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7e0:	f843 2b04 	str.w	r2, [r3], #4
 800f7e4:	e7d8      	b.n	800f798 <__multiply+0x50>
 800f7e6:	f8b3 a000 	ldrh.w	sl, [r3]
 800f7ea:	f1ba 0f00 	cmp.w	sl, #0
 800f7ee:	d024      	beq.n	800f83a <__multiply+0xf2>
 800f7f0:	f104 0e14 	add.w	lr, r4, #20
 800f7f4:	46a9      	mov	r9, r5
 800f7f6:	f04f 0c00 	mov.w	ip, #0
 800f7fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f7fe:	f8d9 1000 	ldr.w	r1, [r9]
 800f802:	fa1f fb82 	uxth.w	fp, r2
 800f806:	b289      	uxth	r1, r1
 800f808:	fb0a 110b 	mla	r1, sl, fp, r1
 800f80c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f810:	f8d9 2000 	ldr.w	r2, [r9]
 800f814:	4461      	add	r1, ip
 800f816:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f81a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f81e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f822:	b289      	uxth	r1, r1
 800f824:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f828:	4577      	cmp	r7, lr
 800f82a:	f849 1b04 	str.w	r1, [r9], #4
 800f82e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f832:	d8e2      	bhi.n	800f7fa <__multiply+0xb2>
 800f834:	9a01      	ldr	r2, [sp, #4]
 800f836:	f845 c002 	str.w	ip, [r5, r2]
 800f83a:	9a03      	ldr	r2, [sp, #12]
 800f83c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f840:	3304      	adds	r3, #4
 800f842:	f1b9 0f00 	cmp.w	r9, #0
 800f846:	d020      	beq.n	800f88a <__multiply+0x142>
 800f848:	6829      	ldr	r1, [r5, #0]
 800f84a:	f104 0c14 	add.w	ip, r4, #20
 800f84e:	46ae      	mov	lr, r5
 800f850:	f04f 0a00 	mov.w	sl, #0
 800f854:	f8bc b000 	ldrh.w	fp, [ip]
 800f858:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f85c:	fb09 220b 	mla	r2, r9, fp, r2
 800f860:	4492      	add	sl, r2
 800f862:	b289      	uxth	r1, r1
 800f864:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f868:	f84e 1b04 	str.w	r1, [lr], #4
 800f86c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f870:	f8be 1000 	ldrh.w	r1, [lr]
 800f874:	0c12      	lsrs	r2, r2, #16
 800f876:	fb09 1102 	mla	r1, r9, r2, r1
 800f87a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f87e:	4567      	cmp	r7, ip
 800f880:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f884:	d8e6      	bhi.n	800f854 <__multiply+0x10c>
 800f886:	9a01      	ldr	r2, [sp, #4]
 800f888:	50a9      	str	r1, [r5, r2]
 800f88a:	3504      	adds	r5, #4
 800f88c:	e79a      	b.n	800f7c4 <__multiply+0x7c>
 800f88e:	3e01      	subs	r6, #1
 800f890:	e79c      	b.n	800f7cc <__multiply+0x84>
 800f892:	bf00      	nop
 800f894:	0801216f 	.word	0x0801216f
 800f898:	08012180 	.word	0x08012180

0800f89c <__pow5mult>:
 800f89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8a0:	4615      	mov	r5, r2
 800f8a2:	f012 0203 	ands.w	r2, r2, #3
 800f8a6:	4606      	mov	r6, r0
 800f8a8:	460f      	mov	r7, r1
 800f8aa:	d007      	beq.n	800f8bc <__pow5mult+0x20>
 800f8ac:	4c25      	ldr	r4, [pc, #148]	; (800f944 <__pow5mult+0xa8>)
 800f8ae:	3a01      	subs	r2, #1
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f8b6:	f7ff fe9b 	bl	800f5f0 <__multadd>
 800f8ba:	4607      	mov	r7, r0
 800f8bc:	10ad      	asrs	r5, r5, #2
 800f8be:	d03d      	beq.n	800f93c <__pow5mult+0xa0>
 800f8c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f8c2:	b97c      	cbnz	r4, 800f8e4 <__pow5mult+0x48>
 800f8c4:	2010      	movs	r0, #16
 800f8c6:	f7ff fe29 	bl	800f51c <malloc>
 800f8ca:	4602      	mov	r2, r0
 800f8cc:	6270      	str	r0, [r6, #36]	; 0x24
 800f8ce:	b928      	cbnz	r0, 800f8dc <__pow5mult+0x40>
 800f8d0:	4b1d      	ldr	r3, [pc, #116]	; (800f948 <__pow5mult+0xac>)
 800f8d2:	481e      	ldr	r0, [pc, #120]	; (800f94c <__pow5mult+0xb0>)
 800f8d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f8d8:	f000 fc0e 	bl	80100f8 <__assert_func>
 800f8dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f8e0:	6004      	str	r4, [r0, #0]
 800f8e2:	60c4      	str	r4, [r0, #12]
 800f8e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f8e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f8ec:	b94c      	cbnz	r4, 800f902 <__pow5mult+0x66>
 800f8ee:	f240 2171 	movw	r1, #625	; 0x271
 800f8f2:	4630      	mov	r0, r6
 800f8f4:	f7ff ff12 	bl	800f71c <__i2b>
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800f8fe:	4604      	mov	r4, r0
 800f900:	6003      	str	r3, [r0, #0]
 800f902:	f04f 0900 	mov.w	r9, #0
 800f906:	07eb      	lsls	r3, r5, #31
 800f908:	d50a      	bpl.n	800f920 <__pow5mult+0x84>
 800f90a:	4639      	mov	r1, r7
 800f90c:	4622      	mov	r2, r4
 800f90e:	4630      	mov	r0, r6
 800f910:	f7ff ff1a 	bl	800f748 <__multiply>
 800f914:	4639      	mov	r1, r7
 800f916:	4680      	mov	r8, r0
 800f918:	4630      	mov	r0, r6
 800f91a:	f7ff fe47 	bl	800f5ac <_Bfree>
 800f91e:	4647      	mov	r7, r8
 800f920:	106d      	asrs	r5, r5, #1
 800f922:	d00b      	beq.n	800f93c <__pow5mult+0xa0>
 800f924:	6820      	ldr	r0, [r4, #0]
 800f926:	b938      	cbnz	r0, 800f938 <__pow5mult+0x9c>
 800f928:	4622      	mov	r2, r4
 800f92a:	4621      	mov	r1, r4
 800f92c:	4630      	mov	r0, r6
 800f92e:	f7ff ff0b 	bl	800f748 <__multiply>
 800f932:	6020      	str	r0, [r4, #0]
 800f934:	f8c0 9000 	str.w	r9, [r0]
 800f938:	4604      	mov	r4, r0
 800f93a:	e7e4      	b.n	800f906 <__pow5mult+0x6a>
 800f93c:	4638      	mov	r0, r7
 800f93e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f942:	bf00      	nop
 800f944:	080122d0 	.word	0x080122d0
 800f948:	080120fd 	.word	0x080120fd
 800f94c:	08012180 	.word	0x08012180

0800f950 <__lshift>:
 800f950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f954:	460c      	mov	r4, r1
 800f956:	6849      	ldr	r1, [r1, #4]
 800f958:	6923      	ldr	r3, [r4, #16]
 800f95a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f95e:	68a3      	ldr	r3, [r4, #8]
 800f960:	4607      	mov	r7, r0
 800f962:	4691      	mov	r9, r2
 800f964:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f968:	f108 0601 	add.w	r6, r8, #1
 800f96c:	42b3      	cmp	r3, r6
 800f96e:	db0b      	blt.n	800f988 <__lshift+0x38>
 800f970:	4638      	mov	r0, r7
 800f972:	f7ff fddb 	bl	800f52c <_Balloc>
 800f976:	4605      	mov	r5, r0
 800f978:	b948      	cbnz	r0, 800f98e <__lshift+0x3e>
 800f97a:	4602      	mov	r2, r0
 800f97c:	4b2a      	ldr	r3, [pc, #168]	; (800fa28 <__lshift+0xd8>)
 800f97e:	482b      	ldr	r0, [pc, #172]	; (800fa2c <__lshift+0xdc>)
 800f980:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f984:	f000 fbb8 	bl	80100f8 <__assert_func>
 800f988:	3101      	adds	r1, #1
 800f98a:	005b      	lsls	r3, r3, #1
 800f98c:	e7ee      	b.n	800f96c <__lshift+0x1c>
 800f98e:	2300      	movs	r3, #0
 800f990:	f100 0114 	add.w	r1, r0, #20
 800f994:	f100 0210 	add.w	r2, r0, #16
 800f998:	4618      	mov	r0, r3
 800f99a:	4553      	cmp	r3, sl
 800f99c:	db37      	blt.n	800fa0e <__lshift+0xbe>
 800f99e:	6920      	ldr	r0, [r4, #16]
 800f9a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f9a4:	f104 0314 	add.w	r3, r4, #20
 800f9a8:	f019 091f 	ands.w	r9, r9, #31
 800f9ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f9b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f9b4:	d02f      	beq.n	800fa16 <__lshift+0xc6>
 800f9b6:	f1c9 0e20 	rsb	lr, r9, #32
 800f9ba:	468a      	mov	sl, r1
 800f9bc:	f04f 0c00 	mov.w	ip, #0
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	fa02 f209 	lsl.w	r2, r2, r9
 800f9c6:	ea42 020c 	orr.w	r2, r2, ip
 800f9ca:	f84a 2b04 	str.w	r2, [sl], #4
 800f9ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9d2:	4298      	cmp	r0, r3
 800f9d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f9d8:	d8f2      	bhi.n	800f9c0 <__lshift+0x70>
 800f9da:	1b03      	subs	r3, r0, r4
 800f9dc:	3b15      	subs	r3, #21
 800f9de:	f023 0303 	bic.w	r3, r3, #3
 800f9e2:	3304      	adds	r3, #4
 800f9e4:	f104 0215 	add.w	r2, r4, #21
 800f9e8:	4290      	cmp	r0, r2
 800f9ea:	bf38      	it	cc
 800f9ec:	2304      	movcc	r3, #4
 800f9ee:	f841 c003 	str.w	ip, [r1, r3]
 800f9f2:	f1bc 0f00 	cmp.w	ip, #0
 800f9f6:	d001      	beq.n	800f9fc <__lshift+0xac>
 800f9f8:	f108 0602 	add.w	r6, r8, #2
 800f9fc:	3e01      	subs	r6, #1
 800f9fe:	4638      	mov	r0, r7
 800fa00:	612e      	str	r6, [r5, #16]
 800fa02:	4621      	mov	r1, r4
 800fa04:	f7ff fdd2 	bl	800f5ac <_Bfree>
 800fa08:	4628      	mov	r0, r5
 800fa0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800fa12:	3301      	adds	r3, #1
 800fa14:	e7c1      	b.n	800f99a <__lshift+0x4a>
 800fa16:	3904      	subs	r1, #4
 800fa18:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800fa20:	4298      	cmp	r0, r3
 800fa22:	d8f9      	bhi.n	800fa18 <__lshift+0xc8>
 800fa24:	e7ea      	b.n	800f9fc <__lshift+0xac>
 800fa26:	bf00      	nop
 800fa28:	0801216f 	.word	0x0801216f
 800fa2c:	08012180 	.word	0x08012180

0800fa30 <__mcmp>:
 800fa30:	b530      	push	{r4, r5, lr}
 800fa32:	6902      	ldr	r2, [r0, #16]
 800fa34:	690c      	ldr	r4, [r1, #16]
 800fa36:	1b12      	subs	r2, r2, r4
 800fa38:	d10e      	bne.n	800fa58 <__mcmp+0x28>
 800fa3a:	f100 0314 	add.w	r3, r0, #20
 800fa3e:	3114      	adds	r1, #20
 800fa40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fa44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fa48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fa4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fa50:	42a5      	cmp	r5, r4
 800fa52:	d003      	beq.n	800fa5c <__mcmp+0x2c>
 800fa54:	d305      	bcc.n	800fa62 <__mcmp+0x32>
 800fa56:	2201      	movs	r2, #1
 800fa58:	4610      	mov	r0, r2
 800fa5a:	bd30      	pop	{r4, r5, pc}
 800fa5c:	4283      	cmp	r3, r0
 800fa5e:	d3f3      	bcc.n	800fa48 <__mcmp+0x18>
 800fa60:	e7fa      	b.n	800fa58 <__mcmp+0x28>
 800fa62:	f04f 32ff 	mov.w	r2, #4294967295
 800fa66:	e7f7      	b.n	800fa58 <__mcmp+0x28>

0800fa68 <__mdiff>:
 800fa68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa6c:	460c      	mov	r4, r1
 800fa6e:	4606      	mov	r6, r0
 800fa70:	4611      	mov	r1, r2
 800fa72:	4620      	mov	r0, r4
 800fa74:	4690      	mov	r8, r2
 800fa76:	f7ff ffdb 	bl	800fa30 <__mcmp>
 800fa7a:	1e05      	subs	r5, r0, #0
 800fa7c:	d110      	bne.n	800faa0 <__mdiff+0x38>
 800fa7e:	4629      	mov	r1, r5
 800fa80:	4630      	mov	r0, r6
 800fa82:	f7ff fd53 	bl	800f52c <_Balloc>
 800fa86:	b930      	cbnz	r0, 800fa96 <__mdiff+0x2e>
 800fa88:	4b3a      	ldr	r3, [pc, #232]	; (800fb74 <__mdiff+0x10c>)
 800fa8a:	4602      	mov	r2, r0
 800fa8c:	f240 2132 	movw	r1, #562	; 0x232
 800fa90:	4839      	ldr	r0, [pc, #228]	; (800fb78 <__mdiff+0x110>)
 800fa92:	f000 fb31 	bl	80100f8 <__assert_func>
 800fa96:	2301      	movs	r3, #1
 800fa98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fa9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faa0:	bfa4      	itt	ge
 800faa2:	4643      	movge	r3, r8
 800faa4:	46a0      	movge	r8, r4
 800faa6:	4630      	mov	r0, r6
 800faa8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800faac:	bfa6      	itte	ge
 800faae:	461c      	movge	r4, r3
 800fab0:	2500      	movge	r5, #0
 800fab2:	2501      	movlt	r5, #1
 800fab4:	f7ff fd3a 	bl	800f52c <_Balloc>
 800fab8:	b920      	cbnz	r0, 800fac4 <__mdiff+0x5c>
 800faba:	4b2e      	ldr	r3, [pc, #184]	; (800fb74 <__mdiff+0x10c>)
 800fabc:	4602      	mov	r2, r0
 800fabe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fac2:	e7e5      	b.n	800fa90 <__mdiff+0x28>
 800fac4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fac8:	6926      	ldr	r6, [r4, #16]
 800faca:	60c5      	str	r5, [r0, #12]
 800facc:	f104 0914 	add.w	r9, r4, #20
 800fad0:	f108 0514 	add.w	r5, r8, #20
 800fad4:	f100 0e14 	add.w	lr, r0, #20
 800fad8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fadc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fae0:	f108 0210 	add.w	r2, r8, #16
 800fae4:	46f2      	mov	sl, lr
 800fae6:	2100      	movs	r1, #0
 800fae8:	f859 3b04 	ldr.w	r3, [r9], #4
 800faec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800faf0:	fa1f f883 	uxth.w	r8, r3
 800faf4:	fa11 f18b 	uxtah	r1, r1, fp
 800faf8:	0c1b      	lsrs	r3, r3, #16
 800fafa:	eba1 0808 	sub.w	r8, r1, r8
 800fafe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fb02:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fb06:	fa1f f888 	uxth.w	r8, r8
 800fb0a:	1419      	asrs	r1, r3, #16
 800fb0c:	454e      	cmp	r6, r9
 800fb0e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fb12:	f84a 3b04 	str.w	r3, [sl], #4
 800fb16:	d8e7      	bhi.n	800fae8 <__mdiff+0x80>
 800fb18:	1b33      	subs	r3, r6, r4
 800fb1a:	3b15      	subs	r3, #21
 800fb1c:	f023 0303 	bic.w	r3, r3, #3
 800fb20:	3304      	adds	r3, #4
 800fb22:	3415      	adds	r4, #21
 800fb24:	42a6      	cmp	r6, r4
 800fb26:	bf38      	it	cc
 800fb28:	2304      	movcc	r3, #4
 800fb2a:	441d      	add	r5, r3
 800fb2c:	4473      	add	r3, lr
 800fb2e:	469e      	mov	lr, r3
 800fb30:	462e      	mov	r6, r5
 800fb32:	4566      	cmp	r6, ip
 800fb34:	d30e      	bcc.n	800fb54 <__mdiff+0xec>
 800fb36:	f10c 0203 	add.w	r2, ip, #3
 800fb3a:	1b52      	subs	r2, r2, r5
 800fb3c:	f022 0203 	bic.w	r2, r2, #3
 800fb40:	3d03      	subs	r5, #3
 800fb42:	45ac      	cmp	ip, r5
 800fb44:	bf38      	it	cc
 800fb46:	2200      	movcc	r2, #0
 800fb48:	441a      	add	r2, r3
 800fb4a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fb4e:	b17b      	cbz	r3, 800fb70 <__mdiff+0x108>
 800fb50:	6107      	str	r7, [r0, #16]
 800fb52:	e7a3      	b.n	800fa9c <__mdiff+0x34>
 800fb54:	f856 8b04 	ldr.w	r8, [r6], #4
 800fb58:	fa11 f288 	uxtah	r2, r1, r8
 800fb5c:	1414      	asrs	r4, r2, #16
 800fb5e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fb62:	b292      	uxth	r2, r2
 800fb64:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fb68:	f84e 2b04 	str.w	r2, [lr], #4
 800fb6c:	1421      	asrs	r1, r4, #16
 800fb6e:	e7e0      	b.n	800fb32 <__mdiff+0xca>
 800fb70:	3f01      	subs	r7, #1
 800fb72:	e7ea      	b.n	800fb4a <__mdiff+0xe2>
 800fb74:	0801216f 	.word	0x0801216f
 800fb78:	08012180 	.word	0x08012180

0800fb7c <__d2b>:
 800fb7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fb80:	4689      	mov	r9, r1
 800fb82:	2101      	movs	r1, #1
 800fb84:	ec57 6b10 	vmov	r6, r7, d0
 800fb88:	4690      	mov	r8, r2
 800fb8a:	f7ff fccf 	bl	800f52c <_Balloc>
 800fb8e:	4604      	mov	r4, r0
 800fb90:	b930      	cbnz	r0, 800fba0 <__d2b+0x24>
 800fb92:	4602      	mov	r2, r0
 800fb94:	4b25      	ldr	r3, [pc, #148]	; (800fc2c <__d2b+0xb0>)
 800fb96:	4826      	ldr	r0, [pc, #152]	; (800fc30 <__d2b+0xb4>)
 800fb98:	f240 310a 	movw	r1, #778	; 0x30a
 800fb9c:	f000 faac 	bl	80100f8 <__assert_func>
 800fba0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fba4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fba8:	bb35      	cbnz	r5, 800fbf8 <__d2b+0x7c>
 800fbaa:	2e00      	cmp	r6, #0
 800fbac:	9301      	str	r3, [sp, #4]
 800fbae:	d028      	beq.n	800fc02 <__d2b+0x86>
 800fbb0:	4668      	mov	r0, sp
 800fbb2:	9600      	str	r6, [sp, #0]
 800fbb4:	f7ff fd82 	bl	800f6bc <__lo0bits>
 800fbb8:	9900      	ldr	r1, [sp, #0]
 800fbba:	b300      	cbz	r0, 800fbfe <__d2b+0x82>
 800fbbc:	9a01      	ldr	r2, [sp, #4]
 800fbbe:	f1c0 0320 	rsb	r3, r0, #32
 800fbc2:	fa02 f303 	lsl.w	r3, r2, r3
 800fbc6:	430b      	orrs	r3, r1
 800fbc8:	40c2      	lsrs	r2, r0
 800fbca:	6163      	str	r3, [r4, #20]
 800fbcc:	9201      	str	r2, [sp, #4]
 800fbce:	9b01      	ldr	r3, [sp, #4]
 800fbd0:	61a3      	str	r3, [r4, #24]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	bf14      	ite	ne
 800fbd6:	2202      	movne	r2, #2
 800fbd8:	2201      	moveq	r2, #1
 800fbda:	6122      	str	r2, [r4, #16]
 800fbdc:	b1d5      	cbz	r5, 800fc14 <__d2b+0x98>
 800fbde:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fbe2:	4405      	add	r5, r0
 800fbe4:	f8c9 5000 	str.w	r5, [r9]
 800fbe8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fbec:	f8c8 0000 	str.w	r0, [r8]
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	b003      	add	sp, #12
 800fbf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fbfc:	e7d5      	b.n	800fbaa <__d2b+0x2e>
 800fbfe:	6161      	str	r1, [r4, #20]
 800fc00:	e7e5      	b.n	800fbce <__d2b+0x52>
 800fc02:	a801      	add	r0, sp, #4
 800fc04:	f7ff fd5a 	bl	800f6bc <__lo0bits>
 800fc08:	9b01      	ldr	r3, [sp, #4]
 800fc0a:	6163      	str	r3, [r4, #20]
 800fc0c:	2201      	movs	r2, #1
 800fc0e:	6122      	str	r2, [r4, #16]
 800fc10:	3020      	adds	r0, #32
 800fc12:	e7e3      	b.n	800fbdc <__d2b+0x60>
 800fc14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fc18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fc1c:	f8c9 0000 	str.w	r0, [r9]
 800fc20:	6918      	ldr	r0, [r3, #16]
 800fc22:	f7ff fd2b 	bl	800f67c <__hi0bits>
 800fc26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fc2a:	e7df      	b.n	800fbec <__d2b+0x70>
 800fc2c:	0801216f 	.word	0x0801216f
 800fc30:	08012180 	.word	0x08012180

0800fc34 <_calloc_r>:
 800fc34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc36:	fba1 2402 	umull	r2, r4, r1, r2
 800fc3a:	b94c      	cbnz	r4, 800fc50 <_calloc_r+0x1c>
 800fc3c:	4611      	mov	r1, r2
 800fc3e:	9201      	str	r2, [sp, #4]
 800fc40:	f000 f87a 	bl	800fd38 <_malloc_r>
 800fc44:	9a01      	ldr	r2, [sp, #4]
 800fc46:	4605      	mov	r5, r0
 800fc48:	b930      	cbnz	r0, 800fc58 <_calloc_r+0x24>
 800fc4a:	4628      	mov	r0, r5
 800fc4c:	b003      	add	sp, #12
 800fc4e:	bd30      	pop	{r4, r5, pc}
 800fc50:	220c      	movs	r2, #12
 800fc52:	6002      	str	r2, [r0, #0]
 800fc54:	2500      	movs	r5, #0
 800fc56:	e7f8      	b.n	800fc4a <_calloc_r+0x16>
 800fc58:	4621      	mov	r1, r4
 800fc5a:	f7fe f919 	bl	800de90 <memset>
 800fc5e:	e7f4      	b.n	800fc4a <_calloc_r+0x16>

0800fc60 <_free_r>:
 800fc60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc62:	2900      	cmp	r1, #0
 800fc64:	d044      	beq.n	800fcf0 <_free_r+0x90>
 800fc66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc6a:	9001      	str	r0, [sp, #4]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	f1a1 0404 	sub.w	r4, r1, #4
 800fc72:	bfb8      	it	lt
 800fc74:	18e4      	addlt	r4, r4, r3
 800fc76:	f000 fa9b 	bl	80101b0 <__malloc_lock>
 800fc7a:	4a1e      	ldr	r2, [pc, #120]	; (800fcf4 <_free_r+0x94>)
 800fc7c:	9801      	ldr	r0, [sp, #4]
 800fc7e:	6813      	ldr	r3, [r2, #0]
 800fc80:	b933      	cbnz	r3, 800fc90 <_free_r+0x30>
 800fc82:	6063      	str	r3, [r4, #4]
 800fc84:	6014      	str	r4, [r2, #0]
 800fc86:	b003      	add	sp, #12
 800fc88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc8c:	f000 ba96 	b.w	80101bc <__malloc_unlock>
 800fc90:	42a3      	cmp	r3, r4
 800fc92:	d908      	bls.n	800fca6 <_free_r+0x46>
 800fc94:	6825      	ldr	r5, [r4, #0]
 800fc96:	1961      	adds	r1, r4, r5
 800fc98:	428b      	cmp	r3, r1
 800fc9a:	bf01      	itttt	eq
 800fc9c:	6819      	ldreq	r1, [r3, #0]
 800fc9e:	685b      	ldreq	r3, [r3, #4]
 800fca0:	1949      	addeq	r1, r1, r5
 800fca2:	6021      	streq	r1, [r4, #0]
 800fca4:	e7ed      	b.n	800fc82 <_free_r+0x22>
 800fca6:	461a      	mov	r2, r3
 800fca8:	685b      	ldr	r3, [r3, #4]
 800fcaa:	b10b      	cbz	r3, 800fcb0 <_free_r+0x50>
 800fcac:	42a3      	cmp	r3, r4
 800fcae:	d9fa      	bls.n	800fca6 <_free_r+0x46>
 800fcb0:	6811      	ldr	r1, [r2, #0]
 800fcb2:	1855      	adds	r5, r2, r1
 800fcb4:	42a5      	cmp	r5, r4
 800fcb6:	d10b      	bne.n	800fcd0 <_free_r+0x70>
 800fcb8:	6824      	ldr	r4, [r4, #0]
 800fcba:	4421      	add	r1, r4
 800fcbc:	1854      	adds	r4, r2, r1
 800fcbe:	42a3      	cmp	r3, r4
 800fcc0:	6011      	str	r1, [r2, #0]
 800fcc2:	d1e0      	bne.n	800fc86 <_free_r+0x26>
 800fcc4:	681c      	ldr	r4, [r3, #0]
 800fcc6:	685b      	ldr	r3, [r3, #4]
 800fcc8:	6053      	str	r3, [r2, #4]
 800fcca:	4421      	add	r1, r4
 800fccc:	6011      	str	r1, [r2, #0]
 800fcce:	e7da      	b.n	800fc86 <_free_r+0x26>
 800fcd0:	d902      	bls.n	800fcd8 <_free_r+0x78>
 800fcd2:	230c      	movs	r3, #12
 800fcd4:	6003      	str	r3, [r0, #0]
 800fcd6:	e7d6      	b.n	800fc86 <_free_r+0x26>
 800fcd8:	6825      	ldr	r5, [r4, #0]
 800fcda:	1961      	adds	r1, r4, r5
 800fcdc:	428b      	cmp	r3, r1
 800fcde:	bf04      	itt	eq
 800fce0:	6819      	ldreq	r1, [r3, #0]
 800fce2:	685b      	ldreq	r3, [r3, #4]
 800fce4:	6063      	str	r3, [r4, #4]
 800fce6:	bf04      	itt	eq
 800fce8:	1949      	addeq	r1, r1, r5
 800fcea:	6021      	streq	r1, [r4, #0]
 800fcec:	6054      	str	r4, [r2, #4]
 800fcee:	e7ca      	b.n	800fc86 <_free_r+0x26>
 800fcf0:	b003      	add	sp, #12
 800fcf2:	bd30      	pop	{r4, r5, pc}
 800fcf4:	20007bfc 	.word	0x20007bfc

0800fcf8 <sbrk_aligned>:
 800fcf8:	b570      	push	{r4, r5, r6, lr}
 800fcfa:	4e0e      	ldr	r6, [pc, #56]	; (800fd34 <sbrk_aligned+0x3c>)
 800fcfc:	460c      	mov	r4, r1
 800fcfe:	6831      	ldr	r1, [r6, #0]
 800fd00:	4605      	mov	r5, r0
 800fd02:	b911      	cbnz	r1, 800fd0a <sbrk_aligned+0x12>
 800fd04:	f000 f9e8 	bl	80100d8 <_sbrk_r>
 800fd08:	6030      	str	r0, [r6, #0]
 800fd0a:	4621      	mov	r1, r4
 800fd0c:	4628      	mov	r0, r5
 800fd0e:	f000 f9e3 	bl	80100d8 <_sbrk_r>
 800fd12:	1c43      	adds	r3, r0, #1
 800fd14:	d00a      	beq.n	800fd2c <sbrk_aligned+0x34>
 800fd16:	1cc4      	adds	r4, r0, #3
 800fd18:	f024 0403 	bic.w	r4, r4, #3
 800fd1c:	42a0      	cmp	r0, r4
 800fd1e:	d007      	beq.n	800fd30 <sbrk_aligned+0x38>
 800fd20:	1a21      	subs	r1, r4, r0
 800fd22:	4628      	mov	r0, r5
 800fd24:	f000 f9d8 	bl	80100d8 <_sbrk_r>
 800fd28:	3001      	adds	r0, #1
 800fd2a:	d101      	bne.n	800fd30 <sbrk_aligned+0x38>
 800fd2c:	f04f 34ff 	mov.w	r4, #4294967295
 800fd30:	4620      	mov	r0, r4
 800fd32:	bd70      	pop	{r4, r5, r6, pc}
 800fd34:	20007c00 	.word	0x20007c00

0800fd38 <_malloc_r>:
 800fd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd3c:	1ccd      	adds	r5, r1, #3
 800fd3e:	f025 0503 	bic.w	r5, r5, #3
 800fd42:	3508      	adds	r5, #8
 800fd44:	2d0c      	cmp	r5, #12
 800fd46:	bf38      	it	cc
 800fd48:	250c      	movcc	r5, #12
 800fd4a:	2d00      	cmp	r5, #0
 800fd4c:	4607      	mov	r7, r0
 800fd4e:	db01      	blt.n	800fd54 <_malloc_r+0x1c>
 800fd50:	42a9      	cmp	r1, r5
 800fd52:	d905      	bls.n	800fd60 <_malloc_r+0x28>
 800fd54:	230c      	movs	r3, #12
 800fd56:	603b      	str	r3, [r7, #0]
 800fd58:	2600      	movs	r6, #0
 800fd5a:	4630      	mov	r0, r6
 800fd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd60:	4e2e      	ldr	r6, [pc, #184]	; (800fe1c <_malloc_r+0xe4>)
 800fd62:	f000 fa25 	bl	80101b0 <__malloc_lock>
 800fd66:	6833      	ldr	r3, [r6, #0]
 800fd68:	461c      	mov	r4, r3
 800fd6a:	bb34      	cbnz	r4, 800fdba <_malloc_r+0x82>
 800fd6c:	4629      	mov	r1, r5
 800fd6e:	4638      	mov	r0, r7
 800fd70:	f7ff ffc2 	bl	800fcf8 <sbrk_aligned>
 800fd74:	1c43      	adds	r3, r0, #1
 800fd76:	4604      	mov	r4, r0
 800fd78:	d14d      	bne.n	800fe16 <_malloc_r+0xde>
 800fd7a:	6834      	ldr	r4, [r6, #0]
 800fd7c:	4626      	mov	r6, r4
 800fd7e:	2e00      	cmp	r6, #0
 800fd80:	d140      	bne.n	800fe04 <_malloc_r+0xcc>
 800fd82:	6823      	ldr	r3, [r4, #0]
 800fd84:	4631      	mov	r1, r6
 800fd86:	4638      	mov	r0, r7
 800fd88:	eb04 0803 	add.w	r8, r4, r3
 800fd8c:	f000 f9a4 	bl	80100d8 <_sbrk_r>
 800fd90:	4580      	cmp	r8, r0
 800fd92:	d13a      	bne.n	800fe0a <_malloc_r+0xd2>
 800fd94:	6821      	ldr	r1, [r4, #0]
 800fd96:	3503      	adds	r5, #3
 800fd98:	1a6d      	subs	r5, r5, r1
 800fd9a:	f025 0503 	bic.w	r5, r5, #3
 800fd9e:	3508      	adds	r5, #8
 800fda0:	2d0c      	cmp	r5, #12
 800fda2:	bf38      	it	cc
 800fda4:	250c      	movcc	r5, #12
 800fda6:	4629      	mov	r1, r5
 800fda8:	4638      	mov	r0, r7
 800fdaa:	f7ff ffa5 	bl	800fcf8 <sbrk_aligned>
 800fdae:	3001      	adds	r0, #1
 800fdb0:	d02b      	beq.n	800fe0a <_malloc_r+0xd2>
 800fdb2:	6823      	ldr	r3, [r4, #0]
 800fdb4:	442b      	add	r3, r5
 800fdb6:	6023      	str	r3, [r4, #0]
 800fdb8:	e00e      	b.n	800fdd8 <_malloc_r+0xa0>
 800fdba:	6822      	ldr	r2, [r4, #0]
 800fdbc:	1b52      	subs	r2, r2, r5
 800fdbe:	d41e      	bmi.n	800fdfe <_malloc_r+0xc6>
 800fdc0:	2a0b      	cmp	r2, #11
 800fdc2:	d916      	bls.n	800fdf2 <_malloc_r+0xba>
 800fdc4:	1961      	adds	r1, r4, r5
 800fdc6:	42a3      	cmp	r3, r4
 800fdc8:	6025      	str	r5, [r4, #0]
 800fdca:	bf18      	it	ne
 800fdcc:	6059      	strne	r1, [r3, #4]
 800fdce:	6863      	ldr	r3, [r4, #4]
 800fdd0:	bf08      	it	eq
 800fdd2:	6031      	streq	r1, [r6, #0]
 800fdd4:	5162      	str	r2, [r4, r5]
 800fdd6:	604b      	str	r3, [r1, #4]
 800fdd8:	4638      	mov	r0, r7
 800fdda:	f104 060b 	add.w	r6, r4, #11
 800fdde:	f000 f9ed 	bl	80101bc <__malloc_unlock>
 800fde2:	f026 0607 	bic.w	r6, r6, #7
 800fde6:	1d23      	adds	r3, r4, #4
 800fde8:	1af2      	subs	r2, r6, r3
 800fdea:	d0b6      	beq.n	800fd5a <_malloc_r+0x22>
 800fdec:	1b9b      	subs	r3, r3, r6
 800fdee:	50a3      	str	r3, [r4, r2]
 800fdf0:	e7b3      	b.n	800fd5a <_malloc_r+0x22>
 800fdf2:	6862      	ldr	r2, [r4, #4]
 800fdf4:	42a3      	cmp	r3, r4
 800fdf6:	bf0c      	ite	eq
 800fdf8:	6032      	streq	r2, [r6, #0]
 800fdfa:	605a      	strne	r2, [r3, #4]
 800fdfc:	e7ec      	b.n	800fdd8 <_malloc_r+0xa0>
 800fdfe:	4623      	mov	r3, r4
 800fe00:	6864      	ldr	r4, [r4, #4]
 800fe02:	e7b2      	b.n	800fd6a <_malloc_r+0x32>
 800fe04:	4634      	mov	r4, r6
 800fe06:	6876      	ldr	r6, [r6, #4]
 800fe08:	e7b9      	b.n	800fd7e <_malloc_r+0x46>
 800fe0a:	230c      	movs	r3, #12
 800fe0c:	603b      	str	r3, [r7, #0]
 800fe0e:	4638      	mov	r0, r7
 800fe10:	f000 f9d4 	bl	80101bc <__malloc_unlock>
 800fe14:	e7a1      	b.n	800fd5a <_malloc_r+0x22>
 800fe16:	6025      	str	r5, [r4, #0]
 800fe18:	e7de      	b.n	800fdd8 <_malloc_r+0xa0>
 800fe1a:	bf00      	nop
 800fe1c:	20007bfc 	.word	0x20007bfc

0800fe20 <__ssputs_r>:
 800fe20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe24:	688e      	ldr	r6, [r1, #8]
 800fe26:	429e      	cmp	r6, r3
 800fe28:	4682      	mov	sl, r0
 800fe2a:	460c      	mov	r4, r1
 800fe2c:	4690      	mov	r8, r2
 800fe2e:	461f      	mov	r7, r3
 800fe30:	d838      	bhi.n	800fea4 <__ssputs_r+0x84>
 800fe32:	898a      	ldrh	r2, [r1, #12]
 800fe34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fe38:	d032      	beq.n	800fea0 <__ssputs_r+0x80>
 800fe3a:	6825      	ldr	r5, [r4, #0]
 800fe3c:	6909      	ldr	r1, [r1, #16]
 800fe3e:	eba5 0901 	sub.w	r9, r5, r1
 800fe42:	6965      	ldr	r5, [r4, #20]
 800fe44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	444b      	add	r3, r9
 800fe50:	106d      	asrs	r5, r5, #1
 800fe52:	429d      	cmp	r5, r3
 800fe54:	bf38      	it	cc
 800fe56:	461d      	movcc	r5, r3
 800fe58:	0553      	lsls	r3, r2, #21
 800fe5a:	d531      	bpl.n	800fec0 <__ssputs_r+0xa0>
 800fe5c:	4629      	mov	r1, r5
 800fe5e:	f7ff ff6b 	bl	800fd38 <_malloc_r>
 800fe62:	4606      	mov	r6, r0
 800fe64:	b950      	cbnz	r0, 800fe7c <__ssputs_r+0x5c>
 800fe66:	230c      	movs	r3, #12
 800fe68:	f8ca 3000 	str.w	r3, [sl]
 800fe6c:	89a3      	ldrh	r3, [r4, #12]
 800fe6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe72:	81a3      	strh	r3, [r4, #12]
 800fe74:	f04f 30ff 	mov.w	r0, #4294967295
 800fe78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe7c:	6921      	ldr	r1, [r4, #16]
 800fe7e:	464a      	mov	r2, r9
 800fe80:	f7fd fff8 	bl	800de74 <memcpy>
 800fe84:	89a3      	ldrh	r3, [r4, #12]
 800fe86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe8e:	81a3      	strh	r3, [r4, #12]
 800fe90:	6126      	str	r6, [r4, #16]
 800fe92:	6165      	str	r5, [r4, #20]
 800fe94:	444e      	add	r6, r9
 800fe96:	eba5 0509 	sub.w	r5, r5, r9
 800fe9a:	6026      	str	r6, [r4, #0]
 800fe9c:	60a5      	str	r5, [r4, #8]
 800fe9e:	463e      	mov	r6, r7
 800fea0:	42be      	cmp	r6, r7
 800fea2:	d900      	bls.n	800fea6 <__ssputs_r+0x86>
 800fea4:	463e      	mov	r6, r7
 800fea6:	6820      	ldr	r0, [r4, #0]
 800fea8:	4632      	mov	r2, r6
 800feaa:	4641      	mov	r1, r8
 800feac:	f000 f966 	bl	801017c <memmove>
 800feb0:	68a3      	ldr	r3, [r4, #8]
 800feb2:	1b9b      	subs	r3, r3, r6
 800feb4:	60a3      	str	r3, [r4, #8]
 800feb6:	6823      	ldr	r3, [r4, #0]
 800feb8:	4433      	add	r3, r6
 800feba:	6023      	str	r3, [r4, #0]
 800febc:	2000      	movs	r0, #0
 800febe:	e7db      	b.n	800fe78 <__ssputs_r+0x58>
 800fec0:	462a      	mov	r2, r5
 800fec2:	f000 f981 	bl	80101c8 <_realloc_r>
 800fec6:	4606      	mov	r6, r0
 800fec8:	2800      	cmp	r0, #0
 800feca:	d1e1      	bne.n	800fe90 <__ssputs_r+0x70>
 800fecc:	6921      	ldr	r1, [r4, #16]
 800fece:	4650      	mov	r0, sl
 800fed0:	f7ff fec6 	bl	800fc60 <_free_r>
 800fed4:	e7c7      	b.n	800fe66 <__ssputs_r+0x46>
	...

0800fed8 <_svfiprintf_r>:
 800fed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fedc:	4698      	mov	r8, r3
 800fede:	898b      	ldrh	r3, [r1, #12]
 800fee0:	061b      	lsls	r3, r3, #24
 800fee2:	b09d      	sub	sp, #116	; 0x74
 800fee4:	4607      	mov	r7, r0
 800fee6:	460d      	mov	r5, r1
 800fee8:	4614      	mov	r4, r2
 800feea:	d50e      	bpl.n	800ff0a <_svfiprintf_r+0x32>
 800feec:	690b      	ldr	r3, [r1, #16]
 800feee:	b963      	cbnz	r3, 800ff0a <_svfiprintf_r+0x32>
 800fef0:	2140      	movs	r1, #64	; 0x40
 800fef2:	f7ff ff21 	bl	800fd38 <_malloc_r>
 800fef6:	6028      	str	r0, [r5, #0]
 800fef8:	6128      	str	r0, [r5, #16]
 800fefa:	b920      	cbnz	r0, 800ff06 <_svfiprintf_r+0x2e>
 800fefc:	230c      	movs	r3, #12
 800fefe:	603b      	str	r3, [r7, #0]
 800ff00:	f04f 30ff 	mov.w	r0, #4294967295
 800ff04:	e0d1      	b.n	80100aa <_svfiprintf_r+0x1d2>
 800ff06:	2340      	movs	r3, #64	; 0x40
 800ff08:	616b      	str	r3, [r5, #20]
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ff0e:	2320      	movs	r3, #32
 800ff10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff14:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff18:	2330      	movs	r3, #48	; 0x30
 800ff1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80100c4 <_svfiprintf_r+0x1ec>
 800ff1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff22:	f04f 0901 	mov.w	r9, #1
 800ff26:	4623      	mov	r3, r4
 800ff28:	469a      	mov	sl, r3
 800ff2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff2e:	b10a      	cbz	r2, 800ff34 <_svfiprintf_r+0x5c>
 800ff30:	2a25      	cmp	r2, #37	; 0x25
 800ff32:	d1f9      	bne.n	800ff28 <_svfiprintf_r+0x50>
 800ff34:	ebba 0b04 	subs.w	fp, sl, r4
 800ff38:	d00b      	beq.n	800ff52 <_svfiprintf_r+0x7a>
 800ff3a:	465b      	mov	r3, fp
 800ff3c:	4622      	mov	r2, r4
 800ff3e:	4629      	mov	r1, r5
 800ff40:	4638      	mov	r0, r7
 800ff42:	f7ff ff6d 	bl	800fe20 <__ssputs_r>
 800ff46:	3001      	adds	r0, #1
 800ff48:	f000 80aa 	beq.w	80100a0 <_svfiprintf_r+0x1c8>
 800ff4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff4e:	445a      	add	r2, fp
 800ff50:	9209      	str	r2, [sp, #36]	; 0x24
 800ff52:	f89a 3000 	ldrb.w	r3, [sl]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	f000 80a2 	beq.w	80100a0 <_svfiprintf_r+0x1c8>
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff66:	f10a 0a01 	add.w	sl, sl, #1
 800ff6a:	9304      	str	r3, [sp, #16]
 800ff6c:	9307      	str	r3, [sp, #28]
 800ff6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff72:	931a      	str	r3, [sp, #104]	; 0x68
 800ff74:	4654      	mov	r4, sl
 800ff76:	2205      	movs	r2, #5
 800ff78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff7c:	4851      	ldr	r0, [pc, #324]	; (80100c4 <_svfiprintf_r+0x1ec>)
 800ff7e:	f7f0 f92f 	bl	80001e0 <memchr>
 800ff82:	9a04      	ldr	r2, [sp, #16]
 800ff84:	b9d8      	cbnz	r0, 800ffbe <_svfiprintf_r+0xe6>
 800ff86:	06d0      	lsls	r0, r2, #27
 800ff88:	bf44      	itt	mi
 800ff8a:	2320      	movmi	r3, #32
 800ff8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff90:	0711      	lsls	r1, r2, #28
 800ff92:	bf44      	itt	mi
 800ff94:	232b      	movmi	r3, #43	; 0x2b
 800ff96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ff9e:	2b2a      	cmp	r3, #42	; 0x2a
 800ffa0:	d015      	beq.n	800ffce <_svfiprintf_r+0xf6>
 800ffa2:	9a07      	ldr	r2, [sp, #28]
 800ffa4:	4654      	mov	r4, sl
 800ffa6:	2000      	movs	r0, #0
 800ffa8:	f04f 0c0a 	mov.w	ip, #10
 800ffac:	4621      	mov	r1, r4
 800ffae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffb2:	3b30      	subs	r3, #48	; 0x30
 800ffb4:	2b09      	cmp	r3, #9
 800ffb6:	d94e      	bls.n	8010056 <_svfiprintf_r+0x17e>
 800ffb8:	b1b0      	cbz	r0, 800ffe8 <_svfiprintf_r+0x110>
 800ffba:	9207      	str	r2, [sp, #28]
 800ffbc:	e014      	b.n	800ffe8 <_svfiprintf_r+0x110>
 800ffbe:	eba0 0308 	sub.w	r3, r0, r8
 800ffc2:	fa09 f303 	lsl.w	r3, r9, r3
 800ffc6:	4313      	orrs	r3, r2
 800ffc8:	9304      	str	r3, [sp, #16]
 800ffca:	46a2      	mov	sl, r4
 800ffcc:	e7d2      	b.n	800ff74 <_svfiprintf_r+0x9c>
 800ffce:	9b03      	ldr	r3, [sp, #12]
 800ffd0:	1d19      	adds	r1, r3, #4
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	9103      	str	r1, [sp, #12]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	bfbb      	ittet	lt
 800ffda:	425b      	neglt	r3, r3
 800ffdc:	f042 0202 	orrlt.w	r2, r2, #2
 800ffe0:	9307      	strge	r3, [sp, #28]
 800ffe2:	9307      	strlt	r3, [sp, #28]
 800ffe4:	bfb8      	it	lt
 800ffe6:	9204      	strlt	r2, [sp, #16]
 800ffe8:	7823      	ldrb	r3, [r4, #0]
 800ffea:	2b2e      	cmp	r3, #46	; 0x2e
 800ffec:	d10c      	bne.n	8010008 <_svfiprintf_r+0x130>
 800ffee:	7863      	ldrb	r3, [r4, #1]
 800fff0:	2b2a      	cmp	r3, #42	; 0x2a
 800fff2:	d135      	bne.n	8010060 <_svfiprintf_r+0x188>
 800fff4:	9b03      	ldr	r3, [sp, #12]
 800fff6:	1d1a      	adds	r2, r3, #4
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	9203      	str	r2, [sp, #12]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	bfb8      	it	lt
 8010000:	f04f 33ff 	movlt.w	r3, #4294967295
 8010004:	3402      	adds	r4, #2
 8010006:	9305      	str	r3, [sp, #20]
 8010008:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80100d4 <_svfiprintf_r+0x1fc>
 801000c:	7821      	ldrb	r1, [r4, #0]
 801000e:	2203      	movs	r2, #3
 8010010:	4650      	mov	r0, sl
 8010012:	f7f0 f8e5 	bl	80001e0 <memchr>
 8010016:	b140      	cbz	r0, 801002a <_svfiprintf_r+0x152>
 8010018:	2340      	movs	r3, #64	; 0x40
 801001a:	eba0 000a 	sub.w	r0, r0, sl
 801001e:	fa03 f000 	lsl.w	r0, r3, r0
 8010022:	9b04      	ldr	r3, [sp, #16]
 8010024:	4303      	orrs	r3, r0
 8010026:	3401      	adds	r4, #1
 8010028:	9304      	str	r3, [sp, #16]
 801002a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801002e:	4826      	ldr	r0, [pc, #152]	; (80100c8 <_svfiprintf_r+0x1f0>)
 8010030:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010034:	2206      	movs	r2, #6
 8010036:	f7f0 f8d3 	bl	80001e0 <memchr>
 801003a:	2800      	cmp	r0, #0
 801003c:	d038      	beq.n	80100b0 <_svfiprintf_r+0x1d8>
 801003e:	4b23      	ldr	r3, [pc, #140]	; (80100cc <_svfiprintf_r+0x1f4>)
 8010040:	bb1b      	cbnz	r3, 801008a <_svfiprintf_r+0x1b2>
 8010042:	9b03      	ldr	r3, [sp, #12]
 8010044:	3307      	adds	r3, #7
 8010046:	f023 0307 	bic.w	r3, r3, #7
 801004a:	3308      	adds	r3, #8
 801004c:	9303      	str	r3, [sp, #12]
 801004e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010050:	4433      	add	r3, r6
 8010052:	9309      	str	r3, [sp, #36]	; 0x24
 8010054:	e767      	b.n	800ff26 <_svfiprintf_r+0x4e>
 8010056:	fb0c 3202 	mla	r2, ip, r2, r3
 801005a:	460c      	mov	r4, r1
 801005c:	2001      	movs	r0, #1
 801005e:	e7a5      	b.n	800ffac <_svfiprintf_r+0xd4>
 8010060:	2300      	movs	r3, #0
 8010062:	3401      	adds	r4, #1
 8010064:	9305      	str	r3, [sp, #20]
 8010066:	4619      	mov	r1, r3
 8010068:	f04f 0c0a 	mov.w	ip, #10
 801006c:	4620      	mov	r0, r4
 801006e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010072:	3a30      	subs	r2, #48	; 0x30
 8010074:	2a09      	cmp	r2, #9
 8010076:	d903      	bls.n	8010080 <_svfiprintf_r+0x1a8>
 8010078:	2b00      	cmp	r3, #0
 801007a:	d0c5      	beq.n	8010008 <_svfiprintf_r+0x130>
 801007c:	9105      	str	r1, [sp, #20]
 801007e:	e7c3      	b.n	8010008 <_svfiprintf_r+0x130>
 8010080:	fb0c 2101 	mla	r1, ip, r1, r2
 8010084:	4604      	mov	r4, r0
 8010086:	2301      	movs	r3, #1
 8010088:	e7f0      	b.n	801006c <_svfiprintf_r+0x194>
 801008a:	ab03      	add	r3, sp, #12
 801008c:	9300      	str	r3, [sp, #0]
 801008e:	462a      	mov	r2, r5
 8010090:	4b0f      	ldr	r3, [pc, #60]	; (80100d0 <_svfiprintf_r+0x1f8>)
 8010092:	a904      	add	r1, sp, #16
 8010094:	4638      	mov	r0, r7
 8010096:	f7fd ffa3 	bl	800dfe0 <_printf_float>
 801009a:	1c42      	adds	r2, r0, #1
 801009c:	4606      	mov	r6, r0
 801009e:	d1d6      	bne.n	801004e <_svfiprintf_r+0x176>
 80100a0:	89ab      	ldrh	r3, [r5, #12]
 80100a2:	065b      	lsls	r3, r3, #25
 80100a4:	f53f af2c 	bmi.w	800ff00 <_svfiprintf_r+0x28>
 80100a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100aa:	b01d      	add	sp, #116	; 0x74
 80100ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100b0:	ab03      	add	r3, sp, #12
 80100b2:	9300      	str	r3, [sp, #0]
 80100b4:	462a      	mov	r2, r5
 80100b6:	4b06      	ldr	r3, [pc, #24]	; (80100d0 <_svfiprintf_r+0x1f8>)
 80100b8:	a904      	add	r1, sp, #16
 80100ba:	4638      	mov	r0, r7
 80100bc:	f7fe fa34 	bl	800e528 <_printf_i>
 80100c0:	e7eb      	b.n	801009a <_svfiprintf_r+0x1c2>
 80100c2:	bf00      	nop
 80100c4:	080122dc 	.word	0x080122dc
 80100c8:	080122e6 	.word	0x080122e6
 80100cc:	0800dfe1 	.word	0x0800dfe1
 80100d0:	0800fe21 	.word	0x0800fe21
 80100d4:	080122e2 	.word	0x080122e2

080100d8 <_sbrk_r>:
 80100d8:	b538      	push	{r3, r4, r5, lr}
 80100da:	4d06      	ldr	r5, [pc, #24]	; (80100f4 <_sbrk_r+0x1c>)
 80100dc:	2300      	movs	r3, #0
 80100de:	4604      	mov	r4, r0
 80100e0:	4608      	mov	r0, r1
 80100e2:	602b      	str	r3, [r5, #0]
 80100e4:	f7f1 ffce 	bl	8002084 <_sbrk>
 80100e8:	1c43      	adds	r3, r0, #1
 80100ea:	d102      	bne.n	80100f2 <_sbrk_r+0x1a>
 80100ec:	682b      	ldr	r3, [r5, #0]
 80100ee:	b103      	cbz	r3, 80100f2 <_sbrk_r+0x1a>
 80100f0:	6023      	str	r3, [r4, #0]
 80100f2:	bd38      	pop	{r3, r4, r5, pc}
 80100f4:	20007c04 	.word	0x20007c04

080100f8 <__assert_func>:
 80100f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80100fa:	4614      	mov	r4, r2
 80100fc:	461a      	mov	r2, r3
 80100fe:	4b09      	ldr	r3, [pc, #36]	; (8010124 <__assert_func+0x2c>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	4605      	mov	r5, r0
 8010104:	68d8      	ldr	r0, [r3, #12]
 8010106:	b14c      	cbz	r4, 801011c <__assert_func+0x24>
 8010108:	4b07      	ldr	r3, [pc, #28]	; (8010128 <__assert_func+0x30>)
 801010a:	9100      	str	r1, [sp, #0]
 801010c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010110:	4906      	ldr	r1, [pc, #24]	; (801012c <__assert_func+0x34>)
 8010112:	462b      	mov	r3, r5
 8010114:	f000 f80e 	bl	8010134 <fiprintf>
 8010118:	f000 faac 	bl	8010674 <abort>
 801011c:	4b04      	ldr	r3, [pc, #16]	; (8010130 <__assert_func+0x38>)
 801011e:	461c      	mov	r4, r3
 8010120:	e7f3      	b.n	801010a <__assert_func+0x12>
 8010122:	bf00      	nop
 8010124:	20000100 	.word	0x20000100
 8010128:	080122ed 	.word	0x080122ed
 801012c:	080122fa 	.word	0x080122fa
 8010130:	08012328 	.word	0x08012328

08010134 <fiprintf>:
 8010134:	b40e      	push	{r1, r2, r3}
 8010136:	b503      	push	{r0, r1, lr}
 8010138:	4601      	mov	r1, r0
 801013a:	ab03      	add	r3, sp, #12
 801013c:	4805      	ldr	r0, [pc, #20]	; (8010154 <fiprintf+0x20>)
 801013e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010142:	6800      	ldr	r0, [r0, #0]
 8010144:	9301      	str	r3, [sp, #4]
 8010146:	f000 f897 	bl	8010278 <_vfiprintf_r>
 801014a:	b002      	add	sp, #8
 801014c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010150:	b003      	add	sp, #12
 8010152:	4770      	bx	lr
 8010154:	20000100 	.word	0x20000100

08010158 <__ascii_mbtowc>:
 8010158:	b082      	sub	sp, #8
 801015a:	b901      	cbnz	r1, 801015e <__ascii_mbtowc+0x6>
 801015c:	a901      	add	r1, sp, #4
 801015e:	b142      	cbz	r2, 8010172 <__ascii_mbtowc+0x1a>
 8010160:	b14b      	cbz	r3, 8010176 <__ascii_mbtowc+0x1e>
 8010162:	7813      	ldrb	r3, [r2, #0]
 8010164:	600b      	str	r3, [r1, #0]
 8010166:	7812      	ldrb	r2, [r2, #0]
 8010168:	1e10      	subs	r0, r2, #0
 801016a:	bf18      	it	ne
 801016c:	2001      	movne	r0, #1
 801016e:	b002      	add	sp, #8
 8010170:	4770      	bx	lr
 8010172:	4610      	mov	r0, r2
 8010174:	e7fb      	b.n	801016e <__ascii_mbtowc+0x16>
 8010176:	f06f 0001 	mvn.w	r0, #1
 801017a:	e7f8      	b.n	801016e <__ascii_mbtowc+0x16>

0801017c <memmove>:
 801017c:	4288      	cmp	r0, r1
 801017e:	b510      	push	{r4, lr}
 8010180:	eb01 0402 	add.w	r4, r1, r2
 8010184:	d902      	bls.n	801018c <memmove+0x10>
 8010186:	4284      	cmp	r4, r0
 8010188:	4623      	mov	r3, r4
 801018a:	d807      	bhi.n	801019c <memmove+0x20>
 801018c:	1e43      	subs	r3, r0, #1
 801018e:	42a1      	cmp	r1, r4
 8010190:	d008      	beq.n	80101a4 <memmove+0x28>
 8010192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010196:	f803 2f01 	strb.w	r2, [r3, #1]!
 801019a:	e7f8      	b.n	801018e <memmove+0x12>
 801019c:	4402      	add	r2, r0
 801019e:	4601      	mov	r1, r0
 80101a0:	428a      	cmp	r2, r1
 80101a2:	d100      	bne.n	80101a6 <memmove+0x2a>
 80101a4:	bd10      	pop	{r4, pc}
 80101a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80101aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80101ae:	e7f7      	b.n	80101a0 <memmove+0x24>

080101b0 <__malloc_lock>:
 80101b0:	4801      	ldr	r0, [pc, #4]	; (80101b8 <__malloc_lock+0x8>)
 80101b2:	f000 bc1f 	b.w	80109f4 <__retarget_lock_acquire_recursive>
 80101b6:	bf00      	nop
 80101b8:	20007c08 	.word	0x20007c08

080101bc <__malloc_unlock>:
 80101bc:	4801      	ldr	r0, [pc, #4]	; (80101c4 <__malloc_unlock+0x8>)
 80101be:	f000 bc1a 	b.w	80109f6 <__retarget_lock_release_recursive>
 80101c2:	bf00      	nop
 80101c4:	20007c08 	.word	0x20007c08

080101c8 <_realloc_r>:
 80101c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101cc:	4680      	mov	r8, r0
 80101ce:	4614      	mov	r4, r2
 80101d0:	460e      	mov	r6, r1
 80101d2:	b921      	cbnz	r1, 80101de <_realloc_r+0x16>
 80101d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101d8:	4611      	mov	r1, r2
 80101da:	f7ff bdad 	b.w	800fd38 <_malloc_r>
 80101de:	b92a      	cbnz	r2, 80101ec <_realloc_r+0x24>
 80101e0:	f7ff fd3e 	bl	800fc60 <_free_r>
 80101e4:	4625      	mov	r5, r4
 80101e6:	4628      	mov	r0, r5
 80101e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101ec:	f000 fc6a 	bl	8010ac4 <_malloc_usable_size_r>
 80101f0:	4284      	cmp	r4, r0
 80101f2:	4607      	mov	r7, r0
 80101f4:	d802      	bhi.n	80101fc <_realloc_r+0x34>
 80101f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80101fa:	d812      	bhi.n	8010222 <_realloc_r+0x5a>
 80101fc:	4621      	mov	r1, r4
 80101fe:	4640      	mov	r0, r8
 8010200:	f7ff fd9a 	bl	800fd38 <_malloc_r>
 8010204:	4605      	mov	r5, r0
 8010206:	2800      	cmp	r0, #0
 8010208:	d0ed      	beq.n	80101e6 <_realloc_r+0x1e>
 801020a:	42bc      	cmp	r4, r7
 801020c:	4622      	mov	r2, r4
 801020e:	4631      	mov	r1, r6
 8010210:	bf28      	it	cs
 8010212:	463a      	movcs	r2, r7
 8010214:	f7fd fe2e 	bl	800de74 <memcpy>
 8010218:	4631      	mov	r1, r6
 801021a:	4640      	mov	r0, r8
 801021c:	f7ff fd20 	bl	800fc60 <_free_r>
 8010220:	e7e1      	b.n	80101e6 <_realloc_r+0x1e>
 8010222:	4635      	mov	r5, r6
 8010224:	e7df      	b.n	80101e6 <_realloc_r+0x1e>

08010226 <__sfputc_r>:
 8010226:	6893      	ldr	r3, [r2, #8]
 8010228:	3b01      	subs	r3, #1
 801022a:	2b00      	cmp	r3, #0
 801022c:	b410      	push	{r4}
 801022e:	6093      	str	r3, [r2, #8]
 8010230:	da08      	bge.n	8010244 <__sfputc_r+0x1e>
 8010232:	6994      	ldr	r4, [r2, #24]
 8010234:	42a3      	cmp	r3, r4
 8010236:	db01      	blt.n	801023c <__sfputc_r+0x16>
 8010238:	290a      	cmp	r1, #10
 801023a:	d103      	bne.n	8010244 <__sfputc_r+0x1e>
 801023c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010240:	f000 b94a 	b.w	80104d8 <__swbuf_r>
 8010244:	6813      	ldr	r3, [r2, #0]
 8010246:	1c58      	adds	r0, r3, #1
 8010248:	6010      	str	r0, [r2, #0]
 801024a:	7019      	strb	r1, [r3, #0]
 801024c:	4608      	mov	r0, r1
 801024e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010252:	4770      	bx	lr

08010254 <__sfputs_r>:
 8010254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010256:	4606      	mov	r6, r0
 8010258:	460f      	mov	r7, r1
 801025a:	4614      	mov	r4, r2
 801025c:	18d5      	adds	r5, r2, r3
 801025e:	42ac      	cmp	r4, r5
 8010260:	d101      	bne.n	8010266 <__sfputs_r+0x12>
 8010262:	2000      	movs	r0, #0
 8010264:	e007      	b.n	8010276 <__sfputs_r+0x22>
 8010266:	f814 1b01 	ldrb.w	r1, [r4], #1
 801026a:	463a      	mov	r2, r7
 801026c:	4630      	mov	r0, r6
 801026e:	f7ff ffda 	bl	8010226 <__sfputc_r>
 8010272:	1c43      	adds	r3, r0, #1
 8010274:	d1f3      	bne.n	801025e <__sfputs_r+0xa>
 8010276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010278 <_vfiprintf_r>:
 8010278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801027c:	460d      	mov	r5, r1
 801027e:	b09d      	sub	sp, #116	; 0x74
 8010280:	4614      	mov	r4, r2
 8010282:	4698      	mov	r8, r3
 8010284:	4606      	mov	r6, r0
 8010286:	b118      	cbz	r0, 8010290 <_vfiprintf_r+0x18>
 8010288:	6983      	ldr	r3, [r0, #24]
 801028a:	b90b      	cbnz	r3, 8010290 <_vfiprintf_r+0x18>
 801028c:	f000 fb14 	bl	80108b8 <__sinit>
 8010290:	4b89      	ldr	r3, [pc, #548]	; (80104b8 <_vfiprintf_r+0x240>)
 8010292:	429d      	cmp	r5, r3
 8010294:	d11b      	bne.n	80102ce <_vfiprintf_r+0x56>
 8010296:	6875      	ldr	r5, [r6, #4]
 8010298:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801029a:	07d9      	lsls	r1, r3, #31
 801029c:	d405      	bmi.n	80102aa <_vfiprintf_r+0x32>
 801029e:	89ab      	ldrh	r3, [r5, #12]
 80102a0:	059a      	lsls	r2, r3, #22
 80102a2:	d402      	bmi.n	80102aa <_vfiprintf_r+0x32>
 80102a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80102a6:	f000 fba5 	bl	80109f4 <__retarget_lock_acquire_recursive>
 80102aa:	89ab      	ldrh	r3, [r5, #12]
 80102ac:	071b      	lsls	r3, r3, #28
 80102ae:	d501      	bpl.n	80102b4 <_vfiprintf_r+0x3c>
 80102b0:	692b      	ldr	r3, [r5, #16]
 80102b2:	b9eb      	cbnz	r3, 80102f0 <_vfiprintf_r+0x78>
 80102b4:	4629      	mov	r1, r5
 80102b6:	4630      	mov	r0, r6
 80102b8:	f000 f96e 	bl	8010598 <__swsetup_r>
 80102bc:	b1c0      	cbz	r0, 80102f0 <_vfiprintf_r+0x78>
 80102be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80102c0:	07dc      	lsls	r4, r3, #31
 80102c2:	d50e      	bpl.n	80102e2 <_vfiprintf_r+0x6a>
 80102c4:	f04f 30ff 	mov.w	r0, #4294967295
 80102c8:	b01d      	add	sp, #116	; 0x74
 80102ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ce:	4b7b      	ldr	r3, [pc, #492]	; (80104bc <_vfiprintf_r+0x244>)
 80102d0:	429d      	cmp	r5, r3
 80102d2:	d101      	bne.n	80102d8 <_vfiprintf_r+0x60>
 80102d4:	68b5      	ldr	r5, [r6, #8]
 80102d6:	e7df      	b.n	8010298 <_vfiprintf_r+0x20>
 80102d8:	4b79      	ldr	r3, [pc, #484]	; (80104c0 <_vfiprintf_r+0x248>)
 80102da:	429d      	cmp	r5, r3
 80102dc:	bf08      	it	eq
 80102de:	68f5      	ldreq	r5, [r6, #12]
 80102e0:	e7da      	b.n	8010298 <_vfiprintf_r+0x20>
 80102e2:	89ab      	ldrh	r3, [r5, #12]
 80102e4:	0598      	lsls	r0, r3, #22
 80102e6:	d4ed      	bmi.n	80102c4 <_vfiprintf_r+0x4c>
 80102e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80102ea:	f000 fb84 	bl	80109f6 <__retarget_lock_release_recursive>
 80102ee:	e7e9      	b.n	80102c4 <_vfiprintf_r+0x4c>
 80102f0:	2300      	movs	r3, #0
 80102f2:	9309      	str	r3, [sp, #36]	; 0x24
 80102f4:	2320      	movs	r3, #32
 80102f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80102fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80102fe:	2330      	movs	r3, #48	; 0x30
 8010300:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80104c4 <_vfiprintf_r+0x24c>
 8010304:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010308:	f04f 0901 	mov.w	r9, #1
 801030c:	4623      	mov	r3, r4
 801030e:	469a      	mov	sl, r3
 8010310:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010314:	b10a      	cbz	r2, 801031a <_vfiprintf_r+0xa2>
 8010316:	2a25      	cmp	r2, #37	; 0x25
 8010318:	d1f9      	bne.n	801030e <_vfiprintf_r+0x96>
 801031a:	ebba 0b04 	subs.w	fp, sl, r4
 801031e:	d00b      	beq.n	8010338 <_vfiprintf_r+0xc0>
 8010320:	465b      	mov	r3, fp
 8010322:	4622      	mov	r2, r4
 8010324:	4629      	mov	r1, r5
 8010326:	4630      	mov	r0, r6
 8010328:	f7ff ff94 	bl	8010254 <__sfputs_r>
 801032c:	3001      	adds	r0, #1
 801032e:	f000 80aa 	beq.w	8010486 <_vfiprintf_r+0x20e>
 8010332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010334:	445a      	add	r2, fp
 8010336:	9209      	str	r2, [sp, #36]	; 0x24
 8010338:	f89a 3000 	ldrb.w	r3, [sl]
 801033c:	2b00      	cmp	r3, #0
 801033e:	f000 80a2 	beq.w	8010486 <_vfiprintf_r+0x20e>
 8010342:	2300      	movs	r3, #0
 8010344:	f04f 32ff 	mov.w	r2, #4294967295
 8010348:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801034c:	f10a 0a01 	add.w	sl, sl, #1
 8010350:	9304      	str	r3, [sp, #16]
 8010352:	9307      	str	r3, [sp, #28]
 8010354:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010358:	931a      	str	r3, [sp, #104]	; 0x68
 801035a:	4654      	mov	r4, sl
 801035c:	2205      	movs	r2, #5
 801035e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010362:	4858      	ldr	r0, [pc, #352]	; (80104c4 <_vfiprintf_r+0x24c>)
 8010364:	f7ef ff3c 	bl	80001e0 <memchr>
 8010368:	9a04      	ldr	r2, [sp, #16]
 801036a:	b9d8      	cbnz	r0, 80103a4 <_vfiprintf_r+0x12c>
 801036c:	06d1      	lsls	r1, r2, #27
 801036e:	bf44      	itt	mi
 8010370:	2320      	movmi	r3, #32
 8010372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010376:	0713      	lsls	r3, r2, #28
 8010378:	bf44      	itt	mi
 801037a:	232b      	movmi	r3, #43	; 0x2b
 801037c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010380:	f89a 3000 	ldrb.w	r3, [sl]
 8010384:	2b2a      	cmp	r3, #42	; 0x2a
 8010386:	d015      	beq.n	80103b4 <_vfiprintf_r+0x13c>
 8010388:	9a07      	ldr	r2, [sp, #28]
 801038a:	4654      	mov	r4, sl
 801038c:	2000      	movs	r0, #0
 801038e:	f04f 0c0a 	mov.w	ip, #10
 8010392:	4621      	mov	r1, r4
 8010394:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010398:	3b30      	subs	r3, #48	; 0x30
 801039a:	2b09      	cmp	r3, #9
 801039c:	d94e      	bls.n	801043c <_vfiprintf_r+0x1c4>
 801039e:	b1b0      	cbz	r0, 80103ce <_vfiprintf_r+0x156>
 80103a0:	9207      	str	r2, [sp, #28]
 80103a2:	e014      	b.n	80103ce <_vfiprintf_r+0x156>
 80103a4:	eba0 0308 	sub.w	r3, r0, r8
 80103a8:	fa09 f303 	lsl.w	r3, r9, r3
 80103ac:	4313      	orrs	r3, r2
 80103ae:	9304      	str	r3, [sp, #16]
 80103b0:	46a2      	mov	sl, r4
 80103b2:	e7d2      	b.n	801035a <_vfiprintf_r+0xe2>
 80103b4:	9b03      	ldr	r3, [sp, #12]
 80103b6:	1d19      	adds	r1, r3, #4
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	9103      	str	r1, [sp, #12]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	bfbb      	ittet	lt
 80103c0:	425b      	neglt	r3, r3
 80103c2:	f042 0202 	orrlt.w	r2, r2, #2
 80103c6:	9307      	strge	r3, [sp, #28]
 80103c8:	9307      	strlt	r3, [sp, #28]
 80103ca:	bfb8      	it	lt
 80103cc:	9204      	strlt	r2, [sp, #16]
 80103ce:	7823      	ldrb	r3, [r4, #0]
 80103d0:	2b2e      	cmp	r3, #46	; 0x2e
 80103d2:	d10c      	bne.n	80103ee <_vfiprintf_r+0x176>
 80103d4:	7863      	ldrb	r3, [r4, #1]
 80103d6:	2b2a      	cmp	r3, #42	; 0x2a
 80103d8:	d135      	bne.n	8010446 <_vfiprintf_r+0x1ce>
 80103da:	9b03      	ldr	r3, [sp, #12]
 80103dc:	1d1a      	adds	r2, r3, #4
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	9203      	str	r2, [sp, #12]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	bfb8      	it	lt
 80103e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80103ea:	3402      	adds	r4, #2
 80103ec:	9305      	str	r3, [sp, #20]
 80103ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80104d4 <_vfiprintf_r+0x25c>
 80103f2:	7821      	ldrb	r1, [r4, #0]
 80103f4:	2203      	movs	r2, #3
 80103f6:	4650      	mov	r0, sl
 80103f8:	f7ef fef2 	bl	80001e0 <memchr>
 80103fc:	b140      	cbz	r0, 8010410 <_vfiprintf_r+0x198>
 80103fe:	2340      	movs	r3, #64	; 0x40
 8010400:	eba0 000a 	sub.w	r0, r0, sl
 8010404:	fa03 f000 	lsl.w	r0, r3, r0
 8010408:	9b04      	ldr	r3, [sp, #16]
 801040a:	4303      	orrs	r3, r0
 801040c:	3401      	adds	r4, #1
 801040e:	9304      	str	r3, [sp, #16]
 8010410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010414:	482c      	ldr	r0, [pc, #176]	; (80104c8 <_vfiprintf_r+0x250>)
 8010416:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801041a:	2206      	movs	r2, #6
 801041c:	f7ef fee0 	bl	80001e0 <memchr>
 8010420:	2800      	cmp	r0, #0
 8010422:	d03f      	beq.n	80104a4 <_vfiprintf_r+0x22c>
 8010424:	4b29      	ldr	r3, [pc, #164]	; (80104cc <_vfiprintf_r+0x254>)
 8010426:	bb1b      	cbnz	r3, 8010470 <_vfiprintf_r+0x1f8>
 8010428:	9b03      	ldr	r3, [sp, #12]
 801042a:	3307      	adds	r3, #7
 801042c:	f023 0307 	bic.w	r3, r3, #7
 8010430:	3308      	adds	r3, #8
 8010432:	9303      	str	r3, [sp, #12]
 8010434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010436:	443b      	add	r3, r7
 8010438:	9309      	str	r3, [sp, #36]	; 0x24
 801043a:	e767      	b.n	801030c <_vfiprintf_r+0x94>
 801043c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010440:	460c      	mov	r4, r1
 8010442:	2001      	movs	r0, #1
 8010444:	e7a5      	b.n	8010392 <_vfiprintf_r+0x11a>
 8010446:	2300      	movs	r3, #0
 8010448:	3401      	adds	r4, #1
 801044a:	9305      	str	r3, [sp, #20]
 801044c:	4619      	mov	r1, r3
 801044e:	f04f 0c0a 	mov.w	ip, #10
 8010452:	4620      	mov	r0, r4
 8010454:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010458:	3a30      	subs	r2, #48	; 0x30
 801045a:	2a09      	cmp	r2, #9
 801045c:	d903      	bls.n	8010466 <_vfiprintf_r+0x1ee>
 801045e:	2b00      	cmp	r3, #0
 8010460:	d0c5      	beq.n	80103ee <_vfiprintf_r+0x176>
 8010462:	9105      	str	r1, [sp, #20]
 8010464:	e7c3      	b.n	80103ee <_vfiprintf_r+0x176>
 8010466:	fb0c 2101 	mla	r1, ip, r1, r2
 801046a:	4604      	mov	r4, r0
 801046c:	2301      	movs	r3, #1
 801046e:	e7f0      	b.n	8010452 <_vfiprintf_r+0x1da>
 8010470:	ab03      	add	r3, sp, #12
 8010472:	9300      	str	r3, [sp, #0]
 8010474:	462a      	mov	r2, r5
 8010476:	4b16      	ldr	r3, [pc, #88]	; (80104d0 <_vfiprintf_r+0x258>)
 8010478:	a904      	add	r1, sp, #16
 801047a:	4630      	mov	r0, r6
 801047c:	f7fd fdb0 	bl	800dfe0 <_printf_float>
 8010480:	4607      	mov	r7, r0
 8010482:	1c78      	adds	r0, r7, #1
 8010484:	d1d6      	bne.n	8010434 <_vfiprintf_r+0x1bc>
 8010486:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010488:	07d9      	lsls	r1, r3, #31
 801048a:	d405      	bmi.n	8010498 <_vfiprintf_r+0x220>
 801048c:	89ab      	ldrh	r3, [r5, #12]
 801048e:	059a      	lsls	r2, r3, #22
 8010490:	d402      	bmi.n	8010498 <_vfiprintf_r+0x220>
 8010492:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010494:	f000 faaf 	bl	80109f6 <__retarget_lock_release_recursive>
 8010498:	89ab      	ldrh	r3, [r5, #12]
 801049a:	065b      	lsls	r3, r3, #25
 801049c:	f53f af12 	bmi.w	80102c4 <_vfiprintf_r+0x4c>
 80104a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80104a2:	e711      	b.n	80102c8 <_vfiprintf_r+0x50>
 80104a4:	ab03      	add	r3, sp, #12
 80104a6:	9300      	str	r3, [sp, #0]
 80104a8:	462a      	mov	r2, r5
 80104aa:	4b09      	ldr	r3, [pc, #36]	; (80104d0 <_vfiprintf_r+0x258>)
 80104ac:	a904      	add	r1, sp, #16
 80104ae:	4630      	mov	r0, r6
 80104b0:	f7fe f83a 	bl	800e528 <_printf_i>
 80104b4:	e7e4      	b.n	8010480 <_vfiprintf_r+0x208>
 80104b6:	bf00      	nop
 80104b8:	08012454 	.word	0x08012454
 80104bc:	08012474 	.word	0x08012474
 80104c0:	08012434 	.word	0x08012434
 80104c4:	080122dc 	.word	0x080122dc
 80104c8:	080122e6 	.word	0x080122e6
 80104cc:	0800dfe1 	.word	0x0800dfe1
 80104d0:	08010255 	.word	0x08010255
 80104d4:	080122e2 	.word	0x080122e2

080104d8 <__swbuf_r>:
 80104d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104da:	460e      	mov	r6, r1
 80104dc:	4614      	mov	r4, r2
 80104de:	4605      	mov	r5, r0
 80104e0:	b118      	cbz	r0, 80104ea <__swbuf_r+0x12>
 80104e2:	6983      	ldr	r3, [r0, #24]
 80104e4:	b90b      	cbnz	r3, 80104ea <__swbuf_r+0x12>
 80104e6:	f000 f9e7 	bl	80108b8 <__sinit>
 80104ea:	4b21      	ldr	r3, [pc, #132]	; (8010570 <__swbuf_r+0x98>)
 80104ec:	429c      	cmp	r4, r3
 80104ee:	d12b      	bne.n	8010548 <__swbuf_r+0x70>
 80104f0:	686c      	ldr	r4, [r5, #4]
 80104f2:	69a3      	ldr	r3, [r4, #24]
 80104f4:	60a3      	str	r3, [r4, #8]
 80104f6:	89a3      	ldrh	r3, [r4, #12]
 80104f8:	071a      	lsls	r2, r3, #28
 80104fa:	d52f      	bpl.n	801055c <__swbuf_r+0x84>
 80104fc:	6923      	ldr	r3, [r4, #16]
 80104fe:	b36b      	cbz	r3, 801055c <__swbuf_r+0x84>
 8010500:	6923      	ldr	r3, [r4, #16]
 8010502:	6820      	ldr	r0, [r4, #0]
 8010504:	1ac0      	subs	r0, r0, r3
 8010506:	6963      	ldr	r3, [r4, #20]
 8010508:	b2f6      	uxtb	r6, r6
 801050a:	4283      	cmp	r3, r0
 801050c:	4637      	mov	r7, r6
 801050e:	dc04      	bgt.n	801051a <__swbuf_r+0x42>
 8010510:	4621      	mov	r1, r4
 8010512:	4628      	mov	r0, r5
 8010514:	f000 f93c 	bl	8010790 <_fflush_r>
 8010518:	bb30      	cbnz	r0, 8010568 <__swbuf_r+0x90>
 801051a:	68a3      	ldr	r3, [r4, #8]
 801051c:	3b01      	subs	r3, #1
 801051e:	60a3      	str	r3, [r4, #8]
 8010520:	6823      	ldr	r3, [r4, #0]
 8010522:	1c5a      	adds	r2, r3, #1
 8010524:	6022      	str	r2, [r4, #0]
 8010526:	701e      	strb	r6, [r3, #0]
 8010528:	6963      	ldr	r3, [r4, #20]
 801052a:	3001      	adds	r0, #1
 801052c:	4283      	cmp	r3, r0
 801052e:	d004      	beq.n	801053a <__swbuf_r+0x62>
 8010530:	89a3      	ldrh	r3, [r4, #12]
 8010532:	07db      	lsls	r3, r3, #31
 8010534:	d506      	bpl.n	8010544 <__swbuf_r+0x6c>
 8010536:	2e0a      	cmp	r6, #10
 8010538:	d104      	bne.n	8010544 <__swbuf_r+0x6c>
 801053a:	4621      	mov	r1, r4
 801053c:	4628      	mov	r0, r5
 801053e:	f000 f927 	bl	8010790 <_fflush_r>
 8010542:	b988      	cbnz	r0, 8010568 <__swbuf_r+0x90>
 8010544:	4638      	mov	r0, r7
 8010546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010548:	4b0a      	ldr	r3, [pc, #40]	; (8010574 <__swbuf_r+0x9c>)
 801054a:	429c      	cmp	r4, r3
 801054c:	d101      	bne.n	8010552 <__swbuf_r+0x7a>
 801054e:	68ac      	ldr	r4, [r5, #8]
 8010550:	e7cf      	b.n	80104f2 <__swbuf_r+0x1a>
 8010552:	4b09      	ldr	r3, [pc, #36]	; (8010578 <__swbuf_r+0xa0>)
 8010554:	429c      	cmp	r4, r3
 8010556:	bf08      	it	eq
 8010558:	68ec      	ldreq	r4, [r5, #12]
 801055a:	e7ca      	b.n	80104f2 <__swbuf_r+0x1a>
 801055c:	4621      	mov	r1, r4
 801055e:	4628      	mov	r0, r5
 8010560:	f000 f81a 	bl	8010598 <__swsetup_r>
 8010564:	2800      	cmp	r0, #0
 8010566:	d0cb      	beq.n	8010500 <__swbuf_r+0x28>
 8010568:	f04f 37ff 	mov.w	r7, #4294967295
 801056c:	e7ea      	b.n	8010544 <__swbuf_r+0x6c>
 801056e:	bf00      	nop
 8010570:	08012454 	.word	0x08012454
 8010574:	08012474 	.word	0x08012474
 8010578:	08012434 	.word	0x08012434

0801057c <__ascii_wctomb>:
 801057c:	b149      	cbz	r1, 8010592 <__ascii_wctomb+0x16>
 801057e:	2aff      	cmp	r2, #255	; 0xff
 8010580:	bf85      	ittet	hi
 8010582:	238a      	movhi	r3, #138	; 0x8a
 8010584:	6003      	strhi	r3, [r0, #0]
 8010586:	700a      	strbls	r2, [r1, #0]
 8010588:	f04f 30ff 	movhi.w	r0, #4294967295
 801058c:	bf98      	it	ls
 801058e:	2001      	movls	r0, #1
 8010590:	4770      	bx	lr
 8010592:	4608      	mov	r0, r1
 8010594:	4770      	bx	lr
	...

08010598 <__swsetup_r>:
 8010598:	4b32      	ldr	r3, [pc, #200]	; (8010664 <__swsetup_r+0xcc>)
 801059a:	b570      	push	{r4, r5, r6, lr}
 801059c:	681d      	ldr	r5, [r3, #0]
 801059e:	4606      	mov	r6, r0
 80105a0:	460c      	mov	r4, r1
 80105a2:	b125      	cbz	r5, 80105ae <__swsetup_r+0x16>
 80105a4:	69ab      	ldr	r3, [r5, #24]
 80105a6:	b913      	cbnz	r3, 80105ae <__swsetup_r+0x16>
 80105a8:	4628      	mov	r0, r5
 80105aa:	f000 f985 	bl	80108b8 <__sinit>
 80105ae:	4b2e      	ldr	r3, [pc, #184]	; (8010668 <__swsetup_r+0xd0>)
 80105b0:	429c      	cmp	r4, r3
 80105b2:	d10f      	bne.n	80105d4 <__swsetup_r+0x3c>
 80105b4:	686c      	ldr	r4, [r5, #4]
 80105b6:	89a3      	ldrh	r3, [r4, #12]
 80105b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80105bc:	0719      	lsls	r1, r3, #28
 80105be:	d42c      	bmi.n	801061a <__swsetup_r+0x82>
 80105c0:	06dd      	lsls	r5, r3, #27
 80105c2:	d411      	bmi.n	80105e8 <__swsetup_r+0x50>
 80105c4:	2309      	movs	r3, #9
 80105c6:	6033      	str	r3, [r6, #0]
 80105c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80105cc:	81a3      	strh	r3, [r4, #12]
 80105ce:	f04f 30ff 	mov.w	r0, #4294967295
 80105d2:	e03e      	b.n	8010652 <__swsetup_r+0xba>
 80105d4:	4b25      	ldr	r3, [pc, #148]	; (801066c <__swsetup_r+0xd4>)
 80105d6:	429c      	cmp	r4, r3
 80105d8:	d101      	bne.n	80105de <__swsetup_r+0x46>
 80105da:	68ac      	ldr	r4, [r5, #8]
 80105dc:	e7eb      	b.n	80105b6 <__swsetup_r+0x1e>
 80105de:	4b24      	ldr	r3, [pc, #144]	; (8010670 <__swsetup_r+0xd8>)
 80105e0:	429c      	cmp	r4, r3
 80105e2:	bf08      	it	eq
 80105e4:	68ec      	ldreq	r4, [r5, #12]
 80105e6:	e7e6      	b.n	80105b6 <__swsetup_r+0x1e>
 80105e8:	0758      	lsls	r0, r3, #29
 80105ea:	d512      	bpl.n	8010612 <__swsetup_r+0x7a>
 80105ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105ee:	b141      	cbz	r1, 8010602 <__swsetup_r+0x6a>
 80105f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105f4:	4299      	cmp	r1, r3
 80105f6:	d002      	beq.n	80105fe <__swsetup_r+0x66>
 80105f8:	4630      	mov	r0, r6
 80105fa:	f7ff fb31 	bl	800fc60 <_free_r>
 80105fe:	2300      	movs	r3, #0
 8010600:	6363      	str	r3, [r4, #52]	; 0x34
 8010602:	89a3      	ldrh	r3, [r4, #12]
 8010604:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010608:	81a3      	strh	r3, [r4, #12]
 801060a:	2300      	movs	r3, #0
 801060c:	6063      	str	r3, [r4, #4]
 801060e:	6923      	ldr	r3, [r4, #16]
 8010610:	6023      	str	r3, [r4, #0]
 8010612:	89a3      	ldrh	r3, [r4, #12]
 8010614:	f043 0308 	orr.w	r3, r3, #8
 8010618:	81a3      	strh	r3, [r4, #12]
 801061a:	6923      	ldr	r3, [r4, #16]
 801061c:	b94b      	cbnz	r3, 8010632 <__swsetup_r+0x9a>
 801061e:	89a3      	ldrh	r3, [r4, #12]
 8010620:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010628:	d003      	beq.n	8010632 <__swsetup_r+0x9a>
 801062a:	4621      	mov	r1, r4
 801062c:	4630      	mov	r0, r6
 801062e:	f000 fa09 	bl	8010a44 <__smakebuf_r>
 8010632:	89a0      	ldrh	r0, [r4, #12]
 8010634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010638:	f010 0301 	ands.w	r3, r0, #1
 801063c:	d00a      	beq.n	8010654 <__swsetup_r+0xbc>
 801063e:	2300      	movs	r3, #0
 8010640:	60a3      	str	r3, [r4, #8]
 8010642:	6963      	ldr	r3, [r4, #20]
 8010644:	425b      	negs	r3, r3
 8010646:	61a3      	str	r3, [r4, #24]
 8010648:	6923      	ldr	r3, [r4, #16]
 801064a:	b943      	cbnz	r3, 801065e <__swsetup_r+0xc6>
 801064c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010650:	d1ba      	bne.n	80105c8 <__swsetup_r+0x30>
 8010652:	bd70      	pop	{r4, r5, r6, pc}
 8010654:	0781      	lsls	r1, r0, #30
 8010656:	bf58      	it	pl
 8010658:	6963      	ldrpl	r3, [r4, #20]
 801065a:	60a3      	str	r3, [r4, #8]
 801065c:	e7f4      	b.n	8010648 <__swsetup_r+0xb0>
 801065e:	2000      	movs	r0, #0
 8010660:	e7f7      	b.n	8010652 <__swsetup_r+0xba>
 8010662:	bf00      	nop
 8010664:	20000100 	.word	0x20000100
 8010668:	08012454 	.word	0x08012454
 801066c:	08012474 	.word	0x08012474
 8010670:	08012434 	.word	0x08012434

08010674 <abort>:
 8010674:	b508      	push	{r3, lr}
 8010676:	2006      	movs	r0, #6
 8010678:	f000 fa54 	bl	8010b24 <raise>
 801067c:	2001      	movs	r0, #1
 801067e:	f7f1 fc89 	bl	8001f94 <_exit>
	...

08010684 <__sflush_r>:
 8010684:	898a      	ldrh	r2, [r1, #12]
 8010686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801068a:	4605      	mov	r5, r0
 801068c:	0710      	lsls	r0, r2, #28
 801068e:	460c      	mov	r4, r1
 8010690:	d458      	bmi.n	8010744 <__sflush_r+0xc0>
 8010692:	684b      	ldr	r3, [r1, #4]
 8010694:	2b00      	cmp	r3, #0
 8010696:	dc05      	bgt.n	80106a4 <__sflush_r+0x20>
 8010698:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801069a:	2b00      	cmp	r3, #0
 801069c:	dc02      	bgt.n	80106a4 <__sflush_r+0x20>
 801069e:	2000      	movs	r0, #0
 80106a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80106a6:	2e00      	cmp	r6, #0
 80106a8:	d0f9      	beq.n	801069e <__sflush_r+0x1a>
 80106aa:	2300      	movs	r3, #0
 80106ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80106b0:	682f      	ldr	r7, [r5, #0]
 80106b2:	602b      	str	r3, [r5, #0]
 80106b4:	d032      	beq.n	801071c <__sflush_r+0x98>
 80106b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80106b8:	89a3      	ldrh	r3, [r4, #12]
 80106ba:	075a      	lsls	r2, r3, #29
 80106bc:	d505      	bpl.n	80106ca <__sflush_r+0x46>
 80106be:	6863      	ldr	r3, [r4, #4]
 80106c0:	1ac0      	subs	r0, r0, r3
 80106c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80106c4:	b10b      	cbz	r3, 80106ca <__sflush_r+0x46>
 80106c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80106c8:	1ac0      	subs	r0, r0, r3
 80106ca:	2300      	movs	r3, #0
 80106cc:	4602      	mov	r2, r0
 80106ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80106d0:	6a21      	ldr	r1, [r4, #32]
 80106d2:	4628      	mov	r0, r5
 80106d4:	47b0      	blx	r6
 80106d6:	1c43      	adds	r3, r0, #1
 80106d8:	89a3      	ldrh	r3, [r4, #12]
 80106da:	d106      	bne.n	80106ea <__sflush_r+0x66>
 80106dc:	6829      	ldr	r1, [r5, #0]
 80106de:	291d      	cmp	r1, #29
 80106e0:	d82c      	bhi.n	801073c <__sflush_r+0xb8>
 80106e2:	4a2a      	ldr	r2, [pc, #168]	; (801078c <__sflush_r+0x108>)
 80106e4:	40ca      	lsrs	r2, r1
 80106e6:	07d6      	lsls	r6, r2, #31
 80106e8:	d528      	bpl.n	801073c <__sflush_r+0xb8>
 80106ea:	2200      	movs	r2, #0
 80106ec:	6062      	str	r2, [r4, #4]
 80106ee:	04d9      	lsls	r1, r3, #19
 80106f0:	6922      	ldr	r2, [r4, #16]
 80106f2:	6022      	str	r2, [r4, #0]
 80106f4:	d504      	bpl.n	8010700 <__sflush_r+0x7c>
 80106f6:	1c42      	adds	r2, r0, #1
 80106f8:	d101      	bne.n	80106fe <__sflush_r+0x7a>
 80106fa:	682b      	ldr	r3, [r5, #0]
 80106fc:	b903      	cbnz	r3, 8010700 <__sflush_r+0x7c>
 80106fe:	6560      	str	r0, [r4, #84]	; 0x54
 8010700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010702:	602f      	str	r7, [r5, #0]
 8010704:	2900      	cmp	r1, #0
 8010706:	d0ca      	beq.n	801069e <__sflush_r+0x1a>
 8010708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801070c:	4299      	cmp	r1, r3
 801070e:	d002      	beq.n	8010716 <__sflush_r+0x92>
 8010710:	4628      	mov	r0, r5
 8010712:	f7ff faa5 	bl	800fc60 <_free_r>
 8010716:	2000      	movs	r0, #0
 8010718:	6360      	str	r0, [r4, #52]	; 0x34
 801071a:	e7c1      	b.n	80106a0 <__sflush_r+0x1c>
 801071c:	6a21      	ldr	r1, [r4, #32]
 801071e:	2301      	movs	r3, #1
 8010720:	4628      	mov	r0, r5
 8010722:	47b0      	blx	r6
 8010724:	1c41      	adds	r1, r0, #1
 8010726:	d1c7      	bne.n	80106b8 <__sflush_r+0x34>
 8010728:	682b      	ldr	r3, [r5, #0]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d0c4      	beq.n	80106b8 <__sflush_r+0x34>
 801072e:	2b1d      	cmp	r3, #29
 8010730:	d001      	beq.n	8010736 <__sflush_r+0xb2>
 8010732:	2b16      	cmp	r3, #22
 8010734:	d101      	bne.n	801073a <__sflush_r+0xb6>
 8010736:	602f      	str	r7, [r5, #0]
 8010738:	e7b1      	b.n	801069e <__sflush_r+0x1a>
 801073a:	89a3      	ldrh	r3, [r4, #12]
 801073c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010740:	81a3      	strh	r3, [r4, #12]
 8010742:	e7ad      	b.n	80106a0 <__sflush_r+0x1c>
 8010744:	690f      	ldr	r7, [r1, #16]
 8010746:	2f00      	cmp	r7, #0
 8010748:	d0a9      	beq.n	801069e <__sflush_r+0x1a>
 801074a:	0793      	lsls	r3, r2, #30
 801074c:	680e      	ldr	r6, [r1, #0]
 801074e:	bf08      	it	eq
 8010750:	694b      	ldreq	r3, [r1, #20]
 8010752:	600f      	str	r7, [r1, #0]
 8010754:	bf18      	it	ne
 8010756:	2300      	movne	r3, #0
 8010758:	eba6 0807 	sub.w	r8, r6, r7
 801075c:	608b      	str	r3, [r1, #8]
 801075e:	f1b8 0f00 	cmp.w	r8, #0
 8010762:	dd9c      	ble.n	801069e <__sflush_r+0x1a>
 8010764:	6a21      	ldr	r1, [r4, #32]
 8010766:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010768:	4643      	mov	r3, r8
 801076a:	463a      	mov	r2, r7
 801076c:	4628      	mov	r0, r5
 801076e:	47b0      	blx	r6
 8010770:	2800      	cmp	r0, #0
 8010772:	dc06      	bgt.n	8010782 <__sflush_r+0xfe>
 8010774:	89a3      	ldrh	r3, [r4, #12]
 8010776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801077a:	81a3      	strh	r3, [r4, #12]
 801077c:	f04f 30ff 	mov.w	r0, #4294967295
 8010780:	e78e      	b.n	80106a0 <__sflush_r+0x1c>
 8010782:	4407      	add	r7, r0
 8010784:	eba8 0800 	sub.w	r8, r8, r0
 8010788:	e7e9      	b.n	801075e <__sflush_r+0xda>
 801078a:	bf00      	nop
 801078c:	20400001 	.word	0x20400001

08010790 <_fflush_r>:
 8010790:	b538      	push	{r3, r4, r5, lr}
 8010792:	690b      	ldr	r3, [r1, #16]
 8010794:	4605      	mov	r5, r0
 8010796:	460c      	mov	r4, r1
 8010798:	b913      	cbnz	r3, 80107a0 <_fflush_r+0x10>
 801079a:	2500      	movs	r5, #0
 801079c:	4628      	mov	r0, r5
 801079e:	bd38      	pop	{r3, r4, r5, pc}
 80107a0:	b118      	cbz	r0, 80107aa <_fflush_r+0x1a>
 80107a2:	6983      	ldr	r3, [r0, #24]
 80107a4:	b90b      	cbnz	r3, 80107aa <_fflush_r+0x1a>
 80107a6:	f000 f887 	bl	80108b8 <__sinit>
 80107aa:	4b14      	ldr	r3, [pc, #80]	; (80107fc <_fflush_r+0x6c>)
 80107ac:	429c      	cmp	r4, r3
 80107ae:	d11b      	bne.n	80107e8 <_fflush_r+0x58>
 80107b0:	686c      	ldr	r4, [r5, #4]
 80107b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d0ef      	beq.n	801079a <_fflush_r+0xa>
 80107ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80107bc:	07d0      	lsls	r0, r2, #31
 80107be:	d404      	bmi.n	80107ca <_fflush_r+0x3a>
 80107c0:	0599      	lsls	r1, r3, #22
 80107c2:	d402      	bmi.n	80107ca <_fflush_r+0x3a>
 80107c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80107c6:	f000 f915 	bl	80109f4 <__retarget_lock_acquire_recursive>
 80107ca:	4628      	mov	r0, r5
 80107cc:	4621      	mov	r1, r4
 80107ce:	f7ff ff59 	bl	8010684 <__sflush_r>
 80107d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80107d4:	07da      	lsls	r2, r3, #31
 80107d6:	4605      	mov	r5, r0
 80107d8:	d4e0      	bmi.n	801079c <_fflush_r+0xc>
 80107da:	89a3      	ldrh	r3, [r4, #12]
 80107dc:	059b      	lsls	r3, r3, #22
 80107de:	d4dd      	bmi.n	801079c <_fflush_r+0xc>
 80107e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80107e2:	f000 f908 	bl	80109f6 <__retarget_lock_release_recursive>
 80107e6:	e7d9      	b.n	801079c <_fflush_r+0xc>
 80107e8:	4b05      	ldr	r3, [pc, #20]	; (8010800 <_fflush_r+0x70>)
 80107ea:	429c      	cmp	r4, r3
 80107ec:	d101      	bne.n	80107f2 <_fflush_r+0x62>
 80107ee:	68ac      	ldr	r4, [r5, #8]
 80107f0:	e7df      	b.n	80107b2 <_fflush_r+0x22>
 80107f2:	4b04      	ldr	r3, [pc, #16]	; (8010804 <_fflush_r+0x74>)
 80107f4:	429c      	cmp	r4, r3
 80107f6:	bf08      	it	eq
 80107f8:	68ec      	ldreq	r4, [r5, #12]
 80107fa:	e7da      	b.n	80107b2 <_fflush_r+0x22>
 80107fc:	08012454 	.word	0x08012454
 8010800:	08012474 	.word	0x08012474
 8010804:	08012434 	.word	0x08012434

08010808 <std>:
 8010808:	2300      	movs	r3, #0
 801080a:	b510      	push	{r4, lr}
 801080c:	4604      	mov	r4, r0
 801080e:	e9c0 3300 	strd	r3, r3, [r0]
 8010812:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010816:	6083      	str	r3, [r0, #8]
 8010818:	8181      	strh	r1, [r0, #12]
 801081a:	6643      	str	r3, [r0, #100]	; 0x64
 801081c:	81c2      	strh	r2, [r0, #14]
 801081e:	6183      	str	r3, [r0, #24]
 8010820:	4619      	mov	r1, r3
 8010822:	2208      	movs	r2, #8
 8010824:	305c      	adds	r0, #92	; 0x5c
 8010826:	f7fd fb33 	bl	800de90 <memset>
 801082a:	4b05      	ldr	r3, [pc, #20]	; (8010840 <std+0x38>)
 801082c:	6263      	str	r3, [r4, #36]	; 0x24
 801082e:	4b05      	ldr	r3, [pc, #20]	; (8010844 <std+0x3c>)
 8010830:	62a3      	str	r3, [r4, #40]	; 0x28
 8010832:	4b05      	ldr	r3, [pc, #20]	; (8010848 <std+0x40>)
 8010834:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010836:	4b05      	ldr	r3, [pc, #20]	; (801084c <std+0x44>)
 8010838:	6224      	str	r4, [r4, #32]
 801083a:	6323      	str	r3, [r4, #48]	; 0x30
 801083c:	bd10      	pop	{r4, pc}
 801083e:	bf00      	nop
 8010840:	08010b5d 	.word	0x08010b5d
 8010844:	08010b7f 	.word	0x08010b7f
 8010848:	08010bb7 	.word	0x08010bb7
 801084c:	08010bdb 	.word	0x08010bdb

08010850 <_cleanup_r>:
 8010850:	4901      	ldr	r1, [pc, #4]	; (8010858 <_cleanup_r+0x8>)
 8010852:	f000 b8af 	b.w	80109b4 <_fwalk_reent>
 8010856:	bf00      	nop
 8010858:	08010791 	.word	0x08010791

0801085c <__sfmoreglue>:
 801085c:	b570      	push	{r4, r5, r6, lr}
 801085e:	2268      	movs	r2, #104	; 0x68
 8010860:	1e4d      	subs	r5, r1, #1
 8010862:	4355      	muls	r5, r2
 8010864:	460e      	mov	r6, r1
 8010866:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801086a:	f7ff fa65 	bl	800fd38 <_malloc_r>
 801086e:	4604      	mov	r4, r0
 8010870:	b140      	cbz	r0, 8010884 <__sfmoreglue+0x28>
 8010872:	2100      	movs	r1, #0
 8010874:	e9c0 1600 	strd	r1, r6, [r0]
 8010878:	300c      	adds	r0, #12
 801087a:	60a0      	str	r0, [r4, #8]
 801087c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010880:	f7fd fb06 	bl	800de90 <memset>
 8010884:	4620      	mov	r0, r4
 8010886:	bd70      	pop	{r4, r5, r6, pc}

08010888 <__sfp_lock_acquire>:
 8010888:	4801      	ldr	r0, [pc, #4]	; (8010890 <__sfp_lock_acquire+0x8>)
 801088a:	f000 b8b3 	b.w	80109f4 <__retarget_lock_acquire_recursive>
 801088e:	bf00      	nop
 8010890:	20007c09 	.word	0x20007c09

08010894 <__sfp_lock_release>:
 8010894:	4801      	ldr	r0, [pc, #4]	; (801089c <__sfp_lock_release+0x8>)
 8010896:	f000 b8ae 	b.w	80109f6 <__retarget_lock_release_recursive>
 801089a:	bf00      	nop
 801089c:	20007c09 	.word	0x20007c09

080108a0 <__sinit_lock_acquire>:
 80108a0:	4801      	ldr	r0, [pc, #4]	; (80108a8 <__sinit_lock_acquire+0x8>)
 80108a2:	f000 b8a7 	b.w	80109f4 <__retarget_lock_acquire_recursive>
 80108a6:	bf00      	nop
 80108a8:	20007c0a 	.word	0x20007c0a

080108ac <__sinit_lock_release>:
 80108ac:	4801      	ldr	r0, [pc, #4]	; (80108b4 <__sinit_lock_release+0x8>)
 80108ae:	f000 b8a2 	b.w	80109f6 <__retarget_lock_release_recursive>
 80108b2:	bf00      	nop
 80108b4:	20007c0a 	.word	0x20007c0a

080108b8 <__sinit>:
 80108b8:	b510      	push	{r4, lr}
 80108ba:	4604      	mov	r4, r0
 80108bc:	f7ff fff0 	bl	80108a0 <__sinit_lock_acquire>
 80108c0:	69a3      	ldr	r3, [r4, #24]
 80108c2:	b11b      	cbz	r3, 80108cc <__sinit+0x14>
 80108c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108c8:	f7ff bff0 	b.w	80108ac <__sinit_lock_release>
 80108cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80108d0:	6523      	str	r3, [r4, #80]	; 0x50
 80108d2:	4b13      	ldr	r3, [pc, #76]	; (8010920 <__sinit+0x68>)
 80108d4:	4a13      	ldr	r2, [pc, #76]	; (8010924 <__sinit+0x6c>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80108da:	42a3      	cmp	r3, r4
 80108dc:	bf04      	itt	eq
 80108de:	2301      	moveq	r3, #1
 80108e0:	61a3      	streq	r3, [r4, #24]
 80108e2:	4620      	mov	r0, r4
 80108e4:	f000 f820 	bl	8010928 <__sfp>
 80108e8:	6060      	str	r0, [r4, #4]
 80108ea:	4620      	mov	r0, r4
 80108ec:	f000 f81c 	bl	8010928 <__sfp>
 80108f0:	60a0      	str	r0, [r4, #8]
 80108f2:	4620      	mov	r0, r4
 80108f4:	f000 f818 	bl	8010928 <__sfp>
 80108f8:	2200      	movs	r2, #0
 80108fa:	60e0      	str	r0, [r4, #12]
 80108fc:	2104      	movs	r1, #4
 80108fe:	6860      	ldr	r0, [r4, #4]
 8010900:	f7ff ff82 	bl	8010808 <std>
 8010904:	68a0      	ldr	r0, [r4, #8]
 8010906:	2201      	movs	r2, #1
 8010908:	2109      	movs	r1, #9
 801090a:	f7ff ff7d 	bl	8010808 <std>
 801090e:	68e0      	ldr	r0, [r4, #12]
 8010910:	2202      	movs	r2, #2
 8010912:	2112      	movs	r1, #18
 8010914:	f7ff ff78 	bl	8010808 <std>
 8010918:	2301      	movs	r3, #1
 801091a:	61a3      	str	r3, [r4, #24]
 801091c:	e7d2      	b.n	80108c4 <__sinit+0xc>
 801091e:	bf00      	nop
 8010920:	080120b8 	.word	0x080120b8
 8010924:	08010851 	.word	0x08010851

08010928 <__sfp>:
 8010928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801092a:	4607      	mov	r7, r0
 801092c:	f7ff ffac 	bl	8010888 <__sfp_lock_acquire>
 8010930:	4b1e      	ldr	r3, [pc, #120]	; (80109ac <__sfp+0x84>)
 8010932:	681e      	ldr	r6, [r3, #0]
 8010934:	69b3      	ldr	r3, [r6, #24]
 8010936:	b913      	cbnz	r3, 801093e <__sfp+0x16>
 8010938:	4630      	mov	r0, r6
 801093a:	f7ff ffbd 	bl	80108b8 <__sinit>
 801093e:	3648      	adds	r6, #72	; 0x48
 8010940:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010944:	3b01      	subs	r3, #1
 8010946:	d503      	bpl.n	8010950 <__sfp+0x28>
 8010948:	6833      	ldr	r3, [r6, #0]
 801094a:	b30b      	cbz	r3, 8010990 <__sfp+0x68>
 801094c:	6836      	ldr	r6, [r6, #0]
 801094e:	e7f7      	b.n	8010940 <__sfp+0x18>
 8010950:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010954:	b9d5      	cbnz	r5, 801098c <__sfp+0x64>
 8010956:	4b16      	ldr	r3, [pc, #88]	; (80109b0 <__sfp+0x88>)
 8010958:	60e3      	str	r3, [r4, #12]
 801095a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801095e:	6665      	str	r5, [r4, #100]	; 0x64
 8010960:	f000 f847 	bl	80109f2 <__retarget_lock_init_recursive>
 8010964:	f7ff ff96 	bl	8010894 <__sfp_lock_release>
 8010968:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801096c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010970:	6025      	str	r5, [r4, #0]
 8010972:	61a5      	str	r5, [r4, #24]
 8010974:	2208      	movs	r2, #8
 8010976:	4629      	mov	r1, r5
 8010978:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801097c:	f7fd fa88 	bl	800de90 <memset>
 8010980:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010984:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010988:	4620      	mov	r0, r4
 801098a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801098c:	3468      	adds	r4, #104	; 0x68
 801098e:	e7d9      	b.n	8010944 <__sfp+0x1c>
 8010990:	2104      	movs	r1, #4
 8010992:	4638      	mov	r0, r7
 8010994:	f7ff ff62 	bl	801085c <__sfmoreglue>
 8010998:	4604      	mov	r4, r0
 801099a:	6030      	str	r0, [r6, #0]
 801099c:	2800      	cmp	r0, #0
 801099e:	d1d5      	bne.n	801094c <__sfp+0x24>
 80109a0:	f7ff ff78 	bl	8010894 <__sfp_lock_release>
 80109a4:	230c      	movs	r3, #12
 80109a6:	603b      	str	r3, [r7, #0]
 80109a8:	e7ee      	b.n	8010988 <__sfp+0x60>
 80109aa:	bf00      	nop
 80109ac:	080120b8 	.word	0x080120b8
 80109b0:	ffff0001 	.word	0xffff0001

080109b4 <_fwalk_reent>:
 80109b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109b8:	4606      	mov	r6, r0
 80109ba:	4688      	mov	r8, r1
 80109bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80109c0:	2700      	movs	r7, #0
 80109c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80109c6:	f1b9 0901 	subs.w	r9, r9, #1
 80109ca:	d505      	bpl.n	80109d8 <_fwalk_reent+0x24>
 80109cc:	6824      	ldr	r4, [r4, #0]
 80109ce:	2c00      	cmp	r4, #0
 80109d0:	d1f7      	bne.n	80109c2 <_fwalk_reent+0xe>
 80109d2:	4638      	mov	r0, r7
 80109d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109d8:	89ab      	ldrh	r3, [r5, #12]
 80109da:	2b01      	cmp	r3, #1
 80109dc:	d907      	bls.n	80109ee <_fwalk_reent+0x3a>
 80109de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80109e2:	3301      	adds	r3, #1
 80109e4:	d003      	beq.n	80109ee <_fwalk_reent+0x3a>
 80109e6:	4629      	mov	r1, r5
 80109e8:	4630      	mov	r0, r6
 80109ea:	47c0      	blx	r8
 80109ec:	4307      	orrs	r7, r0
 80109ee:	3568      	adds	r5, #104	; 0x68
 80109f0:	e7e9      	b.n	80109c6 <_fwalk_reent+0x12>

080109f2 <__retarget_lock_init_recursive>:
 80109f2:	4770      	bx	lr

080109f4 <__retarget_lock_acquire_recursive>:
 80109f4:	4770      	bx	lr

080109f6 <__retarget_lock_release_recursive>:
 80109f6:	4770      	bx	lr

080109f8 <__swhatbuf_r>:
 80109f8:	b570      	push	{r4, r5, r6, lr}
 80109fa:	460e      	mov	r6, r1
 80109fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a00:	2900      	cmp	r1, #0
 8010a02:	b096      	sub	sp, #88	; 0x58
 8010a04:	4614      	mov	r4, r2
 8010a06:	461d      	mov	r5, r3
 8010a08:	da08      	bge.n	8010a1c <__swhatbuf_r+0x24>
 8010a0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	602a      	str	r2, [r5, #0]
 8010a12:	061a      	lsls	r2, r3, #24
 8010a14:	d410      	bmi.n	8010a38 <__swhatbuf_r+0x40>
 8010a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a1a:	e00e      	b.n	8010a3a <__swhatbuf_r+0x42>
 8010a1c:	466a      	mov	r2, sp
 8010a1e:	f000 f903 	bl	8010c28 <_fstat_r>
 8010a22:	2800      	cmp	r0, #0
 8010a24:	dbf1      	blt.n	8010a0a <__swhatbuf_r+0x12>
 8010a26:	9a01      	ldr	r2, [sp, #4]
 8010a28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010a2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010a30:	425a      	negs	r2, r3
 8010a32:	415a      	adcs	r2, r3
 8010a34:	602a      	str	r2, [r5, #0]
 8010a36:	e7ee      	b.n	8010a16 <__swhatbuf_r+0x1e>
 8010a38:	2340      	movs	r3, #64	; 0x40
 8010a3a:	2000      	movs	r0, #0
 8010a3c:	6023      	str	r3, [r4, #0]
 8010a3e:	b016      	add	sp, #88	; 0x58
 8010a40:	bd70      	pop	{r4, r5, r6, pc}
	...

08010a44 <__smakebuf_r>:
 8010a44:	898b      	ldrh	r3, [r1, #12]
 8010a46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010a48:	079d      	lsls	r5, r3, #30
 8010a4a:	4606      	mov	r6, r0
 8010a4c:	460c      	mov	r4, r1
 8010a4e:	d507      	bpl.n	8010a60 <__smakebuf_r+0x1c>
 8010a50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010a54:	6023      	str	r3, [r4, #0]
 8010a56:	6123      	str	r3, [r4, #16]
 8010a58:	2301      	movs	r3, #1
 8010a5a:	6163      	str	r3, [r4, #20]
 8010a5c:	b002      	add	sp, #8
 8010a5e:	bd70      	pop	{r4, r5, r6, pc}
 8010a60:	ab01      	add	r3, sp, #4
 8010a62:	466a      	mov	r2, sp
 8010a64:	f7ff ffc8 	bl	80109f8 <__swhatbuf_r>
 8010a68:	9900      	ldr	r1, [sp, #0]
 8010a6a:	4605      	mov	r5, r0
 8010a6c:	4630      	mov	r0, r6
 8010a6e:	f7ff f963 	bl	800fd38 <_malloc_r>
 8010a72:	b948      	cbnz	r0, 8010a88 <__smakebuf_r+0x44>
 8010a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a78:	059a      	lsls	r2, r3, #22
 8010a7a:	d4ef      	bmi.n	8010a5c <__smakebuf_r+0x18>
 8010a7c:	f023 0303 	bic.w	r3, r3, #3
 8010a80:	f043 0302 	orr.w	r3, r3, #2
 8010a84:	81a3      	strh	r3, [r4, #12]
 8010a86:	e7e3      	b.n	8010a50 <__smakebuf_r+0xc>
 8010a88:	4b0d      	ldr	r3, [pc, #52]	; (8010ac0 <__smakebuf_r+0x7c>)
 8010a8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8010a8c:	89a3      	ldrh	r3, [r4, #12]
 8010a8e:	6020      	str	r0, [r4, #0]
 8010a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a94:	81a3      	strh	r3, [r4, #12]
 8010a96:	9b00      	ldr	r3, [sp, #0]
 8010a98:	6163      	str	r3, [r4, #20]
 8010a9a:	9b01      	ldr	r3, [sp, #4]
 8010a9c:	6120      	str	r0, [r4, #16]
 8010a9e:	b15b      	cbz	r3, 8010ab8 <__smakebuf_r+0x74>
 8010aa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010aa4:	4630      	mov	r0, r6
 8010aa6:	f000 f8d1 	bl	8010c4c <_isatty_r>
 8010aaa:	b128      	cbz	r0, 8010ab8 <__smakebuf_r+0x74>
 8010aac:	89a3      	ldrh	r3, [r4, #12]
 8010aae:	f023 0303 	bic.w	r3, r3, #3
 8010ab2:	f043 0301 	orr.w	r3, r3, #1
 8010ab6:	81a3      	strh	r3, [r4, #12]
 8010ab8:	89a0      	ldrh	r0, [r4, #12]
 8010aba:	4305      	orrs	r5, r0
 8010abc:	81a5      	strh	r5, [r4, #12]
 8010abe:	e7cd      	b.n	8010a5c <__smakebuf_r+0x18>
 8010ac0:	08010851 	.word	0x08010851

08010ac4 <_malloc_usable_size_r>:
 8010ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ac8:	1f18      	subs	r0, r3, #4
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	bfbc      	itt	lt
 8010ace:	580b      	ldrlt	r3, [r1, r0]
 8010ad0:	18c0      	addlt	r0, r0, r3
 8010ad2:	4770      	bx	lr

08010ad4 <_raise_r>:
 8010ad4:	291f      	cmp	r1, #31
 8010ad6:	b538      	push	{r3, r4, r5, lr}
 8010ad8:	4604      	mov	r4, r0
 8010ada:	460d      	mov	r5, r1
 8010adc:	d904      	bls.n	8010ae8 <_raise_r+0x14>
 8010ade:	2316      	movs	r3, #22
 8010ae0:	6003      	str	r3, [r0, #0]
 8010ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ae6:	bd38      	pop	{r3, r4, r5, pc}
 8010ae8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010aea:	b112      	cbz	r2, 8010af2 <_raise_r+0x1e>
 8010aec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010af0:	b94b      	cbnz	r3, 8010b06 <_raise_r+0x32>
 8010af2:	4620      	mov	r0, r4
 8010af4:	f000 f830 	bl	8010b58 <_getpid_r>
 8010af8:	462a      	mov	r2, r5
 8010afa:	4601      	mov	r1, r0
 8010afc:	4620      	mov	r0, r4
 8010afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b02:	f000 b817 	b.w	8010b34 <_kill_r>
 8010b06:	2b01      	cmp	r3, #1
 8010b08:	d00a      	beq.n	8010b20 <_raise_r+0x4c>
 8010b0a:	1c59      	adds	r1, r3, #1
 8010b0c:	d103      	bne.n	8010b16 <_raise_r+0x42>
 8010b0e:	2316      	movs	r3, #22
 8010b10:	6003      	str	r3, [r0, #0]
 8010b12:	2001      	movs	r0, #1
 8010b14:	e7e7      	b.n	8010ae6 <_raise_r+0x12>
 8010b16:	2400      	movs	r4, #0
 8010b18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010b1c:	4628      	mov	r0, r5
 8010b1e:	4798      	blx	r3
 8010b20:	2000      	movs	r0, #0
 8010b22:	e7e0      	b.n	8010ae6 <_raise_r+0x12>

08010b24 <raise>:
 8010b24:	4b02      	ldr	r3, [pc, #8]	; (8010b30 <raise+0xc>)
 8010b26:	4601      	mov	r1, r0
 8010b28:	6818      	ldr	r0, [r3, #0]
 8010b2a:	f7ff bfd3 	b.w	8010ad4 <_raise_r>
 8010b2e:	bf00      	nop
 8010b30:	20000100 	.word	0x20000100

08010b34 <_kill_r>:
 8010b34:	b538      	push	{r3, r4, r5, lr}
 8010b36:	4d07      	ldr	r5, [pc, #28]	; (8010b54 <_kill_r+0x20>)
 8010b38:	2300      	movs	r3, #0
 8010b3a:	4604      	mov	r4, r0
 8010b3c:	4608      	mov	r0, r1
 8010b3e:	4611      	mov	r1, r2
 8010b40:	602b      	str	r3, [r5, #0]
 8010b42:	f7f1 fa17 	bl	8001f74 <_kill>
 8010b46:	1c43      	adds	r3, r0, #1
 8010b48:	d102      	bne.n	8010b50 <_kill_r+0x1c>
 8010b4a:	682b      	ldr	r3, [r5, #0]
 8010b4c:	b103      	cbz	r3, 8010b50 <_kill_r+0x1c>
 8010b4e:	6023      	str	r3, [r4, #0]
 8010b50:	bd38      	pop	{r3, r4, r5, pc}
 8010b52:	bf00      	nop
 8010b54:	20007c04 	.word	0x20007c04

08010b58 <_getpid_r>:
 8010b58:	f7f1 ba04 	b.w	8001f64 <_getpid>

08010b5c <__sread>:
 8010b5c:	b510      	push	{r4, lr}
 8010b5e:	460c      	mov	r4, r1
 8010b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b64:	f000 f894 	bl	8010c90 <_read_r>
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	bfab      	itete	ge
 8010b6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010b6e:	89a3      	ldrhlt	r3, [r4, #12]
 8010b70:	181b      	addge	r3, r3, r0
 8010b72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010b76:	bfac      	ite	ge
 8010b78:	6563      	strge	r3, [r4, #84]	; 0x54
 8010b7a:	81a3      	strhlt	r3, [r4, #12]
 8010b7c:	bd10      	pop	{r4, pc}

08010b7e <__swrite>:
 8010b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b82:	461f      	mov	r7, r3
 8010b84:	898b      	ldrh	r3, [r1, #12]
 8010b86:	05db      	lsls	r3, r3, #23
 8010b88:	4605      	mov	r5, r0
 8010b8a:	460c      	mov	r4, r1
 8010b8c:	4616      	mov	r6, r2
 8010b8e:	d505      	bpl.n	8010b9c <__swrite+0x1e>
 8010b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b94:	2302      	movs	r3, #2
 8010b96:	2200      	movs	r2, #0
 8010b98:	f000 f868 	bl	8010c6c <_lseek_r>
 8010b9c:	89a3      	ldrh	r3, [r4, #12]
 8010b9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ba2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010ba6:	81a3      	strh	r3, [r4, #12]
 8010ba8:	4632      	mov	r2, r6
 8010baa:	463b      	mov	r3, r7
 8010bac:	4628      	mov	r0, r5
 8010bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bb2:	f000 b817 	b.w	8010be4 <_write_r>

08010bb6 <__sseek>:
 8010bb6:	b510      	push	{r4, lr}
 8010bb8:	460c      	mov	r4, r1
 8010bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bbe:	f000 f855 	bl	8010c6c <_lseek_r>
 8010bc2:	1c43      	adds	r3, r0, #1
 8010bc4:	89a3      	ldrh	r3, [r4, #12]
 8010bc6:	bf15      	itete	ne
 8010bc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8010bca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010bce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010bd2:	81a3      	strheq	r3, [r4, #12]
 8010bd4:	bf18      	it	ne
 8010bd6:	81a3      	strhne	r3, [r4, #12]
 8010bd8:	bd10      	pop	{r4, pc}

08010bda <__sclose>:
 8010bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bde:	f000 b813 	b.w	8010c08 <_close_r>
	...

08010be4 <_write_r>:
 8010be4:	b538      	push	{r3, r4, r5, lr}
 8010be6:	4d07      	ldr	r5, [pc, #28]	; (8010c04 <_write_r+0x20>)
 8010be8:	4604      	mov	r4, r0
 8010bea:	4608      	mov	r0, r1
 8010bec:	4611      	mov	r1, r2
 8010bee:	2200      	movs	r2, #0
 8010bf0:	602a      	str	r2, [r5, #0]
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	f7f1 f9f5 	bl	8001fe2 <_write>
 8010bf8:	1c43      	adds	r3, r0, #1
 8010bfa:	d102      	bne.n	8010c02 <_write_r+0x1e>
 8010bfc:	682b      	ldr	r3, [r5, #0]
 8010bfe:	b103      	cbz	r3, 8010c02 <_write_r+0x1e>
 8010c00:	6023      	str	r3, [r4, #0]
 8010c02:	bd38      	pop	{r3, r4, r5, pc}
 8010c04:	20007c04 	.word	0x20007c04

08010c08 <_close_r>:
 8010c08:	b538      	push	{r3, r4, r5, lr}
 8010c0a:	4d06      	ldr	r5, [pc, #24]	; (8010c24 <_close_r+0x1c>)
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	4604      	mov	r4, r0
 8010c10:	4608      	mov	r0, r1
 8010c12:	602b      	str	r3, [r5, #0]
 8010c14:	f7f1 fa01 	bl	800201a <_close>
 8010c18:	1c43      	adds	r3, r0, #1
 8010c1a:	d102      	bne.n	8010c22 <_close_r+0x1a>
 8010c1c:	682b      	ldr	r3, [r5, #0]
 8010c1e:	b103      	cbz	r3, 8010c22 <_close_r+0x1a>
 8010c20:	6023      	str	r3, [r4, #0]
 8010c22:	bd38      	pop	{r3, r4, r5, pc}
 8010c24:	20007c04 	.word	0x20007c04

08010c28 <_fstat_r>:
 8010c28:	b538      	push	{r3, r4, r5, lr}
 8010c2a:	4d07      	ldr	r5, [pc, #28]	; (8010c48 <_fstat_r+0x20>)
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	4604      	mov	r4, r0
 8010c30:	4608      	mov	r0, r1
 8010c32:	4611      	mov	r1, r2
 8010c34:	602b      	str	r3, [r5, #0]
 8010c36:	f7f1 f9fc 	bl	8002032 <_fstat>
 8010c3a:	1c43      	adds	r3, r0, #1
 8010c3c:	d102      	bne.n	8010c44 <_fstat_r+0x1c>
 8010c3e:	682b      	ldr	r3, [r5, #0]
 8010c40:	b103      	cbz	r3, 8010c44 <_fstat_r+0x1c>
 8010c42:	6023      	str	r3, [r4, #0]
 8010c44:	bd38      	pop	{r3, r4, r5, pc}
 8010c46:	bf00      	nop
 8010c48:	20007c04 	.word	0x20007c04

08010c4c <_isatty_r>:
 8010c4c:	b538      	push	{r3, r4, r5, lr}
 8010c4e:	4d06      	ldr	r5, [pc, #24]	; (8010c68 <_isatty_r+0x1c>)
 8010c50:	2300      	movs	r3, #0
 8010c52:	4604      	mov	r4, r0
 8010c54:	4608      	mov	r0, r1
 8010c56:	602b      	str	r3, [r5, #0]
 8010c58:	f7f1 f9fb 	bl	8002052 <_isatty>
 8010c5c:	1c43      	adds	r3, r0, #1
 8010c5e:	d102      	bne.n	8010c66 <_isatty_r+0x1a>
 8010c60:	682b      	ldr	r3, [r5, #0]
 8010c62:	b103      	cbz	r3, 8010c66 <_isatty_r+0x1a>
 8010c64:	6023      	str	r3, [r4, #0]
 8010c66:	bd38      	pop	{r3, r4, r5, pc}
 8010c68:	20007c04 	.word	0x20007c04

08010c6c <_lseek_r>:
 8010c6c:	b538      	push	{r3, r4, r5, lr}
 8010c6e:	4d07      	ldr	r5, [pc, #28]	; (8010c8c <_lseek_r+0x20>)
 8010c70:	4604      	mov	r4, r0
 8010c72:	4608      	mov	r0, r1
 8010c74:	4611      	mov	r1, r2
 8010c76:	2200      	movs	r2, #0
 8010c78:	602a      	str	r2, [r5, #0]
 8010c7a:	461a      	mov	r2, r3
 8010c7c:	f7f1 f9f4 	bl	8002068 <_lseek>
 8010c80:	1c43      	adds	r3, r0, #1
 8010c82:	d102      	bne.n	8010c8a <_lseek_r+0x1e>
 8010c84:	682b      	ldr	r3, [r5, #0]
 8010c86:	b103      	cbz	r3, 8010c8a <_lseek_r+0x1e>
 8010c88:	6023      	str	r3, [r4, #0]
 8010c8a:	bd38      	pop	{r3, r4, r5, pc}
 8010c8c:	20007c04 	.word	0x20007c04

08010c90 <_read_r>:
 8010c90:	b538      	push	{r3, r4, r5, lr}
 8010c92:	4d07      	ldr	r5, [pc, #28]	; (8010cb0 <_read_r+0x20>)
 8010c94:	4604      	mov	r4, r0
 8010c96:	4608      	mov	r0, r1
 8010c98:	4611      	mov	r1, r2
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	602a      	str	r2, [r5, #0]
 8010c9e:	461a      	mov	r2, r3
 8010ca0:	f7f1 f982 	bl	8001fa8 <_read>
 8010ca4:	1c43      	adds	r3, r0, #1
 8010ca6:	d102      	bne.n	8010cae <_read_r+0x1e>
 8010ca8:	682b      	ldr	r3, [r5, #0]
 8010caa:	b103      	cbz	r3, 8010cae <_read_r+0x1e>
 8010cac:	6023      	str	r3, [r4, #0]
 8010cae:	bd38      	pop	{r3, r4, r5, pc}
 8010cb0:	20007c04 	.word	0x20007c04
 8010cb4:	00000000 	.word	0x00000000

08010cb8 <atan>:
 8010cb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cbc:	ec55 4b10 	vmov	r4, r5, d0
 8010cc0:	4bc3      	ldr	r3, [pc, #780]	; (8010fd0 <atan+0x318>)
 8010cc2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010cc6:	429e      	cmp	r6, r3
 8010cc8:	46ab      	mov	fp, r5
 8010cca:	dd18      	ble.n	8010cfe <atan+0x46>
 8010ccc:	4bc1      	ldr	r3, [pc, #772]	; (8010fd4 <atan+0x31c>)
 8010cce:	429e      	cmp	r6, r3
 8010cd0:	dc01      	bgt.n	8010cd6 <atan+0x1e>
 8010cd2:	d109      	bne.n	8010ce8 <atan+0x30>
 8010cd4:	b144      	cbz	r4, 8010ce8 <atan+0x30>
 8010cd6:	4622      	mov	r2, r4
 8010cd8:	462b      	mov	r3, r5
 8010cda:	4620      	mov	r0, r4
 8010cdc:	4629      	mov	r1, r5
 8010cde:	f7ef fad5 	bl	800028c <__adddf3>
 8010ce2:	4604      	mov	r4, r0
 8010ce4:	460d      	mov	r5, r1
 8010ce6:	e006      	b.n	8010cf6 <atan+0x3e>
 8010ce8:	f1bb 0f00 	cmp.w	fp, #0
 8010cec:	f300 8131 	bgt.w	8010f52 <atan+0x29a>
 8010cf0:	a59b      	add	r5, pc, #620	; (adr r5, 8010f60 <atan+0x2a8>)
 8010cf2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010cf6:	ec45 4b10 	vmov	d0, r4, r5
 8010cfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cfe:	4bb6      	ldr	r3, [pc, #728]	; (8010fd8 <atan+0x320>)
 8010d00:	429e      	cmp	r6, r3
 8010d02:	dc14      	bgt.n	8010d2e <atan+0x76>
 8010d04:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010d08:	429e      	cmp	r6, r3
 8010d0a:	dc0d      	bgt.n	8010d28 <atan+0x70>
 8010d0c:	a396      	add	r3, pc, #600	; (adr r3, 8010f68 <atan+0x2b0>)
 8010d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d12:	ee10 0a10 	vmov	r0, s0
 8010d16:	4629      	mov	r1, r5
 8010d18:	f7ef fab8 	bl	800028c <__adddf3>
 8010d1c:	4baf      	ldr	r3, [pc, #700]	; (8010fdc <atan+0x324>)
 8010d1e:	2200      	movs	r2, #0
 8010d20:	f7ef fefa 	bl	8000b18 <__aeabi_dcmpgt>
 8010d24:	2800      	cmp	r0, #0
 8010d26:	d1e6      	bne.n	8010cf6 <atan+0x3e>
 8010d28:	f04f 3aff 	mov.w	sl, #4294967295
 8010d2c:	e02b      	b.n	8010d86 <atan+0xce>
 8010d2e:	f000 f963 	bl	8010ff8 <fabs>
 8010d32:	4bab      	ldr	r3, [pc, #684]	; (8010fe0 <atan+0x328>)
 8010d34:	429e      	cmp	r6, r3
 8010d36:	ec55 4b10 	vmov	r4, r5, d0
 8010d3a:	f300 80bf 	bgt.w	8010ebc <atan+0x204>
 8010d3e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010d42:	429e      	cmp	r6, r3
 8010d44:	f300 80a0 	bgt.w	8010e88 <atan+0x1d0>
 8010d48:	ee10 2a10 	vmov	r2, s0
 8010d4c:	ee10 0a10 	vmov	r0, s0
 8010d50:	462b      	mov	r3, r5
 8010d52:	4629      	mov	r1, r5
 8010d54:	f7ef fa9a 	bl	800028c <__adddf3>
 8010d58:	4ba0      	ldr	r3, [pc, #640]	; (8010fdc <atan+0x324>)
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f7ef fa94 	bl	8000288 <__aeabi_dsub>
 8010d60:	2200      	movs	r2, #0
 8010d62:	4606      	mov	r6, r0
 8010d64:	460f      	mov	r7, r1
 8010d66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	4629      	mov	r1, r5
 8010d6e:	f7ef fa8d 	bl	800028c <__adddf3>
 8010d72:	4602      	mov	r2, r0
 8010d74:	460b      	mov	r3, r1
 8010d76:	4630      	mov	r0, r6
 8010d78:	4639      	mov	r1, r7
 8010d7a:	f7ef fd67 	bl	800084c <__aeabi_ddiv>
 8010d7e:	f04f 0a00 	mov.w	sl, #0
 8010d82:	4604      	mov	r4, r0
 8010d84:	460d      	mov	r5, r1
 8010d86:	4622      	mov	r2, r4
 8010d88:	462b      	mov	r3, r5
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	4629      	mov	r1, r5
 8010d8e:	f7ef fc33 	bl	80005f8 <__aeabi_dmul>
 8010d92:	4602      	mov	r2, r0
 8010d94:	460b      	mov	r3, r1
 8010d96:	4680      	mov	r8, r0
 8010d98:	4689      	mov	r9, r1
 8010d9a:	f7ef fc2d 	bl	80005f8 <__aeabi_dmul>
 8010d9e:	a374      	add	r3, pc, #464	; (adr r3, 8010f70 <atan+0x2b8>)
 8010da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da4:	4606      	mov	r6, r0
 8010da6:	460f      	mov	r7, r1
 8010da8:	f7ef fc26 	bl	80005f8 <__aeabi_dmul>
 8010dac:	a372      	add	r3, pc, #456	; (adr r3, 8010f78 <atan+0x2c0>)
 8010dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db2:	f7ef fa6b 	bl	800028c <__adddf3>
 8010db6:	4632      	mov	r2, r6
 8010db8:	463b      	mov	r3, r7
 8010dba:	f7ef fc1d 	bl	80005f8 <__aeabi_dmul>
 8010dbe:	a370      	add	r3, pc, #448	; (adr r3, 8010f80 <atan+0x2c8>)
 8010dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc4:	f7ef fa62 	bl	800028c <__adddf3>
 8010dc8:	4632      	mov	r2, r6
 8010dca:	463b      	mov	r3, r7
 8010dcc:	f7ef fc14 	bl	80005f8 <__aeabi_dmul>
 8010dd0:	a36d      	add	r3, pc, #436	; (adr r3, 8010f88 <atan+0x2d0>)
 8010dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd6:	f7ef fa59 	bl	800028c <__adddf3>
 8010dda:	4632      	mov	r2, r6
 8010ddc:	463b      	mov	r3, r7
 8010dde:	f7ef fc0b 	bl	80005f8 <__aeabi_dmul>
 8010de2:	a36b      	add	r3, pc, #428	; (adr r3, 8010f90 <atan+0x2d8>)
 8010de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de8:	f7ef fa50 	bl	800028c <__adddf3>
 8010dec:	4632      	mov	r2, r6
 8010dee:	463b      	mov	r3, r7
 8010df0:	f7ef fc02 	bl	80005f8 <__aeabi_dmul>
 8010df4:	a368      	add	r3, pc, #416	; (adr r3, 8010f98 <atan+0x2e0>)
 8010df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dfa:	f7ef fa47 	bl	800028c <__adddf3>
 8010dfe:	4642      	mov	r2, r8
 8010e00:	464b      	mov	r3, r9
 8010e02:	f7ef fbf9 	bl	80005f8 <__aeabi_dmul>
 8010e06:	a366      	add	r3, pc, #408	; (adr r3, 8010fa0 <atan+0x2e8>)
 8010e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0c:	4680      	mov	r8, r0
 8010e0e:	4689      	mov	r9, r1
 8010e10:	4630      	mov	r0, r6
 8010e12:	4639      	mov	r1, r7
 8010e14:	f7ef fbf0 	bl	80005f8 <__aeabi_dmul>
 8010e18:	a363      	add	r3, pc, #396	; (adr r3, 8010fa8 <atan+0x2f0>)
 8010e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1e:	f7ef fa33 	bl	8000288 <__aeabi_dsub>
 8010e22:	4632      	mov	r2, r6
 8010e24:	463b      	mov	r3, r7
 8010e26:	f7ef fbe7 	bl	80005f8 <__aeabi_dmul>
 8010e2a:	a361      	add	r3, pc, #388	; (adr r3, 8010fb0 <atan+0x2f8>)
 8010e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e30:	f7ef fa2a 	bl	8000288 <__aeabi_dsub>
 8010e34:	4632      	mov	r2, r6
 8010e36:	463b      	mov	r3, r7
 8010e38:	f7ef fbde 	bl	80005f8 <__aeabi_dmul>
 8010e3c:	a35e      	add	r3, pc, #376	; (adr r3, 8010fb8 <atan+0x300>)
 8010e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e42:	f7ef fa21 	bl	8000288 <__aeabi_dsub>
 8010e46:	4632      	mov	r2, r6
 8010e48:	463b      	mov	r3, r7
 8010e4a:	f7ef fbd5 	bl	80005f8 <__aeabi_dmul>
 8010e4e:	a35c      	add	r3, pc, #368	; (adr r3, 8010fc0 <atan+0x308>)
 8010e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e54:	f7ef fa18 	bl	8000288 <__aeabi_dsub>
 8010e58:	4632      	mov	r2, r6
 8010e5a:	463b      	mov	r3, r7
 8010e5c:	f7ef fbcc 	bl	80005f8 <__aeabi_dmul>
 8010e60:	4602      	mov	r2, r0
 8010e62:	460b      	mov	r3, r1
 8010e64:	4640      	mov	r0, r8
 8010e66:	4649      	mov	r1, r9
 8010e68:	f7ef fa10 	bl	800028c <__adddf3>
 8010e6c:	4622      	mov	r2, r4
 8010e6e:	462b      	mov	r3, r5
 8010e70:	f7ef fbc2 	bl	80005f8 <__aeabi_dmul>
 8010e74:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010e78:	4602      	mov	r2, r0
 8010e7a:	460b      	mov	r3, r1
 8010e7c:	d14b      	bne.n	8010f16 <atan+0x25e>
 8010e7e:	4620      	mov	r0, r4
 8010e80:	4629      	mov	r1, r5
 8010e82:	f7ef fa01 	bl	8000288 <__aeabi_dsub>
 8010e86:	e72c      	b.n	8010ce2 <atan+0x2a>
 8010e88:	ee10 0a10 	vmov	r0, s0
 8010e8c:	4b53      	ldr	r3, [pc, #332]	; (8010fdc <atan+0x324>)
 8010e8e:	2200      	movs	r2, #0
 8010e90:	4629      	mov	r1, r5
 8010e92:	f7ef f9f9 	bl	8000288 <__aeabi_dsub>
 8010e96:	4b51      	ldr	r3, [pc, #324]	; (8010fdc <atan+0x324>)
 8010e98:	4606      	mov	r6, r0
 8010e9a:	460f      	mov	r7, r1
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	4629      	mov	r1, r5
 8010ea2:	f7ef f9f3 	bl	800028c <__adddf3>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	460b      	mov	r3, r1
 8010eaa:	4630      	mov	r0, r6
 8010eac:	4639      	mov	r1, r7
 8010eae:	f7ef fccd 	bl	800084c <__aeabi_ddiv>
 8010eb2:	f04f 0a01 	mov.w	sl, #1
 8010eb6:	4604      	mov	r4, r0
 8010eb8:	460d      	mov	r5, r1
 8010eba:	e764      	b.n	8010d86 <atan+0xce>
 8010ebc:	4b49      	ldr	r3, [pc, #292]	; (8010fe4 <atan+0x32c>)
 8010ebe:	429e      	cmp	r6, r3
 8010ec0:	da1d      	bge.n	8010efe <atan+0x246>
 8010ec2:	ee10 0a10 	vmov	r0, s0
 8010ec6:	4b48      	ldr	r3, [pc, #288]	; (8010fe8 <atan+0x330>)
 8010ec8:	2200      	movs	r2, #0
 8010eca:	4629      	mov	r1, r5
 8010ecc:	f7ef f9dc 	bl	8000288 <__aeabi_dsub>
 8010ed0:	4b45      	ldr	r3, [pc, #276]	; (8010fe8 <atan+0x330>)
 8010ed2:	4606      	mov	r6, r0
 8010ed4:	460f      	mov	r7, r1
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	4620      	mov	r0, r4
 8010eda:	4629      	mov	r1, r5
 8010edc:	f7ef fb8c 	bl	80005f8 <__aeabi_dmul>
 8010ee0:	4b3e      	ldr	r3, [pc, #248]	; (8010fdc <atan+0x324>)
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	f7ef f9d2 	bl	800028c <__adddf3>
 8010ee8:	4602      	mov	r2, r0
 8010eea:	460b      	mov	r3, r1
 8010eec:	4630      	mov	r0, r6
 8010eee:	4639      	mov	r1, r7
 8010ef0:	f7ef fcac 	bl	800084c <__aeabi_ddiv>
 8010ef4:	f04f 0a02 	mov.w	sl, #2
 8010ef8:	4604      	mov	r4, r0
 8010efa:	460d      	mov	r5, r1
 8010efc:	e743      	b.n	8010d86 <atan+0xce>
 8010efe:	462b      	mov	r3, r5
 8010f00:	ee10 2a10 	vmov	r2, s0
 8010f04:	4939      	ldr	r1, [pc, #228]	; (8010fec <atan+0x334>)
 8010f06:	2000      	movs	r0, #0
 8010f08:	f7ef fca0 	bl	800084c <__aeabi_ddiv>
 8010f0c:	f04f 0a03 	mov.w	sl, #3
 8010f10:	4604      	mov	r4, r0
 8010f12:	460d      	mov	r5, r1
 8010f14:	e737      	b.n	8010d86 <atan+0xce>
 8010f16:	4b36      	ldr	r3, [pc, #216]	; (8010ff0 <atan+0x338>)
 8010f18:	4e36      	ldr	r6, [pc, #216]	; (8010ff4 <atan+0x33c>)
 8010f1a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010f1e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8010f22:	e9da 2300 	ldrd	r2, r3, [sl]
 8010f26:	f7ef f9af 	bl	8000288 <__aeabi_dsub>
 8010f2a:	4622      	mov	r2, r4
 8010f2c:	462b      	mov	r3, r5
 8010f2e:	f7ef f9ab 	bl	8000288 <__aeabi_dsub>
 8010f32:	4602      	mov	r2, r0
 8010f34:	460b      	mov	r3, r1
 8010f36:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010f3a:	f7ef f9a5 	bl	8000288 <__aeabi_dsub>
 8010f3e:	f1bb 0f00 	cmp.w	fp, #0
 8010f42:	4604      	mov	r4, r0
 8010f44:	460d      	mov	r5, r1
 8010f46:	f6bf aed6 	bge.w	8010cf6 <atan+0x3e>
 8010f4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f4e:	461d      	mov	r5, r3
 8010f50:	e6d1      	b.n	8010cf6 <atan+0x3e>
 8010f52:	a51d      	add	r5, pc, #116	; (adr r5, 8010fc8 <atan+0x310>)
 8010f54:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010f58:	e6cd      	b.n	8010cf6 <atan+0x3e>
 8010f5a:	bf00      	nop
 8010f5c:	f3af 8000 	nop.w
 8010f60:	54442d18 	.word	0x54442d18
 8010f64:	bff921fb 	.word	0xbff921fb
 8010f68:	8800759c 	.word	0x8800759c
 8010f6c:	7e37e43c 	.word	0x7e37e43c
 8010f70:	e322da11 	.word	0xe322da11
 8010f74:	3f90ad3a 	.word	0x3f90ad3a
 8010f78:	24760deb 	.word	0x24760deb
 8010f7c:	3fa97b4b 	.word	0x3fa97b4b
 8010f80:	a0d03d51 	.word	0xa0d03d51
 8010f84:	3fb10d66 	.word	0x3fb10d66
 8010f88:	c54c206e 	.word	0xc54c206e
 8010f8c:	3fb745cd 	.word	0x3fb745cd
 8010f90:	920083ff 	.word	0x920083ff
 8010f94:	3fc24924 	.word	0x3fc24924
 8010f98:	5555550d 	.word	0x5555550d
 8010f9c:	3fd55555 	.word	0x3fd55555
 8010fa0:	2c6a6c2f 	.word	0x2c6a6c2f
 8010fa4:	bfa2b444 	.word	0xbfa2b444
 8010fa8:	52defd9a 	.word	0x52defd9a
 8010fac:	3fadde2d 	.word	0x3fadde2d
 8010fb0:	af749a6d 	.word	0xaf749a6d
 8010fb4:	3fb3b0f2 	.word	0x3fb3b0f2
 8010fb8:	fe231671 	.word	0xfe231671
 8010fbc:	3fbc71c6 	.word	0x3fbc71c6
 8010fc0:	9998ebc4 	.word	0x9998ebc4
 8010fc4:	3fc99999 	.word	0x3fc99999
 8010fc8:	54442d18 	.word	0x54442d18
 8010fcc:	3ff921fb 	.word	0x3ff921fb
 8010fd0:	440fffff 	.word	0x440fffff
 8010fd4:	7ff00000 	.word	0x7ff00000
 8010fd8:	3fdbffff 	.word	0x3fdbffff
 8010fdc:	3ff00000 	.word	0x3ff00000
 8010fe0:	3ff2ffff 	.word	0x3ff2ffff
 8010fe4:	40038000 	.word	0x40038000
 8010fe8:	3ff80000 	.word	0x3ff80000
 8010fec:	bff00000 	.word	0xbff00000
 8010ff0:	080124b8 	.word	0x080124b8
 8010ff4:	08012498 	.word	0x08012498

08010ff8 <fabs>:
 8010ff8:	ec51 0b10 	vmov	r0, r1, d0
 8010ffc:	ee10 2a10 	vmov	r2, s0
 8011000:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011004:	ec43 2b10 	vmov	d0, r2, r3
 8011008:	4770      	bx	lr
	...

0801100c <pow>:
 801100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801100e:	ed2d 8b02 	vpush	{d8}
 8011012:	eeb0 8a40 	vmov.f32	s16, s0
 8011016:	eef0 8a60 	vmov.f32	s17, s1
 801101a:	ec55 4b11 	vmov	r4, r5, d1
 801101e:	f000 f893 	bl	8011148 <__ieee754_pow>
 8011022:	4622      	mov	r2, r4
 8011024:	462b      	mov	r3, r5
 8011026:	4620      	mov	r0, r4
 8011028:	4629      	mov	r1, r5
 801102a:	ec57 6b10 	vmov	r6, r7, d0
 801102e:	f7ef fd7d 	bl	8000b2c <__aeabi_dcmpun>
 8011032:	2800      	cmp	r0, #0
 8011034:	d13b      	bne.n	80110ae <pow+0xa2>
 8011036:	ec51 0b18 	vmov	r0, r1, d8
 801103a:	2200      	movs	r2, #0
 801103c:	2300      	movs	r3, #0
 801103e:	f7ef fd43 	bl	8000ac8 <__aeabi_dcmpeq>
 8011042:	b1b8      	cbz	r0, 8011074 <pow+0x68>
 8011044:	2200      	movs	r2, #0
 8011046:	2300      	movs	r3, #0
 8011048:	4620      	mov	r0, r4
 801104a:	4629      	mov	r1, r5
 801104c:	f7ef fd3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011050:	2800      	cmp	r0, #0
 8011052:	d146      	bne.n	80110e2 <pow+0xd6>
 8011054:	ec45 4b10 	vmov	d0, r4, r5
 8011058:	f000 fe86 	bl	8011d68 <finite>
 801105c:	b338      	cbz	r0, 80110ae <pow+0xa2>
 801105e:	2200      	movs	r2, #0
 8011060:	2300      	movs	r3, #0
 8011062:	4620      	mov	r0, r4
 8011064:	4629      	mov	r1, r5
 8011066:	f7ef fd39 	bl	8000adc <__aeabi_dcmplt>
 801106a:	b300      	cbz	r0, 80110ae <pow+0xa2>
 801106c:	f7fc fed8 	bl	800de20 <__errno>
 8011070:	2322      	movs	r3, #34	; 0x22
 8011072:	e01b      	b.n	80110ac <pow+0xa0>
 8011074:	ec47 6b10 	vmov	d0, r6, r7
 8011078:	f000 fe76 	bl	8011d68 <finite>
 801107c:	b9e0      	cbnz	r0, 80110b8 <pow+0xac>
 801107e:	eeb0 0a48 	vmov.f32	s0, s16
 8011082:	eef0 0a68 	vmov.f32	s1, s17
 8011086:	f000 fe6f 	bl	8011d68 <finite>
 801108a:	b1a8      	cbz	r0, 80110b8 <pow+0xac>
 801108c:	ec45 4b10 	vmov	d0, r4, r5
 8011090:	f000 fe6a 	bl	8011d68 <finite>
 8011094:	b180      	cbz	r0, 80110b8 <pow+0xac>
 8011096:	4632      	mov	r2, r6
 8011098:	463b      	mov	r3, r7
 801109a:	4630      	mov	r0, r6
 801109c:	4639      	mov	r1, r7
 801109e:	f7ef fd45 	bl	8000b2c <__aeabi_dcmpun>
 80110a2:	2800      	cmp	r0, #0
 80110a4:	d0e2      	beq.n	801106c <pow+0x60>
 80110a6:	f7fc febb 	bl	800de20 <__errno>
 80110aa:	2321      	movs	r3, #33	; 0x21
 80110ac:	6003      	str	r3, [r0, #0]
 80110ae:	ecbd 8b02 	vpop	{d8}
 80110b2:	ec47 6b10 	vmov	d0, r6, r7
 80110b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110b8:	2200      	movs	r2, #0
 80110ba:	2300      	movs	r3, #0
 80110bc:	4630      	mov	r0, r6
 80110be:	4639      	mov	r1, r7
 80110c0:	f7ef fd02 	bl	8000ac8 <__aeabi_dcmpeq>
 80110c4:	2800      	cmp	r0, #0
 80110c6:	d0f2      	beq.n	80110ae <pow+0xa2>
 80110c8:	eeb0 0a48 	vmov.f32	s0, s16
 80110cc:	eef0 0a68 	vmov.f32	s1, s17
 80110d0:	f000 fe4a 	bl	8011d68 <finite>
 80110d4:	2800      	cmp	r0, #0
 80110d6:	d0ea      	beq.n	80110ae <pow+0xa2>
 80110d8:	ec45 4b10 	vmov	d0, r4, r5
 80110dc:	f000 fe44 	bl	8011d68 <finite>
 80110e0:	e7c3      	b.n	801106a <pow+0x5e>
 80110e2:	4f01      	ldr	r7, [pc, #4]	; (80110e8 <pow+0xdc>)
 80110e4:	2600      	movs	r6, #0
 80110e6:	e7e2      	b.n	80110ae <pow+0xa2>
 80110e8:	3ff00000 	.word	0x3ff00000

080110ec <sqrt>:
 80110ec:	b538      	push	{r3, r4, r5, lr}
 80110ee:	ed2d 8b02 	vpush	{d8}
 80110f2:	ec55 4b10 	vmov	r4, r5, d0
 80110f6:	f000 fd55 	bl	8011ba4 <__ieee754_sqrt>
 80110fa:	4622      	mov	r2, r4
 80110fc:	462b      	mov	r3, r5
 80110fe:	4620      	mov	r0, r4
 8011100:	4629      	mov	r1, r5
 8011102:	eeb0 8a40 	vmov.f32	s16, s0
 8011106:	eef0 8a60 	vmov.f32	s17, s1
 801110a:	f7ef fd0f 	bl	8000b2c <__aeabi_dcmpun>
 801110e:	b990      	cbnz	r0, 8011136 <sqrt+0x4a>
 8011110:	2200      	movs	r2, #0
 8011112:	2300      	movs	r3, #0
 8011114:	4620      	mov	r0, r4
 8011116:	4629      	mov	r1, r5
 8011118:	f7ef fce0 	bl	8000adc <__aeabi_dcmplt>
 801111c:	b158      	cbz	r0, 8011136 <sqrt+0x4a>
 801111e:	f7fc fe7f 	bl	800de20 <__errno>
 8011122:	2321      	movs	r3, #33	; 0x21
 8011124:	6003      	str	r3, [r0, #0]
 8011126:	2200      	movs	r2, #0
 8011128:	2300      	movs	r3, #0
 801112a:	4610      	mov	r0, r2
 801112c:	4619      	mov	r1, r3
 801112e:	f7ef fb8d 	bl	800084c <__aeabi_ddiv>
 8011132:	ec41 0b18 	vmov	d8, r0, r1
 8011136:	eeb0 0a48 	vmov.f32	s0, s16
 801113a:	eef0 0a68 	vmov.f32	s1, s17
 801113e:	ecbd 8b02 	vpop	{d8}
 8011142:	bd38      	pop	{r3, r4, r5, pc}
 8011144:	0000      	movs	r0, r0
	...

08011148 <__ieee754_pow>:
 8011148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801114c:	ed2d 8b06 	vpush	{d8-d10}
 8011150:	b089      	sub	sp, #36	; 0x24
 8011152:	ed8d 1b00 	vstr	d1, [sp]
 8011156:	e9dd 2900 	ldrd	r2, r9, [sp]
 801115a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801115e:	ea58 0102 	orrs.w	r1, r8, r2
 8011162:	ec57 6b10 	vmov	r6, r7, d0
 8011166:	d115      	bne.n	8011194 <__ieee754_pow+0x4c>
 8011168:	19b3      	adds	r3, r6, r6
 801116a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801116e:	4152      	adcs	r2, r2
 8011170:	4299      	cmp	r1, r3
 8011172:	4b89      	ldr	r3, [pc, #548]	; (8011398 <__ieee754_pow+0x250>)
 8011174:	4193      	sbcs	r3, r2
 8011176:	f080 84d2 	bcs.w	8011b1e <__ieee754_pow+0x9d6>
 801117a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801117e:	4630      	mov	r0, r6
 8011180:	4639      	mov	r1, r7
 8011182:	f7ef f883 	bl	800028c <__adddf3>
 8011186:	ec41 0b10 	vmov	d0, r0, r1
 801118a:	b009      	add	sp, #36	; 0x24
 801118c:	ecbd 8b06 	vpop	{d8-d10}
 8011190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011194:	4b81      	ldr	r3, [pc, #516]	; (801139c <__ieee754_pow+0x254>)
 8011196:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801119a:	429c      	cmp	r4, r3
 801119c:	ee10 aa10 	vmov	sl, s0
 80111a0:	463d      	mov	r5, r7
 80111a2:	dc06      	bgt.n	80111b2 <__ieee754_pow+0x6a>
 80111a4:	d101      	bne.n	80111aa <__ieee754_pow+0x62>
 80111a6:	2e00      	cmp	r6, #0
 80111a8:	d1e7      	bne.n	801117a <__ieee754_pow+0x32>
 80111aa:	4598      	cmp	r8, r3
 80111ac:	dc01      	bgt.n	80111b2 <__ieee754_pow+0x6a>
 80111ae:	d10f      	bne.n	80111d0 <__ieee754_pow+0x88>
 80111b0:	b172      	cbz	r2, 80111d0 <__ieee754_pow+0x88>
 80111b2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80111b6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80111ba:	ea55 050a 	orrs.w	r5, r5, sl
 80111be:	d1dc      	bne.n	801117a <__ieee754_pow+0x32>
 80111c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80111c4:	18db      	adds	r3, r3, r3
 80111c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80111ca:	4152      	adcs	r2, r2
 80111cc:	429d      	cmp	r5, r3
 80111ce:	e7d0      	b.n	8011172 <__ieee754_pow+0x2a>
 80111d0:	2d00      	cmp	r5, #0
 80111d2:	da3b      	bge.n	801124c <__ieee754_pow+0x104>
 80111d4:	4b72      	ldr	r3, [pc, #456]	; (80113a0 <__ieee754_pow+0x258>)
 80111d6:	4598      	cmp	r8, r3
 80111d8:	dc51      	bgt.n	801127e <__ieee754_pow+0x136>
 80111da:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80111de:	4598      	cmp	r8, r3
 80111e0:	f340 84ac 	ble.w	8011b3c <__ieee754_pow+0x9f4>
 80111e4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80111e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80111ec:	2b14      	cmp	r3, #20
 80111ee:	dd0f      	ble.n	8011210 <__ieee754_pow+0xc8>
 80111f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80111f4:	fa22 f103 	lsr.w	r1, r2, r3
 80111f8:	fa01 f303 	lsl.w	r3, r1, r3
 80111fc:	4293      	cmp	r3, r2
 80111fe:	f040 849d 	bne.w	8011b3c <__ieee754_pow+0x9f4>
 8011202:	f001 0101 	and.w	r1, r1, #1
 8011206:	f1c1 0302 	rsb	r3, r1, #2
 801120a:	9304      	str	r3, [sp, #16]
 801120c:	b182      	cbz	r2, 8011230 <__ieee754_pow+0xe8>
 801120e:	e05f      	b.n	80112d0 <__ieee754_pow+0x188>
 8011210:	2a00      	cmp	r2, #0
 8011212:	d15b      	bne.n	80112cc <__ieee754_pow+0x184>
 8011214:	f1c3 0314 	rsb	r3, r3, #20
 8011218:	fa48 f103 	asr.w	r1, r8, r3
 801121c:	fa01 f303 	lsl.w	r3, r1, r3
 8011220:	4543      	cmp	r3, r8
 8011222:	f040 8488 	bne.w	8011b36 <__ieee754_pow+0x9ee>
 8011226:	f001 0101 	and.w	r1, r1, #1
 801122a:	f1c1 0302 	rsb	r3, r1, #2
 801122e:	9304      	str	r3, [sp, #16]
 8011230:	4b5c      	ldr	r3, [pc, #368]	; (80113a4 <__ieee754_pow+0x25c>)
 8011232:	4598      	cmp	r8, r3
 8011234:	d132      	bne.n	801129c <__ieee754_pow+0x154>
 8011236:	f1b9 0f00 	cmp.w	r9, #0
 801123a:	f280 8478 	bge.w	8011b2e <__ieee754_pow+0x9e6>
 801123e:	4959      	ldr	r1, [pc, #356]	; (80113a4 <__ieee754_pow+0x25c>)
 8011240:	4632      	mov	r2, r6
 8011242:	463b      	mov	r3, r7
 8011244:	2000      	movs	r0, #0
 8011246:	f7ef fb01 	bl	800084c <__aeabi_ddiv>
 801124a:	e79c      	b.n	8011186 <__ieee754_pow+0x3e>
 801124c:	2300      	movs	r3, #0
 801124e:	9304      	str	r3, [sp, #16]
 8011250:	2a00      	cmp	r2, #0
 8011252:	d13d      	bne.n	80112d0 <__ieee754_pow+0x188>
 8011254:	4b51      	ldr	r3, [pc, #324]	; (801139c <__ieee754_pow+0x254>)
 8011256:	4598      	cmp	r8, r3
 8011258:	d1ea      	bne.n	8011230 <__ieee754_pow+0xe8>
 801125a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801125e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011262:	ea53 030a 	orrs.w	r3, r3, sl
 8011266:	f000 845a 	beq.w	8011b1e <__ieee754_pow+0x9d6>
 801126a:	4b4f      	ldr	r3, [pc, #316]	; (80113a8 <__ieee754_pow+0x260>)
 801126c:	429c      	cmp	r4, r3
 801126e:	dd08      	ble.n	8011282 <__ieee754_pow+0x13a>
 8011270:	f1b9 0f00 	cmp.w	r9, #0
 8011274:	f2c0 8457 	blt.w	8011b26 <__ieee754_pow+0x9de>
 8011278:	e9dd 0100 	ldrd	r0, r1, [sp]
 801127c:	e783      	b.n	8011186 <__ieee754_pow+0x3e>
 801127e:	2302      	movs	r3, #2
 8011280:	e7e5      	b.n	801124e <__ieee754_pow+0x106>
 8011282:	f1b9 0f00 	cmp.w	r9, #0
 8011286:	f04f 0000 	mov.w	r0, #0
 801128a:	f04f 0100 	mov.w	r1, #0
 801128e:	f6bf af7a 	bge.w	8011186 <__ieee754_pow+0x3e>
 8011292:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011296:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801129a:	e774      	b.n	8011186 <__ieee754_pow+0x3e>
 801129c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80112a0:	d106      	bne.n	80112b0 <__ieee754_pow+0x168>
 80112a2:	4632      	mov	r2, r6
 80112a4:	463b      	mov	r3, r7
 80112a6:	4630      	mov	r0, r6
 80112a8:	4639      	mov	r1, r7
 80112aa:	f7ef f9a5 	bl	80005f8 <__aeabi_dmul>
 80112ae:	e76a      	b.n	8011186 <__ieee754_pow+0x3e>
 80112b0:	4b3e      	ldr	r3, [pc, #248]	; (80113ac <__ieee754_pow+0x264>)
 80112b2:	4599      	cmp	r9, r3
 80112b4:	d10c      	bne.n	80112d0 <__ieee754_pow+0x188>
 80112b6:	2d00      	cmp	r5, #0
 80112b8:	db0a      	blt.n	80112d0 <__ieee754_pow+0x188>
 80112ba:	ec47 6b10 	vmov	d0, r6, r7
 80112be:	b009      	add	sp, #36	; 0x24
 80112c0:	ecbd 8b06 	vpop	{d8-d10}
 80112c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112c8:	f000 bc6c 	b.w	8011ba4 <__ieee754_sqrt>
 80112cc:	2300      	movs	r3, #0
 80112ce:	9304      	str	r3, [sp, #16]
 80112d0:	ec47 6b10 	vmov	d0, r6, r7
 80112d4:	f7ff fe90 	bl	8010ff8 <fabs>
 80112d8:	ec51 0b10 	vmov	r0, r1, d0
 80112dc:	f1ba 0f00 	cmp.w	sl, #0
 80112e0:	d129      	bne.n	8011336 <__ieee754_pow+0x1ee>
 80112e2:	b124      	cbz	r4, 80112ee <__ieee754_pow+0x1a6>
 80112e4:	4b2f      	ldr	r3, [pc, #188]	; (80113a4 <__ieee754_pow+0x25c>)
 80112e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80112ea:	429a      	cmp	r2, r3
 80112ec:	d123      	bne.n	8011336 <__ieee754_pow+0x1ee>
 80112ee:	f1b9 0f00 	cmp.w	r9, #0
 80112f2:	da05      	bge.n	8011300 <__ieee754_pow+0x1b8>
 80112f4:	4602      	mov	r2, r0
 80112f6:	460b      	mov	r3, r1
 80112f8:	2000      	movs	r0, #0
 80112fa:	492a      	ldr	r1, [pc, #168]	; (80113a4 <__ieee754_pow+0x25c>)
 80112fc:	f7ef faa6 	bl	800084c <__aeabi_ddiv>
 8011300:	2d00      	cmp	r5, #0
 8011302:	f6bf af40 	bge.w	8011186 <__ieee754_pow+0x3e>
 8011306:	9b04      	ldr	r3, [sp, #16]
 8011308:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801130c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011310:	4323      	orrs	r3, r4
 8011312:	d108      	bne.n	8011326 <__ieee754_pow+0x1de>
 8011314:	4602      	mov	r2, r0
 8011316:	460b      	mov	r3, r1
 8011318:	4610      	mov	r0, r2
 801131a:	4619      	mov	r1, r3
 801131c:	f7ee ffb4 	bl	8000288 <__aeabi_dsub>
 8011320:	4602      	mov	r2, r0
 8011322:	460b      	mov	r3, r1
 8011324:	e78f      	b.n	8011246 <__ieee754_pow+0xfe>
 8011326:	9b04      	ldr	r3, [sp, #16]
 8011328:	2b01      	cmp	r3, #1
 801132a:	f47f af2c 	bne.w	8011186 <__ieee754_pow+0x3e>
 801132e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011332:	4619      	mov	r1, r3
 8011334:	e727      	b.n	8011186 <__ieee754_pow+0x3e>
 8011336:	0feb      	lsrs	r3, r5, #31
 8011338:	3b01      	subs	r3, #1
 801133a:	9306      	str	r3, [sp, #24]
 801133c:	9a06      	ldr	r2, [sp, #24]
 801133e:	9b04      	ldr	r3, [sp, #16]
 8011340:	4313      	orrs	r3, r2
 8011342:	d102      	bne.n	801134a <__ieee754_pow+0x202>
 8011344:	4632      	mov	r2, r6
 8011346:	463b      	mov	r3, r7
 8011348:	e7e6      	b.n	8011318 <__ieee754_pow+0x1d0>
 801134a:	4b19      	ldr	r3, [pc, #100]	; (80113b0 <__ieee754_pow+0x268>)
 801134c:	4598      	cmp	r8, r3
 801134e:	f340 80fb 	ble.w	8011548 <__ieee754_pow+0x400>
 8011352:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011356:	4598      	cmp	r8, r3
 8011358:	4b13      	ldr	r3, [pc, #76]	; (80113a8 <__ieee754_pow+0x260>)
 801135a:	dd0c      	ble.n	8011376 <__ieee754_pow+0x22e>
 801135c:	429c      	cmp	r4, r3
 801135e:	dc0f      	bgt.n	8011380 <__ieee754_pow+0x238>
 8011360:	f1b9 0f00 	cmp.w	r9, #0
 8011364:	da0f      	bge.n	8011386 <__ieee754_pow+0x23e>
 8011366:	2000      	movs	r0, #0
 8011368:	b009      	add	sp, #36	; 0x24
 801136a:	ecbd 8b06 	vpop	{d8-d10}
 801136e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011372:	f000 bcf0 	b.w	8011d56 <__math_oflow>
 8011376:	429c      	cmp	r4, r3
 8011378:	dbf2      	blt.n	8011360 <__ieee754_pow+0x218>
 801137a:	4b0a      	ldr	r3, [pc, #40]	; (80113a4 <__ieee754_pow+0x25c>)
 801137c:	429c      	cmp	r4, r3
 801137e:	dd19      	ble.n	80113b4 <__ieee754_pow+0x26c>
 8011380:	f1b9 0f00 	cmp.w	r9, #0
 8011384:	dcef      	bgt.n	8011366 <__ieee754_pow+0x21e>
 8011386:	2000      	movs	r0, #0
 8011388:	b009      	add	sp, #36	; 0x24
 801138a:	ecbd 8b06 	vpop	{d8-d10}
 801138e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011392:	f000 bcd7 	b.w	8011d44 <__math_uflow>
 8011396:	bf00      	nop
 8011398:	fff00000 	.word	0xfff00000
 801139c:	7ff00000 	.word	0x7ff00000
 80113a0:	433fffff 	.word	0x433fffff
 80113a4:	3ff00000 	.word	0x3ff00000
 80113a8:	3fefffff 	.word	0x3fefffff
 80113ac:	3fe00000 	.word	0x3fe00000
 80113b0:	41e00000 	.word	0x41e00000
 80113b4:	4b60      	ldr	r3, [pc, #384]	; (8011538 <__ieee754_pow+0x3f0>)
 80113b6:	2200      	movs	r2, #0
 80113b8:	f7ee ff66 	bl	8000288 <__aeabi_dsub>
 80113bc:	a354      	add	r3, pc, #336	; (adr r3, 8011510 <__ieee754_pow+0x3c8>)
 80113be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c2:	4604      	mov	r4, r0
 80113c4:	460d      	mov	r5, r1
 80113c6:	f7ef f917 	bl	80005f8 <__aeabi_dmul>
 80113ca:	a353      	add	r3, pc, #332	; (adr r3, 8011518 <__ieee754_pow+0x3d0>)
 80113cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d0:	4606      	mov	r6, r0
 80113d2:	460f      	mov	r7, r1
 80113d4:	4620      	mov	r0, r4
 80113d6:	4629      	mov	r1, r5
 80113d8:	f7ef f90e 	bl	80005f8 <__aeabi_dmul>
 80113dc:	4b57      	ldr	r3, [pc, #348]	; (801153c <__ieee754_pow+0x3f4>)
 80113de:	4682      	mov	sl, r0
 80113e0:	468b      	mov	fp, r1
 80113e2:	2200      	movs	r2, #0
 80113e4:	4620      	mov	r0, r4
 80113e6:	4629      	mov	r1, r5
 80113e8:	f7ef f906 	bl	80005f8 <__aeabi_dmul>
 80113ec:	4602      	mov	r2, r0
 80113ee:	460b      	mov	r3, r1
 80113f0:	a14b      	add	r1, pc, #300	; (adr r1, 8011520 <__ieee754_pow+0x3d8>)
 80113f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113f6:	f7ee ff47 	bl	8000288 <__aeabi_dsub>
 80113fa:	4622      	mov	r2, r4
 80113fc:	462b      	mov	r3, r5
 80113fe:	f7ef f8fb 	bl	80005f8 <__aeabi_dmul>
 8011402:	4602      	mov	r2, r0
 8011404:	460b      	mov	r3, r1
 8011406:	2000      	movs	r0, #0
 8011408:	494d      	ldr	r1, [pc, #308]	; (8011540 <__ieee754_pow+0x3f8>)
 801140a:	f7ee ff3d 	bl	8000288 <__aeabi_dsub>
 801140e:	4622      	mov	r2, r4
 8011410:	4680      	mov	r8, r0
 8011412:	4689      	mov	r9, r1
 8011414:	462b      	mov	r3, r5
 8011416:	4620      	mov	r0, r4
 8011418:	4629      	mov	r1, r5
 801141a:	f7ef f8ed 	bl	80005f8 <__aeabi_dmul>
 801141e:	4602      	mov	r2, r0
 8011420:	460b      	mov	r3, r1
 8011422:	4640      	mov	r0, r8
 8011424:	4649      	mov	r1, r9
 8011426:	f7ef f8e7 	bl	80005f8 <__aeabi_dmul>
 801142a:	a33f      	add	r3, pc, #252	; (adr r3, 8011528 <__ieee754_pow+0x3e0>)
 801142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011430:	f7ef f8e2 	bl	80005f8 <__aeabi_dmul>
 8011434:	4602      	mov	r2, r0
 8011436:	460b      	mov	r3, r1
 8011438:	4650      	mov	r0, sl
 801143a:	4659      	mov	r1, fp
 801143c:	f7ee ff24 	bl	8000288 <__aeabi_dsub>
 8011440:	4602      	mov	r2, r0
 8011442:	460b      	mov	r3, r1
 8011444:	4680      	mov	r8, r0
 8011446:	4689      	mov	r9, r1
 8011448:	4630      	mov	r0, r6
 801144a:	4639      	mov	r1, r7
 801144c:	f7ee ff1e 	bl	800028c <__adddf3>
 8011450:	2000      	movs	r0, #0
 8011452:	4632      	mov	r2, r6
 8011454:	463b      	mov	r3, r7
 8011456:	4604      	mov	r4, r0
 8011458:	460d      	mov	r5, r1
 801145a:	f7ee ff15 	bl	8000288 <__aeabi_dsub>
 801145e:	4602      	mov	r2, r0
 8011460:	460b      	mov	r3, r1
 8011462:	4640      	mov	r0, r8
 8011464:	4649      	mov	r1, r9
 8011466:	f7ee ff0f 	bl	8000288 <__aeabi_dsub>
 801146a:	9b04      	ldr	r3, [sp, #16]
 801146c:	9a06      	ldr	r2, [sp, #24]
 801146e:	3b01      	subs	r3, #1
 8011470:	4313      	orrs	r3, r2
 8011472:	4682      	mov	sl, r0
 8011474:	468b      	mov	fp, r1
 8011476:	f040 81e7 	bne.w	8011848 <__ieee754_pow+0x700>
 801147a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011530 <__ieee754_pow+0x3e8>
 801147e:	eeb0 8a47 	vmov.f32	s16, s14
 8011482:	eef0 8a67 	vmov.f32	s17, s15
 8011486:	e9dd 6700 	ldrd	r6, r7, [sp]
 801148a:	2600      	movs	r6, #0
 801148c:	4632      	mov	r2, r6
 801148e:	463b      	mov	r3, r7
 8011490:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011494:	f7ee fef8 	bl	8000288 <__aeabi_dsub>
 8011498:	4622      	mov	r2, r4
 801149a:	462b      	mov	r3, r5
 801149c:	f7ef f8ac 	bl	80005f8 <__aeabi_dmul>
 80114a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114a4:	4680      	mov	r8, r0
 80114a6:	4689      	mov	r9, r1
 80114a8:	4650      	mov	r0, sl
 80114aa:	4659      	mov	r1, fp
 80114ac:	f7ef f8a4 	bl	80005f8 <__aeabi_dmul>
 80114b0:	4602      	mov	r2, r0
 80114b2:	460b      	mov	r3, r1
 80114b4:	4640      	mov	r0, r8
 80114b6:	4649      	mov	r1, r9
 80114b8:	f7ee fee8 	bl	800028c <__adddf3>
 80114bc:	4632      	mov	r2, r6
 80114be:	463b      	mov	r3, r7
 80114c0:	4680      	mov	r8, r0
 80114c2:	4689      	mov	r9, r1
 80114c4:	4620      	mov	r0, r4
 80114c6:	4629      	mov	r1, r5
 80114c8:	f7ef f896 	bl	80005f8 <__aeabi_dmul>
 80114cc:	460b      	mov	r3, r1
 80114ce:	4604      	mov	r4, r0
 80114d0:	460d      	mov	r5, r1
 80114d2:	4602      	mov	r2, r0
 80114d4:	4649      	mov	r1, r9
 80114d6:	4640      	mov	r0, r8
 80114d8:	f7ee fed8 	bl	800028c <__adddf3>
 80114dc:	4b19      	ldr	r3, [pc, #100]	; (8011544 <__ieee754_pow+0x3fc>)
 80114de:	4299      	cmp	r1, r3
 80114e0:	ec45 4b19 	vmov	d9, r4, r5
 80114e4:	4606      	mov	r6, r0
 80114e6:	460f      	mov	r7, r1
 80114e8:	468b      	mov	fp, r1
 80114ea:	f340 82f1 	ble.w	8011ad0 <__ieee754_pow+0x988>
 80114ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80114f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80114f6:	4303      	orrs	r3, r0
 80114f8:	f000 81e4 	beq.w	80118c4 <__ieee754_pow+0x77c>
 80114fc:	ec51 0b18 	vmov	r0, r1, d8
 8011500:	2200      	movs	r2, #0
 8011502:	2300      	movs	r3, #0
 8011504:	f7ef faea 	bl	8000adc <__aeabi_dcmplt>
 8011508:	3800      	subs	r0, #0
 801150a:	bf18      	it	ne
 801150c:	2001      	movne	r0, #1
 801150e:	e72b      	b.n	8011368 <__ieee754_pow+0x220>
 8011510:	60000000 	.word	0x60000000
 8011514:	3ff71547 	.word	0x3ff71547
 8011518:	f85ddf44 	.word	0xf85ddf44
 801151c:	3e54ae0b 	.word	0x3e54ae0b
 8011520:	55555555 	.word	0x55555555
 8011524:	3fd55555 	.word	0x3fd55555
 8011528:	652b82fe 	.word	0x652b82fe
 801152c:	3ff71547 	.word	0x3ff71547
 8011530:	00000000 	.word	0x00000000
 8011534:	bff00000 	.word	0xbff00000
 8011538:	3ff00000 	.word	0x3ff00000
 801153c:	3fd00000 	.word	0x3fd00000
 8011540:	3fe00000 	.word	0x3fe00000
 8011544:	408fffff 	.word	0x408fffff
 8011548:	4bd5      	ldr	r3, [pc, #852]	; (80118a0 <__ieee754_pow+0x758>)
 801154a:	402b      	ands	r3, r5
 801154c:	2200      	movs	r2, #0
 801154e:	b92b      	cbnz	r3, 801155c <__ieee754_pow+0x414>
 8011550:	4bd4      	ldr	r3, [pc, #848]	; (80118a4 <__ieee754_pow+0x75c>)
 8011552:	f7ef f851 	bl	80005f8 <__aeabi_dmul>
 8011556:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801155a:	460c      	mov	r4, r1
 801155c:	1523      	asrs	r3, r4, #20
 801155e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011562:	4413      	add	r3, r2
 8011564:	9305      	str	r3, [sp, #20]
 8011566:	4bd0      	ldr	r3, [pc, #832]	; (80118a8 <__ieee754_pow+0x760>)
 8011568:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801156c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011570:	429c      	cmp	r4, r3
 8011572:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011576:	dd08      	ble.n	801158a <__ieee754_pow+0x442>
 8011578:	4bcc      	ldr	r3, [pc, #816]	; (80118ac <__ieee754_pow+0x764>)
 801157a:	429c      	cmp	r4, r3
 801157c:	f340 8162 	ble.w	8011844 <__ieee754_pow+0x6fc>
 8011580:	9b05      	ldr	r3, [sp, #20]
 8011582:	3301      	adds	r3, #1
 8011584:	9305      	str	r3, [sp, #20]
 8011586:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801158a:	2400      	movs	r4, #0
 801158c:	00e3      	lsls	r3, r4, #3
 801158e:	9307      	str	r3, [sp, #28]
 8011590:	4bc7      	ldr	r3, [pc, #796]	; (80118b0 <__ieee754_pow+0x768>)
 8011592:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011596:	ed93 7b00 	vldr	d7, [r3]
 801159a:	4629      	mov	r1, r5
 801159c:	ec53 2b17 	vmov	r2, r3, d7
 80115a0:	eeb0 9a47 	vmov.f32	s18, s14
 80115a4:	eef0 9a67 	vmov.f32	s19, s15
 80115a8:	4682      	mov	sl, r0
 80115aa:	f7ee fe6d 	bl	8000288 <__aeabi_dsub>
 80115ae:	4652      	mov	r2, sl
 80115b0:	4606      	mov	r6, r0
 80115b2:	460f      	mov	r7, r1
 80115b4:	462b      	mov	r3, r5
 80115b6:	ec51 0b19 	vmov	r0, r1, d9
 80115ba:	f7ee fe67 	bl	800028c <__adddf3>
 80115be:	4602      	mov	r2, r0
 80115c0:	460b      	mov	r3, r1
 80115c2:	2000      	movs	r0, #0
 80115c4:	49bb      	ldr	r1, [pc, #748]	; (80118b4 <__ieee754_pow+0x76c>)
 80115c6:	f7ef f941 	bl	800084c <__aeabi_ddiv>
 80115ca:	ec41 0b1a 	vmov	d10, r0, r1
 80115ce:	4602      	mov	r2, r0
 80115d0:	460b      	mov	r3, r1
 80115d2:	4630      	mov	r0, r6
 80115d4:	4639      	mov	r1, r7
 80115d6:	f7ef f80f 	bl	80005f8 <__aeabi_dmul>
 80115da:	2300      	movs	r3, #0
 80115dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80115e0:	9302      	str	r3, [sp, #8]
 80115e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80115e6:	46ab      	mov	fp, r5
 80115e8:	106d      	asrs	r5, r5, #1
 80115ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80115ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80115f2:	ec41 0b18 	vmov	d8, r0, r1
 80115f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80115fa:	2200      	movs	r2, #0
 80115fc:	4640      	mov	r0, r8
 80115fe:	4649      	mov	r1, r9
 8011600:	4614      	mov	r4, r2
 8011602:	461d      	mov	r5, r3
 8011604:	f7ee fff8 	bl	80005f8 <__aeabi_dmul>
 8011608:	4602      	mov	r2, r0
 801160a:	460b      	mov	r3, r1
 801160c:	4630      	mov	r0, r6
 801160e:	4639      	mov	r1, r7
 8011610:	f7ee fe3a 	bl	8000288 <__aeabi_dsub>
 8011614:	ec53 2b19 	vmov	r2, r3, d9
 8011618:	4606      	mov	r6, r0
 801161a:	460f      	mov	r7, r1
 801161c:	4620      	mov	r0, r4
 801161e:	4629      	mov	r1, r5
 8011620:	f7ee fe32 	bl	8000288 <__aeabi_dsub>
 8011624:	4602      	mov	r2, r0
 8011626:	460b      	mov	r3, r1
 8011628:	4650      	mov	r0, sl
 801162a:	4659      	mov	r1, fp
 801162c:	f7ee fe2c 	bl	8000288 <__aeabi_dsub>
 8011630:	4642      	mov	r2, r8
 8011632:	464b      	mov	r3, r9
 8011634:	f7ee ffe0 	bl	80005f8 <__aeabi_dmul>
 8011638:	4602      	mov	r2, r0
 801163a:	460b      	mov	r3, r1
 801163c:	4630      	mov	r0, r6
 801163e:	4639      	mov	r1, r7
 8011640:	f7ee fe22 	bl	8000288 <__aeabi_dsub>
 8011644:	ec53 2b1a 	vmov	r2, r3, d10
 8011648:	f7ee ffd6 	bl	80005f8 <__aeabi_dmul>
 801164c:	ec53 2b18 	vmov	r2, r3, d8
 8011650:	ec41 0b19 	vmov	d9, r0, r1
 8011654:	ec51 0b18 	vmov	r0, r1, d8
 8011658:	f7ee ffce 	bl	80005f8 <__aeabi_dmul>
 801165c:	a37c      	add	r3, pc, #496	; (adr r3, 8011850 <__ieee754_pow+0x708>)
 801165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011662:	4604      	mov	r4, r0
 8011664:	460d      	mov	r5, r1
 8011666:	f7ee ffc7 	bl	80005f8 <__aeabi_dmul>
 801166a:	a37b      	add	r3, pc, #492	; (adr r3, 8011858 <__ieee754_pow+0x710>)
 801166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011670:	f7ee fe0c 	bl	800028c <__adddf3>
 8011674:	4622      	mov	r2, r4
 8011676:	462b      	mov	r3, r5
 8011678:	f7ee ffbe 	bl	80005f8 <__aeabi_dmul>
 801167c:	a378      	add	r3, pc, #480	; (adr r3, 8011860 <__ieee754_pow+0x718>)
 801167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011682:	f7ee fe03 	bl	800028c <__adddf3>
 8011686:	4622      	mov	r2, r4
 8011688:	462b      	mov	r3, r5
 801168a:	f7ee ffb5 	bl	80005f8 <__aeabi_dmul>
 801168e:	a376      	add	r3, pc, #472	; (adr r3, 8011868 <__ieee754_pow+0x720>)
 8011690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011694:	f7ee fdfa 	bl	800028c <__adddf3>
 8011698:	4622      	mov	r2, r4
 801169a:	462b      	mov	r3, r5
 801169c:	f7ee ffac 	bl	80005f8 <__aeabi_dmul>
 80116a0:	a373      	add	r3, pc, #460	; (adr r3, 8011870 <__ieee754_pow+0x728>)
 80116a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a6:	f7ee fdf1 	bl	800028c <__adddf3>
 80116aa:	4622      	mov	r2, r4
 80116ac:	462b      	mov	r3, r5
 80116ae:	f7ee ffa3 	bl	80005f8 <__aeabi_dmul>
 80116b2:	a371      	add	r3, pc, #452	; (adr r3, 8011878 <__ieee754_pow+0x730>)
 80116b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b8:	f7ee fde8 	bl	800028c <__adddf3>
 80116bc:	4622      	mov	r2, r4
 80116be:	4606      	mov	r6, r0
 80116c0:	460f      	mov	r7, r1
 80116c2:	462b      	mov	r3, r5
 80116c4:	4620      	mov	r0, r4
 80116c6:	4629      	mov	r1, r5
 80116c8:	f7ee ff96 	bl	80005f8 <__aeabi_dmul>
 80116cc:	4602      	mov	r2, r0
 80116ce:	460b      	mov	r3, r1
 80116d0:	4630      	mov	r0, r6
 80116d2:	4639      	mov	r1, r7
 80116d4:	f7ee ff90 	bl	80005f8 <__aeabi_dmul>
 80116d8:	4642      	mov	r2, r8
 80116da:	4604      	mov	r4, r0
 80116dc:	460d      	mov	r5, r1
 80116de:	464b      	mov	r3, r9
 80116e0:	ec51 0b18 	vmov	r0, r1, d8
 80116e4:	f7ee fdd2 	bl	800028c <__adddf3>
 80116e8:	ec53 2b19 	vmov	r2, r3, d9
 80116ec:	f7ee ff84 	bl	80005f8 <__aeabi_dmul>
 80116f0:	4622      	mov	r2, r4
 80116f2:	462b      	mov	r3, r5
 80116f4:	f7ee fdca 	bl	800028c <__adddf3>
 80116f8:	4642      	mov	r2, r8
 80116fa:	4682      	mov	sl, r0
 80116fc:	468b      	mov	fp, r1
 80116fe:	464b      	mov	r3, r9
 8011700:	4640      	mov	r0, r8
 8011702:	4649      	mov	r1, r9
 8011704:	f7ee ff78 	bl	80005f8 <__aeabi_dmul>
 8011708:	4b6b      	ldr	r3, [pc, #428]	; (80118b8 <__ieee754_pow+0x770>)
 801170a:	2200      	movs	r2, #0
 801170c:	4606      	mov	r6, r0
 801170e:	460f      	mov	r7, r1
 8011710:	f7ee fdbc 	bl	800028c <__adddf3>
 8011714:	4652      	mov	r2, sl
 8011716:	465b      	mov	r3, fp
 8011718:	f7ee fdb8 	bl	800028c <__adddf3>
 801171c:	2000      	movs	r0, #0
 801171e:	4604      	mov	r4, r0
 8011720:	460d      	mov	r5, r1
 8011722:	4602      	mov	r2, r0
 8011724:	460b      	mov	r3, r1
 8011726:	4640      	mov	r0, r8
 8011728:	4649      	mov	r1, r9
 801172a:	f7ee ff65 	bl	80005f8 <__aeabi_dmul>
 801172e:	4b62      	ldr	r3, [pc, #392]	; (80118b8 <__ieee754_pow+0x770>)
 8011730:	4680      	mov	r8, r0
 8011732:	4689      	mov	r9, r1
 8011734:	2200      	movs	r2, #0
 8011736:	4620      	mov	r0, r4
 8011738:	4629      	mov	r1, r5
 801173a:	f7ee fda5 	bl	8000288 <__aeabi_dsub>
 801173e:	4632      	mov	r2, r6
 8011740:	463b      	mov	r3, r7
 8011742:	f7ee fda1 	bl	8000288 <__aeabi_dsub>
 8011746:	4602      	mov	r2, r0
 8011748:	460b      	mov	r3, r1
 801174a:	4650      	mov	r0, sl
 801174c:	4659      	mov	r1, fp
 801174e:	f7ee fd9b 	bl	8000288 <__aeabi_dsub>
 8011752:	ec53 2b18 	vmov	r2, r3, d8
 8011756:	f7ee ff4f 	bl	80005f8 <__aeabi_dmul>
 801175a:	4622      	mov	r2, r4
 801175c:	4606      	mov	r6, r0
 801175e:	460f      	mov	r7, r1
 8011760:	462b      	mov	r3, r5
 8011762:	ec51 0b19 	vmov	r0, r1, d9
 8011766:	f7ee ff47 	bl	80005f8 <__aeabi_dmul>
 801176a:	4602      	mov	r2, r0
 801176c:	460b      	mov	r3, r1
 801176e:	4630      	mov	r0, r6
 8011770:	4639      	mov	r1, r7
 8011772:	f7ee fd8b 	bl	800028c <__adddf3>
 8011776:	4606      	mov	r6, r0
 8011778:	460f      	mov	r7, r1
 801177a:	4602      	mov	r2, r0
 801177c:	460b      	mov	r3, r1
 801177e:	4640      	mov	r0, r8
 8011780:	4649      	mov	r1, r9
 8011782:	f7ee fd83 	bl	800028c <__adddf3>
 8011786:	a33e      	add	r3, pc, #248	; (adr r3, 8011880 <__ieee754_pow+0x738>)
 8011788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801178c:	2000      	movs	r0, #0
 801178e:	4604      	mov	r4, r0
 8011790:	460d      	mov	r5, r1
 8011792:	f7ee ff31 	bl	80005f8 <__aeabi_dmul>
 8011796:	4642      	mov	r2, r8
 8011798:	ec41 0b18 	vmov	d8, r0, r1
 801179c:	464b      	mov	r3, r9
 801179e:	4620      	mov	r0, r4
 80117a0:	4629      	mov	r1, r5
 80117a2:	f7ee fd71 	bl	8000288 <__aeabi_dsub>
 80117a6:	4602      	mov	r2, r0
 80117a8:	460b      	mov	r3, r1
 80117aa:	4630      	mov	r0, r6
 80117ac:	4639      	mov	r1, r7
 80117ae:	f7ee fd6b 	bl	8000288 <__aeabi_dsub>
 80117b2:	a335      	add	r3, pc, #212	; (adr r3, 8011888 <__ieee754_pow+0x740>)
 80117b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b8:	f7ee ff1e 	bl	80005f8 <__aeabi_dmul>
 80117bc:	a334      	add	r3, pc, #208	; (adr r3, 8011890 <__ieee754_pow+0x748>)
 80117be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c2:	4606      	mov	r6, r0
 80117c4:	460f      	mov	r7, r1
 80117c6:	4620      	mov	r0, r4
 80117c8:	4629      	mov	r1, r5
 80117ca:	f7ee ff15 	bl	80005f8 <__aeabi_dmul>
 80117ce:	4602      	mov	r2, r0
 80117d0:	460b      	mov	r3, r1
 80117d2:	4630      	mov	r0, r6
 80117d4:	4639      	mov	r1, r7
 80117d6:	f7ee fd59 	bl	800028c <__adddf3>
 80117da:	9a07      	ldr	r2, [sp, #28]
 80117dc:	4b37      	ldr	r3, [pc, #220]	; (80118bc <__ieee754_pow+0x774>)
 80117de:	4413      	add	r3, r2
 80117e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e4:	f7ee fd52 	bl	800028c <__adddf3>
 80117e8:	4682      	mov	sl, r0
 80117ea:	9805      	ldr	r0, [sp, #20]
 80117ec:	468b      	mov	fp, r1
 80117ee:	f7ee fe99 	bl	8000524 <__aeabi_i2d>
 80117f2:	9a07      	ldr	r2, [sp, #28]
 80117f4:	4b32      	ldr	r3, [pc, #200]	; (80118c0 <__ieee754_pow+0x778>)
 80117f6:	4413      	add	r3, r2
 80117f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80117fc:	4606      	mov	r6, r0
 80117fe:	460f      	mov	r7, r1
 8011800:	4652      	mov	r2, sl
 8011802:	465b      	mov	r3, fp
 8011804:	ec51 0b18 	vmov	r0, r1, d8
 8011808:	f7ee fd40 	bl	800028c <__adddf3>
 801180c:	4642      	mov	r2, r8
 801180e:	464b      	mov	r3, r9
 8011810:	f7ee fd3c 	bl	800028c <__adddf3>
 8011814:	4632      	mov	r2, r6
 8011816:	463b      	mov	r3, r7
 8011818:	f7ee fd38 	bl	800028c <__adddf3>
 801181c:	2000      	movs	r0, #0
 801181e:	4632      	mov	r2, r6
 8011820:	463b      	mov	r3, r7
 8011822:	4604      	mov	r4, r0
 8011824:	460d      	mov	r5, r1
 8011826:	f7ee fd2f 	bl	8000288 <__aeabi_dsub>
 801182a:	4642      	mov	r2, r8
 801182c:	464b      	mov	r3, r9
 801182e:	f7ee fd2b 	bl	8000288 <__aeabi_dsub>
 8011832:	ec53 2b18 	vmov	r2, r3, d8
 8011836:	f7ee fd27 	bl	8000288 <__aeabi_dsub>
 801183a:	4602      	mov	r2, r0
 801183c:	460b      	mov	r3, r1
 801183e:	4650      	mov	r0, sl
 8011840:	4659      	mov	r1, fp
 8011842:	e610      	b.n	8011466 <__ieee754_pow+0x31e>
 8011844:	2401      	movs	r4, #1
 8011846:	e6a1      	b.n	801158c <__ieee754_pow+0x444>
 8011848:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011898 <__ieee754_pow+0x750>
 801184c:	e617      	b.n	801147e <__ieee754_pow+0x336>
 801184e:	bf00      	nop
 8011850:	4a454eef 	.word	0x4a454eef
 8011854:	3fca7e28 	.word	0x3fca7e28
 8011858:	93c9db65 	.word	0x93c9db65
 801185c:	3fcd864a 	.word	0x3fcd864a
 8011860:	a91d4101 	.word	0xa91d4101
 8011864:	3fd17460 	.word	0x3fd17460
 8011868:	518f264d 	.word	0x518f264d
 801186c:	3fd55555 	.word	0x3fd55555
 8011870:	db6fabff 	.word	0xdb6fabff
 8011874:	3fdb6db6 	.word	0x3fdb6db6
 8011878:	33333303 	.word	0x33333303
 801187c:	3fe33333 	.word	0x3fe33333
 8011880:	e0000000 	.word	0xe0000000
 8011884:	3feec709 	.word	0x3feec709
 8011888:	dc3a03fd 	.word	0xdc3a03fd
 801188c:	3feec709 	.word	0x3feec709
 8011890:	145b01f5 	.word	0x145b01f5
 8011894:	be3e2fe0 	.word	0xbe3e2fe0
 8011898:	00000000 	.word	0x00000000
 801189c:	3ff00000 	.word	0x3ff00000
 80118a0:	7ff00000 	.word	0x7ff00000
 80118a4:	43400000 	.word	0x43400000
 80118a8:	0003988e 	.word	0x0003988e
 80118ac:	000bb679 	.word	0x000bb679
 80118b0:	080124d8 	.word	0x080124d8
 80118b4:	3ff00000 	.word	0x3ff00000
 80118b8:	40080000 	.word	0x40080000
 80118bc:	080124f8 	.word	0x080124f8
 80118c0:	080124e8 	.word	0x080124e8
 80118c4:	a3b5      	add	r3, pc, #724	; (adr r3, 8011b9c <__ieee754_pow+0xa54>)
 80118c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ca:	4640      	mov	r0, r8
 80118cc:	4649      	mov	r1, r9
 80118ce:	f7ee fcdd 	bl	800028c <__adddf3>
 80118d2:	4622      	mov	r2, r4
 80118d4:	ec41 0b1a 	vmov	d10, r0, r1
 80118d8:	462b      	mov	r3, r5
 80118da:	4630      	mov	r0, r6
 80118dc:	4639      	mov	r1, r7
 80118de:	f7ee fcd3 	bl	8000288 <__aeabi_dsub>
 80118e2:	4602      	mov	r2, r0
 80118e4:	460b      	mov	r3, r1
 80118e6:	ec51 0b1a 	vmov	r0, r1, d10
 80118ea:	f7ef f915 	bl	8000b18 <__aeabi_dcmpgt>
 80118ee:	2800      	cmp	r0, #0
 80118f0:	f47f ae04 	bne.w	80114fc <__ieee754_pow+0x3b4>
 80118f4:	4aa4      	ldr	r2, [pc, #656]	; (8011b88 <__ieee754_pow+0xa40>)
 80118f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80118fa:	4293      	cmp	r3, r2
 80118fc:	f340 8108 	ble.w	8011b10 <__ieee754_pow+0x9c8>
 8011900:	151b      	asrs	r3, r3, #20
 8011902:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011906:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801190a:	fa4a f303 	asr.w	r3, sl, r3
 801190e:	445b      	add	r3, fp
 8011910:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011914:	4e9d      	ldr	r6, [pc, #628]	; (8011b8c <__ieee754_pow+0xa44>)
 8011916:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801191a:	4116      	asrs	r6, r2
 801191c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011920:	2000      	movs	r0, #0
 8011922:	ea23 0106 	bic.w	r1, r3, r6
 8011926:	f1c2 0214 	rsb	r2, r2, #20
 801192a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801192e:	fa4a fa02 	asr.w	sl, sl, r2
 8011932:	f1bb 0f00 	cmp.w	fp, #0
 8011936:	4602      	mov	r2, r0
 8011938:	460b      	mov	r3, r1
 801193a:	4620      	mov	r0, r4
 801193c:	4629      	mov	r1, r5
 801193e:	bfb8      	it	lt
 8011940:	f1ca 0a00 	rsblt	sl, sl, #0
 8011944:	f7ee fca0 	bl	8000288 <__aeabi_dsub>
 8011948:	ec41 0b19 	vmov	d9, r0, r1
 801194c:	4642      	mov	r2, r8
 801194e:	464b      	mov	r3, r9
 8011950:	ec51 0b19 	vmov	r0, r1, d9
 8011954:	f7ee fc9a 	bl	800028c <__adddf3>
 8011958:	a37b      	add	r3, pc, #492	; (adr r3, 8011b48 <__ieee754_pow+0xa00>)
 801195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801195e:	2000      	movs	r0, #0
 8011960:	4604      	mov	r4, r0
 8011962:	460d      	mov	r5, r1
 8011964:	f7ee fe48 	bl	80005f8 <__aeabi_dmul>
 8011968:	ec53 2b19 	vmov	r2, r3, d9
 801196c:	4606      	mov	r6, r0
 801196e:	460f      	mov	r7, r1
 8011970:	4620      	mov	r0, r4
 8011972:	4629      	mov	r1, r5
 8011974:	f7ee fc88 	bl	8000288 <__aeabi_dsub>
 8011978:	4602      	mov	r2, r0
 801197a:	460b      	mov	r3, r1
 801197c:	4640      	mov	r0, r8
 801197e:	4649      	mov	r1, r9
 8011980:	f7ee fc82 	bl	8000288 <__aeabi_dsub>
 8011984:	a372      	add	r3, pc, #456	; (adr r3, 8011b50 <__ieee754_pow+0xa08>)
 8011986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801198a:	f7ee fe35 	bl	80005f8 <__aeabi_dmul>
 801198e:	a372      	add	r3, pc, #456	; (adr r3, 8011b58 <__ieee754_pow+0xa10>)
 8011990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011994:	4680      	mov	r8, r0
 8011996:	4689      	mov	r9, r1
 8011998:	4620      	mov	r0, r4
 801199a:	4629      	mov	r1, r5
 801199c:	f7ee fe2c 	bl	80005f8 <__aeabi_dmul>
 80119a0:	4602      	mov	r2, r0
 80119a2:	460b      	mov	r3, r1
 80119a4:	4640      	mov	r0, r8
 80119a6:	4649      	mov	r1, r9
 80119a8:	f7ee fc70 	bl	800028c <__adddf3>
 80119ac:	4604      	mov	r4, r0
 80119ae:	460d      	mov	r5, r1
 80119b0:	4602      	mov	r2, r0
 80119b2:	460b      	mov	r3, r1
 80119b4:	4630      	mov	r0, r6
 80119b6:	4639      	mov	r1, r7
 80119b8:	f7ee fc68 	bl	800028c <__adddf3>
 80119bc:	4632      	mov	r2, r6
 80119be:	463b      	mov	r3, r7
 80119c0:	4680      	mov	r8, r0
 80119c2:	4689      	mov	r9, r1
 80119c4:	f7ee fc60 	bl	8000288 <__aeabi_dsub>
 80119c8:	4602      	mov	r2, r0
 80119ca:	460b      	mov	r3, r1
 80119cc:	4620      	mov	r0, r4
 80119ce:	4629      	mov	r1, r5
 80119d0:	f7ee fc5a 	bl	8000288 <__aeabi_dsub>
 80119d4:	4642      	mov	r2, r8
 80119d6:	4606      	mov	r6, r0
 80119d8:	460f      	mov	r7, r1
 80119da:	464b      	mov	r3, r9
 80119dc:	4640      	mov	r0, r8
 80119de:	4649      	mov	r1, r9
 80119e0:	f7ee fe0a 	bl	80005f8 <__aeabi_dmul>
 80119e4:	a35e      	add	r3, pc, #376	; (adr r3, 8011b60 <__ieee754_pow+0xa18>)
 80119e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ea:	4604      	mov	r4, r0
 80119ec:	460d      	mov	r5, r1
 80119ee:	f7ee fe03 	bl	80005f8 <__aeabi_dmul>
 80119f2:	a35d      	add	r3, pc, #372	; (adr r3, 8011b68 <__ieee754_pow+0xa20>)
 80119f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f8:	f7ee fc46 	bl	8000288 <__aeabi_dsub>
 80119fc:	4622      	mov	r2, r4
 80119fe:	462b      	mov	r3, r5
 8011a00:	f7ee fdfa 	bl	80005f8 <__aeabi_dmul>
 8011a04:	a35a      	add	r3, pc, #360	; (adr r3, 8011b70 <__ieee754_pow+0xa28>)
 8011a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a0a:	f7ee fc3f 	bl	800028c <__adddf3>
 8011a0e:	4622      	mov	r2, r4
 8011a10:	462b      	mov	r3, r5
 8011a12:	f7ee fdf1 	bl	80005f8 <__aeabi_dmul>
 8011a16:	a358      	add	r3, pc, #352	; (adr r3, 8011b78 <__ieee754_pow+0xa30>)
 8011a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a1c:	f7ee fc34 	bl	8000288 <__aeabi_dsub>
 8011a20:	4622      	mov	r2, r4
 8011a22:	462b      	mov	r3, r5
 8011a24:	f7ee fde8 	bl	80005f8 <__aeabi_dmul>
 8011a28:	a355      	add	r3, pc, #340	; (adr r3, 8011b80 <__ieee754_pow+0xa38>)
 8011a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a2e:	f7ee fc2d 	bl	800028c <__adddf3>
 8011a32:	4622      	mov	r2, r4
 8011a34:	462b      	mov	r3, r5
 8011a36:	f7ee fddf 	bl	80005f8 <__aeabi_dmul>
 8011a3a:	4602      	mov	r2, r0
 8011a3c:	460b      	mov	r3, r1
 8011a3e:	4640      	mov	r0, r8
 8011a40:	4649      	mov	r1, r9
 8011a42:	f7ee fc21 	bl	8000288 <__aeabi_dsub>
 8011a46:	4604      	mov	r4, r0
 8011a48:	460d      	mov	r5, r1
 8011a4a:	4602      	mov	r2, r0
 8011a4c:	460b      	mov	r3, r1
 8011a4e:	4640      	mov	r0, r8
 8011a50:	4649      	mov	r1, r9
 8011a52:	f7ee fdd1 	bl	80005f8 <__aeabi_dmul>
 8011a56:	2200      	movs	r2, #0
 8011a58:	ec41 0b19 	vmov	d9, r0, r1
 8011a5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011a60:	4620      	mov	r0, r4
 8011a62:	4629      	mov	r1, r5
 8011a64:	f7ee fc10 	bl	8000288 <__aeabi_dsub>
 8011a68:	4602      	mov	r2, r0
 8011a6a:	460b      	mov	r3, r1
 8011a6c:	ec51 0b19 	vmov	r0, r1, d9
 8011a70:	f7ee feec 	bl	800084c <__aeabi_ddiv>
 8011a74:	4632      	mov	r2, r6
 8011a76:	4604      	mov	r4, r0
 8011a78:	460d      	mov	r5, r1
 8011a7a:	463b      	mov	r3, r7
 8011a7c:	4640      	mov	r0, r8
 8011a7e:	4649      	mov	r1, r9
 8011a80:	f7ee fdba 	bl	80005f8 <__aeabi_dmul>
 8011a84:	4632      	mov	r2, r6
 8011a86:	463b      	mov	r3, r7
 8011a88:	f7ee fc00 	bl	800028c <__adddf3>
 8011a8c:	4602      	mov	r2, r0
 8011a8e:	460b      	mov	r3, r1
 8011a90:	4620      	mov	r0, r4
 8011a92:	4629      	mov	r1, r5
 8011a94:	f7ee fbf8 	bl	8000288 <__aeabi_dsub>
 8011a98:	4642      	mov	r2, r8
 8011a9a:	464b      	mov	r3, r9
 8011a9c:	f7ee fbf4 	bl	8000288 <__aeabi_dsub>
 8011aa0:	460b      	mov	r3, r1
 8011aa2:	4602      	mov	r2, r0
 8011aa4:	493a      	ldr	r1, [pc, #232]	; (8011b90 <__ieee754_pow+0xa48>)
 8011aa6:	2000      	movs	r0, #0
 8011aa8:	f7ee fbee 	bl	8000288 <__aeabi_dsub>
 8011aac:	ec41 0b10 	vmov	d0, r0, r1
 8011ab0:	ee10 3a90 	vmov	r3, s1
 8011ab4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011ab8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011abc:	da2b      	bge.n	8011b16 <__ieee754_pow+0x9ce>
 8011abe:	4650      	mov	r0, sl
 8011ac0:	f000 f95e 	bl	8011d80 <scalbn>
 8011ac4:	ec51 0b10 	vmov	r0, r1, d0
 8011ac8:	ec53 2b18 	vmov	r2, r3, d8
 8011acc:	f7ff bbed 	b.w	80112aa <__ieee754_pow+0x162>
 8011ad0:	4b30      	ldr	r3, [pc, #192]	; (8011b94 <__ieee754_pow+0xa4c>)
 8011ad2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011ad6:	429e      	cmp	r6, r3
 8011ad8:	f77f af0c 	ble.w	80118f4 <__ieee754_pow+0x7ac>
 8011adc:	4b2e      	ldr	r3, [pc, #184]	; (8011b98 <__ieee754_pow+0xa50>)
 8011ade:	440b      	add	r3, r1
 8011ae0:	4303      	orrs	r3, r0
 8011ae2:	d009      	beq.n	8011af8 <__ieee754_pow+0x9b0>
 8011ae4:	ec51 0b18 	vmov	r0, r1, d8
 8011ae8:	2200      	movs	r2, #0
 8011aea:	2300      	movs	r3, #0
 8011aec:	f7ee fff6 	bl	8000adc <__aeabi_dcmplt>
 8011af0:	3800      	subs	r0, #0
 8011af2:	bf18      	it	ne
 8011af4:	2001      	movne	r0, #1
 8011af6:	e447      	b.n	8011388 <__ieee754_pow+0x240>
 8011af8:	4622      	mov	r2, r4
 8011afa:	462b      	mov	r3, r5
 8011afc:	f7ee fbc4 	bl	8000288 <__aeabi_dsub>
 8011b00:	4642      	mov	r2, r8
 8011b02:	464b      	mov	r3, r9
 8011b04:	f7ee fffe 	bl	8000b04 <__aeabi_dcmpge>
 8011b08:	2800      	cmp	r0, #0
 8011b0a:	f43f aef3 	beq.w	80118f4 <__ieee754_pow+0x7ac>
 8011b0e:	e7e9      	b.n	8011ae4 <__ieee754_pow+0x99c>
 8011b10:	f04f 0a00 	mov.w	sl, #0
 8011b14:	e71a      	b.n	801194c <__ieee754_pow+0x804>
 8011b16:	ec51 0b10 	vmov	r0, r1, d0
 8011b1a:	4619      	mov	r1, r3
 8011b1c:	e7d4      	b.n	8011ac8 <__ieee754_pow+0x980>
 8011b1e:	491c      	ldr	r1, [pc, #112]	; (8011b90 <__ieee754_pow+0xa48>)
 8011b20:	2000      	movs	r0, #0
 8011b22:	f7ff bb30 	b.w	8011186 <__ieee754_pow+0x3e>
 8011b26:	2000      	movs	r0, #0
 8011b28:	2100      	movs	r1, #0
 8011b2a:	f7ff bb2c 	b.w	8011186 <__ieee754_pow+0x3e>
 8011b2e:	4630      	mov	r0, r6
 8011b30:	4639      	mov	r1, r7
 8011b32:	f7ff bb28 	b.w	8011186 <__ieee754_pow+0x3e>
 8011b36:	9204      	str	r2, [sp, #16]
 8011b38:	f7ff bb7a 	b.w	8011230 <__ieee754_pow+0xe8>
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	f7ff bb64 	b.w	801120a <__ieee754_pow+0xc2>
 8011b42:	bf00      	nop
 8011b44:	f3af 8000 	nop.w
 8011b48:	00000000 	.word	0x00000000
 8011b4c:	3fe62e43 	.word	0x3fe62e43
 8011b50:	fefa39ef 	.word	0xfefa39ef
 8011b54:	3fe62e42 	.word	0x3fe62e42
 8011b58:	0ca86c39 	.word	0x0ca86c39
 8011b5c:	be205c61 	.word	0xbe205c61
 8011b60:	72bea4d0 	.word	0x72bea4d0
 8011b64:	3e663769 	.word	0x3e663769
 8011b68:	c5d26bf1 	.word	0xc5d26bf1
 8011b6c:	3ebbbd41 	.word	0x3ebbbd41
 8011b70:	af25de2c 	.word	0xaf25de2c
 8011b74:	3f11566a 	.word	0x3f11566a
 8011b78:	16bebd93 	.word	0x16bebd93
 8011b7c:	3f66c16c 	.word	0x3f66c16c
 8011b80:	5555553e 	.word	0x5555553e
 8011b84:	3fc55555 	.word	0x3fc55555
 8011b88:	3fe00000 	.word	0x3fe00000
 8011b8c:	000fffff 	.word	0x000fffff
 8011b90:	3ff00000 	.word	0x3ff00000
 8011b94:	4090cbff 	.word	0x4090cbff
 8011b98:	3f6f3400 	.word	0x3f6f3400
 8011b9c:	652b82fe 	.word	0x652b82fe
 8011ba0:	3c971547 	.word	0x3c971547

08011ba4 <__ieee754_sqrt>:
 8011ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba8:	ec55 4b10 	vmov	r4, r5, d0
 8011bac:	4e55      	ldr	r6, [pc, #340]	; (8011d04 <__ieee754_sqrt+0x160>)
 8011bae:	43ae      	bics	r6, r5
 8011bb0:	ee10 0a10 	vmov	r0, s0
 8011bb4:	ee10 3a10 	vmov	r3, s0
 8011bb8:	462a      	mov	r2, r5
 8011bba:	4629      	mov	r1, r5
 8011bbc:	d110      	bne.n	8011be0 <__ieee754_sqrt+0x3c>
 8011bbe:	ee10 2a10 	vmov	r2, s0
 8011bc2:	462b      	mov	r3, r5
 8011bc4:	f7ee fd18 	bl	80005f8 <__aeabi_dmul>
 8011bc8:	4602      	mov	r2, r0
 8011bca:	460b      	mov	r3, r1
 8011bcc:	4620      	mov	r0, r4
 8011bce:	4629      	mov	r1, r5
 8011bd0:	f7ee fb5c 	bl	800028c <__adddf3>
 8011bd4:	4604      	mov	r4, r0
 8011bd6:	460d      	mov	r5, r1
 8011bd8:	ec45 4b10 	vmov	d0, r4, r5
 8011bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011be0:	2d00      	cmp	r5, #0
 8011be2:	dc10      	bgt.n	8011c06 <__ieee754_sqrt+0x62>
 8011be4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011be8:	4330      	orrs	r0, r6
 8011bea:	d0f5      	beq.n	8011bd8 <__ieee754_sqrt+0x34>
 8011bec:	b15d      	cbz	r5, 8011c06 <__ieee754_sqrt+0x62>
 8011bee:	ee10 2a10 	vmov	r2, s0
 8011bf2:	462b      	mov	r3, r5
 8011bf4:	ee10 0a10 	vmov	r0, s0
 8011bf8:	f7ee fb46 	bl	8000288 <__aeabi_dsub>
 8011bfc:	4602      	mov	r2, r0
 8011bfe:	460b      	mov	r3, r1
 8011c00:	f7ee fe24 	bl	800084c <__aeabi_ddiv>
 8011c04:	e7e6      	b.n	8011bd4 <__ieee754_sqrt+0x30>
 8011c06:	1512      	asrs	r2, r2, #20
 8011c08:	d074      	beq.n	8011cf4 <__ieee754_sqrt+0x150>
 8011c0a:	07d4      	lsls	r4, r2, #31
 8011c0c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011c10:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8011c14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8011c18:	bf5e      	ittt	pl
 8011c1a:	0fda      	lsrpl	r2, r3, #31
 8011c1c:	005b      	lslpl	r3, r3, #1
 8011c1e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8011c22:	2400      	movs	r4, #0
 8011c24:	0fda      	lsrs	r2, r3, #31
 8011c26:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8011c2a:	107f      	asrs	r7, r7, #1
 8011c2c:	005b      	lsls	r3, r3, #1
 8011c2e:	2516      	movs	r5, #22
 8011c30:	4620      	mov	r0, r4
 8011c32:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011c36:	1886      	adds	r6, r0, r2
 8011c38:	428e      	cmp	r6, r1
 8011c3a:	bfde      	ittt	le
 8011c3c:	1b89      	suble	r1, r1, r6
 8011c3e:	18b0      	addle	r0, r6, r2
 8011c40:	18a4      	addle	r4, r4, r2
 8011c42:	0049      	lsls	r1, r1, #1
 8011c44:	3d01      	subs	r5, #1
 8011c46:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8011c4a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011c4e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011c52:	d1f0      	bne.n	8011c36 <__ieee754_sqrt+0x92>
 8011c54:	462a      	mov	r2, r5
 8011c56:	f04f 0e20 	mov.w	lr, #32
 8011c5a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011c5e:	4281      	cmp	r1, r0
 8011c60:	eb06 0c05 	add.w	ip, r6, r5
 8011c64:	dc02      	bgt.n	8011c6c <__ieee754_sqrt+0xc8>
 8011c66:	d113      	bne.n	8011c90 <__ieee754_sqrt+0xec>
 8011c68:	459c      	cmp	ip, r3
 8011c6a:	d811      	bhi.n	8011c90 <__ieee754_sqrt+0xec>
 8011c6c:	f1bc 0f00 	cmp.w	ip, #0
 8011c70:	eb0c 0506 	add.w	r5, ip, r6
 8011c74:	da43      	bge.n	8011cfe <__ieee754_sqrt+0x15a>
 8011c76:	2d00      	cmp	r5, #0
 8011c78:	db41      	blt.n	8011cfe <__ieee754_sqrt+0x15a>
 8011c7a:	f100 0801 	add.w	r8, r0, #1
 8011c7e:	1a09      	subs	r1, r1, r0
 8011c80:	459c      	cmp	ip, r3
 8011c82:	bf88      	it	hi
 8011c84:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8011c88:	eba3 030c 	sub.w	r3, r3, ip
 8011c8c:	4432      	add	r2, r6
 8011c8e:	4640      	mov	r0, r8
 8011c90:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8011c94:	f1be 0e01 	subs.w	lr, lr, #1
 8011c98:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8011c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011ca0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011ca4:	d1db      	bne.n	8011c5e <__ieee754_sqrt+0xba>
 8011ca6:	430b      	orrs	r3, r1
 8011ca8:	d006      	beq.n	8011cb8 <__ieee754_sqrt+0x114>
 8011caa:	1c50      	adds	r0, r2, #1
 8011cac:	bf13      	iteet	ne
 8011cae:	3201      	addne	r2, #1
 8011cb0:	3401      	addeq	r4, #1
 8011cb2:	4672      	moveq	r2, lr
 8011cb4:	f022 0201 	bicne.w	r2, r2, #1
 8011cb8:	1063      	asrs	r3, r4, #1
 8011cba:	0852      	lsrs	r2, r2, #1
 8011cbc:	07e1      	lsls	r1, r4, #31
 8011cbe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011cc2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8011cc6:	bf48      	it	mi
 8011cc8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8011ccc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8011cd0:	4614      	mov	r4, r2
 8011cd2:	e781      	b.n	8011bd8 <__ieee754_sqrt+0x34>
 8011cd4:	0ad9      	lsrs	r1, r3, #11
 8011cd6:	3815      	subs	r0, #21
 8011cd8:	055b      	lsls	r3, r3, #21
 8011cda:	2900      	cmp	r1, #0
 8011cdc:	d0fa      	beq.n	8011cd4 <__ieee754_sqrt+0x130>
 8011cde:	02cd      	lsls	r5, r1, #11
 8011ce0:	d50a      	bpl.n	8011cf8 <__ieee754_sqrt+0x154>
 8011ce2:	f1c2 0420 	rsb	r4, r2, #32
 8011ce6:	fa23 f404 	lsr.w	r4, r3, r4
 8011cea:	1e55      	subs	r5, r2, #1
 8011cec:	4093      	lsls	r3, r2
 8011cee:	4321      	orrs	r1, r4
 8011cf0:	1b42      	subs	r2, r0, r5
 8011cf2:	e78a      	b.n	8011c0a <__ieee754_sqrt+0x66>
 8011cf4:	4610      	mov	r0, r2
 8011cf6:	e7f0      	b.n	8011cda <__ieee754_sqrt+0x136>
 8011cf8:	0049      	lsls	r1, r1, #1
 8011cfa:	3201      	adds	r2, #1
 8011cfc:	e7ef      	b.n	8011cde <__ieee754_sqrt+0x13a>
 8011cfe:	4680      	mov	r8, r0
 8011d00:	e7bd      	b.n	8011c7e <__ieee754_sqrt+0xda>
 8011d02:	bf00      	nop
 8011d04:	7ff00000 	.word	0x7ff00000

08011d08 <with_errno>:
 8011d08:	b570      	push	{r4, r5, r6, lr}
 8011d0a:	4604      	mov	r4, r0
 8011d0c:	460d      	mov	r5, r1
 8011d0e:	4616      	mov	r6, r2
 8011d10:	f7fc f886 	bl	800de20 <__errno>
 8011d14:	4629      	mov	r1, r5
 8011d16:	6006      	str	r6, [r0, #0]
 8011d18:	4620      	mov	r0, r4
 8011d1a:	bd70      	pop	{r4, r5, r6, pc}

08011d1c <xflow>:
 8011d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d1e:	4614      	mov	r4, r2
 8011d20:	461d      	mov	r5, r3
 8011d22:	b108      	cbz	r0, 8011d28 <xflow+0xc>
 8011d24:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011d28:	e9cd 2300 	strd	r2, r3, [sp]
 8011d2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d30:	4620      	mov	r0, r4
 8011d32:	4629      	mov	r1, r5
 8011d34:	f7ee fc60 	bl	80005f8 <__aeabi_dmul>
 8011d38:	2222      	movs	r2, #34	; 0x22
 8011d3a:	b003      	add	sp, #12
 8011d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d40:	f7ff bfe2 	b.w	8011d08 <with_errno>

08011d44 <__math_uflow>:
 8011d44:	b508      	push	{r3, lr}
 8011d46:	2200      	movs	r2, #0
 8011d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011d4c:	f7ff ffe6 	bl	8011d1c <xflow>
 8011d50:	ec41 0b10 	vmov	d0, r0, r1
 8011d54:	bd08      	pop	{r3, pc}

08011d56 <__math_oflow>:
 8011d56:	b508      	push	{r3, lr}
 8011d58:	2200      	movs	r2, #0
 8011d5a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011d5e:	f7ff ffdd 	bl	8011d1c <xflow>
 8011d62:	ec41 0b10 	vmov	d0, r0, r1
 8011d66:	bd08      	pop	{r3, pc}

08011d68 <finite>:
 8011d68:	b082      	sub	sp, #8
 8011d6a:	ed8d 0b00 	vstr	d0, [sp]
 8011d6e:	9801      	ldr	r0, [sp, #4]
 8011d70:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011d74:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011d78:	0fc0      	lsrs	r0, r0, #31
 8011d7a:	b002      	add	sp, #8
 8011d7c:	4770      	bx	lr
	...

08011d80 <scalbn>:
 8011d80:	b570      	push	{r4, r5, r6, lr}
 8011d82:	ec55 4b10 	vmov	r4, r5, d0
 8011d86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011d8a:	4606      	mov	r6, r0
 8011d8c:	462b      	mov	r3, r5
 8011d8e:	b99a      	cbnz	r2, 8011db8 <scalbn+0x38>
 8011d90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011d94:	4323      	orrs	r3, r4
 8011d96:	d036      	beq.n	8011e06 <scalbn+0x86>
 8011d98:	4b39      	ldr	r3, [pc, #228]	; (8011e80 <scalbn+0x100>)
 8011d9a:	4629      	mov	r1, r5
 8011d9c:	ee10 0a10 	vmov	r0, s0
 8011da0:	2200      	movs	r2, #0
 8011da2:	f7ee fc29 	bl	80005f8 <__aeabi_dmul>
 8011da6:	4b37      	ldr	r3, [pc, #220]	; (8011e84 <scalbn+0x104>)
 8011da8:	429e      	cmp	r6, r3
 8011daa:	4604      	mov	r4, r0
 8011dac:	460d      	mov	r5, r1
 8011dae:	da10      	bge.n	8011dd2 <scalbn+0x52>
 8011db0:	a32b      	add	r3, pc, #172	; (adr r3, 8011e60 <scalbn+0xe0>)
 8011db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db6:	e03a      	b.n	8011e2e <scalbn+0xae>
 8011db8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011dbc:	428a      	cmp	r2, r1
 8011dbe:	d10c      	bne.n	8011dda <scalbn+0x5a>
 8011dc0:	ee10 2a10 	vmov	r2, s0
 8011dc4:	4620      	mov	r0, r4
 8011dc6:	4629      	mov	r1, r5
 8011dc8:	f7ee fa60 	bl	800028c <__adddf3>
 8011dcc:	4604      	mov	r4, r0
 8011dce:	460d      	mov	r5, r1
 8011dd0:	e019      	b.n	8011e06 <scalbn+0x86>
 8011dd2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011dd6:	460b      	mov	r3, r1
 8011dd8:	3a36      	subs	r2, #54	; 0x36
 8011dda:	4432      	add	r2, r6
 8011ddc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011de0:	428a      	cmp	r2, r1
 8011de2:	dd08      	ble.n	8011df6 <scalbn+0x76>
 8011de4:	2d00      	cmp	r5, #0
 8011de6:	a120      	add	r1, pc, #128	; (adr r1, 8011e68 <scalbn+0xe8>)
 8011de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dec:	da1c      	bge.n	8011e28 <scalbn+0xa8>
 8011dee:	a120      	add	r1, pc, #128	; (adr r1, 8011e70 <scalbn+0xf0>)
 8011df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011df4:	e018      	b.n	8011e28 <scalbn+0xa8>
 8011df6:	2a00      	cmp	r2, #0
 8011df8:	dd08      	ble.n	8011e0c <scalbn+0x8c>
 8011dfa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011dfe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011e02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011e06:	ec45 4b10 	vmov	d0, r4, r5
 8011e0a:	bd70      	pop	{r4, r5, r6, pc}
 8011e0c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011e10:	da19      	bge.n	8011e46 <scalbn+0xc6>
 8011e12:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011e16:	429e      	cmp	r6, r3
 8011e18:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011e1c:	dd0a      	ble.n	8011e34 <scalbn+0xb4>
 8011e1e:	a112      	add	r1, pc, #72	; (adr r1, 8011e68 <scalbn+0xe8>)
 8011e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d1e2      	bne.n	8011dee <scalbn+0x6e>
 8011e28:	a30f      	add	r3, pc, #60	; (adr r3, 8011e68 <scalbn+0xe8>)
 8011e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e2e:	f7ee fbe3 	bl	80005f8 <__aeabi_dmul>
 8011e32:	e7cb      	b.n	8011dcc <scalbn+0x4c>
 8011e34:	a10a      	add	r1, pc, #40	; (adr r1, 8011e60 <scalbn+0xe0>)
 8011e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d0b8      	beq.n	8011db0 <scalbn+0x30>
 8011e3e:	a10e      	add	r1, pc, #56	; (adr r1, 8011e78 <scalbn+0xf8>)
 8011e40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e44:	e7b4      	b.n	8011db0 <scalbn+0x30>
 8011e46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011e4a:	3236      	adds	r2, #54	; 0x36
 8011e4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011e50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011e54:	4620      	mov	r0, r4
 8011e56:	4b0c      	ldr	r3, [pc, #48]	; (8011e88 <scalbn+0x108>)
 8011e58:	2200      	movs	r2, #0
 8011e5a:	e7e8      	b.n	8011e2e <scalbn+0xae>
 8011e5c:	f3af 8000 	nop.w
 8011e60:	c2f8f359 	.word	0xc2f8f359
 8011e64:	01a56e1f 	.word	0x01a56e1f
 8011e68:	8800759c 	.word	0x8800759c
 8011e6c:	7e37e43c 	.word	0x7e37e43c
 8011e70:	8800759c 	.word	0x8800759c
 8011e74:	fe37e43c 	.word	0xfe37e43c
 8011e78:	c2f8f359 	.word	0xc2f8f359
 8011e7c:	81a56e1f 	.word	0x81a56e1f
 8011e80:	43500000 	.word	0x43500000
 8011e84:	ffff3cb0 	.word	0xffff3cb0
 8011e88:	3c900000 	.word	0x3c900000

08011e8c <_init>:
 8011e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e8e:	bf00      	nop
 8011e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e92:	bc08      	pop	{r3}
 8011e94:	469e      	mov	lr, r3
 8011e96:	4770      	bx	lr

08011e98 <_fini>:
 8011e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e9a:	bf00      	nop
 8011e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e9e:	bc08      	pop	{r3}
 8011ea0:	469e      	mov	lr, r3
 8011ea2:	4770      	bx	lr

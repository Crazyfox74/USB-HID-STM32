
LIS3DSH_RTOS3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  0800c260  0800c260  0001c260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c858  0800c858  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c858  0800c858  0001c858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c860  0800c860  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c860  0800c860  0001c860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c864  0800c864  0001c864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00005d44  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005f24  20005f24  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bd5b  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003975  00000000  00000000  0003bf6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001778  00000000  00000000  0003f8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001620  00000000  00000000  00041058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024818  00000000  00000000  00042678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019701  00000000  00000000  00066e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9635  00000000  00000000  00080591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00159bc6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007858  00000000  00000000  00159c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c244 	.word	0x0800c244

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c244 	.word	0x0800c244

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	ulStatsTimerTicks=0;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <configureTimerForRunTimeStats+0x14>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 8000eb6:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <configureTimerForRunTimeStats+0x18>)
 8000eb8:	f003 fa18 	bl	80042ec <HAL_TIM_Base_Start_IT>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200001fc 	.word	0x200001fc
 8000ec4:	20000318 	.word	0x20000318

08000ec8 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
	return ulStatsTimerTicks;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <getRunTimeCounterValue+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	200001fc 	.word	0x200001fc

08000ee0 <Acc_Inin>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Acc_Inin(void){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0

	uint8_t Reg_ctrl_4=0x20;
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	71fb      	strb	r3, [r7, #7]
	uint8_t acc_set=0x57;
 8000eea:	2357      	movs	r3, #87	; 0x57
 8000eec:	71bb      	strb	r3, [r7, #6]
	uint8_t Reg_ctrl_5=0x24;
 8000eee:	2324      	movs	r3, #36	; 0x24
 8000ef0:	717b      	strb	r3, [r7, #5]
	uint8_t acc_reg=0x00;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	713b      	strb	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2108      	movs	r1, #8
 8000efa:	4817      	ldr	r0, [pc, #92]	; (8000f58 <Acc_Inin+0x78>)
 8000efc:	f001 ff24 	bl	8002d48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, &Reg_ctrl_4, 1);
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	2201      	movs	r2, #1
 8000f04:	4619      	mov	r1, r3
 8000f06:	4815      	ldr	r0, [pc, #84]	; (8000f5c <Acc_Inin+0x7c>)
 8000f08:	f002 fc70 	bl	80037ec <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(&hspi1, &acc_set, 1);
 8000f0c:	1dbb      	adds	r3, r7, #6
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4619      	mov	r1, r3
 8000f12:	4812      	ldr	r0, [pc, #72]	; (8000f5c <Acc_Inin+0x7c>)
 8000f14:	f002 fc6a 	bl	80037ec <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2108      	movs	r1, #8
 8000f1c:	480e      	ldr	r0, [pc, #56]	; (8000f58 <Acc_Inin+0x78>)
 8000f1e:	f001 ff13 	bl	8002d48 <HAL_GPIO_WritePin>



    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2108      	movs	r1, #8
 8000f26:	480c      	ldr	r0, [pc, #48]	; (8000f58 <Acc_Inin+0x78>)
 8000f28:	f001 ff0e 	bl	8002d48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi1, &Reg_ctrl_5, 1);
 8000f2c:	1d7b      	adds	r3, r7, #5
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4619      	mov	r1, r3
 8000f32:	480a      	ldr	r0, [pc, #40]	; (8000f5c <Acc_Inin+0x7c>)
 8000f34:	f002 fc5a 	bl	80037ec <HAL_SPI_Transmit_DMA>
    HAL_SPI_Transmit_DMA(&hspi1, &acc_reg, 1);
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4807      	ldr	r0, [pc, #28]	; (8000f5c <Acc_Inin+0x7c>)
 8000f40:	f002 fc54 	bl	80037ec <HAL_SPI_Transmit_DMA>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2108      	movs	r1, #8
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <Acc_Inin+0x78>)
 8000f4a:	f001 fefd 	bl	8002d48 <HAL_GPIO_WritePin>
//HAL_SPI_Transmit(&hspi1, &Reg_ctrl_5, 1, 100);
//HAL_SPI_Transmit(&hspi1, &acc_reg, 1, 100);
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
*/

}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	20000200 	.word	0x20000200

08000f60 <Filter_Kalman>:


double Filter_Kalman(double val) { //функция фильтрации
 8000f60:	b480      	push	{r7}
 8000f62:	b08b      	sub	sp, #44	; 0x2c
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	ed87 0b00 	vstr	d0, [r7]

	float varVolt = 0.3; // среднее отклонение (расчет в программе)
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <Filter_Kalman+0x50>)
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
	float varProcess = 0.2; // скорость реакции на изменение (подбирается вручную)
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <Filter_Kalman+0x54>)
 8000f70:	623b      	str	r3, [r7, #32]
	float Pc = 0.0;
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
	float G = 0.0;
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
	float P = 1.0;
 8000f7e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f82:	617b      	str	r3, [r7, #20]
	float Xp = 0.0;
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
	float Zp = 0.0;
 8000f8a:	f04f 0300 	mov.w	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
	float Xe = 0.0;
 8000f90:	f04f 0300 	mov.w	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
Zp = Xp;
Xe = G*(val-Zp)+Xp; // "фильтрованное" значение

return(Xe);
*/
	return(val);
 8000f96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f9a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f9e:	eeb0 0a47 	vmov.f32	s0, s14
 8000fa2:	eef0 0a67 	vmov.f32	s1, s15
 8000fa6:	372c      	adds	r7, #44	; 0x2c
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	3e99999a 	.word	0x3e99999a
 8000fb4:	3e4ccccd 	.word	0x3e4ccccd

08000fb8 <LED_Proc>:

void LED_Proc(double angle_ax,double angle_ay){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	ed87 0b02 	vstr	d0, [r7, #8]
 8000fc2:	ed87 1b00 	vstr	d1, [r7]

	if(angle_ax>=10){
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	4b4e      	ldr	r3, [pc, #312]	; (8001104 <LED_Proc+0x14c>)
 8000fcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fd0:	f7ff fd98 	bl	8000b04 <__aeabi_dcmpge>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00b      	beq.n	8000ff2 <LED_Proc+0x3a>

		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe0:	4849      	ldr	r0, [pc, #292]	; (8001108 <LED_Proc+0x150>)
 8000fe2:	f001 feb1 	bl	8002d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fec:	4846      	ldr	r0, [pc, #280]	; (8001108 <LED_Proc+0x150>)
 8000fee:	f001 feab 	bl	8002d48 <HAL_GPIO_WritePin>
	}
	if (angle_ax<=-10){
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	4b45      	ldr	r3, [pc, #276]	; (800110c <LED_Proc+0x154>)
 8000ff8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ffc:	f7ff fd78 	bl	8000af0 <__aeabi_dcmple>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00b      	beq.n	800101e <LED_Proc+0x66>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800100c:	483e      	ldr	r0, [pc, #248]	; (8001108 <LED_Proc+0x150>)
 800100e:	f001 fe9b 	bl	8002d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001018:	483b      	ldr	r0, [pc, #236]	; (8001108 <LED_Proc+0x150>)
 800101a:	f001 fe95 	bl	8002d48 <HAL_GPIO_WritePin>
	}


	if ((angle_ax>-10) && (angle_ax<10))
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	4b3a      	ldr	r3, [pc, #232]	; (800110c <LED_Proc+0x154>)
 8001024:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001028:	f7ff fd76 	bl	8000b18 <__aeabi_dcmpgt>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d015      	beq.n	800105e <LED_Proc+0xa6>
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	4b33      	ldr	r3, [pc, #204]	; (8001104 <LED_Proc+0x14c>)
 8001038:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800103c:	f7ff fd4e 	bl	8000adc <__aeabi_dcmplt>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00b      	beq.n	800105e <LED_Proc+0xa6>
	{
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104c:	482e      	ldr	r0, [pc, #184]	; (8001108 <LED_Proc+0x150>)
 800104e:	f001 fe7b 	bl	8002d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001058:	482b      	ldr	r0, [pc, #172]	; (8001108 <LED_Proc+0x150>)
 800105a:	f001 fe75 	bl	8002d48 <HAL_GPIO_WritePin>

	}

	if(angle_ay>=10){
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	4b28      	ldr	r3, [pc, #160]	; (8001104 <LED_Proc+0x14c>)
 8001064:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001068:	f7ff fd4c 	bl	8000b04 <__aeabi_dcmpge>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00b      	beq.n	800108a <LED_Proc+0xd2>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin,GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001078:	4823      	ldr	r0, [pc, #140]	; (8001108 <LED_Proc+0x150>)
 800107a:	f001 fe65 	bl	8002d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin,GPIO_PIN_SET);
 800107e:	2201      	movs	r2, #1
 8001080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001084:	4820      	ldr	r0, [pc, #128]	; (8001108 <LED_Proc+0x150>)
 8001086:	f001 fe5f 	bl	8002d48 <HAL_GPIO_WritePin>
	}
	if (angle_ay<=-10){
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <LED_Proc+0x154>)
 8001090:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001094:	f7ff fd2c 	bl	8000af0 <__aeabi_dcmple>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00b      	beq.n	80010b6 <LED_Proc+0xfe>

		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin,GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a4:	4818      	ldr	r0, [pc, #96]	; (8001108 <LED_Proc+0x150>)
 80010a6:	f001 fe4f 	bl	8002d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin,GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b0:	4815      	ldr	r0, [pc, #84]	; (8001108 <LED_Proc+0x150>)
 80010b2:	f001 fe49 	bl	8002d48 <HAL_GPIO_WritePin>
	}


	if ((angle_ay>-10) && (angle_ay<10))
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <LED_Proc+0x154>)
 80010bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010c0:	f7ff fd2a 	bl	8000b18 <__aeabi_dcmpgt>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d100      	bne.n	80010cc <LED_Proc+0x114>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin,GPIO_PIN_RESET);

	}

}
 80010ca:	e016      	b.n	80010fa <LED_Proc+0x142>
	if ((angle_ay>-10) && (angle_ay<10))
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <LED_Proc+0x14c>)
 80010d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010d6:	f7ff fd01 	bl	8000adc <__aeabi_dcmplt>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d100      	bne.n	80010e2 <LED_Proc+0x12a>
}
 80010e0:	e00b      	b.n	80010fa <LED_Proc+0x142>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin,GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010e8:	4807      	ldr	r0, [pc, #28]	; (8001108 <LED_Proc+0x150>)
 80010ea:	f001 fe2d 	bl	8002d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin,GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <LED_Proc+0x150>)
 80010f6:	f001 fe27 	bl	8002d48 <HAL_GPIO_WritePin>
}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40240000 	.word	0x40240000
 8001108:	40020c00 	.word	0x40020c00
 800110c:	c0240000 	.word	0xc0240000

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001114:	f000 ffe8 	bl	80020e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001118:	f000 f882 	bl	8001220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111c:	f000 f9a6 	bl	800146c <MX_GPIO_Init>
  MX_DMA_Init();
 8001120:	f000 f97c 	bl	800141c <MX_DMA_Init>
  MX_SPI1_Init();
 8001124:	f000 f8e6 	bl	80012f4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001128:	f000 f94e 	bl	80013c8 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 800112c:	f000 f918 	bl	8001360 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Acc_Inin();
 8001130:	f7ff fed6 	bl	8000ee0 <Acc_Inin>
  sprintf(test, "test of Accselerometr\r\n");
 8001134:	4925      	ldr	r1, [pc, #148]	; (80011cc <main+0xbc>)
 8001136:	4826      	ldr	r0, [pc, #152]	; (80011d0 <main+0xc0>)
 8001138:	f007 fd2e 	bl	8008b98 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)&test, strlen(test), 100);
 800113c:	4824      	ldr	r0, [pc, #144]	; (80011d0 <main+0xc0>)
 800113e:	f7ff f847 	bl	80001d0 <strlen>
 8001142:	4603      	mov	r3, r0
 8001144:	b29a      	uxth	r2, r3
 8001146:	2364      	movs	r3, #100	; 0x64
 8001148:	4921      	ldr	r1, [pc, #132]	; (80011d0 <main+0xc0>)
 800114a:	4822      	ldr	r0, [pc, #136]	; (80011d4 <main+0xc4>)
 800114c:	f003 fbeb 	bl	8004926 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001150:	f003 ffa2 	bl	8005098 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of DataSem */
  DataSemHandle = osSemaphoreNew(1, 1, &DataSem_attributes);
 8001154:	4a20      	ldr	r2, [pc, #128]	; (80011d8 <main+0xc8>)
 8001156:	2101      	movs	r1, #1
 8001158:	2001      	movs	r0, #1
 800115a:	f004 f894 	bl	8005286 <osSemaphoreNew>
 800115e:	4603      	mov	r3, r0
 8001160:	4a1e      	ldr	r2, [pc, #120]	; (80011dc <main+0xcc>)
 8001162:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QUEUE_DATA */
  QUEUE_DATAHandle = osMessageQueueNew (2, sizeof(QUEUE_DATA), &QUEUE_DATA_attributes);
 8001164:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <main+0xd0>)
 8001166:	2106      	movs	r1, #6
 8001168:	2002      	movs	r0, #2
 800116a:	f004 f915 	bl	8005398 <osMessageQueueNew>
 800116e:	4603      	mov	r3, r0
 8001170:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <main+0xd4>)
 8001172:	6013      	str	r3, [r2, #0]

  /* creation of QUEUE_UART */
  QUEUE_UARTHandle = osMessageQueueNew (2, sizeof(QUEUE_UART), &QUEUE_UART_attributes);
 8001174:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <main+0xd8>)
 8001176:	2130      	movs	r1, #48	; 0x30
 8001178:	2002      	movs	r0, #2
 800117a:	f004 f90d 	bl	8005398 <osMessageQueueNew>
 800117e:	4603      	mov	r3, r0
 8001180:	4a1a      	ldr	r2, [pc, #104]	; (80011ec <main+0xdc>)
 8001182:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001184:	4a1a      	ldr	r2, [pc, #104]	; (80011f0 <main+0xe0>)
 8001186:	2100      	movs	r1, #0
 8001188:	481a      	ldr	r0, [pc, #104]	; (80011f4 <main+0xe4>)
 800118a:	f003 ffcf 	bl	800512c <osThreadNew>
 800118e:	4603      	mov	r3, r0
 8001190:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <main+0xe8>)
 8001192:	6013      	str	r3, [r2, #0]

  /* creation of Read_XYZ */
  Read_XYZHandle = osThreadNew(StartRead_XYZ, NULL, &Read_XYZ_attributes);
 8001194:	4a19      	ldr	r2, [pc, #100]	; (80011fc <main+0xec>)
 8001196:	2100      	movs	r1, #0
 8001198:	4819      	ldr	r0, [pc, #100]	; (8001200 <main+0xf0>)
 800119a:	f003 ffc7 	bl	800512c <osThreadNew>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a18      	ldr	r2, [pc, #96]	; (8001204 <main+0xf4>)
 80011a2:	6013      	str	r3, [r2, #0]

  /* creation of Angle_Task */
  Angle_TaskHandle = osThreadNew(StartAngle_Task, NULL, &Angle_Task_attributes);
 80011a4:	4a18      	ldr	r2, [pc, #96]	; (8001208 <main+0xf8>)
 80011a6:	2100      	movs	r1, #0
 80011a8:	4818      	ldr	r0, [pc, #96]	; (800120c <main+0xfc>)
 80011aa:	f003 ffbf 	bl	800512c <osThreadNew>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a17      	ldr	r2, [pc, #92]	; (8001210 <main+0x100>)
 80011b2:	6013      	str	r3, [r2, #0]

  /* creation of Task_test */
  Task_testHandle = osThreadNew(StartTask_test, NULL, &Task_test_attributes);
 80011b4:	4a17      	ldr	r2, [pc, #92]	; (8001214 <main+0x104>)
 80011b6:	2100      	movs	r1, #0
 80011b8:	4817      	ldr	r0, [pc, #92]	; (8001218 <main+0x108>)
 80011ba:	f003 ffb7 	bl	800512c <osThreadNew>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a16      	ldr	r2, [pc, #88]	; (800121c <main+0x10c>)
 80011c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011c4:	f003 ff8c 	bl	80050e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <main+0xb8>
 80011ca:	bf00      	nop
 80011cc:	0800c2b0 	.word	0x0800c2b0
 80011d0:	2000153c 	.word	0x2000153c
 80011d4:	20000360 	.word	0x20000360
 80011d8:	0800c3dc 	.word	0x0800c3dc
 80011dc:	200014e8 	.word	0x200014e8
 80011e0:	0800c3ac 	.word	0x0800c3ac
 80011e4:	200014e0 	.word	0x200014e0
 80011e8:	0800c3c4 	.word	0x0800c3c4
 80011ec:	200014e4 	.word	0x200014e4
 80011f0:	0800c31c 	.word	0x0800c31c
 80011f4:	08001585 	.word	0x08001585
 80011f8:	200003a4 	.word	0x200003a4
 80011fc:	0800c340 	.word	0x0800c340
 8001200:	08001595 	.word	0x08001595
 8001204:	200003a8 	.word	0x200003a8
 8001208:	0800c364 	.word	0x0800c364
 800120c:	08001731 	.word	0x08001731
 8001210:	20000810 	.word	0x20000810
 8001214:	0800c388 	.word	0x0800c388
 8001218:	080019b1 	.word	0x080019b1
 800121c:	20000c78 	.word	0x20000c78

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b094      	sub	sp, #80	; 0x50
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	2230      	movs	r2, #48	; 0x30
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f007 f80c 	bl	800824c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	4b28      	ldr	r3, [pc, #160]	; (80012ec <SystemClock_Config+0xcc>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	4a27      	ldr	r2, [pc, #156]	; (80012ec <SystemClock_Config+0xcc>)
 800124e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001252:	6413      	str	r3, [r2, #64]	; 0x40
 8001254:	4b25      	ldr	r3, [pc, #148]	; (80012ec <SystemClock_Config+0xcc>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <SystemClock_Config+0xd0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a21      	ldr	r2, [pc, #132]	; (80012f0 <SystemClock_Config+0xd0>)
 800126a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <SystemClock_Config+0xd0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800127c:	2302      	movs	r3, #2
 800127e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001280:	2301      	movs	r3, #1
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001284:	2310      	movs	r3, #16
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001288:	2302      	movs	r3, #2
 800128a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800128c:	2300      	movs	r3, #0
 800128e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001290:	2308      	movs	r3, #8
 8001292:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001294:	23a8      	movs	r3, #168	; 0xa8
 8001296:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001298:	2302      	movs	r3, #2
 800129a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800129c:	2304      	movs	r3, #4
 800129e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a0:	f107 0320 	add.w	r3, r7, #32
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 fd8d 	bl	8002dc4 <HAL_RCC_OscConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012b0:	f000 fbf6 	bl	8001aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b8:	2302      	movs	r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2105      	movs	r1, #5
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 ffee 	bl	80032b4 <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012de:	f000 fbdf 	bl	8001aa0 <Error_Handler>
  }
}
 80012e2:	bf00      	nop
 80012e4:	3750      	adds	r7, #80	; 0x50
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40007000 	.word	0x40007000

080012f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <MX_SPI1_Init+0x64>)
 80012fa:	4a18      	ldr	r2, [pc, #96]	; (800135c <MX_SPI1_Init+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_SPI1_Init+0x64>)
 8001300:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001304:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_SPI1_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_SPI1_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_SPI1_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_SPI1_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_SPI1_Init+0x64>)
 8001320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001324:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_SPI1_Init+0x64>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <MX_SPI1_Init+0x64>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_SPI1_Init+0x64>)
 8001334:	2200      	movs	r2, #0
 8001336:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <MX_SPI1_Init+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_SPI1_Init+0x64>)
 8001340:	220a      	movs	r2, #10
 8001342:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_SPI1_Init+0x64>)
 8001346:	f002 f9c7 	bl	80036d8 <HAL_SPI_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001350:	f000 fba6 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000200 	.word	0x20000200
 800135c:	40013000 	.word	0x40013000

08001360 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001366:	463b      	mov	r3, r7
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800136e:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <MX_TIM7_Init+0x60>)
 8001370:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <MX_TIM7_Init+0x64>)
 8001372:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <MX_TIM7_Init+0x60>)
 8001376:	220f      	movs	r2, #15
 8001378:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_TIM7_Init+0x60>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <MX_TIM7_Init+0x60>)
 8001382:	2263      	movs	r2, #99	; 0x63
 8001384:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_TIM7_Init+0x60>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800138c:	480c      	ldr	r0, [pc, #48]	; (80013c0 <MX_TIM7_Init+0x60>)
 800138e:	f002 ff5d 	bl	800424c <HAL_TIM_Base_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8001398:	f000 fb82 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_TIM7_Init+0x60>)
 80013aa:	f003 f9df 	bl	800476c <HAL_TIMEx_MasterConfigSynchronization>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80013b4:	f000 fb74 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000318 	.word	0x20000318
 80013c4:	40001400 	.word	0x40001400

080013c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013ce:	4a12      	ldr	r2, [pc, #72]	; (8001418 <MX_USART2_UART_Init+0x50>)
 80013d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013ee:	220c      	movs	r2, #12
 80013f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 8001400:	f003 fa44 	bl	800488c <HAL_UART_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800140a:	f000 fb49 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000360 	.word	0x20000360
 8001418:	40004400 	.word	0x40004400

0800141c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <MX_DMA_Init+0x4c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <MX_DMA_Init+0x4c>)
 800142c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <MX_DMA_Init+0x4c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2105      	movs	r1, #5
 8001442:	2038      	movs	r0, #56	; 0x38
 8001444:	f000 ff4a 	bl	80022dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001448:	2038      	movs	r0, #56	; 0x38
 800144a:	f000 ff63 	bl	8002314 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2105      	movs	r1, #5
 8001452:	203b      	movs	r0, #59	; 0x3b
 8001454:	f000 ff42 	bl	80022dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001458:	203b      	movs	r0, #59	; 0x3b
 800145a:	f000 ff5b 	bl	8002314 <HAL_NVIC_EnableIRQ>

}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800

0800146c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <MX_GPIO_Init+0x108>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a3a      	ldr	r2, [pc, #232]	; (8001574 <MX_GPIO_Init+0x108>)
 800148c:	f043 0310 	orr.w	r3, r3, #16
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <MX_GPIO_Init+0x108>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b34      	ldr	r3, [pc, #208]	; (8001574 <MX_GPIO_Init+0x108>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a33      	ldr	r2, [pc, #204]	; (8001574 <MX_GPIO_Init+0x108>)
 80014a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b31      	ldr	r3, [pc, #196]	; (8001574 <MX_GPIO_Init+0x108>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <MX_GPIO_Init+0x108>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a2c      	ldr	r2, [pc, #176]	; (8001574 <MX_GPIO_Init+0x108>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <MX_GPIO_Init+0x108>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <MX_GPIO_Init+0x108>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a25      	ldr	r2, [pc, #148]	; (8001574 <MX_GPIO_Init+0x108>)
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <MX_GPIO_Init+0x108>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port, CS_LIS3DSH_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2108      	movs	r1, #8
 80014f6:	4820      	ldr	r0, [pc, #128]	; (8001578 <MX_GPIO_Init+0x10c>)
 80014f8:	f001 fc26 	bl	8002d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001502:	481e      	ldr	r0, [pc, #120]	; (800157c <MX_GPIO_Init+0x110>)
 8001504:	f001 fc20 	bl	8002d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_LIS3DSH_Pin */
  GPIO_InitStruct.Pin = CS_LIS3DSH_Pin;
 8001508:	2308      	movs	r3, #8
 800150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_LIS3DSH_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	4816      	ldr	r0, [pc, #88]	; (8001578 <MX_GPIO_Init+0x10c>)
 8001520:	f001 fa76 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8001524:	2301      	movs	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001528:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	4811      	ldr	r0, [pc, #68]	; (8001580 <MX_GPIO_Init+0x114>)
 800153a:	f001 fa69 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 800153e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4809      	ldr	r0, [pc, #36]	; (800157c <MX_GPIO_Init+0x110>)
 8001558:	f001 fa5a 	bl	8002a10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	2105      	movs	r1, #5
 8001560:	2006      	movs	r0, #6
 8001562:	f000 febb 	bl	80022dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001566:	2006      	movs	r0, #6
 8001568:	f000 fed4 	bl	8002314 <HAL_NVIC_EnableIRQ>

}
 800156c:	bf00      	nop
 800156e:	3728      	adds	r7, #40	; 0x28
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	40021000 	.word	0x40021000
 800157c:	40020c00 	.word	0x40020c00
 8001580:	40020000 	.word	0x40020000

08001584 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800158c:	2001      	movs	r0, #1
 800158e:	f003 fe5f 	bl	8005250 <osDelay>
 8001592:	e7fb      	b.n	800158c <StartDefaultTask+0x8>

08001594 <StartRead_XYZ>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRead_XYZ */
void StartRead_XYZ(void *argument)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRead_XYZ */
	QUEUE_DATA XYZ;

	uint8_t X_read_L=XL_REG;
 800159c:	2328      	movs	r3, #40	; 0x28
 800159e:	75fb      	strb	r3, [r7, #23]
	uint8_t OUT_X_H;
	uint8_t OUT_X_L;

	uint8_t Y_read_L=YL_REG;
 80015a0:	232a      	movs	r3, #42	; 0x2a
 80015a2:	753b      	strb	r3, [r7, #20]
	uint8_t OUT_Y_H;
	uint8_t OUT_Y_L;

	uint8_t Z_read_L=ZL_REG;
 80015a4:	232c      	movs	r3, #44	; 0x2c
 80015a6:	747b      	strb	r3, [r7, #17]
	uint8_t OUT_Z_H;
	uint8_t OUT_Z_L;

	uint8_t Tmp_read=OUT_T_REG;
 80015a8:	230c      	movs	r3, #12
 80015aa:	77fb      	strb	r3, [r7, #31]
	int8_t Temp;


	uint8_t StatusReg = STATUS_REG;
 80015ac:	2327      	movs	r3, #39	; 0x27
 80015ae:	73bb      	strb	r3, [r7, #14]
	//  osMutexAcquire(Mutex1Handle, osWaitForever);

	 // taskENTER_CRITICAL();
	//		  {

	  StatusRegData=0x00;
 80015b0:	2300      	movs	r3, #0
 80015b2:	737b      	strb	r3, [r7, #13]
	  while(StatusRegData!=0x08){
 80015b4:	e021      	b.n	80015fa <StartRead_XYZ+0x66>

	    HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin , GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2108      	movs	r1, #8
 80015ba:	4859      	ldr	r0, [pc, #356]	; (8001720 <StartRead_XYZ+0x18c>)
 80015bc:	f001 fbc4 	bl	8002d48 <HAL_GPIO_WritePin>
	    StatusReg|=0x80;
 80015c0:	7bbb      	ldrb	r3, [r7, #14]
 80015c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_Transmit_DMA(&hspi1, &StatusReg, 1);//(&hspi1, &X_read_L, 1, 100);
 80015ca:	f107 030e 	add.w	r3, r7, #14
 80015ce:	2201      	movs	r2, #1
 80015d0:	4619      	mov	r1, r3
 80015d2:	4854      	ldr	r0, [pc, #336]	; (8001724 <StartRead_XYZ+0x190>)
 80015d4:	f002 f90a 	bl	80037ec <HAL_SPI_Transmit_DMA>
		HAL_SPI_Receive_DMA(&hspi1, &StatusRegData, 1);//(&hspi1, &OUT_X_L, 1, 100);
 80015d8:	f107 030d 	add.w	r3, r7, #13
 80015dc:	2201      	movs	r2, #1
 80015de:	4619      	mov	r1, r3
 80015e0:	4850      	ldr	r0, [pc, #320]	; (8001724 <StartRead_XYZ+0x190>)
 80015e2:	f002 f9b9 	bl	8003958 <HAL_SPI_Receive_DMA>
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
 80015e6:	2201      	movs	r2, #1
 80015e8:	2108      	movs	r1, #8
 80015ea:	484d      	ldr	r0, [pc, #308]	; (8001720 <StartRead_XYZ+0x18c>)
 80015ec:	f001 fbac 	bl	8002d48 <HAL_GPIO_WritePin>

		StatusRegData&=0x08;
 80015f0:	7b7b      	ldrb	r3, [r7, #13]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	737b      	strb	r3, [r7, #13]
	  while(StatusRegData!=0x08){
 80015fa:	7b7b      	ldrb	r3, [r7, #13]
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d1da      	bne.n	80015b6 <StartRead_XYZ+0x22>
	  }

	    HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin , GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	2108      	movs	r1, #8
 8001604:	4846      	ldr	r0, [pc, #280]	; (8001720 <StartRead_XYZ+0x18c>)
 8001606:	f001 fb9f 	bl	8002d48 <HAL_GPIO_WritePin>
		X_read_L=0x80|X_read_L;
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001610:	b2db      	uxtb	r3, r3
 8001612:	75fb      	strb	r3, [r7, #23]
		HAL_SPI_Transmit_DMA(&hspi1, &X_read_L, 1);//(&hspi1, &X_read_L, 1, 100);
 8001614:	f107 0317 	add.w	r3, r7, #23
 8001618:	2201      	movs	r2, #1
 800161a:	4619      	mov	r1, r3
 800161c:	4841      	ldr	r0, [pc, #260]	; (8001724 <StartRead_XYZ+0x190>)
 800161e:	f002 f8e5 	bl	80037ec <HAL_SPI_Transmit_DMA>
		HAL_SPI_Receive_DMA(&hspi1, &OUT_X_L, 1);//(&hspi1, &OUT_X_L, 1, 100);
 8001622:	f107 0315 	add.w	r3, r7, #21
 8001626:	2201      	movs	r2, #1
 8001628:	4619      	mov	r1, r3
 800162a:	483e      	ldr	r0, [pc, #248]	; (8001724 <StartRead_XYZ+0x190>)
 800162c:	f002 f994 	bl	8003958 <HAL_SPI_Receive_DMA>
	//	HAL_SPI_TransmitReceive_DMA(&hspi1, &X_read_L, &OUT_X_L, 1);
		//HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
		//X_read_H=0x80|X_read_H;
		//HAL_SPI_Transmit_DMA(&hspi1, &X_read_H, 1);//(&hspi1, &X_read_H, 1, 100);
		HAL_SPI_Receive_DMA(&hspi1, &OUT_X_H, 1);//(&hspi1, &OUT_X_H, 1, 100);
 8001630:	f107 0316 	add.w	r3, r7, #22
 8001634:	2201      	movs	r2, #1
 8001636:	4619      	mov	r1, r3
 8001638:	483a      	ldr	r0, [pc, #232]	; (8001724 <StartRead_XYZ+0x190>)
 800163a:	f002 f98d 	bl	8003958 <HAL_SPI_Receive_DMA>
	//	HAL_SPI_TransmitReceive_DMA(&hspi1, &X_read_H, &OUT_X_H, 1);
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
 800163e:	2201      	movs	r2, #1
 8001640:	2108      	movs	r1, #8
 8001642:	4837      	ldr	r0, [pc, #220]	; (8001720 <StartRead_XYZ+0x18c>)
 8001644:	f001 fb80 	bl	8002d48 <HAL_GPIO_WritePin>
		XYZ.X_16bit=((OUT_X_H<<8)|(OUT_X_L));
 8001648:	7dbb      	ldrb	r3, [r7, #22]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	b21a      	sxth	r2, r3
 800164e:	7d7b      	ldrb	r3, [r7, #21]
 8001650:	b21b      	sxth	r3, r3
 8001652:	4313      	orrs	r3, r2
 8001654:	b21b      	sxth	r3, r3
 8001656:	833b      	strh	r3, [r7, #24]

		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	2108      	movs	r1, #8
 800165c:	4830      	ldr	r0, [pc, #192]	; (8001720 <StartRead_XYZ+0x18c>)
 800165e:	f001 fb73 	bl	8002d48 <HAL_GPIO_WritePin>
		Y_read_L=0x80|Y_read_L;
 8001662:	7d3b      	ldrb	r3, [r7, #20]
 8001664:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001668:	b2db      	uxtb	r3, r3
 800166a:	753b      	strb	r3, [r7, #20]
		HAL_SPI_Transmit_DMA(&hspi1, &Y_read_L, 1); //(&hspi1, &Y_read_L, 1, 100);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2201      	movs	r2, #1
 8001672:	4619      	mov	r1, r3
 8001674:	482b      	ldr	r0, [pc, #172]	; (8001724 <StartRead_XYZ+0x190>)
 8001676:	f002 f8b9 	bl	80037ec <HAL_SPI_Transmit_DMA>
		HAL_SPI_Receive_DMA(&hspi1, &OUT_Y_L, 1); //(&hspi1, &OUT_Y_L, 1, 100);
 800167a:	f107 0312 	add.w	r3, r7, #18
 800167e:	2201      	movs	r2, #1
 8001680:	4619      	mov	r1, r3
 8001682:	4828      	ldr	r0, [pc, #160]	; (8001724 <StartRead_XYZ+0x190>)
 8001684:	f002 f968 	bl	8003958 <HAL_SPI_Receive_DMA>
	//	HAL_SPI_TransmitReceive_DMA(&hspi1, &Y_read_L, &OUT_Y_L, 1);
		//HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
		//Y_read_H=0x80|Y_read_H;
		//HAL_SPI_Transmit_DMA(&hspi1, &Y_read_H, 1); //(&hspi1, &Y_read_H, 1, 100);
		HAL_SPI_Receive_DMA(&hspi1, &OUT_Y_H, 1); //(&hspi1, &OUT_Y_H, 1, 100);
 8001688:	f107 0313 	add.w	r3, r7, #19
 800168c:	2201      	movs	r2, #1
 800168e:	4619      	mov	r1, r3
 8001690:	4824      	ldr	r0, [pc, #144]	; (8001724 <StartRead_XYZ+0x190>)
 8001692:	f002 f961 	bl	8003958 <HAL_SPI_Receive_DMA>
	//	HAL_SPI_TransmitReceive_DMA(&hspi1, &Y_read_H, &OUT_Y_H, 1);
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
 8001696:	2201      	movs	r2, #1
 8001698:	2108      	movs	r1, #8
 800169a:	4821      	ldr	r0, [pc, #132]	; (8001720 <StartRead_XYZ+0x18c>)
 800169c:	f001 fb54 	bl	8002d48 <HAL_GPIO_WritePin>
		XYZ.Y_16bit=((OUT_Y_H<<8)|(OUT_Y_L));
 80016a0:	7cfb      	ldrb	r3, [r7, #19]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	b21a      	sxth	r2, r3
 80016a6:	7cbb      	ldrb	r3, [r7, #18]
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	4313      	orrs	r3, r2
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	837b      	strh	r3, [r7, #26]



		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2108      	movs	r1, #8
 80016b4:	481a      	ldr	r0, [pc, #104]	; (8001720 <StartRead_XYZ+0x18c>)
 80016b6:	f001 fb47 	bl	8002d48 <HAL_GPIO_WritePin>
		Z_read_L=0x80|Z_read_L;
 80016ba:	7c7b      	ldrb	r3, [r7, #17]
 80016bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	747b      	strb	r3, [r7, #17]
		HAL_SPI_Transmit_DMA(&hspi1, &Z_read_L, 1); //(&hspi1, &Z_read_L, 1, 100);
 80016c4:	f107 0311 	add.w	r3, r7, #17
 80016c8:	2201      	movs	r2, #1
 80016ca:	4619      	mov	r1, r3
 80016cc:	4815      	ldr	r0, [pc, #84]	; (8001724 <StartRead_XYZ+0x190>)
 80016ce:	f002 f88d 	bl	80037ec <HAL_SPI_Transmit_DMA>
		HAL_SPI_Receive_DMA(&hspi1, &OUT_Z_L, 1); //(&hspi1, &OUT_Z_L, 1, 100);
 80016d2:	f107 030f 	add.w	r3, r7, #15
 80016d6:	2201      	movs	r2, #1
 80016d8:	4619      	mov	r1, r3
 80016da:	4812      	ldr	r0, [pc, #72]	; (8001724 <StartRead_XYZ+0x190>)
 80016dc:	f002 f93c 	bl	8003958 <HAL_SPI_Receive_DMA>
	//	HAL_SPI_TransmitReceive_DMA(&hspi1, &Z_read_L, &OUT_Z_L, 1);
		//HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_RESET);
		//Z_read_H=0x80|Z_read_H;
		//HAL_SPI_Transmit_DMA(&hspi1, &Z_read_H, 1); //(&hspi1, &Z_read_H, 1, 100);
		HAL_SPI_Receive_DMA(&hspi1, &OUT_Z_H, 1); //(&hspi1, &OUT_Z_H, 1, 100);
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	2201      	movs	r2, #1
 80016e6:	4619      	mov	r1, r3
 80016e8:	480e      	ldr	r0, [pc, #56]	; (8001724 <StartRead_XYZ+0x190>)
 80016ea:	f002 f935 	bl	8003958 <HAL_SPI_Receive_DMA>
	//	HAL_SPI_TransmitReceive_DMA(&hspi1, &Z_read_H, &OUT_Z_H, 1);
		HAL_GPIO_WritePin(CS_LIS3DSH_GPIO_Port,CS_LIS3DSH_Pin, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2108      	movs	r1, #8
 80016f2:	480b      	ldr	r0, [pc, #44]	; (8001720 <StartRead_XYZ+0x18c>)
 80016f4:	f001 fb28 	bl	8002d48 <HAL_GPIO_WritePin>
		XYZ.Z_16bit=((OUT_Z_H<<8)|(OUT_Z_L));
 80016f8:	7c3b      	ldrb	r3, [r7, #16]
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	b21b      	sxth	r3, r3
 8001702:	4313      	orrs	r3, r2
 8001704:	b21b      	sxth	r3, r3
 8001706:	83bb      	strh	r3, [r7, #28]

	//  taskEXIT_CRITICAL();



		osMessageQueuePut(QUEUE_DATAHandle, &XYZ, 0, 1);
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <StartRead_XYZ+0x194>)
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	f107 0118 	add.w	r1, r7, #24
 8001710:	2301      	movs	r3, #1
 8001712:	2200      	movs	r2, #0
 8001714:	f003 feb4 	bl	8005480 <osMessageQueuePut>


		 // osMutexRelease(Mutex1Handle);

    osDelay(15);
 8001718:	200f      	movs	r0, #15
 800171a:	f003 fd99 	bl	8005250 <osDelay>
	  StatusRegData=0x00;
 800171e:	e747      	b.n	80015b0 <StartRead_XYZ+0x1c>
 8001720:	40021000 	.word	0x40021000
 8001724:	20000200 	.word	0x20000200
 8001728:	200014e0 	.word	0x200014e0
 800172c:	00000000 	.word	0x00000000

08001730 <StartAngle_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAngle_Task */
void StartAngle_Task(void *argument)
{
 8001730:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001734:	b09a      	sub	sp, #104	; 0x68
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
	double X_1;
	double Y_1;
	double Z_1;


	double sens=SENS;
 800173a:	a399      	add	r3, pc, #612	; (adr r3, 80019a0 <StartAngle_Task+0x270>)
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double TO_DEG=57.2958;
 8001744:	a398      	add	r3, pc, #608	; (adr r3, 80019a8 <StartAngle_Task+0x278>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  {
	  	 // osMutexAcquire(Mutex1Handle, osWaitForever);

///прием данных из очереди

		  osMessageQueueGet(QUEUE_DATAHandle, &XYZ, 0, 1);
 800174e:	4b92      	ldr	r3, [pc, #584]	; (8001998 <StartAngle_Task+0x268>)
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001756:	2301      	movs	r3, #1
 8001758:	2200      	movs	r2, #0
 800175a:	f003 fef1 	bl	8005540 <osMessageQueueGet>



		  ///расчет коэффициентов для углов

		  Angle.ax=(double)XYZ.X_16bit/sens;
 800175e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fede 	bl	8000524 <__aeabi_i2d>
 8001768:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800176c:	f7ff f86e 	bl	800084c <__aeabi_ddiv>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	e9c7 2308 	strd	r2, r3, [r7, #32]
		  Angle.ay=(double)XYZ.Y_16bit/sens;
 8001778:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fed1 	bl	8000524 <__aeabi_i2d>
 8001782:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001786:	f7ff f861 	bl	800084c <__aeabi_ddiv>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		  Angle.az=(double)XYZ.Z_16bit/sens;
 8001792:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fec4 	bl	8000524 <__aeabi_i2d>
 800179c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80017a0:	f7ff f854 	bl	800084c <__aeabi_ddiv>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		  ///расчет угла через арктангенс с умножением на константу для перевода из радианы в градусы



		  X_1=TO_DEG*atan(Angle.ax/(sqrt(pow(Angle.ay,2)+pow(Angle.az,2))));
 80017ac:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017b0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80017b4:	ed9f 1b76 	vldr	d1, [pc, #472]	; 8001990 <StartAngle_Task+0x260>
 80017b8:	eeb0 0a47 	vmov.f32	s0, s14
 80017bc:	eef0 0a67 	vmov.f32	s1, s15
 80017c0:	f009 fe00 	bl	800b3c4 <pow>
 80017c4:	ec59 8b10 	vmov	r8, r9, d0
 80017c8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80017cc:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8001990 <StartAngle_Task+0x260>
 80017d0:	eeb0 0a47 	vmov.f32	s0, s14
 80017d4:	eef0 0a67 	vmov.f32	s1, s15
 80017d8:	f009 fdf4 	bl	800b3c4 <pow>
 80017dc:	ec53 2b10 	vmov	r2, r3, d0
 80017e0:	4640      	mov	r0, r8
 80017e2:	4649      	mov	r1, r9
 80017e4:	f7fe fd52 	bl	800028c <__adddf3>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	ec43 2b17 	vmov	d7, r2, r3
 80017f0:	eeb0 0a47 	vmov.f32	s0, s14
 80017f4:	eef0 0a67 	vmov.f32	s1, s15
 80017f8:	f009 fe54 	bl	800b4a4 <sqrt>
 80017fc:	ec53 2b10 	vmov	r2, r3, d0
 8001800:	4620      	mov	r0, r4
 8001802:	4629      	mov	r1, r5
 8001804:	f7ff f822 	bl	800084c <__aeabi_ddiv>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	ec43 2b17 	vmov	d7, r2, r3
 8001810:	eeb0 0a47 	vmov.f32	s0, s14
 8001814:	eef0 0a67 	vmov.f32	s1, s15
 8001818:	f009 fc2a 	bl	800b070 <atan>
 800181c:	ec53 2b10 	vmov	r2, r3, d0
 8001820:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001824:	f7fe fee8 	bl	80005f8 <__aeabi_dmul>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		  Y_1=TO_DEG*atan(Angle.ay/(sqrt(pow(Angle.ax,2)+pow(Angle.az,2))));
 8001830:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001834:	ed97 7b08 	vldr	d7, [r7, #32]
 8001838:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8001990 <StartAngle_Task+0x260>
 800183c:	eeb0 0a47 	vmov.f32	s0, s14
 8001840:	eef0 0a67 	vmov.f32	s1, s15
 8001844:	f009 fdbe 	bl	800b3c4 <pow>
 8001848:	ec59 8b10 	vmov	r8, r9, d0
 800184c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001850:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 8001990 <StartAngle_Task+0x260>
 8001854:	eeb0 0a47 	vmov.f32	s0, s14
 8001858:	eef0 0a67 	vmov.f32	s1, s15
 800185c:	f009 fdb2 	bl	800b3c4 <pow>
 8001860:	ec53 2b10 	vmov	r2, r3, d0
 8001864:	4640      	mov	r0, r8
 8001866:	4649      	mov	r1, r9
 8001868:	f7fe fd10 	bl	800028c <__adddf3>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	ec43 2b17 	vmov	d7, r2, r3
 8001874:	eeb0 0a47 	vmov.f32	s0, s14
 8001878:	eef0 0a67 	vmov.f32	s1, s15
 800187c:	f009 fe12 	bl	800b4a4 <sqrt>
 8001880:	ec53 2b10 	vmov	r2, r3, d0
 8001884:	4620      	mov	r0, r4
 8001886:	4629      	mov	r1, r5
 8001888:	f7fe ffe0 	bl	800084c <__aeabi_ddiv>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	ec43 2b17 	vmov	d7, r2, r3
 8001894:	eeb0 0a47 	vmov.f32	s0, s14
 8001898:	eef0 0a67 	vmov.f32	s1, s15
 800189c:	f009 fbe8 	bl	800b070 <atan>
 80018a0:	ec53 2b10 	vmov	r2, r3, d0
 80018a4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80018a8:	f7fe fea6 	bl	80005f8 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		 Z_1=TO_DEG*atan(Angle.az/(sqrt(pow(Angle.ax,2)+pow(Angle.ay,2))));
 80018b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018b8:	ed97 7b08 	vldr	d7, [r7, #32]
 80018bc:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8001990 <StartAngle_Task+0x260>
 80018c0:	eeb0 0a47 	vmov.f32	s0, s14
 80018c4:	eef0 0a67 	vmov.f32	s1, s15
 80018c8:	f009 fd7c 	bl	800b3c4 <pow>
 80018cc:	ec59 8b10 	vmov	r8, r9, d0
 80018d0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80018d4:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8001990 <StartAngle_Task+0x260>
 80018d8:	eeb0 0a47 	vmov.f32	s0, s14
 80018dc:	eef0 0a67 	vmov.f32	s1, s15
 80018e0:	f009 fd70 	bl	800b3c4 <pow>
 80018e4:	ec53 2b10 	vmov	r2, r3, d0
 80018e8:	4640      	mov	r0, r8
 80018ea:	4649      	mov	r1, r9
 80018ec:	f7fe fcce 	bl	800028c <__adddf3>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	ec43 2b17 	vmov	d7, r2, r3
 80018f8:	eeb0 0a47 	vmov.f32	s0, s14
 80018fc:	eef0 0a67 	vmov.f32	s1, s15
 8001900:	f009 fdd0 	bl	800b4a4 <sqrt>
 8001904:	ec53 2b10 	vmov	r2, r3, d0
 8001908:	4620      	mov	r0, r4
 800190a:	4629      	mov	r1, r5
 800190c:	f7fe ff9e 	bl	800084c <__aeabi_ddiv>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	ec43 2b17 	vmov	d7, r2, r3
 8001918:	eeb0 0a47 	vmov.f32	s0, s14
 800191c:	eef0 0a67 	vmov.f32	s1, s15
 8001920:	f009 fba6 	bl	800b070 <atan>
 8001924:	ec53 2b10 	vmov	r2, r3, d0
 8001928:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800192c:	f7fe fe64 	bl	80005f8 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

		  Angle.angle_ax=Filter_Kalman(X_1);
 8001938:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800193c:	f7ff fb10 	bl	8000f60 <Filter_Kalman>
 8001940:	eeb0 7a40 	vmov.f32	s14, s0
 8001944:	eef0 7a60 	vmov.f32	s15, s1
 8001948:	ed87 7b02 	vstr	d7, [r7, #8]
		  Angle.angle_ay=Filter_Kalman(Y_1);
 800194c:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001950:	f7ff fb06 	bl	8000f60 <Filter_Kalman>
 8001954:	eeb0 7a40 	vmov.f32	s14, s0
 8001958:	eef0 7a60 	vmov.f32	s15, s1
 800195c:	ed87 7b04 	vstr	d7, [r7, #16]
		  Angle.angle_az=Filter_Kalman(Z_1);
 8001960:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8001964:	f7ff fafc 	bl	8000f60 <Filter_Kalman>
 8001968:	eeb0 7a40 	vmov.f32	s14, s0
 800196c:	eef0 7a60 	vmov.f32	s15, s1
 8001970:	ed87 7b06 	vstr	d7, [r7, #24]


		  ///отправка в очередь


	  osMessageQueuePut(QUEUE_UARTHandle, &Angle, 0, 1);
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <StartAngle_Task+0x26c>)
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	f107 0108 	add.w	r1, r7, #8
 800197c:	2301      	movs	r3, #1
 800197e:	2200      	movs	r2, #0
 8001980:	f003 fd7e 	bl	8005480 <osMessageQueuePut>

		 // osMutexRelease(Mutex1Handle);


    osDelay(15);
 8001984:	200f      	movs	r0, #15
 8001986:	f003 fc63 	bl	8005250 <osDelay>
		  osMessageQueueGet(QUEUE_DATAHandle, &XYZ, 0, 1);
 800198a:	e6e0      	b.n	800174e <StartAngle_Task+0x1e>
 800198c:	f3af 8000 	nop.w
 8001990:	00000000 	.word	0x00000000
 8001994:	40000000 	.word	0x40000000
 8001998:	200014e0 	.word	0x200014e0
 800199c:	200014e4 	.word	0x200014e4
 80019a0:	00000000 	.word	0x00000000
 80019a4:	40d07080 	.word	0x40d07080
 80019a8:	c63f1412 	.word	0xc63f1412
 80019ac:	404ca5dc 	.word	0x404ca5dc

080019b0 <StartTask_test>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_test */
void StartTask_test(void *argument)
{
 80019b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b2:	b0af      	sub	sp, #188	; 0xbc
 80019b4:	af06      	add	r7, sp, #24
 80019b6:	6078      	str	r0, [r7, #4]
	//  osMessageQueueGet(QUEUE_DATAHandle, &XYZ, 0, 1);




	  osMessageQueueGet(QUEUE_UARTHandle, &Angle, 0, 1);
 80019b8:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <StartTask_test+0xb8>)
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80019c0:	2301      	movs	r3, #1
 80019c2:	2200      	movs	r2, #0
 80019c4:	f003 fdbc 	bl	8005540 <osMessageQueueGet>

	  if(LED_flag==SET){
 80019c8:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <StartTask_test+0xbc>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00e      	beq.n	80019ee <StartTask_test+0x3e>
	  LED_Proc(Angle.angle_ax,Angle.angle_ay);
 80019d0:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 80019d4:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80019d8:	eeb0 1a46 	vmov.f32	s2, s12
 80019dc:	eef0 1a66 	vmov.f32	s3, s13
 80019e0:	eeb0 0a47 	vmov.f32	s0, s14
 80019e4:	eef0 0a67 	vmov.f32	s1, s15
 80019e8:	f7ff fae6 	bl	8000fb8 <LED_Proc>
 80019ec:	e017      	b.n	8001a1e <StartTask_test+0x6e>
	  }
	  else{
		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin,GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019f4:	481e      	ldr	r0, [pc, #120]	; (8001a70 <StartTask_test+0xc0>)
 80019f6:	f001 f9a7 	bl	8002d48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a00:	481b      	ldr	r0, [pc, #108]	; (8001a70 <StartTask_test+0xc0>)
 8001a02:	f001 f9a1 	bl	8002d48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin,GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a0c:	4818      	ldr	r0, [pc, #96]	; (8001a70 <StartTask_test+0xc0>)
 8001a0e:	f001 f99b 	bl	8002d48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a18:	4815      	ldr	r0, [pc, #84]	; (8001a70 <StartTask_test+0xc0>)
 8001a1a:	f001 f995 	bl	8002d48 <HAL_GPIO_WritePin>
	//  HAL_UART_Transmit(&huart2, (uint8_t*)&dataUART, strlen(dataUART), osWaitForever);



	  ///вывод углов
	  snprintf(dataUART,sizeof(dataUART),"%.2f %.2f %.2f\r\n", Angle.angle_ax, Angle.angle_ay, Angle.angle_az);
 8001a1e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001a22:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001a26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001a2a:	f107 0608 	add.w	r6, r7, #8
 8001a2e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001a32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001a36:	e9cd 2300 	strd	r2, r3, [sp]
 8001a3a:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <StartTask_test+0xc4>)
 8001a3c:	215e      	movs	r1, #94	; 0x5e
 8001a3e:	4630      	mov	r0, r6
 8001a40:	f007 f876 	bl	8008b30 <sniprintf>
	//  snprintf(dataUART,sizeof(dataUART),"1X_ax=%.2f 2Y_ay=%.2f 3Z_az=%.2f\r\n", Angle.angle_ax, Angle.angle_ay, Angle.angle_az);
	  HAL_UART_Transmit(&huart2, (uint8_t*)&dataUART, strlen(dataUART), osWaitForever);
 8001a44:	f107 0308 	add.w	r3, r7, #8
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fbc1 	bl	80001d0 <strlen>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	f107 0108 	add.w	r1, r7, #8
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	4807      	ldr	r0, [pc, #28]	; (8001a78 <StartTask_test+0xc8>)
 8001a5c:	f002 ff63 	bl	8004926 <HAL_UART_Transmit>

	  //osMutexRelease(Mutex1Handle);

    osDelay(15);
 8001a60:	200f      	movs	r0, #15
 8001a62:	f003 fbf5 	bl	8005250 <osDelay>
	  osMessageQueueGet(QUEUE_UARTHandle, &Angle, 0, 1);
 8001a66:	e7a7      	b.n	80019b8 <StartTask_test+0x8>
 8001a68:	200014e4 	.word	0x200014e4
 8001a6c:	2000155a 	.word	0x2000155a
 8001a70:	40020c00 	.word	0x40020c00
 8001a74:	0800c2c8 	.word	0x0800c2c8
 8001a78:	20000360 	.word	0x20000360

08001a7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d101      	bne.n	8001a92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a8e:	f000 fb4d 	bl	800212c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40001000 	.word	0x40001000

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <Error_Handler+0x8>
	...

08001aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_MspInit+0x54>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	4a11      	ldr	r2, [pc, #68]	; (8001b00 <HAL_MspInit+0x54>)
 8001abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <HAL_MspInit+0x54>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_MspInit+0x54>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <HAL_MspInit+0x54>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <HAL_MspInit+0x54>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	210f      	movs	r1, #15
 8001aee:	f06f 0001 	mvn.w	r0, #1
 8001af2:	f000 fbf3 	bl	80022dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800

08001b04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a47      	ldr	r2, [pc, #284]	; (8001c40 <HAL_SPI_MspInit+0x13c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	f040 8088 	bne.w	8001c38 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	4b45      	ldr	r3, [pc, #276]	; (8001c44 <HAL_SPI_MspInit+0x140>)
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b30:	4a44      	ldr	r2, [pc, #272]	; (8001c44 <HAL_SPI_MspInit+0x140>)
 8001b32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b36:	6453      	str	r3, [r2, #68]	; 0x44
 8001b38:	4b42      	ldr	r3, [pc, #264]	; (8001c44 <HAL_SPI_MspInit+0x140>)
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	4b3e      	ldr	r3, [pc, #248]	; (8001c44 <HAL_SPI_MspInit+0x140>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	4a3d      	ldr	r2, [pc, #244]	; (8001c44 <HAL_SPI_MspInit+0x140>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6313      	str	r3, [r2, #48]	; 0x30
 8001b54:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <HAL_SPI_MspInit+0x140>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b60:	23e0      	movs	r3, #224	; 0xe0
 8001b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b70:	2305      	movs	r3, #5
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4833      	ldr	r0, [pc, #204]	; (8001c48 <HAL_SPI_MspInit+0x144>)
 8001b7c:	f000 ff48 	bl	8002a10 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001b80:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <HAL_SPI_MspInit+0x148>)
 8001b82:	4a33      	ldr	r2, [pc, #204]	; (8001c50 <HAL_SPI_MspInit+0x14c>)
 8001b84:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001b86:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <HAL_SPI_MspInit+0x148>)
 8001b88:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001b8c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b8e:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <HAL_SPI_MspInit+0x148>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_SPI_MspInit+0x148>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b9a:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <HAL_SPI_MspInit+0x148>)
 8001b9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <HAL_SPI_MspInit+0x148>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_SPI_MspInit+0x148>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001bae:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_SPI_MspInit+0x148>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HAL_SPI_MspInit+0x148>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_SPI_MspInit+0x148>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001bc0:	4822      	ldr	r0, [pc, #136]	; (8001c4c <HAL_SPI_MspInit+0x148>)
 8001bc2:	f000 fbb5 	bl	8002330 <HAL_DMA_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001bcc:	f7ff ff68 	bl	8001aa0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a1e      	ldr	r2, [pc, #120]	; (8001c4c <HAL_SPI_MspInit+0x148>)
 8001bd4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bd6:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <HAL_SPI_MspInit+0x148>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_SPI_MspInit+0x150>)
 8001bde:	4a1e      	ldr	r2, [pc, #120]	; (8001c58 <HAL_SPI_MspInit+0x154>)
 8001be0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <HAL_SPI_MspInit+0x150>)
 8001be4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001be8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <HAL_SPI_MspInit+0x150>)
 8001bec:	2240      	movs	r2, #64	; 0x40
 8001bee:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_SPI_MspInit+0x150>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <HAL_SPI_MspInit+0x150>)
 8001bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bfc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_SPI_MspInit+0x150>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_SPI_MspInit+0x150>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_SPI_MspInit+0x150>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c10:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <HAL_SPI_MspInit+0x150>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_SPI_MspInit+0x150>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001c1c:	480d      	ldr	r0, [pc, #52]	; (8001c54 <HAL_SPI_MspInit+0x150>)
 8001c1e:	f000 fb87 	bl	8002330 <HAL_DMA_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001c28:	f7ff ff3a 	bl	8001aa0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <HAL_SPI_MspInit+0x150>)
 8001c30:	649a      	str	r2, [r3, #72]	; 0x48
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <HAL_SPI_MspInit+0x150>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c38:	bf00      	nop
 8001c3a:	3728      	adds	r7, #40	; 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40013000 	.word	0x40013000
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	20000258 	.word	0x20000258
 8001c50:	40026410 	.word	0x40026410
 8001c54:	200002b8 	.word	0x200002b8
 8001c58:	40026458 	.word	0x40026458

08001c5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <HAL_TIM_Base_MspInit+0x48>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d115      	bne.n	8001c9a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_TIM_Base_MspInit+0x4c>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <HAL_TIM_Base_MspInit+0x4c>)
 8001c78:	f043 0320 	orr.w	r3, r3, #32
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_TIM_Base_MspInit+0x4c>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f003 0320 	and.w	r3, r3, #32
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2105      	movs	r1, #5
 8001c8e:	2037      	movs	r0, #55	; 0x37
 8001c90:	f000 fb24 	bl	80022dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c94:	2037      	movs	r0, #55	; 0x37
 8001c96:	f000 fb3d 	bl	8002314 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40001400 	.word	0x40001400
 8001ca8:	40023800 	.word	0x40023800

08001cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <HAL_UART_MspInit+0x84>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d12b      	bne.n	8001d26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_UART_MspInit+0x88>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <HAL_UART_MspInit+0x88>)
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_UART_MspInit+0x88>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_UART_MspInit+0x88>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <HAL_UART_MspInit+0x88>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <HAL_UART_MspInit+0x88>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d06:	230c      	movs	r3, #12
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d16:	2307      	movs	r3, #7
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4805      	ldr	r0, [pc, #20]	; (8001d38 <HAL_UART_MspInit+0x8c>)
 8001d22:	f000 fe75 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d26:	bf00      	nop
 8001d28:	3728      	adds	r7, #40	; 0x28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40004400 	.word	0x40004400
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020000 	.word	0x40020000

08001d3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08e      	sub	sp, #56	; 0x38
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <HAL_InitTick+0xe4>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	4a32      	ldr	r2, [pc, #200]	; (8001e20 <HAL_InitTick+0xe4>)
 8001d56:	f043 0310 	orr.w	r3, r3, #16
 8001d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5c:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <HAL_InitTick+0xe4>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d68:	f107 0210 	add.w	r2, r7, #16
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f001 fc7e 	bl	8003674 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d103      	bne.n	8001d8a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d82:	f001 fc4f 	bl	8003624 <HAL_RCC_GetPCLK1Freq>
 8001d86:	6378      	str	r0, [r7, #52]	; 0x34
 8001d88:	e004      	b.n	8001d94 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d8a:	f001 fc4b 	bl	8003624 <HAL_RCC_GetPCLK1Freq>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d96:	4a23      	ldr	r2, [pc, #140]	; (8001e24 <HAL_InitTick+0xe8>)
 8001d98:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9c:	0c9b      	lsrs	r3, r3, #18
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001da2:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_InitTick+0xec>)
 8001da4:	4a21      	ldr	r2, [pc, #132]	; (8001e2c <HAL_InitTick+0xf0>)
 8001da6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <HAL_InitTick+0xec>)
 8001daa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001db0:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <HAL_InitTick+0xec>)
 8001db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001db6:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <HAL_InitTick+0xec>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_InitTick+0xec>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_InitTick+0xec>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001dc8:	4817      	ldr	r0, [pc, #92]	; (8001e28 <HAL_InitTick+0xec>)
 8001dca:	f002 fa3f 	bl	800424c <HAL_TIM_Base_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001dd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d11b      	bne.n	8001e14 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001ddc:	4812      	ldr	r0, [pc, #72]	; (8001e28 <HAL_InitTick+0xec>)
 8001dde:	f002 fa85 	bl	80042ec <HAL_TIM_Base_Start_IT>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001de8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d111      	bne.n	8001e14 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001df0:	2036      	movs	r0, #54	; 0x36
 8001df2:	f000 fa8f 	bl	8002314 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b0f      	cmp	r3, #15
 8001dfa:	d808      	bhi.n	8001e0e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	2036      	movs	r0, #54	; 0x36
 8001e02:	f000 fa6b 	bl	80022dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_InitTick+0xf4>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	e002      	b.n	8001e14 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3738      	adds	r7, #56	; 0x38
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800
 8001e24:	431bde83 	.word	0x431bde83
 8001e28:	2000155c 	.word	0x2000155c
 8001e2c:	40001000 	.word	0x40001000
 8001e30:	20000004 	.word	0x20000004

08001e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <NMI_Handler+0x4>

08001e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <HardFault_Handler+0x4>

08001e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <MemManage_Handler+0x4>

08001e46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <BusFault_Handler+0x4>

08001e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <UsageFault_Handler+0x4>

08001e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
//HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
	if(LED_flag==SET){
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <EXTI0_IRQHandler+0x24>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <EXTI0_IRQHandler+0x14>
		LED_flag=RESET;
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <EXTI0_IRQHandler+0x24>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	e002      	b.n	8001e7a <EXTI0_IRQHandler+0x1a>
	}
	else{
		LED_flag=SET;
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <EXTI0_IRQHandler+0x24>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
	}
	//LED_flag=~LED_flag;
	//HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_INT_Pin);
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f000 ff7e 	bl	8002d7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	2000155a 	.word	0x2000155a

08001e88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <TIM6_DAC_IRQHandler+0x10>)
 8001e8e:	f002 fa9d 	bl	80043cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000155c 	.word	0x2000155c

08001e9c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	ulStatsTimerTicks++;
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <TIM7_IRQHandler+0x18>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	4a03      	ldr	r2, [pc, #12]	; (8001eb4 <TIM7_IRQHandler+0x18>)
 8001ea8:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001eaa:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <TIM7_IRQHandler+0x1c>)
 8001eac:	f002 fa8e 	bl	80043cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	200001fc 	.word	0x200001fc
 8001eb8:	20000318 	.word	0x20000318

08001ebc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <DMA2_Stream0_IRQHandler+0x10>)
 8001ec2:	f000 fb3b 	bl	800253c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000258 	.word	0x20000258

08001ed0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <DMA2_Stream3_IRQHandler+0x10>)
 8001ed6:	f000 fb31 	bl	800253c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200002b8 	.word	0x200002b8

08001ee4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
	return 1;
 8001ee8:	2301      	movs	r3, #1
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_kill>:

int _kill(int pid, int sig)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001efe:	f006 f96d 	bl	80081dc <__errno>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2216      	movs	r2, #22
 8001f06:	601a      	str	r2, [r3, #0]
	return -1;
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <_exit>:

void _exit (int status)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ffe7 	bl	8001ef4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f26:	e7fe      	b.n	8001f26 <_exit+0x12>

08001f28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	e00a      	b.n	8001f50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f3a:	f3af 8000 	nop.w
 8001f3e:	4601      	mov	r1, r0
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	60ba      	str	r2, [r7, #8]
 8001f46:	b2ca      	uxtb	r2, r1
 8001f48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	dbf0      	blt.n	8001f3a <_read+0x12>
	}

return len;
 8001f58:	687b      	ldr	r3, [r7, #4]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	e009      	b.n	8001f88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	60ba      	str	r2, [r7, #8]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	3301      	adds	r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	dbf1      	blt.n	8001f74 <_write+0x12>
	}
	return len;
 8001f90:	687b      	ldr	r3, [r7, #4]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <_close>:

int _close(int file)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
	return -1;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fc2:	605a      	str	r2, [r3, #4]
	return 0;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <_isatty>:

int _isatty(int file)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
	return 1;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <_sbrk+0x5c>)
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <_sbrk+0x60>)
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <_sbrk+0x64>)
 8002022:	4a12      	ldr	r2, [pc, #72]	; (800206c <_sbrk+0x68>)
 8002024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d207      	bcs.n	8002044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002034:	f006 f8d2 	bl	80081dc <__errno>
 8002038:	4603      	mov	r3, r0
 800203a:	220c      	movs	r2, #12
 800203c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	e009      	b.n	8002058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	4a05      	ldr	r2, [pc, #20]	; (8002068 <_sbrk+0x64>)
 8002054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002056:	68fb      	ldr	r3, [r7, #12]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20020000 	.word	0x20020000
 8002064:	00000400 	.word	0x00000400
 8002068:	200015a4 	.word	0x200015a4
 800206c:	20005f28 	.word	0x20005f28

08002070 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <SystemInit+0x20>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <SystemInit+0x20>)
 800207c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002098:	480d      	ldr	r0, [pc, #52]	; (80020d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800209a:	490e      	ldr	r1, [pc, #56]	; (80020d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800209c:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a0:	e002      	b.n	80020a8 <LoopCopyDataInit>

080020a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a6:	3304      	adds	r3, #4

080020a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ac:	d3f9      	bcc.n	80020a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ae:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020b0:	4c0b      	ldr	r4, [pc, #44]	; (80020e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b4:	e001      	b.n	80020ba <LoopFillZerobss>

080020b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b8:	3204      	adds	r2, #4

080020ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020bc:	d3fb      	bcc.n	80020b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020be:	f7ff ffd7 	bl	8002070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020c2:	f006 f891 	bl	80081e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020c6:	f7ff f823 	bl	8001110 <main>
  bx  lr    
 80020ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80020d8:	0800c868 	.word	0x0800c868
  ldr r2, =_sbss
 80020dc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80020e0:	20005f24 	.word	0x20005f24

080020e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020e4:	e7fe      	b.n	80020e4 <ADC_IRQHandler>
	...

080020e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_Init+0x40>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <HAL_Init+0x40>)
 80020f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_Init+0x40>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <HAL_Init+0x40>)
 80020fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002102:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <HAL_Init+0x40>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a07      	ldr	r2, [pc, #28]	; (8002128 <HAL_Init+0x40>)
 800210a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002110:	2003      	movs	r0, #3
 8002112:	f000 f8d8 	bl	80022c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002116:	200f      	movs	r0, #15
 8002118:	f7ff fe10 	bl	8001d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800211c:	f7ff fcc6 	bl	8001aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023c00 	.word	0x40023c00

0800212c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_IncTick+0x20>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_IncTick+0x24>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4413      	add	r3, r2
 800213c:	4a04      	ldr	r2, [pc, #16]	; (8002150 <HAL_IncTick+0x24>)
 800213e:	6013      	str	r3, [r2, #0]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20000008 	.word	0x20000008
 8002150:	200015a8 	.word	0x200015a8

08002154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return uwTick;
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <HAL_GetTick+0x14>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	200015a8 	.word	0x200015a8

0800216c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002188:	4013      	ands	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800219c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219e:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	60d3      	str	r3, [r2, #12]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <__NVIC_GetPriorityGrouping+0x18>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	f003 0307 	and.w	r3, r3, #7
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	db0b      	blt.n	80021fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	4907      	ldr	r1, [pc, #28]	; (8002208 <__NVIC_EnableIRQ+0x38>)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	2001      	movs	r0, #1
 80021f2:	fa00 f202 	lsl.w	r2, r0, r2
 80021f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000e100 	.word	0xe000e100

0800220c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	2b00      	cmp	r3, #0
 800221e:	db0a      	blt.n	8002236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	490c      	ldr	r1, [pc, #48]	; (8002258 <__NVIC_SetPriority+0x4c>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	0112      	lsls	r2, r2, #4
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	440b      	add	r3, r1
 8002230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002234:	e00a      	b.n	800224c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4908      	ldr	r1, [pc, #32]	; (800225c <__NVIC_SetPriority+0x50>)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	3b04      	subs	r3, #4
 8002244:	0112      	lsls	r2, r2, #4
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	440b      	add	r3, r1
 800224a:	761a      	strb	r2, [r3, #24]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000e100 	.word	0xe000e100
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f1c3 0307 	rsb	r3, r3, #7
 800227a:	2b04      	cmp	r3, #4
 800227c:	bf28      	it	cs
 800227e:	2304      	movcs	r3, #4
 8002280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3304      	adds	r3, #4
 8002286:	2b06      	cmp	r3, #6
 8002288:	d902      	bls.n	8002290 <NVIC_EncodePriority+0x30>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3b03      	subs	r3, #3
 800228e:	e000      	b.n	8002292 <NVIC_EncodePriority+0x32>
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	401a      	ands	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	43d9      	mvns	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b8:	4313      	orrs	r3, r2
         );
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3724      	adds	r7, #36	; 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ff4c 	bl	800216c <__NVIC_SetPriorityGrouping>
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ee:	f7ff ff61 	bl	80021b4 <__NVIC_GetPriorityGrouping>
 80022f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68b9      	ldr	r1, [r7, #8]
 80022f8:	6978      	ldr	r0, [r7, #20]
 80022fa:	f7ff ffb1 	bl	8002260 <NVIC_EncodePriority>
 80022fe:	4602      	mov	r2, r0
 8002300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff80 	bl	800220c <__NVIC_SetPriority>
}
 800230c:	bf00      	nop
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff54 	bl	80021d0 <__NVIC_EnableIRQ>
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff ff0a 	bl	8002154 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e099      	b.n	8002480 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800236c:	e00f      	b.n	800238e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800236e:	f7ff fef1 	bl	8002154 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b05      	cmp	r3, #5
 800237a:	d908      	bls.n	800238e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2220      	movs	r2, #32
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2203      	movs	r2, #3
 8002386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e078      	b.n	8002480 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1e8      	bne.n	800236e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	4b38      	ldr	r3, [pc, #224]	; (8002488 <HAL_DMA_Init+0x158>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d107      	bne.n	80023f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	4313      	orrs	r3, r2
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f023 0307 	bic.w	r3, r3, #7
 800240e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	4313      	orrs	r3, r2
 8002418:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	2b04      	cmp	r3, #4
 8002420:	d117      	bne.n	8002452 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00e      	beq.n	8002452 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 fa6f 	bl	8002918 <DMA_CheckFifoParam>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2240      	movs	r2, #64	; 0x40
 8002444:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800244e:	2301      	movs	r3, #1
 8002450:	e016      	b.n	8002480 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fa26 	bl	80028ac <DMA_CalcBaseAndBitshift>
 8002460:	4603      	mov	r3, r0
 8002462:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002468:	223f      	movs	r2, #63	; 0x3f
 800246a:	409a      	lsls	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	f010803f 	.word	0xf010803f

0800248c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_DMA_Start_IT+0x26>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e040      	b.n	8002534 <HAL_DMA_Start_IT+0xa8>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d12f      	bne.n	8002526 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2202      	movs	r2, #2
 80024ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 f9b8 	bl	8002850 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	223f      	movs	r2, #63	; 0x3f
 80024e6:	409a      	lsls	r2, r3
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0216 	orr.w	r2, r2, #22
 80024fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	2b00      	cmp	r3, #0
 8002502:	d007      	beq.n	8002514 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0208 	orr.w	r2, r2, #8
 8002512:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e005      	b.n	8002532 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800252e:	2302      	movs	r3, #2
 8002530:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002532:	7dfb      	ldrb	r3, [r7, #23]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002548:	4b8e      	ldr	r3, [pc, #568]	; (8002784 <HAL_DMA_IRQHandler+0x248>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a8e      	ldr	r2, [pc, #568]	; (8002788 <HAL_DMA_IRQHandler+0x24c>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	0a9b      	lsrs	r3, r3, #10
 8002554:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002566:	2208      	movs	r2, #8
 8002568:	409a      	lsls	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d01a      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d013      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0204 	bic.w	r2, r2, #4
 800258e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002594:	2208      	movs	r2, #8
 8002596:	409a      	lsls	r2, r3
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	f043 0201 	orr.w	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ac:	2201      	movs	r2, #1
 80025ae:	409a      	lsls	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d012      	beq.n	80025de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ca:	2201      	movs	r2, #1
 80025cc:	409a      	lsls	r2, r3
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d6:	f043 0202 	orr.w	r2, r3, #2
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e2:	2204      	movs	r2, #4
 80025e4:	409a      	lsls	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d012      	beq.n	8002614 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00b      	beq.n	8002614 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002600:	2204      	movs	r2, #4
 8002602:	409a      	lsls	r2, r3
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260c:	f043 0204 	orr.w	r2, r3, #4
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002618:	2210      	movs	r2, #16
 800261a:	409a      	lsls	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d043      	beq.n	80026ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d03c      	beq.n	80026ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002636:	2210      	movs	r2, #16
 8002638:	409a      	lsls	r2, r3
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d018      	beq.n	800267e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d108      	bne.n	800266c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d024      	beq.n	80026ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	4798      	blx	r3
 800266a:	e01f      	b.n	80026ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01b      	beq.n	80026ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	4798      	blx	r3
 800267c:	e016      	b.n	80026ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d107      	bne.n	800269c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0208 	bic.w	r2, r2, #8
 800269a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	2220      	movs	r2, #32
 80026b2:	409a      	lsls	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 808f 	beq.w	80027dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 8087 	beq.w	80027dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d2:	2220      	movs	r2, #32
 80026d4:	409a      	lsls	r2, r3
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b05      	cmp	r3, #5
 80026e4:	d136      	bne.n	8002754 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0216 	bic.w	r2, r2, #22
 80026f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002704:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	2b00      	cmp	r3, #0
 800270c:	d103      	bne.n	8002716 <HAL_DMA_IRQHandler+0x1da>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002712:	2b00      	cmp	r3, #0
 8002714:	d007      	beq.n	8002726 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0208 	bic.w	r2, r2, #8
 8002724:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272a:	223f      	movs	r2, #63	; 0x3f
 800272c:	409a      	lsls	r2, r3
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002746:	2b00      	cmp	r3, #0
 8002748:	d07e      	beq.n	8002848 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	4798      	blx	r3
        }
        return;
 8002752:	e079      	b.n	8002848 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d01d      	beq.n	800279e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10d      	bne.n	800278c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002774:	2b00      	cmp	r3, #0
 8002776:	d031      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
 8002780:	e02c      	b.n	80027dc <HAL_DMA_IRQHandler+0x2a0>
 8002782:	bf00      	nop
 8002784:	20000000 	.word	0x20000000
 8002788:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d023      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4798      	blx	r3
 800279c:	e01e      	b.n	80027dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10f      	bne.n	80027cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0210 	bic.w	r2, r2, #16
 80027ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d032      	beq.n	800284a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d022      	beq.n	8002836 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2205      	movs	r2, #5
 80027f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	3301      	adds	r3, #1
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	429a      	cmp	r2, r3
 8002812:	d307      	bcc.n	8002824 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f2      	bne.n	8002808 <HAL_DMA_IRQHandler+0x2cc>
 8002822:	e000      	b.n	8002826 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002824:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d005      	beq.n	800284a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	4798      	blx	r3
 8002846:	e000      	b.n	800284a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002848:	bf00      	nop
    }
  }
}
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800286c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b40      	cmp	r3, #64	; 0x40
 800287c:	d108      	bne.n	8002890 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800288e:	e007      	b.n	80028a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	60da      	str	r2, [r3, #12]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	3b10      	subs	r3, #16
 80028bc:	4a14      	ldr	r2, [pc, #80]	; (8002910 <DMA_CalcBaseAndBitshift+0x64>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028c6:	4a13      	ldr	r2, [pc, #76]	; (8002914 <DMA_CalcBaseAndBitshift+0x68>)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4413      	add	r3, r2
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d909      	bls.n	80028ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028e2:	f023 0303 	bic.w	r3, r3, #3
 80028e6:	1d1a      	adds	r2, r3, #4
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	659a      	str	r2, [r3, #88]	; 0x58
 80028ec:	e007      	b.n	80028fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028f6:	f023 0303 	bic.w	r3, r3, #3
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002902:	4618      	mov	r0, r3
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	aaaaaaab 	.word	0xaaaaaaab
 8002914:	0800c404 	.word	0x0800c404

08002918 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d11f      	bne.n	8002972 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d856      	bhi.n	80029e6 <DMA_CheckFifoParam+0xce>
 8002938:	a201      	add	r2, pc, #4	; (adr r2, 8002940 <DMA_CheckFifoParam+0x28>)
 800293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293e:	bf00      	nop
 8002940:	08002951 	.word	0x08002951
 8002944:	08002963 	.word	0x08002963
 8002948:	08002951 	.word	0x08002951
 800294c:	080029e7 	.word	0x080029e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d046      	beq.n	80029ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002960:	e043      	b.n	80029ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800296a:	d140      	bne.n	80029ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002970:	e03d      	b.n	80029ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800297a:	d121      	bne.n	80029c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d837      	bhi.n	80029f2 <DMA_CheckFifoParam+0xda>
 8002982:	a201      	add	r2, pc, #4	; (adr r2, 8002988 <DMA_CheckFifoParam+0x70>)
 8002984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002988:	08002999 	.word	0x08002999
 800298c:	0800299f 	.word	0x0800299f
 8002990:	08002999 	.word	0x08002999
 8002994:	080029b1 	.word	0x080029b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
      break;
 800299c:	e030      	b.n	8002a00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d025      	beq.n	80029f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ae:	e022      	b.n	80029f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029b8:	d11f      	bne.n	80029fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029be:	e01c      	b.n	80029fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d903      	bls.n	80029ce <DMA_CheckFifoParam+0xb6>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d003      	beq.n	80029d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029cc:	e018      	b.n	8002a00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
      break;
 80029d2:	e015      	b.n	8002a00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00e      	beq.n	80029fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
      break;
 80029e4:	e00b      	b.n	80029fe <DMA_CheckFifoParam+0xe6>
      break;
 80029e6:	bf00      	nop
 80029e8:	e00a      	b.n	8002a00 <DMA_CheckFifoParam+0xe8>
      break;
 80029ea:	bf00      	nop
 80029ec:	e008      	b.n	8002a00 <DMA_CheckFifoParam+0xe8>
      break;
 80029ee:	bf00      	nop
 80029f0:	e006      	b.n	8002a00 <DMA_CheckFifoParam+0xe8>
      break;
 80029f2:	bf00      	nop
 80029f4:	e004      	b.n	8002a00 <DMA_CheckFifoParam+0xe8>
      break;
 80029f6:	bf00      	nop
 80029f8:	e002      	b.n	8002a00 <DMA_CheckFifoParam+0xe8>
      break;   
 80029fa:	bf00      	nop
 80029fc:	e000      	b.n	8002a00 <DMA_CheckFifoParam+0xe8>
      break;
 80029fe:	bf00      	nop
    }
  } 
  
  return status; 
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop

08002a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	e16b      	b.n	8002d04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	f040 815a 	bne.w	8002cfe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d005      	beq.n	8002a62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d130      	bne.n	8002ac4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a98:	2201      	movs	r2, #1
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 0201 	and.w	r2, r3, #1
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d017      	beq.n	8002b00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	2203      	movs	r2, #3
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d123      	bne.n	8002b54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	08da      	lsrs	r2, r3, #3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3208      	adds	r2, #8
 8002b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	220f      	movs	r2, #15
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	08da      	lsrs	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3208      	adds	r2, #8
 8002b4e:	69b9      	ldr	r1, [r7, #24]
 8002b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	2203      	movs	r2, #3
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0203 	and.w	r2, r3, #3
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80b4 	beq.w	8002cfe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	4b60      	ldr	r3, [pc, #384]	; (8002d1c <HAL_GPIO_Init+0x30c>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	4a5f      	ldr	r2, [pc, #380]	; (8002d1c <HAL_GPIO_Init+0x30c>)
 8002ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba6:	4b5d      	ldr	r3, [pc, #372]	; (8002d1c <HAL_GPIO_Init+0x30c>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bb2:	4a5b      	ldr	r2, [pc, #364]	; (8002d20 <HAL_GPIO_Init+0x310>)
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	089b      	lsrs	r3, r3, #2
 8002bb8:	3302      	adds	r3, #2
 8002bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	220f      	movs	r2, #15
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a52      	ldr	r2, [pc, #328]	; (8002d24 <HAL_GPIO_Init+0x314>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d02b      	beq.n	8002c36 <HAL_GPIO_Init+0x226>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a51      	ldr	r2, [pc, #324]	; (8002d28 <HAL_GPIO_Init+0x318>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d025      	beq.n	8002c32 <HAL_GPIO_Init+0x222>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a50      	ldr	r2, [pc, #320]	; (8002d2c <HAL_GPIO_Init+0x31c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01f      	beq.n	8002c2e <HAL_GPIO_Init+0x21e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a4f      	ldr	r2, [pc, #316]	; (8002d30 <HAL_GPIO_Init+0x320>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d019      	beq.n	8002c2a <HAL_GPIO_Init+0x21a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a4e      	ldr	r2, [pc, #312]	; (8002d34 <HAL_GPIO_Init+0x324>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <HAL_GPIO_Init+0x216>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a4d      	ldr	r2, [pc, #308]	; (8002d38 <HAL_GPIO_Init+0x328>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00d      	beq.n	8002c22 <HAL_GPIO_Init+0x212>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a4c      	ldr	r2, [pc, #304]	; (8002d3c <HAL_GPIO_Init+0x32c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d007      	beq.n	8002c1e <HAL_GPIO_Init+0x20e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4b      	ldr	r2, [pc, #300]	; (8002d40 <HAL_GPIO_Init+0x330>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d101      	bne.n	8002c1a <HAL_GPIO_Init+0x20a>
 8002c16:	2307      	movs	r3, #7
 8002c18:	e00e      	b.n	8002c38 <HAL_GPIO_Init+0x228>
 8002c1a:	2308      	movs	r3, #8
 8002c1c:	e00c      	b.n	8002c38 <HAL_GPIO_Init+0x228>
 8002c1e:	2306      	movs	r3, #6
 8002c20:	e00a      	b.n	8002c38 <HAL_GPIO_Init+0x228>
 8002c22:	2305      	movs	r3, #5
 8002c24:	e008      	b.n	8002c38 <HAL_GPIO_Init+0x228>
 8002c26:	2304      	movs	r3, #4
 8002c28:	e006      	b.n	8002c38 <HAL_GPIO_Init+0x228>
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e004      	b.n	8002c38 <HAL_GPIO_Init+0x228>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e002      	b.n	8002c38 <HAL_GPIO_Init+0x228>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_GPIO_Init+0x228>
 8002c36:	2300      	movs	r3, #0
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	f002 0203 	and.w	r2, r2, #3
 8002c3e:	0092      	lsls	r2, r2, #2
 8002c40:	4093      	lsls	r3, r2
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c48:	4935      	ldr	r1, [pc, #212]	; (8002d20 <HAL_GPIO_Init+0x310>)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	089b      	lsrs	r3, r3, #2
 8002c4e:	3302      	adds	r3, #2
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c56:	4b3b      	ldr	r3, [pc, #236]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c7a:	4a32      	ldr	r2, [pc, #200]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c80:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ca4:	4a27      	ldr	r2, [pc, #156]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002caa:	4b26      	ldr	r3, [pc, #152]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cce:	4a1d      	ldr	r2, [pc, #116]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cf8:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3301      	adds	r3, #1
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	2b0f      	cmp	r3, #15
 8002d08:	f67f ae90 	bls.w	8002a2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	3724      	adds	r7, #36	; 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40013800 	.word	0x40013800
 8002d24:	40020000 	.word	0x40020000
 8002d28:	40020400 	.word	0x40020400
 8002d2c:	40020800 	.word	0x40020800
 8002d30:	40020c00 	.word	0x40020c00
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40021400 	.word	0x40021400
 8002d3c:	40021800 	.word	0x40021800
 8002d40:	40021c00 	.word	0x40021c00
 8002d44:	40013c00 	.word	0x40013c00

08002d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	807b      	strh	r3, [r7, #2]
 8002d54:	4613      	mov	r3, r2
 8002d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d58:	787b      	ldrb	r3, [r7, #1]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d5e:	887a      	ldrh	r2, [r7, #2]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d64:	e003      	b.n	8002d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d66:	887b      	ldrh	r3, [r7, #2]
 8002d68:	041a      	lsls	r2, r3, #16
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	619a      	str	r2, [r3, #24]
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d006      	beq.n	8002da0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d92:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 f806 	bl	8002dac <HAL_GPIO_EXTI_Callback>
  }
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40013c00 	.word	0x40013c00

08002dac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e267      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d075      	beq.n	8002ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002de2:	4b88      	ldr	r3, [pc, #544]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d00c      	beq.n	8002e08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dee:	4b85      	ldr	r3, [pc, #532]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d112      	bne.n	8002e20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dfa:	4b82      	ldr	r3, [pc, #520]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e06:	d10b      	bne.n	8002e20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e08:	4b7e      	ldr	r3, [pc, #504]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d05b      	beq.n	8002ecc <HAL_RCC_OscConfig+0x108>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d157      	bne.n	8002ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e242      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e28:	d106      	bne.n	8002e38 <HAL_RCC_OscConfig+0x74>
 8002e2a:	4b76      	ldr	r3, [pc, #472]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a75      	ldr	r2, [pc, #468]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e01d      	b.n	8002e74 <HAL_RCC_OscConfig+0xb0>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x98>
 8002e42:	4b70      	ldr	r3, [pc, #448]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a6f      	ldr	r2, [pc, #444]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	4b6d      	ldr	r3, [pc, #436]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a6c      	ldr	r2, [pc, #432]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e00b      	b.n	8002e74 <HAL_RCC_OscConfig+0xb0>
 8002e5c:	4b69      	ldr	r3, [pc, #420]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a68      	ldr	r2, [pc, #416]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	4b66      	ldr	r3, [pc, #408]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a65      	ldr	r2, [pc, #404]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d013      	beq.n	8002ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7ff f96a 	bl	8002154 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e84:	f7ff f966 	bl	8002154 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	; 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e207      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	4b5b      	ldr	r3, [pc, #364]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0xc0>
 8002ea2:	e014      	b.n	8002ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7ff f956 	bl	8002154 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eac:	f7ff f952 	bl	8002154 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	; 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e1f3      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ebe:	4b51      	ldr	r3, [pc, #324]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0xe8>
 8002eca:	e000      	b.n	8002ece <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d063      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eda:	4b4a      	ldr	r3, [pc, #296]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00b      	beq.n	8002efe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ee6:	4b47      	ldr	r3, [pc, #284]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d11c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ef2:	4b44      	ldr	r3, [pc, #272]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d116      	bne.n	8002f2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efe:	4b41      	ldr	r3, [pc, #260]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d005      	beq.n	8002f16 <HAL_RCC_OscConfig+0x152>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d001      	beq.n	8002f16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e1c7      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f16:	4b3b      	ldr	r3, [pc, #236]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4937      	ldr	r1, [pc, #220]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2a:	e03a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d020      	beq.n	8002f76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f34:	4b34      	ldr	r3, [pc, #208]	; (8003008 <HAL_RCC_OscConfig+0x244>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7ff f90b 	bl	8002154 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f42:	f7ff f907 	bl	8002154 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e1a8      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f54:	4b2b      	ldr	r3, [pc, #172]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f60:	4b28      	ldr	r3, [pc, #160]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4925      	ldr	r1, [pc, #148]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	600b      	str	r3, [r1, #0]
 8002f74:	e015      	b.n	8002fa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f76:	4b24      	ldr	r3, [pc, #144]	; (8003008 <HAL_RCC_OscConfig+0x244>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7ff f8ea 	bl	8002154 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f84:	f7ff f8e6 	bl	8002154 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e187      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f96:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d036      	beq.n	800301c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d016      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <HAL_RCC_OscConfig+0x248>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbc:	f7ff f8ca 	bl	8002154 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc4:	f7ff f8c6 	bl	8002154 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e167      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x200>
 8002fe2:	e01b      	b.n	800301c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fe4:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_RCC_OscConfig+0x248>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fea:	f7ff f8b3 	bl	8002154 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff0:	e00e      	b.n	8003010 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff2:	f7ff f8af 	bl	8002154 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d907      	bls.n	8003010 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e150      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
 8003004:	40023800 	.word	0x40023800
 8003008:	42470000 	.word	0x42470000
 800300c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003010:	4b88      	ldr	r3, [pc, #544]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 8003012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1ea      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 8097 	beq.w	8003158 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800302a:	2300      	movs	r3, #0
 800302c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800302e:	4b81      	ldr	r3, [pc, #516]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10f      	bne.n	800305a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	4b7d      	ldr	r3, [pc, #500]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	4a7c      	ldr	r2, [pc, #496]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 8003044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003048:	6413      	str	r3, [r2, #64]	; 0x40
 800304a:	4b7a      	ldr	r3, [pc, #488]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003056:	2301      	movs	r3, #1
 8003058:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305a:	4b77      	ldr	r3, [pc, #476]	; (8003238 <HAL_RCC_OscConfig+0x474>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003062:	2b00      	cmp	r3, #0
 8003064:	d118      	bne.n	8003098 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003066:	4b74      	ldr	r3, [pc, #464]	; (8003238 <HAL_RCC_OscConfig+0x474>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a73      	ldr	r2, [pc, #460]	; (8003238 <HAL_RCC_OscConfig+0x474>)
 800306c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003072:	f7ff f86f 	bl	8002154 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307a:	f7ff f86b 	bl	8002154 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e10c      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308c:	4b6a      	ldr	r3, [pc, #424]	; (8003238 <HAL_RCC_OscConfig+0x474>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f0      	beq.n	800307a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d106      	bne.n	80030ae <HAL_RCC_OscConfig+0x2ea>
 80030a0:	4b64      	ldr	r3, [pc, #400]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	4a63      	ldr	r2, [pc, #396]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6713      	str	r3, [r2, #112]	; 0x70
 80030ac:	e01c      	b.n	80030e8 <HAL_RCC_OscConfig+0x324>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b05      	cmp	r3, #5
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCC_OscConfig+0x30c>
 80030b6:	4b5f      	ldr	r3, [pc, #380]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	4a5e      	ldr	r2, [pc, #376]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 80030bc:	f043 0304 	orr.w	r3, r3, #4
 80030c0:	6713      	str	r3, [r2, #112]	; 0x70
 80030c2:	4b5c      	ldr	r3, [pc, #368]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c6:	4a5b      	ldr	r2, [pc, #364]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6713      	str	r3, [r2, #112]	; 0x70
 80030ce:	e00b      	b.n	80030e8 <HAL_RCC_OscConfig+0x324>
 80030d0:	4b58      	ldr	r3, [pc, #352]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d4:	4a57      	ldr	r2, [pc, #348]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 80030d6:	f023 0301 	bic.w	r3, r3, #1
 80030da:	6713      	str	r3, [r2, #112]	; 0x70
 80030dc:	4b55      	ldr	r3, [pc, #340]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e0:	4a54      	ldr	r2, [pc, #336]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 80030e2:	f023 0304 	bic.w	r3, r3, #4
 80030e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d015      	beq.n	800311c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f0:	f7ff f830 	bl	8002154 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f6:	e00a      	b.n	800310e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f8:	f7ff f82c 	bl	8002154 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	; 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e0cb      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800310e:	4b49      	ldr	r3, [pc, #292]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0ee      	beq.n	80030f8 <HAL_RCC_OscConfig+0x334>
 800311a:	e014      	b.n	8003146 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311c:	f7ff f81a 	bl	8002154 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003122:	e00a      	b.n	800313a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003124:	f7ff f816 	bl	8002154 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e0b5      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313a:	4b3e      	ldr	r3, [pc, #248]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 800313c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1ee      	bne.n	8003124 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003146:	7dfb      	ldrb	r3, [r7, #23]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d105      	bne.n	8003158 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800314c:	4b39      	ldr	r3, [pc, #228]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	4a38      	ldr	r2, [pc, #224]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 8003152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003156:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80a1 	beq.w	80032a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003162:	4b34      	ldr	r3, [pc, #208]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	2b08      	cmp	r3, #8
 800316c:	d05c      	beq.n	8003228 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d141      	bne.n	80031fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003176:	4b31      	ldr	r3, [pc, #196]	; (800323c <HAL_RCC_OscConfig+0x478>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fe ffea 	bl	8002154 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003184:	f7fe ffe6 	bl	8002154 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e087      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003196:	4b27      	ldr	r3, [pc, #156]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69da      	ldr	r2, [r3, #28]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	019b      	lsls	r3, r3, #6
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	085b      	lsrs	r3, r3, #1
 80031ba:	3b01      	subs	r3, #1
 80031bc:	041b      	lsls	r3, r3, #16
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	061b      	lsls	r3, r3, #24
 80031c6:	491b      	ldr	r1, [pc, #108]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <HAL_RCC_OscConfig+0x478>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7fe ffbf 	bl	8002154 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031da:	f7fe ffbb 	bl	8002154 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e05c      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ec:	4b11      	ldr	r3, [pc, #68]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x416>
 80031f8:	e054      	b.n	80032a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fa:	4b10      	ldr	r3, [pc, #64]	; (800323c <HAL_RCC_OscConfig+0x478>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fe ffa8 	bl	8002154 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003208:	f7fe ffa4 	bl	8002154 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e045      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <HAL_RCC_OscConfig+0x470>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x444>
 8003226:	e03d      	b.n	80032a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d107      	bne.n	8003240 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e038      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
 8003234:	40023800 	.word	0x40023800
 8003238:	40007000 	.word	0x40007000
 800323c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <HAL_RCC_OscConfig+0x4ec>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d028      	beq.n	80032a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d121      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003266:	429a      	cmp	r2, r3
 8003268:	d11a      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003270:	4013      	ands	r3, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003276:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003278:	4293      	cmp	r3, r2
 800327a:	d111      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	3b01      	subs	r3, #1
 800328a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800

080032b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0cc      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032c8:	4b68      	ldr	r3, [pc, #416]	; (800346c <HAL_RCC_ClockConfig+0x1b8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d90c      	bls.n	80032f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d6:	4b65      	ldr	r3, [pc, #404]	; (800346c <HAL_RCC_ClockConfig+0x1b8>)
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032de:	4b63      	ldr	r3, [pc, #396]	; (800346c <HAL_RCC_ClockConfig+0x1b8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0b8      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003308:	4b59      	ldr	r3, [pc, #356]	; (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4a58      	ldr	r2, [pc, #352]	; (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003312:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003320:	4b53      	ldr	r3, [pc, #332]	; (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	4a52      	ldr	r2, [pc, #328]	; (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800332a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800332c:	4b50      	ldr	r3, [pc, #320]	; (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	494d      	ldr	r1, [pc, #308]	; (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	4313      	orrs	r3, r2
 800333c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d044      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d107      	bne.n	8003362 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	4b47      	ldr	r3, [pc, #284]	; (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d119      	bne.n	8003392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e07f      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d003      	beq.n	8003372 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800336e:	2b03      	cmp	r3, #3
 8003370:	d107      	bne.n	8003382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003372:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e06f      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003382:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e067      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003392:	4b37      	ldr	r3, [pc, #220]	; (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f023 0203 	bic.w	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4934      	ldr	r1, [pc, #208]	; (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033a4:	f7fe fed6 	bl	8002154 <HAL_GetTick>
 80033a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033aa:	e00a      	b.n	80033c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ac:	f7fe fed2 	bl	8002154 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e04f      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c2:	4b2b      	ldr	r3, [pc, #172]	; (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 020c 	and.w	r2, r3, #12
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d1eb      	bne.n	80033ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033d4:	4b25      	ldr	r3, [pc, #148]	; (800346c <HAL_RCC_ClockConfig+0x1b8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d20c      	bcs.n	80033fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	4b22      	ldr	r3, [pc, #136]	; (800346c <HAL_RCC_ClockConfig+0x1b8>)
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b20      	ldr	r3, [pc, #128]	; (800346c <HAL_RCC_ClockConfig+0x1b8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e032      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003408:	4b19      	ldr	r3, [pc, #100]	; (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4916      	ldr	r1, [pc, #88]	; (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	4313      	orrs	r3, r2
 8003418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003426:	4b12      	ldr	r3, [pc, #72]	; (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	490e      	ldr	r1, [pc, #56]	; (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800343a:	f000 f821 	bl	8003480 <HAL_RCC_GetSysClockFreq>
 800343e:	4602      	mov	r2, r0
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	490a      	ldr	r1, [pc, #40]	; (8003474 <HAL_RCC_ClockConfig+0x1c0>)
 800344c:	5ccb      	ldrb	r3, [r1, r3]
 800344e:	fa22 f303 	lsr.w	r3, r2, r3
 8003452:	4a09      	ldr	r2, [pc, #36]	; (8003478 <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003456:	4b09      	ldr	r3, [pc, #36]	; (800347c <HAL_RCC_ClockConfig+0x1c8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fe fc6e 	bl	8001d3c <HAL_InitTick>

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023c00 	.word	0x40023c00
 8003470:	40023800 	.word	0x40023800
 8003474:	0800c3ec 	.word	0x0800c3ec
 8003478:	20000000 	.word	0x20000000
 800347c:	20000004 	.word	0x20000004

08003480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003484:	b090      	sub	sp, #64	; 0x40
 8003486:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	637b      	str	r3, [r7, #52]	; 0x34
 800348c:	2300      	movs	r3, #0
 800348e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003490:	2300      	movs	r3, #0
 8003492:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003498:	4b59      	ldr	r3, [pc, #356]	; (8003600 <HAL_RCC_GetSysClockFreq+0x180>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 030c 	and.w	r3, r3, #12
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d00d      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0x40>
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	f200 80a1 	bhi.w	80035ec <HAL_RCC_GetSysClockFreq+0x16c>
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0x34>
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d003      	beq.n	80034ba <HAL_RCC_GetSysClockFreq+0x3a>
 80034b2:	e09b      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034b4:	4b53      	ldr	r3, [pc, #332]	; (8003604 <HAL_RCC_GetSysClockFreq+0x184>)
 80034b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80034b8:	e09b      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ba:	4b53      	ldr	r3, [pc, #332]	; (8003608 <HAL_RCC_GetSysClockFreq+0x188>)
 80034bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034be:	e098      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034c0:	4b4f      	ldr	r3, [pc, #316]	; (8003600 <HAL_RCC_GetSysClockFreq+0x180>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ca:	4b4d      	ldr	r3, [pc, #308]	; (8003600 <HAL_RCC_GetSysClockFreq+0x180>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d028      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d6:	4b4a      	ldr	r3, [pc, #296]	; (8003600 <HAL_RCC_GetSysClockFreq+0x180>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	099b      	lsrs	r3, r3, #6
 80034dc:	2200      	movs	r2, #0
 80034de:	623b      	str	r3, [r7, #32]
 80034e0:	627a      	str	r2, [r7, #36]	; 0x24
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034e8:	2100      	movs	r1, #0
 80034ea:	4b47      	ldr	r3, [pc, #284]	; (8003608 <HAL_RCC_GetSysClockFreq+0x188>)
 80034ec:	fb03 f201 	mul.w	r2, r3, r1
 80034f0:	2300      	movs	r3, #0
 80034f2:	fb00 f303 	mul.w	r3, r0, r3
 80034f6:	4413      	add	r3, r2
 80034f8:	4a43      	ldr	r2, [pc, #268]	; (8003608 <HAL_RCC_GetSysClockFreq+0x188>)
 80034fa:	fba0 1202 	umull	r1, r2, r0, r2
 80034fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003500:	460a      	mov	r2, r1
 8003502:	62ba      	str	r2, [r7, #40]	; 0x28
 8003504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003506:	4413      	add	r3, r2
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800350a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350c:	2200      	movs	r2, #0
 800350e:	61bb      	str	r3, [r7, #24]
 8003510:	61fa      	str	r2, [r7, #28]
 8003512:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003516:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800351a:	f7fd fb45 	bl	8000ba8 <__aeabi_uldivmod>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4613      	mov	r3, r2
 8003524:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003526:	e053      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003528:	4b35      	ldr	r3, [pc, #212]	; (8003600 <HAL_RCC_GetSysClockFreq+0x180>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	099b      	lsrs	r3, r3, #6
 800352e:	2200      	movs	r2, #0
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	617a      	str	r2, [r7, #20]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800353a:	f04f 0b00 	mov.w	fp, #0
 800353e:	4652      	mov	r2, sl
 8003540:	465b      	mov	r3, fp
 8003542:	f04f 0000 	mov.w	r0, #0
 8003546:	f04f 0100 	mov.w	r1, #0
 800354a:	0159      	lsls	r1, r3, #5
 800354c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003550:	0150      	lsls	r0, r2, #5
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	ebb2 080a 	subs.w	r8, r2, sl
 800355a:	eb63 090b 	sbc.w	r9, r3, fp
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800356a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800356e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003572:	ebb2 0408 	subs.w	r4, r2, r8
 8003576:	eb63 0509 	sbc.w	r5, r3, r9
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	00eb      	lsls	r3, r5, #3
 8003584:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003588:	00e2      	lsls	r2, r4, #3
 800358a:	4614      	mov	r4, r2
 800358c:	461d      	mov	r5, r3
 800358e:	eb14 030a 	adds.w	r3, r4, sl
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	eb45 030b 	adc.w	r3, r5, fp
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035a6:	4629      	mov	r1, r5
 80035a8:	028b      	lsls	r3, r1, #10
 80035aa:	4621      	mov	r1, r4
 80035ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035b0:	4621      	mov	r1, r4
 80035b2:	028a      	lsls	r2, r1, #10
 80035b4:	4610      	mov	r0, r2
 80035b6:	4619      	mov	r1, r3
 80035b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ba:	2200      	movs	r2, #0
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	60fa      	str	r2, [r7, #12]
 80035c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035c4:	f7fd faf0 	bl	8000ba8 <__aeabi_uldivmod>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4613      	mov	r3, r2
 80035ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_RCC_GetSysClockFreq+0x180>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	3301      	adds	r3, #1
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80035e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035ea:	e002      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <HAL_RCC_GetSysClockFreq+0x184>)
 80035ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3740      	adds	r7, #64	; 0x40
 80035f8:	46bd      	mov	sp, r7
 80035fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800
 8003604:	00f42400 	.word	0x00f42400
 8003608:	017d7840 	.word	0x017d7840

0800360c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003610:	4b03      	ldr	r3, [pc, #12]	; (8003620 <HAL_RCC_GetHCLKFreq+0x14>)
 8003612:	681b      	ldr	r3, [r3, #0]
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20000000 	.word	0x20000000

08003624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003628:	f7ff fff0 	bl	800360c <HAL_RCC_GetHCLKFreq>
 800362c:	4602      	mov	r2, r0
 800362e:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	0a9b      	lsrs	r3, r3, #10
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	4903      	ldr	r1, [pc, #12]	; (8003648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800363a:	5ccb      	ldrb	r3, [r1, r3]
 800363c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003640:	4618      	mov	r0, r3
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40023800 	.word	0x40023800
 8003648:	0800c3fc 	.word	0x0800c3fc

0800364c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003650:	f7ff ffdc 	bl	800360c <HAL_RCC_GetHCLKFreq>
 8003654:	4602      	mov	r2, r0
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	0b5b      	lsrs	r3, r3, #13
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	4903      	ldr	r1, [pc, #12]	; (8003670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003662:	5ccb      	ldrb	r3, [r1, r3]
 8003664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003668:	4618      	mov	r0, r3
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40023800 	.word	0x40023800
 8003670:	0800c3fc 	.word	0x0800c3fc

08003674 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	220f      	movs	r2, #15
 8003682:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003684:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0203 	and.w	r2, r3, #3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003690:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800369c:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <HAL_RCC_GetClockConfig+0x5c>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036a8:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <HAL_RCC_GetClockConfig+0x5c>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	08db      	lsrs	r3, r3, #3
 80036ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036b6:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <HAL_RCC_GetClockConfig+0x60>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0207 	and.w	r2, r3, #7
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	601a      	str	r2, [r3, #0]
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40023c00 	.word	0x40023c00

080036d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e07b      	b.n	80037e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d108      	bne.n	8003704 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036fa:	d009      	beq.n	8003710 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	61da      	str	r2, [r3, #28]
 8003702:	e005      	b.n	8003710 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d106      	bne.n	8003730 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fe f9ea 	bl	8001b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003746:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003794:	ea42 0103 	orr.w	r1, r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	0c1b      	lsrs	r3, r3, #16
 80037ae:	f003 0104 	and.w	r1, r3, #4
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	f003 0210 	and.w	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	4613      	mov	r3, r2
 80037f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_SPI_Transmit_DMA+0x20>
 8003808:	2302      	movs	r3, #2
 800380a:	e09b      	b.n	8003944 <HAL_SPI_Transmit_DMA+0x158>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b01      	cmp	r3, #1
 800381e:	d002      	beq.n	8003826 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003820:	2302      	movs	r3, #2
 8003822:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003824:	e089      	b.n	800393a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_SPI_Transmit_DMA+0x46>
 800382c:	88fb      	ldrh	r3, [r7, #6]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d102      	bne.n	8003838 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003836:	e080      	b.n	800393a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2203      	movs	r2, #3
 800383c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	88fa      	ldrh	r2, [r7, #6]
 8003850:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	88fa      	ldrh	r2, [r7, #6]
 8003856:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387e:	d10f      	bne.n	80038a0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800388e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800389e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a4:	4a29      	ldr	r2, [pc, #164]	; (800394c <HAL_SPI_Transmit_DMA+0x160>)
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ac:	4a28      	ldr	r2, [pc, #160]	; (8003950 <HAL_SPI_Transmit_DMA+0x164>)
 80038ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b4:	4a27      	ldr	r2, [pc, #156]	; (8003954 <HAL_SPI_Transmit_DMA+0x168>)
 80038b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038bc:	2200      	movs	r2, #0
 80038be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	4619      	mov	r1, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	330c      	adds	r3, #12
 80038d0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80038d8:	f7fe fdd8 	bl	800248c <HAL_DMA_Start_IT>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00c      	beq.n	80038fc <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	f043 0210 	orr.w	r2, r3, #16
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80038fa:	e01e      	b.n	800393a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b40      	cmp	r3, #64	; 0x40
 8003908:	d007      	beq.n	800391a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003918:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0220 	orr.w	r2, r2, #32
 8003928:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 0202 	orr.w	r2, r2, #2
 8003938:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003942:	7dfb      	ldrb	r3, [r7, #23]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	08003f59 	.word	0x08003f59
 8003950:	08003d79 	.word	0x08003d79
 8003954:	08003fad 	.word	0x08003fad

08003958 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	4613      	mov	r3, r2
 8003964:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d110      	bne.n	8003994 <HAL_SPI_Receive_DMA+0x3c>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800397a:	d10b      	bne.n	8003994 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2204      	movs	r2, #4
 8003980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003984:	88fb      	ldrh	r3, [r7, #6]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f8ac 	bl	8003ae8 <HAL_SPI_TransmitReceive_DMA>
 8003990:	4603      	mov	r3, r0
 8003992:	e09f      	b.n	8003ad4 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_SPI_Receive_DMA+0x4a>
 800399e:	2302      	movs	r3, #2
 80039a0:	e098      	b.n	8003ad4 <HAL_SPI_Receive_DMA+0x17c>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d002      	beq.n	80039bc <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80039b6:	2302      	movs	r3, #2
 80039b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039ba:	e086      	b.n	8003aca <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_SPI_Receive_DMA+0x70>
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d102      	bne.n	80039ce <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039cc:	e07d      	b.n	8003aca <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2204      	movs	r2, #4
 80039d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	88fa      	ldrh	r2, [r7, #6]
 80039e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	88fa      	ldrh	r2, [r7, #6]
 80039ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a0e:	d10f      	bne.n	8003a30 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a34:	4a29      	ldr	r2, [pc, #164]	; (8003adc <HAL_SPI_Receive_DMA+0x184>)
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3c:	4a28      	ldr	r2, [pc, #160]	; (8003ae0 <HAL_SPI_Receive_DMA+0x188>)
 8003a3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a44:	4a27      	ldr	r2, [pc, #156]	; (8003ae4 <HAL_SPI_Receive_DMA+0x18c>)
 8003a46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a66:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003a68:	f7fe fd10 	bl	800248c <HAL_DMA_Start_IT>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00c      	beq.n	8003a8c <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a76:	f043 0210 	orr.w	r2, r3, #16
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003a8a:	e01e      	b.n	8003aca <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d007      	beq.n	8003aaa <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aa8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 0220 	orr.w	r2, r2, #32
 8003ab8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	08003f75 	.word	0x08003f75
 8003ae0:	08003e21 	.word	0x08003e21
 8003ae4:	08003fad 	.word	0x08003fad

08003ae8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e0e3      	b.n	8003cd0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b16:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003b1e:	7dbb      	ldrb	r3, [r7, #22]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d00d      	beq.n	8003b40 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b2a:	d106      	bne.n	8003b3a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <HAL_SPI_TransmitReceive_DMA+0x52>
 8003b34:	7dbb      	ldrb	r3, [r7, #22]
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d002      	beq.n	8003b40 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b3e:	e0c2      	b.n	8003cc6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003b4c:	887b      	ldrh	r3, [r7, #2]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b56:	e0b6      	b.n	8003cc6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d003      	beq.n	8003b6c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2205      	movs	r2, #5
 8003b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	887a      	ldrh	r2, [r7, #2]
 8003b82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	887a      	ldrh	r2, [r7, #2]
 8003b8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	887a      	ldrh	r2, [r7, #2]
 8003b94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d108      	bne.n	8003bc0 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb2:	4a49      	ldr	r2, [pc, #292]	; (8003cd8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003bb4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	4a48      	ldr	r2, [pc, #288]	; (8003cdc <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003bbc:	63da      	str	r2, [r3, #60]	; 0x3c
 8003bbe:	e007      	b.n	8003bd0 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc4:	4a46      	ldr	r2, [pc, #280]	; (8003ce0 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8003bc6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bcc:	4a45      	ldr	r2, [pc, #276]	; (8003ce4 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003bce:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd4:	4a44      	ldr	r2, [pc, #272]	; (8003ce8 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003bd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bdc:	2200      	movs	r2, #0
 8003bde:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	330c      	adds	r3, #12
 8003bea:	4619      	mov	r1, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003bf8:	f7fe fc48 	bl	800248c <HAL_DMA_Start_IT>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00c      	beq.n	8003c1c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	f043 0210 	orr.w	r2, r3, #16
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003c1a:	e054      	b.n	8003cc6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c30:	2200      	movs	r2, #0
 8003c32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c38:	2200      	movs	r2, #0
 8003c3a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c40:	2200      	movs	r2, #0
 8003c42:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c48:	2200      	movs	r2, #0
 8003c4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	4619      	mov	r1, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	330c      	adds	r3, #12
 8003c5c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c62:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003c64:	f7fe fc12 	bl	800248c <HAL_DMA_Start_IT>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00c      	beq.n	8003c88 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c72:	f043 0210 	orr.w	r2, r3, #16
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003c86:	e01e      	b.n	8003cc6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c92:	2b40      	cmp	r3, #64	; 0x40
 8003c94:	d007      	beq.n	8003ca6 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ca4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0220 	orr.w	r2, r2, #32
 8003cb4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0202 	orr.w	r2, r2, #2
 8003cc4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	08003f75 	.word	0x08003f75
 8003cdc:	08003e21 	.word	0x08003e21
 8003ce0:	08003f91 	.word	0x08003f91
 8003ce4:	08003ec9 	.word	0x08003ec9
 8003ce8:	08003fad 	.word	0x08003fad

08003cec <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d86:	f7fe f9e5 	bl	8002154 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d9a:	d03b      	beq.n	8003e14 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0220 	bic.w	r2, r2, #32
 8003daa:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0202 	bic.w	r2, r2, #2
 8003dba:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	2164      	movs	r1, #100	; 0x64
 8003dc0:	6978      	ldr	r0, [r7, #20]
 8003dc2:	f000 fa01 	bl	80041c8 <SPI_EndRxTxTransaction>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd0:	f043 0220 	orr.w	r2, r3, #32
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003e0c:	6978      	ldr	r0, [r7, #20]
 8003e0e:	f7ff ffa9 	bl	8003d64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003e12:	e002      	b.n	8003e1a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003e14:	6978      	ldr	r0, [r7, #20]
 8003e16:	f7ff ff69 	bl	8003cec <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e2e:	f7fe f991 	bl	8002154 <HAL_GetTick>
 8003e32:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e42:	d03b      	beq.n	8003ebc <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0220 	bic.w	r2, r2, #32
 8003e52:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10d      	bne.n	8003e78 <SPI_DMAReceiveCplt+0x58>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e64:	d108      	bne.n	8003e78 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0203 	bic.w	r2, r2, #3
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	e007      	b.n	8003e88 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0201 	bic.w	r2, r2, #1
 8003e86:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	2164      	movs	r1, #100	; 0x64
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f935 	bl	80040fc <SPI_EndRxTransaction>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7ff ff55 	bl	8003d64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003eba:	e002      	b.n	8003ec2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7ff ff1f 	bl	8003d00 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ed6:	f7fe f93d 	bl	8002154 <HAL_GetTick>
 8003eda:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eea:	d02f      	beq.n	8003f4c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0220 	bic.w	r2, r2, #32
 8003efa:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	2164      	movs	r1, #100	; 0x64
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f961 	bl	80041c8 <SPI_EndRxTxTransaction>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f10:	f043 0220 	orr.w	r2, r3, #32
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0203 	bic.w	r2, r2, #3
 8003f26:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f7ff ff0d 	bl	8003d64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003f4a:	e002      	b.n	8003f52 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f7ff fee1 	bl	8003d14 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f7ff fede 	bl	8003d28 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f7ff feda 	bl	8003d3c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f7ff fed6 	bl	8003d50 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0203 	bic.w	r2, r2, #3
 8003fc8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fce:	f043 0210 	orr.w	r2, r3, #16
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f7ff fec0 	bl	8003d64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fe4:	bf00      	nop
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ffc:	f7fe f8aa 	bl	8002154 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	4413      	add	r3, r2
 800400a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800400c:	f7fe f8a2 	bl	8002154 <HAL_GetTick>
 8004010:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004012:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	015b      	lsls	r3, r3, #5
 8004018:	0d1b      	lsrs	r3, r3, #20
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	fb02 f303 	mul.w	r3, r2, r3
 8004020:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004022:	e054      	b.n	80040ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402a:	d050      	beq.n	80040ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800402c:	f7fe f892 	bl	8002154 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	429a      	cmp	r2, r3
 800403a:	d902      	bls.n	8004042 <SPI_WaitFlagStateUntilTimeout+0x56>
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d13d      	bne.n	80040be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004050:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800405a:	d111      	bne.n	8004080 <SPI_WaitFlagStateUntilTimeout+0x94>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004064:	d004      	beq.n	8004070 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800406e:	d107      	bne.n	8004080 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800407e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004088:	d10f      	bne.n	80040aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e017      	b.n	80040ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4013      	ands	r3, r2
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	429a      	cmp	r2, r3
 80040dc:	bf0c      	ite	eq
 80040de:	2301      	moveq	r3, #1
 80040e0:	2300      	movne	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d19b      	bne.n	8004024 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3720      	adds	r7, #32
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000000 	.word	0x20000000

080040fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af02      	add	r7, sp, #8
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004110:	d111      	bne.n	8004136 <SPI_EndRxTransaction+0x3a>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800411a:	d004      	beq.n	8004126 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004124:	d107      	bne.n	8004136 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004134:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800413e:	d12a      	bne.n	8004196 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004148:	d012      	beq.n	8004170 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2200      	movs	r2, #0
 8004152:	2180      	movs	r1, #128	; 0x80
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f7ff ff49 	bl	8003fec <SPI_WaitFlagStateUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d02d      	beq.n	80041bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004164:	f043 0220 	orr.w	r2, r3, #32
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e026      	b.n	80041be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2200      	movs	r2, #0
 8004178:	2101      	movs	r1, #1
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f7ff ff36 	bl	8003fec <SPI_WaitFlagStateUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d01a      	beq.n	80041bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	f043 0220 	orr.w	r2, r3, #32
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e013      	b.n	80041be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2200      	movs	r2, #0
 800419e:	2101      	movs	r1, #1
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f7ff ff23 	bl	8003fec <SPI_WaitFlagStateUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	f043 0220 	orr.w	r2, r3, #32
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e000      	b.n	80041be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041d4:	4b1b      	ldr	r3, [pc, #108]	; (8004244 <SPI_EndRxTxTransaction+0x7c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1b      	ldr	r2, [pc, #108]	; (8004248 <SPI_EndRxTxTransaction+0x80>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	0d5b      	lsrs	r3, r3, #21
 80041e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041e4:	fb02 f303 	mul.w	r3, r2, r3
 80041e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041f2:	d112      	bne.n	800421a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2200      	movs	r2, #0
 80041fc:	2180      	movs	r1, #128	; 0x80
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f7ff fef4 	bl	8003fec <SPI_WaitFlagStateUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d016      	beq.n	8004238 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f043 0220 	orr.w	r2, r3, #32
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e00f      	b.n	800423a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	3b01      	subs	r3, #1
 8004224:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004230:	2b80      	cmp	r3, #128	; 0x80
 8004232:	d0f2      	beq.n	800421a <SPI_EndRxTxTransaction+0x52>
 8004234:	e000      	b.n	8004238 <SPI_EndRxTxTransaction+0x70>
        break;
 8004236:	bf00      	nop
  }

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20000000 	.word	0x20000000
 8004248:	165e9f81 	.word	0x165e9f81

0800424c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e041      	b.n	80042e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fd fcf2 	bl	8001c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3304      	adds	r3, #4
 8004288:	4619      	mov	r1, r3
 800428a:	4610      	mov	r0, r2
 800428c:	f000 f9ce 	bl	800462c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d001      	beq.n	8004304 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e04e      	b.n	80043a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a23      	ldr	r2, [pc, #140]	; (80043b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d022      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x80>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432e:	d01d      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x80>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1f      	ldr	r2, [pc, #124]	; (80043b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d018      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x80>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a1e      	ldr	r2, [pc, #120]	; (80043b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d013      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x80>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a1c      	ldr	r2, [pc, #112]	; (80043bc <HAL_TIM_Base_Start_IT+0xd0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d00e      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x80>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a1b      	ldr	r2, [pc, #108]	; (80043c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d009      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x80>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a19      	ldr	r2, [pc, #100]	; (80043c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d004      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x80>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a18      	ldr	r2, [pc, #96]	; (80043c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d111      	bne.n	8004390 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b06      	cmp	r3, #6
 800437c:	d010      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0201 	orr.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800438e:	e007      	b.n	80043a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0201 	orr.w	r2, r2, #1
 800439e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40000400 	.word	0x40000400
 80043b8:	40000800 	.word	0x40000800
 80043bc:	40000c00 	.word	0x40000c00
 80043c0:	40010400 	.word	0x40010400
 80043c4:	40014000 	.word	0x40014000
 80043c8:	40001800 	.word	0x40001800

080043cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d122      	bne.n	8004428 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d11b      	bne.n	8004428 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0202 	mvn.w	r2, #2
 80043f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f8ee 	bl	80045f0 <HAL_TIM_IC_CaptureCallback>
 8004414:	e005      	b.n	8004422 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f8e0 	bl	80045dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f8f1 	bl	8004604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	2b04      	cmp	r3, #4
 8004434:	d122      	bne.n	800447c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b04      	cmp	r3, #4
 8004442:	d11b      	bne.n	800447c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0204 	mvn.w	r2, #4
 800444c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f8c4 	bl	80045f0 <HAL_TIM_IC_CaptureCallback>
 8004468:	e005      	b.n	8004476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f8b6 	bl	80045dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f8c7 	bl	8004604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b08      	cmp	r3, #8
 8004488:	d122      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b08      	cmp	r3, #8
 8004496:	d11b      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0208 	mvn.w	r2, #8
 80044a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2204      	movs	r2, #4
 80044a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f89a 	bl	80045f0 <HAL_TIM_IC_CaptureCallback>
 80044bc:	e005      	b.n	80044ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f88c 	bl	80045dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f89d 	bl	8004604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0310 	and.w	r3, r3, #16
 80044da:	2b10      	cmp	r3, #16
 80044dc:	d122      	bne.n	8004524 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	2b10      	cmp	r3, #16
 80044ea:	d11b      	bne.n	8004524 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0210 	mvn.w	r2, #16
 80044f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2208      	movs	r2, #8
 80044fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f870 	bl	80045f0 <HAL_TIM_IC_CaptureCallback>
 8004510:	e005      	b.n	800451e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f862 	bl	80045dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f873 	bl	8004604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b01      	cmp	r3, #1
 8004530:	d10e      	bne.n	8004550 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b01      	cmp	r3, #1
 800453e:	d107      	bne.n	8004550 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0201 	mvn.w	r2, #1
 8004548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fd fa96 	bl	8001a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455a:	2b80      	cmp	r3, #128	; 0x80
 800455c:	d10e      	bne.n	800457c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004568:	2b80      	cmp	r3, #128	; 0x80
 800456a:	d107      	bne.n	800457c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f97e 	bl	8004878 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004586:	2b40      	cmp	r3, #64	; 0x40
 8004588:	d10e      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d107      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f838 	bl	8004618 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d10e      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	d107      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0220 	mvn.w	r2, #32
 80045cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f948 	bl	8004864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045d4:	bf00      	nop
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a40      	ldr	r2, [pc, #256]	; (8004740 <TIM_Base_SetConfig+0x114>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d013      	beq.n	800466c <TIM_Base_SetConfig+0x40>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464a:	d00f      	beq.n	800466c <TIM_Base_SetConfig+0x40>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a3d      	ldr	r2, [pc, #244]	; (8004744 <TIM_Base_SetConfig+0x118>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00b      	beq.n	800466c <TIM_Base_SetConfig+0x40>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a3c      	ldr	r2, [pc, #240]	; (8004748 <TIM_Base_SetConfig+0x11c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d007      	beq.n	800466c <TIM_Base_SetConfig+0x40>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a3b      	ldr	r2, [pc, #236]	; (800474c <TIM_Base_SetConfig+0x120>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d003      	beq.n	800466c <TIM_Base_SetConfig+0x40>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a3a      	ldr	r2, [pc, #232]	; (8004750 <TIM_Base_SetConfig+0x124>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d108      	bne.n	800467e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a2f      	ldr	r2, [pc, #188]	; (8004740 <TIM_Base_SetConfig+0x114>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d02b      	beq.n	80046de <TIM_Base_SetConfig+0xb2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468c:	d027      	beq.n	80046de <TIM_Base_SetConfig+0xb2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a2c      	ldr	r2, [pc, #176]	; (8004744 <TIM_Base_SetConfig+0x118>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d023      	beq.n	80046de <TIM_Base_SetConfig+0xb2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a2b      	ldr	r2, [pc, #172]	; (8004748 <TIM_Base_SetConfig+0x11c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d01f      	beq.n	80046de <TIM_Base_SetConfig+0xb2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a2a      	ldr	r2, [pc, #168]	; (800474c <TIM_Base_SetConfig+0x120>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01b      	beq.n	80046de <TIM_Base_SetConfig+0xb2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a29      	ldr	r2, [pc, #164]	; (8004750 <TIM_Base_SetConfig+0x124>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d017      	beq.n	80046de <TIM_Base_SetConfig+0xb2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a28      	ldr	r2, [pc, #160]	; (8004754 <TIM_Base_SetConfig+0x128>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <TIM_Base_SetConfig+0xb2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a27      	ldr	r2, [pc, #156]	; (8004758 <TIM_Base_SetConfig+0x12c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00f      	beq.n	80046de <TIM_Base_SetConfig+0xb2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a26      	ldr	r2, [pc, #152]	; (800475c <TIM_Base_SetConfig+0x130>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00b      	beq.n	80046de <TIM_Base_SetConfig+0xb2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a25      	ldr	r2, [pc, #148]	; (8004760 <TIM_Base_SetConfig+0x134>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <TIM_Base_SetConfig+0xb2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a24      	ldr	r2, [pc, #144]	; (8004764 <TIM_Base_SetConfig+0x138>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <TIM_Base_SetConfig+0xb2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a23      	ldr	r2, [pc, #140]	; (8004768 <TIM_Base_SetConfig+0x13c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d108      	bne.n	80046f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a0a      	ldr	r2, [pc, #40]	; (8004740 <TIM_Base_SetConfig+0x114>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d003      	beq.n	8004724 <TIM_Base_SetConfig+0xf8>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a0c      	ldr	r2, [pc, #48]	; (8004750 <TIM_Base_SetConfig+0x124>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d103      	bne.n	800472c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	691a      	ldr	r2, [r3, #16]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	615a      	str	r2, [r3, #20]
}
 8004732:	bf00      	nop
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40010000 	.word	0x40010000
 8004744:	40000400 	.word	0x40000400
 8004748:	40000800 	.word	0x40000800
 800474c:	40000c00 	.word	0x40000c00
 8004750:	40010400 	.word	0x40010400
 8004754:	40014000 	.word	0x40014000
 8004758:	40014400 	.word	0x40014400
 800475c:	40014800 	.word	0x40014800
 8004760:	40001800 	.word	0x40001800
 8004764:	40001c00 	.word	0x40001c00
 8004768:	40002000 	.word	0x40002000

0800476c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004780:	2302      	movs	r3, #2
 8004782:	e05a      	b.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a21      	ldr	r2, [pc, #132]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d022      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d0:	d01d      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1d      	ldr	r2, [pc, #116]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d018      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a1b      	ldr	r2, [pc, #108]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d013      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a1a      	ldr	r2, [pc, #104]	; (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00e      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a18      	ldr	r2, [pc, #96]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d009      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a17      	ldr	r2, [pc, #92]	; (800485c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a15      	ldr	r2, [pc, #84]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d10c      	bne.n	8004828 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	4313      	orrs	r3, r2
 800481e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40010000 	.word	0x40010000
 800484c:	40000400 	.word	0x40000400
 8004850:	40000800 	.word	0x40000800
 8004854:	40000c00 	.word	0x40000c00
 8004858:	40010400 	.word	0x40010400
 800485c:	40014000 	.word	0x40014000
 8004860:	40001800 	.word	0x40001800

08004864 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e03f      	b.n	800491e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fd f9fa 	bl	8001cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2224      	movs	r2, #36	; 0x24
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f929 	bl	8004b28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695a      	ldr	r2, [r3, #20]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004904:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b08a      	sub	sp, #40	; 0x28
 800492a:	af02      	add	r7, sp, #8
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	603b      	str	r3, [r7, #0]
 8004932:	4613      	mov	r3, r2
 8004934:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b20      	cmp	r3, #32
 8004944:	d17c      	bne.n	8004a40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <HAL_UART_Transmit+0x2c>
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e075      	b.n	8004a42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_UART_Transmit+0x3e>
 8004960:	2302      	movs	r3, #2
 8004962:	e06e      	b.n	8004a42 <HAL_UART_Transmit+0x11c>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2221      	movs	r2, #33	; 0x21
 8004976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800497a:	f7fd fbeb 	bl	8002154 <HAL_GetTick>
 800497e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	88fa      	ldrh	r2, [r7, #6]
 8004984:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	88fa      	ldrh	r2, [r7, #6]
 800498a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004994:	d108      	bne.n	80049a8 <HAL_UART_Transmit+0x82>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d104      	bne.n	80049a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	e003      	b.n	80049b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80049b8:	e02a      	b.n	8004a10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2200      	movs	r2, #0
 80049c2:	2180      	movs	r1, #128	; 0x80
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f840 	bl	8004a4a <UART_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e036      	b.n	8004a42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10b      	bne.n	80049f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	3302      	adds	r3, #2
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	e007      	b.n	8004a02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	781a      	ldrb	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	3301      	adds	r3, #1
 8004a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1cf      	bne.n	80049ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2200      	movs	r2, #0
 8004a22:	2140      	movs	r1, #64	; 0x40
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f810 	bl	8004a4a <UART_WaitOnFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e006      	b.n	8004a42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	e000      	b.n	8004a42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a40:	2302      	movs	r3, #2
  }
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3720      	adds	r7, #32
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b090      	sub	sp, #64	; 0x40
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	4613      	mov	r3, r2
 8004a58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5a:	e050      	b.n	8004afe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a62:	d04c      	beq.n	8004afe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <UART_WaitOnFlagUntilTimeout+0x30>
 8004a6a:	f7fd fb73 	bl	8002154 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d241      	bcs.n	8004afe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	330c      	adds	r3, #12
 8004a80:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	330c      	adds	r3, #12
 8004a98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a9a:	637a      	str	r2, [r7, #52]	; 0x34
 8004a9c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e5      	bne.n	8004a7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3314      	adds	r3, #20
 8004ab4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	613b      	str	r3, [r7, #16]
   return(result);
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f023 0301 	bic.w	r3, r3, #1
 8004ac4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3314      	adds	r3, #20
 8004acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ace:	623a      	str	r2, [r7, #32]
 8004ad0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	69f9      	ldr	r1, [r7, #28]
 8004ad4:	6a3a      	ldr	r2, [r7, #32]
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	61bb      	str	r3, [r7, #24]
   return(result);
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e5      	bne.n	8004aae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e00f      	b.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4013      	ands	r3, r2
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	bf0c      	ite	eq
 8004b0e:	2301      	moveq	r3, #1
 8004b10:	2300      	movne	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	461a      	mov	r2, r3
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d09f      	beq.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3740      	adds	r7, #64	; 0x40
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b2c:	b0c0      	sub	sp, #256	; 0x100
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b44:	68d9      	ldr	r1, [r3, #12]
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	ea40 0301 	orr.w	r3, r0, r1
 8004b50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b80:	f021 010c 	bic.w	r1, r1, #12
 8004b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b8e:	430b      	orrs	r3, r1
 8004b90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba2:	6999      	ldr	r1, [r3, #24]
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	ea40 0301 	orr.w	r3, r0, r1
 8004bae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	4b8f      	ldr	r3, [pc, #572]	; (8004df4 <UART_SetConfig+0x2cc>)
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d005      	beq.n	8004bc8 <UART_SetConfig+0xa0>
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	4b8d      	ldr	r3, [pc, #564]	; (8004df8 <UART_SetConfig+0x2d0>)
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d104      	bne.n	8004bd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bc8:	f7fe fd40 	bl	800364c <HAL_RCC_GetPCLK2Freq>
 8004bcc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004bd0:	e003      	b.n	8004bda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bd2:	f7fe fd27 	bl	8003624 <HAL_RCC_GetPCLK1Freq>
 8004bd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be4:	f040 810c 	bne.w	8004e00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bec:	2200      	movs	r2, #0
 8004bee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004bf2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004bf6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004bfa:	4622      	mov	r2, r4
 8004bfc:	462b      	mov	r3, r5
 8004bfe:	1891      	adds	r1, r2, r2
 8004c00:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c02:	415b      	adcs	r3, r3
 8004c04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	eb12 0801 	adds.w	r8, r2, r1
 8004c10:	4629      	mov	r1, r5
 8004c12:	eb43 0901 	adc.w	r9, r3, r1
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c2a:	4690      	mov	r8, r2
 8004c2c:	4699      	mov	r9, r3
 8004c2e:	4623      	mov	r3, r4
 8004c30:	eb18 0303 	adds.w	r3, r8, r3
 8004c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c38:	462b      	mov	r3, r5
 8004c3a:	eb49 0303 	adc.w	r3, r9, r3
 8004c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c56:	460b      	mov	r3, r1
 8004c58:	18db      	adds	r3, r3, r3
 8004c5a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	eb42 0303 	adc.w	r3, r2, r3
 8004c62:	657b      	str	r3, [r7, #84]	; 0x54
 8004c64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c6c:	f7fb ff9c 	bl	8000ba8 <__aeabi_uldivmod>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4b61      	ldr	r3, [pc, #388]	; (8004dfc <UART_SetConfig+0x2d4>)
 8004c76:	fba3 2302 	umull	r2, r3, r3, r2
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	011c      	lsls	r4, r3, #4
 8004c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c82:	2200      	movs	r2, #0
 8004c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c90:	4642      	mov	r2, r8
 8004c92:	464b      	mov	r3, r9
 8004c94:	1891      	adds	r1, r2, r2
 8004c96:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c98:	415b      	adcs	r3, r3
 8004c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	eb43 0b01 	adc.w	fp, r3, r1
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cc0:	4692      	mov	sl, r2
 8004cc2:	469b      	mov	fp, r3
 8004cc4:	4643      	mov	r3, r8
 8004cc6:	eb1a 0303 	adds.w	r3, sl, r3
 8004cca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cce:	464b      	mov	r3, r9
 8004cd0:	eb4b 0303 	adc.w	r3, fp, r3
 8004cd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ce4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ce8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004cec:	460b      	mov	r3, r1
 8004cee:	18db      	adds	r3, r3, r3
 8004cf0:	643b      	str	r3, [r7, #64]	; 0x40
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	eb42 0303 	adc.w	r3, r2, r3
 8004cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8004cfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d02:	f7fb ff51 	bl	8000ba8 <__aeabi_uldivmod>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	4b3b      	ldr	r3, [pc, #236]	; (8004dfc <UART_SetConfig+0x2d4>)
 8004d0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	2264      	movs	r2, #100	; 0x64
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
 8004d1a:	1acb      	subs	r3, r1, r3
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d22:	4b36      	ldr	r3, [pc, #216]	; (8004dfc <UART_SetConfig+0x2d4>)
 8004d24:	fba3 2302 	umull	r2, r3, r3, r2
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d30:	441c      	add	r4, r3
 8004d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d44:	4642      	mov	r2, r8
 8004d46:	464b      	mov	r3, r9
 8004d48:	1891      	adds	r1, r2, r2
 8004d4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d4c:	415b      	adcs	r3, r3
 8004d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d54:	4641      	mov	r1, r8
 8004d56:	1851      	adds	r1, r2, r1
 8004d58:	6339      	str	r1, [r7, #48]	; 0x30
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	414b      	adcs	r3, r1
 8004d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d6c:	4659      	mov	r1, fp
 8004d6e:	00cb      	lsls	r3, r1, #3
 8004d70:	4651      	mov	r1, sl
 8004d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d76:	4651      	mov	r1, sl
 8004d78:	00ca      	lsls	r2, r1, #3
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4603      	mov	r3, r0
 8004d80:	4642      	mov	r2, r8
 8004d82:	189b      	adds	r3, r3, r2
 8004d84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d88:	464b      	mov	r3, r9
 8004d8a:	460a      	mov	r2, r1
 8004d8c:	eb42 0303 	adc.w	r3, r2, r3
 8004d90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004da0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004da4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004da8:	460b      	mov	r3, r1
 8004daa:	18db      	adds	r3, r3, r3
 8004dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dae:	4613      	mov	r3, r2
 8004db0:	eb42 0303 	adc.w	r3, r2, r3
 8004db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004dbe:	f7fb fef3 	bl	8000ba8 <__aeabi_uldivmod>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	; (8004dfc <UART_SetConfig+0x2d4>)
 8004dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dcc:	095b      	lsrs	r3, r3, #5
 8004dce:	2164      	movs	r1, #100	; 0x64
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	3332      	adds	r3, #50	; 0x32
 8004dda:	4a08      	ldr	r2, [pc, #32]	; (8004dfc <UART_SetConfig+0x2d4>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	f003 0207 	and.w	r2, r3, #7
 8004de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4422      	add	r2, r4
 8004dee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004df0:	e105      	b.n	8004ffe <UART_SetConfig+0x4d6>
 8004df2:	bf00      	nop
 8004df4:	40011000 	.word	0x40011000
 8004df8:	40011400 	.word	0x40011400
 8004dfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e12:	4642      	mov	r2, r8
 8004e14:	464b      	mov	r3, r9
 8004e16:	1891      	adds	r1, r2, r2
 8004e18:	6239      	str	r1, [r7, #32]
 8004e1a:	415b      	adcs	r3, r3
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e22:	4641      	mov	r1, r8
 8004e24:	1854      	adds	r4, r2, r1
 8004e26:	4649      	mov	r1, r9
 8004e28:	eb43 0501 	adc.w	r5, r3, r1
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	00eb      	lsls	r3, r5, #3
 8004e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e3a:	00e2      	lsls	r2, r4, #3
 8004e3c:	4614      	mov	r4, r2
 8004e3e:	461d      	mov	r5, r3
 8004e40:	4643      	mov	r3, r8
 8004e42:	18e3      	adds	r3, r4, r3
 8004e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e48:	464b      	mov	r3, r9
 8004e4a:	eb45 0303 	adc.w	r3, r5, r3
 8004e4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e6e:	4629      	mov	r1, r5
 8004e70:	008b      	lsls	r3, r1, #2
 8004e72:	4621      	mov	r1, r4
 8004e74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e78:	4621      	mov	r1, r4
 8004e7a:	008a      	lsls	r2, r1, #2
 8004e7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e80:	f7fb fe92 	bl	8000ba8 <__aeabi_uldivmod>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4b60      	ldr	r3, [pc, #384]	; (800500c <UART_SetConfig+0x4e4>)
 8004e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e8e:	095b      	lsrs	r3, r3, #5
 8004e90:	011c      	lsls	r4, r3, #4
 8004e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e96:	2200      	movs	r2, #0
 8004e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ea0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ea4:	4642      	mov	r2, r8
 8004ea6:	464b      	mov	r3, r9
 8004ea8:	1891      	adds	r1, r2, r2
 8004eaa:	61b9      	str	r1, [r7, #24]
 8004eac:	415b      	adcs	r3, r3
 8004eae:	61fb      	str	r3, [r7, #28]
 8004eb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eb4:	4641      	mov	r1, r8
 8004eb6:	1851      	adds	r1, r2, r1
 8004eb8:	6139      	str	r1, [r7, #16]
 8004eba:	4649      	mov	r1, r9
 8004ebc:	414b      	adcs	r3, r1
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	f04f 0300 	mov.w	r3, #0
 8004ec8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ecc:	4659      	mov	r1, fp
 8004ece:	00cb      	lsls	r3, r1, #3
 8004ed0:	4651      	mov	r1, sl
 8004ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ed6:	4651      	mov	r1, sl
 8004ed8:	00ca      	lsls	r2, r1, #3
 8004eda:	4610      	mov	r0, r2
 8004edc:	4619      	mov	r1, r3
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4642      	mov	r2, r8
 8004ee2:	189b      	adds	r3, r3, r2
 8004ee4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ee8:	464b      	mov	r3, r9
 8004eea:	460a      	mov	r2, r1
 8004eec:	eb42 0303 	adc.w	r3, r2, r3
 8004ef0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004efe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	008b      	lsls	r3, r1, #2
 8004f10:	4641      	mov	r1, r8
 8004f12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f16:	4641      	mov	r1, r8
 8004f18:	008a      	lsls	r2, r1, #2
 8004f1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f1e:	f7fb fe43 	bl	8000ba8 <__aeabi_uldivmod>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4b39      	ldr	r3, [pc, #228]	; (800500c <UART_SetConfig+0x4e4>)
 8004f28:	fba3 1302 	umull	r1, r3, r3, r2
 8004f2c:	095b      	lsrs	r3, r3, #5
 8004f2e:	2164      	movs	r1, #100	; 0x64
 8004f30:	fb01 f303 	mul.w	r3, r1, r3
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	3332      	adds	r3, #50	; 0x32
 8004f3a:	4a34      	ldr	r2, [pc, #208]	; (800500c <UART_SetConfig+0x4e4>)
 8004f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f46:	441c      	add	r4, r3
 8004f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	673b      	str	r3, [r7, #112]	; 0x70
 8004f50:	677a      	str	r2, [r7, #116]	; 0x74
 8004f52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f56:	4642      	mov	r2, r8
 8004f58:	464b      	mov	r3, r9
 8004f5a:	1891      	adds	r1, r2, r2
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	415b      	adcs	r3, r3
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f66:	4641      	mov	r1, r8
 8004f68:	1851      	adds	r1, r2, r1
 8004f6a:	6039      	str	r1, [r7, #0]
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	414b      	adcs	r3, r1
 8004f70:	607b      	str	r3, [r7, #4]
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f7e:	4659      	mov	r1, fp
 8004f80:	00cb      	lsls	r3, r1, #3
 8004f82:	4651      	mov	r1, sl
 8004f84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f88:	4651      	mov	r1, sl
 8004f8a:	00ca      	lsls	r2, r1, #3
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4603      	mov	r3, r0
 8004f92:	4642      	mov	r2, r8
 8004f94:	189b      	adds	r3, r3, r2
 8004f96:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f98:	464b      	mov	r3, r9
 8004f9a:	460a      	mov	r2, r1
 8004f9c:	eb42 0303 	adc.w	r3, r2, r3
 8004fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	663b      	str	r3, [r7, #96]	; 0x60
 8004fac:	667a      	str	r2, [r7, #100]	; 0x64
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004fba:	4649      	mov	r1, r9
 8004fbc:	008b      	lsls	r3, r1, #2
 8004fbe:	4641      	mov	r1, r8
 8004fc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	008a      	lsls	r2, r1, #2
 8004fc8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004fcc:	f7fb fdec 	bl	8000ba8 <__aeabi_uldivmod>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4b0d      	ldr	r3, [pc, #52]	; (800500c <UART_SetConfig+0x4e4>)
 8004fd6:	fba3 1302 	umull	r1, r3, r3, r2
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	2164      	movs	r1, #100	; 0x64
 8004fde:	fb01 f303 	mul.w	r3, r1, r3
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	3332      	adds	r3, #50	; 0x32
 8004fe8:	4a08      	ldr	r2, [pc, #32]	; (800500c <UART_SetConfig+0x4e4>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	f003 020f 	and.w	r2, r3, #15
 8004ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4422      	add	r2, r4
 8004ffc:	609a      	str	r2, [r3, #8]
}
 8004ffe:	bf00      	nop
 8005000:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005004:	46bd      	mov	sp, r7
 8005006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800500a:	bf00      	nop
 800500c:	51eb851f 	.word	0x51eb851f

08005010 <__NVIC_SetPriority>:
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	6039      	str	r1, [r7, #0]
 800501a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800501c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005020:	2b00      	cmp	r3, #0
 8005022:	db0a      	blt.n	800503a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	b2da      	uxtb	r2, r3
 8005028:	490c      	ldr	r1, [pc, #48]	; (800505c <__NVIC_SetPriority+0x4c>)
 800502a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502e:	0112      	lsls	r2, r2, #4
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	440b      	add	r3, r1
 8005034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005038:	e00a      	b.n	8005050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	b2da      	uxtb	r2, r3
 800503e:	4908      	ldr	r1, [pc, #32]	; (8005060 <__NVIC_SetPriority+0x50>)
 8005040:	79fb      	ldrb	r3, [r7, #7]
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	3b04      	subs	r3, #4
 8005048:	0112      	lsls	r2, r2, #4
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	440b      	add	r3, r1
 800504e:	761a      	strb	r2, [r3, #24]
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	e000e100 	.word	0xe000e100
 8005060:	e000ed00 	.word	0xe000ed00

08005064 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005068:	4b05      	ldr	r3, [pc, #20]	; (8005080 <SysTick_Handler+0x1c>)
 800506a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800506c:	f002 f84c 	bl	8007108 <xTaskGetSchedulerState>
 8005070:	4603      	mov	r3, r0
 8005072:	2b01      	cmp	r3, #1
 8005074:	d001      	beq.n	800507a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005076:	f002 fe37 	bl	8007ce8 <xPortSysTickHandler>
  }
}
 800507a:	bf00      	nop
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	e000e010 	.word	0xe000e010

08005084 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005088:	2100      	movs	r1, #0
 800508a:	f06f 0004 	mvn.w	r0, #4
 800508e:	f7ff ffbf 	bl	8005010 <__NVIC_SetPriority>
#endif
}
 8005092:	bf00      	nop
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800509e:	f3ef 8305 	mrs	r3, IPSR
 80050a2:	603b      	str	r3, [r7, #0]
  return(result);
 80050a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80050aa:	f06f 0305 	mvn.w	r3, #5
 80050ae:	607b      	str	r3, [r7, #4]
 80050b0:	e00c      	b.n	80050cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80050b2:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <osKernelInitialize+0x44>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d105      	bne.n	80050c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80050ba:	4b08      	ldr	r3, [pc, #32]	; (80050dc <osKernelInitialize+0x44>)
 80050bc:	2201      	movs	r2, #1
 80050be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80050c0:	2300      	movs	r3, #0
 80050c2:	607b      	str	r3, [r7, #4]
 80050c4:	e002      	b.n	80050cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80050c6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050cc:	687b      	ldr	r3, [r7, #4]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	200015ac 	.word	0x200015ac

080050e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e6:	f3ef 8305 	mrs	r3, IPSR
 80050ea:	603b      	str	r3, [r7, #0]
  return(result);
 80050ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80050f2:	f06f 0305 	mvn.w	r3, #5
 80050f6:	607b      	str	r3, [r7, #4]
 80050f8:	e010      	b.n	800511c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80050fa:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <osKernelStart+0x48>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d109      	bne.n	8005116 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005102:	f7ff ffbf 	bl	8005084 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005106:	4b08      	ldr	r3, [pc, #32]	; (8005128 <osKernelStart+0x48>)
 8005108:	2202      	movs	r2, #2
 800510a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800510c:	f001 fb98 	bl	8006840 <vTaskStartScheduler>
      stat = osOK;
 8005110:	2300      	movs	r3, #0
 8005112:	607b      	str	r3, [r7, #4]
 8005114:	e002      	b.n	800511c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005116:	f04f 33ff 	mov.w	r3, #4294967295
 800511a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800511c:	687b      	ldr	r3, [r7, #4]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	200015ac 	.word	0x200015ac

0800512c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800512c:	b580      	push	{r7, lr}
 800512e:	b08e      	sub	sp, #56	; 0x38
 8005130:	af04      	add	r7, sp, #16
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005138:	2300      	movs	r3, #0
 800513a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800513c:	f3ef 8305 	mrs	r3, IPSR
 8005140:	617b      	str	r3, [r7, #20]
  return(result);
 8005142:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005144:	2b00      	cmp	r3, #0
 8005146:	d17e      	bne.n	8005246 <osThreadNew+0x11a>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d07b      	beq.n	8005246 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800514e:	2380      	movs	r3, #128	; 0x80
 8005150:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005152:	2318      	movs	r3, #24
 8005154:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005156:	2300      	movs	r3, #0
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800515a:	f04f 33ff 	mov.w	r3, #4294967295
 800515e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d045      	beq.n	80051f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <osThreadNew+0x48>
        name = attr->name;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <osThreadNew+0x6e>
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	2b38      	cmp	r3, #56	; 0x38
 800518c:	d805      	bhi.n	800519a <osThreadNew+0x6e>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <osThreadNew+0x72>
        return (NULL);
 800519a:	2300      	movs	r3, #0
 800519c:	e054      	b.n	8005248 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	089b      	lsrs	r3, r3, #2
 80051ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00e      	beq.n	80051d4 <osThreadNew+0xa8>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	2b63      	cmp	r3, #99	; 0x63
 80051bc:	d90a      	bls.n	80051d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d006      	beq.n	80051d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <osThreadNew+0xa8>
        mem = 1;
 80051ce:	2301      	movs	r3, #1
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	e010      	b.n	80051f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10c      	bne.n	80051f6 <osThreadNew+0xca>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d108      	bne.n	80051f6 <osThreadNew+0xca>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d104      	bne.n	80051f6 <osThreadNew+0xca>
          mem = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	e001      	b.n	80051f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80051f2:	2300      	movs	r3, #0
 80051f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d110      	bne.n	800521e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005204:	9202      	str	r2, [sp, #8]
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	6a3a      	ldr	r2, [r7, #32]
 8005210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f001 f938 	bl	8006488 <xTaskCreateStatic>
 8005218:	4603      	mov	r3, r0
 800521a:	613b      	str	r3, [r7, #16]
 800521c:	e013      	b.n	8005246 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d110      	bne.n	8005246 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	b29a      	uxth	r2, r3
 8005228:	f107 0310 	add.w	r3, r7, #16
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f001 f983 	bl	8006542 <xTaskCreate>
 800523c:	4603      	mov	r3, r0
 800523e:	2b01      	cmp	r3, #1
 8005240:	d001      	beq.n	8005246 <osThreadNew+0x11a>
            hTask = NULL;
 8005242:	2300      	movs	r3, #0
 8005244:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005246:	693b      	ldr	r3, [r7, #16]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3728      	adds	r7, #40	; 0x28
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005258:	f3ef 8305 	mrs	r3, IPSR
 800525c:	60bb      	str	r3, [r7, #8]
  return(result);
 800525e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <osDelay+0x1c>
    stat = osErrorISR;
 8005264:	f06f 0305 	mvn.w	r3, #5
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	e007      	b.n	800527c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f001 faae 	bl	80067d8 <vTaskDelay>
    }
  }

  return (stat);
 800527c:	68fb      	ldr	r3, [r7, #12]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005286:	b580      	push	{r7, lr}
 8005288:	b08a      	sub	sp, #40	; 0x28
 800528a:	af02      	add	r7, sp, #8
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005296:	f3ef 8305 	mrs	r3, IPSR
 800529a:	613b      	str	r3, [r7, #16]
  return(result);
 800529c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d175      	bne.n	800538e <osSemaphoreNew+0x108>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d072      	beq.n	800538e <osSemaphoreNew+0x108>
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d86e      	bhi.n	800538e <osSemaphoreNew+0x108>
    mem = -1;
 80052b0:	f04f 33ff 	mov.w	r3, #4294967295
 80052b4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d015      	beq.n	80052e8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d006      	beq.n	80052d2 <osSemaphoreNew+0x4c>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	2b4f      	cmp	r3, #79	; 0x4f
 80052ca:	d902      	bls.n	80052d2 <osSemaphoreNew+0x4c>
        mem = 1;
 80052cc:	2301      	movs	r3, #1
 80052ce:	61bb      	str	r3, [r7, #24]
 80052d0:	e00c      	b.n	80052ec <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d108      	bne.n	80052ec <osSemaphoreNew+0x66>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d104      	bne.n	80052ec <osSemaphoreNew+0x66>
          mem = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	61bb      	str	r3, [r7, #24]
 80052e6:	e001      	b.n	80052ec <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f2:	d04c      	beq.n	800538e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d128      	bne.n	800534c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d10a      	bne.n	8005316 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	2203      	movs	r2, #3
 8005306:	9200      	str	r2, [sp, #0]
 8005308:	2200      	movs	r2, #0
 800530a:	2100      	movs	r1, #0
 800530c:	2001      	movs	r0, #1
 800530e:	f000 fac5 	bl	800589c <xQueueGenericCreateStatic>
 8005312:	61f8      	str	r0, [r7, #28]
 8005314:	e005      	b.n	8005322 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005316:	2203      	movs	r2, #3
 8005318:	2100      	movs	r1, #0
 800531a:	2001      	movs	r0, #1
 800531c:	f000 fb36 	bl	800598c <xQueueGenericCreate>
 8005320:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d022      	beq.n	800536e <osSemaphoreNew+0xe8>
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d01f      	beq.n	800536e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800532e:	2300      	movs	r3, #0
 8005330:	2200      	movs	r2, #0
 8005332:	2100      	movs	r1, #0
 8005334:	69f8      	ldr	r0, [r7, #28]
 8005336:	f000 fbf1 	bl	8005b1c <xQueueGenericSend>
 800533a:	4603      	mov	r3, r0
 800533c:	2b01      	cmp	r3, #1
 800533e:	d016      	beq.n	800536e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005340:	69f8      	ldr	r0, [r7, #28]
 8005342:	f000 fee5 	bl	8006110 <vQueueDelete>
            hSemaphore = NULL;
 8005346:	2300      	movs	r3, #0
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	e010      	b.n	800536e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d108      	bne.n	8005364 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	461a      	mov	r2, r3
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 fb73 	bl	8005a46 <xQueueCreateCountingSemaphoreStatic>
 8005360:	61f8      	str	r0, [r7, #28]
 8005362:	e004      	b.n	800536e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fba4 	bl	8005ab4 <xQueueCreateCountingSemaphore>
 800536c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00c      	beq.n	800538e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <osSemaphoreNew+0xfc>
          name = attr->name;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	e001      	b.n	8005386 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005386:	6979      	ldr	r1, [r7, #20]
 8005388:	69f8      	ldr	r0, [r7, #28]
 800538a:	f000 fff5 	bl	8006378 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800538e:	69fb      	ldr	r3, [r7, #28]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3720      	adds	r7, #32
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005398:	b580      	push	{r7, lr}
 800539a:	b08a      	sub	sp, #40	; 0x28
 800539c:	af02      	add	r7, sp, #8
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053a8:	f3ef 8305 	mrs	r3, IPSR
 80053ac:	613b      	str	r3, [r7, #16]
  return(result);
 80053ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d15f      	bne.n	8005474 <osMessageQueueNew+0xdc>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d05c      	beq.n	8005474 <osMessageQueueNew+0xdc>
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d059      	beq.n	8005474 <osMessageQueueNew+0xdc>
    mem = -1;
 80053c0:	f04f 33ff 	mov.w	r3, #4294967295
 80053c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d029      	beq.n	8005420 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d012      	beq.n	80053fa <osMessageQueueNew+0x62>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	2b4f      	cmp	r3, #79	; 0x4f
 80053da:	d90e      	bls.n	80053fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	695a      	ldr	r2, [r3, #20]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	fb01 f303 	mul.w	r3, r1, r3
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d302      	bcc.n	80053fa <osMessageQueueNew+0x62>
        mem = 1;
 80053f4:	2301      	movs	r3, #1
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	e014      	b.n	8005424 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d110      	bne.n	8005424 <osMessageQueueNew+0x8c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10c      	bne.n	8005424 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800540e:	2b00      	cmp	r3, #0
 8005410:	d108      	bne.n	8005424 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d104      	bne.n	8005424 <osMessageQueueNew+0x8c>
          mem = 0;
 800541a:	2300      	movs	r3, #0
 800541c:	61bb      	str	r3, [r7, #24]
 800541e:	e001      	b.n	8005424 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d10b      	bne.n	8005442 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2100      	movs	r1, #0
 8005434:	9100      	str	r1, [sp, #0]
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 fa2f 	bl	800589c <xQueueGenericCreateStatic>
 800543e:	61f8      	str	r0, [r7, #28]
 8005440:	e008      	b.n	8005454 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d105      	bne.n	8005454 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005448:	2200      	movs	r2, #0
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 fa9d 	bl	800598c <xQueueGenericCreate>
 8005452:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00c      	beq.n	8005474 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	e001      	b.n	800546c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005468:	2300      	movs	r3, #0
 800546a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800546c:	6979      	ldr	r1, [r7, #20]
 800546e:	69f8      	ldr	r0, [r7, #28]
 8005470:	f000 ff82 	bl	8006378 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005474:	69fb      	ldr	r3, [r7, #28]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3720      	adds	r7, #32
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005480:	b580      	push	{r7, lr}
 8005482:	b088      	sub	sp, #32
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	4613      	mov	r3, r2
 800548e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005494:	2300      	movs	r3, #0
 8005496:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005498:	f3ef 8305 	mrs	r3, IPSR
 800549c:	617b      	str	r3, [r7, #20]
  return(result);
 800549e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d028      	beq.n	80054f6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d005      	beq.n	80054b6 <osMessageQueuePut+0x36>
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <osMessageQueuePut+0x36>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80054b6:	f06f 0303 	mvn.w	r3, #3
 80054ba:	61fb      	str	r3, [r7, #28]
 80054bc:	e038      	b.n	8005530 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80054be:	2300      	movs	r3, #0
 80054c0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80054c2:	f107 0210 	add.w	r2, r7, #16
 80054c6:	2300      	movs	r3, #0
 80054c8:	68b9      	ldr	r1, [r7, #8]
 80054ca:	69b8      	ldr	r0, [r7, #24]
 80054cc:	f000 fc24 	bl	8005d18 <xQueueGenericSendFromISR>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d003      	beq.n	80054de <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80054d6:	f06f 0302 	mvn.w	r3, #2
 80054da:	61fb      	str	r3, [r7, #28]
 80054dc:	e028      	b.n	8005530 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d025      	beq.n	8005530 <osMessageQueuePut+0xb0>
 80054e4:	4b15      	ldr	r3, [pc, #84]	; (800553c <osMessageQueuePut+0xbc>)
 80054e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	e01c      	b.n	8005530 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <osMessageQueuePut+0x82>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d103      	bne.n	800550a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005502:	f06f 0303 	mvn.w	r3, #3
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	e012      	b.n	8005530 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800550a:	2300      	movs	r3, #0
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	69b8      	ldr	r0, [r7, #24]
 8005512:	f000 fb03 	bl	8005b1c <xQueueGenericSend>
 8005516:	4603      	mov	r3, r0
 8005518:	2b01      	cmp	r3, #1
 800551a:	d009      	beq.n	8005530 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005522:	f06f 0301 	mvn.w	r3, #1
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	e002      	b.n	8005530 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800552a:	f06f 0302 	mvn.w	r3, #2
 800552e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005530:	69fb      	ldr	r3, [r7, #28]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3720      	adds	r7, #32
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	e000ed04 	.word	0xe000ed04

08005540 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005552:	2300      	movs	r3, #0
 8005554:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005556:	f3ef 8305 	mrs	r3, IPSR
 800555a:	617b      	str	r3, [r7, #20]
  return(result);
 800555c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800555e:	2b00      	cmp	r3, #0
 8005560:	d028      	beq.n	80055b4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <osMessageQueueGet+0x34>
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <osMessageQueueGet+0x34>
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005574:	f06f 0303 	mvn.w	r3, #3
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	e037      	b.n	80055ec <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800557c:	2300      	movs	r3, #0
 800557e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005580:	f107 0310 	add.w	r3, r7, #16
 8005584:	461a      	mov	r2, r3
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	69b8      	ldr	r0, [r7, #24]
 800558a:	f000 fd41 	bl	8006010 <xQueueReceiveFromISR>
 800558e:	4603      	mov	r3, r0
 8005590:	2b01      	cmp	r3, #1
 8005592:	d003      	beq.n	800559c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005594:	f06f 0302 	mvn.w	r3, #2
 8005598:	61fb      	str	r3, [r7, #28]
 800559a:	e027      	b.n	80055ec <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d024      	beq.n	80055ec <osMessageQueueGet+0xac>
 80055a2:	4b15      	ldr	r3, [pc, #84]	; (80055f8 <osMessageQueueGet+0xb8>)
 80055a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	e01b      	b.n	80055ec <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <osMessageQueueGet+0x80>
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d103      	bne.n	80055c8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80055c0:	f06f 0303 	mvn.w	r3, #3
 80055c4:	61fb      	str	r3, [r7, #28]
 80055c6:	e011      	b.n	80055ec <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	68b9      	ldr	r1, [r7, #8]
 80055cc:	69b8      	ldr	r0, [r7, #24]
 80055ce:	f000 fc3f 	bl	8005e50 <xQueueReceive>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d009      	beq.n	80055ec <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80055de:	f06f 0301 	mvn.w	r3, #1
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	e002      	b.n	80055ec <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80055e6:	f06f 0302 	mvn.w	r3, #2
 80055ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80055ec:	69fb      	ldr	r3, [r7, #28]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3720      	adds	r7, #32
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	e000ed04 	.word	0xe000ed04

080055fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4a07      	ldr	r2, [pc, #28]	; (8005628 <vApplicationGetIdleTaskMemory+0x2c>)
 800560c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4a06      	ldr	r2, [pc, #24]	; (800562c <vApplicationGetIdleTaskMemory+0x30>)
 8005612:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2280      	movs	r2, #128	; 0x80
 8005618:	601a      	str	r2, [r3, #0]
}
 800561a:	bf00      	nop
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	200015b0 	.word	0x200015b0
 800562c:	20001614 	.word	0x20001614

08005630 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4a07      	ldr	r2, [pc, #28]	; (800565c <vApplicationGetTimerTaskMemory+0x2c>)
 8005640:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4a06      	ldr	r2, [pc, #24]	; (8005660 <vApplicationGetTimerTaskMemory+0x30>)
 8005646:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800564e:	601a      	str	r2, [r3, #0]
}
 8005650:	bf00      	nop
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	20001814 	.word	0x20001814
 8005660:	20001878 	.word	0x20001878

08005664 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f103 0208 	add.w	r2, r3, #8
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f04f 32ff 	mov.w	r2, #4294967295
 800567c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f103 0208 	add.w	r2, r3, #8
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f103 0208 	add.w	r2, r3, #8
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056be:	b480      	push	{r7}
 80056c0:	b085      	sub	sp, #20
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	601a      	str	r2, [r3, #0]
}
 80056fa:	bf00      	nop
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005706:	b480      	push	{r7}
 8005708:	b085      	sub	sp, #20
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571c:	d103      	bne.n	8005726 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	e00c      	b.n	8005740 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3308      	adds	r3, #8
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	e002      	b.n	8005734 <vListInsert+0x2e>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	429a      	cmp	r2, r3
 800573e:	d2f6      	bcs.n	800572e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	601a      	str	r2, [r3, #0]
}
 800576c:	bf00      	nop
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6892      	ldr	r2, [r2, #8]
 800578e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	6852      	ldr	r2, [r2, #4]
 8005798:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d103      	bne.n	80057ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	1e5a      	subs	r2, r3, #1
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10a      	bne.n	80057f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057f2:	bf00      	nop
 80057f4:	e7fe      	b.n	80057f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80057f6:	f002 f9e5 	bl	8007bc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	68f9      	ldr	r1, [r7, #12]
 8005804:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005806:	fb01 f303 	mul.w	r3, r1, r3
 800580a:	441a      	add	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005826:	3b01      	subs	r3, #1
 8005828:	68f9      	ldr	r1, [r7, #12]
 800582a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800582c:	fb01 f303 	mul.w	r3, r1, r3
 8005830:	441a      	add	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	22ff      	movs	r2, #255	; 0xff
 800583a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	22ff      	movs	r2, #255	; 0xff
 8005842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d114      	bne.n	8005876 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01a      	beq.n	800588a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3310      	adds	r3, #16
 8005858:	4618      	mov	r0, r3
 800585a:	f001 fa97 	bl	8006d8c <xTaskRemoveFromEventList>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d012      	beq.n	800588a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005864:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <xQueueGenericReset+0xcc>)
 8005866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	e009      	b.n	800588a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3310      	adds	r3, #16
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff fef2 	bl	8005664 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	3324      	adds	r3, #36	; 0x24
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff feed 	bl	8005664 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800588a:	f002 f9cb 	bl	8007c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800588e:	2301      	movs	r3, #1
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	e000ed04 	.word	0xe000ed04

0800589c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08e      	sub	sp, #56	; 0x38
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10a      	bne.n	80058c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058c2:	bf00      	nop
 80058c4:	e7fe      	b.n	80058c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10a      	bne.n	80058e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058de:	bf00      	nop
 80058e0:	e7fe      	b.n	80058e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <xQueueGenericCreateStatic+0x52>
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <xQueueGenericCreateStatic+0x56>
 80058ee:	2301      	movs	r3, #1
 80058f0:	e000      	b.n	80058f4 <xQueueGenericCreateStatic+0x58>
 80058f2:	2300      	movs	r3, #0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10a      	bne.n	800590e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	623b      	str	r3, [r7, #32]
}
 800590a:	bf00      	nop
 800590c:	e7fe      	b.n	800590c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d102      	bne.n	800591a <xQueueGenericCreateStatic+0x7e>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <xQueueGenericCreateStatic+0x82>
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <xQueueGenericCreateStatic+0x84>
 800591e:	2300      	movs	r3, #0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10a      	bne.n	800593a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	61fb      	str	r3, [r7, #28]
}
 8005936:	bf00      	nop
 8005938:	e7fe      	b.n	8005938 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800593a:	2350      	movs	r3, #80	; 0x50
 800593c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2b50      	cmp	r3, #80	; 0x50
 8005942:	d00a      	beq.n	800595a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	61bb      	str	r3, [r7, #24]
}
 8005956:	bf00      	nop
 8005958:	e7fe      	b.n	8005958 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800595a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00d      	beq.n	8005982 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800596e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	4613      	mov	r3, r2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 f83f 	bl	8005a00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005984:	4618      	mov	r0, r3
 8005986:	3730      	adds	r7, #48	; 0x30
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08a      	sub	sp, #40	; 0x28
 8005990:	af02      	add	r7, sp, #8
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	4613      	mov	r3, r2
 8005998:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	613b      	str	r3, [r7, #16]
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	fb02 f303 	mul.w	r3, r2, r3
 80059be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	3350      	adds	r3, #80	; 0x50
 80059c4:	4618      	mov	r0, r3
 80059c6:	f002 fa1f 	bl	8007e08 <pvPortMalloc>
 80059ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d011      	beq.n	80059f6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	3350      	adds	r3, #80	; 0x50
 80059da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059e4:	79fa      	ldrb	r2, [r7, #7]
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	4613      	mov	r3, r2
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f805 	bl	8005a00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059f6:	69bb      	ldr	r3, [r7, #24]
	}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3720      	adds	r7, #32
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
 8005a0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d103      	bne.n	8005a1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	e002      	b.n	8005a22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a2e:	2101      	movs	r1, #1
 8005a30:	69b8      	ldr	r0, [r7, #24]
 8005a32:	f7ff fecb 	bl	80057cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	78fa      	ldrb	r2, [r7, #3]
 8005a3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a3e:	bf00      	nop
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b08a      	sub	sp, #40	; 0x28
 8005a4a:	af02      	add	r7, sp, #8
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	61bb      	str	r3, [r7, #24]
}
 8005a6a:	bf00      	nop
 8005a6c:	e7fe      	b.n	8005a6c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d90a      	bls.n	8005a8c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	617b      	str	r3, [r7, #20]
}
 8005a88:	bf00      	nop
 8005a8a:	e7fe      	b.n	8005a8a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	2100      	movs	r1, #0
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f7ff ff00 	bl	800589c <xQueueGenericCreateStatic>
 8005a9c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005aaa:	69fb      	ldr	r3, [r7, #28]
	}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3720      	adds	r7, #32
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10a      	bne.n	8005ada <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	613b      	str	r3, [r7, #16]
}
 8005ad6:	bf00      	nop
 8005ad8:	e7fe      	b.n	8005ad8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d90a      	bls.n	8005af8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	60fb      	str	r3, [r7, #12]
}
 8005af4:	bf00      	nop
 8005af6:	e7fe      	b.n	8005af6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005af8:	2202      	movs	r2, #2
 8005afa:	2100      	movs	r1, #0
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff ff45 	bl	800598c <xQueueGenericCreate>
 8005b02:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005b10:	697b      	ldr	r3, [r7, #20]
	}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08e      	sub	sp, #56	; 0x38
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10a      	bne.n	8005b4e <xQueueGenericSend+0x32>
	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b4a:	bf00      	nop
 8005b4c:	e7fe      	b.n	8005b4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d103      	bne.n	8005b5c <xQueueGenericSend+0x40>
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <xQueueGenericSend+0x44>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e000      	b.n	8005b62 <xQueueGenericSend+0x46>
 8005b60:	2300      	movs	r3, #0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10a      	bne.n	8005b7c <xQueueGenericSend+0x60>
	__asm volatile
 8005b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b78:	bf00      	nop
 8005b7a:	e7fe      	b.n	8005b7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d103      	bne.n	8005b8a <xQueueGenericSend+0x6e>
 8005b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d101      	bne.n	8005b8e <xQueueGenericSend+0x72>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e000      	b.n	8005b90 <xQueueGenericSend+0x74>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <xQueueGenericSend+0x8e>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	623b      	str	r3, [r7, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005baa:	f001 faad 	bl	8007108 <xTaskGetSchedulerState>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d102      	bne.n	8005bba <xQueueGenericSend+0x9e>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <xQueueGenericSend+0xa2>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <xQueueGenericSend+0xa4>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <xQueueGenericSend+0xbe>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	61fb      	str	r3, [r7, #28]
}
 8005bd6:	bf00      	nop
 8005bd8:	e7fe      	b.n	8005bd8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bda:	f001 fff3 	bl	8007bc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d302      	bcc.n	8005bf0 <xQueueGenericSend+0xd4>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d129      	bne.n	8005c44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bf6:	f000 faae 	bl	8006156 <prvCopyDataToQueue>
 8005bfa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d010      	beq.n	8005c26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	3324      	adds	r3, #36	; 0x24
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 f8bf 	bl	8006d8c <xTaskRemoveFromEventList>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d013      	beq.n	8005c3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c14:	4b3f      	ldr	r3, [pc, #252]	; (8005d14 <xQueueGenericSend+0x1f8>)
 8005c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	e00a      	b.n	8005c3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d007      	beq.n	8005c3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c2c:	4b39      	ldr	r3, [pc, #228]	; (8005d14 <xQueueGenericSend+0x1f8>)
 8005c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c3c:	f001 fff2 	bl	8007c24 <vPortExitCritical>
				return pdPASS;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e063      	b.n	8005d0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d103      	bne.n	8005c52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c4a:	f001 ffeb 	bl	8007c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e05c      	b.n	8005d0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d106      	bne.n	8005c66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c58:	f107 0314 	add.w	r3, r7, #20
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f001 f8f9 	bl	8006e54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c62:	2301      	movs	r3, #1
 8005c64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c66:	f001 ffdd 	bl	8007c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c6a:	f000 fe51 	bl	8006910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c6e:	f001 ffa9 	bl	8007bc4 <vPortEnterCritical>
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c78:	b25b      	sxtb	r3, r3
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7e:	d103      	bne.n	8005c88 <xQueueGenericSend+0x16c>
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c8e:	b25b      	sxtb	r3, r3
 8005c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c94:	d103      	bne.n	8005c9e <xQueueGenericSend+0x182>
 8005c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c9e:	f001 ffc1 	bl	8007c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ca2:	1d3a      	adds	r2, r7, #4
 8005ca4:	f107 0314 	add.w	r3, r7, #20
 8005ca8:	4611      	mov	r1, r2
 8005caa:	4618      	mov	r0, r3
 8005cac:	f001 f8e8 	bl	8006e80 <xTaskCheckForTimeOut>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d124      	bne.n	8005d00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005cb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cb8:	f000 fb45 	bl	8006346 <prvIsQueueFull>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d018      	beq.n	8005cf4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	3310      	adds	r3, #16
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	4611      	mov	r1, r2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f001 f80e 	bl	8006cec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cd2:	f000 fad0 	bl	8006276 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005cd6:	f000 fe29 	bl	800692c <xTaskResumeAll>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f47f af7c 	bne.w	8005bda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005ce2:	4b0c      	ldr	r3, [pc, #48]	; (8005d14 <xQueueGenericSend+0x1f8>)
 8005ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	e772      	b.n	8005bda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cf6:	f000 fabe 	bl	8006276 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cfa:	f000 fe17 	bl	800692c <xTaskResumeAll>
 8005cfe:	e76c      	b.n	8005bda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d02:	f000 fab8 	bl	8006276 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d06:	f000 fe11 	bl	800692c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3738      	adds	r7, #56	; 0x38
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	e000ed04 	.word	0xe000ed04

08005d18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b090      	sub	sp, #64	; 0x40
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10a      	bne.n	8005d46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d42:	bf00      	nop
 8005d44:	e7fe      	b.n	8005d44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d103      	bne.n	8005d54 <xQueueGenericSendFromISR+0x3c>
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <xQueueGenericSendFromISR+0x40>
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <xQueueGenericSendFromISR+0x42>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10a      	bne.n	8005d74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d70:	bf00      	nop
 8005d72:	e7fe      	b.n	8005d72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d103      	bne.n	8005d82 <xQueueGenericSendFromISR+0x6a>
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d101      	bne.n	8005d86 <xQueueGenericSendFromISR+0x6e>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <xQueueGenericSendFromISR+0x70>
 8005d86:	2300      	movs	r3, #0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	623b      	str	r3, [r7, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	e7fe      	b.n	8005da0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005da2:	f001 fff1 	bl	8007d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005da6:	f3ef 8211 	mrs	r2, BASEPRI
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	61fa      	str	r2, [r7, #28]
 8005dbc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005dbe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005dc0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d302      	bcc.n	8005dd4 <xQueueGenericSendFromISR+0xbc>
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d12f      	bne.n	8005e34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dea:	f000 f9b4 	bl	8006156 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005dee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df6:	d112      	bne.n	8005e1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d016      	beq.n	8005e2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e02:	3324      	adds	r3, #36	; 0x24
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 ffc1 	bl	8006d8c <xTaskRemoveFromEventList>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00e      	beq.n	8005e2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00b      	beq.n	8005e2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	e007      	b.n	8005e2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e22:	3301      	adds	r3, #1
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	b25a      	sxtb	r2, r3
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005e32:	e001      	b.n	8005e38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e34:	2300      	movs	r3, #0
 8005e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3740      	adds	r7, #64	; 0x40
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08c      	sub	sp, #48	; 0x30
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10a      	bne.n	8005e80 <xQueueReceive+0x30>
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	623b      	str	r3, [r7, #32]
}
 8005e7c:	bf00      	nop
 8005e7e:	e7fe      	b.n	8005e7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d103      	bne.n	8005e8e <xQueueReceive+0x3e>
 8005e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <xQueueReceive+0x42>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e000      	b.n	8005e94 <xQueueReceive+0x44>
 8005e92:	2300      	movs	r3, #0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <xQueueReceive+0x5e>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	61fb      	str	r3, [r7, #28]
}
 8005eaa:	bf00      	nop
 8005eac:	e7fe      	b.n	8005eac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005eae:	f001 f92b 	bl	8007108 <xTaskGetSchedulerState>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d102      	bne.n	8005ebe <xQueueReceive+0x6e>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <xQueueReceive+0x72>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <xQueueReceive+0x74>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10a      	bne.n	8005ede <xQueueReceive+0x8e>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	61bb      	str	r3, [r7, #24]
}
 8005eda:	bf00      	nop
 8005edc:	e7fe      	b.n	8005edc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ede:	f001 fe71 	bl	8007bc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d01f      	beq.n	8005f2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005eee:	68b9      	ldr	r1, [r7, #8]
 8005ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ef2:	f000 f99a 	bl	800622a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	1e5a      	subs	r2, r3, #1
 8005efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00f      	beq.n	8005f26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f08:	3310      	adds	r3, #16
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 ff3e 	bl	8006d8c <xTaskRemoveFromEventList>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d007      	beq.n	8005f26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f16:	4b3d      	ldr	r3, [pc, #244]	; (800600c <xQueueReceive+0x1bc>)
 8005f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f26:	f001 fe7d 	bl	8007c24 <vPortExitCritical>
				return pdPASS;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e069      	b.n	8006002 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d103      	bne.n	8005f3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f34:	f001 fe76 	bl	8007c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e062      	b.n	8006002 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f42:	f107 0310 	add.w	r3, r7, #16
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 ff84 	bl	8006e54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f50:	f001 fe68 	bl	8007c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f54:	f000 fcdc 	bl	8006910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f58:	f001 fe34 	bl	8007bc4 <vPortEnterCritical>
 8005f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f62:	b25b      	sxtb	r3, r3
 8005f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f68:	d103      	bne.n	8005f72 <xQueueReceive+0x122>
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f78:	b25b      	sxtb	r3, r3
 8005f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7e:	d103      	bne.n	8005f88 <xQueueReceive+0x138>
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f88:	f001 fe4c 	bl	8007c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f8c:	1d3a      	adds	r2, r7, #4
 8005f8e:	f107 0310 	add.w	r3, r7, #16
 8005f92:	4611      	mov	r1, r2
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 ff73 	bl	8006e80 <xTaskCheckForTimeOut>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d123      	bne.n	8005fe8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fa2:	f000 f9ba 	bl	800631a <prvIsQueueEmpty>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d017      	beq.n	8005fdc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	3324      	adds	r3, #36	; 0x24
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 fe99 	bl	8006cec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fbc:	f000 f95b 	bl	8006276 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fc0:	f000 fcb4 	bl	800692c <xTaskResumeAll>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d189      	bne.n	8005ede <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005fca:	4b10      	ldr	r3, [pc, #64]	; (800600c <xQueueReceive+0x1bc>)
 8005fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	e780      	b.n	8005ede <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fde:	f000 f94a 	bl	8006276 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fe2:	f000 fca3 	bl	800692c <xTaskResumeAll>
 8005fe6:	e77a      	b.n	8005ede <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fea:	f000 f944 	bl	8006276 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fee:	f000 fc9d 	bl	800692c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ff4:	f000 f991 	bl	800631a <prvIsQueueEmpty>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f43f af6f 	beq.w	8005ede <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006000:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006002:	4618      	mov	r0, r3
 8006004:	3730      	adds	r7, #48	; 0x30
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	e000ed04 	.word	0xe000ed04

08006010 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08e      	sub	sp, #56	; 0x38
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10a      	bne.n	800603c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	623b      	str	r3, [r7, #32]
}
 8006038:	bf00      	nop
 800603a:	e7fe      	b.n	800603a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d103      	bne.n	800604a <xQueueReceiveFromISR+0x3a>
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <xQueueReceiveFromISR+0x3e>
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <xQueueReceiveFromISR+0x40>
 800604e:	2300      	movs	r3, #0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	61fb      	str	r3, [r7, #28]
}
 8006066:	bf00      	nop
 8006068:	e7fe      	b.n	8006068 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800606a:	f001 fe8d 	bl	8007d88 <vPortValidateInterruptPriority>
	__asm volatile
 800606e:	f3ef 8211 	mrs	r2, BASEPRI
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	61ba      	str	r2, [r7, #24]
 8006084:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006086:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006088:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006092:	2b00      	cmp	r3, #0
 8006094:	d02f      	beq.n	80060f6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800609c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060a4:	f000 f8c1 	bl	800622a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	1e5a      	subs	r2, r3, #1
 80060ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80060b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b8:	d112      	bne.n	80060e0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d016      	beq.n	80060f0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	3310      	adds	r3, #16
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fe60 	bl	8006d8c <xTaskRemoveFromEventList>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00e      	beq.n	80060f0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00b      	beq.n	80060f0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	e007      	b.n	80060f0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80060e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060e4:	3301      	adds	r3, #1
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	b25a      	sxtb	r2, r3
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80060f0:	2301      	movs	r3, #1
 80060f2:	637b      	str	r3, [r7, #52]	; 0x34
 80060f4:	e001      	b.n	80060fa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	637b      	str	r3, [r7, #52]	; 0x34
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f383 8811 	msr	BASEPRI, r3
}
 8006104:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006108:	4618      	mov	r0, r3
 800610a:	3738      	adds	r7, #56	; 0x38
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <vQueueDelete+0x28>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	60bb      	str	r3, [r7, #8]
}
 8006134:	bf00      	nop
 8006136:	e7fe      	b.n	8006136 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 f947 	bl	80063cc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006144:	2b00      	cmp	r3, #0
 8006146:	d102      	bne.n	800614e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f001 ff29 	bl	8007fa0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800614e:	bf00      	nop
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b086      	sub	sp, #24
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10d      	bne.n	8006190 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d14d      	bne.n	8006218 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	4618      	mov	r0, r3
 8006182:	f000 ffdf 	bl	8007144 <xTaskPriorityDisinherit>
 8006186:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	609a      	str	r2, [r3, #8]
 800618e:	e043      	b.n	8006218 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d119      	bne.n	80061ca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6858      	ldr	r0, [r3, #4]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	461a      	mov	r2, r3
 80061a0:	68b9      	ldr	r1, [r7, #8]
 80061a2:	f002 f845 	bl	8008230 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	441a      	add	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d32b      	bcc.n	8006218 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	605a      	str	r2, [r3, #4]
 80061c8:	e026      	b.n	8006218 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	68d8      	ldr	r0, [r3, #12]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	461a      	mov	r2, r3
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	f002 f82b 	bl	8008230 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	425b      	negs	r3, r3
 80061e4:	441a      	add	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d207      	bcs.n	8006206 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	425b      	negs	r3, r3
 8006200:	441a      	add	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b02      	cmp	r3, #2
 800620a:	d105      	bne.n	8006218 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	3b01      	subs	r3, #1
 8006216:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006220:	697b      	ldr	r3, [r7, #20]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	d018      	beq.n	800626e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68da      	ldr	r2, [r3, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006244:	441a      	add	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	429a      	cmp	r2, r3
 8006254:	d303      	bcc.n	800625e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68d9      	ldr	r1, [r3, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	461a      	mov	r2, r3
 8006268:	6838      	ldr	r0, [r7, #0]
 800626a:	f001 ffe1 	bl	8008230 <memcpy>
	}
}
 800626e:	bf00      	nop
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800627e:	f001 fca1 	bl	8007bc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006288:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800628a:	e011      	b.n	80062b0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	2b00      	cmp	r3, #0
 8006292:	d012      	beq.n	80062ba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3324      	adds	r3, #36	; 0x24
 8006298:	4618      	mov	r0, r3
 800629a:	f000 fd77 	bl	8006d8c <xTaskRemoveFromEventList>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062a4:	f000 fe4e 	bl	8006f44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	dce9      	bgt.n	800628c <prvUnlockQueue+0x16>
 80062b8:	e000      	b.n	80062bc <prvUnlockQueue+0x46>
					break;
 80062ba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	22ff      	movs	r2, #255	; 0xff
 80062c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80062c4:	f001 fcae 	bl	8007c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062c8:	f001 fc7c 	bl	8007bc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062d2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062d4:	e011      	b.n	80062fa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d012      	beq.n	8006304 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	3310      	adds	r3, #16
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fd52 	bl	8006d8c <xTaskRemoveFromEventList>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062ee:	f000 fe29 	bl	8006f44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062f2:	7bbb      	ldrb	r3, [r7, #14]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	dce9      	bgt.n	80062d6 <prvUnlockQueue+0x60>
 8006302:	e000      	b.n	8006306 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006304:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	22ff      	movs	r2, #255	; 0xff
 800630a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800630e:	f001 fc89 	bl	8007c24 <vPortExitCritical>
}
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006322:	f001 fc4f 	bl	8007bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632a:	2b00      	cmp	r3, #0
 800632c:	d102      	bne.n	8006334 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800632e:	2301      	movs	r3, #1
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	e001      	b.n	8006338 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006338:	f001 fc74 	bl	8007c24 <vPortExitCritical>

	return xReturn;
 800633c:	68fb      	ldr	r3, [r7, #12]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b084      	sub	sp, #16
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800634e:	f001 fc39 	bl	8007bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635a:	429a      	cmp	r2, r3
 800635c:	d102      	bne.n	8006364 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800635e:	2301      	movs	r3, #1
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	e001      	b.n	8006368 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006364:	2300      	movs	r3, #0
 8006366:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006368:	f001 fc5c 	bl	8007c24 <vPortExitCritical>

	return xReturn;
 800636c:	68fb      	ldr	r3, [r7, #12]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	e014      	b.n	80063b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006388:	4a0f      	ldr	r2, [pc, #60]	; (80063c8 <vQueueAddToRegistry+0x50>)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10b      	bne.n	80063ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006394:	490c      	ldr	r1, [pc, #48]	; (80063c8 <vQueueAddToRegistry+0x50>)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800639e:	4a0a      	ldr	r2, [pc, #40]	; (80063c8 <vQueueAddToRegistry+0x50>)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	4413      	add	r3, r2
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80063aa:	e006      	b.n	80063ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b07      	cmp	r3, #7
 80063b6:	d9e7      	bls.n	8006388 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80063b8:	bf00      	nop
 80063ba:	bf00      	nop
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	20001c78 	.word	0x20001c78

080063cc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	e016      	b.n	8006408 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80063da:	4a10      	ldr	r2, [pc, #64]	; (800641c <vQueueUnregisterQueue+0x50>)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	4413      	add	r3, r2
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d10b      	bne.n	8006402 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80063ea:	4a0c      	ldr	r2, [pc, #48]	; (800641c <vQueueUnregisterQueue+0x50>)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2100      	movs	r1, #0
 80063f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80063f4:	4a09      	ldr	r2, [pc, #36]	; (800641c <vQueueUnregisterQueue+0x50>)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	4413      	add	r3, r2
 80063fc:	2200      	movs	r2, #0
 80063fe:	605a      	str	r2, [r3, #4]
				break;
 8006400:	e006      	b.n	8006410 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3301      	adds	r3, #1
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2b07      	cmp	r3, #7
 800640c:	d9e5      	bls.n	80063da <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800640e:	bf00      	nop
 8006410:	bf00      	nop
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	20001c78 	.word	0x20001c78

08006420 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006430:	f001 fbc8 	bl	8007bc4 <vPortEnterCritical>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800643a:	b25b      	sxtb	r3, r3
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d103      	bne.n	800644a <vQueueWaitForMessageRestricted+0x2a>
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006450:	b25b      	sxtb	r3, r3
 8006452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006456:	d103      	bne.n	8006460 <vQueueWaitForMessageRestricted+0x40>
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006460:	f001 fbe0 	bl	8007c24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	2b00      	cmp	r3, #0
 800646a:	d106      	bne.n	800647a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	3324      	adds	r3, #36	; 0x24
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fc5d 	bl	8006d34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800647a:	6978      	ldr	r0, [r7, #20]
 800647c:	f7ff fefb 	bl	8006276 <prvUnlockQueue>
	}
 8006480:	bf00      	nop
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08e      	sub	sp, #56	; 0x38
 800648c:	af04      	add	r7, sp, #16
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	623b      	str	r3, [r7, #32]
}
 80064ae:	bf00      	nop
 80064b0:	e7fe      	b.n	80064b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80064b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10a      	bne.n	80064ce <xTaskCreateStatic+0x46>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	61fb      	str	r3, [r7, #28]
}
 80064ca:	bf00      	nop
 80064cc:	e7fe      	b.n	80064cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064ce:	2364      	movs	r3, #100	; 0x64
 80064d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	2b64      	cmp	r3, #100	; 0x64
 80064d6:	d00a      	beq.n	80064ee <xTaskCreateStatic+0x66>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	61bb      	str	r3, [r7, #24]
}
 80064ea:	bf00      	nop
 80064ec:	e7fe      	b.n	80064ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01e      	beq.n	8006534 <xTaskCreateStatic+0xac>
 80064f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01b      	beq.n	8006534 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006504:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	2202      	movs	r2, #2
 800650a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800650e:	2300      	movs	r3, #0
 8006510:	9303      	str	r3, [sp, #12]
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	9302      	str	r3, [sp, #8]
 8006516:	f107 0314 	add.w	r3, r7, #20
 800651a:	9301      	str	r3, [sp, #4]
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 f850 	bl	80065cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800652c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800652e:	f000 f8e3 	bl	80066f8 <prvAddNewTaskToReadyList>
 8006532:	e001      	b.n	8006538 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006534:	2300      	movs	r3, #0
 8006536:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006538:	697b      	ldr	r3, [r7, #20]
	}
 800653a:	4618      	mov	r0, r3
 800653c:	3728      	adds	r7, #40	; 0x28
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006542:	b580      	push	{r7, lr}
 8006544:	b08c      	sub	sp, #48	; 0x30
 8006546:	af04      	add	r7, sp, #16
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	603b      	str	r3, [r7, #0]
 800654e:	4613      	mov	r3, r2
 8006550:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006552:	88fb      	ldrh	r3, [r7, #6]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4618      	mov	r0, r3
 8006558:	f001 fc56 	bl	8007e08 <pvPortMalloc>
 800655c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00e      	beq.n	8006582 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006564:	2064      	movs	r0, #100	; 0x64
 8006566:	f001 fc4f 	bl	8007e08 <pvPortMalloc>
 800656a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	631a      	str	r2, [r3, #48]	; 0x30
 8006578:	e005      	b.n	8006586 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800657a:	6978      	ldr	r0, [r7, #20]
 800657c:	f001 fd10 	bl	8007fa0 <vPortFree>
 8006580:	e001      	b.n	8006586 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d017      	beq.n	80065bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006594:	88fa      	ldrh	r2, [r7, #6]
 8006596:	2300      	movs	r3, #0
 8006598:	9303      	str	r3, [sp, #12]
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	9302      	str	r3, [sp, #8]
 800659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f80e 	bl	80065cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065b0:	69f8      	ldr	r0, [r7, #28]
 80065b2:	f000 f8a1 	bl	80066f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065b6:	2301      	movs	r3, #1
 80065b8:	61bb      	str	r3, [r7, #24]
 80065ba:	e002      	b.n	80065c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065bc:	f04f 33ff 	mov.w	r3, #4294967295
 80065c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065c2:	69bb      	ldr	r3, [r7, #24]
	}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3720      	adds	r7, #32
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	461a      	mov	r2, r3
 80065e4:	21a5      	movs	r1, #165	; 0xa5
 80065e6:	f001 fe31 	bl	800824c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065f4:	3b01      	subs	r3, #1
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	f023 0307 	bic.w	r3, r3, #7
 8006602:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <prvInitialiseNewTask+0x58>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	617b      	str	r3, [r7, #20]
}
 8006620:	bf00      	nop
 8006622:	e7fe      	b.n	8006622 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d01f      	beq.n	8006670 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006630:	2300      	movs	r3, #0
 8006632:	61fb      	str	r3, [r7, #28]
 8006634:	e012      	b.n	800665c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	4413      	add	r3, r2
 800663c:	7819      	ldrb	r1, [r3, #0]
 800663e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	3334      	adds	r3, #52	; 0x34
 8006646:	460a      	mov	r2, r1
 8006648:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	4413      	add	r3, r2
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d006      	beq.n	8006664 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	3301      	adds	r3, #1
 800665a:	61fb      	str	r3, [r7, #28]
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	2b0f      	cmp	r3, #15
 8006660:	d9e9      	bls.n	8006636 <prvInitialiseNewTask+0x6a>
 8006662:	e000      	b.n	8006666 <prvInitialiseNewTask+0x9a>
			{
				break;
 8006664:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800666e:	e003      	b.n	8006678 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	2b37      	cmp	r3, #55	; 0x37
 800667c:	d901      	bls.n	8006682 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800667e:	2337      	movs	r3, #55	; 0x37
 8006680:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006686:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800668c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	2200      	movs	r2, #0
 8006692:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006696:	3304      	adds	r3, #4
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff f803 	bl	80056a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	3318      	adds	r3, #24
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe fffe 	bl	80056a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066bc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	2200      	movs	r2, #0
 80066c2:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80066c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c6:	2200      	movs	r2, #0
 80066c8:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	68f9      	ldr	r1, [r7, #12]
 80066d6:	69b8      	ldr	r0, [r7, #24]
 80066d8:	f001 f944 	bl	8007964 <pxPortInitialiseStack>
 80066dc:	4602      	mov	r2, r0
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80066e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066ee:	bf00      	nop
 80066f0:	3720      	adds	r7, #32
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
	...

080066f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006700:	f001 fa60 	bl	8007bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006704:	4b2d      	ldr	r3, [pc, #180]	; (80067bc <prvAddNewTaskToReadyList+0xc4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3301      	adds	r3, #1
 800670a:	4a2c      	ldr	r2, [pc, #176]	; (80067bc <prvAddNewTaskToReadyList+0xc4>)
 800670c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800670e:	4b2c      	ldr	r3, [pc, #176]	; (80067c0 <prvAddNewTaskToReadyList+0xc8>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d109      	bne.n	800672a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006716:	4a2a      	ldr	r2, [pc, #168]	; (80067c0 <prvAddNewTaskToReadyList+0xc8>)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800671c:	4b27      	ldr	r3, [pc, #156]	; (80067bc <prvAddNewTaskToReadyList+0xc4>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d110      	bne.n	8006746 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006724:	f000 fc32 	bl	8006f8c <prvInitialiseTaskLists>
 8006728:	e00d      	b.n	8006746 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800672a:	4b26      	ldr	r3, [pc, #152]	; (80067c4 <prvAddNewTaskToReadyList+0xcc>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d109      	bne.n	8006746 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006732:	4b23      	ldr	r3, [pc, #140]	; (80067c0 <prvAddNewTaskToReadyList+0xc8>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673c:	429a      	cmp	r2, r3
 800673e:	d802      	bhi.n	8006746 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006740:	4a1f      	ldr	r2, [pc, #124]	; (80067c0 <prvAddNewTaskToReadyList+0xc8>)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006746:	4b20      	ldr	r3, [pc, #128]	; (80067c8 <prvAddNewTaskToReadyList+0xd0>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3301      	adds	r3, #1
 800674c:	4a1e      	ldr	r2, [pc, #120]	; (80067c8 <prvAddNewTaskToReadyList+0xd0>)
 800674e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006750:	4b1d      	ldr	r3, [pc, #116]	; (80067c8 <prvAddNewTaskToReadyList+0xd0>)
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675c:	4b1b      	ldr	r3, [pc, #108]	; (80067cc <prvAddNewTaskToReadyList+0xd4>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	429a      	cmp	r2, r3
 8006762:	d903      	bls.n	800676c <prvAddNewTaskToReadyList+0x74>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006768:	4a18      	ldr	r2, [pc, #96]	; (80067cc <prvAddNewTaskToReadyList+0xd4>)
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4a15      	ldr	r2, [pc, #84]	; (80067d0 <prvAddNewTaskToReadyList+0xd8>)
 800677a:	441a      	add	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3304      	adds	r3, #4
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f7fe ff9b 	bl	80056be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006788:	f001 fa4c 	bl	8007c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800678c:	4b0d      	ldr	r3, [pc, #52]	; (80067c4 <prvAddNewTaskToReadyList+0xcc>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00e      	beq.n	80067b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006794:	4b0a      	ldr	r3, [pc, #40]	; (80067c0 <prvAddNewTaskToReadyList+0xc8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	429a      	cmp	r2, r3
 80067a0:	d207      	bcs.n	80067b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067a2:	4b0c      	ldr	r3, [pc, #48]	; (80067d4 <prvAddNewTaskToReadyList+0xdc>)
 80067a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067b2:	bf00      	nop
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	2000218c 	.word	0x2000218c
 80067c0:	20001cb8 	.word	0x20001cb8
 80067c4:	20002198 	.word	0x20002198
 80067c8:	200021a8 	.word	0x200021a8
 80067cc:	20002194 	.word	0x20002194
 80067d0:	20001cbc 	.word	0x20001cbc
 80067d4:	e000ed04 	.word	0xe000ed04

080067d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d017      	beq.n	800681a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067ea:	4b13      	ldr	r3, [pc, #76]	; (8006838 <vTaskDelay+0x60>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <vTaskDelay+0x30>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	60bb      	str	r3, [r7, #8]
}
 8006804:	bf00      	nop
 8006806:	e7fe      	b.n	8006806 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006808:	f000 f882 	bl	8006910 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800680c:	2100      	movs	r1, #0
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fd06 	bl	8007220 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006814:	f000 f88a 	bl	800692c <xTaskResumeAll>
 8006818:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d107      	bne.n	8006830 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006820:	4b06      	ldr	r3, [pc, #24]	; (800683c <vTaskDelay+0x64>)
 8006822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006830:	bf00      	nop
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	200021b4 	.word	0x200021b4
 800683c:	e000ed04 	.word	0xe000ed04

08006840 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08a      	sub	sp, #40	; 0x28
 8006844:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006846:	2300      	movs	r3, #0
 8006848:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800684a:	2300      	movs	r3, #0
 800684c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800684e:	463a      	mov	r2, r7
 8006850:	1d39      	adds	r1, r7, #4
 8006852:	f107 0308 	add.w	r3, r7, #8
 8006856:	4618      	mov	r0, r3
 8006858:	f7fe fed0 	bl	80055fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	9202      	str	r2, [sp, #8]
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	2300      	movs	r3, #0
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	2300      	movs	r3, #0
 800686c:	460a      	mov	r2, r1
 800686e:	4922      	ldr	r1, [pc, #136]	; (80068f8 <vTaskStartScheduler+0xb8>)
 8006870:	4822      	ldr	r0, [pc, #136]	; (80068fc <vTaskStartScheduler+0xbc>)
 8006872:	f7ff fe09 	bl	8006488 <xTaskCreateStatic>
 8006876:	4603      	mov	r3, r0
 8006878:	4a21      	ldr	r2, [pc, #132]	; (8006900 <vTaskStartScheduler+0xc0>)
 800687a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800687c:	4b20      	ldr	r3, [pc, #128]	; (8006900 <vTaskStartScheduler+0xc0>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006884:	2301      	movs	r3, #1
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	e001      	b.n	800688e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800688a:	2300      	movs	r3, #0
 800688c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d102      	bne.n	800689a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006894:	f000 fd18 	bl	80072c8 <xTimerCreateTimerTask>
 8006898:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d118      	bne.n	80068d2 <vTaskStartScheduler+0x92>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	613b      	str	r3, [r7, #16]
}
 80068b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068b4:	4b13      	ldr	r3, [pc, #76]	; (8006904 <vTaskStartScheduler+0xc4>)
 80068b6:	f04f 32ff 	mov.w	r2, #4294967295
 80068ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068bc:	4b12      	ldr	r3, [pc, #72]	; (8006908 <vTaskStartScheduler+0xc8>)
 80068be:	2201      	movs	r2, #1
 80068c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068c2:	4b12      	ldr	r3, [pc, #72]	; (800690c <vTaskStartScheduler+0xcc>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80068c8:	f7fa faf0 	bl	8000eac <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068cc:	f001 f8d8 	bl	8007a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068d0:	e00e      	b.n	80068f0 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d8:	d10a      	bne.n	80068f0 <vTaskStartScheduler+0xb0>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	60fb      	str	r3, [r7, #12]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <vTaskStartScheduler+0xae>
}
 80068f0:	bf00      	nop
 80068f2:	3718      	adds	r7, #24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	0800c2dc 	.word	0x0800c2dc
 80068fc:	08006f5d 	.word	0x08006f5d
 8006900:	200021b0 	.word	0x200021b0
 8006904:	200021ac 	.word	0x200021ac
 8006908:	20002198 	.word	0x20002198
 800690c:	20002190 	.word	0x20002190

08006910 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006914:	4b04      	ldr	r3, [pc, #16]	; (8006928 <vTaskSuspendAll+0x18>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3301      	adds	r3, #1
 800691a:	4a03      	ldr	r2, [pc, #12]	; (8006928 <vTaskSuspendAll+0x18>)
 800691c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800691e:	bf00      	nop
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	200021b4 	.word	0x200021b4

0800692c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006932:	2300      	movs	r3, #0
 8006934:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006936:	2300      	movs	r3, #0
 8006938:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800693a:	4b42      	ldr	r3, [pc, #264]	; (8006a44 <xTaskResumeAll+0x118>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10a      	bne.n	8006958 <xTaskResumeAll+0x2c>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	603b      	str	r3, [r7, #0]
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006958:	f001 f934 	bl	8007bc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800695c:	4b39      	ldr	r3, [pc, #228]	; (8006a44 <xTaskResumeAll+0x118>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3b01      	subs	r3, #1
 8006962:	4a38      	ldr	r2, [pc, #224]	; (8006a44 <xTaskResumeAll+0x118>)
 8006964:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006966:	4b37      	ldr	r3, [pc, #220]	; (8006a44 <xTaskResumeAll+0x118>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d162      	bne.n	8006a34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800696e:	4b36      	ldr	r3, [pc, #216]	; (8006a48 <xTaskResumeAll+0x11c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d05e      	beq.n	8006a34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006976:	e02f      	b.n	80069d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006978:	4b34      	ldr	r3, [pc, #208]	; (8006a4c <xTaskResumeAll+0x120>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3318      	adds	r3, #24
 8006984:	4618      	mov	r0, r3
 8006986:	f7fe fef7 	bl	8005778 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3304      	adds	r3, #4
 800698e:	4618      	mov	r0, r3
 8006990:	f7fe fef2 	bl	8005778 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006998:	4b2d      	ldr	r3, [pc, #180]	; (8006a50 <xTaskResumeAll+0x124>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	429a      	cmp	r2, r3
 800699e:	d903      	bls.n	80069a8 <xTaskResumeAll+0x7c>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a4:	4a2a      	ldr	r2, [pc, #168]	; (8006a50 <xTaskResumeAll+0x124>)
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ac:	4613      	mov	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4a27      	ldr	r2, [pc, #156]	; (8006a54 <xTaskResumeAll+0x128>)
 80069b6:	441a      	add	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3304      	adds	r3, #4
 80069bc:	4619      	mov	r1, r3
 80069be:	4610      	mov	r0, r2
 80069c0:	f7fe fe7d 	bl	80056be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c8:	4b23      	ldr	r3, [pc, #140]	; (8006a58 <xTaskResumeAll+0x12c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d302      	bcc.n	80069d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80069d2:	4b22      	ldr	r3, [pc, #136]	; (8006a5c <xTaskResumeAll+0x130>)
 80069d4:	2201      	movs	r2, #1
 80069d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069d8:	4b1c      	ldr	r3, [pc, #112]	; (8006a4c <xTaskResumeAll+0x120>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1cb      	bne.n	8006978 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069e6:	f000 fb6f 	bl	80070c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80069ea:	4b1d      	ldr	r3, [pc, #116]	; (8006a60 <xTaskResumeAll+0x134>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d010      	beq.n	8006a18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069f6:	f000 f847 	bl	8006a88 <xTaskIncrementTick>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006a00:	4b16      	ldr	r3, [pc, #88]	; (8006a5c <xTaskResumeAll+0x130>)
 8006a02:	2201      	movs	r2, #1
 8006a04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f1      	bne.n	80069f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006a12:	4b13      	ldr	r3, [pc, #76]	; (8006a60 <xTaskResumeAll+0x134>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a18:	4b10      	ldr	r3, [pc, #64]	; (8006a5c <xTaskResumeAll+0x130>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d009      	beq.n	8006a34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a20:	2301      	movs	r3, #1
 8006a22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a24:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <xTaskResumeAll+0x138>)
 8006a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a34:	f001 f8f6 	bl	8007c24 <vPortExitCritical>

	return xAlreadyYielded;
 8006a38:	68bb      	ldr	r3, [r7, #8]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	200021b4 	.word	0x200021b4
 8006a48:	2000218c 	.word	0x2000218c
 8006a4c:	2000214c 	.word	0x2000214c
 8006a50:	20002194 	.word	0x20002194
 8006a54:	20001cbc 	.word	0x20001cbc
 8006a58:	20001cb8 	.word	0x20001cb8
 8006a5c:	200021a0 	.word	0x200021a0
 8006a60:	2000219c 	.word	0x2000219c
 8006a64:	e000ed04 	.word	0xe000ed04

08006a68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a6e:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <xTaskGetTickCount+0x1c>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a74:	687b      	ldr	r3, [r7, #4]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	20002190 	.word	0x20002190

08006a88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a92:	4b4f      	ldr	r3, [pc, #316]	; (8006bd0 <xTaskIncrementTick+0x148>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f040 808f 	bne.w	8006bba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a9c:	4b4d      	ldr	r3, [pc, #308]	; (8006bd4 <xTaskIncrementTick+0x14c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006aa4:	4a4b      	ldr	r2, [pc, #300]	; (8006bd4 <xTaskIncrementTick+0x14c>)
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d120      	bne.n	8006af2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ab0:	4b49      	ldr	r3, [pc, #292]	; (8006bd8 <xTaskIncrementTick+0x150>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <xTaskIncrementTick+0x48>
	__asm volatile
 8006aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	603b      	str	r3, [r7, #0]
}
 8006acc:	bf00      	nop
 8006ace:	e7fe      	b.n	8006ace <xTaskIncrementTick+0x46>
 8006ad0:	4b41      	ldr	r3, [pc, #260]	; (8006bd8 <xTaskIncrementTick+0x150>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	4b41      	ldr	r3, [pc, #260]	; (8006bdc <xTaskIncrementTick+0x154>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a3f      	ldr	r2, [pc, #252]	; (8006bd8 <xTaskIncrementTick+0x150>)
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	4a3f      	ldr	r2, [pc, #252]	; (8006bdc <xTaskIncrementTick+0x154>)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6013      	str	r3, [r2, #0]
 8006ae4:	4b3e      	ldr	r3, [pc, #248]	; (8006be0 <xTaskIncrementTick+0x158>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	4a3d      	ldr	r2, [pc, #244]	; (8006be0 <xTaskIncrementTick+0x158>)
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	f000 faeb 	bl	80070c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006af2:	4b3c      	ldr	r3, [pc, #240]	; (8006be4 <xTaskIncrementTick+0x15c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d349      	bcc.n	8006b90 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006afc:	4b36      	ldr	r3, [pc, #216]	; (8006bd8 <xTaskIncrementTick+0x150>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d104      	bne.n	8006b10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b06:	4b37      	ldr	r3, [pc, #220]	; (8006be4 <xTaskIncrementTick+0x15c>)
 8006b08:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0c:	601a      	str	r2, [r3, #0]
					break;
 8006b0e:	e03f      	b.n	8006b90 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b10:	4b31      	ldr	r3, [pc, #196]	; (8006bd8 <xTaskIncrementTick+0x150>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d203      	bcs.n	8006b30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b28:	4a2e      	ldr	r2, [pc, #184]	; (8006be4 <xTaskIncrementTick+0x15c>)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b2e:	e02f      	b.n	8006b90 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	3304      	adds	r3, #4
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7fe fe1f 	bl	8005778 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d004      	beq.n	8006b4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	3318      	adds	r3, #24
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe fe16 	bl	8005778 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b50:	4b25      	ldr	r3, [pc, #148]	; (8006be8 <xTaskIncrementTick+0x160>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d903      	bls.n	8006b60 <xTaskIncrementTick+0xd8>
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5c:	4a22      	ldr	r2, [pc, #136]	; (8006be8 <xTaskIncrementTick+0x160>)
 8006b5e:	6013      	str	r3, [r2, #0]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4a1f      	ldr	r2, [pc, #124]	; (8006bec <xTaskIncrementTick+0x164>)
 8006b6e:	441a      	add	r2, r3
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	3304      	adds	r3, #4
 8006b74:	4619      	mov	r1, r3
 8006b76:	4610      	mov	r0, r2
 8006b78:	f7fe fda1 	bl	80056be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b80:	4b1b      	ldr	r3, [pc, #108]	; (8006bf0 <xTaskIncrementTick+0x168>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d3b8      	bcc.n	8006afc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b8e:	e7b5      	b.n	8006afc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b90:	4b17      	ldr	r3, [pc, #92]	; (8006bf0 <xTaskIncrementTick+0x168>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b96:	4915      	ldr	r1, [pc, #84]	; (8006bec <xTaskIncrementTick+0x164>)
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	440b      	add	r3, r1
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d901      	bls.n	8006bac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006bac:	4b11      	ldr	r3, [pc, #68]	; (8006bf4 <xTaskIncrementTick+0x16c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d007      	beq.n	8006bc4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	e004      	b.n	8006bc4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006bba:	4b0f      	ldr	r3, [pc, #60]	; (8006bf8 <xTaskIncrementTick+0x170>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	4a0d      	ldr	r2, [pc, #52]	; (8006bf8 <xTaskIncrementTick+0x170>)
 8006bc2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006bc4:	697b      	ldr	r3, [r7, #20]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	200021b4 	.word	0x200021b4
 8006bd4:	20002190 	.word	0x20002190
 8006bd8:	20002144 	.word	0x20002144
 8006bdc:	20002148 	.word	0x20002148
 8006be0:	200021a4 	.word	0x200021a4
 8006be4:	200021ac 	.word	0x200021ac
 8006be8:	20002194 	.word	0x20002194
 8006bec:	20001cbc 	.word	0x20001cbc
 8006bf0:	20001cb8 	.word	0x20001cb8
 8006bf4:	200021a0 	.word	0x200021a0
 8006bf8:	2000219c 	.word	0x2000219c

08006bfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c02:	4b33      	ldr	r3, [pc, #204]	; (8006cd0 <vTaskSwitchContext+0xd4>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c0a:	4b32      	ldr	r3, [pc, #200]	; (8006cd4 <vTaskSwitchContext+0xd8>)
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c10:	e05a      	b.n	8006cc8 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 8006c12:	4b30      	ldr	r3, [pc, #192]	; (8006cd4 <vTaskSwitchContext+0xd8>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006c18:	f7fa f956 	bl	8000ec8 <getRunTimeCounterValue>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	4a2e      	ldr	r2, [pc, #184]	; (8006cd8 <vTaskSwitchContext+0xdc>)
 8006c20:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006c22:	4b2d      	ldr	r3, [pc, #180]	; (8006cd8 <vTaskSwitchContext+0xdc>)
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	4b2d      	ldr	r3, [pc, #180]	; (8006cdc <vTaskSwitchContext+0xe0>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d909      	bls.n	8006c42 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006c2e:	4b2c      	ldr	r3, [pc, #176]	; (8006ce0 <vTaskSwitchContext+0xe4>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8006c34:	4a28      	ldr	r2, [pc, #160]	; (8006cd8 <vTaskSwitchContext+0xdc>)
 8006c36:	6810      	ldr	r0, [r2, #0]
 8006c38:	4a28      	ldr	r2, [pc, #160]	; (8006cdc <vTaskSwitchContext+0xe0>)
 8006c3a:	6812      	ldr	r2, [r2, #0]
 8006c3c:	1a82      	subs	r2, r0, r2
 8006c3e:	440a      	add	r2, r1
 8006c40:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8006c42:	4b25      	ldr	r3, [pc, #148]	; (8006cd8 <vTaskSwitchContext+0xdc>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a25      	ldr	r2, [pc, #148]	; (8006cdc <vTaskSwitchContext+0xe0>)
 8006c48:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c4a:	4b26      	ldr	r3, [pc, #152]	; (8006ce4 <vTaskSwitchContext+0xe8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	e010      	b.n	8006c74 <vTaskSwitchContext+0x78>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10a      	bne.n	8006c6e <vTaskSwitchContext+0x72>
	__asm volatile
 8006c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	607b      	str	r3, [r7, #4]
}
 8006c6a:	bf00      	nop
 8006c6c:	e7fe      	b.n	8006c6c <vTaskSwitchContext+0x70>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	491c      	ldr	r1, [pc, #112]	; (8006ce8 <vTaskSwitchContext+0xec>)
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	440b      	add	r3, r1
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0e4      	beq.n	8006c52 <vTaskSwitchContext+0x56>
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4a15      	ldr	r2, [pc, #84]	; (8006ce8 <vTaskSwitchContext+0xec>)
 8006c94:	4413      	add	r3, r2
 8006c96:	60bb      	str	r3, [r7, #8]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	605a      	str	r2, [r3, #4]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	3308      	adds	r3, #8
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d104      	bne.n	8006cb8 <vTaskSwitchContext+0xbc>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	605a      	str	r2, [r3, #4]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	4a08      	ldr	r2, [pc, #32]	; (8006ce0 <vTaskSwitchContext+0xe4>)
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	4a08      	ldr	r2, [pc, #32]	; (8006ce4 <vTaskSwitchContext+0xe8>)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6013      	str	r3, [r2, #0]
}
 8006cc8:	bf00      	nop
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	200021b4 	.word	0x200021b4
 8006cd4:	200021a0 	.word	0x200021a0
 8006cd8:	200021bc 	.word	0x200021bc
 8006cdc:	200021b8 	.word	0x200021b8
 8006ce0:	20001cb8 	.word	0x20001cb8
 8006ce4:	20002194 	.word	0x20002194
 8006ce8:	20001cbc 	.word	0x20001cbc

08006cec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10a      	bne.n	8006d12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	60fb      	str	r3, [r7, #12]
}
 8006d0e:	bf00      	nop
 8006d10:	e7fe      	b.n	8006d10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d12:	4b07      	ldr	r3, [pc, #28]	; (8006d30 <vTaskPlaceOnEventList+0x44>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3318      	adds	r3, #24
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fe fcf3 	bl	8005706 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d20:	2101      	movs	r1, #1
 8006d22:	6838      	ldr	r0, [r7, #0]
 8006d24:	f000 fa7c 	bl	8007220 <prvAddCurrentTaskToDelayedList>
}
 8006d28:	bf00      	nop
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	20001cb8 	.word	0x20001cb8

08006d34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10a      	bne.n	8006d5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	617b      	str	r3, [r7, #20]
}
 8006d58:	bf00      	nop
 8006d5a:	e7fe      	b.n	8006d5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <vTaskPlaceOnEventListRestricted+0x54>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3318      	adds	r3, #24
 8006d62:	4619      	mov	r1, r3
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7fe fcaa 	bl	80056be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006d70:	f04f 33ff 	mov.w	r3, #4294967295
 8006d74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	68b8      	ldr	r0, [r7, #8]
 8006d7a:	f000 fa51 	bl	8007220 <prvAddCurrentTaskToDelayedList>
	}
 8006d7e:	bf00      	nop
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20001cb8 	.word	0x20001cb8

08006d8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10a      	bne.n	8006db8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	60fb      	str	r3, [r7, #12]
}
 8006db4:	bf00      	nop
 8006db6:	e7fe      	b.n	8006db6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	3318      	adds	r3, #24
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fe fcdb 	bl	8005778 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dc2:	4b1e      	ldr	r3, [pc, #120]	; (8006e3c <xTaskRemoveFromEventList+0xb0>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d11d      	bne.n	8006e06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fe fcd2 	bl	8005778 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd8:	4b19      	ldr	r3, [pc, #100]	; (8006e40 <xTaskRemoveFromEventList+0xb4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d903      	bls.n	8006de8 <xTaskRemoveFromEventList+0x5c>
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	4a16      	ldr	r2, [pc, #88]	; (8006e40 <xTaskRemoveFromEventList+0xb4>)
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4a13      	ldr	r2, [pc, #76]	; (8006e44 <xTaskRemoveFromEventList+0xb8>)
 8006df6:	441a      	add	r2, r3
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4610      	mov	r0, r2
 8006e00:	f7fe fc5d 	bl	80056be <vListInsertEnd>
 8006e04:	e005      	b.n	8006e12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	3318      	adds	r3, #24
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	480e      	ldr	r0, [pc, #56]	; (8006e48 <xTaskRemoveFromEventList+0xbc>)
 8006e0e:	f7fe fc56 	bl	80056be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e16:	4b0d      	ldr	r3, [pc, #52]	; (8006e4c <xTaskRemoveFromEventList+0xc0>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d905      	bls.n	8006e2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e20:	2301      	movs	r3, #1
 8006e22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e24:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <xTaskRemoveFromEventList+0xc4>)
 8006e26:	2201      	movs	r2, #1
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	e001      	b.n	8006e30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e30:	697b      	ldr	r3, [r7, #20]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	200021b4 	.word	0x200021b4
 8006e40:	20002194 	.word	0x20002194
 8006e44:	20001cbc 	.word	0x20001cbc
 8006e48:	2000214c 	.word	0x2000214c
 8006e4c:	20001cb8 	.word	0x20001cb8
 8006e50:	200021a0 	.word	0x200021a0

08006e54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e5c:	4b06      	ldr	r3, [pc, #24]	; (8006e78 <vTaskInternalSetTimeOutState+0x24>)
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e64:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <vTaskInternalSetTimeOutState+0x28>)
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	605a      	str	r2, [r3, #4]
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr
 8006e78:	200021a4 	.word	0x200021a4
 8006e7c:	20002190 	.word	0x20002190

08006e80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10a      	bne.n	8006ea6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	613b      	str	r3, [r7, #16]
}
 8006ea2:	bf00      	nop
 8006ea4:	e7fe      	b.n	8006ea4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10a      	bne.n	8006ec2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	60fb      	str	r3, [r7, #12]
}
 8006ebe:	bf00      	nop
 8006ec0:	e7fe      	b.n	8006ec0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006ec2:	f000 fe7f 	bl	8007bc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006ec6:	4b1d      	ldr	r3, [pc, #116]	; (8006f3c <xTaskCheckForTimeOut+0xbc>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ede:	d102      	bne.n	8006ee6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	61fb      	str	r3, [r7, #28]
 8006ee4:	e023      	b.n	8006f2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <xTaskCheckForTimeOut+0xc0>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d007      	beq.n	8006f02 <xTaskCheckForTimeOut+0x82>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d302      	bcc.n	8006f02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006efc:	2301      	movs	r3, #1
 8006efe:	61fb      	str	r3, [r7, #28]
 8006f00:	e015      	b.n	8006f2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d20b      	bcs.n	8006f24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	1ad2      	subs	r2, r2, r3
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff ff9b 	bl	8006e54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	61fb      	str	r3, [r7, #28]
 8006f22:	e004      	b.n	8006f2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2200      	movs	r2, #0
 8006f28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f2e:	f000 fe79 	bl	8007c24 <vPortExitCritical>

	return xReturn;
 8006f32:	69fb      	ldr	r3, [r7, #28]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3720      	adds	r7, #32
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	20002190 	.word	0x20002190
 8006f40:	200021a4 	.word	0x200021a4

08006f44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f44:	b480      	push	{r7}
 8006f46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f48:	4b03      	ldr	r3, [pc, #12]	; (8006f58 <vTaskMissedYield+0x14>)
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	601a      	str	r2, [r3, #0]
}
 8006f4e:	bf00      	nop
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	200021a0 	.word	0x200021a0

08006f5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f64:	f000 f852 	bl	800700c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f68:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <prvIdleTask+0x28>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d9f9      	bls.n	8006f64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f70:	4b05      	ldr	r3, [pc, #20]	; (8006f88 <prvIdleTask+0x2c>)
 8006f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f80:	e7f0      	b.n	8006f64 <prvIdleTask+0x8>
 8006f82:	bf00      	nop
 8006f84:	20001cbc 	.word	0x20001cbc
 8006f88:	e000ed04 	.word	0xe000ed04

08006f8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f92:	2300      	movs	r3, #0
 8006f94:	607b      	str	r3, [r7, #4]
 8006f96:	e00c      	b.n	8006fb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4a12      	ldr	r2, [pc, #72]	; (8006fec <prvInitialiseTaskLists+0x60>)
 8006fa4:	4413      	add	r3, r2
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fe fb5c 	bl	8005664 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	607b      	str	r3, [r7, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b37      	cmp	r3, #55	; 0x37
 8006fb6:	d9ef      	bls.n	8006f98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fb8:	480d      	ldr	r0, [pc, #52]	; (8006ff0 <prvInitialiseTaskLists+0x64>)
 8006fba:	f7fe fb53 	bl	8005664 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fbe:	480d      	ldr	r0, [pc, #52]	; (8006ff4 <prvInitialiseTaskLists+0x68>)
 8006fc0:	f7fe fb50 	bl	8005664 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fc4:	480c      	ldr	r0, [pc, #48]	; (8006ff8 <prvInitialiseTaskLists+0x6c>)
 8006fc6:	f7fe fb4d 	bl	8005664 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fca:	480c      	ldr	r0, [pc, #48]	; (8006ffc <prvInitialiseTaskLists+0x70>)
 8006fcc:	f7fe fb4a 	bl	8005664 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fd0:	480b      	ldr	r0, [pc, #44]	; (8007000 <prvInitialiseTaskLists+0x74>)
 8006fd2:	f7fe fb47 	bl	8005664 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fd6:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <prvInitialiseTaskLists+0x78>)
 8006fd8:	4a05      	ldr	r2, [pc, #20]	; (8006ff0 <prvInitialiseTaskLists+0x64>)
 8006fda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <prvInitialiseTaskLists+0x7c>)
 8006fde:	4a05      	ldr	r2, [pc, #20]	; (8006ff4 <prvInitialiseTaskLists+0x68>)
 8006fe0:	601a      	str	r2, [r3, #0]
}
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20001cbc 	.word	0x20001cbc
 8006ff0:	2000211c 	.word	0x2000211c
 8006ff4:	20002130 	.word	0x20002130
 8006ff8:	2000214c 	.word	0x2000214c
 8006ffc:	20002160 	.word	0x20002160
 8007000:	20002178 	.word	0x20002178
 8007004:	20002144 	.word	0x20002144
 8007008:	20002148 	.word	0x20002148

0800700c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007012:	e019      	b.n	8007048 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007014:	f000 fdd6 	bl	8007bc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007018:	4b10      	ldr	r3, [pc, #64]	; (800705c <prvCheckTasksWaitingTermination+0x50>)
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3304      	adds	r3, #4
 8007024:	4618      	mov	r0, r3
 8007026:	f7fe fba7 	bl	8005778 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800702a:	4b0d      	ldr	r3, [pc, #52]	; (8007060 <prvCheckTasksWaitingTermination+0x54>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3b01      	subs	r3, #1
 8007030:	4a0b      	ldr	r2, [pc, #44]	; (8007060 <prvCheckTasksWaitingTermination+0x54>)
 8007032:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007034:	4b0b      	ldr	r3, [pc, #44]	; (8007064 <prvCheckTasksWaitingTermination+0x58>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3b01      	subs	r3, #1
 800703a:	4a0a      	ldr	r2, [pc, #40]	; (8007064 <prvCheckTasksWaitingTermination+0x58>)
 800703c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800703e:	f000 fdf1 	bl	8007c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f810 	bl	8007068 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007048:	4b06      	ldr	r3, [pc, #24]	; (8007064 <prvCheckTasksWaitingTermination+0x58>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e1      	bne.n	8007014 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007050:	bf00      	nop
 8007052:	bf00      	nop
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	20002160 	.word	0x20002160
 8007060:	2000218c 	.word	0x2000218c
 8007064:	20002174 	.word	0x20002174

08007068 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007076:	2b00      	cmp	r3, #0
 8007078:	d108      	bne.n	800708c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707e:	4618      	mov	r0, r3
 8007080:	f000 ff8e 	bl	8007fa0 <vPortFree>
				vPortFree( pxTCB );
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 ff8b 	bl	8007fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800708a:	e018      	b.n	80070be <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007092:	2b01      	cmp	r3, #1
 8007094:	d103      	bne.n	800709e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 ff82 	bl	8007fa0 <vPortFree>
	}
 800709c:	e00f      	b.n	80070be <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d00a      	beq.n	80070be <prvDeleteTCB+0x56>
	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	60fb      	str	r3, [r7, #12]
}
 80070ba:	bf00      	nop
 80070bc:	e7fe      	b.n	80070bc <prvDeleteTCB+0x54>
	}
 80070be:	bf00      	nop
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070ce:	4b0c      	ldr	r3, [pc, #48]	; (8007100 <prvResetNextTaskUnblockTime+0x38>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d104      	bne.n	80070e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070d8:	4b0a      	ldr	r3, [pc, #40]	; (8007104 <prvResetNextTaskUnblockTime+0x3c>)
 80070da:	f04f 32ff 	mov.w	r2, #4294967295
 80070de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070e0:	e008      	b.n	80070f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070e2:	4b07      	ldr	r3, [pc, #28]	; (8007100 <prvResetNextTaskUnblockTime+0x38>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	4a04      	ldr	r2, [pc, #16]	; (8007104 <prvResetNextTaskUnblockTime+0x3c>)
 80070f2:	6013      	str	r3, [r2, #0]
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	20002144 	.word	0x20002144
 8007104:	200021ac 	.word	0x200021ac

08007108 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800710e:	4b0b      	ldr	r3, [pc, #44]	; (800713c <xTaskGetSchedulerState+0x34>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d102      	bne.n	800711c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007116:	2301      	movs	r3, #1
 8007118:	607b      	str	r3, [r7, #4]
 800711a:	e008      	b.n	800712e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800711c:	4b08      	ldr	r3, [pc, #32]	; (8007140 <xTaskGetSchedulerState+0x38>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d102      	bne.n	800712a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007124:	2302      	movs	r3, #2
 8007126:	607b      	str	r3, [r7, #4]
 8007128:	e001      	b.n	800712e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800712a:	2300      	movs	r3, #0
 800712c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800712e:	687b      	ldr	r3, [r7, #4]
	}
 8007130:	4618      	mov	r0, r3
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	20002198 	.word	0x20002198
 8007140:	200021b4 	.word	0x200021b4

08007144 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007150:	2300      	movs	r3, #0
 8007152:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d056      	beq.n	8007208 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800715a:	4b2e      	ldr	r3, [pc, #184]	; (8007214 <xTaskPriorityDisinherit+0xd0>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	429a      	cmp	r2, r3
 8007162:	d00a      	beq.n	800717a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	60fb      	str	r3, [r7, #12]
}
 8007176:	bf00      	nop
 8007178:	e7fe      	b.n	8007178 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10a      	bne.n	8007198 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	60bb      	str	r3, [r7, #8]
}
 8007194:	bf00      	nop
 8007196:	e7fe      	b.n	8007196 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719c:	1e5a      	subs	r2, r3, #1
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d02c      	beq.n	8007208 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d128      	bne.n	8007208 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	3304      	adds	r3, #4
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fe fadc 	bl	8005778 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d8:	4b0f      	ldr	r3, [pc, #60]	; (8007218 <xTaskPriorityDisinherit+0xd4>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d903      	bls.n	80071e8 <xTaskPriorityDisinherit+0xa4>
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	4a0c      	ldr	r2, [pc, #48]	; (8007218 <xTaskPriorityDisinherit+0xd4>)
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ec:	4613      	mov	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4a09      	ldr	r2, [pc, #36]	; (800721c <xTaskPriorityDisinherit+0xd8>)
 80071f6:	441a      	add	r2, r3
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	3304      	adds	r3, #4
 80071fc:	4619      	mov	r1, r3
 80071fe:	4610      	mov	r0, r2
 8007200:	f7fe fa5d 	bl	80056be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007204:	2301      	movs	r3, #1
 8007206:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007208:	697b      	ldr	r3, [r7, #20]
	}
 800720a:	4618      	mov	r0, r3
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20001cb8 	.word	0x20001cb8
 8007218:	20002194 	.word	0x20002194
 800721c:	20001cbc 	.word	0x20001cbc

08007220 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800722a:	4b21      	ldr	r3, [pc, #132]	; (80072b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007230:	4b20      	ldr	r3, [pc, #128]	; (80072b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3304      	adds	r3, #4
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe fa9e 	bl	8005778 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007242:	d10a      	bne.n	800725a <prvAddCurrentTaskToDelayedList+0x3a>
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d007      	beq.n	800725a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800724a:	4b1a      	ldr	r3, [pc, #104]	; (80072b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3304      	adds	r3, #4
 8007250:	4619      	mov	r1, r3
 8007252:	4819      	ldr	r0, [pc, #100]	; (80072b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007254:	f7fe fa33 	bl	80056be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007258:	e026      	b.n	80072a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4413      	add	r3, r2
 8007260:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007262:	4b14      	ldr	r3, [pc, #80]	; (80072b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	429a      	cmp	r2, r3
 8007270:	d209      	bcs.n	8007286 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007272:	4b12      	ldr	r3, [pc, #72]	; (80072bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	4b0f      	ldr	r3, [pc, #60]	; (80072b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3304      	adds	r3, #4
 800727c:	4619      	mov	r1, r3
 800727e:	4610      	mov	r0, r2
 8007280:	f7fe fa41 	bl	8005706 <vListInsert>
}
 8007284:	e010      	b.n	80072a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007286:	4b0e      	ldr	r3, [pc, #56]	; (80072c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3304      	adds	r3, #4
 8007290:	4619      	mov	r1, r3
 8007292:	4610      	mov	r0, r2
 8007294:	f7fe fa37 	bl	8005706 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007298:	4b0a      	ldr	r3, [pc, #40]	; (80072c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d202      	bcs.n	80072a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80072a2:	4a08      	ldr	r2, [pc, #32]	; (80072c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	6013      	str	r3, [r2, #0]
}
 80072a8:	bf00      	nop
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	20002190 	.word	0x20002190
 80072b4:	20001cb8 	.word	0x20001cb8
 80072b8:	20002178 	.word	0x20002178
 80072bc:	20002148 	.word	0x20002148
 80072c0:	20002144 	.word	0x20002144
 80072c4:	200021ac 	.word	0x200021ac

080072c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08a      	sub	sp, #40	; 0x28
 80072cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80072ce:	2300      	movs	r3, #0
 80072d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80072d2:	f000 fb07 	bl	80078e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80072d6:	4b1c      	ldr	r3, [pc, #112]	; (8007348 <xTimerCreateTimerTask+0x80>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d021      	beq.n	8007322 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80072de:	2300      	movs	r3, #0
 80072e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80072e6:	1d3a      	adds	r2, r7, #4
 80072e8:	f107 0108 	add.w	r1, r7, #8
 80072ec:	f107 030c 	add.w	r3, r7, #12
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fe f99d 	bl	8005630 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	9202      	str	r2, [sp, #8]
 80072fe:	9301      	str	r3, [sp, #4]
 8007300:	2302      	movs	r3, #2
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	2300      	movs	r3, #0
 8007306:	460a      	mov	r2, r1
 8007308:	4910      	ldr	r1, [pc, #64]	; (800734c <xTimerCreateTimerTask+0x84>)
 800730a:	4811      	ldr	r0, [pc, #68]	; (8007350 <xTimerCreateTimerTask+0x88>)
 800730c:	f7ff f8bc 	bl	8006488 <xTaskCreateStatic>
 8007310:	4603      	mov	r3, r0
 8007312:	4a10      	ldr	r2, [pc, #64]	; (8007354 <xTimerCreateTimerTask+0x8c>)
 8007314:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007316:	4b0f      	ldr	r3, [pc, #60]	; (8007354 <xTimerCreateTimerTask+0x8c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800731e:	2301      	movs	r3, #1
 8007320:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10a      	bne.n	800733e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	613b      	str	r3, [r7, #16]
}
 800733a:	bf00      	nop
 800733c:	e7fe      	b.n	800733c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800733e:	697b      	ldr	r3, [r7, #20]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3718      	adds	r7, #24
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	200021f0 	.word	0x200021f0
 800734c:	0800c30c 	.word	0x0800c30c
 8007350:	0800748d 	.word	0x0800748d
 8007354:	200021f4 	.word	0x200021f4

08007358 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08a      	sub	sp, #40	; 0x28
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007366:	2300      	movs	r3, #0
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10a      	bne.n	8007386 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	623b      	str	r3, [r7, #32]
}
 8007382:	bf00      	nop
 8007384:	e7fe      	b.n	8007384 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007386:	4b1a      	ldr	r3, [pc, #104]	; (80073f0 <xTimerGenericCommand+0x98>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d02a      	beq.n	80073e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2b05      	cmp	r3, #5
 800739e:	dc18      	bgt.n	80073d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073a0:	f7ff feb2 	bl	8007108 <xTaskGetSchedulerState>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d109      	bne.n	80073be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073aa:	4b11      	ldr	r3, [pc, #68]	; (80073f0 <xTimerGenericCommand+0x98>)
 80073ac:	6818      	ldr	r0, [r3, #0]
 80073ae:	f107 0110 	add.w	r1, r7, #16
 80073b2:	2300      	movs	r3, #0
 80073b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073b6:	f7fe fbb1 	bl	8005b1c <xQueueGenericSend>
 80073ba:	6278      	str	r0, [r7, #36]	; 0x24
 80073bc:	e012      	b.n	80073e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073be:	4b0c      	ldr	r3, [pc, #48]	; (80073f0 <xTimerGenericCommand+0x98>)
 80073c0:	6818      	ldr	r0, [r3, #0]
 80073c2:	f107 0110 	add.w	r1, r7, #16
 80073c6:	2300      	movs	r3, #0
 80073c8:	2200      	movs	r2, #0
 80073ca:	f7fe fba7 	bl	8005b1c <xQueueGenericSend>
 80073ce:	6278      	str	r0, [r7, #36]	; 0x24
 80073d0:	e008      	b.n	80073e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073d2:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <xTimerGenericCommand+0x98>)
 80073d4:	6818      	ldr	r0, [r3, #0]
 80073d6:	f107 0110 	add.w	r1, r7, #16
 80073da:	2300      	movs	r3, #0
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	f7fe fc9b 	bl	8005d18 <xQueueGenericSendFromISR>
 80073e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3728      	adds	r7, #40	; 0x28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	200021f0 	.word	0x200021f0

080073f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af02      	add	r7, sp, #8
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073fe:	4b22      	ldr	r3, [pc, #136]	; (8007488 <prvProcessExpiredTimer+0x94>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	3304      	adds	r3, #4
 800740c:	4618      	mov	r0, r3
 800740e:	f7fe f9b3 	bl	8005778 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007418:	f003 0304 	and.w	r3, r3, #4
 800741c:	2b00      	cmp	r3, #0
 800741e:	d022      	beq.n	8007466 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	699a      	ldr	r2, [r3, #24]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	18d1      	adds	r1, r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	6978      	ldr	r0, [r7, #20]
 800742e:	f000 f8d1 	bl	80075d4 <prvInsertTimerInActiveList>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d01f      	beq.n	8007478 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007438:	2300      	movs	r3, #0
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	2300      	movs	r3, #0
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	2100      	movs	r1, #0
 8007442:	6978      	ldr	r0, [r7, #20]
 8007444:	f7ff ff88 	bl	8007358 <xTimerGenericCommand>
 8007448:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d113      	bne.n	8007478 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	60fb      	str	r3, [r7, #12]
}
 8007462:	bf00      	nop
 8007464:	e7fe      	b.n	8007464 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800746c:	f023 0301 	bic.w	r3, r3, #1
 8007470:	b2da      	uxtb	r2, r3
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	6978      	ldr	r0, [r7, #20]
 800747e:	4798      	blx	r3
}
 8007480:	bf00      	nop
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	200021e8 	.word	0x200021e8

0800748c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007494:	f107 0308 	add.w	r3, r7, #8
 8007498:	4618      	mov	r0, r3
 800749a:	f000 f857 	bl	800754c <prvGetNextExpireTime>
 800749e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	4619      	mov	r1, r3
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 f803 	bl	80074b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80074aa:	f000 f8d5 	bl	8007658 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074ae:	e7f1      	b.n	8007494 <prvTimerTask+0x8>

080074b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80074ba:	f7ff fa29 	bl	8006910 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074be:	f107 0308 	add.w	r3, r7, #8
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 f866 	bl	8007594 <prvSampleTimeNow>
 80074c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d130      	bne.n	8007532 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10a      	bne.n	80074ec <prvProcessTimerOrBlockTask+0x3c>
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d806      	bhi.n	80074ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80074de:	f7ff fa25 	bl	800692c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80074e2:	68f9      	ldr	r1, [r7, #12]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7ff ff85 	bl	80073f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80074ea:	e024      	b.n	8007536 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d008      	beq.n	8007504 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80074f2:	4b13      	ldr	r3, [pc, #76]	; (8007540 <prvProcessTimerOrBlockTask+0x90>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <prvProcessTimerOrBlockTask+0x50>
 80074fc:	2301      	movs	r3, #1
 80074fe:	e000      	b.n	8007502 <prvProcessTimerOrBlockTask+0x52>
 8007500:	2300      	movs	r3, #0
 8007502:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007504:	4b0f      	ldr	r3, [pc, #60]	; (8007544 <prvProcessTimerOrBlockTask+0x94>)
 8007506:	6818      	ldr	r0, [r3, #0]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	4619      	mov	r1, r3
 8007512:	f7fe ff85 	bl	8006420 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007516:	f7ff fa09 	bl	800692c <xTaskResumeAll>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10a      	bne.n	8007536 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007520:	4b09      	ldr	r3, [pc, #36]	; (8007548 <prvProcessTimerOrBlockTask+0x98>)
 8007522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007526:	601a      	str	r2, [r3, #0]
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	f3bf 8f6f 	isb	sy
}
 8007530:	e001      	b.n	8007536 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007532:	f7ff f9fb 	bl	800692c <xTaskResumeAll>
}
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	200021ec 	.word	0x200021ec
 8007544:	200021f0 	.word	0x200021f0
 8007548:	e000ed04 	.word	0xe000ed04

0800754c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007554:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <prvGetNextExpireTime+0x44>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <prvGetNextExpireTime+0x16>
 800755e:	2201      	movs	r2, #1
 8007560:	e000      	b.n	8007564 <prvGetNextExpireTime+0x18>
 8007562:	2200      	movs	r2, #0
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d105      	bne.n	800757c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007570:	4b07      	ldr	r3, [pc, #28]	; (8007590 <prvGetNextExpireTime+0x44>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	60fb      	str	r3, [r7, #12]
 800757a:	e001      	b.n	8007580 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007580:	68fb      	ldr	r3, [r7, #12]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	200021e8 	.word	0x200021e8

08007594 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800759c:	f7ff fa64 	bl	8006a68 <xTaskGetTickCount>
 80075a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80075a2:	4b0b      	ldr	r3, [pc, #44]	; (80075d0 <prvSampleTimeNow+0x3c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d205      	bcs.n	80075b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80075ac:	f000 f936 	bl	800781c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	e002      	b.n	80075be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80075be:	4a04      	ldr	r2, [pc, #16]	; (80075d0 <prvSampleTimeNow+0x3c>)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80075c4:	68fb      	ldr	r3, [r7, #12]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	200021f8 	.word	0x200021f8

080075d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
 80075e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d812      	bhi.n	8007620 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	1ad2      	subs	r2, r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	429a      	cmp	r2, r3
 8007606:	d302      	bcc.n	800760e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007608:	2301      	movs	r3, #1
 800760a:	617b      	str	r3, [r7, #20]
 800760c:	e01b      	b.n	8007646 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800760e:	4b10      	ldr	r3, [pc, #64]	; (8007650 <prvInsertTimerInActiveList+0x7c>)
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3304      	adds	r3, #4
 8007616:	4619      	mov	r1, r3
 8007618:	4610      	mov	r0, r2
 800761a:	f7fe f874 	bl	8005706 <vListInsert>
 800761e:	e012      	b.n	8007646 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	429a      	cmp	r2, r3
 8007626:	d206      	bcs.n	8007636 <prvInsertTimerInActiveList+0x62>
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	429a      	cmp	r2, r3
 800762e:	d302      	bcc.n	8007636 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007630:	2301      	movs	r3, #1
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	e007      	b.n	8007646 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007636:	4b07      	ldr	r3, [pc, #28]	; (8007654 <prvInsertTimerInActiveList+0x80>)
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3304      	adds	r3, #4
 800763e:	4619      	mov	r1, r3
 8007640:	4610      	mov	r0, r2
 8007642:	f7fe f860 	bl	8005706 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007646:	697b      	ldr	r3, [r7, #20]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3718      	adds	r7, #24
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	200021ec 	.word	0x200021ec
 8007654:	200021e8 	.word	0x200021e8

08007658 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08e      	sub	sp, #56	; 0x38
 800765c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800765e:	e0ca      	b.n	80077f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	da18      	bge.n	8007698 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007666:	1d3b      	adds	r3, r7, #4
 8007668:	3304      	adds	r3, #4
 800766a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800766c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10a      	bne.n	8007688 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	61fb      	str	r3, [r7, #28]
}
 8007684:	bf00      	nop
 8007686:	e7fe      	b.n	8007686 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800768e:	6850      	ldr	r0, [r2, #4]
 8007690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007692:	6892      	ldr	r2, [r2, #8]
 8007694:	4611      	mov	r1, r2
 8007696:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	f2c0 80aa 	blt.w	80077f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d004      	beq.n	80076b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ae:	3304      	adds	r3, #4
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fe f861 	bl	8005778 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076b6:	463b      	mov	r3, r7
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7ff ff6b 	bl	8007594 <prvSampleTimeNow>
 80076be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b09      	cmp	r3, #9
 80076c4:	f200 8097 	bhi.w	80077f6 <prvProcessReceivedCommands+0x19e>
 80076c8:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <prvProcessReceivedCommands+0x78>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	080076f9 	.word	0x080076f9
 80076d4:	080076f9 	.word	0x080076f9
 80076d8:	080076f9 	.word	0x080076f9
 80076dc:	0800776d 	.word	0x0800776d
 80076e0:	08007781 	.word	0x08007781
 80076e4:	080077cb 	.word	0x080077cb
 80076e8:	080076f9 	.word	0x080076f9
 80076ec:	080076f9 	.word	0x080076f9
 80076f0:	0800776d 	.word	0x0800776d
 80076f4:	08007781 	.word	0x08007781
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076fe:	f043 0301 	orr.w	r3, r3, #1
 8007702:	b2da      	uxtb	r2, r3
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	18d1      	adds	r1, r2, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007718:	f7ff ff5c 	bl	80075d4 <prvInsertTimerInActiveList>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d069      	beq.n	80077f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007728:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800772a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007730:	f003 0304 	and.w	r3, r3, #4
 8007734:	2b00      	cmp	r3, #0
 8007736:	d05e      	beq.n	80077f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	441a      	add	r2, r3
 8007740:	2300      	movs	r3, #0
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	2300      	movs	r3, #0
 8007746:	2100      	movs	r1, #0
 8007748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800774a:	f7ff fe05 	bl	8007358 <xTimerGenericCommand>
 800774e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d14f      	bne.n	80077f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	61bb      	str	r3, [r7, #24]
}
 8007768:	bf00      	nop
 800776a:	e7fe      	b.n	800776a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007772:	f023 0301 	bic.w	r3, r3, #1
 8007776:	b2da      	uxtb	r2, r3
 8007778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800777e:	e03a      	b.n	80077f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007786:	f043 0301 	orr.w	r3, r3, #1
 800778a:	b2da      	uxtb	r2, r3
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007796:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10a      	bne.n	80077b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	617b      	str	r3, [r7, #20]
}
 80077b2:	bf00      	nop
 80077b4:	e7fe      	b.n	80077b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	699a      	ldr	r2, [r3, #24]
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	18d1      	adds	r1, r2, r3
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077c4:	f7ff ff06 	bl	80075d4 <prvInsertTimerInActiveList>
					break;
 80077c8:	e015      	b.n	80077f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d103      	bne.n	80077e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80077d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077da:	f000 fbe1 	bl	8007fa0 <vPortFree>
 80077de:	e00a      	b.n	80077f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077e6:	f023 0301 	bic.w	r3, r3, #1
 80077ea:	b2da      	uxtb	r2, r3
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80077f2:	e000      	b.n	80077f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80077f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077f6:	4b08      	ldr	r3, [pc, #32]	; (8007818 <prvProcessReceivedCommands+0x1c0>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	1d39      	adds	r1, r7, #4
 80077fc:	2200      	movs	r2, #0
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fe fb26 	bl	8005e50 <xQueueReceive>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	f47f af2a 	bne.w	8007660 <prvProcessReceivedCommands+0x8>
	}
}
 800780c:	bf00      	nop
 800780e:	bf00      	nop
 8007810:	3730      	adds	r7, #48	; 0x30
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	200021f0 	.word	0x200021f0

0800781c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007822:	e048      	b.n	80078b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007824:	4b2d      	ldr	r3, [pc, #180]	; (80078dc <prvSwitchTimerLists+0xc0>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800782e:	4b2b      	ldr	r3, [pc, #172]	; (80078dc <prvSwitchTimerLists+0xc0>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3304      	adds	r3, #4
 800783c:	4618      	mov	r0, r3
 800783e:	f7fd ff9b 	bl	8005778 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b00      	cmp	r3, #0
 8007856:	d02e      	beq.n	80078b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	4413      	add	r3, r2
 8007860:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	429a      	cmp	r2, r3
 8007868:	d90e      	bls.n	8007888 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007876:	4b19      	ldr	r3, [pc, #100]	; (80078dc <prvSwitchTimerLists+0xc0>)
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	3304      	adds	r3, #4
 800787e:	4619      	mov	r1, r3
 8007880:	4610      	mov	r0, r2
 8007882:	f7fd ff40 	bl	8005706 <vListInsert>
 8007886:	e016      	b.n	80078b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007888:	2300      	movs	r3, #0
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	2300      	movs	r3, #0
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	2100      	movs	r1, #0
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f7ff fd60 	bl	8007358 <xTimerGenericCommand>
 8007898:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10a      	bne.n	80078b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	603b      	str	r3, [r7, #0]
}
 80078b2:	bf00      	nop
 80078b4:	e7fe      	b.n	80078b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078b6:	4b09      	ldr	r3, [pc, #36]	; (80078dc <prvSwitchTimerLists+0xc0>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1b1      	bne.n	8007824 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80078c0:	4b06      	ldr	r3, [pc, #24]	; (80078dc <prvSwitchTimerLists+0xc0>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80078c6:	4b06      	ldr	r3, [pc, #24]	; (80078e0 <prvSwitchTimerLists+0xc4>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a04      	ldr	r2, [pc, #16]	; (80078dc <prvSwitchTimerLists+0xc0>)
 80078cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80078ce:	4a04      	ldr	r2, [pc, #16]	; (80078e0 <prvSwitchTimerLists+0xc4>)
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	6013      	str	r3, [r2, #0]
}
 80078d4:	bf00      	nop
 80078d6:	3718      	adds	r7, #24
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	200021e8 	.word	0x200021e8
 80078e0:	200021ec 	.word	0x200021ec

080078e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80078ea:	f000 f96b 	bl	8007bc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80078ee:	4b15      	ldr	r3, [pc, #84]	; (8007944 <prvCheckForValidListAndQueue+0x60>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d120      	bne.n	8007938 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80078f6:	4814      	ldr	r0, [pc, #80]	; (8007948 <prvCheckForValidListAndQueue+0x64>)
 80078f8:	f7fd feb4 	bl	8005664 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80078fc:	4813      	ldr	r0, [pc, #76]	; (800794c <prvCheckForValidListAndQueue+0x68>)
 80078fe:	f7fd feb1 	bl	8005664 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007902:	4b13      	ldr	r3, [pc, #76]	; (8007950 <prvCheckForValidListAndQueue+0x6c>)
 8007904:	4a10      	ldr	r2, [pc, #64]	; (8007948 <prvCheckForValidListAndQueue+0x64>)
 8007906:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007908:	4b12      	ldr	r3, [pc, #72]	; (8007954 <prvCheckForValidListAndQueue+0x70>)
 800790a:	4a10      	ldr	r2, [pc, #64]	; (800794c <prvCheckForValidListAndQueue+0x68>)
 800790c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800790e:	2300      	movs	r3, #0
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	4b11      	ldr	r3, [pc, #68]	; (8007958 <prvCheckForValidListAndQueue+0x74>)
 8007914:	4a11      	ldr	r2, [pc, #68]	; (800795c <prvCheckForValidListAndQueue+0x78>)
 8007916:	2110      	movs	r1, #16
 8007918:	200a      	movs	r0, #10
 800791a:	f7fd ffbf 	bl	800589c <xQueueGenericCreateStatic>
 800791e:	4603      	mov	r3, r0
 8007920:	4a08      	ldr	r2, [pc, #32]	; (8007944 <prvCheckForValidListAndQueue+0x60>)
 8007922:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007924:	4b07      	ldr	r3, [pc, #28]	; (8007944 <prvCheckForValidListAndQueue+0x60>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d005      	beq.n	8007938 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800792c:	4b05      	ldr	r3, [pc, #20]	; (8007944 <prvCheckForValidListAndQueue+0x60>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	490b      	ldr	r1, [pc, #44]	; (8007960 <prvCheckForValidListAndQueue+0x7c>)
 8007932:	4618      	mov	r0, r3
 8007934:	f7fe fd20 	bl	8006378 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007938:	f000 f974 	bl	8007c24 <vPortExitCritical>
}
 800793c:	bf00      	nop
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	200021f0 	.word	0x200021f0
 8007948:	200021c0 	.word	0x200021c0
 800794c:	200021d4 	.word	0x200021d4
 8007950:	200021e8 	.word	0x200021e8
 8007954:	200021ec 	.word	0x200021ec
 8007958:	2000229c 	.word	0x2000229c
 800795c:	200021fc 	.word	0x200021fc
 8007960:	0800c314 	.word	0x0800c314

08007964 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3b04      	subs	r3, #4
 8007974:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800797c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3b04      	subs	r3, #4
 8007982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	f023 0201 	bic.w	r2, r3, #1
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3b04      	subs	r3, #4
 8007992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007994:	4a0c      	ldr	r2, [pc, #48]	; (80079c8 <pxPortInitialiseStack+0x64>)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3b14      	subs	r3, #20
 800799e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3b04      	subs	r3, #4
 80079aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f06f 0202 	mvn.w	r2, #2
 80079b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	3b20      	subs	r3, #32
 80079b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079ba:	68fb      	ldr	r3, [r7, #12]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	080079cd 	.word	0x080079cd

080079cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079d2:	2300      	movs	r3, #0
 80079d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079d6:	4b12      	ldr	r3, [pc, #72]	; (8007a20 <prvTaskExitError+0x54>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079de:	d00a      	beq.n	80079f6 <prvTaskExitError+0x2a>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	60fb      	str	r3, [r7, #12]
}
 80079f2:	bf00      	nop
 80079f4:	e7fe      	b.n	80079f4 <prvTaskExitError+0x28>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	60bb      	str	r3, [r7, #8]
}
 8007a08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a0a:	bf00      	nop
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0fc      	beq.n	8007a0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a12:	bf00      	nop
 8007a14:	bf00      	nop
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr
 8007a20:	2000000c 	.word	0x2000000c
	...

08007a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a30:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <pxCurrentTCBConst2>)
 8007a32:	6819      	ldr	r1, [r3, #0]
 8007a34:	6808      	ldr	r0, [r1, #0]
 8007a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3a:	f380 8809 	msr	PSP, r0
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f04f 0000 	mov.w	r0, #0
 8007a46:	f380 8811 	msr	BASEPRI, r0
 8007a4a:	4770      	bx	lr
 8007a4c:	f3af 8000 	nop.w

08007a50 <pxCurrentTCBConst2>:
 8007a50:	20001cb8 	.word	0x20001cb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop

08007a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a58:	4808      	ldr	r0, [pc, #32]	; (8007a7c <prvPortStartFirstTask+0x24>)
 8007a5a:	6800      	ldr	r0, [r0, #0]
 8007a5c:	6800      	ldr	r0, [r0, #0]
 8007a5e:	f380 8808 	msr	MSP, r0
 8007a62:	f04f 0000 	mov.w	r0, #0
 8007a66:	f380 8814 	msr	CONTROL, r0
 8007a6a:	b662      	cpsie	i
 8007a6c:	b661      	cpsie	f
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	df00      	svc	0
 8007a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a7a:	bf00      	nop
 8007a7c:	e000ed08 	.word	0xe000ed08

08007a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a86:	4b46      	ldr	r3, [pc, #280]	; (8007ba0 <xPortStartScheduler+0x120>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a46      	ldr	r2, [pc, #280]	; (8007ba4 <xPortStartScheduler+0x124>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d10a      	bne.n	8007aa6 <xPortStartScheduler+0x26>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	613b      	str	r3, [r7, #16]
}
 8007aa2:	bf00      	nop
 8007aa4:	e7fe      	b.n	8007aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007aa6:	4b3e      	ldr	r3, [pc, #248]	; (8007ba0 <xPortStartScheduler+0x120>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a3f      	ldr	r2, [pc, #252]	; (8007ba8 <xPortStartScheduler+0x128>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d10a      	bne.n	8007ac6 <xPortStartScheduler+0x46>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	60fb      	str	r3, [r7, #12]
}
 8007ac2:	bf00      	nop
 8007ac4:	e7fe      	b.n	8007ac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ac6:	4b39      	ldr	r3, [pc, #228]	; (8007bac <xPortStartScheduler+0x12c>)
 8007ac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	22ff      	movs	r2, #255	; 0xff
 8007ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ae0:	78fb      	ldrb	r3, [r7, #3]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	4b31      	ldr	r3, [pc, #196]	; (8007bb0 <xPortStartScheduler+0x130>)
 8007aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007aee:	4b31      	ldr	r3, [pc, #196]	; (8007bb4 <xPortStartScheduler+0x134>)
 8007af0:	2207      	movs	r2, #7
 8007af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007af4:	e009      	b.n	8007b0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007af6:	4b2f      	ldr	r3, [pc, #188]	; (8007bb4 <xPortStartScheduler+0x134>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	4a2d      	ldr	r2, [pc, #180]	; (8007bb4 <xPortStartScheduler+0x134>)
 8007afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b00:	78fb      	ldrb	r3, [r7, #3]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b0a:	78fb      	ldrb	r3, [r7, #3]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b12:	2b80      	cmp	r3, #128	; 0x80
 8007b14:	d0ef      	beq.n	8007af6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b16:	4b27      	ldr	r3, [pc, #156]	; (8007bb4 <xPortStartScheduler+0x134>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f1c3 0307 	rsb	r3, r3, #7
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	d00a      	beq.n	8007b38 <xPortStartScheduler+0xb8>
	__asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	60bb      	str	r3, [r7, #8]
}
 8007b34:	bf00      	nop
 8007b36:	e7fe      	b.n	8007b36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b38:	4b1e      	ldr	r3, [pc, #120]	; (8007bb4 <xPortStartScheduler+0x134>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	021b      	lsls	r3, r3, #8
 8007b3e:	4a1d      	ldr	r2, [pc, #116]	; (8007bb4 <xPortStartScheduler+0x134>)
 8007b40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b42:	4b1c      	ldr	r3, [pc, #112]	; (8007bb4 <xPortStartScheduler+0x134>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b4a:	4a1a      	ldr	r2, [pc, #104]	; (8007bb4 <xPortStartScheduler+0x134>)
 8007b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b56:	4b18      	ldr	r3, [pc, #96]	; (8007bb8 <xPortStartScheduler+0x138>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a17      	ldr	r2, [pc, #92]	; (8007bb8 <xPortStartScheduler+0x138>)
 8007b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b62:	4b15      	ldr	r3, [pc, #84]	; (8007bb8 <xPortStartScheduler+0x138>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a14      	ldr	r2, [pc, #80]	; (8007bb8 <xPortStartScheduler+0x138>)
 8007b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b6e:	f000 f8dd 	bl	8007d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b72:	4b12      	ldr	r3, [pc, #72]	; (8007bbc <xPortStartScheduler+0x13c>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b78:	f000 f8fc 	bl	8007d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b7c:	4b10      	ldr	r3, [pc, #64]	; (8007bc0 <xPortStartScheduler+0x140>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a0f      	ldr	r2, [pc, #60]	; (8007bc0 <xPortStartScheduler+0x140>)
 8007b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b88:	f7ff ff66 	bl	8007a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b8c:	f7ff f836 	bl	8006bfc <vTaskSwitchContext>
	prvTaskExitError();
 8007b90:	f7ff ff1c 	bl	80079cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	e000ed00 	.word	0xe000ed00
 8007ba4:	410fc271 	.word	0x410fc271
 8007ba8:	410fc270 	.word	0x410fc270
 8007bac:	e000e400 	.word	0xe000e400
 8007bb0:	200022ec 	.word	0x200022ec
 8007bb4:	200022f0 	.word	0x200022f0
 8007bb8:	e000ed20 	.word	0xe000ed20
 8007bbc:	2000000c 	.word	0x2000000c
 8007bc0:	e000ef34 	.word	0xe000ef34

08007bc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	607b      	str	r3, [r7, #4]
}
 8007bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bde:	4b0f      	ldr	r3, [pc, #60]	; (8007c1c <vPortEnterCritical+0x58>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3301      	adds	r3, #1
 8007be4:	4a0d      	ldr	r2, [pc, #52]	; (8007c1c <vPortEnterCritical+0x58>)
 8007be6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007be8:	4b0c      	ldr	r3, [pc, #48]	; (8007c1c <vPortEnterCritical+0x58>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d10f      	bne.n	8007c10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <vPortEnterCritical+0x5c>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <vPortEnterCritical+0x4c>
	__asm volatile
 8007bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	603b      	str	r3, [r7, #0]
}
 8007c0c:	bf00      	nop
 8007c0e:	e7fe      	b.n	8007c0e <vPortEnterCritical+0x4a>
	}
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	2000000c 	.word	0x2000000c
 8007c20:	e000ed04 	.word	0xe000ed04

08007c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c2a:	4b12      	ldr	r3, [pc, #72]	; (8007c74 <vPortExitCritical+0x50>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10a      	bne.n	8007c48 <vPortExitCritical+0x24>
	__asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	607b      	str	r3, [r7, #4]
}
 8007c44:	bf00      	nop
 8007c46:	e7fe      	b.n	8007c46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c48:	4b0a      	ldr	r3, [pc, #40]	; (8007c74 <vPortExitCritical+0x50>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	4a09      	ldr	r2, [pc, #36]	; (8007c74 <vPortExitCritical+0x50>)
 8007c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c52:	4b08      	ldr	r3, [pc, #32]	; (8007c74 <vPortExitCritical+0x50>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d105      	bne.n	8007c66 <vPortExitCritical+0x42>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	f383 8811 	msr	BASEPRI, r3
}
 8007c64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	2000000c 	.word	0x2000000c
	...

08007c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c80:	f3ef 8009 	mrs	r0, PSP
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	4b15      	ldr	r3, [pc, #84]	; (8007ce0 <pxCurrentTCBConst>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	f01e 0f10 	tst.w	lr, #16
 8007c90:	bf08      	it	eq
 8007c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9a:	6010      	str	r0, [r2, #0]
 8007c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ca4:	f380 8811 	msr	BASEPRI, r0
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f7fe ffa4 	bl	8006bfc <vTaskSwitchContext>
 8007cb4:	f04f 0000 	mov.w	r0, #0
 8007cb8:	f380 8811 	msr	BASEPRI, r0
 8007cbc:	bc09      	pop	{r0, r3}
 8007cbe:	6819      	ldr	r1, [r3, #0]
 8007cc0:	6808      	ldr	r0, [r1, #0]
 8007cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc6:	f01e 0f10 	tst.w	lr, #16
 8007cca:	bf08      	it	eq
 8007ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007cd0:	f380 8809 	msr	PSP, r0
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	f3af 8000 	nop.w

08007ce0 <pxCurrentTCBConst>:
 8007ce0:	20001cb8 	.word	0x20001cb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ce4:	bf00      	nop
 8007ce6:	bf00      	nop

08007ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	607b      	str	r3, [r7, #4]
}
 8007d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d02:	f7fe fec1 	bl	8006a88 <xTaskIncrementTick>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d003      	beq.n	8007d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d0c:	4b06      	ldr	r3, [pc, #24]	; (8007d28 <xPortSysTickHandler+0x40>)
 8007d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	2300      	movs	r3, #0
 8007d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	f383 8811 	msr	BASEPRI, r3
}
 8007d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	e000ed04 	.word	0xe000ed04

08007d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d30:	4b0b      	ldr	r3, [pc, #44]	; (8007d60 <vPortSetupTimerInterrupt+0x34>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d36:	4b0b      	ldr	r3, [pc, #44]	; (8007d64 <vPortSetupTimerInterrupt+0x38>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d3c:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <vPortSetupTimerInterrupt+0x3c>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a0a      	ldr	r2, [pc, #40]	; (8007d6c <vPortSetupTimerInterrupt+0x40>)
 8007d42:	fba2 2303 	umull	r2, r3, r2, r3
 8007d46:	099b      	lsrs	r3, r3, #6
 8007d48:	4a09      	ldr	r2, [pc, #36]	; (8007d70 <vPortSetupTimerInterrupt+0x44>)
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d4e:	4b04      	ldr	r3, [pc, #16]	; (8007d60 <vPortSetupTimerInterrupt+0x34>)
 8007d50:	2207      	movs	r2, #7
 8007d52:	601a      	str	r2, [r3, #0]
}
 8007d54:	bf00      	nop
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	e000e010 	.word	0xe000e010
 8007d64:	e000e018 	.word	0xe000e018
 8007d68:	20000000 	.word	0x20000000
 8007d6c:	10624dd3 	.word	0x10624dd3
 8007d70:	e000e014 	.word	0xe000e014

08007d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d84 <vPortEnableVFP+0x10>
 8007d78:	6801      	ldr	r1, [r0, #0]
 8007d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d7e:	6001      	str	r1, [r0, #0]
 8007d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d82:	bf00      	nop
 8007d84:	e000ed88 	.word	0xe000ed88

08007d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d8e:	f3ef 8305 	mrs	r3, IPSR
 8007d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b0f      	cmp	r3, #15
 8007d98:	d914      	bls.n	8007dc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d9a:	4a17      	ldr	r2, [pc, #92]	; (8007df8 <vPortValidateInterruptPriority+0x70>)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4413      	add	r3, r2
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007da4:	4b15      	ldr	r3, [pc, #84]	; (8007dfc <vPortValidateInterruptPriority+0x74>)
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	7afa      	ldrb	r2, [r7, #11]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d20a      	bcs.n	8007dc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	607b      	str	r3, [r7, #4]
}
 8007dc0:	bf00      	nop
 8007dc2:	e7fe      	b.n	8007dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007dc4:	4b0e      	ldr	r3, [pc, #56]	; (8007e00 <vPortValidateInterruptPriority+0x78>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007dcc:	4b0d      	ldr	r3, [pc, #52]	; (8007e04 <vPortValidateInterruptPriority+0x7c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d90a      	bls.n	8007dea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	603b      	str	r3, [r7, #0]
}
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <vPortValidateInterruptPriority+0x60>
	}
 8007dea:	bf00      	nop
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	e000e3f0 	.word	0xe000e3f0
 8007dfc:	200022ec 	.word	0x200022ec
 8007e00:	e000ed0c 	.word	0xe000ed0c
 8007e04:	200022f0 	.word	0x200022f0

08007e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08a      	sub	sp, #40	; 0x28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e10:	2300      	movs	r3, #0
 8007e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e14:	f7fe fd7c 	bl	8006910 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e18:	4b5b      	ldr	r3, [pc, #364]	; (8007f88 <pvPortMalloc+0x180>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e20:	f000 f920 	bl	8008064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e24:	4b59      	ldr	r3, [pc, #356]	; (8007f8c <pvPortMalloc+0x184>)
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f040 8093 	bne.w	8007f58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d01d      	beq.n	8007e74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007e38:	2208      	movs	r2, #8
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f003 0307 	and.w	r3, r3, #7
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d014      	beq.n	8007e74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f023 0307 	bic.w	r3, r3, #7
 8007e50:	3308      	adds	r3, #8
 8007e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f003 0307 	and.w	r3, r3, #7
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00a      	beq.n	8007e74 <pvPortMalloc+0x6c>
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	617b      	str	r3, [r7, #20]
}
 8007e70:	bf00      	nop
 8007e72:	e7fe      	b.n	8007e72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d06e      	beq.n	8007f58 <pvPortMalloc+0x150>
 8007e7a:	4b45      	ldr	r3, [pc, #276]	; (8007f90 <pvPortMalloc+0x188>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d869      	bhi.n	8007f58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e84:	4b43      	ldr	r3, [pc, #268]	; (8007f94 <pvPortMalloc+0x18c>)
 8007e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e88:	4b42      	ldr	r3, [pc, #264]	; (8007f94 <pvPortMalloc+0x18c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e8e:	e004      	b.n	8007e9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d903      	bls.n	8007eac <pvPortMalloc+0xa4>
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1f1      	bne.n	8007e90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007eac:	4b36      	ldr	r3, [pc, #216]	; (8007f88 <pvPortMalloc+0x180>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d050      	beq.n	8007f58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2208      	movs	r2, #8
 8007ebc:	4413      	add	r3, r2
 8007ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	1ad2      	subs	r2, r2, r3
 8007ed0:	2308      	movs	r3, #8
 8007ed2:	005b      	lsls	r3, r3, #1
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d91f      	bls.n	8007f18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4413      	add	r3, r2
 8007ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	f003 0307 	and.w	r3, r3, #7
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <pvPortMalloc+0xf8>
	__asm volatile
 8007eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	613b      	str	r3, [r7, #16]
}
 8007efc:	bf00      	nop
 8007efe:	e7fe      	b.n	8007efe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	685a      	ldr	r2, [r3, #4]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	1ad2      	subs	r2, r2, r3
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f12:	69b8      	ldr	r0, [r7, #24]
 8007f14:	f000 f908 	bl	8008128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f18:	4b1d      	ldr	r3, [pc, #116]	; (8007f90 <pvPortMalloc+0x188>)
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	4a1b      	ldr	r2, [pc, #108]	; (8007f90 <pvPortMalloc+0x188>)
 8007f24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f26:	4b1a      	ldr	r3, [pc, #104]	; (8007f90 <pvPortMalloc+0x188>)
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	4b1b      	ldr	r3, [pc, #108]	; (8007f98 <pvPortMalloc+0x190>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d203      	bcs.n	8007f3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f32:	4b17      	ldr	r3, [pc, #92]	; (8007f90 <pvPortMalloc+0x188>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a18      	ldr	r2, [pc, #96]	; (8007f98 <pvPortMalloc+0x190>)
 8007f38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	685a      	ldr	r2, [r3, #4]
 8007f3e:	4b13      	ldr	r3, [pc, #76]	; (8007f8c <pvPortMalloc+0x184>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	431a      	orrs	r2, r3
 8007f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f4e:	4b13      	ldr	r3, [pc, #76]	; (8007f9c <pvPortMalloc+0x194>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3301      	adds	r3, #1
 8007f54:	4a11      	ldr	r2, [pc, #68]	; (8007f9c <pvPortMalloc+0x194>)
 8007f56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f58:	f7fe fce8 	bl	800692c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	f003 0307 	and.w	r3, r3, #7
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00a      	beq.n	8007f7c <pvPortMalloc+0x174>
	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	60fb      	str	r3, [r7, #12]
}
 8007f78:	bf00      	nop
 8007f7a:	e7fe      	b.n	8007f7a <pvPortMalloc+0x172>
	return pvReturn;
 8007f7c:	69fb      	ldr	r3, [r7, #28]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3728      	adds	r7, #40	; 0x28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	20005efc 	.word	0x20005efc
 8007f8c:	20005f10 	.word	0x20005f10
 8007f90:	20005f00 	.word	0x20005f00
 8007f94:	20005ef4 	.word	0x20005ef4
 8007f98:	20005f04 	.word	0x20005f04
 8007f9c:	20005f08 	.word	0x20005f08

08007fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d04d      	beq.n	800804e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fb2:	2308      	movs	r3, #8
 8007fb4:	425b      	negs	r3, r3
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	4413      	add	r3, r2
 8007fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	685a      	ldr	r2, [r3, #4]
 8007fc4:	4b24      	ldr	r3, [pc, #144]	; (8008058 <vPortFree+0xb8>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4013      	ands	r3, r2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10a      	bne.n	8007fe4 <vPortFree+0x44>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	60fb      	str	r3, [r7, #12]
}
 8007fe0:	bf00      	nop
 8007fe2:	e7fe      	b.n	8007fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00a      	beq.n	8008002 <vPortFree+0x62>
	__asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	60bb      	str	r3, [r7, #8]
}
 8007ffe:	bf00      	nop
 8008000:	e7fe      	b.n	8008000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	4b14      	ldr	r3, [pc, #80]	; (8008058 <vPortFree+0xb8>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4013      	ands	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d01e      	beq.n	800804e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d11a      	bne.n	800804e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	4b0e      	ldr	r3, [pc, #56]	; (8008058 <vPortFree+0xb8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	43db      	mvns	r3, r3
 8008022:	401a      	ands	r2, r3
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008028:	f7fe fc72 	bl	8006910 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	4b0a      	ldr	r3, [pc, #40]	; (800805c <vPortFree+0xbc>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4413      	add	r3, r2
 8008036:	4a09      	ldr	r2, [pc, #36]	; (800805c <vPortFree+0xbc>)
 8008038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800803a:	6938      	ldr	r0, [r7, #16]
 800803c:	f000 f874 	bl	8008128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008040:	4b07      	ldr	r3, [pc, #28]	; (8008060 <vPortFree+0xc0>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3301      	adds	r3, #1
 8008046:	4a06      	ldr	r2, [pc, #24]	; (8008060 <vPortFree+0xc0>)
 8008048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800804a:	f7fe fc6f 	bl	800692c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800804e:	bf00      	nop
 8008050:	3718      	adds	r7, #24
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20005f10 	.word	0x20005f10
 800805c:	20005f00 	.word	0x20005f00
 8008060:	20005f0c 	.word	0x20005f0c

08008064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800806a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800806e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008070:	4b27      	ldr	r3, [pc, #156]	; (8008110 <prvHeapInit+0xac>)
 8008072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f003 0307 	and.w	r3, r3, #7
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00c      	beq.n	8008098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3307      	adds	r3, #7
 8008082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f023 0307 	bic.w	r3, r3, #7
 800808a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	4a1f      	ldr	r2, [pc, #124]	; (8008110 <prvHeapInit+0xac>)
 8008094:	4413      	add	r3, r2
 8008096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800809c:	4a1d      	ldr	r2, [pc, #116]	; (8008114 <prvHeapInit+0xb0>)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080a2:	4b1c      	ldr	r3, [pc, #112]	; (8008114 <prvHeapInit+0xb0>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	4413      	add	r3, r2
 80080ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080b0:	2208      	movs	r2, #8
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	1a9b      	subs	r3, r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 0307 	bic.w	r3, r3, #7
 80080be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4a15      	ldr	r2, [pc, #84]	; (8008118 <prvHeapInit+0xb4>)
 80080c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080c6:	4b14      	ldr	r3, [pc, #80]	; (8008118 <prvHeapInit+0xb4>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2200      	movs	r2, #0
 80080cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080ce:	4b12      	ldr	r3, [pc, #72]	; (8008118 <prvHeapInit+0xb4>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2200      	movs	r2, #0
 80080d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	1ad2      	subs	r2, r2, r3
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080e4:	4b0c      	ldr	r3, [pc, #48]	; (8008118 <prvHeapInit+0xb4>)
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	4a0a      	ldr	r2, [pc, #40]	; (800811c <prvHeapInit+0xb8>)
 80080f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	4a09      	ldr	r2, [pc, #36]	; (8008120 <prvHeapInit+0xbc>)
 80080fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080fc:	4b09      	ldr	r3, [pc, #36]	; (8008124 <prvHeapInit+0xc0>)
 80080fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008102:	601a      	str	r2, [r3, #0]
}
 8008104:	bf00      	nop
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	200022f4 	.word	0x200022f4
 8008114:	20005ef4 	.word	0x20005ef4
 8008118:	20005efc 	.word	0x20005efc
 800811c:	20005f04 	.word	0x20005f04
 8008120:	20005f00 	.word	0x20005f00
 8008124:	20005f10 	.word	0x20005f10

08008128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008130:	4b28      	ldr	r3, [pc, #160]	; (80081d4 <prvInsertBlockIntoFreeList+0xac>)
 8008132:	60fb      	str	r3, [r7, #12]
 8008134:	e002      	b.n	800813c <prvInsertBlockIntoFreeList+0x14>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	429a      	cmp	r2, r3
 8008144:	d8f7      	bhi.n	8008136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	4413      	add	r3, r2
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	429a      	cmp	r2, r3
 8008156:	d108      	bne.n	800816a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	441a      	add	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	441a      	add	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	429a      	cmp	r2, r3
 800817c:	d118      	bne.n	80081b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	4b15      	ldr	r3, [pc, #84]	; (80081d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	429a      	cmp	r2, r3
 8008188:	d00d      	beq.n	80081a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	441a      	add	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	e008      	b.n	80081b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081a6:	4b0c      	ldr	r3, [pc, #48]	; (80081d8 <prvInsertBlockIntoFreeList+0xb0>)
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	e003      	b.n	80081b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d002      	beq.n	80081c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081c6:	bf00      	nop
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	20005ef4 	.word	0x20005ef4
 80081d8:	20005efc 	.word	0x20005efc

080081dc <__errno>:
 80081dc:	4b01      	ldr	r3, [pc, #4]	; (80081e4 <__errno+0x8>)
 80081de:	6818      	ldr	r0, [r3, #0]
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	20000010 	.word	0x20000010

080081e8 <__libc_init_array>:
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	4d0d      	ldr	r5, [pc, #52]	; (8008220 <__libc_init_array+0x38>)
 80081ec:	4c0d      	ldr	r4, [pc, #52]	; (8008224 <__libc_init_array+0x3c>)
 80081ee:	1b64      	subs	r4, r4, r5
 80081f0:	10a4      	asrs	r4, r4, #2
 80081f2:	2600      	movs	r6, #0
 80081f4:	42a6      	cmp	r6, r4
 80081f6:	d109      	bne.n	800820c <__libc_init_array+0x24>
 80081f8:	4d0b      	ldr	r5, [pc, #44]	; (8008228 <__libc_init_array+0x40>)
 80081fa:	4c0c      	ldr	r4, [pc, #48]	; (800822c <__libc_init_array+0x44>)
 80081fc:	f004 f822 	bl	800c244 <_init>
 8008200:	1b64      	subs	r4, r4, r5
 8008202:	10a4      	asrs	r4, r4, #2
 8008204:	2600      	movs	r6, #0
 8008206:	42a6      	cmp	r6, r4
 8008208:	d105      	bne.n	8008216 <__libc_init_array+0x2e>
 800820a:	bd70      	pop	{r4, r5, r6, pc}
 800820c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008210:	4798      	blx	r3
 8008212:	3601      	adds	r6, #1
 8008214:	e7ee      	b.n	80081f4 <__libc_init_array+0xc>
 8008216:	f855 3b04 	ldr.w	r3, [r5], #4
 800821a:	4798      	blx	r3
 800821c:	3601      	adds	r6, #1
 800821e:	e7f2      	b.n	8008206 <__libc_init_array+0x1e>
 8008220:	0800c860 	.word	0x0800c860
 8008224:	0800c860 	.word	0x0800c860
 8008228:	0800c860 	.word	0x0800c860
 800822c:	0800c864 	.word	0x0800c864

08008230 <memcpy>:
 8008230:	440a      	add	r2, r1
 8008232:	4291      	cmp	r1, r2
 8008234:	f100 33ff 	add.w	r3, r0, #4294967295
 8008238:	d100      	bne.n	800823c <memcpy+0xc>
 800823a:	4770      	bx	lr
 800823c:	b510      	push	{r4, lr}
 800823e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008242:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008246:	4291      	cmp	r1, r2
 8008248:	d1f9      	bne.n	800823e <memcpy+0xe>
 800824a:	bd10      	pop	{r4, pc}

0800824c <memset>:
 800824c:	4402      	add	r2, r0
 800824e:	4603      	mov	r3, r0
 8008250:	4293      	cmp	r3, r2
 8008252:	d100      	bne.n	8008256 <memset+0xa>
 8008254:	4770      	bx	lr
 8008256:	f803 1b01 	strb.w	r1, [r3], #1
 800825a:	e7f9      	b.n	8008250 <memset+0x4>

0800825c <__cvt>:
 800825c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008260:	ec55 4b10 	vmov	r4, r5, d0
 8008264:	2d00      	cmp	r5, #0
 8008266:	460e      	mov	r6, r1
 8008268:	4619      	mov	r1, r3
 800826a:	462b      	mov	r3, r5
 800826c:	bfbb      	ittet	lt
 800826e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008272:	461d      	movlt	r5, r3
 8008274:	2300      	movge	r3, #0
 8008276:	232d      	movlt	r3, #45	; 0x2d
 8008278:	700b      	strb	r3, [r1, #0]
 800827a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800827c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008280:	4691      	mov	r9, r2
 8008282:	f023 0820 	bic.w	r8, r3, #32
 8008286:	bfbc      	itt	lt
 8008288:	4622      	movlt	r2, r4
 800828a:	4614      	movlt	r4, r2
 800828c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008290:	d005      	beq.n	800829e <__cvt+0x42>
 8008292:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008296:	d100      	bne.n	800829a <__cvt+0x3e>
 8008298:	3601      	adds	r6, #1
 800829a:	2102      	movs	r1, #2
 800829c:	e000      	b.n	80082a0 <__cvt+0x44>
 800829e:	2103      	movs	r1, #3
 80082a0:	ab03      	add	r3, sp, #12
 80082a2:	9301      	str	r3, [sp, #4]
 80082a4:	ab02      	add	r3, sp, #8
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	ec45 4b10 	vmov	d0, r4, r5
 80082ac:	4653      	mov	r3, sl
 80082ae:	4632      	mov	r2, r6
 80082b0:	f000 fd1e 	bl	8008cf0 <_dtoa_r>
 80082b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80082b8:	4607      	mov	r7, r0
 80082ba:	d102      	bne.n	80082c2 <__cvt+0x66>
 80082bc:	f019 0f01 	tst.w	r9, #1
 80082c0:	d022      	beq.n	8008308 <__cvt+0xac>
 80082c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082c6:	eb07 0906 	add.w	r9, r7, r6
 80082ca:	d110      	bne.n	80082ee <__cvt+0x92>
 80082cc:	783b      	ldrb	r3, [r7, #0]
 80082ce:	2b30      	cmp	r3, #48	; 0x30
 80082d0:	d10a      	bne.n	80082e8 <__cvt+0x8c>
 80082d2:	2200      	movs	r2, #0
 80082d4:	2300      	movs	r3, #0
 80082d6:	4620      	mov	r0, r4
 80082d8:	4629      	mov	r1, r5
 80082da:	f7f8 fbf5 	bl	8000ac8 <__aeabi_dcmpeq>
 80082de:	b918      	cbnz	r0, 80082e8 <__cvt+0x8c>
 80082e0:	f1c6 0601 	rsb	r6, r6, #1
 80082e4:	f8ca 6000 	str.w	r6, [sl]
 80082e8:	f8da 3000 	ldr.w	r3, [sl]
 80082ec:	4499      	add	r9, r3
 80082ee:	2200      	movs	r2, #0
 80082f0:	2300      	movs	r3, #0
 80082f2:	4620      	mov	r0, r4
 80082f4:	4629      	mov	r1, r5
 80082f6:	f7f8 fbe7 	bl	8000ac8 <__aeabi_dcmpeq>
 80082fa:	b108      	cbz	r0, 8008300 <__cvt+0xa4>
 80082fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008300:	2230      	movs	r2, #48	; 0x30
 8008302:	9b03      	ldr	r3, [sp, #12]
 8008304:	454b      	cmp	r3, r9
 8008306:	d307      	bcc.n	8008318 <__cvt+0xbc>
 8008308:	9b03      	ldr	r3, [sp, #12]
 800830a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800830c:	1bdb      	subs	r3, r3, r7
 800830e:	4638      	mov	r0, r7
 8008310:	6013      	str	r3, [r2, #0]
 8008312:	b004      	add	sp, #16
 8008314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008318:	1c59      	adds	r1, r3, #1
 800831a:	9103      	str	r1, [sp, #12]
 800831c:	701a      	strb	r2, [r3, #0]
 800831e:	e7f0      	b.n	8008302 <__cvt+0xa6>

08008320 <__exponent>:
 8008320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008322:	4603      	mov	r3, r0
 8008324:	2900      	cmp	r1, #0
 8008326:	bfb8      	it	lt
 8008328:	4249      	neglt	r1, r1
 800832a:	f803 2b02 	strb.w	r2, [r3], #2
 800832e:	bfb4      	ite	lt
 8008330:	222d      	movlt	r2, #45	; 0x2d
 8008332:	222b      	movge	r2, #43	; 0x2b
 8008334:	2909      	cmp	r1, #9
 8008336:	7042      	strb	r2, [r0, #1]
 8008338:	dd2a      	ble.n	8008390 <__exponent+0x70>
 800833a:	f10d 0407 	add.w	r4, sp, #7
 800833e:	46a4      	mov	ip, r4
 8008340:	270a      	movs	r7, #10
 8008342:	46a6      	mov	lr, r4
 8008344:	460a      	mov	r2, r1
 8008346:	fb91 f6f7 	sdiv	r6, r1, r7
 800834a:	fb07 1516 	mls	r5, r7, r6, r1
 800834e:	3530      	adds	r5, #48	; 0x30
 8008350:	2a63      	cmp	r2, #99	; 0x63
 8008352:	f104 34ff 	add.w	r4, r4, #4294967295
 8008356:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800835a:	4631      	mov	r1, r6
 800835c:	dcf1      	bgt.n	8008342 <__exponent+0x22>
 800835e:	3130      	adds	r1, #48	; 0x30
 8008360:	f1ae 0502 	sub.w	r5, lr, #2
 8008364:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008368:	1c44      	adds	r4, r0, #1
 800836a:	4629      	mov	r1, r5
 800836c:	4561      	cmp	r1, ip
 800836e:	d30a      	bcc.n	8008386 <__exponent+0x66>
 8008370:	f10d 0209 	add.w	r2, sp, #9
 8008374:	eba2 020e 	sub.w	r2, r2, lr
 8008378:	4565      	cmp	r5, ip
 800837a:	bf88      	it	hi
 800837c:	2200      	movhi	r2, #0
 800837e:	4413      	add	r3, r2
 8008380:	1a18      	subs	r0, r3, r0
 8008382:	b003      	add	sp, #12
 8008384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008386:	f811 2b01 	ldrb.w	r2, [r1], #1
 800838a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800838e:	e7ed      	b.n	800836c <__exponent+0x4c>
 8008390:	2330      	movs	r3, #48	; 0x30
 8008392:	3130      	adds	r1, #48	; 0x30
 8008394:	7083      	strb	r3, [r0, #2]
 8008396:	70c1      	strb	r1, [r0, #3]
 8008398:	1d03      	adds	r3, r0, #4
 800839a:	e7f1      	b.n	8008380 <__exponent+0x60>

0800839c <_printf_float>:
 800839c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a0:	ed2d 8b02 	vpush	{d8}
 80083a4:	b08d      	sub	sp, #52	; 0x34
 80083a6:	460c      	mov	r4, r1
 80083a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80083ac:	4616      	mov	r6, r2
 80083ae:	461f      	mov	r7, r3
 80083b0:	4605      	mov	r5, r0
 80083b2:	f001 fa8b 	bl	80098cc <_localeconv_r>
 80083b6:	f8d0 a000 	ldr.w	sl, [r0]
 80083ba:	4650      	mov	r0, sl
 80083bc:	f7f7 ff08 	bl	80001d0 <strlen>
 80083c0:	2300      	movs	r3, #0
 80083c2:	930a      	str	r3, [sp, #40]	; 0x28
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	9305      	str	r3, [sp, #20]
 80083c8:	f8d8 3000 	ldr.w	r3, [r8]
 80083cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80083d0:	3307      	adds	r3, #7
 80083d2:	f023 0307 	bic.w	r3, r3, #7
 80083d6:	f103 0208 	add.w	r2, r3, #8
 80083da:	f8c8 2000 	str.w	r2, [r8]
 80083de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80083e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80083ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083ee:	9307      	str	r3, [sp, #28]
 80083f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80083f4:	ee08 0a10 	vmov	s16, r0
 80083f8:	4b9f      	ldr	r3, [pc, #636]	; (8008678 <_printf_float+0x2dc>)
 80083fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008402:	f7f8 fb93 	bl	8000b2c <__aeabi_dcmpun>
 8008406:	bb88      	cbnz	r0, 800846c <_printf_float+0xd0>
 8008408:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800840c:	4b9a      	ldr	r3, [pc, #616]	; (8008678 <_printf_float+0x2dc>)
 800840e:	f04f 32ff 	mov.w	r2, #4294967295
 8008412:	f7f8 fb6d 	bl	8000af0 <__aeabi_dcmple>
 8008416:	bb48      	cbnz	r0, 800846c <_printf_float+0xd0>
 8008418:	2200      	movs	r2, #0
 800841a:	2300      	movs	r3, #0
 800841c:	4640      	mov	r0, r8
 800841e:	4649      	mov	r1, r9
 8008420:	f7f8 fb5c 	bl	8000adc <__aeabi_dcmplt>
 8008424:	b110      	cbz	r0, 800842c <_printf_float+0x90>
 8008426:	232d      	movs	r3, #45	; 0x2d
 8008428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800842c:	4b93      	ldr	r3, [pc, #588]	; (800867c <_printf_float+0x2e0>)
 800842e:	4894      	ldr	r0, [pc, #592]	; (8008680 <_printf_float+0x2e4>)
 8008430:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008434:	bf94      	ite	ls
 8008436:	4698      	movls	r8, r3
 8008438:	4680      	movhi	r8, r0
 800843a:	2303      	movs	r3, #3
 800843c:	6123      	str	r3, [r4, #16]
 800843e:	9b05      	ldr	r3, [sp, #20]
 8008440:	f023 0204 	bic.w	r2, r3, #4
 8008444:	6022      	str	r2, [r4, #0]
 8008446:	f04f 0900 	mov.w	r9, #0
 800844a:	9700      	str	r7, [sp, #0]
 800844c:	4633      	mov	r3, r6
 800844e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008450:	4621      	mov	r1, r4
 8008452:	4628      	mov	r0, r5
 8008454:	f000 f9d8 	bl	8008808 <_printf_common>
 8008458:	3001      	adds	r0, #1
 800845a:	f040 8090 	bne.w	800857e <_printf_float+0x1e2>
 800845e:	f04f 30ff 	mov.w	r0, #4294967295
 8008462:	b00d      	add	sp, #52	; 0x34
 8008464:	ecbd 8b02 	vpop	{d8}
 8008468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846c:	4642      	mov	r2, r8
 800846e:	464b      	mov	r3, r9
 8008470:	4640      	mov	r0, r8
 8008472:	4649      	mov	r1, r9
 8008474:	f7f8 fb5a 	bl	8000b2c <__aeabi_dcmpun>
 8008478:	b140      	cbz	r0, 800848c <_printf_float+0xf0>
 800847a:	464b      	mov	r3, r9
 800847c:	2b00      	cmp	r3, #0
 800847e:	bfbc      	itt	lt
 8008480:	232d      	movlt	r3, #45	; 0x2d
 8008482:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008486:	487f      	ldr	r0, [pc, #508]	; (8008684 <_printf_float+0x2e8>)
 8008488:	4b7f      	ldr	r3, [pc, #508]	; (8008688 <_printf_float+0x2ec>)
 800848a:	e7d1      	b.n	8008430 <_printf_float+0x94>
 800848c:	6863      	ldr	r3, [r4, #4]
 800848e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008492:	9206      	str	r2, [sp, #24]
 8008494:	1c5a      	adds	r2, r3, #1
 8008496:	d13f      	bne.n	8008518 <_printf_float+0x17c>
 8008498:	2306      	movs	r3, #6
 800849a:	6063      	str	r3, [r4, #4]
 800849c:	9b05      	ldr	r3, [sp, #20]
 800849e:	6861      	ldr	r1, [r4, #4]
 80084a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80084a4:	2300      	movs	r3, #0
 80084a6:	9303      	str	r3, [sp, #12]
 80084a8:	ab0a      	add	r3, sp, #40	; 0x28
 80084aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80084ae:	ab09      	add	r3, sp, #36	; 0x24
 80084b0:	ec49 8b10 	vmov	d0, r8, r9
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	6022      	str	r2, [r4, #0]
 80084b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80084bc:	4628      	mov	r0, r5
 80084be:	f7ff fecd 	bl	800825c <__cvt>
 80084c2:	9b06      	ldr	r3, [sp, #24]
 80084c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084c6:	2b47      	cmp	r3, #71	; 0x47
 80084c8:	4680      	mov	r8, r0
 80084ca:	d108      	bne.n	80084de <_printf_float+0x142>
 80084cc:	1cc8      	adds	r0, r1, #3
 80084ce:	db02      	blt.n	80084d6 <_printf_float+0x13a>
 80084d0:	6863      	ldr	r3, [r4, #4]
 80084d2:	4299      	cmp	r1, r3
 80084d4:	dd41      	ble.n	800855a <_printf_float+0x1be>
 80084d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80084da:	fa5f fb8b 	uxtb.w	fp, fp
 80084de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084e2:	d820      	bhi.n	8008526 <_printf_float+0x18a>
 80084e4:	3901      	subs	r1, #1
 80084e6:	465a      	mov	r2, fp
 80084e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80084ec:	9109      	str	r1, [sp, #36]	; 0x24
 80084ee:	f7ff ff17 	bl	8008320 <__exponent>
 80084f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084f4:	1813      	adds	r3, r2, r0
 80084f6:	2a01      	cmp	r2, #1
 80084f8:	4681      	mov	r9, r0
 80084fa:	6123      	str	r3, [r4, #16]
 80084fc:	dc02      	bgt.n	8008504 <_printf_float+0x168>
 80084fe:	6822      	ldr	r2, [r4, #0]
 8008500:	07d2      	lsls	r2, r2, #31
 8008502:	d501      	bpl.n	8008508 <_printf_float+0x16c>
 8008504:	3301      	adds	r3, #1
 8008506:	6123      	str	r3, [r4, #16]
 8008508:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800850c:	2b00      	cmp	r3, #0
 800850e:	d09c      	beq.n	800844a <_printf_float+0xae>
 8008510:	232d      	movs	r3, #45	; 0x2d
 8008512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008516:	e798      	b.n	800844a <_printf_float+0xae>
 8008518:	9a06      	ldr	r2, [sp, #24]
 800851a:	2a47      	cmp	r2, #71	; 0x47
 800851c:	d1be      	bne.n	800849c <_printf_float+0x100>
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1bc      	bne.n	800849c <_printf_float+0x100>
 8008522:	2301      	movs	r3, #1
 8008524:	e7b9      	b.n	800849a <_printf_float+0xfe>
 8008526:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800852a:	d118      	bne.n	800855e <_printf_float+0x1c2>
 800852c:	2900      	cmp	r1, #0
 800852e:	6863      	ldr	r3, [r4, #4]
 8008530:	dd0b      	ble.n	800854a <_printf_float+0x1ae>
 8008532:	6121      	str	r1, [r4, #16]
 8008534:	b913      	cbnz	r3, 800853c <_printf_float+0x1a0>
 8008536:	6822      	ldr	r2, [r4, #0]
 8008538:	07d0      	lsls	r0, r2, #31
 800853a:	d502      	bpl.n	8008542 <_printf_float+0x1a6>
 800853c:	3301      	adds	r3, #1
 800853e:	440b      	add	r3, r1
 8008540:	6123      	str	r3, [r4, #16]
 8008542:	65a1      	str	r1, [r4, #88]	; 0x58
 8008544:	f04f 0900 	mov.w	r9, #0
 8008548:	e7de      	b.n	8008508 <_printf_float+0x16c>
 800854a:	b913      	cbnz	r3, 8008552 <_printf_float+0x1b6>
 800854c:	6822      	ldr	r2, [r4, #0]
 800854e:	07d2      	lsls	r2, r2, #31
 8008550:	d501      	bpl.n	8008556 <_printf_float+0x1ba>
 8008552:	3302      	adds	r3, #2
 8008554:	e7f4      	b.n	8008540 <_printf_float+0x1a4>
 8008556:	2301      	movs	r3, #1
 8008558:	e7f2      	b.n	8008540 <_printf_float+0x1a4>
 800855a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800855e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008560:	4299      	cmp	r1, r3
 8008562:	db05      	blt.n	8008570 <_printf_float+0x1d4>
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	6121      	str	r1, [r4, #16]
 8008568:	07d8      	lsls	r0, r3, #31
 800856a:	d5ea      	bpl.n	8008542 <_printf_float+0x1a6>
 800856c:	1c4b      	adds	r3, r1, #1
 800856e:	e7e7      	b.n	8008540 <_printf_float+0x1a4>
 8008570:	2900      	cmp	r1, #0
 8008572:	bfd4      	ite	le
 8008574:	f1c1 0202 	rsble	r2, r1, #2
 8008578:	2201      	movgt	r2, #1
 800857a:	4413      	add	r3, r2
 800857c:	e7e0      	b.n	8008540 <_printf_float+0x1a4>
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	055a      	lsls	r2, r3, #21
 8008582:	d407      	bmi.n	8008594 <_printf_float+0x1f8>
 8008584:	6923      	ldr	r3, [r4, #16]
 8008586:	4642      	mov	r2, r8
 8008588:	4631      	mov	r1, r6
 800858a:	4628      	mov	r0, r5
 800858c:	47b8      	blx	r7
 800858e:	3001      	adds	r0, #1
 8008590:	d12c      	bne.n	80085ec <_printf_float+0x250>
 8008592:	e764      	b.n	800845e <_printf_float+0xc2>
 8008594:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008598:	f240 80e0 	bls.w	800875c <_printf_float+0x3c0>
 800859c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085a0:	2200      	movs	r2, #0
 80085a2:	2300      	movs	r3, #0
 80085a4:	f7f8 fa90 	bl	8000ac8 <__aeabi_dcmpeq>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d034      	beq.n	8008616 <_printf_float+0x27a>
 80085ac:	4a37      	ldr	r2, [pc, #220]	; (800868c <_printf_float+0x2f0>)
 80085ae:	2301      	movs	r3, #1
 80085b0:	4631      	mov	r1, r6
 80085b2:	4628      	mov	r0, r5
 80085b4:	47b8      	blx	r7
 80085b6:	3001      	adds	r0, #1
 80085b8:	f43f af51 	beq.w	800845e <_printf_float+0xc2>
 80085bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085c0:	429a      	cmp	r2, r3
 80085c2:	db02      	blt.n	80085ca <_printf_float+0x22e>
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	07d8      	lsls	r0, r3, #31
 80085c8:	d510      	bpl.n	80085ec <_printf_float+0x250>
 80085ca:	ee18 3a10 	vmov	r3, s16
 80085ce:	4652      	mov	r2, sl
 80085d0:	4631      	mov	r1, r6
 80085d2:	4628      	mov	r0, r5
 80085d4:	47b8      	blx	r7
 80085d6:	3001      	adds	r0, #1
 80085d8:	f43f af41 	beq.w	800845e <_printf_float+0xc2>
 80085dc:	f04f 0800 	mov.w	r8, #0
 80085e0:	f104 091a 	add.w	r9, r4, #26
 80085e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e6:	3b01      	subs	r3, #1
 80085e8:	4543      	cmp	r3, r8
 80085ea:	dc09      	bgt.n	8008600 <_printf_float+0x264>
 80085ec:	6823      	ldr	r3, [r4, #0]
 80085ee:	079b      	lsls	r3, r3, #30
 80085f0:	f100 8105 	bmi.w	80087fe <_printf_float+0x462>
 80085f4:	68e0      	ldr	r0, [r4, #12]
 80085f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085f8:	4298      	cmp	r0, r3
 80085fa:	bfb8      	it	lt
 80085fc:	4618      	movlt	r0, r3
 80085fe:	e730      	b.n	8008462 <_printf_float+0xc6>
 8008600:	2301      	movs	r3, #1
 8008602:	464a      	mov	r2, r9
 8008604:	4631      	mov	r1, r6
 8008606:	4628      	mov	r0, r5
 8008608:	47b8      	blx	r7
 800860a:	3001      	adds	r0, #1
 800860c:	f43f af27 	beq.w	800845e <_printf_float+0xc2>
 8008610:	f108 0801 	add.w	r8, r8, #1
 8008614:	e7e6      	b.n	80085e4 <_printf_float+0x248>
 8008616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008618:	2b00      	cmp	r3, #0
 800861a:	dc39      	bgt.n	8008690 <_printf_float+0x2f4>
 800861c:	4a1b      	ldr	r2, [pc, #108]	; (800868c <_printf_float+0x2f0>)
 800861e:	2301      	movs	r3, #1
 8008620:	4631      	mov	r1, r6
 8008622:	4628      	mov	r0, r5
 8008624:	47b8      	blx	r7
 8008626:	3001      	adds	r0, #1
 8008628:	f43f af19 	beq.w	800845e <_printf_float+0xc2>
 800862c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008630:	4313      	orrs	r3, r2
 8008632:	d102      	bne.n	800863a <_printf_float+0x29e>
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	07d9      	lsls	r1, r3, #31
 8008638:	d5d8      	bpl.n	80085ec <_printf_float+0x250>
 800863a:	ee18 3a10 	vmov	r3, s16
 800863e:	4652      	mov	r2, sl
 8008640:	4631      	mov	r1, r6
 8008642:	4628      	mov	r0, r5
 8008644:	47b8      	blx	r7
 8008646:	3001      	adds	r0, #1
 8008648:	f43f af09 	beq.w	800845e <_printf_float+0xc2>
 800864c:	f04f 0900 	mov.w	r9, #0
 8008650:	f104 0a1a 	add.w	sl, r4, #26
 8008654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008656:	425b      	negs	r3, r3
 8008658:	454b      	cmp	r3, r9
 800865a:	dc01      	bgt.n	8008660 <_printf_float+0x2c4>
 800865c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800865e:	e792      	b.n	8008586 <_printf_float+0x1ea>
 8008660:	2301      	movs	r3, #1
 8008662:	4652      	mov	r2, sl
 8008664:	4631      	mov	r1, r6
 8008666:	4628      	mov	r0, r5
 8008668:	47b8      	blx	r7
 800866a:	3001      	adds	r0, #1
 800866c:	f43f aef7 	beq.w	800845e <_printf_float+0xc2>
 8008670:	f109 0901 	add.w	r9, r9, #1
 8008674:	e7ee      	b.n	8008654 <_printf_float+0x2b8>
 8008676:	bf00      	nop
 8008678:	7fefffff 	.word	0x7fefffff
 800867c:	0800c410 	.word	0x0800c410
 8008680:	0800c414 	.word	0x0800c414
 8008684:	0800c41c 	.word	0x0800c41c
 8008688:	0800c418 	.word	0x0800c418
 800868c:	0800c420 	.word	0x0800c420
 8008690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008692:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008694:	429a      	cmp	r2, r3
 8008696:	bfa8      	it	ge
 8008698:	461a      	movge	r2, r3
 800869a:	2a00      	cmp	r2, #0
 800869c:	4691      	mov	r9, r2
 800869e:	dc37      	bgt.n	8008710 <_printf_float+0x374>
 80086a0:	f04f 0b00 	mov.w	fp, #0
 80086a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086a8:	f104 021a 	add.w	r2, r4, #26
 80086ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086ae:	9305      	str	r3, [sp, #20]
 80086b0:	eba3 0309 	sub.w	r3, r3, r9
 80086b4:	455b      	cmp	r3, fp
 80086b6:	dc33      	bgt.n	8008720 <_printf_float+0x384>
 80086b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086bc:	429a      	cmp	r2, r3
 80086be:	db3b      	blt.n	8008738 <_printf_float+0x39c>
 80086c0:	6823      	ldr	r3, [r4, #0]
 80086c2:	07da      	lsls	r2, r3, #31
 80086c4:	d438      	bmi.n	8008738 <_printf_float+0x39c>
 80086c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c8:	9a05      	ldr	r2, [sp, #20]
 80086ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086cc:	1a9a      	subs	r2, r3, r2
 80086ce:	eba3 0901 	sub.w	r9, r3, r1
 80086d2:	4591      	cmp	r9, r2
 80086d4:	bfa8      	it	ge
 80086d6:	4691      	movge	r9, r2
 80086d8:	f1b9 0f00 	cmp.w	r9, #0
 80086dc:	dc35      	bgt.n	800874a <_printf_float+0x3ae>
 80086de:	f04f 0800 	mov.w	r8, #0
 80086e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086e6:	f104 0a1a 	add.w	sl, r4, #26
 80086ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086ee:	1a9b      	subs	r3, r3, r2
 80086f0:	eba3 0309 	sub.w	r3, r3, r9
 80086f4:	4543      	cmp	r3, r8
 80086f6:	f77f af79 	ble.w	80085ec <_printf_float+0x250>
 80086fa:	2301      	movs	r3, #1
 80086fc:	4652      	mov	r2, sl
 80086fe:	4631      	mov	r1, r6
 8008700:	4628      	mov	r0, r5
 8008702:	47b8      	blx	r7
 8008704:	3001      	adds	r0, #1
 8008706:	f43f aeaa 	beq.w	800845e <_printf_float+0xc2>
 800870a:	f108 0801 	add.w	r8, r8, #1
 800870e:	e7ec      	b.n	80086ea <_printf_float+0x34e>
 8008710:	4613      	mov	r3, r2
 8008712:	4631      	mov	r1, r6
 8008714:	4642      	mov	r2, r8
 8008716:	4628      	mov	r0, r5
 8008718:	47b8      	blx	r7
 800871a:	3001      	adds	r0, #1
 800871c:	d1c0      	bne.n	80086a0 <_printf_float+0x304>
 800871e:	e69e      	b.n	800845e <_printf_float+0xc2>
 8008720:	2301      	movs	r3, #1
 8008722:	4631      	mov	r1, r6
 8008724:	4628      	mov	r0, r5
 8008726:	9205      	str	r2, [sp, #20]
 8008728:	47b8      	blx	r7
 800872a:	3001      	adds	r0, #1
 800872c:	f43f ae97 	beq.w	800845e <_printf_float+0xc2>
 8008730:	9a05      	ldr	r2, [sp, #20]
 8008732:	f10b 0b01 	add.w	fp, fp, #1
 8008736:	e7b9      	b.n	80086ac <_printf_float+0x310>
 8008738:	ee18 3a10 	vmov	r3, s16
 800873c:	4652      	mov	r2, sl
 800873e:	4631      	mov	r1, r6
 8008740:	4628      	mov	r0, r5
 8008742:	47b8      	blx	r7
 8008744:	3001      	adds	r0, #1
 8008746:	d1be      	bne.n	80086c6 <_printf_float+0x32a>
 8008748:	e689      	b.n	800845e <_printf_float+0xc2>
 800874a:	9a05      	ldr	r2, [sp, #20]
 800874c:	464b      	mov	r3, r9
 800874e:	4442      	add	r2, r8
 8008750:	4631      	mov	r1, r6
 8008752:	4628      	mov	r0, r5
 8008754:	47b8      	blx	r7
 8008756:	3001      	adds	r0, #1
 8008758:	d1c1      	bne.n	80086de <_printf_float+0x342>
 800875a:	e680      	b.n	800845e <_printf_float+0xc2>
 800875c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800875e:	2a01      	cmp	r2, #1
 8008760:	dc01      	bgt.n	8008766 <_printf_float+0x3ca>
 8008762:	07db      	lsls	r3, r3, #31
 8008764:	d538      	bpl.n	80087d8 <_printf_float+0x43c>
 8008766:	2301      	movs	r3, #1
 8008768:	4642      	mov	r2, r8
 800876a:	4631      	mov	r1, r6
 800876c:	4628      	mov	r0, r5
 800876e:	47b8      	blx	r7
 8008770:	3001      	adds	r0, #1
 8008772:	f43f ae74 	beq.w	800845e <_printf_float+0xc2>
 8008776:	ee18 3a10 	vmov	r3, s16
 800877a:	4652      	mov	r2, sl
 800877c:	4631      	mov	r1, r6
 800877e:	4628      	mov	r0, r5
 8008780:	47b8      	blx	r7
 8008782:	3001      	adds	r0, #1
 8008784:	f43f ae6b 	beq.w	800845e <_printf_float+0xc2>
 8008788:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800878c:	2200      	movs	r2, #0
 800878e:	2300      	movs	r3, #0
 8008790:	f7f8 f99a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008794:	b9d8      	cbnz	r0, 80087ce <_printf_float+0x432>
 8008796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008798:	f108 0201 	add.w	r2, r8, #1
 800879c:	3b01      	subs	r3, #1
 800879e:	4631      	mov	r1, r6
 80087a0:	4628      	mov	r0, r5
 80087a2:	47b8      	blx	r7
 80087a4:	3001      	adds	r0, #1
 80087a6:	d10e      	bne.n	80087c6 <_printf_float+0x42a>
 80087a8:	e659      	b.n	800845e <_printf_float+0xc2>
 80087aa:	2301      	movs	r3, #1
 80087ac:	4652      	mov	r2, sl
 80087ae:	4631      	mov	r1, r6
 80087b0:	4628      	mov	r0, r5
 80087b2:	47b8      	blx	r7
 80087b4:	3001      	adds	r0, #1
 80087b6:	f43f ae52 	beq.w	800845e <_printf_float+0xc2>
 80087ba:	f108 0801 	add.w	r8, r8, #1
 80087be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c0:	3b01      	subs	r3, #1
 80087c2:	4543      	cmp	r3, r8
 80087c4:	dcf1      	bgt.n	80087aa <_printf_float+0x40e>
 80087c6:	464b      	mov	r3, r9
 80087c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80087cc:	e6dc      	b.n	8008588 <_printf_float+0x1ec>
 80087ce:	f04f 0800 	mov.w	r8, #0
 80087d2:	f104 0a1a 	add.w	sl, r4, #26
 80087d6:	e7f2      	b.n	80087be <_printf_float+0x422>
 80087d8:	2301      	movs	r3, #1
 80087da:	4642      	mov	r2, r8
 80087dc:	e7df      	b.n	800879e <_printf_float+0x402>
 80087de:	2301      	movs	r3, #1
 80087e0:	464a      	mov	r2, r9
 80087e2:	4631      	mov	r1, r6
 80087e4:	4628      	mov	r0, r5
 80087e6:	47b8      	blx	r7
 80087e8:	3001      	adds	r0, #1
 80087ea:	f43f ae38 	beq.w	800845e <_printf_float+0xc2>
 80087ee:	f108 0801 	add.w	r8, r8, #1
 80087f2:	68e3      	ldr	r3, [r4, #12]
 80087f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087f6:	1a5b      	subs	r3, r3, r1
 80087f8:	4543      	cmp	r3, r8
 80087fa:	dcf0      	bgt.n	80087de <_printf_float+0x442>
 80087fc:	e6fa      	b.n	80085f4 <_printf_float+0x258>
 80087fe:	f04f 0800 	mov.w	r8, #0
 8008802:	f104 0919 	add.w	r9, r4, #25
 8008806:	e7f4      	b.n	80087f2 <_printf_float+0x456>

08008808 <_printf_common>:
 8008808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800880c:	4616      	mov	r6, r2
 800880e:	4699      	mov	r9, r3
 8008810:	688a      	ldr	r2, [r1, #8]
 8008812:	690b      	ldr	r3, [r1, #16]
 8008814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008818:	4293      	cmp	r3, r2
 800881a:	bfb8      	it	lt
 800881c:	4613      	movlt	r3, r2
 800881e:	6033      	str	r3, [r6, #0]
 8008820:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008824:	4607      	mov	r7, r0
 8008826:	460c      	mov	r4, r1
 8008828:	b10a      	cbz	r2, 800882e <_printf_common+0x26>
 800882a:	3301      	adds	r3, #1
 800882c:	6033      	str	r3, [r6, #0]
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	0699      	lsls	r1, r3, #26
 8008832:	bf42      	ittt	mi
 8008834:	6833      	ldrmi	r3, [r6, #0]
 8008836:	3302      	addmi	r3, #2
 8008838:	6033      	strmi	r3, [r6, #0]
 800883a:	6825      	ldr	r5, [r4, #0]
 800883c:	f015 0506 	ands.w	r5, r5, #6
 8008840:	d106      	bne.n	8008850 <_printf_common+0x48>
 8008842:	f104 0a19 	add.w	sl, r4, #25
 8008846:	68e3      	ldr	r3, [r4, #12]
 8008848:	6832      	ldr	r2, [r6, #0]
 800884a:	1a9b      	subs	r3, r3, r2
 800884c:	42ab      	cmp	r3, r5
 800884e:	dc26      	bgt.n	800889e <_printf_common+0x96>
 8008850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008854:	1e13      	subs	r3, r2, #0
 8008856:	6822      	ldr	r2, [r4, #0]
 8008858:	bf18      	it	ne
 800885a:	2301      	movne	r3, #1
 800885c:	0692      	lsls	r2, r2, #26
 800885e:	d42b      	bmi.n	80088b8 <_printf_common+0xb0>
 8008860:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008864:	4649      	mov	r1, r9
 8008866:	4638      	mov	r0, r7
 8008868:	47c0      	blx	r8
 800886a:	3001      	adds	r0, #1
 800886c:	d01e      	beq.n	80088ac <_printf_common+0xa4>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	68e5      	ldr	r5, [r4, #12]
 8008872:	6832      	ldr	r2, [r6, #0]
 8008874:	f003 0306 	and.w	r3, r3, #6
 8008878:	2b04      	cmp	r3, #4
 800887a:	bf08      	it	eq
 800887c:	1aad      	subeq	r5, r5, r2
 800887e:	68a3      	ldr	r3, [r4, #8]
 8008880:	6922      	ldr	r2, [r4, #16]
 8008882:	bf0c      	ite	eq
 8008884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008888:	2500      	movne	r5, #0
 800888a:	4293      	cmp	r3, r2
 800888c:	bfc4      	itt	gt
 800888e:	1a9b      	subgt	r3, r3, r2
 8008890:	18ed      	addgt	r5, r5, r3
 8008892:	2600      	movs	r6, #0
 8008894:	341a      	adds	r4, #26
 8008896:	42b5      	cmp	r5, r6
 8008898:	d11a      	bne.n	80088d0 <_printf_common+0xc8>
 800889a:	2000      	movs	r0, #0
 800889c:	e008      	b.n	80088b0 <_printf_common+0xa8>
 800889e:	2301      	movs	r3, #1
 80088a0:	4652      	mov	r2, sl
 80088a2:	4649      	mov	r1, r9
 80088a4:	4638      	mov	r0, r7
 80088a6:	47c0      	blx	r8
 80088a8:	3001      	adds	r0, #1
 80088aa:	d103      	bne.n	80088b4 <_printf_common+0xac>
 80088ac:	f04f 30ff 	mov.w	r0, #4294967295
 80088b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b4:	3501      	adds	r5, #1
 80088b6:	e7c6      	b.n	8008846 <_printf_common+0x3e>
 80088b8:	18e1      	adds	r1, r4, r3
 80088ba:	1c5a      	adds	r2, r3, #1
 80088bc:	2030      	movs	r0, #48	; 0x30
 80088be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088c2:	4422      	add	r2, r4
 80088c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088cc:	3302      	adds	r3, #2
 80088ce:	e7c7      	b.n	8008860 <_printf_common+0x58>
 80088d0:	2301      	movs	r3, #1
 80088d2:	4622      	mov	r2, r4
 80088d4:	4649      	mov	r1, r9
 80088d6:	4638      	mov	r0, r7
 80088d8:	47c0      	blx	r8
 80088da:	3001      	adds	r0, #1
 80088dc:	d0e6      	beq.n	80088ac <_printf_common+0xa4>
 80088de:	3601      	adds	r6, #1
 80088e0:	e7d9      	b.n	8008896 <_printf_common+0x8e>
	...

080088e4 <_printf_i>:
 80088e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088e8:	7e0f      	ldrb	r7, [r1, #24]
 80088ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088ec:	2f78      	cmp	r7, #120	; 0x78
 80088ee:	4691      	mov	r9, r2
 80088f0:	4680      	mov	r8, r0
 80088f2:	460c      	mov	r4, r1
 80088f4:	469a      	mov	sl, r3
 80088f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088fa:	d807      	bhi.n	800890c <_printf_i+0x28>
 80088fc:	2f62      	cmp	r7, #98	; 0x62
 80088fe:	d80a      	bhi.n	8008916 <_printf_i+0x32>
 8008900:	2f00      	cmp	r7, #0
 8008902:	f000 80d8 	beq.w	8008ab6 <_printf_i+0x1d2>
 8008906:	2f58      	cmp	r7, #88	; 0x58
 8008908:	f000 80a3 	beq.w	8008a52 <_printf_i+0x16e>
 800890c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008910:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008914:	e03a      	b.n	800898c <_printf_i+0xa8>
 8008916:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800891a:	2b15      	cmp	r3, #21
 800891c:	d8f6      	bhi.n	800890c <_printf_i+0x28>
 800891e:	a101      	add	r1, pc, #4	; (adr r1, 8008924 <_printf_i+0x40>)
 8008920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008924:	0800897d 	.word	0x0800897d
 8008928:	08008991 	.word	0x08008991
 800892c:	0800890d 	.word	0x0800890d
 8008930:	0800890d 	.word	0x0800890d
 8008934:	0800890d 	.word	0x0800890d
 8008938:	0800890d 	.word	0x0800890d
 800893c:	08008991 	.word	0x08008991
 8008940:	0800890d 	.word	0x0800890d
 8008944:	0800890d 	.word	0x0800890d
 8008948:	0800890d 	.word	0x0800890d
 800894c:	0800890d 	.word	0x0800890d
 8008950:	08008a9d 	.word	0x08008a9d
 8008954:	080089c1 	.word	0x080089c1
 8008958:	08008a7f 	.word	0x08008a7f
 800895c:	0800890d 	.word	0x0800890d
 8008960:	0800890d 	.word	0x0800890d
 8008964:	08008abf 	.word	0x08008abf
 8008968:	0800890d 	.word	0x0800890d
 800896c:	080089c1 	.word	0x080089c1
 8008970:	0800890d 	.word	0x0800890d
 8008974:	0800890d 	.word	0x0800890d
 8008978:	08008a87 	.word	0x08008a87
 800897c:	682b      	ldr	r3, [r5, #0]
 800897e:	1d1a      	adds	r2, r3, #4
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	602a      	str	r2, [r5, #0]
 8008984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800898c:	2301      	movs	r3, #1
 800898e:	e0a3      	b.n	8008ad8 <_printf_i+0x1f4>
 8008990:	6820      	ldr	r0, [r4, #0]
 8008992:	6829      	ldr	r1, [r5, #0]
 8008994:	0606      	lsls	r6, r0, #24
 8008996:	f101 0304 	add.w	r3, r1, #4
 800899a:	d50a      	bpl.n	80089b2 <_printf_i+0xce>
 800899c:	680e      	ldr	r6, [r1, #0]
 800899e:	602b      	str	r3, [r5, #0]
 80089a0:	2e00      	cmp	r6, #0
 80089a2:	da03      	bge.n	80089ac <_printf_i+0xc8>
 80089a4:	232d      	movs	r3, #45	; 0x2d
 80089a6:	4276      	negs	r6, r6
 80089a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089ac:	485e      	ldr	r0, [pc, #376]	; (8008b28 <_printf_i+0x244>)
 80089ae:	230a      	movs	r3, #10
 80089b0:	e019      	b.n	80089e6 <_printf_i+0x102>
 80089b2:	680e      	ldr	r6, [r1, #0]
 80089b4:	602b      	str	r3, [r5, #0]
 80089b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089ba:	bf18      	it	ne
 80089bc:	b236      	sxthne	r6, r6
 80089be:	e7ef      	b.n	80089a0 <_printf_i+0xbc>
 80089c0:	682b      	ldr	r3, [r5, #0]
 80089c2:	6820      	ldr	r0, [r4, #0]
 80089c4:	1d19      	adds	r1, r3, #4
 80089c6:	6029      	str	r1, [r5, #0]
 80089c8:	0601      	lsls	r1, r0, #24
 80089ca:	d501      	bpl.n	80089d0 <_printf_i+0xec>
 80089cc:	681e      	ldr	r6, [r3, #0]
 80089ce:	e002      	b.n	80089d6 <_printf_i+0xf2>
 80089d0:	0646      	lsls	r6, r0, #25
 80089d2:	d5fb      	bpl.n	80089cc <_printf_i+0xe8>
 80089d4:	881e      	ldrh	r6, [r3, #0]
 80089d6:	4854      	ldr	r0, [pc, #336]	; (8008b28 <_printf_i+0x244>)
 80089d8:	2f6f      	cmp	r7, #111	; 0x6f
 80089da:	bf0c      	ite	eq
 80089dc:	2308      	moveq	r3, #8
 80089de:	230a      	movne	r3, #10
 80089e0:	2100      	movs	r1, #0
 80089e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089e6:	6865      	ldr	r5, [r4, #4]
 80089e8:	60a5      	str	r5, [r4, #8]
 80089ea:	2d00      	cmp	r5, #0
 80089ec:	bfa2      	ittt	ge
 80089ee:	6821      	ldrge	r1, [r4, #0]
 80089f0:	f021 0104 	bicge.w	r1, r1, #4
 80089f4:	6021      	strge	r1, [r4, #0]
 80089f6:	b90e      	cbnz	r6, 80089fc <_printf_i+0x118>
 80089f8:	2d00      	cmp	r5, #0
 80089fa:	d04d      	beq.n	8008a98 <_printf_i+0x1b4>
 80089fc:	4615      	mov	r5, r2
 80089fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a02:	fb03 6711 	mls	r7, r3, r1, r6
 8008a06:	5dc7      	ldrb	r7, [r0, r7]
 8008a08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a0c:	4637      	mov	r7, r6
 8008a0e:	42bb      	cmp	r3, r7
 8008a10:	460e      	mov	r6, r1
 8008a12:	d9f4      	bls.n	80089fe <_printf_i+0x11a>
 8008a14:	2b08      	cmp	r3, #8
 8008a16:	d10b      	bne.n	8008a30 <_printf_i+0x14c>
 8008a18:	6823      	ldr	r3, [r4, #0]
 8008a1a:	07de      	lsls	r6, r3, #31
 8008a1c:	d508      	bpl.n	8008a30 <_printf_i+0x14c>
 8008a1e:	6923      	ldr	r3, [r4, #16]
 8008a20:	6861      	ldr	r1, [r4, #4]
 8008a22:	4299      	cmp	r1, r3
 8008a24:	bfde      	ittt	le
 8008a26:	2330      	movle	r3, #48	; 0x30
 8008a28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a30:	1b52      	subs	r2, r2, r5
 8008a32:	6122      	str	r2, [r4, #16]
 8008a34:	f8cd a000 	str.w	sl, [sp]
 8008a38:	464b      	mov	r3, r9
 8008a3a:	aa03      	add	r2, sp, #12
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	4640      	mov	r0, r8
 8008a40:	f7ff fee2 	bl	8008808 <_printf_common>
 8008a44:	3001      	adds	r0, #1
 8008a46:	d14c      	bne.n	8008ae2 <_printf_i+0x1fe>
 8008a48:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4c:	b004      	add	sp, #16
 8008a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a52:	4835      	ldr	r0, [pc, #212]	; (8008b28 <_printf_i+0x244>)
 8008a54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a58:	6829      	ldr	r1, [r5, #0]
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a60:	6029      	str	r1, [r5, #0]
 8008a62:	061d      	lsls	r5, r3, #24
 8008a64:	d514      	bpl.n	8008a90 <_printf_i+0x1ac>
 8008a66:	07df      	lsls	r7, r3, #31
 8008a68:	bf44      	itt	mi
 8008a6a:	f043 0320 	orrmi.w	r3, r3, #32
 8008a6e:	6023      	strmi	r3, [r4, #0]
 8008a70:	b91e      	cbnz	r6, 8008a7a <_printf_i+0x196>
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	f023 0320 	bic.w	r3, r3, #32
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	2310      	movs	r3, #16
 8008a7c:	e7b0      	b.n	80089e0 <_printf_i+0xfc>
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	f043 0320 	orr.w	r3, r3, #32
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	2378      	movs	r3, #120	; 0x78
 8008a88:	4828      	ldr	r0, [pc, #160]	; (8008b2c <_printf_i+0x248>)
 8008a8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a8e:	e7e3      	b.n	8008a58 <_printf_i+0x174>
 8008a90:	0659      	lsls	r1, r3, #25
 8008a92:	bf48      	it	mi
 8008a94:	b2b6      	uxthmi	r6, r6
 8008a96:	e7e6      	b.n	8008a66 <_printf_i+0x182>
 8008a98:	4615      	mov	r5, r2
 8008a9a:	e7bb      	b.n	8008a14 <_printf_i+0x130>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	6826      	ldr	r6, [r4, #0]
 8008aa0:	6961      	ldr	r1, [r4, #20]
 8008aa2:	1d18      	adds	r0, r3, #4
 8008aa4:	6028      	str	r0, [r5, #0]
 8008aa6:	0635      	lsls	r5, r6, #24
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	d501      	bpl.n	8008ab0 <_printf_i+0x1cc>
 8008aac:	6019      	str	r1, [r3, #0]
 8008aae:	e002      	b.n	8008ab6 <_printf_i+0x1d2>
 8008ab0:	0670      	lsls	r0, r6, #25
 8008ab2:	d5fb      	bpl.n	8008aac <_printf_i+0x1c8>
 8008ab4:	8019      	strh	r1, [r3, #0]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	6123      	str	r3, [r4, #16]
 8008aba:	4615      	mov	r5, r2
 8008abc:	e7ba      	b.n	8008a34 <_printf_i+0x150>
 8008abe:	682b      	ldr	r3, [r5, #0]
 8008ac0:	1d1a      	adds	r2, r3, #4
 8008ac2:	602a      	str	r2, [r5, #0]
 8008ac4:	681d      	ldr	r5, [r3, #0]
 8008ac6:	6862      	ldr	r2, [r4, #4]
 8008ac8:	2100      	movs	r1, #0
 8008aca:	4628      	mov	r0, r5
 8008acc:	f7f7 fb88 	bl	80001e0 <memchr>
 8008ad0:	b108      	cbz	r0, 8008ad6 <_printf_i+0x1f2>
 8008ad2:	1b40      	subs	r0, r0, r5
 8008ad4:	6060      	str	r0, [r4, #4]
 8008ad6:	6863      	ldr	r3, [r4, #4]
 8008ad8:	6123      	str	r3, [r4, #16]
 8008ada:	2300      	movs	r3, #0
 8008adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ae0:	e7a8      	b.n	8008a34 <_printf_i+0x150>
 8008ae2:	6923      	ldr	r3, [r4, #16]
 8008ae4:	462a      	mov	r2, r5
 8008ae6:	4649      	mov	r1, r9
 8008ae8:	4640      	mov	r0, r8
 8008aea:	47d0      	blx	sl
 8008aec:	3001      	adds	r0, #1
 8008aee:	d0ab      	beq.n	8008a48 <_printf_i+0x164>
 8008af0:	6823      	ldr	r3, [r4, #0]
 8008af2:	079b      	lsls	r3, r3, #30
 8008af4:	d413      	bmi.n	8008b1e <_printf_i+0x23a>
 8008af6:	68e0      	ldr	r0, [r4, #12]
 8008af8:	9b03      	ldr	r3, [sp, #12]
 8008afa:	4298      	cmp	r0, r3
 8008afc:	bfb8      	it	lt
 8008afe:	4618      	movlt	r0, r3
 8008b00:	e7a4      	b.n	8008a4c <_printf_i+0x168>
 8008b02:	2301      	movs	r3, #1
 8008b04:	4632      	mov	r2, r6
 8008b06:	4649      	mov	r1, r9
 8008b08:	4640      	mov	r0, r8
 8008b0a:	47d0      	blx	sl
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d09b      	beq.n	8008a48 <_printf_i+0x164>
 8008b10:	3501      	adds	r5, #1
 8008b12:	68e3      	ldr	r3, [r4, #12]
 8008b14:	9903      	ldr	r1, [sp, #12]
 8008b16:	1a5b      	subs	r3, r3, r1
 8008b18:	42ab      	cmp	r3, r5
 8008b1a:	dcf2      	bgt.n	8008b02 <_printf_i+0x21e>
 8008b1c:	e7eb      	b.n	8008af6 <_printf_i+0x212>
 8008b1e:	2500      	movs	r5, #0
 8008b20:	f104 0619 	add.w	r6, r4, #25
 8008b24:	e7f5      	b.n	8008b12 <_printf_i+0x22e>
 8008b26:	bf00      	nop
 8008b28:	0800c422 	.word	0x0800c422
 8008b2c:	0800c433 	.word	0x0800c433

08008b30 <sniprintf>:
 8008b30:	b40c      	push	{r2, r3}
 8008b32:	b530      	push	{r4, r5, lr}
 8008b34:	4b17      	ldr	r3, [pc, #92]	; (8008b94 <sniprintf+0x64>)
 8008b36:	1e0c      	subs	r4, r1, #0
 8008b38:	681d      	ldr	r5, [r3, #0]
 8008b3a:	b09d      	sub	sp, #116	; 0x74
 8008b3c:	da08      	bge.n	8008b50 <sniprintf+0x20>
 8008b3e:	238b      	movs	r3, #139	; 0x8b
 8008b40:	602b      	str	r3, [r5, #0]
 8008b42:	f04f 30ff 	mov.w	r0, #4294967295
 8008b46:	b01d      	add	sp, #116	; 0x74
 8008b48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b4c:	b002      	add	sp, #8
 8008b4e:	4770      	bx	lr
 8008b50:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b58:	bf14      	ite	ne
 8008b5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b5e:	4623      	moveq	r3, r4
 8008b60:	9304      	str	r3, [sp, #16]
 8008b62:	9307      	str	r3, [sp, #28]
 8008b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b68:	9002      	str	r0, [sp, #8]
 8008b6a:	9006      	str	r0, [sp, #24]
 8008b6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008b72:	ab21      	add	r3, sp, #132	; 0x84
 8008b74:	a902      	add	r1, sp, #8
 8008b76:	4628      	mov	r0, r5
 8008b78:	9301      	str	r3, [sp, #4]
 8008b7a:	f001 fb89 	bl	800a290 <_svfiprintf_r>
 8008b7e:	1c43      	adds	r3, r0, #1
 8008b80:	bfbc      	itt	lt
 8008b82:	238b      	movlt	r3, #139	; 0x8b
 8008b84:	602b      	strlt	r3, [r5, #0]
 8008b86:	2c00      	cmp	r4, #0
 8008b88:	d0dd      	beq.n	8008b46 <sniprintf+0x16>
 8008b8a:	9b02      	ldr	r3, [sp, #8]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	701a      	strb	r2, [r3, #0]
 8008b90:	e7d9      	b.n	8008b46 <sniprintf+0x16>
 8008b92:	bf00      	nop
 8008b94:	20000010 	.word	0x20000010

08008b98 <siprintf>:
 8008b98:	b40e      	push	{r1, r2, r3}
 8008b9a:	b500      	push	{lr}
 8008b9c:	b09c      	sub	sp, #112	; 0x70
 8008b9e:	ab1d      	add	r3, sp, #116	; 0x74
 8008ba0:	9002      	str	r0, [sp, #8]
 8008ba2:	9006      	str	r0, [sp, #24]
 8008ba4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ba8:	4809      	ldr	r0, [pc, #36]	; (8008bd0 <siprintf+0x38>)
 8008baa:	9107      	str	r1, [sp, #28]
 8008bac:	9104      	str	r1, [sp, #16]
 8008bae:	4909      	ldr	r1, [pc, #36]	; (8008bd4 <siprintf+0x3c>)
 8008bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bb4:	9105      	str	r1, [sp, #20]
 8008bb6:	6800      	ldr	r0, [r0, #0]
 8008bb8:	9301      	str	r3, [sp, #4]
 8008bba:	a902      	add	r1, sp, #8
 8008bbc:	f001 fb68 	bl	800a290 <_svfiprintf_r>
 8008bc0:	9b02      	ldr	r3, [sp, #8]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	701a      	strb	r2, [r3, #0]
 8008bc6:	b01c      	add	sp, #112	; 0x70
 8008bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bcc:	b003      	add	sp, #12
 8008bce:	4770      	bx	lr
 8008bd0:	20000010 	.word	0x20000010
 8008bd4:	ffff0208 	.word	0xffff0208

08008bd8 <quorem>:
 8008bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bdc:	6903      	ldr	r3, [r0, #16]
 8008bde:	690c      	ldr	r4, [r1, #16]
 8008be0:	42a3      	cmp	r3, r4
 8008be2:	4607      	mov	r7, r0
 8008be4:	f2c0 8081 	blt.w	8008cea <quorem+0x112>
 8008be8:	3c01      	subs	r4, #1
 8008bea:	f101 0814 	add.w	r8, r1, #20
 8008bee:	f100 0514 	add.w	r5, r0, #20
 8008bf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bf6:	9301      	str	r3, [sp, #4]
 8008bf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008bfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c00:	3301      	adds	r3, #1
 8008c02:	429a      	cmp	r2, r3
 8008c04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c10:	d331      	bcc.n	8008c76 <quorem+0x9e>
 8008c12:	f04f 0e00 	mov.w	lr, #0
 8008c16:	4640      	mov	r0, r8
 8008c18:	46ac      	mov	ip, r5
 8008c1a:	46f2      	mov	sl, lr
 8008c1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c20:	b293      	uxth	r3, r2
 8008c22:	fb06 e303 	mla	r3, r6, r3, lr
 8008c26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	ebaa 0303 	sub.w	r3, sl, r3
 8008c30:	f8dc a000 	ldr.w	sl, [ip]
 8008c34:	0c12      	lsrs	r2, r2, #16
 8008c36:	fa13 f38a 	uxtah	r3, r3, sl
 8008c3a:	fb06 e202 	mla	r2, r6, r2, lr
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	9b00      	ldr	r3, [sp, #0]
 8008c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c46:	b292      	uxth	r2, r2
 8008c48:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c50:	f8bd 3000 	ldrh.w	r3, [sp]
 8008c54:	4581      	cmp	r9, r0
 8008c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c5a:	f84c 3b04 	str.w	r3, [ip], #4
 8008c5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c62:	d2db      	bcs.n	8008c1c <quorem+0x44>
 8008c64:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c68:	b92b      	cbnz	r3, 8008c76 <quorem+0x9e>
 8008c6a:	9b01      	ldr	r3, [sp, #4]
 8008c6c:	3b04      	subs	r3, #4
 8008c6e:	429d      	cmp	r5, r3
 8008c70:	461a      	mov	r2, r3
 8008c72:	d32e      	bcc.n	8008cd2 <quorem+0xfa>
 8008c74:	613c      	str	r4, [r7, #16]
 8008c76:	4638      	mov	r0, r7
 8008c78:	f001 f8b6 	bl	8009de8 <__mcmp>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	db24      	blt.n	8008cca <quorem+0xf2>
 8008c80:	3601      	adds	r6, #1
 8008c82:	4628      	mov	r0, r5
 8008c84:	f04f 0c00 	mov.w	ip, #0
 8008c88:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c8c:	f8d0 e000 	ldr.w	lr, [r0]
 8008c90:	b293      	uxth	r3, r2
 8008c92:	ebac 0303 	sub.w	r3, ip, r3
 8008c96:	0c12      	lsrs	r2, r2, #16
 8008c98:	fa13 f38e 	uxtah	r3, r3, lr
 8008c9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ca0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008caa:	45c1      	cmp	r9, r8
 8008cac:	f840 3b04 	str.w	r3, [r0], #4
 8008cb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008cb4:	d2e8      	bcs.n	8008c88 <quorem+0xb0>
 8008cb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cbe:	b922      	cbnz	r2, 8008cca <quorem+0xf2>
 8008cc0:	3b04      	subs	r3, #4
 8008cc2:	429d      	cmp	r5, r3
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	d30a      	bcc.n	8008cde <quorem+0x106>
 8008cc8:	613c      	str	r4, [r7, #16]
 8008cca:	4630      	mov	r0, r6
 8008ccc:	b003      	add	sp, #12
 8008cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd2:	6812      	ldr	r2, [r2, #0]
 8008cd4:	3b04      	subs	r3, #4
 8008cd6:	2a00      	cmp	r2, #0
 8008cd8:	d1cc      	bne.n	8008c74 <quorem+0x9c>
 8008cda:	3c01      	subs	r4, #1
 8008cdc:	e7c7      	b.n	8008c6e <quorem+0x96>
 8008cde:	6812      	ldr	r2, [r2, #0]
 8008ce0:	3b04      	subs	r3, #4
 8008ce2:	2a00      	cmp	r2, #0
 8008ce4:	d1f0      	bne.n	8008cc8 <quorem+0xf0>
 8008ce6:	3c01      	subs	r4, #1
 8008ce8:	e7eb      	b.n	8008cc2 <quorem+0xea>
 8008cea:	2000      	movs	r0, #0
 8008cec:	e7ee      	b.n	8008ccc <quorem+0xf4>
	...

08008cf0 <_dtoa_r>:
 8008cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf4:	ed2d 8b04 	vpush	{d8-d9}
 8008cf8:	ec57 6b10 	vmov	r6, r7, d0
 8008cfc:	b093      	sub	sp, #76	; 0x4c
 8008cfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008d04:	9106      	str	r1, [sp, #24]
 8008d06:	ee10 aa10 	vmov	sl, s0
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d0e:	930c      	str	r3, [sp, #48]	; 0x30
 8008d10:	46bb      	mov	fp, r7
 8008d12:	b975      	cbnz	r5, 8008d32 <_dtoa_r+0x42>
 8008d14:	2010      	movs	r0, #16
 8008d16:	f000 fddd 	bl	80098d4 <malloc>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	6260      	str	r0, [r4, #36]	; 0x24
 8008d1e:	b920      	cbnz	r0, 8008d2a <_dtoa_r+0x3a>
 8008d20:	4ba7      	ldr	r3, [pc, #668]	; (8008fc0 <_dtoa_r+0x2d0>)
 8008d22:	21ea      	movs	r1, #234	; 0xea
 8008d24:	48a7      	ldr	r0, [pc, #668]	; (8008fc4 <_dtoa_r+0x2d4>)
 8008d26:	f001 fbc3 	bl	800a4b0 <__assert_func>
 8008d2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d2e:	6005      	str	r5, [r0, #0]
 8008d30:	60c5      	str	r5, [r0, #12]
 8008d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d34:	6819      	ldr	r1, [r3, #0]
 8008d36:	b151      	cbz	r1, 8008d4e <_dtoa_r+0x5e>
 8008d38:	685a      	ldr	r2, [r3, #4]
 8008d3a:	604a      	str	r2, [r1, #4]
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	4093      	lsls	r3, r2
 8008d40:	608b      	str	r3, [r1, #8]
 8008d42:	4620      	mov	r0, r4
 8008d44:	f000 fe0e 	bl	8009964 <_Bfree>
 8008d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	601a      	str	r2, [r3, #0]
 8008d4e:	1e3b      	subs	r3, r7, #0
 8008d50:	bfaa      	itet	ge
 8008d52:	2300      	movge	r3, #0
 8008d54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008d58:	f8c8 3000 	strge.w	r3, [r8]
 8008d5c:	4b9a      	ldr	r3, [pc, #616]	; (8008fc8 <_dtoa_r+0x2d8>)
 8008d5e:	bfbc      	itt	lt
 8008d60:	2201      	movlt	r2, #1
 8008d62:	f8c8 2000 	strlt.w	r2, [r8]
 8008d66:	ea33 030b 	bics.w	r3, r3, fp
 8008d6a:	d11b      	bne.n	8008da4 <_dtoa_r+0xb4>
 8008d6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d72:	6013      	str	r3, [r2, #0]
 8008d74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d78:	4333      	orrs	r3, r6
 8008d7a:	f000 8592 	beq.w	80098a2 <_dtoa_r+0xbb2>
 8008d7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d80:	b963      	cbnz	r3, 8008d9c <_dtoa_r+0xac>
 8008d82:	4b92      	ldr	r3, [pc, #584]	; (8008fcc <_dtoa_r+0x2dc>)
 8008d84:	e022      	b.n	8008dcc <_dtoa_r+0xdc>
 8008d86:	4b92      	ldr	r3, [pc, #584]	; (8008fd0 <_dtoa_r+0x2e0>)
 8008d88:	9301      	str	r3, [sp, #4]
 8008d8a:	3308      	adds	r3, #8
 8008d8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d8e:	6013      	str	r3, [r2, #0]
 8008d90:	9801      	ldr	r0, [sp, #4]
 8008d92:	b013      	add	sp, #76	; 0x4c
 8008d94:	ecbd 8b04 	vpop	{d8-d9}
 8008d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9c:	4b8b      	ldr	r3, [pc, #556]	; (8008fcc <_dtoa_r+0x2dc>)
 8008d9e:	9301      	str	r3, [sp, #4]
 8008da0:	3303      	adds	r3, #3
 8008da2:	e7f3      	b.n	8008d8c <_dtoa_r+0x9c>
 8008da4:	2200      	movs	r2, #0
 8008da6:	2300      	movs	r3, #0
 8008da8:	4650      	mov	r0, sl
 8008daa:	4659      	mov	r1, fp
 8008dac:	f7f7 fe8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008db0:	ec4b ab19 	vmov	d9, sl, fp
 8008db4:	4680      	mov	r8, r0
 8008db6:	b158      	cbz	r0, 8008dd0 <_dtoa_r+0xe0>
 8008db8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dba:	2301      	movs	r3, #1
 8008dbc:	6013      	str	r3, [r2, #0]
 8008dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 856b 	beq.w	800989c <_dtoa_r+0xbac>
 8008dc6:	4883      	ldr	r0, [pc, #524]	; (8008fd4 <_dtoa_r+0x2e4>)
 8008dc8:	6018      	str	r0, [r3, #0]
 8008dca:	1e43      	subs	r3, r0, #1
 8008dcc:	9301      	str	r3, [sp, #4]
 8008dce:	e7df      	b.n	8008d90 <_dtoa_r+0xa0>
 8008dd0:	ec4b ab10 	vmov	d0, sl, fp
 8008dd4:	aa10      	add	r2, sp, #64	; 0x40
 8008dd6:	a911      	add	r1, sp, #68	; 0x44
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f001 f8ab 	bl	8009f34 <__d2b>
 8008dde:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008de2:	ee08 0a10 	vmov	s16, r0
 8008de6:	2d00      	cmp	r5, #0
 8008de8:	f000 8084 	beq.w	8008ef4 <_dtoa_r+0x204>
 8008dec:	ee19 3a90 	vmov	r3, s19
 8008df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008df4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008df8:	4656      	mov	r6, sl
 8008dfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008dfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008e02:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008e06:	4b74      	ldr	r3, [pc, #464]	; (8008fd8 <_dtoa_r+0x2e8>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	4639      	mov	r1, r7
 8008e0e:	f7f7 fa3b 	bl	8000288 <__aeabi_dsub>
 8008e12:	a365      	add	r3, pc, #404	; (adr r3, 8008fa8 <_dtoa_r+0x2b8>)
 8008e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e18:	f7f7 fbee 	bl	80005f8 <__aeabi_dmul>
 8008e1c:	a364      	add	r3, pc, #400	; (adr r3, 8008fb0 <_dtoa_r+0x2c0>)
 8008e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e22:	f7f7 fa33 	bl	800028c <__adddf3>
 8008e26:	4606      	mov	r6, r0
 8008e28:	4628      	mov	r0, r5
 8008e2a:	460f      	mov	r7, r1
 8008e2c:	f7f7 fb7a 	bl	8000524 <__aeabi_i2d>
 8008e30:	a361      	add	r3, pc, #388	; (adr r3, 8008fb8 <_dtoa_r+0x2c8>)
 8008e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e36:	f7f7 fbdf 	bl	80005f8 <__aeabi_dmul>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	4630      	mov	r0, r6
 8008e40:	4639      	mov	r1, r7
 8008e42:	f7f7 fa23 	bl	800028c <__adddf3>
 8008e46:	4606      	mov	r6, r0
 8008e48:	460f      	mov	r7, r1
 8008e4a:	f7f7 fe85 	bl	8000b58 <__aeabi_d2iz>
 8008e4e:	2200      	movs	r2, #0
 8008e50:	9000      	str	r0, [sp, #0]
 8008e52:	2300      	movs	r3, #0
 8008e54:	4630      	mov	r0, r6
 8008e56:	4639      	mov	r1, r7
 8008e58:	f7f7 fe40 	bl	8000adc <__aeabi_dcmplt>
 8008e5c:	b150      	cbz	r0, 8008e74 <_dtoa_r+0x184>
 8008e5e:	9800      	ldr	r0, [sp, #0]
 8008e60:	f7f7 fb60 	bl	8000524 <__aeabi_i2d>
 8008e64:	4632      	mov	r2, r6
 8008e66:	463b      	mov	r3, r7
 8008e68:	f7f7 fe2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e6c:	b910      	cbnz	r0, 8008e74 <_dtoa_r+0x184>
 8008e6e:	9b00      	ldr	r3, [sp, #0]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	9b00      	ldr	r3, [sp, #0]
 8008e76:	2b16      	cmp	r3, #22
 8008e78:	d85a      	bhi.n	8008f30 <_dtoa_r+0x240>
 8008e7a:	9a00      	ldr	r2, [sp, #0]
 8008e7c:	4b57      	ldr	r3, [pc, #348]	; (8008fdc <_dtoa_r+0x2ec>)
 8008e7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e86:	ec51 0b19 	vmov	r0, r1, d9
 8008e8a:	f7f7 fe27 	bl	8000adc <__aeabi_dcmplt>
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d050      	beq.n	8008f34 <_dtoa_r+0x244>
 8008e92:	9b00      	ldr	r3, [sp, #0]
 8008e94:	3b01      	subs	r3, #1
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	2300      	movs	r3, #0
 8008e9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e9e:	1b5d      	subs	r5, r3, r5
 8008ea0:	1e6b      	subs	r3, r5, #1
 8008ea2:	9305      	str	r3, [sp, #20]
 8008ea4:	bf45      	ittet	mi
 8008ea6:	f1c5 0301 	rsbmi	r3, r5, #1
 8008eaa:	9304      	strmi	r3, [sp, #16]
 8008eac:	2300      	movpl	r3, #0
 8008eae:	2300      	movmi	r3, #0
 8008eb0:	bf4c      	ite	mi
 8008eb2:	9305      	strmi	r3, [sp, #20]
 8008eb4:	9304      	strpl	r3, [sp, #16]
 8008eb6:	9b00      	ldr	r3, [sp, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	db3d      	blt.n	8008f38 <_dtoa_r+0x248>
 8008ebc:	9b05      	ldr	r3, [sp, #20]
 8008ebe:	9a00      	ldr	r2, [sp, #0]
 8008ec0:	920a      	str	r2, [sp, #40]	; 0x28
 8008ec2:	4413      	add	r3, r2
 8008ec4:	9305      	str	r3, [sp, #20]
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	9307      	str	r3, [sp, #28]
 8008eca:	9b06      	ldr	r3, [sp, #24]
 8008ecc:	2b09      	cmp	r3, #9
 8008ece:	f200 8089 	bhi.w	8008fe4 <_dtoa_r+0x2f4>
 8008ed2:	2b05      	cmp	r3, #5
 8008ed4:	bfc4      	itt	gt
 8008ed6:	3b04      	subgt	r3, #4
 8008ed8:	9306      	strgt	r3, [sp, #24]
 8008eda:	9b06      	ldr	r3, [sp, #24]
 8008edc:	f1a3 0302 	sub.w	r3, r3, #2
 8008ee0:	bfcc      	ite	gt
 8008ee2:	2500      	movgt	r5, #0
 8008ee4:	2501      	movle	r5, #1
 8008ee6:	2b03      	cmp	r3, #3
 8008ee8:	f200 8087 	bhi.w	8008ffa <_dtoa_r+0x30a>
 8008eec:	e8df f003 	tbb	[pc, r3]
 8008ef0:	59383a2d 	.word	0x59383a2d
 8008ef4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008ef8:	441d      	add	r5, r3
 8008efa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008efe:	2b20      	cmp	r3, #32
 8008f00:	bfc1      	itttt	gt
 8008f02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008f0a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008f0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008f12:	bfda      	itte	le
 8008f14:	f1c3 0320 	rsble	r3, r3, #32
 8008f18:	fa06 f003 	lslle.w	r0, r6, r3
 8008f1c:	4318      	orrgt	r0, r3
 8008f1e:	f7f7 faf1 	bl	8000504 <__aeabi_ui2d>
 8008f22:	2301      	movs	r3, #1
 8008f24:	4606      	mov	r6, r0
 8008f26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008f2a:	3d01      	subs	r5, #1
 8008f2c:	930e      	str	r3, [sp, #56]	; 0x38
 8008f2e:	e76a      	b.n	8008e06 <_dtoa_r+0x116>
 8008f30:	2301      	movs	r3, #1
 8008f32:	e7b2      	b.n	8008e9a <_dtoa_r+0x1aa>
 8008f34:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f36:	e7b1      	b.n	8008e9c <_dtoa_r+0x1ac>
 8008f38:	9b04      	ldr	r3, [sp, #16]
 8008f3a:	9a00      	ldr	r2, [sp, #0]
 8008f3c:	1a9b      	subs	r3, r3, r2
 8008f3e:	9304      	str	r3, [sp, #16]
 8008f40:	4253      	negs	r3, r2
 8008f42:	9307      	str	r3, [sp, #28]
 8008f44:	2300      	movs	r3, #0
 8008f46:	930a      	str	r3, [sp, #40]	; 0x28
 8008f48:	e7bf      	b.n	8008eca <_dtoa_r+0x1da>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	9308      	str	r3, [sp, #32]
 8008f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	dc55      	bgt.n	8009000 <_dtoa_r+0x310>
 8008f54:	2301      	movs	r3, #1
 8008f56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8008f5e:	e00c      	b.n	8008f7a <_dtoa_r+0x28a>
 8008f60:	2301      	movs	r3, #1
 8008f62:	e7f3      	b.n	8008f4c <_dtoa_r+0x25c>
 8008f64:	2300      	movs	r3, #0
 8008f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f68:	9308      	str	r3, [sp, #32]
 8008f6a:	9b00      	ldr	r3, [sp, #0]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	9302      	str	r3, [sp, #8]
 8008f70:	3301      	adds	r3, #1
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	9303      	str	r3, [sp, #12]
 8008f76:	bfb8      	it	lt
 8008f78:	2301      	movlt	r3, #1
 8008f7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	6042      	str	r2, [r0, #4]
 8008f80:	2204      	movs	r2, #4
 8008f82:	f102 0614 	add.w	r6, r2, #20
 8008f86:	429e      	cmp	r6, r3
 8008f88:	6841      	ldr	r1, [r0, #4]
 8008f8a:	d93d      	bls.n	8009008 <_dtoa_r+0x318>
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f000 fca9 	bl	80098e4 <_Balloc>
 8008f92:	9001      	str	r0, [sp, #4]
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d13b      	bne.n	8009010 <_dtoa_r+0x320>
 8008f98:	4b11      	ldr	r3, [pc, #68]	; (8008fe0 <_dtoa_r+0x2f0>)
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008fa0:	e6c0      	b.n	8008d24 <_dtoa_r+0x34>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e7df      	b.n	8008f66 <_dtoa_r+0x276>
 8008fa6:	bf00      	nop
 8008fa8:	636f4361 	.word	0x636f4361
 8008fac:	3fd287a7 	.word	0x3fd287a7
 8008fb0:	8b60c8b3 	.word	0x8b60c8b3
 8008fb4:	3fc68a28 	.word	0x3fc68a28
 8008fb8:	509f79fb 	.word	0x509f79fb
 8008fbc:	3fd34413 	.word	0x3fd34413
 8008fc0:	0800c451 	.word	0x0800c451
 8008fc4:	0800c468 	.word	0x0800c468
 8008fc8:	7ff00000 	.word	0x7ff00000
 8008fcc:	0800c44d 	.word	0x0800c44d
 8008fd0:	0800c444 	.word	0x0800c444
 8008fd4:	0800c421 	.word	0x0800c421
 8008fd8:	3ff80000 	.word	0x3ff80000
 8008fdc:	0800c558 	.word	0x0800c558
 8008fe0:	0800c4c3 	.word	0x0800c4c3
 8008fe4:	2501      	movs	r5, #1
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	9306      	str	r3, [sp, #24]
 8008fea:	9508      	str	r5, [sp, #32]
 8008fec:	f04f 33ff 	mov.w	r3, #4294967295
 8008ff0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	2312      	movs	r3, #18
 8008ff8:	e7b0      	b.n	8008f5c <_dtoa_r+0x26c>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	9308      	str	r3, [sp, #32]
 8008ffe:	e7f5      	b.n	8008fec <_dtoa_r+0x2fc>
 8009000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009002:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009006:	e7b8      	b.n	8008f7a <_dtoa_r+0x28a>
 8009008:	3101      	adds	r1, #1
 800900a:	6041      	str	r1, [r0, #4]
 800900c:	0052      	lsls	r2, r2, #1
 800900e:	e7b8      	b.n	8008f82 <_dtoa_r+0x292>
 8009010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009012:	9a01      	ldr	r2, [sp, #4]
 8009014:	601a      	str	r2, [r3, #0]
 8009016:	9b03      	ldr	r3, [sp, #12]
 8009018:	2b0e      	cmp	r3, #14
 800901a:	f200 809d 	bhi.w	8009158 <_dtoa_r+0x468>
 800901e:	2d00      	cmp	r5, #0
 8009020:	f000 809a 	beq.w	8009158 <_dtoa_r+0x468>
 8009024:	9b00      	ldr	r3, [sp, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	dd32      	ble.n	8009090 <_dtoa_r+0x3a0>
 800902a:	4ab7      	ldr	r2, [pc, #732]	; (8009308 <_dtoa_r+0x618>)
 800902c:	f003 030f 	and.w	r3, r3, #15
 8009030:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009034:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009038:	9b00      	ldr	r3, [sp, #0]
 800903a:	05d8      	lsls	r0, r3, #23
 800903c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009040:	d516      	bpl.n	8009070 <_dtoa_r+0x380>
 8009042:	4bb2      	ldr	r3, [pc, #712]	; (800930c <_dtoa_r+0x61c>)
 8009044:	ec51 0b19 	vmov	r0, r1, d9
 8009048:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800904c:	f7f7 fbfe 	bl	800084c <__aeabi_ddiv>
 8009050:	f007 070f 	and.w	r7, r7, #15
 8009054:	4682      	mov	sl, r0
 8009056:	468b      	mov	fp, r1
 8009058:	2503      	movs	r5, #3
 800905a:	4eac      	ldr	r6, [pc, #688]	; (800930c <_dtoa_r+0x61c>)
 800905c:	b957      	cbnz	r7, 8009074 <_dtoa_r+0x384>
 800905e:	4642      	mov	r2, r8
 8009060:	464b      	mov	r3, r9
 8009062:	4650      	mov	r0, sl
 8009064:	4659      	mov	r1, fp
 8009066:	f7f7 fbf1 	bl	800084c <__aeabi_ddiv>
 800906a:	4682      	mov	sl, r0
 800906c:	468b      	mov	fp, r1
 800906e:	e028      	b.n	80090c2 <_dtoa_r+0x3d2>
 8009070:	2502      	movs	r5, #2
 8009072:	e7f2      	b.n	800905a <_dtoa_r+0x36a>
 8009074:	07f9      	lsls	r1, r7, #31
 8009076:	d508      	bpl.n	800908a <_dtoa_r+0x39a>
 8009078:	4640      	mov	r0, r8
 800907a:	4649      	mov	r1, r9
 800907c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009080:	f7f7 faba 	bl	80005f8 <__aeabi_dmul>
 8009084:	3501      	adds	r5, #1
 8009086:	4680      	mov	r8, r0
 8009088:	4689      	mov	r9, r1
 800908a:	107f      	asrs	r7, r7, #1
 800908c:	3608      	adds	r6, #8
 800908e:	e7e5      	b.n	800905c <_dtoa_r+0x36c>
 8009090:	f000 809b 	beq.w	80091ca <_dtoa_r+0x4da>
 8009094:	9b00      	ldr	r3, [sp, #0]
 8009096:	4f9d      	ldr	r7, [pc, #628]	; (800930c <_dtoa_r+0x61c>)
 8009098:	425e      	negs	r6, r3
 800909a:	4b9b      	ldr	r3, [pc, #620]	; (8009308 <_dtoa_r+0x618>)
 800909c:	f006 020f 	and.w	r2, r6, #15
 80090a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a8:	ec51 0b19 	vmov	r0, r1, d9
 80090ac:	f7f7 faa4 	bl	80005f8 <__aeabi_dmul>
 80090b0:	1136      	asrs	r6, r6, #4
 80090b2:	4682      	mov	sl, r0
 80090b4:	468b      	mov	fp, r1
 80090b6:	2300      	movs	r3, #0
 80090b8:	2502      	movs	r5, #2
 80090ba:	2e00      	cmp	r6, #0
 80090bc:	d17a      	bne.n	80091b4 <_dtoa_r+0x4c4>
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1d3      	bne.n	800906a <_dtoa_r+0x37a>
 80090c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f000 8082 	beq.w	80091ce <_dtoa_r+0x4de>
 80090ca:	4b91      	ldr	r3, [pc, #580]	; (8009310 <_dtoa_r+0x620>)
 80090cc:	2200      	movs	r2, #0
 80090ce:	4650      	mov	r0, sl
 80090d0:	4659      	mov	r1, fp
 80090d2:	f7f7 fd03 	bl	8000adc <__aeabi_dcmplt>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d079      	beq.n	80091ce <_dtoa_r+0x4de>
 80090da:	9b03      	ldr	r3, [sp, #12]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d076      	beq.n	80091ce <_dtoa_r+0x4de>
 80090e0:	9b02      	ldr	r3, [sp, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	dd36      	ble.n	8009154 <_dtoa_r+0x464>
 80090e6:	9b00      	ldr	r3, [sp, #0]
 80090e8:	4650      	mov	r0, sl
 80090ea:	4659      	mov	r1, fp
 80090ec:	1e5f      	subs	r7, r3, #1
 80090ee:	2200      	movs	r2, #0
 80090f0:	4b88      	ldr	r3, [pc, #544]	; (8009314 <_dtoa_r+0x624>)
 80090f2:	f7f7 fa81 	bl	80005f8 <__aeabi_dmul>
 80090f6:	9e02      	ldr	r6, [sp, #8]
 80090f8:	4682      	mov	sl, r0
 80090fa:	468b      	mov	fp, r1
 80090fc:	3501      	adds	r5, #1
 80090fe:	4628      	mov	r0, r5
 8009100:	f7f7 fa10 	bl	8000524 <__aeabi_i2d>
 8009104:	4652      	mov	r2, sl
 8009106:	465b      	mov	r3, fp
 8009108:	f7f7 fa76 	bl	80005f8 <__aeabi_dmul>
 800910c:	4b82      	ldr	r3, [pc, #520]	; (8009318 <_dtoa_r+0x628>)
 800910e:	2200      	movs	r2, #0
 8009110:	f7f7 f8bc 	bl	800028c <__adddf3>
 8009114:	46d0      	mov	r8, sl
 8009116:	46d9      	mov	r9, fp
 8009118:	4682      	mov	sl, r0
 800911a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800911e:	2e00      	cmp	r6, #0
 8009120:	d158      	bne.n	80091d4 <_dtoa_r+0x4e4>
 8009122:	4b7e      	ldr	r3, [pc, #504]	; (800931c <_dtoa_r+0x62c>)
 8009124:	2200      	movs	r2, #0
 8009126:	4640      	mov	r0, r8
 8009128:	4649      	mov	r1, r9
 800912a:	f7f7 f8ad 	bl	8000288 <__aeabi_dsub>
 800912e:	4652      	mov	r2, sl
 8009130:	465b      	mov	r3, fp
 8009132:	4680      	mov	r8, r0
 8009134:	4689      	mov	r9, r1
 8009136:	f7f7 fcef 	bl	8000b18 <__aeabi_dcmpgt>
 800913a:	2800      	cmp	r0, #0
 800913c:	f040 8295 	bne.w	800966a <_dtoa_r+0x97a>
 8009140:	4652      	mov	r2, sl
 8009142:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009146:	4640      	mov	r0, r8
 8009148:	4649      	mov	r1, r9
 800914a:	f7f7 fcc7 	bl	8000adc <__aeabi_dcmplt>
 800914e:	2800      	cmp	r0, #0
 8009150:	f040 8289 	bne.w	8009666 <_dtoa_r+0x976>
 8009154:	ec5b ab19 	vmov	sl, fp, d9
 8009158:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800915a:	2b00      	cmp	r3, #0
 800915c:	f2c0 8148 	blt.w	80093f0 <_dtoa_r+0x700>
 8009160:	9a00      	ldr	r2, [sp, #0]
 8009162:	2a0e      	cmp	r2, #14
 8009164:	f300 8144 	bgt.w	80093f0 <_dtoa_r+0x700>
 8009168:	4b67      	ldr	r3, [pc, #412]	; (8009308 <_dtoa_r+0x618>)
 800916a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800916e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009174:	2b00      	cmp	r3, #0
 8009176:	f280 80d5 	bge.w	8009324 <_dtoa_r+0x634>
 800917a:	9b03      	ldr	r3, [sp, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	f300 80d1 	bgt.w	8009324 <_dtoa_r+0x634>
 8009182:	f040 826f 	bne.w	8009664 <_dtoa_r+0x974>
 8009186:	4b65      	ldr	r3, [pc, #404]	; (800931c <_dtoa_r+0x62c>)
 8009188:	2200      	movs	r2, #0
 800918a:	4640      	mov	r0, r8
 800918c:	4649      	mov	r1, r9
 800918e:	f7f7 fa33 	bl	80005f8 <__aeabi_dmul>
 8009192:	4652      	mov	r2, sl
 8009194:	465b      	mov	r3, fp
 8009196:	f7f7 fcb5 	bl	8000b04 <__aeabi_dcmpge>
 800919a:	9e03      	ldr	r6, [sp, #12]
 800919c:	4637      	mov	r7, r6
 800919e:	2800      	cmp	r0, #0
 80091a0:	f040 8245 	bne.w	800962e <_dtoa_r+0x93e>
 80091a4:	9d01      	ldr	r5, [sp, #4]
 80091a6:	2331      	movs	r3, #49	; 0x31
 80091a8:	f805 3b01 	strb.w	r3, [r5], #1
 80091ac:	9b00      	ldr	r3, [sp, #0]
 80091ae:	3301      	adds	r3, #1
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	e240      	b.n	8009636 <_dtoa_r+0x946>
 80091b4:	07f2      	lsls	r2, r6, #31
 80091b6:	d505      	bpl.n	80091c4 <_dtoa_r+0x4d4>
 80091b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091bc:	f7f7 fa1c 	bl	80005f8 <__aeabi_dmul>
 80091c0:	3501      	adds	r5, #1
 80091c2:	2301      	movs	r3, #1
 80091c4:	1076      	asrs	r6, r6, #1
 80091c6:	3708      	adds	r7, #8
 80091c8:	e777      	b.n	80090ba <_dtoa_r+0x3ca>
 80091ca:	2502      	movs	r5, #2
 80091cc:	e779      	b.n	80090c2 <_dtoa_r+0x3d2>
 80091ce:	9f00      	ldr	r7, [sp, #0]
 80091d0:	9e03      	ldr	r6, [sp, #12]
 80091d2:	e794      	b.n	80090fe <_dtoa_r+0x40e>
 80091d4:	9901      	ldr	r1, [sp, #4]
 80091d6:	4b4c      	ldr	r3, [pc, #304]	; (8009308 <_dtoa_r+0x618>)
 80091d8:	4431      	add	r1, r6
 80091da:	910d      	str	r1, [sp, #52]	; 0x34
 80091dc:	9908      	ldr	r1, [sp, #32]
 80091de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80091e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091e6:	2900      	cmp	r1, #0
 80091e8:	d043      	beq.n	8009272 <_dtoa_r+0x582>
 80091ea:	494d      	ldr	r1, [pc, #308]	; (8009320 <_dtoa_r+0x630>)
 80091ec:	2000      	movs	r0, #0
 80091ee:	f7f7 fb2d 	bl	800084c <__aeabi_ddiv>
 80091f2:	4652      	mov	r2, sl
 80091f4:	465b      	mov	r3, fp
 80091f6:	f7f7 f847 	bl	8000288 <__aeabi_dsub>
 80091fa:	9d01      	ldr	r5, [sp, #4]
 80091fc:	4682      	mov	sl, r0
 80091fe:	468b      	mov	fp, r1
 8009200:	4649      	mov	r1, r9
 8009202:	4640      	mov	r0, r8
 8009204:	f7f7 fca8 	bl	8000b58 <__aeabi_d2iz>
 8009208:	4606      	mov	r6, r0
 800920a:	f7f7 f98b 	bl	8000524 <__aeabi_i2d>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	4640      	mov	r0, r8
 8009214:	4649      	mov	r1, r9
 8009216:	f7f7 f837 	bl	8000288 <__aeabi_dsub>
 800921a:	3630      	adds	r6, #48	; 0x30
 800921c:	f805 6b01 	strb.w	r6, [r5], #1
 8009220:	4652      	mov	r2, sl
 8009222:	465b      	mov	r3, fp
 8009224:	4680      	mov	r8, r0
 8009226:	4689      	mov	r9, r1
 8009228:	f7f7 fc58 	bl	8000adc <__aeabi_dcmplt>
 800922c:	2800      	cmp	r0, #0
 800922e:	d163      	bne.n	80092f8 <_dtoa_r+0x608>
 8009230:	4642      	mov	r2, r8
 8009232:	464b      	mov	r3, r9
 8009234:	4936      	ldr	r1, [pc, #216]	; (8009310 <_dtoa_r+0x620>)
 8009236:	2000      	movs	r0, #0
 8009238:	f7f7 f826 	bl	8000288 <__aeabi_dsub>
 800923c:	4652      	mov	r2, sl
 800923e:	465b      	mov	r3, fp
 8009240:	f7f7 fc4c 	bl	8000adc <__aeabi_dcmplt>
 8009244:	2800      	cmp	r0, #0
 8009246:	f040 80b5 	bne.w	80093b4 <_dtoa_r+0x6c4>
 800924a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800924c:	429d      	cmp	r5, r3
 800924e:	d081      	beq.n	8009154 <_dtoa_r+0x464>
 8009250:	4b30      	ldr	r3, [pc, #192]	; (8009314 <_dtoa_r+0x624>)
 8009252:	2200      	movs	r2, #0
 8009254:	4650      	mov	r0, sl
 8009256:	4659      	mov	r1, fp
 8009258:	f7f7 f9ce 	bl	80005f8 <__aeabi_dmul>
 800925c:	4b2d      	ldr	r3, [pc, #180]	; (8009314 <_dtoa_r+0x624>)
 800925e:	4682      	mov	sl, r0
 8009260:	468b      	mov	fp, r1
 8009262:	4640      	mov	r0, r8
 8009264:	4649      	mov	r1, r9
 8009266:	2200      	movs	r2, #0
 8009268:	f7f7 f9c6 	bl	80005f8 <__aeabi_dmul>
 800926c:	4680      	mov	r8, r0
 800926e:	4689      	mov	r9, r1
 8009270:	e7c6      	b.n	8009200 <_dtoa_r+0x510>
 8009272:	4650      	mov	r0, sl
 8009274:	4659      	mov	r1, fp
 8009276:	f7f7 f9bf 	bl	80005f8 <__aeabi_dmul>
 800927a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800927c:	9d01      	ldr	r5, [sp, #4]
 800927e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009280:	4682      	mov	sl, r0
 8009282:	468b      	mov	fp, r1
 8009284:	4649      	mov	r1, r9
 8009286:	4640      	mov	r0, r8
 8009288:	f7f7 fc66 	bl	8000b58 <__aeabi_d2iz>
 800928c:	4606      	mov	r6, r0
 800928e:	f7f7 f949 	bl	8000524 <__aeabi_i2d>
 8009292:	3630      	adds	r6, #48	; 0x30
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	4640      	mov	r0, r8
 800929a:	4649      	mov	r1, r9
 800929c:	f7f6 fff4 	bl	8000288 <__aeabi_dsub>
 80092a0:	f805 6b01 	strb.w	r6, [r5], #1
 80092a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092a6:	429d      	cmp	r5, r3
 80092a8:	4680      	mov	r8, r0
 80092aa:	4689      	mov	r9, r1
 80092ac:	f04f 0200 	mov.w	r2, #0
 80092b0:	d124      	bne.n	80092fc <_dtoa_r+0x60c>
 80092b2:	4b1b      	ldr	r3, [pc, #108]	; (8009320 <_dtoa_r+0x630>)
 80092b4:	4650      	mov	r0, sl
 80092b6:	4659      	mov	r1, fp
 80092b8:	f7f6 ffe8 	bl	800028c <__adddf3>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	4640      	mov	r0, r8
 80092c2:	4649      	mov	r1, r9
 80092c4:	f7f7 fc28 	bl	8000b18 <__aeabi_dcmpgt>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d173      	bne.n	80093b4 <_dtoa_r+0x6c4>
 80092cc:	4652      	mov	r2, sl
 80092ce:	465b      	mov	r3, fp
 80092d0:	4913      	ldr	r1, [pc, #76]	; (8009320 <_dtoa_r+0x630>)
 80092d2:	2000      	movs	r0, #0
 80092d4:	f7f6 ffd8 	bl	8000288 <__aeabi_dsub>
 80092d8:	4602      	mov	r2, r0
 80092da:	460b      	mov	r3, r1
 80092dc:	4640      	mov	r0, r8
 80092de:	4649      	mov	r1, r9
 80092e0:	f7f7 fbfc 	bl	8000adc <__aeabi_dcmplt>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	f43f af35 	beq.w	8009154 <_dtoa_r+0x464>
 80092ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80092ec:	1e6b      	subs	r3, r5, #1
 80092ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80092f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092f4:	2b30      	cmp	r3, #48	; 0x30
 80092f6:	d0f8      	beq.n	80092ea <_dtoa_r+0x5fa>
 80092f8:	9700      	str	r7, [sp, #0]
 80092fa:	e049      	b.n	8009390 <_dtoa_r+0x6a0>
 80092fc:	4b05      	ldr	r3, [pc, #20]	; (8009314 <_dtoa_r+0x624>)
 80092fe:	f7f7 f97b 	bl	80005f8 <__aeabi_dmul>
 8009302:	4680      	mov	r8, r0
 8009304:	4689      	mov	r9, r1
 8009306:	e7bd      	b.n	8009284 <_dtoa_r+0x594>
 8009308:	0800c558 	.word	0x0800c558
 800930c:	0800c530 	.word	0x0800c530
 8009310:	3ff00000 	.word	0x3ff00000
 8009314:	40240000 	.word	0x40240000
 8009318:	401c0000 	.word	0x401c0000
 800931c:	40140000 	.word	0x40140000
 8009320:	3fe00000 	.word	0x3fe00000
 8009324:	9d01      	ldr	r5, [sp, #4]
 8009326:	4656      	mov	r6, sl
 8009328:	465f      	mov	r7, fp
 800932a:	4642      	mov	r2, r8
 800932c:	464b      	mov	r3, r9
 800932e:	4630      	mov	r0, r6
 8009330:	4639      	mov	r1, r7
 8009332:	f7f7 fa8b 	bl	800084c <__aeabi_ddiv>
 8009336:	f7f7 fc0f 	bl	8000b58 <__aeabi_d2iz>
 800933a:	4682      	mov	sl, r0
 800933c:	f7f7 f8f2 	bl	8000524 <__aeabi_i2d>
 8009340:	4642      	mov	r2, r8
 8009342:	464b      	mov	r3, r9
 8009344:	f7f7 f958 	bl	80005f8 <__aeabi_dmul>
 8009348:	4602      	mov	r2, r0
 800934a:	460b      	mov	r3, r1
 800934c:	4630      	mov	r0, r6
 800934e:	4639      	mov	r1, r7
 8009350:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009354:	f7f6 ff98 	bl	8000288 <__aeabi_dsub>
 8009358:	f805 6b01 	strb.w	r6, [r5], #1
 800935c:	9e01      	ldr	r6, [sp, #4]
 800935e:	9f03      	ldr	r7, [sp, #12]
 8009360:	1bae      	subs	r6, r5, r6
 8009362:	42b7      	cmp	r7, r6
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	d135      	bne.n	80093d6 <_dtoa_r+0x6e6>
 800936a:	f7f6 ff8f 	bl	800028c <__adddf3>
 800936e:	4642      	mov	r2, r8
 8009370:	464b      	mov	r3, r9
 8009372:	4606      	mov	r6, r0
 8009374:	460f      	mov	r7, r1
 8009376:	f7f7 fbcf 	bl	8000b18 <__aeabi_dcmpgt>
 800937a:	b9d0      	cbnz	r0, 80093b2 <_dtoa_r+0x6c2>
 800937c:	4642      	mov	r2, r8
 800937e:	464b      	mov	r3, r9
 8009380:	4630      	mov	r0, r6
 8009382:	4639      	mov	r1, r7
 8009384:	f7f7 fba0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009388:	b110      	cbz	r0, 8009390 <_dtoa_r+0x6a0>
 800938a:	f01a 0f01 	tst.w	sl, #1
 800938e:	d110      	bne.n	80093b2 <_dtoa_r+0x6c2>
 8009390:	4620      	mov	r0, r4
 8009392:	ee18 1a10 	vmov	r1, s16
 8009396:	f000 fae5 	bl	8009964 <_Bfree>
 800939a:	2300      	movs	r3, #0
 800939c:	9800      	ldr	r0, [sp, #0]
 800939e:	702b      	strb	r3, [r5, #0]
 80093a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093a2:	3001      	adds	r0, #1
 80093a4:	6018      	str	r0, [r3, #0]
 80093a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f43f acf1 	beq.w	8008d90 <_dtoa_r+0xa0>
 80093ae:	601d      	str	r5, [r3, #0]
 80093b0:	e4ee      	b.n	8008d90 <_dtoa_r+0xa0>
 80093b2:	9f00      	ldr	r7, [sp, #0]
 80093b4:	462b      	mov	r3, r5
 80093b6:	461d      	mov	r5, r3
 80093b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093bc:	2a39      	cmp	r2, #57	; 0x39
 80093be:	d106      	bne.n	80093ce <_dtoa_r+0x6de>
 80093c0:	9a01      	ldr	r2, [sp, #4]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d1f7      	bne.n	80093b6 <_dtoa_r+0x6c6>
 80093c6:	9901      	ldr	r1, [sp, #4]
 80093c8:	2230      	movs	r2, #48	; 0x30
 80093ca:	3701      	adds	r7, #1
 80093cc:	700a      	strb	r2, [r1, #0]
 80093ce:	781a      	ldrb	r2, [r3, #0]
 80093d0:	3201      	adds	r2, #1
 80093d2:	701a      	strb	r2, [r3, #0]
 80093d4:	e790      	b.n	80092f8 <_dtoa_r+0x608>
 80093d6:	4ba6      	ldr	r3, [pc, #664]	; (8009670 <_dtoa_r+0x980>)
 80093d8:	2200      	movs	r2, #0
 80093da:	f7f7 f90d 	bl	80005f8 <__aeabi_dmul>
 80093de:	2200      	movs	r2, #0
 80093e0:	2300      	movs	r3, #0
 80093e2:	4606      	mov	r6, r0
 80093e4:	460f      	mov	r7, r1
 80093e6:	f7f7 fb6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80093ea:	2800      	cmp	r0, #0
 80093ec:	d09d      	beq.n	800932a <_dtoa_r+0x63a>
 80093ee:	e7cf      	b.n	8009390 <_dtoa_r+0x6a0>
 80093f0:	9a08      	ldr	r2, [sp, #32]
 80093f2:	2a00      	cmp	r2, #0
 80093f4:	f000 80d7 	beq.w	80095a6 <_dtoa_r+0x8b6>
 80093f8:	9a06      	ldr	r2, [sp, #24]
 80093fa:	2a01      	cmp	r2, #1
 80093fc:	f300 80ba 	bgt.w	8009574 <_dtoa_r+0x884>
 8009400:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009402:	2a00      	cmp	r2, #0
 8009404:	f000 80b2 	beq.w	800956c <_dtoa_r+0x87c>
 8009408:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800940c:	9e07      	ldr	r6, [sp, #28]
 800940e:	9d04      	ldr	r5, [sp, #16]
 8009410:	9a04      	ldr	r2, [sp, #16]
 8009412:	441a      	add	r2, r3
 8009414:	9204      	str	r2, [sp, #16]
 8009416:	9a05      	ldr	r2, [sp, #20]
 8009418:	2101      	movs	r1, #1
 800941a:	441a      	add	r2, r3
 800941c:	4620      	mov	r0, r4
 800941e:	9205      	str	r2, [sp, #20]
 8009420:	f000 fb58 	bl	8009ad4 <__i2b>
 8009424:	4607      	mov	r7, r0
 8009426:	2d00      	cmp	r5, #0
 8009428:	dd0c      	ble.n	8009444 <_dtoa_r+0x754>
 800942a:	9b05      	ldr	r3, [sp, #20]
 800942c:	2b00      	cmp	r3, #0
 800942e:	dd09      	ble.n	8009444 <_dtoa_r+0x754>
 8009430:	42ab      	cmp	r3, r5
 8009432:	9a04      	ldr	r2, [sp, #16]
 8009434:	bfa8      	it	ge
 8009436:	462b      	movge	r3, r5
 8009438:	1ad2      	subs	r2, r2, r3
 800943a:	9204      	str	r2, [sp, #16]
 800943c:	9a05      	ldr	r2, [sp, #20]
 800943e:	1aed      	subs	r5, r5, r3
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	9305      	str	r3, [sp, #20]
 8009444:	9b07      	ldr	r3, [sp, #28]
 8009446:	b31b      	cbz	r3, 8009490 <_dtoa_r+0x7a0>
 8009448:	9b08      	ldr	r3, [sp, #32]
 800944a:	2b00      	cmp	r3, #0
 800944c:	f000 80af 	beq.w	80095ae <_dtoa_r+0x8be>
 8009450:	2e00      	cmp	r6, #0
 8009452:	dd13      	ble.n	800947c <_dtoa_r+0x78c>
 8009454:	4639      	mov	r1, r7
 8009456:	4632      	mov	r2, r6
 8009458:	4620      	mov	r0, r4
 800945a:	f000 fbfb 	bl	8009c54 <__pow5mult>
 800945e:	ee18 2a10 	vmov	r2, s16
 8009462:	4601      	mov	r1, r0
 8009464:	4607      	mov	r7, r0
 8009466:	4620      	mov	r0, r4
 8009468:	f000 fb4a 	bl	8009b00 <__multiply>
 800946c:	ee18 1a10 	vmov	r1, s16
 8009470:	4680      	mov	r8, r0
 8009472:	4620      	mov	r0, r4
 8009474:	f000 fa76 	bl	8009964 <_Bfree>
 8009478:	ee08 8a10 	vmov	s16, r8
 800947c:	9b07      	ldr	r3, [sp, #28]
 800947e:	1b9a      	subs	r2, r3, r6
 8009480:	d006      	beq.n	8009490 <_dtoa_r+0x7a0>
 8009482:	ee18 1a10 	vmov	r1, s16
 8009486:	4620      	mov	r0, r4
 8009488:	f000 fbe4 	bl	8009c54 <__pow5mult>
 800948c:	ee08 0a10 	vmov	s16, r0
 8009490:	2101      	movs	r1, #1
 8009492:	4620      	mov	r0, r4
 8009494:	f000 fb1e 	bl	8009ad4 <__i2b>
 8009498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800949a:	2b00      	cmp	r3, #0
 800949c:	4606      	mov	r6, r0
 800949e:	f340 8088 	ble.w	80095b2 <_dtoa_r+0x8c2>
 80094a2:	461a      	mov	r2, r3
 80094a4:	4601      	mov	r1, r0
 80094a6:	4620      	mov	r0, r4
 80094a8:	f000 fbd4 	bl	8009c54 <__pow5mult>
 80094ac:	9b06      	ldr	r3, [sp, #24]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	4606      	mov	r6, r0
 80094b2:	f340 8081 	ble.w	80095b8 <_dtoa_r+0x8c8>
 80094b6:	f04f 0800 	mov.w	r8, #0
 80094ba:	6933      	ldr	r3, [r6, #16]
 80094bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80094c0:	6918      	ldr	r0, [r3, #16]
 80094c2:	f000 fab7 	bl	8009a34 <__hi0bits>
 80094c6:	f1c0 0020 	rsb	r0, r0, #32
 80094ca:	9b05      	ldr	r3, [sp, #20]
 80094cc:	4418      	add	r0, r3
 80094ce:	f010 001f 	ands.w	r0, r0, #31
 80094d2:	f000 8092 	beq.w	80095fa <_dtoa_r+0x90a>
 80094d6:	f1c0 0320 	rsb	r3, r0, #32
 80094da:	2b04      	cmp	r3, #4
 80094dc:	f340 808a 	ble.w	80095f4 <_dtoa_r+0x904>
 80094e0:	f1c0 001c 	rsb	r0, r0, #28
 80094e4:	9b04      	ldr	r3, [sp, #16]
 80094e6:	4403      	add	r3, r0
 80094e8:	9304      	str	r3, [sp, #16]
 80094ea:	9b05      	ldr	r3, [sp, #20]
 80094ec:	4403      	add	r3, r0
 80094ee:	4405      	add	r5, r0
 80094f0:	9305      	str	r3, [sp, #20]
 80094f2:	9b04      	ldr	r3, [sp, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	dd07      	ble.n	8009508 <_dtoa_r+0x818>
 80094f8:	ee18 1a10 	vmov	r1, s16
 80094fc:	461a      	mov	r2, r3
 80094fe:	4620      	mov	r0, r4
 8009500:	f000 fc02 	bl	8009d08 <__lshift>
 8009504:	ee08 0a10 	vmov	s16, r0
 8009508:	9b05      	ldr	r3, [sp, #20]
 800950a:	2b00      	cmp	r3, #0
 800950c:	dd05      	ble.n	800951a <_dtoa_r+0x82a>
 800950e:	4631      	mov	r1, r6
 8009510:	461a      	mov	r2, r3
 8009512:	4620      	mov	r0, r4
 8009514:	f000 fbf8 	bl	8009d08 <__lshift>
 8009518:	4606      	mov	r6, r0
 800951a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800951c:	2b00      	cmp	r3, #0
 800951e:	d06e      	beq.n	80095fe <_dtoa_r+0x90e>
 8009520:	ee18 0a10 	vmov	r0, s16
 8009524:	4631      	mov	r1, r6
 8009526:	f000 fc5f 	bl	8009de8 <__mcmp>
 800952a:	2800      	cmp	r0, #0
 800952c:	da67      	bge.n	80095fe <_dtoa_r+0x90e>
 800952e:	9b00      	ldr	r3, [sp, #0]
 8009530:	3b01      	subs	r3, #1
 8009532:	ee18 1a10 	vmov	r1, s16
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	220a      	movs	r2, #10
 800953a:	2300      	movs	r3, #0
 800953c:	4620      	mov	r0, r4
 800953e:	f000 fa33 	bl	80099a8 <__multadd>
 8009542:	9b08      	ldr	r3, [sp, #32]
 8009544:	ee08 0a10 	vmov	s16, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 81b1 	beq.w	80098b0 <_dtoa_r+0xbc0>
 800954e:	2300      	movs	r3, #0
 8009550:	4639      	mov	r1, r7
 8009552:	220a      	movs	r2, #10
 8009554:	4620      	mov	r0, r4
 8009556:	f000 fa27 	bl	80099a8 <__multadd>
 800955a:	9b02      	ldr	r3, [sp, #8]
 800955c:	2b00      	cmp	r3, #0
 800955e:	4607      	mov	r7, r0
 8009560:	f300 808e 	bgt.w	8009680 <_dtoa_r+0x990>
 8009564:	9b06      	ldr	r3, [sp, #24]
 8009566:	2b02      	cmp	r3, #2
 8009568:	dc51      	bgt.n	800960e <_dtoa_r+0x91e>
 800956a:	e089      	b.n	8009680 <_dtoa_r+0x990>
 800956c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800956e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009572:	e74b      	b.n	800940c <_dtoa_r+0x71c>
 8009574:	9b03      	ldr	r3, [sp, #12]
 8009576:	1e5e      	subs	r6, r3, #1
 8009578:	9b07      	ldr	r3, [sp, #28]
 800957a:	42b3      	cmp	r3, r6
 800957c:	bfbf      	itttt	lt
 800957e:	9b07      	ldrlt	r3, [sp, #28]
 8009580:	9607      	strlt	r6, [sp, #28]
 8009582:	1af2      	sublt	r2, r6, r3
 8009584:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009586:	bfb6      	itet	lt
 8009588:	189b      	addlt	r3, r3, r2
 800958a:	1b9e      	subge	r6, r3, r6
 800958c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800958e:	9b03      	ldr	r3, [sp, #12]
 8009590:	bfb8      	it	lt
 8009592:	2600      	movlt	r6, #0
 8009594:	2b00      	cmp	r3, #0
 8009596:	bfb7      	itett	lt
 8009598:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800959c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80095a0:	1a9d      	sublt	r5, r3, r2
 80095a2:	2300      	movlt	r3, #0
 80095a4:	e734      	b.n	8009410 <_dtoa_r+0x720>
 80095a6:	9e07      	ldr	r6, [sp, #28]
 80095a8:	9d04      	ldr	r5, [sp, #16]
 80095aa:	9f08      	ldr	r7, [sp, #32]
 80095ac:	e73b      	b.n	8009426 <_dtoa_r+0x736>
 80095ae:	9a07      	ldr	r2, [sp, #28]
 80095b0:	e767      	b.n	8009482 <_dtoa_r+0x792>
 80095b2:	9b06      	ldr	r3, [sp, #24]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	dc18      	bgt.n	80095ea <_dtoa_r+0x8fa>
 80095b8:	f1ba 0f00 	cmp.w	sl, #0
 80095bc:	d115      	bne.n	80095ea <_dtoa_r+0x8fa>
 80095be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095c2:	b993      	cbnz	r3, 80095ea <_dtoa_r+0x8fa>
 80095c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80095c8:	0d1b      	lsrs	r3, r3, #20
 80095ca:	051b      	lsls	r3, r3, #20
 80095cc:	b183      	cbz	r3, 80095f0 <_dtoa_r+0x900>
 80095ce:	9b04      	ldr	r3, [sp, #16]
 80095d0:	3301      	adds	r3, #1
 80095d2:	9304      	str	r3, [sp, #16]
 80095d4:	9b05      	ldr	r3, [sp, #20]
 80095d6:	3301      	adds	r3, #1
 80095d8:	9305      	str	r3, [sp, #20]
 80095da:	f04f 0801 	mov.w	r8, #1
 80095de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f47f af6a 	bne.w	80094ba <_dtoa_r+0x7ca>
 80095e6:	2001      	movs	r0, #1
 80095e8:	e76f      	b.n	80094ca <_dtoa_r+0x7da>
 80095ea:	f04f 0800 	mov.w	r8, #0
 80095ee:	e7f6      	b.n	80095de <_dtoa_r+0x8ee>
 80095f0:	4698      	mov	r8, r3
 80095f2:	e7f4      	b.n	80095de <_dtoa_r+0x8ee>
 80095f4:	f43f af7d 	beq.w	80094f2 <_dtoa_r+0x802>
 80095f8:	4618      	mov	r0, r3
 80095fa:	301c      	adds	r0, #28
 80095fc:	e772      	b.n	80094e4 <_dtoa_r+0x7f4>
 80095fe:	9b03      	ldr	r3, [sp, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	dc37      	bgt.n	8009674 <_dtoa_r+0x984>
 8009604:	9b06      	ldr	r3, [sp, #24]
 8009606:	2b02      	cmp	r3, #2
 8009608:	dd34      	ble.n	8009674 <_dtoa_r+0x984>
 800960a:	9b03      	ldr	r3, [sp, #12]
 800960c:	9302      	str	r3, [sp, #8]
 800960e:	9b02      	ldr	r3, [sp, #8]
 8009610:	b96b      	cbnz	r3, 800962e <_dtoa_r+0x93e>
 8009612:	4631      	mov	r1, r6
 8009614:	2205      	movs	r2, #5
 8009616:	4620      	mov	r0, r4
 8009618:	f000 f9c6 	bl	80099a8 <__multadd>
 800961c:	4601      	mov	r1, r0
 800961e:	4606      	mov	r6, r0
 8009620:	ee18 0a10 	vmov	r0, s16
 8009624:	f000 fbe0 	bl	8009de8 <__mcmp>
 8009628:	2800      	cmp	r0, #0
 800962a:	f73f adbb 	bgt.w	80091a4 <_dtoa_r+0x4b4>
 800962e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009630:	9d01      	ldr	r5, [sp, #4]
 8009632:	43db      	mvns	r3, r3
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	f04f 0800 	mov.w	r8, #0
 800963a:	4631      	mov	r1, r6
 800963c:	4620      	mov	r0, r4
 800963e:	f000 f991 	bl	8009964 <_Bfree>
 8009642:	2f00      	cmp	r7, #0
 8009644:	f43f aea4 	beq.w	8009390 <_dtoa_r+0x6a0>
 8009648:	f1b8 0f00 	cmp.w	r8, #0
 800964c:	d005      	beq.n	800965a <_dtoa_r+0x96a>
 800964e:	45b8      	cmp	r8, r7
 8009650:	d003      	beq.n	800965a <_dtoa_r+0x96a>
 8009652:	4641      	mov	r1, r8
 8009654:	4620      	mov	r0, r4
 8009656:	f000 f985 	bl	8009964 <_Bfree>
 800965a:	4639      	mov	r1, r7
 800965c:	4620      	mov	r0, r4
 800965e:	f000 f981 	bl	8009964 <_Bfree>
 8009662:	e695      	b.n	8009390 <_dtoa_r+0x6a0>
 8009664:	2600      	movs	r6, #0
 8009666:	4637      	mov	r7, r6
 8009668:	e7e1      	b.n	800962e <_dtoa_r+0x93e>
 800966a:	9700      	str	r7, [sp, #0]
 800966c:	4637      	mov	r7, r6
 800966e:	e599      	b.n	80091a4 <_dtoa_r+0x4b4>
 8009670:	40240000 	.word	0x40240000
 8009674:	9b08      	ldr	r3, [sp, #32]
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 80ca 	beq.w	8009810 <_dtoa_r+0xb20>
 800967c:	9b03      	ldr	r3, [sp, #12]
 800967e:	9302      	str	r3, [sp, #8]
 8009680:	2d00      	cmp	r5, #0
 8009682:	dd05      	ble.n	8009690 <_dtoa_r+0x9a0>
 8009684:	4639      	mov	r1, r7
 8009686:	462a      	mov	r2, r5
 8009688:	4620      	mov	r0, r4
 800968a:	f000 fb3d 	bl	8009d08 <__lshift>
 800968e:	4607      	mov	r7, r0
 8009690:	f1b8 0f00 	cmp.w	r8, #0
 8009694:	d05b      	beq.n	800974e <_dtoa_r+0xa5e>
 8009696:	6879      	ldr	r1, [r7, #4]
 8009698:	4620      	mov	r0, r4
 800969a:	f000 f923 	bl	80098e4 <_Balloc>
 800969e:	4605      	mov	r5, r0
 80096a0:	b928      	cbnz	r0, 80096ae <_dtoa_r+0x9be>
 80096a2:	4b87      	ldr	r3, [pc, #540]	; (80098c0 <_dtoa_r+0xbd0>)
 80096a4:	4602      	mov	r2, r0
 80096a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80096aa:	f7ff bb3b 	b.w	8008d24 <_dtoa_r+0x34>
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	3202      	adds	r2, #2
 80096b2:	0092      	lsls	r2, r2, #2
 80096b4:	f107 010c 	add.w	r1, r7, #12
 80096b8:	300c      	adds	r0, #12
 80096ba:	f7fe fdb9 	bl	8008230 <memcpy>
 80096be:	2201      	movs	r2, #1
 80096c0:	4629      	mov	r1, r5
 80096c2:	4620      	mov	r0, r4
 80096c4:	f000 fb20 	bl	8009d08 <__lshift>
 80096c8:	9b01      	ldr	r3, [sp, #4]
 80096ca:	f103 0901 	add.w	r9, r3, #1
 80096ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80096d2:	4413      	add	r3, r2
 80096d4:	9305      	str	r3, [sp, #20]
 80096d6:	f00a 0301 	and.w	r3, sl, #1
 80096da:	46b8      	mov	r8, r7
 80096dc:	9304      	str	r3, [sp, #16]
 80096de:	4607      	mov	r7, r0
 80096e0:	4631      	mov	r1, r6
 80096e2:	ee18 0a10 	vmov	r0, s16
 80096e6:	f7ff fa77 	bl	8008bd8 <quorem>
 80096ea:	4641      	mov	r1, r8
 80096ec:	9002      	str	r0, [sp, #8]
 80096ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80096f2:	ee18 0a10 	vmov	r0, s16
 80096f6:	f000 fb77 	bl	8009de8 <__mcmp>
 80096fa:	463a      	mov	r2, r7
 80096fc:	9003      	str	r0, [sp, #12]
 80096fe:	4631      	mov	r1, r6
 8009700:	4620      	mov	r0, r4
 8009702:	f000 fb8d 	bl	8009e20 <__mdiff>
 8009706:	68c2      	ldr	r2, [r0, #12]
 8009708:	f109 3bff 	add.w	fp, r9, #4294967295
 800970c:	4605      	mov	r5, r0
 800970e:	bb02      	cbnz	r2, 8009752 <_dtoa_r+0xa62>
 8009710:	4601      	mov	r1, r0
 8009712:	ee18 0a10 	vmov	r0, s16
 8009716:	f000 fb67 	bl	8009de8 <__mcmp>
 800971a:	4602      	mov	r2, r0
 800971c:	4629      	mov	r1, r5
 800971e:	4620      	mov	r0, r4
 8009720:	9207      	str	r2, [sp, #28]
 8009722:	f000 f91f 	bl	8009964 <_Bfree>
 8009726:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800972a:	ea43 0102 	orr.w	r1, r3, r2
 800972e:	9b04      	ldr	r3, [sp, #16]
 8009730:	430b      	orrs	r3, r1
 8009732:	464d      	mov	r5, r9
 8009734:	d10f      	bne.n	8009756 <_dtoa_r+0xa66>
 8009736:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800973a:	d02a      	beq.n	8009792 <_dtoa_r+0xaa2>
 800973c:	9b03      	ldr	r3, [sp, #12]
 800973e:	2b00      	cmp	r3, #0
 8009740:	dd02      	ble.n	8009748 <_dtoa_r+0xa58>
 8009742:	9b02      	ldr	r3, [sp, #8]
 8009744:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009748:	f88b a000 	strb.w	sl, [fp]
 800974c:	e775      	b.n	800963a <_dtoa_r+0x94a>
 800974e:	4638      	mov	r0, r7
 8009750:	e7ba      	b.n	80096c8 <_dtoa_r+0x9d8>
 8009752:	2201      	movs	r2, #1
 8009754:	e7e2      	b.n	800971c <_dtoa_r+0xa2c>
 8009756:	9b03      	ldr	r3, [sp, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	db04      	blt.n	8009766 <_dtoa_r+0xa76>
 800975c:	9906      	ldr	r1, [sp, #24]
 800975e:	430b      	orrs	r3, r1
 8009760:	9904      	ldr	r1, [sp, #16]
 8009762:	430b      	orrs	r3, r1
 8009764:	d122      	bne.n	80097ac <_dtoa_r+0xabc>
 8009766:	2a00      	cmp	r2, #0
 8009768:	ddee      	ble.n	8009748 <_dtoa_r+0xa58>
 800976a:	ee18 1a10 	vmov	r1, s16
 800976e:	2201      	movs	r2, #1
 8009770:	4620      	mov	r0, r4
 8009772:	f000 fac9 	bl	8009d08 <__lshift>
 8009776:	4631      	mov	r1, r6
 8009778:	ee08 0a10 	vmov	s16, r0
 800977c:	f000 fb34 	bl	8009de8 <__mcmp>
 8009780:	2800      	cmp	r0, #0
 8009782:	dc03      	bgt.n	800978c <_dtoa_r+0xa9c>
 8009784:	d1e0      	bne.n	8009748 <_dtoa_r+0xa58>
 8009786:	f01a 0f01 	tst.w	sl, #1
 800978a:	d0dd      	beq.n	8009748 <_dtoa_r+0xa58>
 800978c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009790:	d1d7      	bne.n	8009742 <_dtoa_r+0xa52>
 8009792:	2339      	movs	r3, #57	; 0x39
 8009794:	f88b 3000 	strb.w	r3, [fp]
 8009798:	462b      	mov	r3, r5
 800979a:	461d      	mov	r5, r3
 800979c:	3b01      	subs	r3, #1
 800979e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80097a2:	2a39      	cmp	r2, #57	; 0x39
 80097a4:	d071      	beq.n	800988a <_dtoa_r+0xb9a>
 80097a6:	3201      	adds	r2, #1
 80097a8:	701a      	strb	r2, [r3, #0]
 80097aa:	e746      	b.n	800963a <_dtoa_r+0x94a>
 80097ac:	2a00      	cmp	r2, #0
 80097ae:	dd07      	ble.n	80097c0 <_dtoa_r+0xad0>
 80097b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80097b4:	d0ed      	beq.n	8009792 <_dtoa_r+0xaa2>
 80097b6:	f10a 0301 	add.w	r3, sl, #1
 80097ba:	f88b 3000 	strb.w	r3, [fp]
 80097be:	e73c      	b.n	800963a <_dtoa_r+0x94a>
 80097c0:	9b05      	ldr	r3, [sp, #20]
 80097c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80097c6:	4599      	cmp	r9, r3
 80097c8:	d047      	beq.n	800985a <_dtoa_r+0xb6a>
 80097ca:	ee18 1a10 	vmov	r1, s16
 80097ce:	2300      	movs	r3, #0
 80097d0:	220a      	movs	r2, #10
 80097d2:	4620      	mov	r0, r4
 80097d4:	f000 f8e8 	bl	80099a8 <__multadd>
 80097d8:	45b8      	cmp	r8, r7
 80097da:	ee08 0a10 	vmov	s16, r0
 80097de:	f04f 0300 	mov.w	r3, #0
 80097e2:	f04f 020a 	mov.w	r2, #10
 80097e6:	4641      	mov	r1, r8
 80097e8:	4620      	mov	r0, r4
 80097ea:	d106      	bne.n	80097fa <_dtoa_r+0xb0a>
 80097ec:	f000 f8dc 	bl	80099a8 <__multadd>
 80097f0:	4680      	mov	r8, r0
 80097f2:	4607      	mov	r7, r0
 80097f4:	f109 0901 	add.w	r9, r9, #1
 80097f8:	e772      	b.n	80096e0 <_dtoa_r+0x9f0>
 80097fa:	f000 f8d5 	bl	80099a8 <__multadd>
 80097fe:	4639      	mov	r1, r7
 8009800:	4680      	mov	r8, r0
 8009802:	2300      	movs	r3, #0
 8009804:	220a      	movs	r2, #10
 8009806:	4620      	mov	r0, r4
 8009808:	f000 f8ce 	bl	80099a8 <__multadd>
 800980c:	4607      	mov	r7, r0
 800980e:	e7f1      	b.n	80097f4 <_dtoa_r+0xb04>
 8009810:	9b03      	ldr	r3, [sp, #12]
 8009812:	9302      	str	r3, [sp, #8]
 8009814:	9d01      	ldr	r5, [sp, #4]
 8009816:	ee18 0a10 	vmov	r0, s16
 800981a:	4631      	mov	r1, r6
 800981c:	f7ff f9dc 	bl	8008bd8 <quorem>
 8009820:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009824:	9b01      	ldr	r3, [sp, #4]
 8009826:	f805 ab01 	strb.w	sl, [r5], #1
 800982a:	1aea      	subs	r2, r5, r3
 800982c:	9b02      	ldr	r3, [sp, #8]
 800982e:	4293      	cmp	r3, r2
 8009830:	dd09      	ble.n	8009846 <_dtoa_r+0xb56>
 8009832:	ee18 1a10 	vmov	r1, s16
 8009836:	2300      	movs	r3, #0
 8009838:	220a      	movs	r2, #10
 800983a:	4620      	mov	r0, r4
 800983c:	f000 f8b4 	bl	80099a8 <__multadd>
 8009840:	ee08 0a10 	vmov	s16, r0
 8009844:	e7e7      	b.n	8009816 <_dtoa_r+0xb26>
 8009846:	9b02      	ldr	r3, [sp, #8]
 8009848:	2b00      	cmp	r3, #0
 800984a:	bfc8      	it	gt
 800984c:	461d      	movgt	r5, r3
 800984e:	9b01      	ldr	r3, [sp, #4]
 8009850:	bfd8      	it	le
 8009852:	2501      	movle	r5, #1
 8009854:	441d      	add	r5, r3
 8009856:	f04f 0800 	mov.w	r8, #0
 800985a:	ee18 1a10 	vmov	r1, s16
 800985e:	2201      	movs	r2, #1
 8009860:	4620      	mov	r0, r4
 8009862:	f000 fa51 	bl	8009d08 <__lshift>
 8009866:	4631      	mov	r1, r6
 8009868:	ee08 0a10 	vmov	s16, r0
 800986c:	f000 fabc 	bl	8009de8 <__mcmp>
 8009870:	2800      	cmp	r0, #0
 8009872:	dc91      	bgt.n	8009798 <_dtoa_r+0xaa8>
 8009874:	d102      	bne.n	800987c <_dtoa_r+0xb8c>
 8009876:	f01a 0f01 	tst.w	sl, #1
 800987a:	d18d      	bne.n	8009798 <_dtoa_r+0xaa8>
 800987c:	462b      	mov	r3, r5
 800987e:	461d      	mov	r5, r3
 8009880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009884:	2a30      	cmp	r2, #48	; 0x30
 8009886:	d0fa      	beq.n	800987e <_dtoa_r+0xb8e>
 8009888:	e6d7      	b.n	800963a <_dtoa_r+0x94a>
 800988a:	9a01      	ldr	r2, [sp, #4]
 800988c:	429a      	cmp	r2, r3
 800988e:	d184      	bne.n	800979a <_dtoa_r+0xaaa>
 8009890:	9b00      	ldr	r3, [sp, #0]
 8009892:	3301      	adds	r3, #1
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	2331      	movs	r3, #49	; 0x31
 8009898:	7013      	strb	r3, [r2, #0]
 800989a:	e6ce      	b.n	800963a <_dtoa_r+0x94a>
 800989c:	4b09      	ldr	r3, [pc, #36]	; (80098c4 <_dtoa_r+0xbd4>)
 800989e:	f7ff ba95 	b.w	8008dcc <_dtoa_r+0xdc>
 80098a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f47f aa6e 	bne.w	8008d86 <_dtoa_r+0x96>
 80098aa:	4b07      	ldr	r3, [pc, #28]	; (80098c8 <_dtoa_r+0xbd8>)
 80098ac:	f7ff ba8e 	b.w	8008dcc <_dtoa_r+0xdc>
 80098b0:	9b02      	ldr	r3, [sp, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	dcae      	bgt.n	8009814 <_dtoa_r+0xb24>
 80098b6:	9b06      	ldr	r3, [sp, #24]
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	f73f aea8 	bgt.w	800960e <_dtoa_r+0x91e>
 80098be:	e7a9      	b.n	8009814 <_dtoa_r+0xb24>
 80098c0:	0800c4c3 	.word	0x0800c4c3
 80098c4:	0800c420 	.word	0x0800c420
 80098c8:	0800c444 	.word	0x0800c444

080098cc <_localeconv_r>:
 80098cc:	4800      	ldr	r0, [pc, #0]	; (80098d0 <_localeconv_r+0x4>)
 80098ce:	4770      	bx	lr
 80098d0:	20000164 	.word	0x20000164

080098d4 <malloc>:
 80098d4:	4b02      	ldr	r3, [pc, #8]	; (80098e0 <malloc+0xc>)
 80098d6:	4601      	mov	r1, r0
 80098d8:	6818      	ldr	r0, [r3, #0]
 80098da:	f000 bc09 	b.w	800a0f0 <_malloc_r>
 80098de:	bf00      	nop
 80098e0:	20000010 	.word	0x20000010

080098e4 <_Balloc>:
 80098e4:	b570      	push	{r4, r5, r6, lr}
 80098e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098e8:	4604      	mov	r4, r0
 80098ea:	460d      	mov	r5, r1
 80098ec:	b976      	cbnz	r6, 800990c <_Balloc+0x28>
 80098ee:	2010      	movs	r0, #16
 80098f0:	f7ff fff0 	bl	80098d4 <malloc>
 80098f4:	4602      	mov	r2, r0
 80098f6:	6260      	str	r0, [r4, #36]	; 0x24
 80098f8:	b920      	cbnz	r0, 8009904 <_Balloc+0x20>
 80098fa:	4b18      	ldr	r3, [pc, #96]	; (800995c <_Balloc+0x78>)
 80098fc:	4818      	ldr	r0, [pc, #96]	; (8009960 <_Balloc+0x7c>)
 80098fe:	2166      	movs	r1, #102	; 0x66
 8009900:	f000 fdd6 	bl	800a4b0 <__assert_func>
 8009904:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009908:	6006      	str	r6, [r0, #0]
 800990a:	60c6      	str	r6, [r0, #12]
 800990c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800990e:	68f3      	ldr	r3, [r6, #12]
 8009910:	b183      	cbz	r3, 8009934 <_Balloc+0x50>
 8009912:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800991a:	b9b8      	cbnz	r0, 800994c <_Balloc+0x68>
 800991c:	2101      	movs	r1, #1
 800991e:	fa01 f605 	lsl.w	r6, r1, r5
 8009922:	1d72      	adds	r2, r6, #5
 8009924:	0092      	lsls	r2, r2, #2
 8009926:	4620      	mov	r0, r4
 8009928:	f000 fb60 	bl	8009fec <_calloc_r>
 800992c:	b160      	cbz	r0, 8009948 <_Balloc+0x64>
 800992e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009932:	e00e      	b.n	8009952 <_Balloc+0x6e>
 8009934:	2221      	movs	r2, #33	; 0x21
 8009936:	2104      	movs	r1, #4
 8009938:	4620      	mov	r0, r4
 800993a:	f000 fb57 	bl	8009fec <_calloc_r>
 800993e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009940:	60f0      	str	r0, [r6, #12]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d1e4      	bne.n	8009912 <_Balloc+0x2e>
 8009948:	2000      	movs	r0, #0
 800994a:	bd70      	pop	{r4, r5, r6, pc}
 800994c:	6802      	ldr	r2, [r0, #0]
 800994e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009952:	2300      	movs	r3, #0
 8009954:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009958:	e7f7      	b.n	800994a <_Balloc+0x66>
 800995a:	bf00      	nop
 800995c:	0800c451 	.word	0x0800c451
 8009960:	0800c4d4 	.word	0x0800c4d4

08009964 <_Bfree>:
 8009964:	b570      	push	{r4, r5, r6, lr}
 8009966:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009968:	4605      	mov	r5, r0
 800996a:	460c      	mov	r4, r1
 800996c:	b976      	cbnz	r6, 800998c <_Bfree+0x28>
 800996e:	2010      	movs	r0, #16
 8009970:	f7ff ffb0 	bl	80098d4 <malloc>
 8009974:	4602      	mov	r2, r0
 8009976:	6268      	str	r0, [r5, #36]	; 0x24
 8009978:	b920      	cbnz	r0, 8009984 <_Bfree+0x20>
 800997a:	4b09      	ldr	r3, [pc, #36]	; (80099a0 <_Bfree+0x3c>)
 800997c:	4809      	ldr	r0, [pc, #36]	; (80099a4 <_Bfree+0x40>)
 800997e:	218a      	movs	r1, #138	; 0x8a
 8009980:	f000 fd96 	bl	800a4b0 <__assert_func>
 8009984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009988:	6006      	str	r6, [r0, #0]
 800998a:	60c6      	str	r6, [r0, #12]
 800998c:	b13c      	cbz	r4, 800999e <_Bfree+0x3a>
 800998e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009990:	6862      	ldr	r2, [r4, #4]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009998:	6021      	str	r1, [r4, #0]
 800999a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800999e:	bd70      	pop	{r4, r5, r6, pc}
 80099a0:	0800c451 	.word	0x0800c451
 80099a4:	0800c4d4 	.word	0x0800c4d4

080099a8 <__multadd>:
 80099a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ac:	690d      	ldr	r5, [r1, #16]
 80099ae:	4607      	mov	r7, r0
 80099b0:	460c      	mov	r4, r1
 80099b2:	461e      	mov	r6, r3
 80099b4:	f101 0c14 	add.w	ip, r1, #20
 80099b8:	2000      	movs	r0, #0
 80099ba:	f8dc 3000 	ldr.w	r3, [ip]
 80099be:	b299      	uxth	r1, r3
 80099c0:	fb02 6101 	mla	r1, r2, r1, r6
 80099c4:	0c1e      	lsrs	r6, r3, #16
 80099c6:	0c0b      	lsrs	r3, r1, #16
 80099c8:	fb02 3306 	mla	r3, r2, r6, r3
 80099cc:	b289      	uxth	r1, r1
 80099ce:	3001      	adds	r0, #1
 80099d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099d4:	4285      	cmp	r5, r0
 80099d6:	f84c 1b04 	str.w	r1, [ip], #4
 80099da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099de:	dcec      	bgt.n	80099ba <__multadd+0x12>
 80099e0:	b30e      	cbz	r6, 8009a26 <__multadd+0x7e>
 80099e2:	68a3      	ldr	r3, [r4, #8]
 80099e4:	42ab      	cmp	r3, r5
 80099e6:	dc19      	bgt.n	8009a1c <__multadd+0x74>
 80099e8:	6861      	ldr	r1, [r4, #4]
 80099ea:	4638      	mov	r0, r7
 80099ec:	3101      	adds	r1, #1
 80099ee:	f7ff ff79 	bl	80098e4 <_Balloc>
 80099f2:	4680      	mov	r8, r0
 80099f4:	b928      	cbnz	r0, 8009a02 <__multadd+0x5a>
 80099f6:	4602      	mov	r2, r0
 80099f8:	4b0c      	ldr	r3, [pc, #48]	; (8009a2c <__multadd+0x84>)
 80099fa:	480d      	ldr	r0, [pc, #52]	; (8009a30 <__multadd+0x88>)
 80099fc:	21b5      	movs	r1, #181	; 0xb5
 80099fe:	f000 fd57 	bl	800a4b0 <__assert_func>
 8009a02:	6922      	ldr	r2, [r4, #16]
 8009a04:	3202      	adds	r2, #2
 8009a06:	f104 010c 	add.w	r1, r4, #12
 8009a0a:	0092      	lsls	r2, r2, #2
 8009a0c:	300c      	adds	r0, #12
 8009a0e:	f7fe fc0f 	bl	8008230 <memcpy>
 8009a12:	4621      	mov	r1, r4
 8009a14:	4638      	mov	r0, r7
 8009a16:	f7ff ffa5 	bl	8009964 <_Bfree>
 8009a1a:	4644      	mov	r4, r8
 8009a1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a20:	3501      	adds	r5, #1
 8009a22:	615e      	str	r6, [r3, #20]
 8009a24:	6125      	str	r5, [r4, #16]
 8009a26:	4620      	mov	r0, r4
 8009a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a2c:	0800c4c3 	.word	0x0800c4c3
 8009a30:	0800c4d4 	.word	0x0800c4d4

08009a34 <__hi0bits>:
 8009a34:	0c03      	lsrs	r3, r0, #16
 8009a36:	041b      	lsls	r3, r3, #16
 8009a38:	b9d3      	cbnz	r3, 8009a70 <__hi0bits+0x3c>
 8009a3a:	0400      	lsls	r0, r0, #16
 8009a3c:	2310      	movs	r3, #16
 8009a3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a42:	bf04      	itt	eq
 8009a44:	0200      	lsleq	r0, r0, #8
 8009a46:	3308      	addeq	r3, #8
 8009a48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a4c:	bf04      	itt	eq
 8009a4e:	0100      	lsleq	r0, r0, #4
 8009a50:	3304      	addeq	r3, #4
 8009a52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a56:	bf04      	itt	eq
 8009a58:	0080      	lsleq	r0, r0, #2
 8009a5a:	3302      	addeq	r3, #2
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	db05      	blt.n	8009a6c <__hi0bits+0x38>
 8009a60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a64:	f103 0301 	add.w	r3, r3, #1
 8009a68:	bf08      	it	eq
 8009a6a:	2320      	moveq	r3, #32
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	4770      	bx	lr
 8009a70:	2300      	movs	r3, #0
 8009a72:	e7e4      	b.n	8009a3e <__hi0bits+0xa>

08009a74 <__lo0bits>:
 8009a74:	6803      	ldr	r3, [r0, #0]
 8009a76:	f013 0207 	ands.w	r2, r3, #7
 8009a7a:	4601      	mov	r1, r0
 8009a7c:	d00b      	beq.n	8009a96 <__lo0bits+0x22>
 8009a7e:	07da      	lsls	r2, r3, #31
 8009a80:	d423      	bmi.n	8009aca <__lo0bits+0x56>
 8009a82:	0798      	lsls	r0, r3, #30
 8009a84:	bf49      	itett	mi
 8009a86:	085b      	lsrmi	r3, r3, #1
 8009a88:	089b      	lsrpl	r3, r3, #2
 8009a8a:	2001      	movmi	r0, #1
 8009a8c:	600b      	strmi	r3, [r1, #0]
 8009a8e:	bf5c      	itt	pl
 8009a90:	600b      	strpl	r3, [r1, #0]
 8009a92:	2002      	movpl	r0, #2
 8009a94:	4770      	bx	lr
 8009a96:	b298      	uxth	r0, r3
 8009a98:	b9a8      	cbnz	r0, 8009ac6 <__lo0bits+0x52>
 8009a9a:	0c1b      	lsrs	r3, r3, #16
 8009a9c:	2010      	movs	r0, #16
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	b90a      	cbnz	r2, 8009aa6 <__lo0bits+0x32>
 8009aa2:	3008      	adds	r0, #8
 8009aa4:	0a1b      	lsrs	r3, r3, #8
 8009aa6:	071a      	lsls	r2, r3, #28
 8009aa8:	bf04      	itt	eq
 8009aaa:	091b      	lsreq	r3, r3, #4
 8009aac:	3004      	addeq	r0, #4
 8009aae:	079a      	lsls	r2, r3, #30
 8009ab0:	bf04      	itt	eq
 8009ab2:	089b      	lsreq	r3, r3, #2
 8009ab4:	3002      	addeq	r0, #2
 8009ab6:	07da      	lsls	r2, r3, #31
 8009ab8:	d403      	bmi.n	8009ac2 <__lo0bits+0x4e>
 8009aba:	085b      	lsrs	r3, r3, #1
 8009abc:	f100 0001 	add.w	r0, r0, #1
 8009ac0:	d005      	beq.n	8009ace <__lo0bits+0x5a>
 8009ac2:	600b      	str	r3, [r1, #0]
 8009ac4:	4770      	bx	lr
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	e7e9      	b.n	8009a9e <__lo0bits+0x2a>
 8009aca:	2000      	movs	r0, #0
 8009acc:	4770      	bx	lr
 8009ace:	2020      	movs	r0, #32
 8009ad0:	4770      	bx	lr
	...

08009ad4 <__i2b>:
 8009ad4:	b510      	push	{r4, lr}
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	2101      	movs	r1, #1
 8009ada:	f7ff ff03 	bl	80098e4 <_Balloc>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	b928      	cbnz	r0, 8009aee <__i2b+0x1a>
 8009ae2:	4b05      	ldr	r3, [pc, #20]	; (8009af8 <__i2b+0x24>)
 8009ae4:	4805      	ldr	r0, [pc, #20]	; (8009afc <__i2b+0x28>)
 8009ae6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009aea:	f000 fce1 	bl	800a4b0 <__assert_func>
 8009aee:	2301      	movs	r3, #1
 8009af0:	6144      	str	r4, [r0, #20]
 8009af2:	6103      	str	r3, [r0, #16]
 8009af4:	bd10      	pop	{r4, pc}
 8009af6:	bf00      	nop
 8009af8:	0800c4c3 	.word	0x0800c4c3
 8009afc:	0800c4d4 	.word	0x0800c4d4

08009b00 <__multiply>:
 8009b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	4691      	mov	r9, r2
 8009b06:	690a      	ldr	r2, [r1, #16]
 8009b08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	bfb8      	it	lt
 8009b10:	460b      	movlt	r3, r1
 8009b12:	460c      	mov	r4, r1
 8009b14:	bfbc      	itt	lt
 8009b16:	464c      	movlt	r4, r9
 8009b18:	4699      	movlt	r9, r3
 8009b1a:	6927      	ldr	r7, [r4, #16]
 8009b1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b20:	68a3      	ldr	r3, [r4, #8]
 8009b22:	6861      	ldr	r1, [r4, #4]
 8009b24:	eb07 060a 	add.w	r6, r7, sl
 8009b28:	42b3      	cmp	r3, r6
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	bfb8      	it	lt
 8009b2e:	3101      	addlt	r1, #1
 8009b30:	f7ff fed8 	bl	80098e4 <_Balloc>
 8009b34:	b930      	cbnz	r0, 8009b44 <__multiply+0x44>
 8009b36:	4602      	mov	r2, r0
 8009b38:	4b44      	ldr	r3, [pc, #272]	; (8009c4c <__multiply+0x14c>)
 8009b3a:	4845      	ldr	r0, [pc, #276]	; (8009c50 <__multiply+0x150>)
 8009b3c:	f240 115d 	movw	r1, #349	; 0x15d
 8009b40:	f000 fcb6 	bl	800a4b0 <__assert_func>
 8009b44:	f100 0514 	add.w	r5, r0, #20
 8009b48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b4c:	462b      	mov	r3, r5
 8009b4e:	2200      	movs	r2, #0
 8009b50:	4543      	cmp	r3, r8
 8009b52:	d321      	bcc.n	8009b98 <__multiply+0x98>
 8009b54:	f104 0314 	add.w	r3, r4, #20
 8009b58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b5c:	f109 0314 	add.w	r3, r9, #20
 8009b60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b64:	9202      	str	r2, [sp, #8]
 8009b66:	1b3a      	subs	r2, r7, r4
 8009b68:	3a15      	subs	r2, #21
 8009b6a:	f022 0203 	bic.w	r2, r2, #3
 8009b6e:	3204      	adds	r2, #4
 8009b70:	f104 0115 	add.w	r1, r4, #21
 8009b74:	428f      	cmp	r7, r1
 8009b76:	bf38      	it	cc
 8009b78:	2204      	movcc	r2, #4
 8009b7a:	9201      	str	r2, [sp, #4]
 8009b7c:	9a02      	ldr	r2, [sp, #8]
 8009b7e:	9303      	str	r3, [sp, #12]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d80c      	bhi.n	8009b9e <__multiply+0x9e>
 8009b84:	2e00      	cmp	r6, #0
 8009b86:	dd03      	ble.n	8009b90 <__multiply+0x90>
 8009b88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d05a      	beq.n	8009c46 <__multiply+0x146>
 8009b90:	6106      	str	r6, [r0, #16]
 8009b92:	b005      	add	sp, #20
 8009b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b98:	f843 2b04 	str.w	r2, [r3], #4
 8009b9c:	e7d8      	b.n	8009b50 <__multiply+0x50>
 8009b9e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ba2:	f1ba 0f00 	cmp.w	sl, #0
 8009ba6:	d024      	beq.n	8009bf2 <__multiply+0xf2>
 8009ba8:	f104 0e14 	add.w	lr, r4, #20
 8009bac:	46a9      	mov	r9, r5
 8009bae:	f04f 0c00 	mov.w	ip, #0
 8009bb2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009bb6:	f8d9 1000 	ldr.w	r1, [r9]
 8009bba:	fa1f fb82 	uxth.w	fp, r2
 8009bbe:	b289      	uxth	r1, r1
 8009bc0:	fb0a 110b 	mla	r1, sl, fp, r1
 8009bc4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009bc8:	f8d9 2000 	ldr.w	r2, [r9]
 8009bcc:	4461      	add	r1, ip
 8009bce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009bd2:	fb0a c20b 	mla	r2, sl, fp, ip
 8009bd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009bda:	b289      	uxth	r1, r1
 8009bdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009be0:	4577      	cmp	r7, lr
 8009be2:	f849 1b04 	str.w	r1, [r9], #4
 8009be6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009bea:	d8e2      	bhi.n	8009bb2 <__multiply+0xb2>
 8009bec:	9a01      	ldr	r2, [sp, #4]
 8009bee:	f845 c002 	str.w	ip, [r5, r2]
 8009bf2:	9a03      	ldr	r2, [sp, #12]
 8009bf4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	f1b9 0f00 	cmp.w	r9, #0
 8009bfe:	d020      	beq.n	8009c42 <__multiply+0x142>
 8009c00:	6829      	ldr	r1, [r5, #0]
 8009c02:	f104 0c14 	add.w	ip, r4, #20
 8009c06:	46ae      	mov	lr, r5
 8009c08:	f04f 0a00 	mov.w	sl, #0
 8009c0c:	f8bc b000 	ldrh.w	fp, [ip]
 8009c10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c14:	fb09 220b 	mla	r2, r9, fp, r2
 8009c18:	4492      	add	sl, r2
 8009c1a:	b289      	uxth	r1, r1
 8009c1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009c20:	f84e 1b04 	str.w	r1, [lr], #4
 8009c24:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009c28:	f8be 1000 	ldrh.w	r1, [lr]
 8009c2c:	0c12      	lsrs	r2, r2, #16
 8009c2e:	fb09 1102 	mla	r1, r9, r2, r1
 8009c32:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009c36:	4567      	cmp	r7, ip
 8009c38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c3c:	d8e6      	bhi.n	8009c0c <__multiply+0x10c>
 8009c3e:	9a01      	ldr	r2, [sp, #4]
 8009c40:	50a9      	str	r1, [r5, r2]
 8009c42:	3504      	adds	r5, #4
 8009c44:	e79a      	b.n	8009b7c <__multiply+0x7c>
 8009c46:	3e01      	subs	r6, #1
 8009c48:	e79c      	b.n	8009b84 <__multiply+0x84>
 8009c4a:	bf00      	nop
 8009c4c:	0800c4c3 	.word	0x0800c4c3
 8009c50:	0800c4d4 	.word	0x0800c4d4

08009c54 <__pow5mult>:
 8009c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c58:	4615      	mov	r5, r2
 8009c5a:	f012 0203 	ands.w	r2, r2, #3
 8009c5e:	4606      	mov	r6, r0
 8009c60:	460f      	mov	r7, r1
 8009c62:	d007      	beq.n	8009c74 <__pow5mult+0x20>
 8009c64:	4c25      	ldr	r4, [pc, #148]	; (8009cfc <__pow5mult+0xa8>)
 8009c66:	3a01      	subs	r2, #1
 8009c68:	2300      	movs	r3, #0
 8009c6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c6e:	f7ff fe9b 	bl	80099a8 <__multadd>
 8009c72:	4607      	mov	r7, r0
 8009c74:	10ad      	asrs	r5, r5, #2
 8009c76:	d03d      	beq.n	8009cf4 <__pow5mult+0xa0>
 8009c78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c7a:	b97c      	cbnz	r4, 8009c9c <__pow5mult+0x48>
 8009c7c:	2010      	movs	r0, #16
 8009c7e:	f7ff fe29 	bl	80098d4 <malloc>
 8009c82:	4602      	mov	r2, r0
 8009c84:	6270      	str	r0, [r6, #36]	; 0x24
 8009c86:	b928      	cbnz	r0, 8009c94 <__pow5mult+0x40>
 8009c88:	4b1d      	ldr	r3, [pc, #116]	; (8009d00 <__pow5mult+0xac>)
 8009c8a:	481e      	ldr	r0, [pc, #120]	; (8009d04 <__pow5mult+0xb0>)
 8009c8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009c90:	f000 fc0e 	bl	800a4b0 <__assert_func>
 8009c94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c98:	6004      	str	r4, [r0, #0]
 8009c9a:	60c4      	str	r4, [r0, #12]
 8009c9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ca0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ca4:	b94c      	cbnz	r4, 8009cba <__pow5mult+0x66>
 8009ca6:	f240 2171 	movw	r1, #625	; 0x271
 8009caa:	4630      	mov	r0, r6
 8009cac:	f7ff ff12 	bl	8009ad4 <__i2b>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	6003      	str	r3, [r0, #0]
 8009cba:	f04f 0900 	mov.w	r9, #0
 8009cbe:	07eb      	lsls	r3, r5, #31
 8009cc0:	d50a      	bpl.n	8009cd8 <__pow5mult+0x84>
 8009cc2:	4639      	mov	r1, r7
 8009cc4:	4622      	mov	r2, r4
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	f7ff ff1a 	bl	8009b00 <__multiply>
 8009ccc:	4639      	mov	r1, r7
 8009cce:	4680      	mov	r8, r0
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f7ff fe47 	bl	8009964 <_Bfree>
 8009cd6:	4647      	mov	r7, r8
 8009cd8:	106d      	asrs	r5, r5, #1
 8009cda:	d00b      	beq.n	8009cf4 <__pow5mult+0xa0>
 8009cdc:	6820      	ldr	r0, [r4, #0]
 8009cde:	b938      	cbnz	r0, 8009cf0 <__pow5mult+0x9c>
 8009ce0:	4622      	mov	r2, r4
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	f7ff ff0b 	bl	8009b00 <__multiply>
 8009cea:	6020      	str	r0, [r4, #0]
 8009cec:	f8c0 9000 	str.w	r9, [r0]
 8009cf0:	4604      	mov	r4, r0
 8009cf2:	e7e4      	b.n	8009cbe <__pow5mult+0x6a>
 8009cf4:	4638      	mov	r0, r7
 8009cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cfa:	bf00      	nop
 8009cfc:	0800c620 	.word	0x0800c620
 8009d00:	0800c451 	.word	0x0800c451
 8009d04:	0800c4d4 	.word	0x0800c4d4

08009d08 <__lshift>:
 8009d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d0c:	460c      	mov	r4, r1
 8009d0e:	6849      	ldr	r1, [r1, #4]
 8009d10:	6923      	ldr	r3, [r4, #16]
 8009d12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d16:	68a3      	ldr	r3, [r4, #8]
 8009d18:	4607      	mov	r7, r0
 8009d1a:	4691      	mov	r9, r2
 8009d1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d20:	f108 0601 	add.w	r6, r8, #1
 8009d24:	42b3      	cmp	r3, r6
 8009d26:	db0b      	blt.n	8009d40 <__lshift+0x38>
 8009d28:	4638      	mov	r0, r7
 8009d2a:	f7ff fddb 	bl	80098e4 <_Balloc>
 8009d2e:	4605      	mov	r5, r0
 8009d30:	b948      	cbnz	r0, 8009d46 <__lshift+0x3e>
 8009d32:	4602      	mov	r2, r0
 8009d34:	4b2a      	ldr	r3, [pc, #168]	; (8009de0 <__lshift+0xd8>)
 8009d36:	482b      	ldr	r0, [pc, #172]	; (8009de4 <__lshift+0xdc>)
 8009d38:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009d3c:	f000 fbb8 	bl	800a4b0 <__assert_func>
 8009d40:	3101      	adds	r1, #1
 8009d42:	005b      	lsls	r3, r3, #1
 8009d44:	e7ee      	b.n	8009d24 <__lshift+0x1c>
 8009d46:	2300      	movs	r3, #0
 8009d48:	f100 0114 	add.w	r1, r0, #20
 8009d4c:	f100 0210 	add.w	r2, r0, #16
 8009d50:	4618      	mov	r0, r3
 8009d52:	4553      	cmp	r3, sl
 8009d54:	db37      	blt.n	8009dc6 <__lshift+0xbe>
 8009d56:	6920      	ldr	r0, [r4, #16]
 8009d58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d5c:	f104 0314 	add.w	r3, r4, #20
 8009d60:	f019 091f 	ands.w	r9, r9, #31
 8009d64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009d6c:	d02f      	beq.n	8009dce <__lshift+0xc6>
 8009d6e:	f1c9 0e20 	rsb	lr, r9, #32
 8009d72:	468a      	mov	sl, r1
 8009d74:	f04f 0c00 	mov.w	ip, #0
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	fa02 f209 	lsl.w	r2, r2, r9
 8009d7e:	ea42 020c 	orr.w	r2, r2, ip
 8009d82:	f84a 2b04 	str.w	r2, [sl], #4
 8009d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d8a:	4298      	cmp	r0, r3
 8009d8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009d90:	d8f2      	bhi.n	8009d78 <__lshift+0x70>
 8009d92:	1b03      	subs	r3, r0, r4
 8009d94:	3b15      	subs	r3, #21
 8009d96:	f023 0303 	bic.w	r3, r3, #3
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	f104 0215 	add.w	r2, r4, #21
 8009da0:	4290      	cmp	r0, r2
 8009da2:	bf38      	it	cc
 8009da4:	2304      	movcc	r3, #4
 8009da6:	f841 c003 	str.w	ip, [r1, r3]
 8009daa:	f1bc 0f00 	cmp.w	ip, #0
 8009dae:	d001      	beq.n	8009db4 <__lshift+0xac>
 8009db0:	f108 0602 	add.w	r6, r8, #2
 8009db4:	3e01      	subs	r6, #1
 8009db6:	4638      	mov	r0, r7
 8009db8:	612e      	str	r6, [r5, #16]
 8009dba:	4621      	mov	r1, r4
 8009dbc:	f7ff fdd2 	bl	8009964 <_Bfree>
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009dca:	3301      	adds	r3, #1
 8009dcc:	e7c1      	b.n	8009d52 <__lshift+0x4a>
 8009dce:	3904      	subs	r1, #4
 8009dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dd4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009dd8:	4298      	cmp	r0, r3
 8009dda:	d8f9      	bhi.n	8009dd0 <__lshift+0xc8>
 8009ddc:	e7ea      	b.n	8009db4 <__lshift+0xac>
 8009dde:	bf00      	nop
 8009de0:	0800c4c3 	.word	0x0800c4c3
 8009de4:	0800c4d4 	.word	0x0800c4d4

08009de8 <__mcmp>:
 8009de8:	b530      	push	{r4, r5, lr}
 8009dea:	6902      	ldr	r2, [r0, #16]
 8009dec:	690c      	ldr	r4, [r1, #16]
 8009dee:	1b12      	subs	r2, r2, r4
 8009df0:	d10e      	bne.n	8009e10 <__mcmp+0x28>
 8009df2:	f100 0314 	add.w	r3, r0, #20
 8009df6:	3114      	adds	r1, #20
 8009df8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009dfc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e08:	42a5      	cmp	r5, r4
 8009e0a:	d003      	beq.n	8009e14 <__mcmp+0x2c>
 8009e0c:	d305      	bcc.n	8009e1a <__mcmp+0x32>
 8009e0e:	2201      	movs	r2, #1
 8009e10:	4610      	mov	r0, r2
 8009e12:	bd30      	pop	{r4, r5, pc}
 8009e14:	4283      	cmp	r3, r0
 8009e16:	d3f3      	bcc.n	8009e00 <__mcmp+0x18>
 8009e18:	e7fa      	b.n	8009e10 <__mcmp+0x28>
 8009e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e1e:	e7f7      	b.n	8009e10 <__mcmp+0x28>

08009e20 <__mdiff>:
 8009e20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	460c      	mov	r4, r1
 8009e26:	4606      	mov	r6, r0
 8009e28:	4611      	mov	r1, r2
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	4690      	mov	r8, r2
 8009e2e:	f7ff ffdb 	bl	8009de8 <__mcmp>
 8009e32:	1e05      	subs	r5, r0, #0
 8009e34:	d110      	bne.n	8009e58 <__mdiff+0x38>
 8009e36:	4629      	mov	r1, r5
 8009e38:	4630      	mov	r0, r6
 8009e3a:	f7ff fd53 	bl	80098e4 <_Balloc>
 8009e3e:	b930      	cbnz	r0, 8009e4e <__mdiff+0x2e>
 8009e40:	4b3a      	ldr	r3, [pc, #232]	; (8009f2c <__mdiff+0x10c>)
 8009e42:	4602      	mov	r2, r0
 8009e44:	f240 2132 	movw	r1, #562	; 0x232
 8009e48:	4839      	ldr	r0, [pc, #228]	; (8009f30 <__mdiff+0x110>)
 8009e4a:	f000 fb31 	bl	800a4b0 <__assert_func>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e58:	bfa4      	itt	ge
 8009e5a:	4643      	movge	r3, r8
 8009e5c:	46a0      	movge	r8, r4
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e64:	bfa6      	itte	ge
 8009e66:	461c      	movge	r4, r3
 8009e68:	2500      	movge	r5, #0
 8009e6a:	2501      	movlt	r5, #1
 8009e6c:	f7ff fd3a 	bl	80098e4 <_Balloc>
 8009e70:	b920      	cbnz	r0, 8009e7c <__mdiff+0x5c>
 8009e72:	4b2e      	ldr	r3, [pc, #184]	; (8009f2c <__mdiff+0x10c>)
 8009e74:	4602      	mov	r2, r0
 8009e76:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009e7a:	e7e5      	b.n	8009e48 <__mdiff+0x28>
 8009e7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e80:	6926      	ldr	r6, [r4, #16]
 8009e82:	60c5      	str	r5, [r0, #12]
 8009e84:	f104 0914 	add.w	r9, r4, #20
 8009e88:	f108 0514 	add.w	r5, r8, #20
 8009e8c:	f100 0e14 	add.w	lr, r0, #20
 8009e90:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009e94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009e98:	f108 0210 	add.w	r2, r8, #16
 8009e9c:	46f2      	mov	sl, lr
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ea4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ea8:	fa1f f883 	uxth.w	r8, r3
 8009eac:	fa11 f18b 	uxtah	r1, r1, fp
 8009eb0:	0c1b      	lsrs	r3, r3, #16
 8009eb2:	eba1 0808 	sub.w	r8, r1, r8
 8009eb6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009eba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009ebe:	fa1f f888 	uxth.w	r8, r8
 8009ec2:	1419      	asrs	r1, r3, #16
 8009ec4:	454e      	cmp	r6, r9
 8009ec6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009eca:	f84a 3b04 	str.w	r3, [sl], #4
 8009ece:	d8e7      	bhi.n	8009ea0 <__mdiff+0x80>
 8009ed0:	1b33      	subs	r3, r6, r4
 8009ed2:	3b15      	subs	r3, #21
 8009ed4:	f023 0303 	bic.w	r3, r3, #3
 8009ed8:	3304      	adds	r3, #4
 8009eda:	3415      	adds	r4, #21
 8009edc:	42a6      	cmp	r6, r4
 8009ede:	bf38      	it	cc
 8009ee0:	2304      	movcc	r3, #4
 8009ee2:	441d      	add	r5, r3
 8009ee4:	4473      	add	r3, lr
 8009ee6:	469e      	mov	lr, r3
 8009ee8:	462e      	mov	r6, r5
 8009eea:	4566      	cmp	r6, ip
 8009eec:	d30e      	bcc.n	8009f0c <__mdiff+0xec>
 8009eee:	f10c 0203 	add.w	r2, ip, #3
 8009ef2:	1b52      	subs	r2, r2, r5
 8009ef4:	f022 0203 	bic.w	r2, r2, #3
 8009ef8:	3d03      	subs	r5, #3
 8009efa:	45ac      	cmp	ip, r5
 8009efc:	bf38      	it	cc
 8009efe:	2200      	movcc	r2, #0
 8009f00:	441a      	add	r2, r3
 8009f02:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009f06:	b17b      	cbz	r3, 8009f28 <__mdiff+0x108>
 8009f08:	6107      	str	r7, [r0, #16]
 8009f0a:	e7a3      	b.n	8009e54 <__mdiff+0x34>
 8009f0c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f10:	fa11 f288 	uxtah	r2, r1, r8
 8009f14:	1414      	asrs	r4, r2, #16
 8009f16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f1a:	b292      	uxth	r2, r2
 8009f1c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f20:	f84e 2b04 	str.w	r2, [lr], #4
 8009f24:	1421      	asrs	r1, r4, #16
 8009f26:	e7e0      	b.n	8009eea <__mdiff+0xca>
 8009f28:	3f01      	subs	r7, #1
 8009f2a:	e7ea      	b.n	8009f02 <__mdiff+0xe2>
 8009f2c:	0800c4c3 	.word	0x0800c4c3
 8009f30:	0800c4d4 	.word	0x0800c4d4

08009f34 <__d2b>:
 8009f34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f38:	4689      	mov	r9, r1
 8009f3a:	2101      	movs	r1, #1
 8009f3c:	ec57 6b10 	vmov	r6, r7, d0
 8009f40:	4690      	mov	r8, r2
 8009f42:	f7ff fccf 	bl	80098e4 <_Balloc>
 8009f46:	4604      	mov	r4, r0
 8009f48:	b930      	cbnz	r0, 8009f58 <__d2b+0x24>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	4b25      	ldr	r3, [pc, #148]	; (8009fe4 <__d2b+0xb0>)
 8009f4e:	4826      	ldr	r0, [pc, #152]	; (8009fe8 <__d2b+0xb4>)
 8009f50:	f240 310a 	movw	r1, #778	; 0x30a
 8009f54:	f000 faac 	bl	800a4b0 <__assert_func>
 8009f58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009f5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f60:	bb35      	cbnz	r5, 8009fb0 <__d2b+0x7c>
 8009f62:	2e00      	cmp	r6, #0
 8009f64:	9301      	str	r3, [sp, #4]
 8009f66:	d028      	beq.n	8009fba <__d2b+0x86>
 8009f68:	4668      	mov	r0, sp
 8009f6a:	9600      	str	r6, [sp, #0]
 8009f6c:	f7ff fd82 	bl	8009a74 <__lo0bits>
 8009f70:	9900      	ldr	r1, [sp, #0]
 8009f72:	b300      	cbz	r0, 8009fb6 <__d2b+0x82>
 8009f74:	9a01      	ldr	r2, [sp, #4]
 8009f76:	f1c0 0320 	rsb	r3, r0, #32
 8009f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f7e:	430b      	orrs	r3, r1
 8009f80:	40c2      	lsrs	r2, r0
 8009f82:	6163      	str	r3, [r4, #20]
 8009f84:	9201      	str	r2, [sp, #4]
 8009f86:	9b01      	ldr	r3, [sp, #4]
 8009f88:	61a3      	str	r3, [r4, #24]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	bf14      	ite	ne
 8009f8e:	2202      	movne	r2, #2
 8009f90:	2201      	moveq	r2, #1
 8009f92:	6122      	str	r2, [r4, #16]
 8009f94:	b1d5      	cbz	r5, 8009fcc <__d2b+0x98>
 8009f96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f9a:	4405      	add	r5, r0
 8009f9c:	f8c9 5000 	str.w	r5, [r9]
 8009fa0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009fa4:	f8c8 0000 	str.w	r0, [r8]
 8009fa8:	4620      	mov	r0, r4
 8009faa:	b003      	add	sp, #12
 8009fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fb4:	e7d5      	b.n	8009f62 <__d2b+0x2e>
 8009fb6:	6161      	str	r1, [r4, #20]
 8009fb8:	e7e5      	b.n	8009f86 <__d2b+0x52>
 8009fba:	a801      	add	r0, sp, #4
 8009fbc:	f7ff fd5a 	bl	8009a74 <__lo0bits>
 8009fc0:	9b01      	ldr	r3, [sp, #4]
 8009fc2:	6163      	str	r3, [r4, #20]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	6122      	str	r2, [r4, #16]
 8009fc8:	3020      	adds	r0, #32
 8009fca:	e7e3      	b.n	8009f94 <__d2b+0x60>
 8009fcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fd4:	f8c9 0000 	str.w	r0, [r9]
 8009fd8:	6918      	ldr	r0, [r3, #16]
 8009fda:	f7ff fd2b 	bl	8009a34 <__hi0bits>
 8009fde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fe2:	e7df      	b.n	8009fa4 <__d2b+0x70>
 8009fe4:	0800c4c3 	.word	0x0800c4c3
 8009fe8:	0800c4d4 	.word	0x0800c4d4

08009fec <_calloc_r>:
 8009fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fee:	fba1 2402 	umull	r2, r4, r1, r2
 8009ff2:	b94c      	cbnz	r4, 800a008 <_calloc_r+0x1c>
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	9201      	str	r2, [sp, #4]
 8009ff8:	f000 f87a 	bl	800a0f0 <_malloc_r>
 8009ffc:	9a01      	ldr	r2, [sp, #4]
 8009ffe:	4605      	mov	r5, r0
 800a000:	b930      	cbnz	r0, 800a010 <_calloc_r+0x24>
 800a002:	4628      	mov	r0, r5
 800a004:	b003      	add	sp, #12
 800a006:	bd30      	pop	{r4, r5, pc}
 800a008:	220c      	movs	r2, #12
 800a00a:	6002      	str	r2, [r0, #0]
 800a00c:	2500      	movs	r5, #0
 800a00e:	e7f8      	b.n	800a002 <_calloc_r+0x16>
 800a010:	4621      	mov	r1, r4
 800a012:	f7fe f91b 	bl	800824c <memset>
 800a016:	e7f4      	b.n	800a002 <_calloc_r+0x16>

0800a018 <_free_r>:
 800a018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a01a:	2900      	cmp	r1, #0
 800a01c:	d044      	beq.n	800a0a8 <_free_r+0x90>
 800a01e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a022:	9001      	str	r0, [sp, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	f1a1 0404 	sub.w	r4, r1, #4
 800a02a:	bfb8      	it	lt
 800a02c:	18e4      	addlt	r4, r4, r3
 800a02e:	f000 fa9b 	bl	800a568 <__malloc_lock>
 800a032:	4a1e      	ldr	r2, [pc, #120]	; (800a0ac <_free_r+0x94>)
 800a034:	9801      	ldr	r0, [sp, #4]
 800a036:	6813      	ldr	r3, [r2, #0]
 800a038:	b933      	cbnz	r3, 800a048 <_free_r+0x30>
 800a03a:	6063      	str	r3, [r4, #4]
 800a03c:	6014      	str	r4, [r2, #0]
 800a03e:	b003      	add	sp, #12
 800a040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a044:	f000 ba96 	b.w	800a574 <__malloc_unlock>
 800a048:	42a3      	cmp	r3, r4
 800a04a:	d908      	bls.n	800a05e <_free_r+0x46>
 800a04c:	6825      	ldr	r5, [r4, #0]
 800a04e:	1961      	adds	r1, r4, r5
 800a050:	428b      	cmp	r3, r1
 800a052:	bf01      	itttt	eq
 800a054:	6819      	ldreq	r1, [r3, #0]
 800a056:	685b      	ldreq	r3, [r3, #4]
 800a058:	1949      	addeq	r1, r1, r5
 800a05a:	6021      	streq	r1, [r4, #0]
 800a05c:	e7ed      	b.n	800a03a <_free_r+0x22>
 800a05e:	461a      	mov	r2, r3
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	b10b      	cbz	r3, 800a068 <_free_r+0x50>
 800a064:	42a3      	cmp	r3, r4
 800a066:	d9fa      	bls.n	800a05e <_free_r+0x46>
 800a068:	6811      	ldr	r1, [r2, #0]
 800a06a:	1855      	adds	r5, r2, r1
 800a06c:	42a5      	cmp	r5, r4
 800a06e:	d10b      	bne.n	800a088 <_free_r+0x70>
 800a070:	6824      	ldr	r4, [r4, #0]
 800a072:	4421      	add	r1, r4
 800a074:	1854      	adds	r4, r2, r1
 800a076:	42a3      	cmp	r3, r4
 800a078:	6011      	str	r1, [r2, #0]
 800a07a:	d1e0      	bne.n	800a03e <_free_r+0x26>
 800a07c:	681c      	ldr	r4, [r3, #0]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	6053      	str	r3, [r2, #4]
 800a082:	4421      	add	r1, r4
 800a084:	6011      	str	r1, [r2, #0]
 800a086:	e7da      	b.n	800a03e <_free_r+0x26>
 800a088:	d902      	bls.n	800a090 <_free_r+0x78>
 800a08a:	230c      	movs	r3, #12
 800a08c:	6003      	str	r3, [r0, #0]
 800a08e:	e7d6      	b.n	800a03e <_free_r+0x26>
 800a090:	6825      	ldr	r5, [r4, #0]
 800a092:	1961      	adds	r1, r4, r5
 800a094:	428b      	cmp	r3, r1
 800a096:	bf04      	itt	eq
 800a098:	6819      	ldreq	r1, [r3, #0]
 800a09a:	685b      	ldreq	r3, [r3, #4]
 800a09c:	6063      	str	r3, [r4, #4]
 800a09e:	bf04      	itt	eq
 800a0a0:	1949      	addeq	r1, r1, r5
 800a0a2:	6021      	streq	r1, [r4, #0]
 800a0a4:	6054      	str	r4, [r2, #4]
 800a0a6:	e7ca      	b.n	800a03e <_free_r+0x26>
 800a0a8:	b003      	add	sp, #12
 800a0aa:	bd30      	pop	{r4, r5, pc}
 800a0ac:	20005f14 	.word	0x20005f14

0800a0b0 <sbrk_aligned>:
 800a0b0:	b570      	push	{r4, r5, r6, lr}
 800a0b2:	4e0e      	ldr	r6, [pc, #56]	; (800a0ec <sbrk_aligned+0x3c>)
 800a0b4:	460c      	mov	r4, r1
 800a0b6:	6831      	ldr	r1, [r6, #0]
 800a0b8:	4605      	mov	r5, r0
 800a0ba:	b911      	cbnz	r1, 800a0c2 <sbrk_aligned+0x12>
 800a0bc:	f000 f9e8 	bl	800a490 <_sbrk_r>
 800a0c0:	6030      	str	r0, [r6, #0]
 800a0c2:	4621      	mov	r1, r4
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	f000 f9e3 	bl	800a490 <_sbrk_r>
 800a0ca:	1c43      	adds	r3, r0, #1
 800a0cc:	d00a      	beq.n	800a0e4 <sbrk_aligned+0x34>
 800a0ce:	1cc4      	adds	r4, r0, #3
 800a0d0:	f024 0403 	bic.w	r4, r4, #3
 800a0d4:	42a0      	cmp	r0, r4
 800a0d6:	d007      	beq.n	800a0e8 <sbrk_aligned+0x38>
 800a0d8:	1a21      	subs	r1, r4, r0
 800a0da:	4628      	mov	r0, r5
 800a0dc:	f000 f9d8 	bl	800a490 <_sbrk_r>
 800a0e0:	3001      	adds	r0, #1
 800a0e2:	d101      	bne.n	800a0e8 <sbrk_aligned+0x38>
 800a0e4:	f04f 34ff 	mov.w	r4, #4294967295
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	bd70      	pop	{r4, r5, r6, pc}
 800a0ec:	20005f18 	.word	0x20005f18

0800a0f0 <_malloc_r>:
 800a0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f4:	1ccd      	adds	r5, r1, #3
 800a0f6:	f025 0503 	bic.w	r5, r5, #3
 800a0fa:	3508      	adds	r5, #8
 800a0fc:	2d0c      	cmp	r5, #12
 800a0fe:	bf38      	it	cc
 800a100:	250c      	movcc	r5, #12
 800a102:	2d00      	cmp	r5, #0
 800a104:	4607      	mov	r7, r0
 800a106:	db01      	blt.n	800a10c <_malloc_r+0x1c>
 800a108:	42a9      	cmp	r1, r5
 800a10a:	d905      	bls.n	800a118 <_malloc_r+0x28>
 800a10c:	230c      	movs	r3, #12
 800a10e:	603b      	str	r3, [r7, #0]
 800a110:	2600      	movs	r6, #0
 800a112:	4630      	mov	r0, r6
 800a114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a118:	4e2e      	ldr	r6, [pc, #184]	; (800a1d4 <_malloc_r+0xe4>)
 800a11a:	f000 fa25 	bl	800a568 <__malloc_lock>
 800a11e:	6833      	ldr	r3, [r6, #0]
 800a120:	461c      	mov	r4, r3
 800a122:	bb34      	cbnz	r4, 800a172 <_malloc_r+0x82>
 800a124:	4629      	mov	r1, r5
 800a126:	4638      	mov	r0, r7
 800a128:	f7ff ffc2 	bl	800a0b0 <sbrk_aligned>
 800a12c:	1c43      	adds	r3, r0, #1
 800a12e:	4604      	mov	r4, r0
 800a130:	d14d      	bne.n	800a1ce <_malloc_r+0xde>
 800a132:	6834      	ldr	r4, [r6, #0]
 800a134:	4626      	mov	r6, r4
 800a136:	2e00      	cmp	r6, #0
 800a138:	d140      	bne.n	800a1bc <_malloc_r+0xcc>
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	4631      	mov	r1, r6
 800a13e:	4638      	mov	r0, r7
 800a140:	eb04 0803 	add.w	r8, r4, r3
 800a144:	f000 f9a4 	bl	800a490 <_sbrk_r>
 800a148:	4580      	cmp	r8, r0
 800a14a:	d13a      	bne.n	800a1c2 <_malloc_r+0xd2>
 800a14c:	6821      	ldr	r1, [r4, #0]
 800a14e:	3503      	adds	r5, #3
 800a150:	1a6d      	subs	r5, r5, r1
 800a152:	f025 0503 	bic.w	r5, r5, #3
 800a156:	3508      	adds	r5, #8
 800a158:	2d0c      	cmp	r5, #12
 800a15a:	bf38      	it	cc
 800a15c:	250c      	movcc	r5, #12
 800a15e:	4629      	mov	r1, r5
 800a160:	4638      	mov	r0, r7
 800a162:	f7ff ffa5 	bl	800a0b0 <sbrk_aligned>
 800a166:	3001      	adds	r0, #1
 800a168:	d02b      	beq.n	800a1c2 <_malloc_r+0xd2>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	442b      	add	r3, r5
 800a16e:	6023      	str	r3, [r4, #0]
 800a170:	e00e      	b.n	800a190 <_malloc_r+0xa0>
 800a172:	6822      	ldr	r2, [r4, #0]
 800a174:	1b52      	subs	r2, r2, r5
 800a176:	d41e      	bmi.n	800a1b6 <_malloc_r+0xc6>
 800a178:	2a0b      	cmp	r2, #11
 800a17a:	d916      	bls.n	800a1aa <_malloc_r+0xba>
 800a17c:	1961      	adds	r1, r4, r5
 800a17e:	42a3      	cmp	r3, r4
 800a180:	6025      	str	r5, [r4, #0]
 800a182:	bf18      	it	ne
 800a184:	6059      	strne	r1, [r3, #4]
 800a186:	6863      	ldr	r3, [r4, #4]
 800a188:	bf08      	it	eq
 800a18a:	6031      	streq	r1, [r6, #0]
 800a18c:	5162      	str	r2, [r4, r5]
 800a18e:	604b      	str	r3, [r1, #4]
 800a190:	4638      	mov	r0, r7
 800a192:	f104 060b 	add.w	r6, r4, #11
 800a196:	f000 f9ed 	bl	800a574 <__malloc_unlock>
 800a19a:	f026 0607 	bic.w	r6, r6, #7
 800a19e:	1d23      	adds	r3, r4, #4
 800a1a0:	1af2      	subs	r2, r6, r3
 800a1a2:	d0b6      	beq.n	800a112 <_malloc_r+0x22>
 800a1a4:	1b9b      	subs	r3, r3, r6
 800a1a6:	50a3      	str	r3, [r4, r2]
 800a1a8:	e7b3      	b.n	800a112 <_malloc_r+0x22>
 800a1aa:	6862      	ldr	r2, [r4, #4]
 800a1ac:	42a3      	cmp	r3, r4
 800a1ae:	bf0c      	ite	eq
 800a1b0:	6032      	streq	r2, [r6, #0]
 800a1b2:	605a      	strne	r2, [r3, #4]
 800a1b4:	e7ec      	b.n	800a190 <_malloc_r+0xa0>
 800a1b6:	4623      	mov	r3, r4
 800a1b8:	6864      	ldr	r4, [r4, #4]
 800a1ba:	e7b2      	b.n	800a122 <_malloc_r+0x32>
 800a1bc:	4634      	mov	r4, r6
 800a1be:	6876      	ldr	r6, [r6, #4]
 800a1c0:	e7b9      	b.n	800a136 <_malloc_r+0x46>
 800a1c2:	230c      	movs	r3, #12
 800a1c4:	603b      	str	r3, [r7, #0]
 800a1c6:	4638      	mov	r0, r7
 800a1c8:	f000 f9d4 	bl	800a574 <__malloc_unlock>
 800a1cc:	e7a1      	b.n	800a112 <_malloc_r+0x22>
 800a1ce:	6025      	str	r5, [r4, #0]
 800a1d0:	e7de      	b.n	800a190 <_malloc_r+0xa0>
 800a1d2:	bf00      	nop
 800a1d4:	20005f14 	.word	0x20005f14

0800a1d8 <__ssputs_r>:
 800a1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1dc:	688e      	ldr	r6, [r1, #8]
 800a1de:	429e      	cmp	r6, r3
 800a1e0:	4682      	mov	sl, r0
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	4690      	mov	r8, r2
 800a1e6:	461f      	mov	r7, r3
 800a1e8:	d838      	bhi.n	800a25c <__ssputs_r+0x84>
 800a1ea:	898a      	ldrh	r2, [r1, #12]
 800a1ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1f0:	d032      	beq.n	800a258 <__ssputs_r+0x80>
 800a1f2:	6825      	ldr	r5, [r4, #0]
 800a1f4:	6909      	ldr	r1, [r1, #16]
 800a1f6:	eba5 0901 	sub.w	r9, r5, r1
 800a1fa:	6965      	ldr	r5, [r4, #20]
 800a1fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a200:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a204:	3301      	adds	r3, #1
 800a206:	444b      	add	r3, r9
 800a208:	106d      	asrs	r5, r5, #1
 800a20a:	429d      	cmp	r5, r3
 800a20c:	bf38      	it	cc
 800a20e:	461d      	movcc	r5, r3
 800a210:	0553      	lsls	r3, r2, #21
 800a212:	d531      	bpl.n	800a278 <__ssputs_r+0xa0>
 800a214:	4629      	mov	r1, r5
 800a216:	f7ff ff6b 	bl	800a0f0 <_malloc_r>
 800a21a:	4606      	mov	r6, r0
 800a21c:	b950      	cbnz	r0, 800a234 <__ssputs_r+0x5c>
 800a21e:	230c      	movs	r3, #12
 800a220:	f8ca 3000 	str.w	r3, [sl]
 800a224:	89a3      	ldrh	r3, [r4, #12]
 800a226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a22a:	81a3      	strh	r3, [r4, #12]
 800a22c:	f04f 30ff 	mov.w	r0, #4294967295
 800a230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a234:	6921      	ldr	r1, [r4, #16]
 800a236:	464a      	mov	r2, r9
 800a238:	f7fd fffa 	bl	8008230 <memcpy>
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a246:	81a3      	strh	r3, [r4, #12]
 800a248:	6126      	str	r6, [r4, #16]
 800a24a:	6165      	str	r5, [r4, #20]
 800a24c:	444e      	add	r6, r9
 800a24e:	eba5 0509 	sub.w	r5, r5, r9
 800a252:	6026      	str	r6, [r4, #0]
 800a254:	60a5      	str	r5, [r4, #8]
 800a256:	463e      	mov	r6, r7
 800a258:	42be      	cmp	r6, r7
 800a25a:	d900      	bls.n	800a25e <__ssputs_r+0x86>
 800a25c:	463e      	mov	r6, r7
 800a25e:	6820      	ldr	r0, [r4, #0]
 800a260:	4632      	mov	r2, r6
 800a262:	4641      	mov	r1, r8
 800a264:	f000 f966 	bl	800a534 <memmove>
 800a268:	68a3      	ldr	r3, [r4, #8]
 800a26a:	1b9b      	subs	r3, r3, r6
 800a26c:	60a3      	str	r3, [r4, #8]
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	4433      	add	r3, r6
 800a272:	6023      	str	r3, [r4, #0]
 800a274:	2000      	movs	r0, #0
 800a276:	e7db      	b.n	800a230 <__ssputs_r+0x58>
 800a278:	462a      	mov	r2, r5
 800a27a:	f000 f981 	bl	800a580 <_realloc_r>
 800a27e:	4606      	mov	r6, r0
 800a280:	2800      	cmp	r0, #0
 800a282:	d1e1      	bne.n	800a248 <__ssputs_r+0x70>
 800a284:	6921      	ldr	r1, [r4, #16]
 800a286:	4650      	mov	r0, sl
 800a288:	f7ff fec6 	bl	800a018 <_free_r>
 800a28c:	e7c7      	b.n	800a21e <__ssputs_r+0x46>
	...

0800a290 <_svfiprintf_r>:
 800a290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a294:	4698      	mov	r8, r3
 800a296:	898b      	ldrh	r3, [r1, #12]
 800a298:	061b      	lsls	r3, r3, #24
 800a29a:	b09d      	sub	sp, #116	; 0x74
 800a29c:	4607      	mov	r7, r0
 800a29e:	460d      	mov	r5, r1
 800a2a0:	4614      	mov	r4, r2
 800a2a2:	d50e      	bpl.n	800a2c2 <_svfiprintf_r+0x32>
 800a2a4:	690b      	ldr	r3, [r1, #16]
 800a2a6:	b963      	cbnz	r3, 800a2c2 <_svfiprintf_r+0x32>
 800a2a8:	2140      	movs	r1, #64	; 0x40
 800a2aa:	f7ff ff21 	bl	800a0f0 <_malloc_r>
 800a2ae:	6028      	str	r0, [r5, #0]
 800a2b0:	6128      	str	r0, [r5, #16]
 800a2b2:	b920      	cbnz	r0, 800a2be <_svfiprintf_r+0x2e>
 800a2b4:	230c      	movs	r3, #12
 800a2b6:	603b      	str	r3, [r7, #0]
 800a2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2bc:	e0d1      	b.n	800a462 <_svfiprintf_r+0x1d2>
 800a2be:	2340      	movs	r3, #64	; 0x40
 800a2c0:	616b      	str	r3, [r5, #20]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2c6:	2320      	movs	r3, #32
 800a2c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2d0:	2330      	movs	r3, #48	; 0x30
 800a2d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a47c <_svfiprintf_r+0x1ec>
 800a2d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2da:	f04f 0901 	mov.w	r9, #1
 800a2de:	4623      	mov	r3, r4
 800a2e0:	469a      	mov	sl, r3
 800a2e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2e6:	b10a      	cbz	r2, 800a2ec <_svfiprintf_r+0x5c>
 800a2e8:	2a25      	cmp	r2, #37	; 0x25
 800a2ea:	d1f9      	bne.n	800a2e0 <_svfiprintf_r+0x50>
 800a2ec:	ebba 0b04 	subs.w	fp, sl, r4
 800a2f0:	d00b      	beq.n	800a30a <_svfiprintf_r+0x7a>
 800a2f2:	465b      	mov	r3, fp
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	4638      	mov	r0, r7
 800a2fa:	f7ff ff6d 	bl	800a1d8 <__ssputs_r>
 800a2fe:	3001      	adds	r0, #1
 800a300:	f000 80aa 	beq.w	800a458 <_svfiprintf_r+0x1c8>
 800a304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a306:	445a      	add	r2, fp
 800a308:	9209      	str	r2, [sp, #36]	; 0x24
 800a30a:	f89a 3000 	ldrb.w	r3, [sl]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f000 80a2 	beq.w	800a458 <_svfiprintf_r+0x1c8>
 800a314:	2300      	movs	r3, #0
 800a316:	f04f 32ff 	mov.w	r2, #4294967295
 800a31a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a31e:	f10a 0a01 	add.w	sl, sl, #1
 800a322:	9304      	str	r3, [sp, #16]
 800a324:	9307      	str	r3, [sp, #28]
 800a326:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a32a:	931a      	str	r3, [sp, #104]	; 0x68
 800a32c:	4654      	mov	r4, sl
 800a32e:	2205      	movs	r2, #5
 800a330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a334:	4851      	ldr	r0, [pc, #324]	; (800a47c <_svfiprintf_r+0x1ec>)
 800a336:	f7f5 ff53 	bl	80001e0 <memchr>
 800a33a:	9a04      	ldr	r2, [sp, #16]
 800a33c:	b9d8      	cbnz	r0, 800a376 <_svfiprintf_r+0xe6>
 800a33e:	06d0      	lsls	r0, r2, #27
 800a340:	bf44      	itt	mi
 800a342:	2320      	movmi	r3, #32
 800a344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a348:	0711      	lsls	r1, r2, #28
 800a34a:	bf44      	itt	mi
 800a34c:	232b      	movmi	r3, #43	; 0x2b
 800a34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a352:	f89a 3000 	ldrb.w	r3, [sl]
 800a356:	2b2a      	cmp	r3, #42	; 0x2a
 800a358:	d015      	beq.n	800a386 <_svfiprintf_r+0xf6>
 800a35a:	9a07      	ldr	r2, [sp, #28]
 800a35c:	4654      	mov	r4, sl
 800a35e:	2000      	movs	r0, #0
 800a360:	f04f 0c0a 	mov.w	ip, #10
 800a364:	4621      	mov	r1, r4
 800a366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a36a:	3b30      	subs	r3, #48	; 0x30
 800a36c:	2b09      	cmp	r3, #9
 800a36e:	d94e      	bls.n	800a40e <_svfiprintf_r+0x17e>
 800a370:	b1b0      	cbz	r0, 800a3a0 <_svfiprintf_r+0x110>
 800a372:	9207      	str	r2, [sp, #28]
 800a374:	e014      	b.n	800a3a0 <_svfiprintf_r+0x110>
 800a376:	eba0 0308 	sub.w	r3, r0, r8
 800a37a:	fa09 f303 	lsl.w	r3, r9, r3
 800a37e:	4313      	orrs	r3, r2
 800a380:	9304      	str	r3, [sp, #16]
 800a382:	46a2      	mov	sl, r4
 800a384:	e7d2      	b.n	800a32c <_svfiprintf_r+0x9c>
 800a386:	9b03      	ldr	r3, [sp, #12]
 800a388:	1d19      	adds	r1, r3, #4
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	9103      	str	r1, [sp, #12]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	bfbb      	ittet	lt
 800a392:	425b      	neglt	r3, r3
 800a394:	f042 0202 	orrlt.w	r2, r2, #2
 800a398:	9307      	strge	r3, [sp, #28]
 800a39a:	9307      	strlt	r3, [sp, #28]
 800a39c:	bfb8      	it	lt
 800a39e:	9204      	strlt	r2, [sp, #16]
 800a3a0:	7823      	ldrb	r3, [r4, #0]
 800a3a2:	2b2e      	cmp	r3, #46	; 0x2e
 800a3a4:	d10c      	bne.n	800a3c0 <_svfiprintf_r+0x130>
 800a3a6:	7863      	ldrb	r3, [r4, #1]
 800a3a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3aa:	d135      	bne.n	800a418 <_svfiprintf_r+0x188>
 800a3ac:	9b03      	ldr	r3, [sp, #12]
 800a3ae:	1d1a      	adds	r2, r3, #4
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	9203      	str	r2, [sp, #12]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	bfb8      	it	lt
 800a3b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3bc:	3402      	adds	r4, #2
 800a3be:	9305      	str	r3, [sp, #20]
 800a3c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a48c <_svfiprintf_r+0x1fc>
 800a3c4:	7821      	ldrb	r1, [r4, #0]
 800a3c6:	2203      	movs	r2, #3
 800a3c8:	4650      	mov	r0, sl
 800a3ca:	f7f5 ff09 	bl	80001e0 <memchr>
 800a3ce:	b140      	cbz	r0, 800a3e2 <_svfiprintf_r+0x152>
 800a3d0:	2340      	movs	r3, #64	; 0x40
 800a3d2:	eba0 000a 	sub.w	r0, r0, sl
 800a3d6:	fa03 f000 	lsl.w	r0, r3, r0
 800a3da:	9b04      	ldr	r3, [sp, #16]
 800a3dc:	4303      	orrs	r3, r0
 800a3de:	3401      	adds	r4, #1
 800a3e0:	9304      	str	r3, [sp, #16]
 800a3e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3e6:	4826      	ldr	r0, [pc, #152]	; (800a480 <_svfiprintf_r+0x1f0>)
 800a3e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3ec:	2206      	movs	r2, #6
 800a3ee:	f7f5 fef7 	bl	80001e0 <memchr>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d038      	beq.n	800a468 <_svfiprintf_r+0x1d8>
 800a3f6:	4b23      	ldr	r3, [pc, #140]	; (800a484 <_svfiprintf_r+0x1f4>)
 800a3f8:	bb1b      	cbnz	r3, 800a442 <_svfiprintf_r+0x1b2>
 800a3fa:	9b03      	ldr	r3, [sp, #12]
 800a3fc:	3307      	adds	r3, #7
 800a3fe:	f023 0307 	bic.w	r3, r3, #7
 800a402:	3308      	adds	r3, #8
 800a404:	9303      	str	r3, [sp, #12]
 800a406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a408:	4433      	add	r3, r6
 800a40a:	9309      	str	r3, [sp, #36]	; 0x24
 800a40c:	e767      	b.n	800a2de <_svfiprintf_r+0x4e>
 800a40e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a412:	460c      	mov	r4, r1
 800a414:	2001      	movs	r0, #1
 800a416:	e7a5      	b.n	800a364 <_svfiprintf_r+0xd4>
 800a418:	2300      	movs	r3, #0
 800a41a:	3401      	adds	r4, #1
 800a41c:	9305      	str	r3, [sp, #20]
 800a41e:	4619      	mov	r1, r3
 800a420:	f04f 0c0a 	mov.w	ip, #10
 800a424:	4620      	mov	r0, r4
 800a426:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a42a:	3a30      	subs	r2, #48	; 0x30
 800a42c:	2a09      	cmp	r2, #9
 800a42e:	d903      	bls.n	800a438 <_svfiprintf_r+0x1a8>
 800a430:	2b00      	cmp	r3, #0
 800a432:	d0c5      	beq.n	800a3c0 <_svfiprintf_r+0x130>
 800a434:	9105      	str	r1, [sp, #20]
 800a436:	e7c3      	b.n	800a3c0 <_svfiprintf_r+0x130>
 800a438:	fb0c 2101 	mla	r1, ip, r1, r2
 800a43c:	4604      	mov	r4, r0
 800a43e:	2301      	movs	r3, #1
 800a440:	e7f0      	b.n	800a424 <_svfiprintf_r+0x194>
 800a442:	ab03      	add	r3, sp, #12
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	462a      	mov	r2, r5
 800a448:	4b0f      	ldr	r3, [pc, #60]	; (800a488 <_svfiprintf_r+0x1f8>)
 800a44a:	a904      	add	r1, sp, #16
 800a44c:	4638      	mov	r0, r7
 800a44e:	f7fd ffa5 	bl	800839c <_printf_float>
 800a452:	1c42      	adds	r2, r0, #1
 800a454:	4606      	mov	r6, r0
 800a456:	d1d6      	bne.n	800a406 <_svfiprintf_r+0x176>
 800a458:	89ab      	ldrh	r3, [r5, #12]
 800a45a:	065b      	lsls	r3, r3, #25
 800a45c:	f53f af2c 	bmi.w	800a2b8 <_svfiprintf_r+0x28>
 800a460:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a462:	b01d      	add	sp, #116	; 0x74
 800a464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a468:	ab03      	add	r3, sp, #12
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	462a      	mov	r2, r5
 800a46e:	4b06      	ldr	r3, [pc, #24]	; (800a488 <_svfiprintf_r+0x1f8>)
 800a470:	a904      	add	r1, sp, #16
 800a472:	4638      	mov	r0, r7
 800a474:	f7fe fa36 	bl	80088e4 <_printf_i>
 800a478:	e7eb      	b.n	800a452 <_svfiprintf_r+0x1c2>
 800a47a:	bf00      	nop
 800a47c:	0800c62c 	.word	0x0800c62c
 800a480:	0800c636 	.word	0x0800c636
 800a484:	0800839d 	.word	0x0800839d
 800a488:	0800a1d9 	.word	0x0800a1d9
 800a48c:	0800c632 	.word	0x0800c632

0800a490 <_sbrk_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4d06      	ldr	r5, [pc, #24]	; (800a4ac <_sbrk_r+0x1c>)
 800a494:	2300      	movs	r3, #0
 800a496:	4604      	mov	r4, r0
 800a498:	4608      	mov	r0, r1
 800a49a:	602b      	str	r3, [r5, #0]
 800a49c:	f7f7 fdb2 	bl	8002004 <_sbrk>
 800a4a0:	1c43      	adds	r3, r0, #1
 800a4a2:	d102      	bne.n	800a4aa <_sbrk_r+0x1a>
 800a4a4:	682b      	ldr	r3, [r5, #0]
 800a4a6:	b103      	cbz	r3, 800a4aa <_sbrk_r+0x1a>
 800a4a8:	6023      	str	r3, [r4, #0]
 800a4aa:	bd38      	pop	{r3, r4, r5, pc}
 800a4ac:	20005f1c 	.word	0x20005f1c

0800a4b0 <__assert_func>:
 800a4b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4b2:	4614      	mov	r4, r2
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	4b09      	ldr	r3, [pc, #36]	; (800a4dc <__assert_func+0x2c>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4605      	mov	r5, r0
 800a4bc:	68d8      	ldr	r0, [r3, #12]
 800a4be:	b14c      	cbz	r4, 800a4d4 <__assert_func+0x24>
 800a4c0:	4b07      	ldr	r3, [pc, #28]	; (800a4e0 <__assert_func+0x30>)
 800a4c2:	9100      	str	r1, [sp, #0]
 800a4c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4c8:	4906      	ldr	r1, [pc, #24]	; (800a4e4 <__assert_func+0x34>)
 800a4ca:	462b      	mov	r3, r5
 800a4cc:	f000 f80e 	bl	800a4ec <fiprintf>
 800a4d0:	f000 faac 	bl	800aa2c <abort>
 800a4d4:	4b04      	ldr	r3, [pc, #16]	; (800a4e8 <__assert_func+0x38>)
 800a4d6:	461c      	mov	r4, r3
 800a4d8:	e7f3      	b.n	800a4c2 <__assert_func+0x12>
 800a4da:	bf00      	nop
 800a4dc:	20000010 	.word	0x20000010
 800a4e0:	0800c63d 	.word	0x0800c63d
 800a4e4:	0800c64a 	.word	0x0800c64a
 800a4e8:	0800c678 	.word	0x0800c678

0800a4ec <fiprintf>:
 800a4ec:	b40e      	push	{r1, r2, r3}
 800a4ee:	b503      	push	{r0, r1, lr}
 800a4f0:	4601      	mov	r1, r0
 800a4f2:	ab03      	add	r3, sp, #12
 800a4f4:	4805      	ldr	r0, [pc, #20]	; (800a50c <fiprintf+0x20>)
 800a4f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4fa:	6800      	ldr	r0, [r0, #0]
 800a4fc:	9301      	str	r3, [sp, #4]
 800a4fe:	f000 f897 	bl	800a630 <_vfiprintf_r>
 800a502:	b002      	add	sp, #8
 800a504:	f85d eb04 	ldr.w	lr, [sp], #4
 800a508:	b003      	add	sp, #12
 800a50a:	4770      	bx	lr
 800a50c:	20000010 	.word	0x20000010

0800a510 <__ascii_mbtowc>:
 800a510:	b082      	sub	sp, #8
 800a512:	b901      	cbnz	r1, 800a516 <__ascii_mbtowc+0x6>
 800a514:	a901      	add	r1, sp, #4
 800a516:	b142      	cbz	r2, 800a52a <__ascii_mbtowc+0x1a>
 800a518:	b14b      	cbz	r3, 800a52e <__ascii_mbtowc+0x1e>
 800a51a:	7813      	ldrb	r3, [r2, #0]
 800a51c:	600b      	str	r3, [r1, #0]
 800a51e:	7812      	ldrb	r2, [r2, #0]
 800a520:	1e10      	subs	r0, r2, #0
 800a522:	bf18      	it	ne
 800a524:	2001      	movne	r0, #1
 800a526:	b002      	add	sp, #8
 800a528:	4770      	bx	lr
 800a52a:	4610      	mov	r0, r2
 800a52c:	e7fb      	b.n	800a526 <__ascii_mbtowc+0x16>
 800a52e:	f06f 0001 	mvn.w	r0, #1
 800a532:	e7f8      	b.n	800a526 <__ascii_mbtowc+0x16>

0800a534 <memmove>:
 800a534:	4288      	cmp	r0, r1
 800a536:	b510      	push	{r4, lr}
 800a538:	eb01 0402 	add.w	r4, r1, r2
 800a53c:	d902      	bls.n	800a544 <memmove+0x10>
 800a53e:	4284      	cmp	r4, r0
 800a540:	4623      	mov	r3, r4
 800a542:	d807      	bhi.n	800a554 <memmove+0x20>
 800a544:	1e43      	subs	r3, r0, #1
 800a546:	42a1      	cmp	r1, r4
 800a548:	d008      	beq.n	800a55c <memmove+0x28>
 800a54a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a54e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a552:	e7f8      	b.n	800a546 <memmove+0x12>
 800a554:	4402      	add	r2, r0
 800a556:	4601      	mov	r1, r0
 800a558:	428a      	cmp	r2, r1
 800a55a:	d100      	bne.n	800a55e <memmove+0x2a>
 800a55c:	bd10      	pop	{r4, pc}
 800a55e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a566:	e7f7      	b.n	800a558 <memmove+0x24>

0800a568 <__malloc_lock>:
 800a568:	4801      	ldr	r0, [pc, #4]	; (800a570 <__malloc_lock+0x8>)
 800a56a:	f000 bc1f 	b.w	800adac <__retarget_lock_acquire_recursive>
 800a56e:	bf00      	nop
 800a570:	20005f20 	.word	0x20005f20

0800a574 <__malloc_unlock>:
 800a574:	4801      	ldr	r0, [pc, #4]	; (800a57c <__malloc_unlock+0x8>)
 800a576:	f000 bc1a 	b.w	800adae <__retarget_lock_release_recursive>
 800a57a:	bf00      	nop
 800a57c:	20005f20 	.word	0x20005f20

0800a580 <_realloc_r>:
 800a580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a584:	4680      	mov	r8, r0
 800a586:	4614      	mov	r4, r2
 800a588:	460e      	mov	r6, r1
 800a58a:	b921      	cbnz	r1, 800a596 <_realloc_r+0x16>
 800a58c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a590:	4611      	mov	r1, r2
 800a592:	f7ff bdad 	b.w	800a0f0 <_malloc_r>
 800a596:	b92a      	cbnz	r2, 800a5a4 <_realloc_r+0x24>
 800a598:	f7ff fd3e 	bl	800a018 <_free_r>
 800a59c:	4625      	mov	r5, r4
 800a59e:	4628      	mov	r0, r5
 800a5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a4:	f000 fc6a 	bl	800ae7c <_malloc_usable_size_r>
 800a5a8:	4284      	cmp	r4, r0
 800a5aa:	4607      	mov	r7, r0
 800a5ac:	d802      	bhi.n	800a5b4 <_realloc_r+0x34>
 800a5ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5b2:	d812      	bhi.n	800a5da <_realloc_r+0x5a>
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	4640      	mov	r0, r8
 800a5b8:	f7ff fd9a 	bl	800a0f0 <_malloc_r>
 800a5bc:	4605      	mov	r5, r0
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d0ed      	beq.n	800a59e <_realloc_r+0x1e>
 800a5c2:	42bc      	cmp	r4, r7
 800a5c4:	4622      	mov	r2, r4
 800a5c6:	4631      	mov	r1, r6
 800a5c8:	bf28      	it	cs
 800a5ca:	463a      	movcs	r2, r7
 800a5cc:	f7fd fe30 	bl	8008230 <memcpy>
 800a5d0:	4631      	mov	r1, r6
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	f7ff fd20 	bl	800a018 <_free_r>
 800a5d8:	e7e1      	b.n	800a59e <_realloc_r+0x1e>
 800a5da:	4635      	mov	r5, r6
 800a5dc:	e7df      	b.n	800a59e <_realloc_r+0x1e>

0800a5de <__sfputc_r>:
 800a5de:	6893      	ldr	r3, [r2, #8]
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	b410      	push	{r4}
 800a5e6:	6093      	str	r3, [r2, #8]
 800a5e8:	da08      	bge.n	800a5fc <__sfputc_r+0x1e>
 800a5ea:	6994      	ldr	r4, [r2, #24]
 800a5ec:	42a3      	cmp	r3, r4
 800a5ee:	db01      	blt.n	800a5f4 <__sfputc_r+0x16>
 800a5f0:	290a      	cmp	r1, #10
 800a5f2:	d103      	bne.n	800a5fc <__sfputc_r+0x1e>
 800a5f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5f8:	f000 b94a 	b.w	800a890 <__swbuf_r>
 800a5fc:	6813      	ldr	r3, [r2, #0]
 800a5fe:	1c58      	adds	r0, r3, #1
 800a600:	6010      	str	r0, [r2, #0]
 800a602:	7019      	strb	r1, [r3, #0]
 800a604:	4608      	mov	r0, r1
 800a606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <__sfputs_r>:
 800a60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60e:	4606      	mov	r6, r0
 800a610:	460f      	mov	r7, r1
 800a612:	4614      	mov	r4, r2
 800a614:	18d5      	adds	r5, r2, r3
 800a616:	42ac      	cmp	r4, r5
 800a618:	d101      	bne.n	800a61e <__sfputs_r+0x12>
 800a61a:	2000      	movs	r0, #0
 800a61c:	e007      	b.n	800a62e <__sfputs_r+0x22>
 800a61e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a622:	463a      	mov	r2, r7
 800a624:	4630      	mov	r0, r6
 800a626:	f7ff ffda 	bl	800a5de <__sfputc_r>
 800a62a:	1c43      	adds	r3, r0, #1
 800a62c:	d1f3      	bne.n	800a616 <__sfputs_r+0xa>
 800a62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a630 <_vfiprintf_r>:
 800a630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a634:	460d      	mov	r5, r1
 800a636:	b09d      	sub	sp, #116	; 0x74
 800a638:	4614      	mov	r4, r2
 800a63a:	4698      	mov	r8, r3
 800a63c:	4606      	mov	r6, r0
 800a63e:	b118      	cbz	r0, 800a648 <_vfiprintf_r+0x18>
 800a640:	6983      	ldr	r3, [r0, #24]
 800a642:	b90b      	cbnz	r3, 800a648 <_vfiprintf_r+0x18>
 800a644:	f000 fb14 	bl	800ac70 <__sinit>
 800a648:	4b89      	ldr	r3, [pc, #548]	; (800a870 <_vfiprintf_r+0x240>)
 800a64a:	429d      	cmp	r5, r3
 800a64c:	d11b      	bne.n	800a686 <_vfiprintf_r+0x56>
 800a64e:	6875      	ldr	r5, [r6, #4]
 800a650:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a652:	07d9      	lsls	r1, r3, #31
 800a654:	d405      	bmi.n	800a662 <_vfiprintf_r+0x32>
 800a656:	89ab      	ldrh	r3, [r5, #12]
 800a658:	059a      	lsls	r2, r3, #22
 800a65a:	d402      	bmi.n	800a662 <_vfiprintf_r+0x32>
 800a65c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a65e:	f000 fba5 	bl	800adac <__retarget_lock_acquire_recursive>
 800a662:	89ab      	ldrh	r3, [r5, #12]
 800a664:	071b      	lsls	r3, r3, #28
 800a666:	d501      	bpl.n	800a66c <_vfiprintf_r+0x3c>
 800a668:	692b      	ldr	r3, [r5, #16]
 800a66a:	b9eb      	cbnz	r3, 800a6a8 <_vfiprintf_r+0x78>
 800a66c:	4629      	mov	r1, r5
 800a66e:	4630      	mov	r0, r6
 800a670:	f000 f96e 	bl	800a950 <__swsetup_r>
 800a674:	b1c0      	cbz	r0, 800a6a8 <_vfiprintf_r+0x78>
 800a676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a678:	07dc      	lsls	r4, r3, #31
 800a67a:	d50e      	bpl.n	800a69a <_vfiprintf_r+0x6a>
 800a67c:	f04f 30ff 	mov.w	r0, #4294967295
 800a680:	b01d      	add	sp, #116	; 0x74
 800a682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a686:	4b7b      	ldr	r3, [pc, #492]	; (800a874 <_vfiprintf_r+0x244>)
 800a688:	429d      	cmp	r5, r3
 800a68a:	d101      	bne.n	800a690 <_vfiprintf_r+0x60>
 800a68c:	68b5      	ldr	r5, [r6, #8]
 800a68e:	e7df      	b.n	800a650 <_vfiprintf_r+0x20>
 800a690:	4b79      	ldr	r3, [pc, #484]	; (800a878 <_vfiprintf_r+0x248>)
 800a692:	429d      	cmp	r5, r3
 800a694:	bf08      	it	eq
 800a696:	68f5      	ldreq	r5, [r6, #12]
 800a698:	e7da      	b.n	800a650 <_vfiprintf_r+0x20>
 800a69a:	89ab      	ldrh	r3, [r5, #12]
 800a69c:	0598      	lsls	r0, r3, #22
 800a69e:	d4ed      	bmi.n	800a67c <_vfiprintf_r+0x4c>
 800a6a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6a2:	f000 fb84 	bl	800adae <__retarget_lock_release_recursive>
 800a6a6:	e7e9      	b.n	800a67c <_vfiprintf_r+0x4c>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ac:	2320      	movs	r3, #32
 800a6ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6b6:	2330      	movs	r3, #48	; 0x30
 800a6b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a87c <_vfiprintf_r+0x24c>
 800a6bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6c0:	f04f 0901 	mov.w	r9, #1
 800a6c4:	4623      	mov	r3, r4
 800a6c6:	469a      	mov	sl, r3
 800a6c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6cc:	b10a      	cbz	r2, 800a6d2 <_vfiprintf_r+0xa2>
 800a6ce:	2a25      	cmp	r2, #37	; 0x25
 800a6d0:	d1f9      	bne.n	800a6c6 <_vfiprintf_r+0x96>
 800a6d2:	ebba 0b04 	subs.w	fp, sl, r4
 800a6d6:	d00b      	beq.n	800a6f0 <_vfiprintf_r+0xc0>
 800a6d8:	465b      	mov	r3, fp
 800a6da:	4622      	mov	r2, r4
 800a6dc:	4629      	mov	r1, r5
 800a6de:	4630      	mov	r0, r6
 800a6e0:	f7ff ff94 	bl	800a60c <__sfputs_r>
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	f000 80aa 	beq.w	800a83e <_vfiprintf_r+0x20e>
 800a6ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6ec:	445a      	add	r2, fp
 800a6ee:	9209      	str	r2, [sp, #36]	; 0x24
 800a6f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f000 80a2 	beq.w	800a83e <_vfiprintf_r+0x20e>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a704:	f10a 0a01 	add.w	sl, sl, #1
 800a708:	9304      	str	r3, [sp, #16]
 800a70a:	9307      	str	r3, [sp, #28]
 800a70c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a710:	931a      	str	r3, [sp, #104]	; 0x68
 800a712:	4654      	mov	r4, sl
 800a714:	2205      	movs	r2, #5
 800a716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a71a:	4858      	ldr	r0, [pc, #352]	; (800a87c <_vfiprintf_r+0x24c>)
 800a71c:	f7f5 fd60 	bl	80001e0 <memchr>
 800a720:	9a04      	ldr	r2, [sp, #16]
 800a722:	b9d8      	cbnz	r0, 800a75c <_vfiprintf_r+0x12c>
 800a724:	06d1      	lsls	r1, r2, #27
 800a726:	bf44      	itt	mi
 800a728:	2320      	movmi	r3, #32
 800a72a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a72e:	0713      	lsls	r3, r2, #28
 800a730:	bf44      	itt	mi
 800a732:	232b      	movmi	r3, #43	; 0x2b
 800a734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a738:	f89a 3000 	ldrb.w	r3, [sl]
 800a73c:	2b2a      	cmp	r3, #42	; 0x2a
 800a73e:	d015      	beq.n	800a76c <_vfiprintf_r+0x13c>
 800a740:	9a07      	ldr	r2, [sp, #28]
 800a742:	4654      	mov	r4, sl
 800a744:	2000      	movs	r0, #0
 800a746:	f04f 0c0a 	mov.w	ip, #10
 800a74a:	4621      	mov	r1, r4
 800a74c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a750:	3b30      	subs	r3, #48	; 0x30
 800a752:	2b09      	cmp	r3, #9
 800a754:	d94e      	bls.n	800a7f4 <_vfiprintf_r+0x1c4>
 800a756:	b1b0      	cbz	r0, 800a786 <_vfiprintf_r+0x156>
 800a758:	9207      	str	r2, [sp, #28]
 800a75a:	e014      	b.n	800a786 <_vfiprintf_r+0x156>
 800a75c:	eba0 0308 	sub.w	r3, r0, r8
 800a760:	fa09 f303 	lsl.w	r3, r9, r3
 800a764:	4313      	orrs	r3, r2
 800a766:	9304      	str	r3, [sp, #16]
 800a768:	46a2      	mov	sl, r4
 800a76a:	e7d2      	b.n	800a712 <_vfiprintf_r+0xe2>
 800a76c:	9b03      	ldr	r3, [sp, #12]
 800a76e:	1d19      	adds	r1, r3, #4
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	9103      	str	r1, [sp, #12]
 800a774:	2b00      	cmp	r3, #0
 800a776:	bfbb      	ittet	lt
 800a778:	425b      	neglt	r3, r3
 800a77a:	f042 0202 	orrlt.w	r2, r2, #2
 800a77e:	9307      	strge	r3, [sp, #28]
 800a780:	9307      	strlt	r3, [sp, #28]
 800a782:	bfb8      	it	lt
 800a784:	9204      	strlt	r2, [sp, #16]
 800a786:	7823      	ldrb	r3, [r4, #0]
 800a788:	2b2e      	cmp	r3, #46	; 0x2e
 800a78a:	d10c      	bne.n	800a7a6 <_vfiprintf_r+0x176>
 800a78c:	7863      	ldrb	r3, [r4, #1]
 800a78e:	2b2a      	cmp	r3, #42	; 0x2a
 800a790:	d135      	bne.n	800a7fe <_vfiprintf_r+0x1ce>
 800a792:	9b03      	ldr	r3, [sp, #12]
 800a794:	1d1a      	adds	r2, r3, #4
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	9203      	str	r2, [sp, #12]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	bfb8      	it	lt
 800a79e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7a2:	3402      	adds	r4, #2
 800a7a4:	9305      	str	r3, [sp, #20]
 800a7a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a88c <_vfiprintf_r+0x25c>
 800a7aa:	7821      	ldrb	r1, [r4, #0]
 800a7ac:	2203      	movs	r2, #3
 800a7ae:	4650      	mov	r0, sl
 800a7b0:	f7f5 fd16 	bl	80001e0 <memchr>
 800a7b4:	b140      	cbz	r0, 800a7c8 <_vfiprintf_r+0x198>
 800a7b6:	2340      	movs	r3, #64	; 0x40
 800a7b8:	eba0 000a 	sub.w	r0, r0, sl
 800a7bc:	fa03 f000 	lsl.w	r0, r3, r0
 800a7c0:	9b04      	ldr	r3, [sp, #16]
 800a7c2:	4303      	orrs	r3, r0
 800a7c4:	3401      	adds	r4, #1
 800a7c6:	9304      	str	r3, [sp, #16]
 800a7c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7cc:	482c      	ldr	r0, [pc, #176]	; (800a880 <_vfiprintf_r+0x250>)
 800a7ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7d2:	2206      	movs	r2, #6
 800a7d4:	f7f5 fd04 	bl	80001e0 <memchr>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d03f      	beq.n	800a85c <_vfiprintf_r+0x22c>
 800a7dc:	4b29      	ldr	r3, [pc, #164]	; (800a884 <_vfiprintf_r+0x254>)
 800a7de:	bb1b      	cbnz	r3, 800a828 <_vfiprintf_r+0x1f8>
 800a7e0:	9b03      	ldr	r3, [sp, #12]
 800a7e2:	3307      	adds	r3, #7
 800a7e4:	f023 0307 	bic.w	r3, r3, #7
 800a7e8:	3308      	adds	r3, #8
 800a7ea:	9303      	str	r3, [sp, #12]
 800a7ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ee:	443b      	add	r3, r7
 800a7f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f2:	e767      	b.n	800a6c4 <_vfiprintf_r+0x94>
 800a7f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7f8:	460c      	mov	r4, r1
 800a7fa:	2001      	movs	r0, #1
 800a7fc:	e7a5      	b.n	800a74a <_vfiprintf_r+0x11a>
 800a7fe:	2300      	movs	r3, #0
 800a800:	3401      	adds	r4, #1
 800a802:	9305      	str	r3, [sp, #20]
 800a804:	4619      	mov	r1, r3
 800a806:	f04f 0c0a 	mov.w	ip, #10
 800a80a:	4620      	mov	r0, r4
 800a80c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a810:	3a30      	subs	r2, #48	; 0x30
 800a812:	2a09      	cmp	r2, #9
 800a814:	d903      	bls.n	800a81e <_vfiprintf_r+0x1ee>
 800a816:	2b00      	cmp	r3, #0
 800a818:	d0c5      	beq.n	800a7a6 <_vfiprintf_r+0x176>
 800a81a:	9105      	str	r1, [sp, #20]
 800a81c:	e7c3      	b.n	800a7a6 <_vfiprintf_r+0x176>
 800a81e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a822:	4604      	mov	r4, r0
 800a824:	2301      	movs	r3, #1
 800a826:	e7f0      	b.n	800a80a <_vfiprintf_r+0x1da>
 800a828:	ab03      	add	r3, sp, #12
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	462a      	mov	r2, r5
 800a82e:	4b16      	ldr	r3, [pc, #88]	; (800a888 <_vfiprintf_r+0x258>)
 800a830:	a904      	add	r1, sp, #16
 800a832:	4630      	mov	r0, r6
 800a834:	f7fd fdb2 	bl	800839c <_printf_float>
 800a838:	4607      	mov	r7, r0
 800a83a:	1c78      	adds	r0, r7, #1
 800a83c:	d1d6      	bne.n	800a7ec <_vfiprintf_r+0x1bc>
 800a83e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a840:	07d9      	lsls	r1, r3, #31
 800a842:	d405      	bmi.n	800a850 <_vfiprintf_r+0x220>
 800a844:	89ab      	ldrh	r3, [r5, #12]
 800a846:	059a      	lsls	r2, r3, #22
 800a848:	d402      	bmi.n	800a850 <_vfiprintf_r+0x220>
 800a84a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a84c:	f000 faaf 	bl	800adae <__retarget_lock_release_recursive>
 800a850:	89ab      	ldrh	r3, [r5, #12]
 800a852:	065b      	lsls	r3, r3, #25
 800a854:	f53f af12 	bmi.w	800a67c <_vfiprintf_r+0x4c>
 800a858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a85a:	e711      	b.n	800a680 <_vfiprintf_r+0x50>
 800a85c:	ab03      	add	r3, sp, #12
 800a85e:	9300      	str	r3, [sp, #0]
 800a860:	462a      	mov	r2, r5
 800a862:	4b09      	ldr	r3, [pc, #36]	; (800a888 <_vfiprintf_r+0x258>)
 800a864:	a904      	add	r1, sp, #16
 800a866:	4630      	mov	r0, r6
 800a868:	f7fe f83c 	bl	80088e4 <_printf_i>
 800a86c:	e7e4      	b.n	800a838 <_vfiprintf_r+0x208>
 800a86e:	bf00      	nop
 800a870:	0800c7a4 	.word	0x0800c7a4
 800a874:	0800c7c4 	.word	0x0800c7c4
 800a878:	0800c784 	.word	0x0800c784
 800a87c:	0800c62c 	.word	0x0800c62c
 800a880:	0800c636 	.word	0x0800c636
 800a884:	0800839d 	.word	0x0800839d
 800a888:	0800a60d 	.word	0x0800a60d
 800a88c:	0800c632 	.word	0x0800c632

0800a890 <__swbuf_r>:
 800a890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a892:	460e      	mov	r6, r1
 800a894:	4614      	mov	r4, r2
 800a896:	4605      	mov	r5, r0
 800a898:	b118      	cbz	r0, 800a8a2 <__swbuf_r+0x12>
 800a89a:	6983      	ldr	r3, [r0, #24]
 800a89c:	b90b      	cbnz	r3, 800a8a2 <__swbuf_r+0x12>
 800a89e:	f000 f9e7 	bl	800ac70 <__sinit>
 800a8a2:	4b21      	ldr	r3, [pc, #132]	; (800a928 <__swbuf_r+0x98>)
 800a8a4:	429c      	cmp	r4, r3
 800a8a6:	d12b      	bne.n	800a900 <__swbuf_r+0x70>
 800a8a8:	686c      	ldr	r4, [r5, #4]
 800a8aa:	69a3      	ldr	r3, [r4, #24]
 800a8ac:	60a3      	str	r3, [r4, #8]
 800a8ae:	89a3      	ldrh	r3, [r4, #12]
 800a8b0:	071a      	lsls	r2, r3, #28
 800a8b2:	d52f      	bpl.n	800a914 <__swbuf_r+0x84>
 800a8b4:	6923      	ldr	r3, [r4, #16]
 800a8b6:	b36b      	cbz	r3, 800a914 <__swbuf_r+0x84>
 800a8b8:	6923      	ldr	r3, [r4, #16]
 800a8ba:	6820      	ldr	r0, [r4, #0]
 800a8bc:	1ac0      	subs	r0, r0, r3
 800a8be:	6963      	ldr	r3, [r4, #20]
 800a8c0:	b2f6      	uxtb	r6, r6
 800a8c2:	4283      	cmp	r3, r0
 800a8c4:	4637      	mov	r7, r6
 800a8c6:	dc04      	bgt.n	800a8d2 <__swbuf_r+0x42>
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	f000 f93c 	bl	800ab48 <_fflush_r>
 800a8d0:	bb30      	cbnz	r0, 800a920 <__swbuf_r+0x90>
 800a8d2:	68a3      	ldr	r3, [r4, #8]
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	60a3      	str	r3, [r4, #8]
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	1c5a      	adds	r2, r3, #1
 800a8dc:	6022      	str	r2, [r4, #0]
 800a8de:	701e      	strb	r6, [r3, #0]
 800a8e0:	6963      	ldr	r3, [r4, #20]
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	4283      	cmp	r3, r0
 800a8e6:	d004      	beq.n	800a8f2 <__swbuf_r+0x62>
 800a8e8:	89a3      	ldrh	r3, [r4, #12]
 800a8ea:	07db      	lsls	r3, r3, #31
 800a8ec:	d506      	bpl.n	800a8fc <__swbuf_r+0x6c>
 800a8ee:	2e0a      	cmp	r6, #10
 800a8f0:	d104      	bne.n	800a8fc <__swbuf_r+0x6c>
 800a8f2:	4621      	mov	r1, r4
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	f000 f927 	bl	800ab48 <_fflush_r>
 800a8fa:	b988      	cbnz	r0, 800a920 <__swbuf_r+0x90>
 800a8fc:	4638      	mov	r0, r7
 800a8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a900:	4b0a      	ldr	r3, [pc, #40]	; (800a92c <__swbuf_r+0x9c>)
 800a902:	429c      	cmp	r4, r3
 800a904:	d101      	bne.n	800a90a <__swbuf_r+0x7a>
 800a906:	68ac      	ldr	r4, [r5, #8]
 800a908:	e7cf      	b.n	800a8aa <__swbuf_r+0x1a>
 800a90a:	4b09      	ldr	r3, [pc, #36]	; (800a930 <__swbuf_r+0xa0>)
 800a90c:	429c      	cmp	r4, r3
 800a90e:	bf08      	it	eq
 800a910:	68ec      	ldreq	r4, [r5, #12]
 800a912:	e7ca      	b.n	800a8aa <__swbuf_r+0x1a>
 800a914:	4621      	mov	r1, r4
 800a916:	4628      	mov	r0, r5
 800a918:	f000 f81a 	bl	800a950 <__swsetup_r>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d0cb      	beq.n	800a8b8 <__swbuf_r+0x28>
 800a920:	f04f 37ff 	mov.w	r7, #4294967295
 800a924:	e7ea      	b.n	800a8fc <__swbuf_r+0x6c>
 800a926:	bf00      	nop
 800a928:	0800c7a4 	.word	0x0800c7a4
 800a92c:	0800c7c4 	.word	0x0800c7c4
 800a930:	0800c784 	.word	0x0800c784

0800a934 <__ascii_wctomb>:
 800a934:	b149      	cbz	r1, 800a94a <__ascii_wctomb+0x16>
 800a936:	2aff      	cmp	r2, #255	; 0xff
 800a938:	bf85      	ittet	hi
 800a93a:	238a      	movhi	r3, #138	; 0x8a
 800a93c:	6003      	strhi	r3, [r0, #0]
 800a93e:	700a      	strbls	r2, [r1, #0]
 800a940:	f04f 30ff 	movhi.w	r0, #4294967295
 800a944:	bf98      	it	ls
 800a946:	2001      	movls	r0, #1
 800a948:	4770      	bx	lr
 800a94a:	4608      	mov	r0, r1
 800a94c:	4770      	bx	lr
	...

0800a950 <__swsetup_r>:
 800a950:	4b32      	ldr	r3, [pc, #200]	; (800aa1c <__swsetup_r+0xcc>)
 800a952:	b570      	push	{r4, r5, r6, lr}
 800a954:	681d      	ldr	r5, [r3, #0]
 800a956:	4606      	mov	r6, r0
 800a958:	460c      	mov	r4, r1
 800a95a:	b125      	cbz	r5, 800a966 <__swsetup_r+0x16>
 800a95c:	69ab      	ldr	r3, [r5, #24]
 800a95e:	b913      	cbnz	r3, 800a966 <__swsetup_r+0x16>
 800a960:	4628      	mov	r0, r5
 800a962:	f000 f985 	bl	800ac70 <__sinit>
 800a966:	4b2e      	ldr	r3, [pc, #184]	; (800aa20 <__swsetup_r+0xd0>)
 800a968:	429c      	cmp	r4, r3
 800a96a:	d10f      	bne.n	800a98c <__swsetup_r+0x3c>
 800a96c:	686c      	ldr	r4, [r5, #4]
 800a96e:	89a3      	ldrh	r3, [r4, #12]
 800a970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a974:	0719      	lsls	r1, r3, #28
 800a976:	d42c      	bmi.n	800a9d2 <__swsetup_r+0x82>
 800a978:	06dd      	lsls	r5, r3, #27
 800a97a:	d411      	bmi.n	800a9a0 <__swsetup_r+0x50>
 800a97c:	2309      	movs	r3, #9
 800a97e:	6033      	str	r3, [r6, #0]
 800a980:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a984:	81a3      	strh	r3, [r4, #12]
 800a986:	f04f 30ff 	mov.w	r0, #4294967295
 800a98a:	e03e      	b.n	800aa0a <__swsetup_r+0xba>
 800a98c:	4b25      	ldr	r3, [pc, #148]	; (800aa24 <__swsetup_r+0xd4>)
 800a98e:	429c      	cmp	r4, r3
 800a990:	d101      	bne.n	800a996 <__swsetup_r+0x46>
 800a992:	68ac      	ldr	r4, [r5, #8]
 800a994:	e7eb      	b.n	800a96e <__swsetup_r+0x1e>
 800a996:	4b24      	ldr	r3, [pc, #144]	; (800aa28 <__swsetup_r+0xd8>)
 800a998:	429c      	cmp	r4, r3
 800a99a:	bf08      	it	eq
 800a99c:	68ec      	ldreq	r4, [r5, #12]
 800a99e:	e7e6      	b.n	800a96e <__swsetup_r+0x1e>
 800a9a0:	0758      	lsls	r0, r3, #29
 800a9a2:	d512      	bpl.n	800a9ca <__swsetup_r+0x7a>
 800a9a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9a6:	b141      	cbz	r1, 800a9ba <__swsetup_r+0x6a>
 800a9a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9ac:	4299      	cmp	r1, r3
 800a9ae:	d002      	beq.n	800a9b6 <__swsetup_r+0x66>
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	f7ff fb31 	bl	800a018 <_free_r>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	6363      	str	r3, [r4, #52]	; 0x34
 800a9ba:	89a3      	ldrh	r3, [r4, #12]
 800a9bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9c0:	81a3      	strh	r3, [r4, #12]
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	6063      	str	r3, [r4, #4]
 800a9c6:	6923      	ldr	r3, [r4, #16]
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	89a3      	ldrh	r3, [r4, #12]
 800a9cc:	f043 0308 	orr.w	r3, r3, #8
 800a9d0:	81a3      	strh	r3, [r4, #12]
 800a9d2:	6923      	ldr	r3, [r4, #16]
 800a9d4:	b94b      	cbnz	r3, 800a9ea <__swsetup_r+0x9a>
 800a9d6:	89a3      	ldrh	r3, [r4, #12]
 800a9d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9e0:	d003      	beq.n	800a9ea <__swsetup_r+0x9a>
 800a9e2:	4621      	mov	r1, r4
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	f000 fa09 	bl	800adfc <__smakebuf_r>
 800a9ea:	89a0      	ldrh	r0, [r4, #12]
 800a9ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9f0:	f010 0301 	ands.w	r3, r0, #1
 800a9f4:	d00a      	beq.n	800aa0c <__swsetup_r+0xbc>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	60a3      	str	r3, [r4, #8]
 800a9fa:	6963      	ldr	r3, [r4, #20]
 800a9fc:	425b      	negs	r3, r3
 800a9fe:	61a3      	str	r3, [r4, #24]
 800aa00:	6923      	ldr	r3, [r4, #16]
 800aa02:	b943      	cbnz	r3, 800aa16 <__swsetup_r+0xc6>
 800aa04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa08:	d1ba      	bne.n	800a980 <__swsetup_r+0x30>
 800aa0a:	bd70      	pop	{r4, r5, r6, pc}
 800aa0c:	0781      	lsls	r1, r0, #30
 800aa0e:	bf58      	it	pl
 800aa10:	6963      	ldrpl	r3, [r4, #20]
 800aa12:	60a3      	str	r3, [r4, #8]
 800aa14:	e7f4      	b.n	800aa00 <__swsetup_r+0xb0>
 800aa16:	2000      	movs	r0, #0
 800aa18:	e7f7      	b.n	800aa0a <__swsetup_r+0xba>
 800aa1a:	bf00      	nop
 800aa1c:	20000010 	.word	0x20000010
 800aa20:	0800c7a4 	.word	0x0800c7a4
 800aa24:	0800c7c4 	.word	0x0800c7c4
 800aa28:	0800c784 	.word	0x0800c784

0800aa2c <abort>:
 800aa2c:	b508      	push	{r3, lr}
 800aa2e:	2006      	movs	r0, #6
 800aa30:	f000 fa54 	bl	800aedc <raise>
 800aa34:	2001      	movs	r0, #1
 800aa36:	f7f7 fa6d 	bl	8001f14 <_exit>
	...

0800aa3c <__sflush_r>:
 800aa3c:	898a      	ldrh	r2, [r1, #12]
 800aa3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa42:	4605      	mov	r5, r0
 800aa44:	0710      	lsls	r0, r2, #28
 800aa46:	460c      	mov	r4, r1
 800aa48:	d458      	bmi.n	800aafc <__sflush_r+0xc0>
 800aa4a:	684b      	ldr	r3, [r1, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	dc05      	bgt.n	800aa5c <__sflush_r+0x20>
 800aa50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	dc02      	bgt.n	800aa5c <__sflush_r+0x20>
 800aa56:	2000      	movs	r0, #0
 800aa58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa5e:	2e00      	cmp	r6, #0
 800aa60:	d0f9      	beq.n	800aa56 <__sflush_r+0x1a>
 800aa62:	2300      	movs	r3, #0
 800aa64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa68:	682f      	ldr	r7, [r5, #0]
 800aa6a:	602b      	str	r3, [r5, #0]
 800aa6c:	d032      	beq.n	800aad4 <__sflush_r+0x98>
 800aa6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa70:	89a3      	ldrh	r3, [r4, #12]
 800aa72:	075a      	lsls	r2, r3, #29
 800aa74:	d505      	bpl.n	800aa82 <__sflush_r+0x46>
 800aa76:	6863      	ldr	r3, [r4, #4]
 800aa78:	1ac0      	subs	r0, r0, r3
 800aa7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa7c:	b10b      	cbz	r3, 800aa82 <__sflush_r+0x46>
 800aa7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa80:	1ac0      	subs	r0, r0, r3
 800aa82:	2300      	movs	r3, #0
 800aa84:	4602      	mov	r2, r0
 800aa86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa88:	6a21      	ldr	r1, [r4, #32]
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	47b0      	blx	r6
 800aa8e:	1c43      	adds	r3, r0, #1
 800aa90:	89a3      	ldrh	r3, [r4, #12]
 800aa92:	d106      	bne.n	800aaa2 <__sflush_r+0x66>
 800aa94:	6829      	ldr	r1, [r5, #0]
 800aa96:	291d      	cmp	r1, #29
 800aa98:	d82c      	bhi.n	800aaf4 <__sflush_r+0xb8>
 800aa9a:	4a2a      	ldr	r2, [pc, #168]	; (800ab44 <__sflush_r+0x108>)
 800aa9c:	40ca      	lsrs	r2, r1
 800aa9e:	07d6      	lsls	r6, r2, #31
 800aaa0:	d528      	bpl.n	800aaf4 <__sflush_r+0xb8>
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	6062      	str	r2, [r4, #4]
 800aaa6:	04d9      	lsls	r1, r3, #19
 800aaa8:	6922      	ldr	r2, [r4, #16]
 800aaaa:	6022      	str	r2, [r4, #0]
 800aaac:	d504      	bpl.n	800aab8 <__sflush_r+0x7c>
 800aaae:	1c42      	adds	r2, r0, #1
 800aab0:	d101      	bne.n	800aab6 <__sflush_r+0x7a>
 800aab2:	682b      	ldr	r3, [r5, #0]
 800aab4:	b903      	cbnz	r3, 800aab8 <__sflush_r+0x7c>
 800aab6:	6560      	str	r0, [r4, #84]	; 0x54
 800aab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aaba:	602f      	str	r7, [r5, #0]
 800aabc:	2900      	cmp	r1, #0
 800aabe:	d0ca      	beq.n	800aa56 <__sflush_r+0x1a>
 800aac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aac4:	4299      	cmp	r1, r3
 800aac6:	d002      	beq.n	800aace <__sflush_r+0x92>
 800aac8:	4628      	mov	r0, r5
 800aaca:	f7ff faa5 	bl	800a018 <_free_r>
 800aace:	2000      	movs	r0, #0
 800aad0:	6360      	str	r0, [r4, #52]	; 0x34
 800aad2:	e7c1      	b.n	800aa58 <__sflush_r+0x1c>
 800aad4:	6a21      	ldr	r1, [r4, #32]
 800aad6:	2301      	movs	r3, #1
 800aad8:	4628      	mov	r0, r5
 800aada:	47b0      	blx	r6
 800aadc:	1c41      	adds	r1, r0, #1
 800aade:	d1c7      	bne.n	800aa70 <__sflush_r+0x34>
 800aae0:	682b      	ldr	r3, [r5, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d0c4      	beq.n	800aa70 <__sflush_r+0x34>
 800aae6:	2b1d      	cmp	r3, #29
 800aae8:	d001      	beq.n	800aaee <__sflush_r+0xb2>
 800aaea:	2b16      	cmp	r3, #22
 800aaec:	d101      	bne.n	800aaf2 <__sflush_r+0xb6>
 800aaee:	602f      	str	r7, [r5, #0]
 800aaf0:	e7b1      	b.n	800aa56 <__sflush_r+0x1a>
 800aaf2:	89a3      	ldrh	r3, [r4, #12]
 800aaf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaf8:	81a3      	strh	r3, [r4, #12]
 800aafa:	e7ad      	b.n	800aa58 <__sflush_r+0x1c>
 800aafc:	690f      	ldr	r7, [r1, #16]
 800aafe:	2f00      	cmp	r7, #0
 800ab00:	d0a9      	beq.n	800aa56 <__sflush_r+0x1a>
 800ab02:	0793      	lsls	r3, r2, #30
 800ab04:	680e      	ldr	r6, [r1, #0]
 800ab06:	bf08      	it	eq
 800ab08:	694b      	ldreq	r3, [r1, #20]
 800ab0a:	600f      	str	r7, [r1, #0]
 800ab0c:	bf18      	it	ne
 800ab0e:	2300      	movne	r3, #0
 800ab10:	eba6 0807 	sub.w	r8, r6, r7
 800ab14:	608b      	str	r3, [r1, #8]
 800ab16:	f1b8 0f00 	cmp.w	r8, #0
 800ab1a:	dd9c      	ble.n	800aa56 <__sflush_r+0x1a>
 800ab1c:	6a21      	ldr	r1, [r4, #32]
 800ab1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab20:	4643      	mov	r3, r8
 800ab22:	463a      	mov	r2, r7
 800ab24:	4628      	mov	r0, r5
 800ab26:	47b0      	blx	r6
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	dc06      	bgt.n	800ab3a <__sflush_r+0xfe>
 800ab2c:	89a3      	ldrh	r3, [r4, #12]
 800ab2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab32:	81a3      	strh	r3, [r4, #12]
 800ab34:	f04f 30ff 	mov.w	r0, #4294967295
 800ab38:	e78e      	b.n	800aa58 <__sflush_r+0x1c>
 800ab3a:	4407      	add	r7, r0
 800ab3c:	eba8 0800 	sub.w	r8, r8, r0
 800ab40:	e7e9      	b.n	800ab16 <__sflush_r+0xda>
 800ab42:	bf00      	nop
 800ab44:	20400001 	.word	0x20400001

0800ab48 <_fflush_r>:
 800ab48:	b538      	push	{r3, r4, r5, lr}
 800ab4a:	690b      	ldr	r3, [r1, #16]
 800ab4c:	4605      	mov	r5, r0
 800ab4e:	460c      	mov	r4, r1
 800ab50:	b913      	cbnz	r3, 800ab58 <_fflush_r+0x10>
 800ab52:	2500      	movs	r5, #0
 800ab54:	4628      	mov	r0, r5
 800ab56:	bd38      	pop	{r3, r4, r5, pc}
 800ab58:	b118      	cbz	r0, 800ab62 <_fflush_r+0x1a>
 800ab5a:	6983      	ldr	r3, [r0, #24]
 800ab5c:	b90b      	cbnz	r3, 800ab62 <_fflush_r+0x1a>
 800ab5e:	f000 f887 	bl	800ac70 <__sinit>
 800ab62:	4b14      	ldr	r3, [pc, #80]	; (800abb4 <_fflush_r+0x6c>)
 800ab64:	429c      	cmp	r4, r3
 800ab66:	d11b      	bne.n	800aba0 <_fflush_r+0x58>
 800ab68:	686c      	ldr	r4, [r5, #4]
 800ab6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d0ef      	beq.n	800ab52 <_fflush_r+0xa>
 800ab72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab74:	07d0      	lsls	r0, r2, #31
 800ab76:	d404      	bmi.n	800ab82 <_fflush_r+0x3a>
 800ab78:	0599      	lsls	r1, r3, #22
 800ab7a:	d402      	bmi.n	800ab82 <_fflush_r+0x3a>
 800ab7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab7e:	f000 f915 	bl	800adac <__retarget_lock_acquire_recursive>
 800ab82:	4628      	mov	r0, r5
 800ab84:	4621      	mov	r1, r4
 800ab86:	f7ff ff59 	bl	800aa3c <__sflush_r>
 800ab8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab8c:	07da      	lsls	r2, r3, #31
 800ab8e:	4605      	mov	r5, r0
 800ab90:	d4e0      	bmi.n	800ab54 <_fflush_r+0xc>
 800ab92:	89a3      	ldrh	r3, [r4, #12]
 800ab94:	059b      	lsls	r3, r3, #22
 800ab96:	d4dd      	bmi.n	800ab54 <_fflush_r+0xc>
 800ab98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab9a:	f000 f908 	bl	800adae <__retarget_lock_release_recursive>
 800ab9e:	e7d9      	b.n	800ab54 <_fflush_r+0xc>
 800aba0:	4b05      	ldr	r3, [pc, #20]	; (800abb8 <_fflush_r+0x70>)
 800aba2:	429c      	cmp	r4, r3
 800aba4:	d101      	bne.n	800abaa <_fflush_r+0x62>
 800aba6:	68ac      	ldr	r4, [r5, #8]
 800aba8:	e7df      	b.n	800ab6a <_fflush_r+0x22>
 800abaa:	4b04      	ldr	r3, [pc, #16]	; (800abbc <_fflush_r+0x74>)
 800abac:	429c      	cmp	r4, r3
 800abae:	bf08      	it	eq
 800abb0:	68ec      	ldreq	r4, [r5, #12]
 800abb2:	e7da      	b.n	800ab6a <_fflush_r+0x22>
 800abb4:	0800c7a4 	.word	0x0800c7a4
 800abb8:	0800c7c4 	.word	0x0800c7c4
 800abbc:	0800c784 	.word	0x0800c784

0800abc0 <std>:
 800abc0:	2300      	movs	r3, #0
 800abc2:	b510      	push	{r4, lr}
 800abc4:	4604      	mov	r4, r0
 800abc6:	e9c0 3300 	strd	r3, r3, [r0]
 800abca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abce:	6083      	str	r3, [r0, #8]
 800abd0:	8181      	strh	r1, [r0, #12]
 800abd2:	6643      	str	r3, [r0, #100]	; 0x64
 800abd4:	81c2      	strh	r2, [r0, #14]
 800abd6:	6183      	str	r3, [r0, #24]
 800abd8:	4619      	mov	r1, r3
 800abda:	2208      	movs	r2, #8
 800abdc:	305c      	adds	r0, #92	; 0x5c
 800abde:	f7fd fb35 	bl	800824c <memset>
 800abe2:	4b05      	ldr	r3, [pc, #20]	; (800abf8 <std+0x38>)
 800abe4:	6263      	str	r3, [r4, #36]	; 0x24
 800abe6:	4b05      	ldr	r3, [pc, #20]	; (800abfc <std+0x3c>)
 800abe8:	62a3      	str	r3, [r4, #40]	; 0x28
 800abea:	4b05      	ldr	r3, [pc, #20]	; (800ac00 <std+0x40>)
 800abec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800abee:	4b05      	ldr	r3, [pc, #20]	; (800ac04 <std+0x44>)
 800abf0:	6224      	str	r4, [r4, #32]
 800abf2:	6323      	str	r3, [r4, #48]	; 0x30
 800abf4:	bd10      	pop	{r4, pc}
 800abf6:	bf00      	nop
 800abf8:	0800af15 	.word	0x0800af15
 800abfc:	0800af37 	.word	0x0800af37
 800ac00:	0800af6f 	.word	0x0800af6f
 800ac04:	0800af93 	.word	0x0800af93

0800ac08 <_cleanup_r>:
 800ac08:	4901      	ldr	r1, [pc, #4]	; (800ac10 <_cleanup_r+0x8>)
 800ac0a:	f000 b8af 	b.w	800ad6c <_fwalk_reent>
 800ac0e:	bf00      	nop
 800ac10:	0800ab49 	.word	0x0800ab49

0800ac14 <__sfmoreglue>:
 800ac14:	b570      	push	{r4, r5, r6, lr}
 800ac16:	2268      	movs	r2, #104	; 0x68
 800ac18:	1e4d      	subs	r5, r1, #1
 800ac1a:	4355      	muls	r5, r2
 800ac1c:	460e      	mov	r6, r1
 800ac1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac22:	f7ff fa65 	bl	800a0f0 <_malloc_r>
 800ac26:	4604      	mov	r4, r0
 800ac28:	b140      	cbz	r0, 800ac3c <__sfmoreglue+0x28>
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	e9c0 1600 	strd	r1, r6, [r0]
 800ac30:	300c      	adds	r0, #12
 800ac32:	60a0      	str	r0, [r4, #8]
 800ac34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac38:	f7fd fb08 	bl	800824c <memset>
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	bd70      	pop	{r4, r5, r6, pc}

0800ac40 <__sfp_lock_acquire>:
 800ac40:	4801      	ldr	r0, [pc, #4]	; (800ac48 <__sfp_lock_acquire+0x8>)
 800ac42:	f000 b8b3 	b.w	800adac <__retarget_lock_acquire_recursive>
 800ac46:	bf00      	nop
 800ac48:	20005f21 	.word	0x20005f21

0800ac4c <__sfp_lock_release>:
 800ac4c:	4801      	ldr	r0, [pc, #4]	; (800ac54 <__sfp_lock_release+0x8>)
 800ac4e:	f000 b8ae 	b.w	800adae <__retarget_lock_release_recursive>
 800ac52:	bf00      	nop
 800ac54:	20005f21 	.word	0x20005f21

0800ac58 <__sinit_lock_acquire>:
 800ac58:	4801      	ldr	r0, [pc, #4]	; (800ac60 <__sinit_lock_acquire+0x8>)
 800ac5a:	f000 b8a7 	b.w	800adac <__retarget_lock_acquire_recursive>
 800ac5e:	bf00      	nop
 800ac60:	20005f22 	.word	0x20005f22

0800ac64 <__sinit_lock_release>:
 800ac64:	4801      	ldr	r0, [pc, #4]	; (800ac6c <__sinit_lock_release+0x8>)
 800ac66:	f000 b8a2 	b.w	800adae <__retarget_lock_release_recursive>
 800ac6a:	bf00      	nop
 800ac6c:	20005f22 	.word	0x20005f22

0800ac70 <__sinit>:
 800ac70:	b510      	push	{r4, lr}
 800ac72:	4604      	mov	r4, r0
 800ac74:	f7ff fff0 	bl	800ac58 <__sinit_lock_acquire>
 800ac78:	69a3      	ldr	r3, [r4, #24]
 800ac7a:	b11b      	cbz	r3, 800ac84 <__sinit+0x14>
 800ac7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac80:	f7ff bff0 	b.w	800ac64 <__sinit_lock_release>
 800ac84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac88:	6523      	str	r3, [r4, #80]	; 0x50
 800ac8a:	4b13      	ldr	r3, [pc, #76]	; (800acd8 <__sinit+0x68>)
 800ac8c:	4a13      	ldr	r2, [pc, #76]	; (800acdc <__sinit+0x6c>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac92:	42a3      	cmp	r3, r4
 800ac94:	bf04      	itt	eq
 800ac96:	2301      	moveq	r3, #1
 800ac98:	61a3      	streq	r3, [r4, #24]
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	f000 f820 	bl	800ace0 <__sfp>
 800aca0:	6060      	str	r0, [r4, #4]
 800aca2:	4620      	mov	r0, r4
 800aca4:	f000 f81c 	bl	800ace0 <__sfp>
 800aca8:	60a0      	str	r0, [r4, #8]
 800acaa:	4620      	mov	r0, r4
 800acac:	f000 f818 	bl	800ace0 <__sfp>
 800acb0:	2200      	movs	r2, #0
 800acb2:	60e0      	str	r0, [r4, #12]
 800acb4:	2104      	movs	r1, #4
 800acb6:	6860      	ldr	r0, [r4, #4]
 800acb8:	f7ff ff82 	bl	800abc0 <std>
 800acbc:	68a0      	ldr	r0, [r4, #8]
 800acbe:	2201      	movs	r2, #1
 800acc0:	2109      	movs	r1, #9
 800acc2:	f7ff ff7d 	bl	800abc0 <std>
 800acc6:	68e0      	ldr	r0, [r4, #12]
 800acc8:	2202      	movs	r2, #2
 800acca:	2112      	movs	r1, #18
 800accc:	f7ff ff78 	bl	800abc0 <std>
 800acd0:	2301      	movs	r3, #1
 800acd2:	61a3      	str	r3, [r4, #24]
 800acd4:	e7d2      	b.n	800ac7c <__sinit+0xc>
 800acd6:	bf00      	nop
 800acd8:	0800c40c 	.word	0x0800c40c
 800acdc:	0800ac09 	.word	0x0800ac09

0800ace0 <__sfp>:
 800ace0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace2:	4607      	mov	r7, r0
 800ace4:	f7ff ffac 	bl	800ac40 <__sfp_lock_acquire>
 800ace8:	4b1e      	ldr	r3, [pc, #120]	; (800ad64 <__sfp+0x84>)
 800acea:	681e      	ldr	r6, [r3, #0]
 800acec:	69b3      	ldr	r3, [r6, #24]
 800acee:	b913      	cbnz	r3, 800acf6 <__sfp+0x16>
 800acf0:	4630      	mov	r0, r6
 800acf2:	f7ff ffbd 	bl	800ac70 <__sinit>
 800acf6:	3648      	adds	r6, #72	; 0x48
 800acf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800acfc:	3b01      	subs	r3, #1
 800acfe:	d503      	bpl.n	800ad08 <__sfp+0x28>
 800ad00:	6833      	ldr	r3, [r6, #0]
 800ad02:	b30b      	cbz	r3, 800ad48 <__sfp+0x68>
 800ad04:	6836      	ldr	r6, [r6, #0]
 800ad06:	e7f7      	b.n	800acf8 <__sfp+0x18>
 800ad08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad0c:	b9d5      	cbnz	r5, 800ad44 <__sfp+0x64>
 800ad0e:	4b16      	ldr	r3, [pc, #88]	; (800ad68 <__sfp+0x88>)
 800ad10:	60e3      	str	r3, [r4, #12]
 800ad12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad16:	6665      	str	r5, [r4, #100]	; 0x64
 800ad18:	f000 f847 	bl	800adaa <__retarget_lock_init_recursive>
 800ad1c:	f7ff ff96 	bl	800ac4c <__sfp_lock_release>
 800ad20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad28:	6025      	str	r5, [r4, #0]
 800ad2a:	61a5      	str	r5, [r4, #24]
 800ad2c:	2208      	movs	r2, #8
 800ad2e:	4629      	mov	r1, r5
 800ad30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad34:	f7fd fa8a 	bl	800824c <memset>
 800ad38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad40:	4620      	mov	r0, r4
 800ad42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad44:	3468      	adds	r4, #104	; 0x68
 800ad46:	e7d9      	b.n	800acfc <__sfp+0x1c>
 800ad48:	2104      	movs	r1, #4
 800ad4a:	4638      	mov	r0, r7
 800ad4c:	f7ff ff62 	bl	800ac14 <__sfmoreglue>
 800ad50:	4604      	mov	r4, r0
 800ad52:	6030      	str	r0, [r6, #0]
 800ad54:	2800      	cmp	r0, #0
 800ad56:	d1d5      	bne.n	800ad04 <__sfp+0x24>
 800ad58:	f7ff ff78 	bl	800ac4c <__sfp_lock_release>
 800ad5c:	230c      	movs	r3, #12
 800ad5e:	603b      	str	r3, [r7, #0]
 800ad60:	e7ee      	b.n	800ad40 <__sfp+0x60>
 800ad62:	bf00      	nop
 800ad64:	0800c40c 	.word	0x0800c40c
 800ad68:	ffff0001 	.word	0xffff0001

0800ad6c <_fwalk_reent>:
 800ad6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad70:	4606      	mov	r6, r0
 800ad72:	4688      	mov	r8, r1
 800ad74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad78:	2700      	movs	r7, #0
 800ad7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad7e:	f1b9 0901 	subs.w	r9, r9, #1
 800ad82:	d505      	bpl.n	800ad90 <_fwalk_reent+0x24>
 800ad84:	6824      	ldr	r4, [r4, #0]
 800ad86:	2c00      	cmp	r4, #0
 800ad88:	d1f7      	bne.n	800ad7a <_fwalk_reent+0xe>
 800ad8a:	4638      	mov	r0, r7
 800ad8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad90:	89ab      	ldrh	r3, [r5, #12]
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d907      	bls.n	800ada6 <_fwalk_reent+0x3a>
 800ad96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	d003      	beq.n	800ada6 <_fwalk_reent+0x3a>
 800ad9e:	4629      	mov	r1, r5
 800ada0:	4630      	mov	r0, r6
 800ada2:	47c0      	blx	r8
 800ada4:	4307      	orrs	r7, r0
 800ada6:	3568      	adds	r5, #104	; 0x68
 800ada8:	e7e9      	b.n	800ad7e <_fwalk_reent+0x12>

0800adaa <__retarget_lock_init_recursive>:
 800adaa:	4770      	bx	lr

0800adac <__retarget_lock_acquire_recursive>:
 800adac:	4770      	bx	lr

0800adae <__retarget_lock_release_recursive>:
 800adae:	4770      	bx	lr

0800adb0 <__swhatbuf_r>:
 800adb0:	b570      	push	{r4, r5, r6, lr}
 800adb2:	460e      	mov	r6, r1
 800adb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adb8:	2900      	cmp	r1, #0
 800adba:	b096      	sub	sp, #88	; 0x58
 800adbc:	4614      	mov	r4, r2
 800adbe:	461d      	mov	r5, r3
 800adc0:	da08      	bge.n	800add4 <__swhatbuf_r+0x24>
 800adc2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800adc6:	2200      	movs	r2, #0
 800adc8:	602a      	str	r2, [r5, #0]
 800adca:	061a      	lsls	r2, r3, #24
 800adcc:	d410      	bmi.n	800adf0 <__swhatbuf_r+0x40>
 800adce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800add2:	e00e      	b.n	800adf2 <__swhatbuf_r+0x42>
 800add4:	466a      	mov	r2, sp
 800add6:	f000 f903 	bl	800afe0 <_fstat_r>
 800adda:	2800      	cmp	r0, #0
 800addc:	dbf1      	blt.n	800adc2 <__swhatbuf_r+0x12>
 800adde:	9a01      	ldr	r2, [sp, #4]
 800ade0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ade4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ade8:	425a      	negs	r2, r3
 800adea:	415a      	adcs	r2, r3
 800adec:	602a      	str	r2, [r5, #0]
 800adee:	e7ee      	b.n	800adce <__swhatbuf_r+0x1e>
 800adf0:	2340      	movs	r3, #64	; 0x40
 800adf2:	2000      	movs	r0, #0
 800adf4:	6023      	str	r3, [r4, #0]
 800adf6:	b016      	add	sp, #88	; 0x58
 800adf8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800adfc <__smakebuf_r>:
 800adfc:	898b      	ldrh	r3, [r1, #12]
 800adfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae00:	079d      	lsls	r5, r3, #30
 800ae02:	4606      	mov	r6, r0
 800ae04:	460c      	mov	r4, r1
 800ae06:	d507      	bpl.n	800ae18 <__smakebuf_r+0x1c>
 800ae08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	6123      	str	r3, [r4, #16]
 800ae10:	2301      	movs	r3, #1
 800ae12:	6163      	str	r3, [r4, #20]
 800ae14:	b002      	add	sp, #8
 800ae16:	bd70      	pop	{r4, r5, r6, pc}
 800ae18:	ab01      	add	r3, sp, #4
 800ae1a:	466a      	mov	r2, sp
 800ae1c:	f7ff ffc8 	bl	800adb0 <__swhatbuf_r>
 800ae20:	9900      	ldr	r1, [sp, #0]
 800ae22:	4605      	mov	r5, r0
 800ae24:	4630      	mov	r0, r6
 800ae26:	f7ff f963 	bl	800a0f0 <_malloc_r>
 800ae2a:	b948      	cbnz	r0, 800ae40 <__smakebuf_r+0x44>
 800ae2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae30:	059a      	lsls	r2, r3, #22
 800ae32:	d4ef      	bmi.n	800ae14 <__smakebuf_r+0x18>
 800ae34:	f023 0303 	bic.w	r3, r3, #3
 800ae38:	f043 0302 	orr.w	r3, r3, #2
 800ae3c:	81a3      	strh	r3, [r4, #12]
 800ae3e:	e7e3      	b.n	800ae08 <__smakebuf_r+0xc>
 800ae40:	4b0d      	ldr	r3, [pc, #52]	; (800ae78 <__smakebuf_r+0x7c>)
 800ae42:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae44:	89a3      	ldrh	r3, [r4, #12]
 800ae46:	6020      	str	r0, [r4, #0]
 800ae48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae4c:	81a3      	strh	r3, [r4, #12]
 800ae4e:	9b00      	ldr	r3, [sp, #0]
 800ae50:	6163      	str	r3, [r4, #20]
 800ae52:	9b01      	ldr	r3, [sp, #4]
 800ae54:	6120      	str	r0, [r4, #16]
 800ae56:	b15b      	cbz	r3, 800ae70 <__smakebuf_r+0x74>
 800ae58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f000 f8d1 	bl	800b004 <_isatty_r>
 800ae62:	b128      	cbz	r0, 800ae70 <__smakebuf_r+0x74>
 800ae64:	89a3      	ldrh	r3, [r4, #12]
 800ae66:	f023 0303 	bic.w	r3, r3, #3
 800ae6a:	f043 0301 	orr.w	r3, r3, #1
 800ae6e:	81a3      	strh	r3, [r4, #12]
 800ae70:	89a0      	ldrh	r0, [r4, #12]
 800ae72:	4305      	orrs	r5, r0
 800ae74:	81a5      	strh	r5, [r4, #12]
 800ae76:	e7cd      	b.n	800ae14 <__smakebuf_r+0x18>
 800ae78:	0800ac09 	.word	0x0800ac09

0800ae7c <_malloc_usable_size_r>:
 800ae7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae80:	1f18      	subs	r0, r3, #4
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	bfbc      	itt	lt
 800ae86:	580b      	ldrlt	r3, [r1, r0]
 800ae88:	18c0      	addlt	r0, r0, r3
 800ae8a:	4770      	bx	lr

0800ae8c <_raise_r>:
 800ae8c:	291f      	cmp	r1, #31
 800ae8e:	b538      	push	{r3, r4, r5, lr}
 800ae90:	4604      	mov	r4, r0
 800ae92:	460d      	mov	r5, r1
 800ae94:	d904      	bls.n	800aea0 <_raise_r+0x14>
 800ae96:	2316      	movs	r3, #22
 800ae98:	6003      	str	r3, [r0, #0]
 800ae9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae9e:	bd38      	pop	{r3, r4, r5, pc}
 800aea0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aea2:	b112      	cbz	r2, 800aeaa <_raise_r+0x1e>
 800aea4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aea8:	b94b      	cbnz	r3, 800aebe <_raise_r+0x32>
 800aeaa:	4620      	mov	r0, r4
 800aeac:	f000 f830 	bl	800af10 <_getpid_r>
 800aeb0:	462a      	mov	r2, r5
 800aeb2:	4601      	mov	r1, r0
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aeba:	f000 b817 	b.w	800aeec <_kill_r>
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d00a      	beq.n	800aed8 <_raise_r+0x4c>
 800aec2:	1c59      	adds	r1, r3, #1
 800aec4:	d103      	bne.n	800aece <_raise_r+0x42>
 800aec6:	2316      	movs	r3, #22
 800aec8:	6003      	str	r3, [r0, #0]
 800aeca:	2001      	movs	r0, #1
 800aecc:	e7e7      	b.n	800ae9e <_raise_r+0x12>
 800aece:	2400      	movs	r4, #0
 800aed0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aed4:	4628      	mov	r0, r5
 800aed6:	4798      	blx	r3
 800aed8:	2000      	movs	r0, #0
 800aeda:	e7e0      	b.n	800ae9e <_raise_r+0x12>

0800aedc <raise>:
 800aedc:	4b02      	ldr	r3, [pc, #8]	; (800aee8 <raise+0xc>)
 800aede:	4601      	mov	r1, r0
 800aee0:	6818      	ldr	r0, [r3, #0]
 800aee2:	f7ff bfd3 	b.w	800ae8c <_raise_r>
 800aee6:	bf00      	nop
 800aee8:	20000010 	.word	0x20000010

0800aeec <_kill_r>:
 800aeec:	b538      	push	{r3, r4, r5, lr}
 800aeee:	4d07      	ldr	r5, [pc, #28]	; (800af0c <_kill_r+0x20>)
 800aef0:	2300      	movs	r3, #0
 800aef2:	4604      	mov	r4, r0
 800aef4:	4608      	mov	r0, r1
 800aef6:	4611      	mov	r1, r2
 800aef8:	602b      	str	r3, [r5, #0]
 800aefa:	f7f6 fffb 	bl	8001ef4 <_kill>
 800aefe:	1c43      	adds	r3, r0, #1
 800af00:	d102      	bne.n	800af08 <_kill_r+0x1c>
 800af02:	682b      	ldr	r3, [r5, #0]
 800af04:	b103      	cbz	r3, 800af08 <_kill_r+0x1c>
 800af06:	6023      	str	r3, [r4, #0]
 800af08:	bd38      	pop	{r3, r4, r5, pc}
 800af0a:	bf00      	nop
 800af0c:	20005f1c 	.word	0x20005f1c

0800af10 <_getpid_r>:
 800af10:	f7f6 bfe8 	b.w	8001ee4 <_getpid>

0800af14 <__sread>:
 800af14:	b510      	push	{r4, lr}
 800af16:	460c      	mov	r4, r1
 800af18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af1c:	f000 f894 	bl	800b048 <_read_r>
 800af20:	2800      	cmp	r0, #0
 800af22:	bfab      	itete	ge
 800af24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af26:	89a3      	ldrhlt	r3, [r4, #12]
 800af28:	181b      	addge	r3, r3, r0
 800af2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af2e:	bfac      	ite	ge
 800af30:	6563      	strge	r3, [r4, #84]	; 0x54
 800af32:	81a3      	strhlt	r3, [r4, #12]
 800af34:	bd10      	pop	{r4, pc}

0800af36 <__swrite>:
 800af36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af3a:	461f      	mov	r7, r3
 800af3c:	898b      	ldrh	r3, [r1, #12]
 800af3e:	05db      	lsls	r3, r3, #23
 800af40:	4605      	mov	r5, r0
 800af42:	460c      	mov	r4, r1
 800af44:	4616      	mov	r6, r2
 800af46:	d505      	bpl.n	800af54 <__swrite+0x1e>
 800af48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af4c:	2302      	movs	r3, #2
 800af4e:	2200      	movs	r2, #0
 800af50:	f000 f868 	bl	800b024 <_lseek_r>
 800af54:	89a3      	ldrh	r3, [r4, #12]
 800af56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af5e:	81a3      	strh	r3, [r4, #12]
 800af60:	4632      	mov	r2, r6
 800af62:	463b      	mov	r3, r7
 800af64:	4628      	mov	r0, r5
 800af66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af6a:	f000 b817 	b.w	800af9c <_write_r>

0800af6e <__sseek>:
 800af6e:	b510      	push	{r4, lr}
 800af70:	460c      	mov	r4, r1
 800af72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af76:	f000 f855 	bl	800b024 <_lseek_r>
 800af7a:	1c43      	adds	r3, r0, #1
 800af7c:	89a3      	ldrh	r3, [r4, #12]
 800af7e:	bf15      	itete	ne
 800af80:	6560      	strne	r0, [r4, #84]	; 0x54
 800af82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af8a:	81a3      	strheq	r3, [r4, #12]
 800af8c:	bf18      	it	ne
 800af8e:	81a3      	strhne	r3, [r4, #12]
 800af90:	bd10      	pop	{r4, pc}

0800af92 <__sclose>:
 800af92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af96:	f000 b813 	b.w	800afc0 <_close_r>
	...

0800af9c <_write_r>:
 800af9c:	b538      	push	{r3, r4, r5, lr}
 800af9e:	4d07      	ldr	r5, [pc, #28]	; (800afbc <_write_r+0x20>)
 800afa0:	4604      	mov	r4, r0
 800afa2:	4608      	mov	r0, r1
 800afa4:	4611      	mov	r1, r2
 800afa6:	2200      	movs	r2, #0
 800afa8:	602a      	str	r2, [r5, #0]
 800afaa:	461a      	mov	r2, r3
 800afac:	f7f6 ffd9 	bl	8001f62 <_write>
 800afb0:	1c43      	adds	r3, r0, #1
 800afb2:	d102      	bne.n	800afba <_write_r+0x1e>
 800afb4:	682b      	ldr	r3, [r5, #0]
 800afb6:	b103      	cbz	r3, 800afba <_write_r+0x1e>
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	bd38      	pop	{r3, r4, r5, pc}
 800afbc:	20005f1c 	.word	0x20005f1c

0800afc0 <_close_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4d06      	ldr	r5, [pc, #24]	; (800afdc <_close_r+0x1c>)
 800afc4:	2300      	movs	r3, #0
 800afc6:	4604      	mov	r4, r0
 800afc8:	4608      	mov	r0, r1
 800afca:	602b      	str	r3, [r5, #0]
 800afcc:	f7f6 ffe5 	bl	8001f9a <_close>
 800afd0:	1c43      	adds	r3, r0, #1
 800afd2:	d102      	bne.n	800afda <_close_r+0x1a>
 800afd4:	682b      	ldr	r3, [r5, #0]
 800afd6:	b103      	cbz	r3, 800afda <_close_r+0x1a>
 800afd8:	6023      	str	r3, [r4, #0]
 800afda:	bd38      	pop	{r3, r4, r5, pc}
 800afdc:	20005f1c 	.word	0x20005f1c

0800afe0 <_fstat_r>:
 800afe0:	b538      	push	{r3, r4, r5, lr}
 800afe2:	4d07      	ldr	r5, [pc, #28]	; (800b000 <_fstat_r+0x20>)
 800afe4:	2300      	movs	r3, #0
 800afe6:	4604      	mov	r4, r0
 800afe8:	4608      	mov	r0, r1
 800afea:	4611      	mov	r1, r2
 800afec:	602b      	str	r3, [r5, #0]
 800afee:	f7f6 ffe0 	bl	8001fb2 <_fstat>
 800aff2:	1c43      	adds	r3, r0, #1
 800aff4:	d102      	bne.n	800affc <_fstat_r+0x1c>
 800aff6:	682b      	ldr	r3, [r5, #0]
 800aff8:	b103      	cbz	r3, 800affc <_fstat_r+0x1c>
 800affa:	6023      	str	r3, [r4, #0]
 800affc:	bd38      	pop	{r3, r4, r5, pc}
 800affe:	bf00      	nop
 800b000:	20005f1c 	.word	0x20005f1c

0800b004 <_isatty_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	4d06      	ldr	r5, [pc, #24]	; (800b020 <_isatty_r+0x1c>)
 800b008:	2300      	movs	r3, #0
 800b00a:	4604      	mov	r4, r0
 800b00c:	4608      	mov	r0, r1
 800b00e:	602b      	str	r3, [r5, #0]
 800b010:	f7f6 ffdf 	bl	8001fd2 <_isatty>
 800b014:	1c43      	adds	r3, r0, #1
 800b016:	d102      	bne.n	800b01e <_isatty_r+0x1a>
 800b018:	682b      	ldr	r3, [r5, #0]
 800b01a:	b103      	cbz	r3, 800b01e <_isatty_r+0x1a>
 800b01c:	6023      	str	r3, [r4, #0]
 800b01e:	bd38      	pop	{r3, r4, r5, pc}
 800b020:	20005f1c 	.word	0x20005f1c

0800b024 <_lseek_r>:
 800b024:	b538      	push	{r3, r4, r5, lr}
 800b026:	4d07      	ldr	r5, [pc, #28]	; (800b044 <_lseek_r+0x20>)
 800b028:	4604      	mov	r4, r0
 800b02a:	4608      	mov	r0, r1
 800b02c:	4611      	mov	r1, r2
 800b02e:	2200      	movs	r2, #0
 800b030:	602a      	str	r2, [r5, #0]
 800b032:	461a      	mov	r2, r3
 800b034:	f7f6 ffd8 	bl	8001fe8 <_lseek>
 800b038:	1c43      	adds	r3, r0, #1
 800b03a:	d102      	bne.n	800b042 <_lseek_r+0x1e>
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	b103      	cbz	r3, 800b042 <_lseek_r+0x1e>
 800b040:	6023      	str	r3, [r4, #0]
 800b042:	bd38      	pop	{r3, r4, r5, pc}
 800b044:	20005f1c 	.word	0x20005f1c

0800b048 <_read_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	4d07      	ldr	r5, [pc, #28]	; (800b068 <_read_r+0x20>)
 800b04c:	4604      	mov	r4, r0
 800b04e:	4608      	mov	r0, r1
 800b050:	4611      	mov	r1, r2
 800b052:	2200      	movs	r2, #0
 800b054:	602a      	str	r2, [r5, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	f7f6 ff66 	bl	8001f28 <_read>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d102      	bne.n	800b066 <_read_r+0x1e>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	b103      	cbz	r3, 800b066 <_read_r+0x1e>
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	20005f1c 	.word	0x20005f1c
 800b06c:	00000000 	.word	0x00000000

0800b070 <atan>:
 800b070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	ec55 4b10 	vmov	r4, r5, d0
 800b078:	4bc3      	ldr	r3, [pc, #780]	; (800b388 <atan+0x318>)
 800b07a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b07e:	429e      	cmp	r6, r3
 800b080:	46ab      	mov	fp, r5
 800b082:	dd18      	ble.n	800b0b6 <atan+0x46>
 800b084:	4bc1      	ldr	r3, [pc, #772]	; (800b38c <atan+0x31c>)
 800b086:	429e      	cmp	r6, r3
 800b088:	dc01      	bgt.n	800b08e <atan+0x1e>
 800b08a:	d109      	bne.n	800b0a0 <atan+0x30>
 800b08c:	b144      	cbz	r4, 800b0a0 <atan+0x30>
 800b08e:	4622      	mov	r2, r4
 800b090:	462b      	mov	r3, r5
 800b092:	4620      	mov	r0, r4
 800b094:	4629      	mov	r1, r5
 800b096:	f7f5 f8f9 	bl	800028c <__adddf3>
 800b09a:	4604      	mov	r4, r0
 800b09c:	460d      	mov	r5, r1
 800b09e:	e006      	b.n	800b0ae <atan+0x3e>
 800b0a0:	f1bb 0f00 	cmp.w	fp, #0
 800b0a4:	f300 8131 	bgt.w	800b30a <atan+0x29a>
 800b0a8:	a59b      	add	r5, pc, #620	; (adr r5, 800b318 <atan+0x2a8>)
 800b0aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b0ae:	ec45 4b10 	vmov	d0, r4, r5
 800b0b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b6:	4bb6      	ldr	r3, [pc, #728]	; (800b390 <atan+0x320>)
 800b0b8:	429e      	cmp	r6, r3
 800b0ba:	dc14      	bgt.n	800b0e6 <atan+0x76>
 800b0bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b0c0:	429e      	cmp	r6, r3
 800b0c2:	dc0d      	bgt.n	800b0e0 <atan+0x70>
 800b0c4:	a396      	add	r3, pc, #600	; (adr r3, 800b320 <atan+0x2b0>)
 800b0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ca:	ee10 0a10 	vmov	r0, s0
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	f7f5 f8dc 	bl	800028c <__adddf3>
 800b0d4:	4baf      	ldr	r3, [pc, #700]	; (800b394 <atan+0x324>)
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f7f5 fd1e 	bl	8000b18 <__aeabi_dcmpgt>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	d1e6      	bne.n	800b0ae <atan+0x3e>
 800b0e0:	f04f 3aff 	mov.w	sl, #4294967295
 800b0e4:	e02b      	b.n	800b13e <atan+0xce>
 800b0e6:	f000 f963 	bl	800b3b0 <fabs>
 800b0ea:	4bab      	ldr	r3, [pc, #684]	; (800b398 <atan+0x328>)
 800b0ec:	429e      	cmp	r6, r3
 800b0ee:	ec55 4b10 	vmov	r4, r5, d0
 800b0f2:	f300 80bf 	bgt.w	800b274 <atan+0x204>
 800b0f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b0fa:	429e      	cmp	r6, r3
 800b0fc:	f300 80a0 	bgt.w	800b240 <atan+0x1d0>
 800b100:	ee10 2a10 	vmov	r2, s0
 800b104:	ee10 0a10 	vmov	r0, s0
 800b108:	462b      	mov	r3, r5
 800b10a:	4629      	mov	r1, r5
 800b10c:	f7f5 f8be 	bl	800028c <__adddf3>
 800b110:	4ba0      	ldr	r3, [pc, #640]	; (800b394 <atan+0x324>)
 800b112:	2200      	movs	r2, #0
 800b114:	f7f5 f8b8 	bl	8000288 <__aeabi_dsub>
 800b118:	2200      	movs	r2, #0
 800b11a:	4606      	mov	r6, r0
 800b11c:	460f      	mov	r7, r1
 800b11e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b122:	4620      	mov	r0, r4
 800b124:	4629      	mov	r1, r5
 800b126:	f7f5 f8b1 	bl	800028c <__adddf3>
 800b12a:	4602      	mov	r2, r0
 800b12c:	460b      	mov	r3, r1
 800b12e:	4630      	mov	r0, r6
 800b130:	4639      	mov	r1, r7
 800b132:	f7f5 fb8b 	bl	800084c <__aeabi_ddiv>
 800b136:	f04f 0a00 	mov.w	sl, #0
 800b13a:	4604      	mov	r4, r0
 800b13c:	460d      	mov	r5, r1
 800b13e:	4622      	mov	r2, r4
 800b140:	462b      	mov	r3, r5
 800b142:	4620      	mov	r0, r4
 800b144:	4629      	mov	r1, r5
 800b146:	f7f5 fa57 	bl	80005f8 <__aeabi_dmul>
 800b14a:	4602      	mov	r2, r0
 800b14c:	460b      	mov	r3, r1
 800b14e:	4680      	mov	r8, r0
 800b150:	4689      	mov	r9, r1
 800b152:	f7f5 fa51 	bl	80005f8 <__aeabi_dmul>
 800b156:	a374      	add	r3, pc, #464	; (adr r3, 800b328 <atan+0x2b8>)
 800b158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15c:	4606      	mov	r6, r0
 800b15e:	460f      	mov	r7, r1
 800b160:	f7f5 fa4a 	bl	80005f8 <__aeabi_dmul>
 800b164:	a372      	add	r3, pc, #456	; (adr r3, 800b330 <atan+0x2c0>)
 800b166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16a:	f7f5 f88f 	bl	800028c <__adddf3>
 800b16e:	4632      	mov	r2, r6
 800b170:	463b      	mov	r3, r7
 800b172:	f7f5 fa41 	bl	80005f8 <__aeabi_dmul>
 800b176:	a370      	add	r3, pc, #448	; (adr r3, 800b338 <atan+0x2c8>)
 800b178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17c:	f7f5 f886 	bl	800028c <__adddf3>
 800b180:	4632      	mov	r2, r6
 800b182:	463b      	mov	r3, r7
 800b184:	f7f5 fa38 	bl	80005f8 <__aeabi_dmul>
 800b188:	a36d      	add	r3, pc, #436	; (adr r3, 800b340 <atan+0x2d0>)
 800b18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18e:	f7f5 f87d 	bl	800028c <__adddf3>
 800b192:	4632      	mov	r2, r6
 800b194:	463b      	mov	r3, r7
 800b196:	f7f5 fa2f 	bl	80005f8 <__aeabi_dmul>
 800b19a:	a36b      	add	r3, pc, #428	; (adr r3, 800b348 <atan+0x2d8>)
 800b19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a0:	f7f5 f874 	bl	800028c <__adddf3>
 800b1a4:	4632      	mov	r2, r6
 800b1a6:	463b      	mov	r3, r7
 800b1a8:	f7f5 fa26 	bl	80005f8 <__aeabi_dmul>
 800b1ac:	a368      	add	r3, pc, #416	; (adr r3, 800b350 <atan+0x2e0>)
 800b1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b2:	f7f5 f86b 	bl	800028c <__adddf3>
 800b1b6:	4642      	mov	r2, r8
 800b1b8:	464b      	mov	r3, r9
 800b1ba:	f7f5 fa1d 	bl	80005f8 <__aeabi_dmul>
 800b1be:	a366      	add	r3, pc, #408	; (adr r3, 800b358 <atan+0x2e8>)
 800b1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c4:	4680      	mov	r8, r0
 800b1c6:	4689      	mov	r9, r1
 800b1c8:	4630      	mov	r0, r6
 800b1ca:	4639      	mov	r1, r7
 800b1cc:	f7f5 fa14 	bl	80005f8 <__aeabi_dmul>
 800b1d0:	a363      	add	r3, pc, #396	; (adr r3, 800b360 <atan+0x2f0>)
 800b1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d6:	f7f5 f857 	bl	8000288 <__aeabi_dsub>
 800b1da:	4632      	mov	r2, r6
 800b1dc:	463b      	mov	r3, r7
 800b1de:	f7f5 fa0b 	bl	80005f8 <__aeabi_dmul>
 800b1e2:	a361      	add	r3, pc, #388	; (adr r3, 800b368 <atan+0x2f8>)
 800b1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e8:	f7f5 f84e 	bl	8000288 <__aeabi_dsub>
 800b1ec:	4632      	mov	r2, r6
 800b1ee:	463b      	mov	r3, r7
 800b1f0:	f7f5 fa02 	bl	80005f8 <__aeabi_dmul>
 800b1f4:	a35e      	add	r3, pc, #376	; (adr r3, 800b370 <atan+0x300>)
 800b1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fa:	f7f5 f845 	bl	8000288 <__aeabi_dsub>
 800b1fe:	4632      	mov	r2, r6
 800b200:	463b      	mov	r3, r7
 800b202:	f7f5 f9f9 	bl	80005f8 <__aeabi_dmul>
 800b206:	a35c      	add	r3, pc, #368	; (adr r3, 800b378 <atan+0x308>)
 800b208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20c:	f7f5 f83c 	bl	8000288 <__aeabi_dsub>
 800b210:	4632      	mov	r2, r6
 800b212:	463b      	mov	r3, r7
 800b214:	f7f5 f9f0 	bl	80005f8 <__aeabi_dmul>
 800b218:	4602      	mov	r2, r0
 800b21a:	460b      	mov	r3, r1
 800b21c:	4640      	mov	r0, r8
 800b21e:	4649      	mov	r1, r9
 800b220:	f7f5 f834 	bl	800028c <__adddf3>
 800b224:	4622      	mov	r2, r4
 800b226:	462b      	mov	r3, r5
 800b228:	f7f5 f9e6 	bl	80005f8 <__aeabi_dmul>
 800b22c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b230:	4602      	mov	r2, r0
 800b232:	460b      	mov	r3, r1
 800b234:	d14b      	bne.n	800b2ce <atan+0x25e>
 800b236:	4620      	mov	r0, r4
 800b238:	4629      	mov	r1, r5
 800b23a:	f7f5 f825 	bl	8000288 <__aeabi_dsub>
 800b23e:	e72c      	b.n	800b09a <atan+0x2a>
 800b240:	ee10 0a10 	vmov	r0, s0
 800b244:	4b53      	ldr	r3, [pc, #332]	; (800b394 <atan+0x324>)
 800b246:	2200      	movs	r2, #0
 800b248:	4629      	mov	r1, r5
 800b24a:	f7f5 f81d 	bl	8000288 <__aeabi_dsub>
 800b24e:	4b51      	ldr	r3, [pc, #324]	; (800b394 <atan+0x324>)
 800b250:	4606      	mov	r6, r0
 800b252:	460f      	mov	r7, r1
 800b254:	2200      	movs	r2, #0
 800b256:	4620      	mov	r0, r4
 800b258:	4629      	mov	r1, r5
 800b25a:	f7f5 f817 	bl	800028c <__adddf3>
 800b25e:	4602      	mov	r2, r0
 800b260:	460b      	mov	r3, r1
 800b262:	4630      	mov	r0, r6
 800b264:	4639      	mov	r1, r7
 800b266:	f7f5 faf1 	bl	800084c <__aeabi_ddiv>
 800b26a:	f04f 0a01 	mov.w	sl, #1
 800b26e:	4604      	mov	r4, r0
 800b270:	460d      	mov	r5, r1
 800b272:	e764      	b.n	800b13e <atan+0xce>
 800b274:	4b49      	ldr	r3, [pc, #292]	; (800b39c <atan+0x32c>)
 800b276:	429e      	cmp	r6, r3
 800b278:	da1d      	bge.n	800b2b6 <atan+0x246>
 800b27a:	ee10 0a10 	vmov	r0, s0
 800b27e:	4b48      	ldr	r3, [pc, #288]	; (800b3a0 <atan+0x330>)
 800b280:	2200      	movs	r2, #0
 800b282:	4629      	mov	r1, r5
 800b284:	f7f5 f800 	bl	8000288 <__aeabi_dsub>
 800b288:	4b45      	ldr	r3, [pc, #276]	; (800b3a0 <atan+0x330>)
 800b28a:	4606      	mov	r6, r0
 800b28c:	460f      	mov	r7, r1
 800b28e:	2200      	movs	r2, #0
 800b290:	4620      	mov	r0, r4
 800b292:	4629      	mov	r1, r5
 800b294:	f7f5 f9b0 	bl	80005f8 <__aeabi_dmul>
 800b298:	4b3e      	ldr	r3, [pc, #248]	; (800b394 <atan+0x324>)
 800b29a:	2200      	movs	r2, #0
 800b29c:	f7f4 fff6 	bl	800028c <__adddf3>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	4639      	mov	r1, r7
 800b2a8:	f7f5 fad0 	bl	800084c <__aeabi_ddiv>
 800b2ac:	f04f 0a02 	mov.w	sl, #2
 800b2b0:	4604      	mov	r4, r0
 800b2b2:	460d      	mov	r5, r1
 800b2b4:	e743      	b.n	800b13e <atan+0xce>
 800b2b6:	462b      	mov	r3, r5
 800b2b8:	ee10 2a10 	vmov	r2, s0
 800b2bc:	4939      	ldr	r1, [pc, #228]	; (800b3a4 <atan+0x334>)
 800b2be:	2000      	movs	r0, #0
 800b2c0:	f7f5 fac4 	bl	800084c <__aeabi_ddiv>
 800b2c4:	f04f 0a03 	mov.w	sl, #3
 800b2c8:	4604      	mov	r4, r0
 800b2ca:	460d      	mov	r5, r1
 800b2cc:	e737      	b.n	800b13e <atan+0xce>
 800b2ce:	4b36      	ldr	r3, [pc, #216]	; (800b3a8 <atan+0x338>)
 800b2d0:	4e36      	ldr	r6, [pc, #216]	; (800b3ac <atan+0x33c>)
 800b2d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b2d6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b2da:	e9da 2300 	ldrd	r2, r3, [sl]
 800b2de:	f7f4 ffd3 	bl	8000288 <__aeabi_dsub>
 800b2e2:	4622      	mov	r2, r4
 800b2e4:	462b      	mov	r3, r5
 800b2e6:	f7f4 ffcf 	bl	8000288 <__aeabi_dsub>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b2f2:	f7f4 ffc9 	bl	8000288 <__aeabi_dsub>
 800b2f6:	f1bb 0f00 	cmp.w	fp, #0
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	460d      	mov	r5, r1
 800b2fe:	f6bf aed6 	bge.w	800b0ae <atan+0x3e>
 800b302:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b306:	461d      	mov	r5, r3
 800b308:	e6d1      	b.n	800b0ae <atan+0x3e>
 800b30a:	a51d      	add	r5, pc, #116	; (adr r5, 800b380 <atan+0x310>)
 800b30c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b310:	e6cd      	b.n	800b0ae <atan+0x3e>
 800b312:	bf00      	nop
 800b314:	f3af 8000 	nop.w
 800b318:	54442d18 	.word	0x54442d18
 800b31c:	bff921fb 	.word	0xbff921fb
 800b320:	8800759c 	.word	0x8800759c
 800b324:	7e37e43c 	.word	0x7e37e43c
 800b328:	e322da11 	.word	0xe322da11
 800b32c:	3f90ad3a 	.word	0x3f90ad3a
 800b330:	24760deb 	.word	0x24760deb
 800b334:	3fa97b4b 	.word	0x3fa97b4b
 800b338:	a0d03d51 	.word	0xa0d03d51
 800b33c:	3fb10d66 	.word	0x3fb10d66
 800b340:	c54c206e 	.word	0xc54c206e
 800b344:	3fb745cd 	.word	0x3fb745cd
 800b348:	920083ff 	.word	0x920083ff
 800b34c:	3fc24924 	.word	0x3fc24924
 800b350:	5555550d 	.word	0x5555550d
 800b354:	3fd55555 	.word	0x3fd55555
 800b358:	2c6a6c2f 	.word	0x2c6a6c2f
 800b35c:	bfa2b444 	.word	0xbfa2b444
 800b360:	52defd9a 	.word	0x52defd9a
 800b364:	3fadde2d 	.word	0x3fadde2d
 800b368:	af749a6d 	.word	0xaf749a6d
 800b36c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b370:	fe231671 	.word	0xfe231671
 800b374:	3fbc71c6 	.word	0x3fbc71c6
 800b378:	9998ebc4 	.word	0x9998ebc4
 800b37c:	3fc99999 	.word	0x3fc99999
 800b380:	54442d18 	.word	0x54442d18
 800b384:	3ff921fb 	.word	0x3ff921fb
 800b388:	440fffff 	.word	0x440fffff
 800b38c:	7ff00000 	.word	0x7ff00000
 800b390:	3fdbffff 	.word	0x3fdbffff
 800b394:	3ff00000 	.word	0x3ff00000
 800b398:	3ff2ffff 	.word	0x3ff2ffff
 800b39c:	40038000 	.word	0x40038000
 800b3a0:	3ff80000 	.word	0x3ff80000
 800b3a4:	bff00000 	.word	0xbff00000
 800b3a8:	0800c808 	.word	0x0800c808
 800b3ac:	0800c7e8 	.word	0x0800c7e8

0800b3b0 <fabs>:
 800b3b0:	ec51 0b10 	vmov	r0, r1, d0
 800b3b4:	ee10 2a10 	vmov	r2, s0
 800b3b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b3bc:	ec43 2b10 	vmov	d0, r2, r3
 800b3c0:	4770      	bx	lr
	...

0800b3c4 <pow>:
 800b3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c6:	ed2d 8b02 	vpush	{d8}
 800b3ca:	eeb0 8a40 	vmov.f32	s16, s0
 800b3ce:	eef0 8a60 	vmov.f32	s17, s1
 800b3d2:	ec55 4b11 	vmov	r4, r5, d1
 800b3d6:	f000 f893 	bl	800b500 <__ieee754_pow>
 800b3da:	4622      	mov	r2, r4
 800b3dc:	462b      	mov	r3, r5
 800b3de:	4620      	mov	r0, r4
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	ec57 6b10 	vmov	r6, r7, d0
 800b3e6:	f7f5 fba1 	bl	8000b2c <__aeabi_dcmpun>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	d13b      	bne.n	800b466 <pow+0xa2>
 800b3ee:	ec51 0b18 	vmov	r0, r1, d8
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	f7f5 fb67 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3fa:	b1b8      	cbz	r0, 800b42c <pow+0x68>
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	2300      	movs	r3, #0
 800b400:	4620      	mov	r0, r4
 800b402:	4629      	mov	r1, r5
 800b404:	f7f5 fb60 	bl	8000ac8 <__aeabi_dcmpeq>
 800b408:	2800      	cmp	r0, #0
 800b40a:	d146      	bne.n	800b49a <pow+0xd6>
 800b40c:	ec45 4b10 	vmov	d0, r4, r5
 800b410:	f000 fe86 	bl	800c120 <finite>
 800b414:	b338      	cbz	r0, 800b466 <pow+0xa2>
 800b416:	2200      	movs	r2, #0
 800b418:	2300      	movs	r3, #0
 800b41a:	4620      	mov	r0, r4
 800b41c:	4629      	mov	r1, r5
 800b41e:	f7f5 fb5d 	bl	8000adc <__aeabi_dcmplt>
 800b422:	b300      	cbz	r0, 800b466 <pow+0xa2>
 800b424:	f7fc feda 	bl	80081dc <__errno>
 800b428:	2322      	movs	r3, #34	; 0x22
 800b42a:	e01b      	b.n	800b464 <pow+0xa0>
 800b42c:	ec47 6b10 	vmov	d0, r6, r7
 800b430:	f000 fe76 	bl	800c120 <finite>
 800b434:	b9e0      	cbnz	r0, 800b470 <pow+0xac>
 800b436:	eeb0 0a48 	vmov.f32	s0, s16
 800b43a:	eef0 0a68 	vmov.f32	s1, s17
 800b43e:	f000 fe6f 	bl	800c120 <finite>
 800b442:	b1a8      	cbz	r0, 800b470 <pow+0xac>
 800b444:	ec45 4b10 	vmov	d0, r4, r5
 800b448:	f000 fe6a 	bl	800c120 <finite>
 800b44c:	b180      	cbz	r0, 800b470 <pow+0xac>
 800b44e:	4632      	mov	r2, r6
 800b450:	463b      	mov	r3, r7
 800b452:	4630      	mov	r0, r6
 800b454:	4639      	mov	r1, r7
 800b456:	f7f5 fb69 	bl	8000b2c <__aeabi_dcmpun>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	d0e2      	beq.n	800b424 <pow+0x60>
 800b45e:	f7fc febd 	bl	80081dc <__errno>
 800b462:	2321      	movs	r3, #33	; 0x21
 800b464:	6003      	str	r3, [r0, #0]
 800b466:	ecbd 8b02 	vpop	{d8}
 800b46a:	ec47 6b10 	vmov	d0, r6, r7
 800b46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b470:	2200      	movs	r2, #0
 800b472:	2300      	movs	r3, #0
 800b474:	4630      	mov	r0, r6
 800b476:	4639      	mov	r1, r7
 800b478:	f7f5 fb26 	bl	8000ac8 <__aeabi_dcmpeq>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	d0f2      	beq.n	800b466 <pow+0xa2>
 800b480:	eeb0 0a48 	vmov.f32	s0, s16
 800b484:	eef0 0a68 	vmov.f32	s1, s17
 800b488:	f000 fe4a 	bl	800c120 <finite>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d0ea      	beq.n	800b466 <pow+0xa2>
 800b490:	ec45 4b10 	vmov	d0, r4, r5
 800b494:	f000 fe44 	bl	800c120 <finite>
 800b498:	e7c3      	b.n	800b422 <pow+0x5e>
 800b49a:	4f01      	ldr	r7, [pc, #4]	; (800b4a0 <pow+0xdc>)
 800b49c:	2600      	movs	r6, #0
 800b49e:	e7e2      	b.n	800b466 <pow+0xa2>
 800b4a0:	3ff00000 	.word	0x3ff00000

0800b4a4 <sqrt>:
 800b4a4:	b538      	push	{r3, r4, r5, lr}
 800b4a6:	ed2d 8b02 	vpush	{d8}
 800b4aa:	ec55 4b10 	vmov	r4, r5, d0
 800b4ae:	f000 fd55 	bl	800bf5c <__ieee754_sqrt>
 800b4b2:	4622      	mov	r2, r4
 800b4b4:	462b      	mov	r3, r5
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	4629      	mov	r1, r5
 800b4ba:	eeb0 8a40 	vmov.f32	s16, s0
 800b4be:	eef0 8a60 	vmov.f32	s17, s1
 800b4c2:	f7f5 fb33 	bl	8000b2c <__aeabi_dcmpun>
 800b4c6:	b990      	cbnz	r0, 800b4ee <sqrt+0x4a>
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	4629      	mov	r1, r5
 800b4d0:	f7f5 fb04 	bl	8000adc <__aeabi_dcmplt>
 800b4d4:	b158      	cbz	r0, 800b4ee <sqrt+0x4a>
 800b4d6:	f7fc fe81 	bl	80081dc <__errno>
 800b4da:	2321      	movs	r3, #33	; 0x21
 800b4dc:	6003      	str	r3, [r0, #0]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	4610      	mov	r0, r2
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	f7f5 f9b1 	bl	800084c <__aeabi_ddiv>
 800b4ea:	ec41 0b18 	vmov	d8, r0, r1
 800b4ee:	eeb0 0a48 	vmov.f32	s0, s16
 800b4f2:	eef0 0a68 	vmov.f32	s1, s17
 800b4f6:	ecbd 8b02 	vpop	{d8}
 800b4fa:	bd38      	pop	{r3, r4, r5, pc}
 800b4fc:	0000      	movs	r0, r0
	...

0800b500 <__ieee754_pow>:
 800b500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b504:	ed2d 8b06 	vpush	{d8-d10}
 800b508:	b089      	sub	sp, #36	; 0x24
 800b50a:	ed8d 1b00 	vstr	d1, [sp]
 800b50e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b512:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b516:	ea58 0102 	orrs.w	r1, r8, r2
 800b51a:	ec57 6b10 	vmov	r6, r7, d0
 800b51e:	d115      	bne.n	800b54c <__ieee754_pow+0x4c>
 800b520:	19b3      	adds	r3, r6, r6
 800b522:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b526:	4152      	adcs	r2, r2
 800b528:	4299      	cmp	r1, r3
 800b52a:	4b89      	ldr	r3, [pc, #548]	; (800b750 <__ieee754_pow+0x250>)
 800b52c:	4193      	sbcs	r3, r2
 800b52e:	f080 84d2 	bcs.w	800bed6 <__ieee754_pow+0x9d6>
 800b532:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b536:	4630      	mov	r0, r6
 800b538:	4639      	mov	r1, r7
 800b53a:	f7f4 fea7 	bl	800028c <__adddf3>
 800b53e:	ec41 0b10 	vmov	d0, r0, r1
 800b542:	b009      	add	sp, #36	; 0x24
 800b544:	ecbd 8b06 	vpop	{d8-d10}
 800b548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b54c:	4b81      	ldr	r3, [pc, #516]	; (800b754 <__ieee754_pow+0x254>)
 800b54e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b552:	429c      	cmp	r4, r3
 800b554:	ee10 aa10 	vmov	sl, s0
 800b558:	463d      	mov	r5, r7
 800b55a:	dc06      	bgt.n	800b56a <__ieee754_pow+0x6a>
 800b55c:	d101      	bne.n	800b562 <__ieee754_pow+0x62>
 800b55e:	2e00      	cmp	r6, #0
 800b560:	d1e7      	bne.n	800b532 <__ieee754_pow+0x32>
 800b562:	4598      	cmp	r8, r3
 800b564:	dc01      	bgt.n	800b56a <__ieee754_pow+0x6a>
 800b566:	d10f      	bne.n	800b588 <__ieee754_pow+0x88>
 800b568:	b172      	cbz	r2, 800b588 <__ieee754_pow+0x88>
 800b56a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b56e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b572:	ea55 050a 	orrs.w	r5, r5, sl
 800b576:	d1dc      	bne.n	800b532 <__ieee754_pow+0x32>
 800b578:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b57c:	18db      	adds	r3, r3, r3
 800b57e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b582:	4152      	adcs	r2, r2
 800b584:	429d      	cmp	r5, r3
 800b586:	e7d0      	b.n	800b52a <__ieee754_pow+0x2a>
 800b588:	2d00      	cmp	r5, #0
 800b58a:	da3b      	bge.n	800b604 <__ieee754_pow+0x104>
 800b58c:	4b72      	ldr	r3, [pc, #456]	; (800b758 <__ieee754_pow+0x258>)
 800b58e:	4598      	cmp	r8, r3
 800b590:	dc51      	bgt.n	800b636 <__ieee754_pow+0x136>
 800b592:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b596:	4598      	cmp	r8, r3
 800b598:	f340 84ac 	ble.w	800bef4 <__ieee754_pow+0x9f4>
 800b59c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b5a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b5a4:	2b14      	cmp	r3, #20
 800b5a6:	dd0f      	ble.n	800b5c8 <__ieee754_pow+0xc8>
 800b5a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b5ac:	fa22 f103 	lsr.w	r1, r2, r3
 800b5b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	f040 849d 	bne.w	800bef4 <__ieee754_pow+0x9f4>
 800b5ba:	f001 0101 	and.w	r1, r1, #1
 800b5be:	f1c1 0302 	rsb	r3, r1, #2
 800b5c2:	9304      	str	r3, [sp, #16]
 800b5c4:	b182      	cbz	r2, 800b5e8 <__ieee754_pow+0xe8>
 800b5c6:	e05f      	b.n	800b688 <__ieee754_pow+0x188>
 800b5c8:	2a00      	cmp	r2, #0
 800b5ca:	d15b      	bne.n	800b684 <__ieee754_pow+0x184>
 800b5cc:	f1c3 0314 	rsb	r3, r3, #20
 800b5d0:	fa48 f103 	asr.w	r1, r8, r3
 800b5d4:	fa01 f303 	lsl.w	r3, r1, r3
 800b5d8:	4543      	cmp	r3, r8
 800b5da:	f040 8488 	bne.w	800beee <__ieee754_pow+0x9ee>
 800b5de:	f001 0101 	and.w	r1, r1, #1
 800b5e2:	f1c1 0302 	rsb	r3, r1, #2
 800b5e6:	9304      	str	r3, [sp, #16]
 800b5e8:	4b5c      	ldr	r3, [pc, #368]	; (800b75c <__ieee754_pow+0x25c>)
 800b5ea:	4598      	cmp	r8, r3
 800b5ec:	d132      	bne.n	800b654 <__ieee754_pow+0x154>
 800b5ee:	f1b9 0f00 	cmp.w	r9, #0
 800b5f2:	f280 8478 	bge.w	800bee6 <__ieee754_pow+0x9e6>
 800b5f6:	4959      	ldr	r1, [pc, #356]	; (800b75c <__ieee754_pow+0x25c>)
 800b5f8:	4632      	mov	r2, r6
 800b5fa:	463b      	mov	r3, r7
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	f7f5 f925 	bl	800084c <__aeabi_ddiv>
 800b602:	e79c      	b.n	800b53e <__ieee754_pow+0x3e>
 800b604:	2300      	movs	r3, #0
 800b606:	9304      	str	r3, [sp, #16]
 800b608:	2a00      	cmp	r2, #0
 800b60a:	d13d      	bne.n	800b688 <__ieee754_pow+0x188>
 800b60c:	4b51      	ldr	r3, [pc, #324]	; (800b754 <__ieee754_pow+0x254>)
 800b60e:	4598      	cmp	r8, r3
 800b610:	d1ea      	bne.n	800b5e8 <__ieee754_pow+0xe8>
 800b612:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b616:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b61a:	ea53 030a 	orrs.w	r3, r3, sl
 800b61e:	f000 845a 	beq.w	800bed6 <__ieee754_pow+0x9d6>
 800b622:	4b4f      	ldr	r3, [pc, #316]	; (800b760 <__ieee754_pow+0x260>)
 800b624:	429c      	cmp	r4, r3
 800b626:	dd08      	ble.n	800b63a <__ieee754_pow+0x13a>
 800b628:	f1b9 0f00 	cmp.w	r9, #0
 800b62c:	f2c0 8457 	blt.w	800bede <__ieee754_pow+0x9de>
 800b630:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b634:	e783      	b.n	800b53e <__ieee754_pow+0x3e>
 800b636:	2302      	movs	r3, #2
 800b638:	e7e5      	b.n	800b606 <__ieee754_pow+0x106>
 800b63a:	f1b9 0f00 	cmp.w	r9, #0
 800b63e:	f04f 0000 	mov.w	r0, #0
 800b642:	f04f 0100 	mov.w	r1, #0
 800b646:	f6bf af7a 	bge.w	800b53e <__ieee754_pow+0x3e>
 800b64a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b64e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b652:	e774      	b.n	800b53e <__ieee754_pow+0x3e>
 800b654:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b658:	d106      	bne.n	800b668 <__ieee754_pow+0x168>
 800b65a:	4632      	mov	r2, r6
 800b65c:	463b      	mov	r3, r7
 800b65e:	4630      	mov	r0, r6
 800b660:	4639      	mov	r1, r7
 800b662:	f7f4 ffc9 	bl	80005f8 <__aeabi_dmul>
 800b666:	e76a      	b.n	800b53e <__ieee754_pow+0x3e>
 800b668:	4b3e      	ldr	r3, [pc, #248]	; (800b764 <__ieee754_pow+0x264>)
 800b66a:	4599      	cmp	r9, r3
 800b66c:	d10c      	bne.n	800b688 <__ieee754_pow+0x188>
 800b66e:	2d00      	cmp	r5, #0
 800b670:	db0a      	blt.n	800b688 <__ieee754_pow+0x188>
 800b672:	ec47 6b10 	vmov	d0, r6, r7
 800b676:	b009      	add	sp, #36	; 0x24
 800b678:	ecbd 8b06 	vpop	{d8-d10}
 800b67c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b680:	f000 bc6c 	b.w	800bf5c <__ieee754_sqrt>
 800b684:	2300      	movs	r3, #0
 800b686:	9304      	str	r3, [sp, #16]
 800b688:	ec47 6b10 	vmov	d0, r6, r7
 800b68c:	f7ff fe90 	bl	800b3b0 <fabs>
 800b690:	ec51 0b10 	vmov	r0, r1, d0
 800b694:	f1ba 0f00 	cmp.w	sl, #0
 800b698:	d129      	bne.n	800b6ee <__ieee754_pow+0x1ee>
 800b69a:	b124      	cbz	r4, 800b6a6 <__ieee754_pow+0x1a6>
 800b69c:	4b2f      	ldr	r3, [pc, #188]	; (800b75c <__ieee754_pow+0x25c>)
 800b69e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d123      	bne.n	800b6ee <__ieee754_pow+0x1ee>
 800b6a6:	f1b9 0f00 	cmp.w	r9, #0
 800b6aa:	da05      	bge.n	800b6b8 <__ieee754_pow+0x1b8>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	492a      	ldr	r1, [pc, #168]	; (800b75c <__ieee754_pow+0x25c>)
 800b6b4:	f7f5 f8ca 	bl	800084c <__aeabi_ddiv>
 800b6b8:	2d00      	cmp	r5, #0
 800b6ba:	f6bf af40 	bge.w	800b53e <__ieee754_pow+0x3e>
 800b6be:	9b04      	ldr	r3, [sp, #16]
 800b6c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b6c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b6c8:	4323      	orrs	r3, r4
 800b6ca:	d108      	bne.n	800b6de <__ieee754_pow+0x1de>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	4610      	mov	r0, r2
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	f7f4 fdd8 	bl	8000288 <__aeabi_dsub>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	460b      	mov	r3, r1
 800b6dc:	e78f      	b.n	800b5fe <__ieee754_pow+0xfe>
 800b6de:	9b04      	ldr	r3, [sp, #16]
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	f47f af2c 	bne.w	800b53e <__ieee754_pow+0x3e>
 800b6e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	e727      	b.n	800b53e <__ieee754_pow+0x3e>
 800b6ee:	0feb      	lsrs	r3, r5, #31
 800b6f0:	3b01      	subs	r3, #1
 800b6f2:	9306      	str	r3, [sp, #24]
 800b6f4:	9a06      	ldr	r2, [sp, #24]
 800b6f6:	9b04      	ldr	r3, [sp, #16]
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	d102      	bne.n	800b702 <__ieee754_pow+0x202>
 800b6fc:	4632      	mov	r2, r6
 800b6fe:	463b      	mov	r3, r7
 800b700:	e7e6      	b.n	800b6d0 <__ieee754_pow+0x1d0>
 800b702:	4b19      	ldr	r3, [pc, #100]	; (800b768 <__ieee754_pow+0x268>)
 800b704:	4598      	cmp	r8, r3
 800b706:	f340 80fb 	ble.w	800b900 <__ieee754_pow+0x400>
 800b70a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b70e:	4598      	cmp	r8, r3
 800b710:	4b13      	ldr	r3, [pc, #76]	; (800b760 <__ieee754_pow+0x260>)
 800b712:	dd0c      	ble.n	800b72e <__ieee754_pow+0x22e>
 800b714:	429c      	cmp	r4, r3
 800b716:	dc0f      	bgt.n	800b738 <__ieee754_pow+0x238>
 800b718:	f1b9 0f00 	cmp.w	r9, #0
 800b71c:	da0f      	bge.n	800b73e <__ieee754_pow+0x23e>
 800b71e:	2000      	movs	r0, #0
 800b720:	b009      	add	sp, #36	; 0x24
 800b722:	ecbd 8b06 	vpop	{d8-d10}
 800b726:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72a:	f000 bcf0 	b.w	800c10e <__math_oflow>
 800b72e:	429c      	cmp	r4, r3
 800b730:	dbf2      	blt.n	800b718 <__ieee754_pow+0x218>
 800b732:	4b0a      	ldr	r3, [pc, #40]	; (800b75c <__ieee754_pow+0x25c>)
 800b734:	429c      	cmp	r4, r3
 800b736:	dd19      	ble.n	800b76c <__ieee754_pow+0x26c>
 800b738:	f1b9 0f00 	cmp.w	r9, #0
 800b73c:	dcef      	bgt.n	800b71e <__ieee754_pow+0x21e>
 800b73e:	2000      	movs	r0, #0
 800b740:	b009      	add	sp, #36	; 0x24
 800b742:	ecbd 8b06 	vpop	{d8-d10}
 800b746:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b74a:	f000 bcd7 	b.w	800c0fc <__math_uflow>
 800b74e:	bf00      	nop
 800b750:	fff00000 	.word	0xfff00000
 800b754:	7ff00000 	.word	0x7ff00000
 800b758:	433fffff 	.word	0x433fffff
 800b75c:	3ff00000 	.word	0x3ff00000
 800b760:	3fefffff 	.word	0x3fefffff
 800b764:	3fe00000 	.word	0x3fe00000
 800b768:	41e00000 	.word	0x41e00000
 800b76c:	4b60      	ldr	r3, [pc, #384]	; (800b8f0 <__ieee754_pow+0x3f0>)
 800b76e:	2200      	movs	r2, #0
 800b770:	f7f4 fd8a 	bl	8000288 <__aeabi_dsub>
 800b774:	a354      	add	r3, pc, #336	; (adr r3, 800b8c8 <__ieee754_pow+0x3c8>)
 800b776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77a:	4604      	mov	r4, r0
 800b77c:	460d      	mov	r5, r1
 800b77e:	f7f4 ff3b 	bl	80005f8 <__aeabi_dmul>
 800b782:	a353      	add	r3, pc, #332	; (adr r3, 800b8d0 <__ieee754_pow+0x3d0>)
 800b784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b788:	4606      	mov	r6, r0
 800b78a:	460f      	mov	r7, r1
 800b78c:	4620      	mov	r0, r4
 800b78e:	4629      	mov	r1, r5
 800b790:	f7f4 ff32 	bl	80005f8 <__aeabi_dmul>
 800b794:	4b57      	ldr	r3, [pc, #348]	; (800b8f4 <__ieee754_pow+0x3f4>)
 800b796:	4682      	mov	sl, r0
 800b798:	468b      	mov	fp, r1
 800b79a:	2200      	movs	r2, #0
 800b79c:	4620      	mov	r0, r4
 800b79e:	4629      	mov	r1, r5
 800b7a0:	f7f4 ff2a 	bl	80005f8 <__aeabi_dmul>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	a14b      	add	r1, pc, #300	; (adr r1, 800b8d8 <__ieee754_pow+0x3d8>)
 800b7aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7ae:	f7f4 fd6b 	bl	8000288 <__aeabi_dsub>
 800b7b2:	4622      	mov	r2, r4
 800b7b4:	462b      	mov	r3, r5
 800b7b6:	f7f4 ff1f 	bl	80005f8 <__aeabi_dmul>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	2000      	movs	r0, #0
 800b7c0:	494d      	ldr	r1, [pc, #308]	; (800b8f8 <__ieee754_pow+0x3f8>)
 800b7c2:	f7f4 fd61 	bl	8000288 <__aeabi_dsub>
 800b7c6:	4622      	mov	r2, r4
 800b7c8:	4680      	mov	r8, r0
 800b7ca:	4689      	mov	r9, r1
 800b7cc:	462b      	mov	r3, r5
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	4629      	mov	r1, r5
 800b7d2:	f7f4 ff11 	bl	80005f8 <__aeabi_dmul>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	460b      	mov	r3, r1
 800b7da:	4640      	mov	r0, r8
 800b7dc:	4649      	mov	r1, r9
 800b7de:	f7f4 ff0b 	bl	80005f8 <__aeabi_dmul>
 800b7e2:	a33f      	add	r3, pc, #252	; (adr r3, 800b8e0 <__ieee754_pow+0x3e0>)
 800b7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e8:	f7f4 ff06 	bl	80005f8 <__aeabi_dmul>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	4650      	mov	r0, sl
 800b7f2:	4659      	mov	r1, fp
 800b7f4:	f7f4 fd48 	bl	8000288 <__aeabi_dsub>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	4680      	mov	r8, r0
 800b7fe:	4689      	mov	r9, r1
 800b800:	4630      	mov	r0, r6
 800b802:	4639      	mov	r1, r7
 800b804:	f7f4 fd42 	bl	800028c <__adddf3>
 800b808:	2000      	movs	r0, #0
 800b80a:	4632      	mov	r2, r6
 800b80c:	463b      	mov	r3, r7
 800b80e:	4604      	mov	r4, r0
 800b810:	460d      	mov	r5, r1
 800b812:	f7f4 fd39 	bl	8000288 <__aeabi_dsub>
 800b816:	4602      	mov	r2, r0
 800b818:	460b      	mov	r3, r1
 800b81a:	4640      	mov	r0, r8
 800b81c:	4649      	mov	r1, r9
 800b81e:	f7f4 fd33 	bl	8000288 <__aeabi_dsub>
 800b822:	9b04      	ldr	r3, [sp, #16]
 800b824:	9a06      	ldr	r2, [sp, #24]
 800b826:	3b01      	subs	r3, #1
 800b828:	4313      	orrs	r3, r2
 800b82a:	4682      	mov	sl, r0
 800b82c:	468b      	mov	fp, r1
 800b82e:	f040 81e7 	bne.w	800bc00 <__ieee754_pow+0x700>
 800b832:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b8e8 <__ieee754_pow+0x3e8>
 800b836:	eeb0 8a47 	vmov.f32	s16, s14
 800b83a:	eef0 8a67 	vmov.f32	s17, s15
 800b83e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b842:	2600      	movs	r6, #0
 800b844:	4632      	mov	r2, r6
 800b846:	463b      	mov	r3, r7
 800b848:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b84c:	f7f4 fd1c 	bl	8000288 <__aeabi_dsub>
 800b850:	4622      	mov	r2, r4
 800b852:	462b      	mov	r3, r5
 800b854:	f7f4 fed0 	bl	80005f8 <__aeabi_dmul>
 800b858:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b85c:	4680      	mov	r8, r0
 800b85e:	4689      	mov	r9, r1
 800b860:	4650      	mov	r0, sl
 800b862:	4659      	mov	r1, fp
 800b864:	f7f4 fec8 	bl	80005f8 <__aeabi_dmul>
 800b868:	4602      	mov	r2, r0
 800b86a:	460b      	mov	r3, r1
 800b86c:	4640      	mov	r0, r8
 800b86e:	4649      	mov	r1, r9
 800b870:	f7f4 fd0c 	bl	800028c <__adddf3>
 800b874:	4632      	mov	r2, r6
 800b876:	463b      	mov	r3, r7
 800b878:	4680      	mov	r8, r0
 800b87a:	4689      	mov	r9, r1
 800b87c:	4620      	mov	r0, r4
 800b87e:	4629      	mov	r1, r5
 800b880:	f7f4 feba 	bl	80005f8 <__aeabi_dmul>
 800b884:	460b      	mov	r3, r1
 800b886:	4604      	mov	r4, r0
 800b888:	460d      	mov	r5, r1
 800b88a:	4602      	mov	r2, r0
 800b88c:	4649      	mov	r1, r9
 800b88e:	4640      	mov	r0, r8
 800b890:	f7f4 fcfc 	bl	800028c <__adddf3>
 800b894:	4b19      	ldr	r3, [pc, #100]	; (800b8fc <__ieee754_pow+0x3fc>)
 800b896:	4299      	cmp	r1, r3
 800b898:	ec45 4b19 	vmov	d9, r4, r5
 800b89c:	4606      	mov	r6, r0
 800b89e:	460f      	mov	r7, r1
 800b8a0:	468b      	mov	fp, r1
 800b8a2:	f340 82f1 	ble.w	800be88 <__ieee754_pow+0x988>
 800b8a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b8aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b8ae:	4303      	orrs	r3, r0
 800b8b0:	f000 81e4 	beq.w	800bc7c <__ieee754_pow+0x77c>
 800b8b4:	ec51 0b18 	vmov	r0, r1, d8
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	f7f5 f90e 	bl	8000adc <__aeabi_dcmplt>
 800b8c0:	3800      	subs	r0, #0
 800b8c2:	bf18      	it	ne
 800b8c4:	2001      	movne	r0, #1
 800b8c6:	e72b      	b.n	800b720 <__ieee754_pow+0x220>
 800b8c8:	60000000 	.word	0x60000000
 800b8cc:	3ff71547 	.word	0x3ff71547
 800b8d0:	f85ddf44 	.word	0xf85ddf44
 800b8d4:	3e54ae0b 	.word	0x3e54ae0b
 800b8d8:	55555555 	.word	0x55555555
 800b8dc:	3fd55555 	.word	0x3fd55555
 800b8e0:	652b82fe 	.word	0x652b82fe
 800b8e4:	3ff71547 	.word	0x3ff71547
 800b8e8:	00000000 	.word	0x00000000
 800b8ec:	bff00000 	.word	0xbff00000
 800b8f0:	3ff00000 	.word	0x3ff00000
 800b8f4:	3fd00000 	.word	0x3fd00000
 800b8f8:	3fe00000 	.word	0x3fe00000
 800b8fc:	408fffff 	.word	0x408fffff
 800b900:	4bd5      	ldr	r3, [pc, #852]	; (800bc58 <__ieee754_pow+0x758>)
 800b902:	402b      	ands	r3, r5
 800b904:	2200      	movs	r2, #0
 800b906:	b92b      	cbnz	r3, 800b914 <__ieee754_pow+0x414>
 800b908:	4bd4      	ldr	r3, [pc, #848]	; (800bc5c <__ieee754_pow+0x75c>)
 800b90a:	f7f4 fe75 	bl	80005f8 <__aeabi_dmul>
 800b90e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b912:	460c      	mov	r4, r1
 800b914:	1523      	asrs	r3, r4, #20
 800b916:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b91a:	4413      	add	r3, r2
 800b91c:	9305      	str	r3, [sp, #20]
 800b91e:	4bd0      	ldr	r3, [pc, #832]	; (800bc60 <__ieee754_pow+0x760>)
 800b920:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b924:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b928:	429c      	cmp	r4, r3
 800b92a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b92e:	dd08      	ble.n	800b942 <__ieee754_pow+0x442>
 800b930:	4bcc      	ldr	r3, [pc, #816]	; (800bc64 <__ieee754_pow+0x764>)
 800b932:	429c      	cmp	r4, r3
 800b934:	f340 8162 	ble.w	800bbfc <__ieee754_pow+0x6fc>
 800b938:	9b05      	ldr	r3, [sp, #20]
 800b93a:	3301      	adds	r3, #1
 800b93c:	9305      	str	r3, [sp, #20]
 800b93e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b942:	2400      	movs	r4, #0
 800b944:	00e3      	lsls	r3, r4, #3
 800b946:	9307      	str	r3, [sp, #28]
 800b948:	4bc7      	ldr	r3, [pc, #796]	; (800bc68 <__ieee754_pow+0x768>)
 800b94a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b94e:	ed93 7b00 	vldr	d7, [r3]
 800b952:	4629      	mov	r1, r5
 800b954:	ec53 2b17 	vmov	r2, r3, d7
 800b958:	eeb0 9a47 	vmov.f32	s18, s14
 800b95c:	eef0 9a67 	vmov.f32	s19, s15
 800b960:	4682      	mov	sl, r0
 800b962:	f7f4 fc91 	bl	8000288 <__aeabi_dsub>
 800b966:	4652      	mov	r2, sl
 800b968:	4606      	mov	r6, r0
 800b96a:	460f      	mov	r7, r1
 800b96c:	462b      	mov	r3, r5
 800b96e:	ec51 0b19 	vmov	r0, r1, d9
 800b972:	f7f4 fc8b 	bl	800028c <__adddf3>
 800b976:	4602      	mov	r2, r0
 800b978:	460b      	mov	r3, r1
 800b97a:	2000      	movs	r0, #0
 800b97c:	49bb      	ldr	r1, [pc, #748]	; (800bc6c <__ieee754_pow+0x76c>)
 800b97e:	f7f4 ff65 	bl	800084c <__aeabi_ddiv>
 800b982:	ec41 0b1a 	vmov	d10, r0, r1
 800b986:	4602      	mov	r2, r0
 800b988:	460b      	mov	r3, r1
 800b98a:	4630      	mov	r0, r6
 800b98c:	4639      	mov	r1, r7
 800b98e:	f7f4 fe33 	bl	80005f8 <__aeabi_dmul>
 800b992:	2300      	movs	r3, #0
 800b994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b998:	9302      	str	r3, [sp, #8]
 800b99a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b99e:	46ab      	mov	fp, r5
 800b9a0:	106d      	asrs	r5, r5, #1
 800b9a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b9a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b9aa:	ec41 0b18 	vmov	d8, r0, r1
 800b9ae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	4640      	mov	r0, r8
 800b9b6:	4649      	mov	r1, r9
 800b9b8:	4614      	mov	r4, r2
 800b9ba:	461d      	mov	r5, r3
 800b9bc:	f7f4 fe1c 	bl	80005f8 <__aeabi_dmul>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	4630      	mov	r0, r6
 800b9c6:	4639      	mov	r1, r7
 800b9c8:	f7f4 fc5e 	bl	8000288 <__aeabi_dsub>
 800b9cc:	ec53 2b19 	vmov	r2, r3, d9
 800b9d0:	4606      	mov	r6, r0
 800b9d2:	460f      	mov	r7, r1
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	4629      	mov	r1, r5
 800b9d8:	f7f4 fc56 	bl	8000288 <__aeabi_dsub>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	460b      	mov	r3, r1
 800b9e0:	4650      	mov	r0, sl
 800b9e2:	4659      	mov	r1, fp
 800b9e4:	f7f4 fc50 	bl	8000288 <__aeabi_dsub>
 800b9e8:	4642      	mov	r2, r8
 800b9ea:	464b      	mov	r3, r9
 800b9ec:	f7f4 fe04 	bl	80005f8 <__aeabi_dmul>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	4639      	mov	r1, r7
 800b9f8:	f7f4 fc46 	bl	8000288 <__aeabi_dsub>
 800b9fc:	ec53 2b1a 	vmov	r2, r3, d10
 800ba00:	f7f4 fdfa 	bl	80005f8 <__aeabi_dmul>
 800ba04:	ec53 2b18 	vmov	r2, r3, d8
 800ba08:	ec41 0b19 	vmov	d9, r0, r1
 800ba0c:	ec51 0b18 	vmov	r0, r1, d8
 800ba10:	f7f4 fdf2 	bl	80005f8 <__aeabi_dmul>
 800ba14:	a37c      	add	r3, pc, #496	; (adr r3, 800bc08 <__ieee754_pow+0x708>)
 800ba16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	460d      	mov	r5, r1
 800ba1e:	f7f4 fdeb 	bl	80005f8 <__aeabi_dmul>
 800ba22:	a37b      	add	r3, pc, #492	; (adr r3, 800bc10 <__ieee754_pow+0x710>)
 800ba24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba28:	f7f4 fc30 	bl	800028c <__adddf3>
 800ba2c:	4622      	mov	r2, r4
 800ba2e:	462b      	mov	r3, r5
 800ba30:	f7f4 fde2 	bl	80005f8 <__aeabi_dmul>
 800ba34:	a378      	add	r3, pc, #480	; (adr r3, 800bc18 <__ieee754_pow+0x718>)
 800ba36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3a:	f7f4 fc27 	bl	800028c <__adddf3>
 800ba3e:	4622      	mov	r2, r4
 800ba40:	462b      	mov	r3, r5
 800ba42:	f7f4 fdd9 	bl	80005f8 <__aeabi_dmul>
 800ba46:	a376      	add	r3, pc, #472	; (adr r3, 800bc20 <__ieee754_pow+0x720>)
 800ba48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4c:	f7f4 fc1e 	bl	800028c <__adddf3>
 800ba50:	4622      	mov	r2, r4
 800ba52:	462b      	mov	r3, r5
 800ba54:	f7f4 fdd0 	bl	80005f8 <__aeabi_dmul>
 800ba58:	a373      	add	r3, pc, #460	; (adr r3, 800bc28 <__ieee754_pow+0x728>)
 800ba5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5e:	f7f4 fc15 	bl	800028c <__adddf3>
 800ba62:	4622      	mov	r2, r4
 800ba64:	462b      	mov	r3, r5
 800ba66:	f7f4 fdc7 	bl	80005f8 <__aeabi_dmul>
 800ba6a:	a371      	add	r3, pc, #452	; (adr r3, 800bc30 <__ieee754_pow+0x730>)
 800ba6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba70:	f7f4 fc0c 	bl	800028c <__adddf3>
 800ba74:	4622      	mov	r2, r4
 800ba76:	4606      	mov	r6, r0
 800ba78:	460f      	mov	r7, r1
 800ba7a:	462b      	mov	r3, r5
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	4629      	mov	r1, r5
 800ba80:	f7f4 fdba 	bl	80005f8 <__aeabi_dmul>
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	4630      	mov	r0, r6
 800ba8a:	4639      	mov	r1, r7
 800ba8c:	f7f4 fdb4 	bl	80005f8 <__aeabi_dmul>
 800ba90:	4642      	mov	r2, r8
 800ba92:	4604      	mov	r4, r0
 800ba94:	460d      	mov	r5, r1
 800ba96:	464b      	mov	r3, r9
 800ba98:	ec51 0b18 	vmov	r0, r1, d8
 800ba9c:	f7f4 fbf6 	bl	800028c <__adddf3>
 800baa0:	ec53 2b19 	vmov	r2, r3, d9
 800baa4:	f7f4 fda8 	bl	80005f8 <__aeabi_dmul>
 800baa8:	4622      	mov	r2, r4
 800baaa:	462b      	mov	r3, r5
 800baac:	f7f4 fbee 	bl	800028c <__adddf3>
 800bab0:	4642      	mov	r2, r8
 800bab2:	4682      	mov	sl, r0
 800bab4:	468b      	mov	fp, r1
 800bab6:	464b      	mov	r3, r9
 800bab8:	4640      	mov	r0, r8
 800baba:	4649      	mov	r1, r9
 800babc:	f7f4 fd9c 	bl	80005f8 <__aeabi_dmul>
 800bac0:	4b6b      	ldr	r3, [pc, #428]	; (800bc70 <__ieee754_pow+0x770>)
 800bac2:	2200      	movs	r2, #0
 800bac4:	4606      	mov	r6, r0
 800bac6:	460f      	mov	r7, r1
 800bac8:	f7f4 fbe0 	bl	800028c <__adddf3>
 800bacc:	4652      	mov	r2, sl
 800bace:	465b      	mov	r3, fp
 800bad0:	f7f4 fbdc 	bl	800028c <__adddf3>
 800bad4:	2000      	movs	r0, #0
 800bad6:	4604      	mov	r4, r0
 800bad8:	460d      	mov	r5, r1
 800bada:	4602      	mov	r2, r0
 800badc:	460b      	mov	r3, r1
 800bade:	4640      	mov	r0, r8
 800bae0:	4649      	mov	r1, r9
 800bae2:	f7f4 fd89 	bl	80005f8 <__aeabi_dmul>
 800bae6:	4b62      	ldr	r3, [pc, #392]	; (800bc70 <__ieee754_pow+0x770>)
 800bae8:	4680      	mov	r8, r0
 800baea:	4689      	mov	r9, r1
 800baec:	2200      	movs	r2, #0
 800baee:	4620      	mov	r0, r4
 800baf0:	4629      	mov	r1, r5
 800baf2:	f7f4 fbc9 	bl	8000288 <__aeabi_dsub>
 800baf6:	4632      	mov	r2, r6
 800baf8:	463b      	mov	r3, r7
 800bafa:	f7f4 fbc5 	bl	8000288 <__aeabi_dsub>
 800bafe:	4602      	mov	r2, r0
 800bb00:	460b      	mov	r3, r1
 800bb02:	4650      	mov	r0, sl
 800bb04:	4659      	mov	r1, fp
 800bb06:	f7f4 fbbf 	bl	8000288 <__aeabi_dsub>
 800bb0a:	ec53 2b18 	vmov	r2, r3, d8
 800bb0e:	f7f4 fd73 	bl	80005f8 <__aeabi_dmul>
 800bb12:	4622      	mov	r2, r4
 800bb14:	4606      	mov	r6, r0
 800bb16:	460f      	mov	r7, r1
 800bb18:	462b      	mov	r3, r5
 800bb1a:	ec51 0b19 	vmov	r0, r1, d9
 800bb1e:	f7f4 fd6b 	bl	80005f8 <__aeabi_dmul>
 800bb22:	4602      	mov	r2, r0
 800bb24:	460b      	mov	r3, r1
 800bb26:	4630      	mov	r0, r6
 800bb28:	4639      	mov	r1, r7
 800bb2a:	f7f4 fbaf 	bl	800028c <__adddf3>
 800bb2e:	4606      	mov	r6, r0
 800bb30:	460f      	mov	r7, r1
 800bb32:	4602      	mov	r2, r0
 800bb34:	460b      	mov	r3, r1
 800bb36:	4640      	mov	r0, r8
 800bb38:	4649      	mov	r1, r9
 800bb3a:	f7f4 fba7 	bl	800028c <__adddf3>
 800bb3e:	a33e      	add	r3, pc, #248	; (adr r3, 800bc38 <__ieee754_pow+0x738>)
 800bb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb44:	2000      	movs	r0, #0
 800bb46:	4604      	mov	r4, r0
 800bb48:	460d      	mov	r5, r1
 800bb4a:	f7f4 fd55 	bl	80005f8 <__aeabi_dmul>
 800bb4e:	4642      	mov	r2, r8
 800bb50:	ec41 0b18 	vmov	d8, r0, r1
 800bb54:	464b      	mov	r3, r9
 800bb56:	4620      	mov	r0, r4
 800bb58:	4629      	mov	r1, r5
 800bb5a:	f7f4 fb95 	bl	8000288 <__aeabi_dsub>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	460b      	mov	r3, r1
 800bb62:	4630      	mov	r0, r6
 800bb64:	4639      	mov	r1, r7
 800bb66:	f7f4 fb8f 	bl	8000288 <__aeabi_dsub>
 800bb6a:	a335      	add	r3, pc, #212	; (adr r3, 800bc40 <__ieee754_pow+0x740>)
 800bb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb70:	f7f4 fd42 	bl	80005f8 <__aeabi_dmul>
 800bb74:	a334      	add	r3, pc, #208	; (adr r3, 800bc48 <__ieee754_pow+0x748>)
 800bb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7a:	4606      	mov	r6, r0
 800bb7c:	460f      	mov	r7, r1
 800bb7e:	4620      	mov	r0, r4
 800bb80:	4629      	mov	r1, r5
 800bb82:	f7f4 fd39 	bl	80005f8 <__aeabi_dmul>
 800bb86:	4602      	mov	r2, r0
 800bb88:	460b      	mov	r3, r1
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	4639      	mov	r1, r7
 800bb8e:	f7f4 fb7d 	bl	800028c <__adddf3>
 800bb92:	9a07      	ldr	r2, [sp, #28]
 800bb94:	4b37      	ldr	r3, [pc, #220]	; (800bc74 <__ieee754_pow+0x774>)
 800bb96:	4413      	add	r3, r2
 800bb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9c:	f7f4 fb76 	bl	800028c <__adddf3>
 800bba0:	4682      	mov	sl, r0
 800bba2:	9805      	ldr	r0, [sp, #20]
 800bba4:	468b      	mov	fp, r1
 800bba6:	f7f4 fcbd 	bl	8000524 <__aeabi_i2d>
 800bbaa:	9a07      	ldr	r2, [sp, #28]
 800bbac:	4b32      	ldr	r3, [pc, #200]	; (800bc78 <__ieee754_pow+0x778>)
 800bbae:	4413      	add	r3, r2
 800bbb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bbb4:	4606      	mov	r6, r0
 800bbb6:	460f      	mov	r7, r1
 800bbb8:	4652      	mov	r2, sl
 800bbba:	465b      	mov	r3, fp
 800bbbc:	ec51 0b18 	vmov	r0, r1, d8
 800bbc0:	f7f4 fb64 	bl	800028c <__adddf3>
 800bbc4:	4642      	mov	r2, r8
 800bbc6:	464b      	mov	r3, r9
 800bbc8:	f7f4 fb60 	bl	800028c <__adddf3>
 800bbcc:	4632      	mov	r2, r6
 800bbce:	463b      	mov	r3, r7
 800bbd0:	f7f4 fb5c 	bl	800028c <__adddf3>
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	4632      	mov	r2, r6
 800bbd8:	463b      	mov	r3, r7
 800bbda:	4604      	mov	r4, r0
 800bbdc:	460d      	mov	r5, r1
 800bbde:	f7f4 fb53 	bl	8000288 <__aeabi_dsub>
 800bbe2:	4642      	mov	r2, r8
 800bbe4:	464b      	mov	r3, r9
 800bbe6:	f7f4 fb4f 	bl	8000288 <__aeabi_dsub>
 800bbea:	ec53 2b18 	vmov	r2, r3, d8
 800bbee:	f7f4 fb4b 	bl	8000288 <__aeabi_dsub>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	4650      	mov	r0, sl
 800bbf8:	4659      	mov	r1, fp
 800bbfa:	e610      	b.n	800b81e <__ieee754_pow+0x31e>
 800bbfc:	2401      	movs	r4, #1
 800bbfe:	e6a1      	b.n	800b944 <__ieee754_pow+0x444>
 800bc00:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800bc50 <__ieee754_pow+0x750>
 800bc04:	e617      	b.n	800b836 <__ieee754_pow+0x336>
 800bc06:	bf00      	nop
 800bc08:	4a454eef 	.word	0x4a454eef
 800bc0c:	3fca7e28 	.word	0x3fca7e28
 800bc10:	93c9db65 	.word	0x93c9db65
 800bc14:	3fcd864a 	.word	0x3fcd864a
 800bc18:	a91d4101 	.word	0xa91d4101
 800bc1c:	3fd17460 	.word	0x3fd17460
 800bc20:	518f264d 	.word	0x518f264d
 800bc24:	3fd55555 	.word	0x3fd55555
 800bc28:	db6fabff 	.word	0xdb6fabff
 800bc2c:	3fdb6db6 	.word	0x3fdb6db6
 800bc30:	33333303 	.word	0x33333303
 800bc34:	3fe33333 	.word	0x3fe33333
 800bc38:	e0000000 	.word	0xe0000000
 800bc3c:	3feec709 	.word	0x3feec709
 800bc40:	dc3a03fd 	.word	0xdc3a03fd
 800bc44:	3feec709 	.word	0x3feec709
 800bc48:	145b01f5 	.word	0x145b01f5
 800bc4c:	be3e2fe0 	.word	0xbe3e2fe0
 800bc50:	00000000 	.word	0x00000000
 800bc54:	3ff00000 	.word	0x3ff00000
 800bc58:	7ff00000 	.word	0x7ff00000
 800bc5c:	43400000 	.word	0x43400000
 800bc60:	0003988e 	.word	0x0003988e
 800bc64:	000bb679 	.word	0x000bb679
 800bc68:	0800c828 	.word	0x0800c828
 800bc6c:	3ff00000 	.word	0x3ff00000
 800bc70:	40080000 	.word	0x40080000
 800bc74:	0800c848 	.word	0x0800c848
 800bc78:	0800c838 	.word	0x0800c838
 800bc7c:	a3b5      	add	r3, pc, #724	; (adr r3, 800bf54 <__ieee754_pow+0xa54>)
 800bc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc82:	4640      	mov	r0, r8
 800bc84:	4649      	mov	r1, r9
 800bc86:	f7f4 fb01 	bl	800028c <__adddf3>
 800bc8a:	4622      	mov	r2, r4
 800bc8c:	ec41 0b1a 	vmov	d10, r0, r1
 800bc90:	462b      	mov	r3, r5
 800bc92:	4630      	mov	r0, r6
 800bc94:	4639      	mov	r1, r7
 800bc96:	f7f4 faf7 	bl	8000288 <__aeabi_dsub>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	ec51 0b1a 	vmov	r0, r1, d10
 800bca2:	f7f4 ff39 	bl	8000b18 <__aeabi_dcmpgt>
 800bca6:	2800      	cmp	r0, #0
 800bca8:	f47f ae04 	bne.w	800b8b4 <__ieee754_pow+0x3b4>
 800bcac:	4aa4      	ldr	r2, [pc, #656]	; (800bf40 <__ieee754_pow+0xa40>)
 800bcae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	f340 8108 	ble.w	800bec8 <__ieee754_pow+0x9c8>
 800bcb8:	151b      	asrs	r3, r3, #20
 800bcba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bcbe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bcc2:	fa4a f303 	asr.w	r3, sl, r3
 800bcc6:	445b      	add	r3, fp
 800bcc8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bccc:	4e9d      	ldr	r6, [pc, #628]	; (800bf44 <__ieee754_pow+0xa44>)
 800bcce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bcd2:	4116      	asrs	r6, r2
 800bcd4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bcd8:	2000      	movs	r0, #0
 800bcda:	ea23 0106 	bic.w	r1, r3, r6
 800bcde:	f1c2 0214 	rsb	r2, r2, #20
 800bce2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bce6:	fa4a fa02 	asr.w	sl, sl, r2
 800bcea:	f1bb 0f00 	cmp.w	fp, #0
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	4629      	mov	r1, r5
 800bcf6:	bfb8      	it	lt
 800bcf8:	f1ca 0a00 	rsblt	sl, sl, #0
 800bcfc:	f7f4 fac4 	bl	8000288 <__aeabi_dsub>
 800bd00:	ec41 0b19 	vmov	d9, r0, r1
 800bd04:	4642      	mov	r2, r8
 800bd06:	464b      	mov	r3, r9
 800bd08:	ec51 0b19 	vmov	r0, r1, d9
 800bd0c:	f7f4 fabe 	bl	800028c <__adddf3>
 800bd10:	a37b      	add	r3, pc, #492	; (adr r3, 800bf00 <__ieee754_pow+0xa00>)
 800bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd16:	2000      	movs	r0, #0
 800bd18:	4604      	mov	r4, r0
 800bd1a:	460d      	mov	r5, r1
 800bd1c:	f7f4 fc6c 	bl	80005f8 <__aeabi_dmul>
 800bd20:	ec53 2b19 	vmov	r2, r3, d9
 800bd24:	4606      	mov	r6, r0
 800bd26:	460f      	mov	r7, r1
 800bd28:	4620      	mov	r0, r4
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	f7f4 faac 	bl	8000288 <__aeabi_dsub>
 800bd30:	4602      	mov	r2, r0
 800bd32:	460b      	mov	r3, r1
 800bd34:	4640      	mov	r0, r8
 800bd36:	4649      	mov	r1, r9
 800bd38:	f7f4 faa6 	bl	8000288 <__aeabi_dsub>
 800bd3c:	a372      	add	r3, pc, #456	; (adr r3, 800bf08 <__ieee754_pow+0xa08>)
 800bd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd42:	f7f4 fc59 	bl	80005f8 <__aeabi_dmul>
 800bd46:	a372      	add	r3, pc, #456	; (adr r3, 800bf10 <__ieee754_pow+0xa10>)
 800bd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4c:	4680      	mov	r8, r0
 800bd4e:	4689      	mov	r9, r1
 800bd50:	4620      	mov	r0, r4
 800bd52:	4629      	mov	r1, r5
 800bd54:	f7f4 fc50 	bl	80005f8 <__aeabi_dmul>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	4640      	mov	r0, r8
 800bd5e:	4649      	mov	r1, r9
 800bd60:	f7f4 fa94 	bl	800028c <__adddf3>
 800bd64:	4604      	mov	r4, r0
 800bd66:	460d      	mov	r5, r1
 800bd68:	4602      	mov	r2, r0
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	4639      	mov	r1, r7
 800bd70:	f7f4 fa8c 	bl	800028c <__adddf3>
 800bd74:	4632      	mov	r2, r6
 800bd76:	463b      	mov	r3, r7
 800bd78:	4680      	mov	r8, r0
 800bd7a:	4689      	mov	r9, r1
 800bd7c:	f7f4 fa84 	bl	8000288 <__aeabi_dsub>
 800bd80:	4602      	mov	r2, r0
 800bd82:	460b      	mov	r3, r1
 800bd84:	4620      	mov	r0, r4
 800bd86:	4629      	mov	r1, r5
 800bd88:	f7f4 fa7e 	bl	8000288 <__aeabi_dsub>
 800bd8c:	4642      	mov	r2, r8
 800bd8e:	4606      	mov	r6, r0
 800bd90:	460f      	mov	r7, r1
 800bd92:	464b      	mov	r3, r9
 800bd94:	4640      	mov	r0, r8
 800bd96:	4649      	mov	r1, r9
 800bd98:	f7f4 fc2e 	bl	80005f8 <__aeabi_dmul>
 800bd9c:	a35e      	add	r3, pc, #376	; (adr r3, 800bf18 <__ieee754_pow+0xa18>)
 800bd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda2:	4604      	mov	r4, r0
 800bda4:	460d      	mov	r5, r1
 800bda6:	f7f4 fc27 	bl	80005f8 <__aeabi_dmul>
 800bdaa:	a35d      	add	r3, pc, #372	; (adr r3, 800bf20 <__ieee754_pow+0xa20>)
 800bdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb0:	f7f4 fa6a 	bl	8000288 <__aeabi_dsub>
 800bdb4:	4622      	mov	r2, r4
 800bdb6:	462b      	mov	r3, r5
 800bdb8:	f7f4 fc1e 	bl	80005f8 <__aeabi_dmul>
 800bdbc:	a35a      	add	r3, pc, #360	; (adr r3, 800bf28 <__ieee754_pow+0xa28>)
 800bdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc2:	f7f4 fa63 	bl	800028c <__adddf3>
 800bdc6:	4622      	mov	r2, r4
 800bdc8:	462b      	mov	r3, r5
 800bdca:	f7f4 fc15 	bl	80005f8 <__aeabi_dmul>
 800bdce:	a358      	add	r3, pc, #352	; (adr r3, 800bf30 <__ieee754_pow+0xa30>)
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	f7f4 fa58 	bl	8000288 <__aeabi_dsub>
 800bdd8:	4622      	mov	r2, r4
 800bdda:	462b      	mov	r3, r5
 800bddc:	f7f4 fc0c 	bl	80005f8 <__aeabi_dmul>
 800bde0:	a355      	add	r3, pc, #340	; (adr r3, 800bf38 <__ieee754_pow+0xa38>)
 800bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde6:	f7f4 fa51 	bl	800028c <__adddf3>
 800bdea:	4622      	mov	r2, r4
 800bdec:	462b      	mov	r3, r5
 800bdee:	f7f4 fc03 	bl	80005f8 <__aeabi_dmul>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	4640      	mov	r0, r8
 800bdf8:	4649      	mov	r1, r9
 800bdfa:	f7f4 fa45 	bl	8000288 <__aeabi_dsub>
 800bdfe:	4604      	mov	r4, r0
 800be00:	460d      	mov	r5, r1
 800be02:	4602      	mov	r2, r0
 800be04:	460b      	mov	r3, r1
 800be06:	4640      	mov	r0, r8
 800be08:	4649      	mov	r1, r9
 800be0a:	f7f4 fbf5 	bl	80005f8 <__aeabi_dmul>
 800be0e:	2200      	movs	r2, #0
 800be10:	ec41 0b19 	vmov	d9, r0, r1
 800be14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800be18:	4620      	mov	r0, r4
 800be1a:	4629      	mov	r1, r5
 800be1c:	f7f4 fa34 	bl	8000288 <__aeabi_dsub>
 800be20:	4602      	mov	r2, r0
 800be22:	460b      	mov	r3, r1
 800be24:	ec51 0b19 	vmov	r0, r1, d9
 800be28:	f7f4 fd10 	bl	800084c <__aeabi_ddiv>
 800be2c:	4632      	mov	r2, r6
 800be2e:	4604      	mov	r4, r0
 800be30:	460d      	mov	r5, r1
 800be32:	463b      	mov	r3, r7
 800be34:	4640      	mov	r0, r8
 800be36:	4649      	mov	r1, r9
 800be38:	f7f4 fbde 	bl	80005f8 <__aeabi_dmul>
 800be3c:	4632      	mov	r2, r6
 800be3e:	463b      	mov	r3, r7
 800be40:	f7f4 fa24 	bl	800028c <__adddf3>
 800be44:	4602      	mov	r2, r0
 800be46:	460b      	mov	r3, r1
 800be48:	4620      	mov	r0, r4
 800be4a:	4629      	mov	r1, r5
 800be4c:	f7f4 fa1c 	bl	8000288 <__aeabi_dsub>
 800be50:	4642      	mov	r2, r8
 800be52:	464b      	mov	r3, r9
 800be54:	f7f4 fa18 	bl	8000288 <__aeabi_dsub>
 800be58:	460b      	mov	r3, r1
 800be5a:	4602      	mov	r2, r0
 800be5c:	493a      	ldr	r1, [pc, #232]	; (800bf48 <__ieee754_pow+0xa48>)
 800be5e:	2000      	movs	r0, #0
 800be60:	f7f4 fa12 	bl	8000288 <__aeabi_dsub>
 800be64:	ec41 0b10 	vmov	d0, r0, r1
 800be68:	ee10 3a90 	vmov	r3, s1
 800be6c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800be70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be74:	da2b      	bge.n	800bece <__ieee754_pow+0x9ce>
 800be76:	4650      	mov	r0, sl
 800be78:	f000 f95e 	bl	800c138 <scalbn>
 800be7c:	ec51 0b10 	vmov	r0, r1, d0
 800be80:	ec53 2b18 	vmov	r2, r3, d8
 800be84:	f7ff bbed 	b.w	800b662 <__ieee754_pow+0x162>
 800be88:	4b30      	ldr	r3, [pc, #192]	; (800bf4c <__ieee754_pow+0xa4c>)
 800be8a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800be8e:	429e      	cmp	r6, r3
 800be90:	f77f af0c 	ble.w	800bcac <__ieee754_pow+0x7ac>
 800be94:	4b2e      	ldr	r3, [pc, #184]	; (800bf50 <__ieee754_pow+0xa50>)
 800be96:	440b      	add	r3, r1
 800be98:	4303      	orrs	r3, r0
 800be9a:	d009      	beq.n	800beb0 <__ieee754_pow+0x9b0>
 800be9c:	ec51 0b18 	vmov	r0, r1, d8
 800bea0:	2200      	movs	r2, #0
 800bea2:	2300      	movs	r3, #0
 800bea4:	f7f4 fe1a 	bl	8000adc <__aeabi_dcmplt>
 800bea8:	3800      	subs	r0, #0
 800beaa:	bf18      	it	ne
 800beac:	2001      	movne	r0, #1
 800beae:	e447      	b.n	800b740 <__ieee754_pow+0x240>
 800beb0:	4622      	mov	r2, r4
 800beb2:	462b      	mov	r3, r5
 800beb4:	f7f4 f9e8 	bl	8000288 <__aeabi_dsub>
 800beb8:	4642      	mov	r2, r8
 800beba:	464b      	mov	r3, r9
 800bebc:	f7f4 fe22 	bl	8000b04 <__aeabi_dcmpge>
 800bec0:	2800      	cmp	r0, #0
 800bec2:	f43f aef3 	beq.w	800bcac <__ieee754_pow+0x7ac>
 800bec6:	e7e9      	b.n	800be9c <__ieee754_pow+0x99c>
 800bec8:	f04f 0a00 	mov.w	sl, #0
 800becc:	e71a      	b.n	800bd04 <__ieee754_pow+0x804>
 800bece:	ec51 0b10 	vmov	r0, r1, d0
 800bed2:	4619      	mov	r1, r3
 800bed4:	e7d4      	b.n	800be80 <__ieee754_pow+0x980>
 800bed6:	491c      	ldr	r1, [pc, #112]	; (800bf48 <__ieee754_pow+0xa48>)
 800bed8:	2000      	movs	r0, #0
 800beda:	f7ff bb30 	b.w	800b53e <__ieee754_pow+0x3e>
 800bede:	2000      	movs	r0, #0
 800bee0:	2100      	movs	r1, #0
 800bee2:	f7ff bb2c 	b.w	800b53e <__ieee754_pow+0x3e>
 800bee6:	4630      	mov	r0, r6
 800bee8:	4639      	mov	r1, r7
 800beea:	f7ff bb28 	b.w	800b53e <__ieee754_pow+0x3e>
 800beee:	9204      	str	r2, [sp, #16]
 800bef0:	f7ff bb7a 	b.w	800b5e8 <__ieee754_pow+0xe8>
 800bef4:	2300      	movs	r3, #0
 800bef6:	f7ff bb64 	b.w	800b5c2 <__ieee754_pow+0xc2>
 800befa:	bf00      	nop
 800befc:	f3af 8000 	nop.w
 800bf00:	00000000 	.word	0x00000000
 800bf04:	3fe62e43 	.word	0x3fe62e43
 800bf08:	fefa39ef 	.word	0xfefa39ef
 800bf0c:	3fe62e42 	.word	0x3fe62e42
 800bf10:	0ca86c39 	.word	0x0ca86c39
 800bf14:	be205c61 	.word	0xbe205c61
 800bf18:	72bea4d0 	.word	0x72bea4d0
 800bf1c:	3e663769 	.word	0x3e663769
 800bf20:	c5d26bf1 	.word	0xc5d26bf1
 800bf24:	3ebbbd41 	.word	0x3ebbbd41
 800bf28:	af25de2c 	.word	0xaf25de2c
 800bf2c:	3f11566a 	.word	0x3f11566a
 800bf30:	16bebd93 	.word	0x16bebd93
 800bf34:	3f66c16c 	.word	0x3f66c16c
 800bf38:	5555553e 	.word	0x5555553e
 800bf3c:	3fc55555 	.word	0x3fc55555
 800bf40:	3fe00000 	.word	0x3fe00000
 800bf44:	000fffff 	.word	0x000fffff
 800bf48:	3ff00000 	.word	0x3ff00000
 800bf4c:	4090cbff 	.word	0x4090cbff
 800bf50:	3f6f3400 	.word	0x3f6f3400
 800bf54:	652b82fe 	.word	0x652b82fe
 800bf58:	3c971547 	.word	0x3c971547

0800bf5c <__ieee754_sqrt>:
 800bf5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf60:	ec55 4b10 	vmov	r4, r5, d0
 800bf64:	4e55      	ldr	r6, [pc, #340]	; (800c0bc <__ieee754_sqrt+0x160>)
 800bf66:	43ae      	bics	r6, r5
 800bf68:	ee10 0a10 	vmov	r0, s0
 800bf6c:	ee10 3a10 	vmov	r3, s0
 800bf70:	462a      	mov	r2, r5
 800bf72:	4629      	mov	r1, r5
 800bf74:	d110      	bne.n	800bf98 <__ieee754_sqrt+0x3c>
 800bf76:	ee10 2a10 	vmov	r2, s0
 800bf7a:	462b      	mov	r3, r5
 800bf7c:	f7f4 fb3c 	bl	80005f8 <__aeabi_dmul>
 800bf80:	4602      	mov	r2, r0
 800bf82:	460b      	mov	r3, r1
 800bf84:	4620      	mov	r0, r4
 800bf86:	4629      	mov	r1, r5
 800bf88:	f7f4 f980 	bl	800028c <__adddf3>
 800bf8c:	4604      	mov	r4, r0
 800bf8e:	460d      	mov	r5, r1
 800bf90:	ec45 4b10 	vmov	d0, r4, r5
 800bf94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf98:	2d00      	cmp	r5, #0
 800bf9a:	dc10      	bgt.n	800bfbe <__ieee754_sqrt+0x62>
 800bf9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bfa0:	4330      	orrs	r0, r6
 800bfa2:	d0f5      	beq.n	800bf90 <__ieee754_sqrt+0x34>
 800bfa4:	b15d      	cbz	r5, 800bfbe <__ieee754_sqrt+0x62>
 800bfa6:	ee10 2a10 	vmov	r2, s0
 800bfaa:	462b      	mov	r3, r5
 800bfac:	ee10 0a10 	vmov	r0, s0
 800bfb0:	f7f4 f96a 	bl	8000288 <__aeabi_dsub>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	460b      	mov	r3, r1
 800bfb8:	f7f4 fc48 	bl	800084c <__aeabi_ddiv>
 800bfbc:	e7e6      	b.n	800bf8c <__ieee754_sqrt+0x30>
 800bfbe:	1512      	asrs	r2, r2, #20
 800bfc0:	d074      	beq.n	800c0ac <__ieee754_sqrt+0x150>
 800bfc2:	07d4      	lsls	r4, r2, #31
 800bfc4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bfc8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800bfcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bfd0:	bf5e      	ittt	pl
 800bfd2:	0fda      	lsrpl	r2, r3, #31
 800bfd4:	005b      	lslpl	r3, r3, #1
 800bfd6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800bfda:	2400      	movs	r4, #0
 800bfdc:	0fda      	lsrs	r2, r3, #31
 800bfde:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800bfe2:	107f      	asrs	r7, r7, #1
 800bfe4:	005b      	lsls	r3, r3, #1
 800bfe6:	2516      	movs	r5, #22
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bfee:	1886      	adds	r6, r0, r2
 800bff0:	428e      	cmp	r6, r1
 800bff2:	bfde      	ittt	le
 800bff4:	1b89      	suble	r1, r1, r6
 800bff6:	18b0      	addle	r0, r6, r2
 800bff8:	18a4      	addle	r4, r4, r2
 800bffa:	0049      	lsls	r1, r1, #1
 800bffc:	3d01      	subs	r5, #1
 800bffe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c002:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c006:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c00a:	d1f0      	bne.n	800bfee <__ieee754_sqrt+0x92>
 800c00c:	462a      	mov	r2, r5
 800c00e:	f04f 0e20 	mov.w	lr, #32
 800c012:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c016:	4281      	cmp	r1, r0
 800c018:	eb06 0c05 	add.w	ip, r6, r5
 800c01c:	dc02      	bgt.n	800c024 <__ieee754_sqrt+0xc8>
 800c01e:	d113      	bne.n	800c048 <__ieee754_sqrt+0xec>
 800c020:	459c      	cmp	ip, r3
 800c022:	d811      	bhi.n	800c048 <__ieee754_sqrt+0xec>
 800c024:	f1bc 0f00 	cmp.w	ip, #0
 800c028:	eb0c 0506 	add.w	r5, ip, r6
 800c02c:	da43      	bge.n	800c0b6 <__ieee754_sqrt+0x15a>
 800c02e:	2d00      	cmp	r5, #0
 800c030:	db41      	blt.n	800c0b6 <__ieee754_sqrt+0x15a>
 800c032:	f100 0801 	add.w	r8, r0, #1
 800c036:	1a09      	subs	r1, r1, r0
 800c038:	459c      	cmp	ip, r3
 800c03a:	bf88      	it	hi
 800c03c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c040:	eba3 030c 	sub.w	r3, r3, ip
 800c044:	4432      	add	r2, r6
 800c046:	4640      	mov	r0, r8
 800c048:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c04c:	f1be 0e01 	subs.w	lr, lr, #1
 800c050:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c054:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c058:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c05c:	d1db      	bne.n	800c016 <__ieee754_sqrt+0xba>
 800c05e:	430b      	orrs	r3, r1
 800c060:	d006      	beq.n	800c070 <__ieee754_sqrt+0x114>
 800c062:	1c50      	adds	r0, r2, #1
 800c064:	bf13      	iteet	ne
 800c066:	3201      	addne	r2, #1
 800c068:	3401      	addeq	r4, #1
 800c06a:	4672      	moveq	r2, lr
 800c06c:	f022 0201 	bicne.w	r2, r2, #1
 800c070:	1063      	asrs	r3, r4, #1
 800c072:	0852      	lsrs	r2, r2, #1
 800c074:	07e1      	lsls	r1, r4, #31
 800c076:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c07a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c07e:	bf48      	it	mi
 800c080:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c084:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c088:	4614      	mov	r4, r2
 800c08a:	e781      	b.n	800bf90 <__ieee754_sqrt+0x34>
 800c08c:	0ad9      	lsrs	r1, r3, #11
 800c08e:	3815      	subs	r0, #21
 800c090:	055b      	lsls	r3, r3, #21
 800c092:	2900      	cmp	r1, #0
 800c094:	d0fa      	beq.n	800c08c <__ieee754_sqrt+0x130>
 800c096:	02cd      	lsls	r5, r1, #11
 800c098:	d50a      	bpl.n	800c0b0 <__ieee754_sqrt+0x154>
 800c09a:	f1c2 0420 	rsb	r4, r2, #32
 800c09e:	fa23 f404 	lsr.w	r4, r3, r4
 800c0a2:	1e55      	subs	r5, r2, #1
 800c0a4:	4093      	lsls	r3, r2
 800c0a6:	4321      	orrs	r1, r4
 800c0a8:	1b42      	subs	r2, r0, r5
 800c0aa:	e78a      	b.n	800bfc2 <__ieee754_sqrt+0x66>
 800c0ac:	4610      	mov	r0, r2
 800c0ae:	e7f0      	b.n	800c092 <__ieee754_sqrt+0x136>
 800c0b0:	0049      	lsls	r1, r1, #1
 800c0b2:	3201      	adds	r2, #1
 800c0b4:	e7ef      	b.n	800c096 <__ieee754_sqrt+0x13a>
 800c0b6:	4680      	mov	r8, r0
 800c0b8:	e7bd      	b.n	800c036 <__ieee754_sqrt+0xda>
 800c0ba:	bf00      	nop
 800c0bc:	7ff00000 	.word	0x7ff00000

0800c0c0 <with_errno>:
 800c0c0:	b570      	push	{r4, r5, r6, lr}
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	460d      	mov	r5, r1
 800c0c6:	4616      	mov	r6, r2
 800c0c8:	f7fc f888 	bl	80081dc <__errno>
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	6006      	str	r6, [r0, #0]
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	bd70      	pop	{r4, r5, r6, pc}

0800c0d4 <xflow>:
 800c0d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0d6:	4614      	mov	r4, r2
 800c0d8:	461d      	mov	r5, r3
 800c0da:	b108      	cbz	r0, 800c0e0 <xflow+0xc>
 800c0dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c0e0:	e9cd 2300 	strd	r2, r3, [sp]
 800c0e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	4629      	mov	r1, r5
 800c0ec:	f7f4 fa84 	bl	80005f8 <__aeabi_dmul>
 800c0f0:	2222      	movs	r2, #34	; 0x22
 800c0f2:	b003      	add	sp, #12
 800c0f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0f8:	f7ff bfe2 	b.w	800c0c0 <with_errno>

0800c0fc <__math_uflow>:
 800c0fc:	b508      	push	{r3, lr}
 800c0fe:	2200      	movs	r2, #0
 800c100:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c104:	f7ff ffe6 	bl	800c0d4 <xflow>
 800c108:	ec41 0b10 	vmov	d0, r0, r1
 800c10c:	bd08      	pop	{r3, pc}

0800c10e <__math_oflow>:
 800c10e:	b508      	push	{r3, lr}
 800c110:	2200      	movs	r2, #0
 800c112:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c116:	f7ff ffdd 	bl	800c0d4 <xflow>
 800c11a:	ec41 0b10 	vmov	d0, r0, r1
 800c11e:	bd08      	pop	{r3, pc}

0800c120 <finite>:
 800c120:	b082      	sub	sp, #8
 800c122:	ed8d 0b00 	vstr	d0, [sp]
 800c126:	9801      	ldr	r0, [sp, #4]
 800c128:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c12c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c130:	0fc0      	lsrs	r0, r0, #31
 800c132:	b002      	add	sp, #8
 800c134:	4770      	bx	lr
	...

0800c138 <scalbn>:
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	ec55 4b10 	vmov	r4, r5, d0
 800c13e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c142:	4606      	mov	r6, r0
 800c144:	462b      	mov	r3, r5
 800c146:	b99a      	cbnz	r2, 800c170 <scalbn+0x38>
 800c148:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c14c:	4323      	orrs	r3, r4
 800c14e:	d036      	beq.n	800c1be <scalbn+0x86>
 800c150:	4b39      	ldr	r3, [pc, #228]	; (800c238 <scalbn+0x100>)
 800c152:	4629      	mov	r1, r5
 800c154:	ee10 0a10 	vmov	r0, s0
 800c158:	2200      	movs	r2, #0
 800c15a:	f7f4 fa4d 	bl	80005f8 <__aeabi_dmul>
 800c15e:	4b37      	ldr	r3, [pc, #220]	; (800c23c <scalbn+0x104>)
 800c160:	429e      	cmp	r6, r3
 800c162:	4604      	mov	r4, r0
 800c164:	460d      	mov	r5, r1
 800c166:	da10      	bge.n	800c18a <scalbn+0x52>
 800c168:	a32b      	add	r3, pc, #172	; (adr r3, 800c218 <scalbn+0xe0>)
 800c16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16e:	e03a      	b.n	800c1e6 <scalbn+0xae>
 800c170:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c174:	428a      	cmp	r2, r1
 800c176:	d10c      	bne.n	800c192 <scalbn+0x5a>
 800c178:	ee10 2a10 	vmov	r2, s0
 800c17c:	4620      	mov	r0, r4
 800c17e:	4629      	mov	r1, r5
 800c180:	f7f4 f884 	bl	800028c <__adddf3>
 800c184:	4604      	mov	r4, r0
 800c186:	460d      	mov	r5, r1
 800c188:	e019      	b.n	800c1be <scalbn+0x86>
 800c18a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c18e:	460b      	mov	r3, r1
 800c190:	3a36      	subs	r2, #54	; 0x36
 800c192:	4432      	add	r2, r6
 800c194:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c198:	428a      	cmp	r2, r1
 800c19a:	dd08      	ble.n	800c1ae <scalbn+0x76>
 800c19c:	2d00      	cmp	r5, #0
 800c19e:	a120      	add	r1, pc, #128	; (adr r1, 800c220 <scalbn+0xe8>)
 800c1a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1a4:	da1c      	bge.n	800c1e0 <scalbn+0xa8>
 800c1a6:	a120      	add	r1, pc, #128	; (adr r1, 800c228 <scalbn+0xf0>)
 800c1a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1ac:	e018      	b.n	800c1e0 <scalbn+0xa8>
 800c1ae:	2a00      	cmp	r2, #0
 800c1b0:	dd08      	ble.n	800c1c4 <scalbn+0x8c>
 800c1b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c1b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c1ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c1be:	ec45 4b10 	vmov	d0, r4, r5
 800c1c2:	bd70      	pop	{r4, r5, r6, pc}
 800c1c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c1c8:	da19      	bge.n	800c1fe <scalbn+0xc6>
 800c1ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c1ce:	429e      	cmp	r6, r3
 800c1d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c1d4:	dd0a      	ble.n	800c1ec <scalbn+0xb4>
 800c1d6:	a112      	add	r1, pc, #72	; (adr r1, 800c220 <scalbn+0xe8>)
 800c1d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d1e2      	bne.n	800c1a6 <scalbn+0x6e>
 800c1e0:	a30f      	add	r3, pc, #60	; (adr r3, 800c220 <scalbn+0xe8>)
 800c1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e6:	f7f4 fa07 	bl	80005f8 <__aeabi_dmul>
 800c1ea:	e7cb      	b.n	800c184 <scalbn+0x4c>
 800c1ec:	a10a      	add	r1, pc, #40	; (adr r1, 800c218 <scalbn+0xe0>)
 800c1ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d0b8      	beq.n	800c168 <scalbn+0x30>
 800c1f6:	a10e      	add	r1, pc, #56	; (adr r1, 800c230 <scalbn+0xf8>)
 800c1f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1fc:	e7b4      	b.n	800c168 <scalbn+0x30>
 800c1fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c202:	3236      	adds	r2, #54	; 0x36
 800c204:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c208:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c20c:	4620      	mov	r0, r4
 800c20e:	4b0c      	ldr	r3, [pc, #48]	; (800c240 <scalbn+0x108>)
 800c210:	2200      	movs	r2, #0
 800c212:	e7e8      	b.n	800c1e6 <scalbn+0xae>
 800c214:	f3af 8000 	nop.w
 800c218:	c2f8f359 	.word	0xc2f8f359
 800c21c:	01a56e1f 	.word	0x01a56e1f
 800c220:	8800759c 	.word	0x8800759c
 800c224:	7e37e43c 	.word	0x7e37e43c
 800c228:	8800759c 	.word	0x8800759c
 800c22c:	fe37e43c 	.word	0xfe37e43c
 800c230:	c2f8f359 	.word	0xc2f8f359
 800c234:	81a56e1f 	.word	0x81a56e1f
 800c238:	43500000 	.word	0x43500000
 800c23c:	ffff3cb0 	.word	0xffff3cb0
 800c240:	3c900000 	.word	0x3c900000

0800c244 <_init>:
 800c244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c246:	bf00      	nop
 800c248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c24a:	bc08      	pop	{r3}
 800c24c:	469e      	mov	lr, r3
 800c24e:	4770      	bx	lr

0800c250 <_fini>:
 800c250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c252:	bf00      	nop
 800c254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c256:	bc08      	pop	{r3}
 800c258:	469e      	mov	lr, r3
 800c25a:	4770      	bx	lr


LIS3DSH_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08006eb4  08006eb4  00016eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ff4  08006ff4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006ff4  08006ff4  00016ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ffc  08006ffc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ffc  08006ffc  00016ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007000  08007000  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004fc0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005034  20005034  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001976f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003290  00000000  00000000  00039813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a8  00000000  00000000  0003caa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001480  00000000  00000000  0003e050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003f79  00000000  00000000  0003f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017322  00000000  00000000  00043449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d74d5  00000000  00000000  0005a76b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131c40  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005fb8  00000000  00000000  00131c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e9c 	.word	0x08006e9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006e9c 	.word	0x08006e9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Acc_Inin>:
void Acc_Inin(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Acc_Inin(void){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	uint8_t Reg_ctrl_4=0x20;
 800058a:	2320      	movs	r3, #32
 800058c:	71fb      	strb	r3, [r7, #7]
	uint8_t acc_set=0x57;
 800058e:	2357      	movs	r3, #87	; 0x57
 8000590:	71bb      	strb	r3, [r7, #6]
	uint8_t Reg_ctrl_5=0x24;
 8000592:	2324      	movs	r3, #36	; 0x24
 8000594:	717b      	strb	r3, [r7, #5]
	uint8_t acc_reg=0x00;
 8000596:	2300      	movs	r3, #0
 8000598:	713b      	strb	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2108      	movs	r1, #8
 800059e:	4817      	ldr	r0, [pc, #92]	; (80005fc <Acc_Inin+0x78>)
 80005a0:	f000 ff9e 	bl	80014e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &Reg_ctrl_4, 1, 100);
 80005a4:	1df9      	adds	r1, r7, #7
 80005a6:	2364      	movs	r3, #100	; 0x64
 80005a8:	2201      	movs	r2, #1
 80005aa:	4815      	ldr	r0, [pc, #84]	; (8000600 <Acc_Inin+0x7c>)
 80005ac:	f001 fcc5 	bl	8001f3a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &acc_set, 1, 100);
 80005b0:	1db9      	adds	r1, r7, #6
 80005b2:	2364      	movs	r3, #100	; 0x64
 80005b4:	2201      	movs	r2, #1
 80005b6:	4812      	ldr	r0, [pc, #72]	; (8000600 <Acc_Inin+0x7c>)
 80005b8:	f001 fcbf 	bl	8001f3a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2108      	movs	r1, #8
 80005c0:	480e      	ldr	r0, [pc, #56]	; (80005fc <Acc_Inin+0x78>)
 80005c2:	f000 ff8d 	bl	80014e0 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, &test, 1, 100);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
*/
//test_acc=0;

HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2108      	movs	r1, #8
 80005ca:	480c      	ldr	r0, [pc, #48]	; (80005fc <Acc_Inin+0x78>)
 80005cc:	f000 ff88 	bl	80014e0 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, &Reg_ctrl_5, 1, 100);
 80005d0:	1d79      	adds	r1, r7, #5
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	2201      	movs	r2, #1
 80005d6:	480a      	ldr	r0, [pc, #40]	; (8000600 <Acc_Inin+0x7c>)
 80005d8:	f001 fcaf 	bl	8001f3a <HAL_SPI_Transmit>
HAL_SPI_Transmit(&hspi1, &acc_reg, 1, 100);
 80005dc:	1d39      	adds	r1, r7, #4
 80005de:	2364      	movs	r3, #100	; 0x64
 80005e0:	2201      	movs	r2, #1
 80005e2:	4807      	ldr	r0, [pc, #28]	; (8000600 <Acc_Inin+0x7c>)
 80005e4:	f001 fca9 	bl	8001f3a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2108      	movs	r1, #8
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <Acc_Inin+0x78>)
 80005ee:	f000 ff77 	bl	80014e0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &Reg_ctrl_5, 1, 100);
		HAL_SPI_Receive(&hspi1, &test_acc, 1, 100);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);

		*/
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000
 8000600:	20000090 	.word	0x20000090

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fcaa 	bl	8000f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f858 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f914 	bl	800083c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000614:	f000 f8b2 	bl	800077c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000618:	f000 f8e6 	bl	80007e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Acc_Inin();
 800061c:	f7ff ffb2 	bl	8000584 <Acc_Inin>
  sprintf(test, "test of Accselerometr\r\n");
 8000620:	4919      	ldr	r1, [pc, #100]	; (8000688 <main+0x84>)
 8000622:	481a      	ldr	r0, [pc, #104]	; (800068c <main+0x88>)
 8000624:	f005 ffda 	bl	80065dc <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)&test, strlen(test), 100);
 8000628:	4818      	ldr	r0, [pc, #96]	; (800068c <main+0x88>)
 800062a:	f7ff fdd1 	bl	80001d0 <strlen>
 800062e:	4603      	mov	r3, r0
 8000630:	b29a      	uxth	r2, r3
 8000632:	2364      	movs	r3, #100	; 0x64
 8000634:	4915      	ldr	r1, [pc, #84]	; (800068c <main+0x88>)
 8000636:	4816      	ldr	r0, [pc, #88]	; (8000690 <main+0x8c>)
 8000638:	f002 fc99 	bl	8002f6e <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800063c:	f003 f850 	bl	80036e0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QUEUE_DATA */
  QUEUE_DATAHandle = osMessageQueueNew (16, sizeof(uint16_t), &QUEUE_DATA_attributes);
 8000640:	4a14      	ldr	r2, [pc, #80]	; (8000694 <main+0x90>)
 8000642:	2102      	movs	r1, #2
 8000644:	2010      	movs	r0, #16
 8000646:	f003 f942 	bl	80038ce <osMessageQueueNew>
 800064a:	4603      	mov	r3, r0
 800064c:	4a12      	ldr	r2, [pc, #72]	; (8000698 <main+0x94>)
 800064e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000650:	4a12      	ldr	r2, [pc, #72]	; (800069c <main+0x98>)
 8000652:	2100      	movs	r1, #0
 8000654:	4812      	ldr	r0, [pc, #72]	; (80006a0 <main+0x9c>)
 8000656:	f003 f88d 	bl	8003774 <osThreadNew>
 800065a:	4603      	mov	r3, r0
 800065c:	4a11      	ldr	r2, [pc, #68]	; (80006a4 <main+0xa0>)
 800065e:	6013      	str	r3, [r2, #0]

  /* creation of Read_XYZ */
  Read_XYZHandle = osThreadNew(StartRead_XYZ, NULL, &Read_XYZ_attributes);
 8000660:	4a11      	ldr	r2, [pc, #68]	; (80006a8 <main+0xa4>)
 8000662:	2100      	movs	r1, #0
 8000664:	4811      	ldr	r0, [pc, #68]	; (80006ac <main+0xa8>)
 8000666:	f003 f885 	bl	8003774 <osThreadNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <main+0xac>)
 800066e:	6013      	str	r3, [r2, #0]

  /* creation of UART_Tr */
  UART_TrHandle = osThreadNew(StartUART_Tr, NULL, &UART_Tr_attributes);
 8000670:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <main+0xb0>)
 8000672:	2100      	movs	r1, #0
 8000674:	4810      	ldr	r0, [pc, #64]	; (80006b8 <main+0xb4>)
 8000676:	f003 f87d 	bl	8003774 <osThreadNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <main+0xb8>)
 800067e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000680:	f003 f852 	bl	8003728 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000684:	e7fe      	b.n	8000684 <main+0x80>
 8000686:	bf00      	nop
 8000688:	08006ee0 	.word	0x08006ee0
 800068c:	20000664 	.word	0x20000664
 8000690:	200000e8 	.word	0x200000e8
 8000694:	08006f90 	.word	0x08006f90
 8000698:	200005f0 	.word	0x200005f0
 800069c:	08006f24 	.word	0x08006f24
 80006a0:	080008dd 	.word	0x080008dd
 80006a4:	2000012c 	.word	0x2000012c
 80006a8:	08006f48 	.word	0x08006f48
 80006ac:	080008ed 	.word	0x080008ed
 80006b0:	20000130 	.word	0x20000130
 80006b4:	08006f6c 	.word	0x08006f6c
 80006b8:	08000b09 	.word	0x08000b09
 80006bc:	20000390 	.word	0x20000390

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f005 ff7c 	bl	80065cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <SystemClock_Config+0xb4>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <SystemClock_Config+0xb4>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SystemClock_Config+0xb4>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <SystemClock_Config+0xb8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <SystemClock_Config+0xb8>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <SystemClock_Config+0xb8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0320 	add.w	r3, r7, #32
 8000730:	4618      	mov	r0, r3
 8000732:	f000 feef 	bl	8001514 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800073c:	f000 fa40 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	230f      	movs	r3, #15
 8000742:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f001 f952 	bl	8001a04 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000766:	f000 fa2b 	bl	8000bc0 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	; 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_SPI1_Init+0x64>)
 8000782:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <MX_SPI1_Init+0x68>)
 8000784:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_SPI1_Init+0x64>)
 8000788:	f44f 7282 	mov.w	r2, #260	; 0x104
 800078c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007c8:	220a      	movs	r2, #10
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_SPI1_Init+0x64>)
 80007ce:	f001 fb2b 	bl	8001e28 <HAL_SPI_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007d8:	f000 f9f2 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000090 	.word	0x20000090
 80007e4:	40013000 	.word	0x40013000

080007e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_USART2_UART_Init+0x50>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000820:	f002 fb58 	bl	8002ed4 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800082a:	f000 f9c9 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000e8 	.word	0x200000e8
 8000838:	40004400 	.word	0x40004400

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_GPIO_Init+0x98>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a1e      	ldr	r2, [pc, #120]	; (80008d4 <MX_GPIO_Init+0x98>)
 800085c:	f043 0310 	orr.w	r3, r3, #16
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_GPIO_Init+0x98>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0310 	and.w	r3, r3, #16
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_GPIO_Init+0x98>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <MX_GPIO_Init+0x98>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_GPIO_Init+0x98>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_GPIO_Init+0x98>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a10      	ldr	r2, [pc, #64]	; (80008d4 <MX_GPIO_Init+0x98>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_GPIO_Init+0x98>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2108      	movs	r1, #8
 80008aa:	480b      	ldr	r0, [pc, #44]	; (80008d8 <MX_GPIO_Init+0x9c>)
 80008ac:	f000 fe18 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008b0:	2308      	movs	r3, #8
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	4619      	mov	r1, r3
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_GPIO_Init+0x9c>)
 80008c8:	f000 fc6e 	bl	80011a8 <HAL_GPIO_Init>

}
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40021000 	.word	0x40021000

080008dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f002 ffd7 	bl	8003898 <osDelay>
 80008ea:	e7fb      	b.n	80008e4 <StartDefaultTask+0x8>

080008ec <StartRead_XYZ>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRead_XYZ */
void StartRead_XYZ(void *argument)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRead_XYZ */
	QUEUE_DATA XYZ;

	uint8_t X_read_H=0x29;
 80008f4:	2329      	movs	r3, #41	; 0x29
 80008f6:	75fb      	strb	r3, [r7, #23]
	uint8_t X_read_L=0x28;
 80008f8:	2328      	movs	r3, #40	; 0x28
 80008fa:	75bb      	strb	r3, [r7, #22]
	uint8_t OUT_X_H=0x29;
 80008fc:	2329      	movs	r3, #41	; 0x29
 80008fe:	757b      	strb	r3, [r7, #21]
	uint8_t OUT_X_L=0x28;
 8000900:	2328      	movs	r3, #40	; 0x28
 8000902:	753b      	strb	r3, [r7, #20]

	uint8_t Y_read_H=0x2B;
 8000904:	232b      	movs	r3, #43	; 0x2b
 8000906:	74fb      	strb	r3, [r7, #19]
	uint8_t Y_read_L=0x2A;
 8000908:	232a      	movs	r3, #42	; 0x2a
 800090a:	74bb      	strb	r3, [r7, #18]
	uint8_t OUT_Y_H=0x2B;
 800090c:	232b      	movs	r3, #43	; 0x2b
 800090e:	747b      	strb	r3, [r7, #17]
	uint8_t OUT_Y_L=0x2A;
 8000910:	232a      	movs	r3, #42	; 0x2a
 8000912:	743b      	strb	r3, [r7, #16]

	uint8_t Z_read_H=0x2C;
 8000914:	232c      	movs	r3, #44	; 0x2c
 8000916:	73fb      	strb	r3, [r7, #15]
	uint8_t Z_read_L=0x2D;
 8000918:	232d      	movs	r3, #45	; 0x2d
 800091a:	73bb      	strb	r3, [r7, #14]
	uint8_t OUT_Z_H=0x2C;
 800091c:	232c      	movs	r3, #44	; 0x2c
 800091e:	737b      	strb	r3, [r7, #13]
	uint8_t OUT_Z_L=0x2D;
 8000920:	232d      	movs	r3, #45	; 0x2d
 8000922:	733b      	strb	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2108      	movs	r1, #8
 8000928:	4874      	ldr	r0, [pc, #464]	; (8000afc <StartRead_XYZ+0x210>)
 800092a:	f000 fdd9 	bl	80014e0 <HAL_GPIO_WritePin>
		X_read_L=0x80|X_read_L;
 800092e:	7dbb      	ldrb	r3, [r7, #22]
 8000930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000934:	b2db      	uxtb	r3, r3
 8000936:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit(&hspi1, &X_read_L, 1, 100);
 8000938:	f107 0116 	add.w	r1, r7, #22
 800093c:	2364      	movs	r3, #100	; 0x64
 800093e:	2201      	movs	r2, #1
 8000940:	486f      	ldr	r0, [pc, #444]	; (8000b00 <StartRead_XYZ+0x214>)
 8000942:	f001 fafa 	bl	8001f3a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &OUT_X_L, 1, 100);
 8000946:	f107 0114 	add.w	r1, r7, #20
 800094a:	2364      	movs	r3, #100	; 0x64
 800094c:	2201      	movs	r2, #1
 800094e:	486c      	ldr	r0, [pc, #432]	; (8000b00 <StartRead_XYZ+0x214>)
 8000950:	f001 fc2f 	bl	80021b2 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2108      	movs	r1, #8
 8000958:	4868      	ldr	r0, [pc, #416]	; (8000afc <StartRead_XYZ+0x210>)
 800095a:	f000 fdc1 	bl	80014e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2108      	movs	r1, #8
 8000962:	4866      	ldr	r0, [pc, #408]	; (8000afc <StartRead_XYZ+0x210>)
 8000964:	f000 fdbc 	bl	80014e0 <HAL_GPIO_WritePin>
		X_read_H=0x80|X_read_H;
 8000968:	7dfb      	ldrb	r3, [r7, #23]
 800096a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800096e:	b2db      	uxtb	r3, r3
 8000970:	75fb      	strb	r3, [r7, #23]
		HAL_SPI_Transmit(&hspi1, &X_read_H, 1, 100);
 8000972:	f107 0117 	add.w	r1, r7, #23
 8000976:	2364      	movs	r3, #100	; 0x64
 8000978:	2201      	movs	r2, #1
 800097a:	4861      	ldr	r0, [pc, #388]	; (8000b00 <StartRead_XYZ+0x214>)
 800097c:	f001 fadd 	bl	8001f3a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &OUT_X_H, 1, 100);
 8000980:	f107 0115 	add.w	r1, r7, #21
 8000984:	2364      	movs	r3, #100	; 0x64
 8000986:	2201      	movs	r2, #1
 8000988:	485d      	ldr	r0, [pc, #372]	; (8000b00 <StartRead_XYZ+0x214>)
 800098a:	f001 fc12 	bl	80021b2 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	2108      	movs	r1, #8
 8000992:	485a      	ldr	r0, [pc, #360]	; (8000afc <StartRead_XYZ+0x210>)
 8000994:	f000 fda4 	bl	80014e0 <HAL_GPIO_WritePin>
		XYZ.X_16bit=((OUT_X_H<<8)|(OUT_X_L));
 8000998:	7d7b      	ldrb	r3, [r7, #21]
 800099a:	021b      	lsls	r3, r3, #8
 800099c:	b21a      	sxth	r2, r3
 800099e:	7d3b      	ldrb	r3, [r7, #20]
 80009a0:	b21b      	sxth	r3, r3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	b21b      	sxth	r3, r3
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	833b      	strh	r3, [r7, #24]

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2108      	movs	r1, #8
 80009ae:	4853      	ldr	r0, [pc, #332]	; (8000afc <StartRead_XYZ+0x210>)
 80009b0:	f000 fd96 	bl	80014e0 <HAL_GPIO_WritePin>
		Y_read_L=0x80|Y_read_L;
 80009b4:	7cbb      	ldrb	r3, [r7, #18]
 80009b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	74bb      	strb	r3, [r7, #18]
		HAL_SPI_Transmit(&hspi1, &Y_read_L, 1, 100);
 80009be:	f107 0112 	add.w	r1, r7, #18
 80009c2:	2364      	movs	r3, #100	; 0x64
 80009c4:	2201      	movs	r2, #1
 80009c6:	484e      	ldr	r0, [pc, #312]	; (8000b00 <StartRead_XYZ+0x214>)
 80009c8:	f001 fab7 	bl	8001f3a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &OUT_Y_L, 1, 100);
 80009cc:	f107 0110 	add.w	r1, r7, #16
 80009d0:	2364      	movs	r3, #100	; 0x64
 80009d2:	2201      	movs	r2, #1
 80009d4:	484a      	ldr	r0, [pc, #296]	; (8000b00 <StartRead_XYZ+0x214>)
 80009d6:	f001 fbec 	bl	80021b2 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	2108      	movs	r1, #8
 80009de:	4847      	ldr	r0, [pc, #284]	; (8000afc <StartRead_XYZ+0x210>)
 80009e0:	f000 fd7e 	bl	80014e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2108      	movs	r1, #8
 80009e8:	4844      	ldr	r0, [pc, #272]	; (8000afc <StartRead_XYZ+0x210>)
 80009ea:	f000 fd79 	bl	80014e0 <HAL_GPIO_WritePin>
		Y_read_H=0x80|Y_read_H;
 80009ee:	7cfb      	ldrb	r3, [r7, #19]
 80009f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	74fb      	strb	r3, [r7, #19]
		HAL_SPI_Transmit(&hspi1, &Y_read_H, 1, 100);
 80009f8:	f107 0113 	add.w	r1, r7, #19
 80009fc:	2364      	movs	r3, #100	; 0x64
 80009fe:	2201      	movs	r2, #1
 8000a00:	483f      	ldr	r0, [pc, #252]	; (8000b00 <StartRead_XYZ+0x214>)
 8000a02:	f001 fa9a 	bl	8001f3a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &OUT_Y_H, 1, 100);
 8000a06:	f107 0111 	add.w	r1, r7, #17
 8000a0a:	2364      	movs	r3, #100	; 0x64
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	483c      	ldr	r0, [pc, #240]	; (8000b00 <StartRead_XYZ+0x214>)
 8000a10:	f001 fbcf 	bl	80021b2 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2108      	movs	r1, #8
 8000a18:	4838      	ldr	r0, [pc, #224]	; (8000afc <StartRead_XYZ+0x210>)
 8000a1a:	f000 fd61 	bl	80014e0 <HAL_GPIO_WritePin>
		XYZ.Y_16bit=((OUT_Y_H<<8)|(OUT_Y_L));
 8000a1e:	7c7b      	ldrb	r3, [r7, #17]
 8000a20:	021b      	lsls	r3, r3, #8
 8000a22:	b21a      	sxth	r2, r3
 8000a24:	7c3b      	ldrb	r3, [r7, #16]
 8000a26:	b21b      	sxth	r3, r3
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	b21b      	sxth	r3, r3
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	837b      	strh	r3, [r7, #26]

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2108      	movs	r1, #8
 8000a34:	4831      	ldr	r0, [pc, #196]	; (8000afc <StartRead_XYZ+0x210>)
 8000a36:	f000 fd53 	bl	80014e0 <HAL_GPIO_WritePin>
		Z_read_L=0x80|Z_read_L;
 8000a3a:	7bbb      	ldrb	r3, [r7, #14]
 8000a3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi1, &Z_read_L, 1, 100);
 8000a44:	f107 010e 	add.w	r1, r7, #14
 8000a48:	2364      	movs	r3, #100	; 0x64
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	482c      	ldr	r0, [pc, #176]	; (8000b00 <StartRead_XYZ+0x214>)
 8000a4e:	f001 fa74 	bl	8001f3a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &OUT_Z_L, 1, 100);
 8000a52:	f107 010c 	add.w	r1, r7, #12
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4829      	ldr	r0, [pc, #164]	; (8000b00 <StartRead_XYZ+0x214>)
 8000a5c:	f001 fba9 	bl	80021b2 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2108      	movs	r1, #8
 8000a64:	4825      	ldr	r0, [pc, #148]	; (8000afc <StartRead_XYZ+0x210>)
 8000a66:	f000 fd3b 	bl	80014e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2108      	movs	r1, #8
 8000a6e:	4823      	ldr	r0, [pc, #140]	; (8000afc <StartRead_XYZ+0x210>)
 8000a70:	f000 fd36 	bl	80014e0 <HAL_GPIO_WritePin>
		Z_read_H=0x80|Z_read_H;
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	73fb      	strb	r3, [r7, #15]
		HAL_SPI_Transmit(&hspi1, &Z_read_H, 1, 100);
 8000a7e:	f107 010f 	add.w	r1, r7, #15
 8000a82:	2364      	movs	r3, #100	; 0x64
 8000a84:	2201      	movs	r2, #1
 8000a86:	481e      	ldr	r0, [pc, #120]	; (8000b00 <StartRead_XYZ+0x214>)
 8000a88:	f001 fa57 	bl	8001f3a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &OUT_Z_H, 1, 100);
 8000a8c:	f107 010d 	add.w	r1, r7, #13
 8000a90:	2364      	movs	r3, #100	; 0x64
 8000a92:	2201      	movs	r2, #1
 8000a94:	481a      	ldr	r0, [pc, #104]	; (8000b00 <StartRead_XYZ+0x214>)
 8000a96:	f001 fb8c 	bl	80021b2 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	4817      	ldr	r0, [pc, #92]	; (8000afc <StartRead_XYZ+0x210>)
 8000aa0:	f000 fd1e 	bl	80014e0 <HAL_GPIO_WritePin>
		XYZ.Z_16bit=((OUT_Z_H<<8)|(OUT_Z_L));
 8000aa4:	7b7b      	ldrb	r3, [r7, #13]
 8000aa6:	021b      	lsls	r3, r3, #8
 8000aa8:	b21a      	sxth	r2, r3
 8000aaa:	7b3b      	ldrb	r3, [r7, #12]
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	83bb      	strh	r3, [r7, #28]

		osMessageQueuePut(QUEUE_DATAHandle, &XYZ.X_16bit, 0, osWaitForever);
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <StartRead_XYZ+0x218>)
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	f107 0118 	add.w	r1, r7, #24
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f002 ff76 	bl	80039b4 <osMessageQueuePut>
		osMessageQueuePut(QUEUE_DATAHandle, &XYZ.Y_16bit, 0, osWaitForever);
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <StartRead_XYZ+0x218>)
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	f107 0318 	add.w	r3, r7, #24
 8000ad0:	1c99      	adds	r1, r3, #2
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f002 ff6c 	bl	80039b4 <osMessageQueuePut>
		osMessageQueuePut(QUEUE_DATAHandle, &XYZ.Z_16bit, 0, osWaitForever);
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <StartRead_XYZ+0x218>)
 8000ade:	6818      	ldr	r0, [r3, #0]
 8000ae0:	f107 0318 	add.w	r3, r7, #24
 8000ae4:	1d19      	adds	r1, r3, #4
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	2200      	movs	r2, #0
 8000aec:	f002 ff62 	bl	80039b4 <osMessageQueuePut>



    osDelay(500);
 8000af0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af4:	f002 fed0 	bl	8003898 <osDelay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000af8:	e714      	b.n	8000924 <StartRead_XYZ+0x38>
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000
 8000b00:	20000090 	.word	0x20000090
 8000b04:	200005f0 	.word	0x200005f0

08000b08 <StartUART_Tr>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_Tr */
void StartUART_Tr(void *argument)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b096      	sub	sp, #88	; 0x58
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	6078      	str	r0, [r7, #4]
	QUEUE_DATA XYZ;
	char dataUART[64];
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(QUEUE_DATAHandle, &XYZ.X_16bit, 0, osWaitForever);
 8000b10:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <StartUART_Tr+0x88>)
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f002 ffa9 	bl	8003a74 <osMessageQueueGet>
	  osMessageQueueGet(QUEUE_DATAHandle, &XYZ.Y_16bit, 0, osWaitForever);
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <StartUART_Tr+0x88>)
 8000b24:	6818      	ldr	r0, [r3, #0]
 8000b26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b2a:	1c99      	adds	r1, r3, #2
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b30:	2200      	movs	r2, #0
 8000b32:	f002 ff9f 	bl	8003a74 <osMessageQueueGet>
	  osMessageQueueGet(QUEUE_DATAHandle, &XYZ.Z_16bit, 0, osWaitForever);
 8000b36:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <StartUART_Tr+0x88>)
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b3e:	1d19      	adds	r1, r3, #4
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	2200      	movs	r2, #0
 8000b46:	f002 ff95 	bl	8003a74 <osMessageQueueGet>
	  sprintf(dataUART,"X=%d Y=%d Z=%d\r\n", XYZ.X_16bit, XYZ.Y_16bit, XYZ.Z_16bit);
 8000b4a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000b54:	4619      	mov	r1, r3
 8000b56:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000b5a:	f107 0008 	add.w	r0, r7, #8
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	460b      	mov	r3, r1
 8000b62:	490c      	ldr	r1, [pc, #48]	; (8000b94 <StartUART_Tr+0x8c>)
 8000b64:	f005 fd3a 	bl	80065dc <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)&dataUART, strlen(dataUART), osWaitForever);
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fb2f 	bl	80001d0 <strlen>
 8000b72:	4603      	mov	r3, r0
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	f107 0108 	add.w	r1, r7, #8
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	4806      	ldr	r0, [pc, #24]	; (8000b98 <StartUART_Tr+0x90>)
 8000b80:	f002 f9f5 	bl	8002f6e <HAL_UART_Transmit>
    osDelay(500);
 8000b84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b88:	f002 fe86 	bl	8003898 <osDelay>
	  osMessageQueueGet(QUEUE_DATAHandle, &XYZ.X_16bit, 0, osWaitForever);
 8000b8c:	e7c0      	b.n	8000b10 <StartUART_Tr+0x8>
 8000b8e:	bf00      	nop
 8000b90:	200005f0 	.word	0x200005f0
 8000b94:	08006ef8 	.word	0x08006ef8
 8000b98:	200000e8 	.word	0x200000e8

08000b9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d101      	bne.n	8000bb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bae:	f000 f9f9 	bl	8000fa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40001000 	.word	0x40001000

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <Error_Handler+0x8>
	...

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_MspInit+0x54>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <HAL_MspInit+0x54>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	; 0x44
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_MspInit+0x54>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_MspInit+0x54>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <HAL_MspInit+0x54>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_MspInit+0x54>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	f06f 0001 	mvn.w	r0, #1
 8000c12:	f000 fa9f 	bl	8001154 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <HAL_SPI_MspInit+0x84>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12b      	bne.n	8000c9e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_SPI_MspInit+0x88>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a17      	ldr	r2, [pc, #92]	; (8000cac <HAL_SPI_MspInit+0x88>)
 8000c50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_SPI_MspInit+0x88>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_SPI_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_SPI_MspInit+0x88>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_SPI_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c7e:	23e0      	movs	r3, #224	; 0xe0
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c8e:	2305      	movs	r3, #5
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <HAL_SPI_MspInit+0x8c>)
 8000c9a:	f000 fa85 	bl	80011a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40013000 	.word	0x40013000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <HAL_UART_MspInit+0x84>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d12b      	bne.n	8000d2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_UART_MspInit+0x88>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <HAL_UART_MspInit+0x88>)
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_UART_MspInit+0x88>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_UART_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <HAL_UART_MspInit+0x88>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_UART_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d0e:	230c      	movs	r3, #12
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d1e:	2307      	movs	r3, #7
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_UART_MspInit+0x8c>)
 8000d2a:	f000 fa3d 	bl	80011a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	; 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40004400 	.word	0x40004400
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000

08000d44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08e      	sub	sp, #56	; 0x38
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	4b33      	ldr	r3, [pc, #204]	; (8000e28 <HAL_InitTick+0xe4>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	4a32      	ldr	r2, [pc, #200]	; (8000e28 <HAL_InitTick+0xe4>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6413      	str	r3, [r2, #64]	; 0x40
 8000d64:	4b30      	ldr	r3, [pc, #192]	; (8000e28 <HAL_InitTick+0xe4>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d70:	f107 0210 	add.w	r2, r7, #16
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 f822 	bl	8001dc4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d103      	bne.n	8000d92 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d8a:	f000 fff3 	bl	8001d74 <HAL_RCC_GetPCLK1Freq>
 8000d8e:	6378      	str	r0, [r7, #52]	; 0x34
 8000d90:	e004      	b.n	8000d9c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d92:	f000 ffef 	bl	8001d74 <HAL_RCC_GetPCLK1Freq>
 8000d96:	4603      	mov	r3, r0
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d9e:	4a23      	ldr	r2, [pc, #140]	; (8000e2c <HAL_InitTick+0xe8>)
 8000da0:	fba2 2303 	umull	r2, r3, r2, r3
 8000da4:	0c9b      	lsrs	r3, r3, #18
 8000da6:	3b01      	subs	r3, #1
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000daa:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <HAL_InitTick+0xec>)
 8000dac:	4a21      	ldr	r2, [pc, #132]	; (8000e34 <HAL_InitTick+0xf0>)
 8000dae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <HAL_InitTick+0xec>)
 8000db2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000db6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000db8:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <HAL_InitTick+0xec>)
 8000dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <HAL_InitTick+0xec>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_InitTick+0xec>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_InitTick+0xec>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000dd0:	4817      	ldr	r0, [pc, #92]	; (8000e30 <HAL_InitTick+0xec>)
 8000dd2:	f001 fdd1 	bl	8002978 <HAL_TIM_Base_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ddc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d11b      	bne.n	8000e1c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000de4:	4812      	ldr	r0, [pc, #72]	; (8000e30 <HAL_InitTick+0xec>)
 8000de6:	f001 fe21 	bl	8002a2c <HAL_TIM_Base_Start_IT>
 8000dea:	4603      	mov	r3, r0
 8000dec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000df0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d111      	bne.n	8000e1c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000df8:	2036      	movs	r0, #54	; 0x36
 8000dfa:	f000 f9c7 	bl	800118c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d808      	bhi.n	8000e16 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	2036      	movs	r0, #54	; 0x36
 8000e0a:	f000 f9a3 	bl	8001154 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <HAL_InitTick+0xf4>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	e002      	b.n	8000e1c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3738      	adds	r7, #56	; 0x38
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	431bde83 	.word	0x431bde83
 8000e30:	20000684 	.word	0x20000684
 8000e34:	40001000 	.word	0x40001000
 8000e38:	20000004 	.word	0x20000004

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <NMI_Handler+0x4>

08000e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <MemManage_Handler+0x4>

08000e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <TIM6_DAC_IRQHandler+0x10>)
 8000e6e:	f001 fe4d 	bl	8002b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000684 	.word	0x20000684

08000e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e84:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <_sbrk+0x5c>)
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <_sbrk+0x60>)
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <_sbrk+0x64>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <_sbrk+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d207      	bcs.n	8000ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eac:	f005 fb56 	bl	800655c <__errno>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	e009      	b.n	8000ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <_sbrk+0x64>)
 8000ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20020000 	.word	0x20020000
 8000edc:	00000400 	.word	0x00000400
 8000ee0:	200006cc 	.word	0x200006cc
 8000ee4:	20005038 	.word	0x20005038

08000ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <SystemInit+0x20>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <SystemInit+0x20>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f12:	490e      	ldr	r1, [pc, #56]	; (8000f4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f28:	4c0b      	ldr	r4, [pc, #44]	; (8000f58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f36:	f7ff ffd7 	bl	8000ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f005 fb15 	bl	8006568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3e:	f7ff fb61 	bl	8000604 <main>
  bx  lr    
 8000f42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f4c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f50:	08007004 	.word	0x08007004
  ldr r2, =_sbss
 8000f54:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f58:	20005034 	.word	0x20005034

08000f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <HAL_Init+0x40>)
 8000f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <HAL_Init+0x40>)
 8000f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_Init+0x40>)
 8000f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 f8d8 	bl	800113e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8e:	200f      	movs	r0, #15
 8000f90:	f7ff fed8 	bl	8000d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f94:	f7ff fe1a 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023c00 	.word	0x40023c00

08000fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x20>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	200006d0 	.word	0x200006d0

08000fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_GetTick+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	200006d0 	.word	0x200006d0

08000fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800100c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001016:	4a04      	ldr	r2, [pc, #16]	; (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	60d3      	str	r3, [r2, #12]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <__NVIC_GetPriorityGrouping+0x18>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 0307 	and.w	r3, r3, #7
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	db0b      	blt.n	8001072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	f003 021f 	and.w	r2, r3, #31
 8001060:	4907      	ldr	r1, [pc, #28]	; (8001080 <__NVIC_EnableIRQ+0x38>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	095b      	lsrs	r3, r3, #5
 8001068:	2001      	movs	r0, #1
 800106a:	fa00 f202 	lsl.w	r2, r0, r2
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e100 	.word	0xe000e100

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ff4c 	bl	8000fe4 <__NVIC_SetPriorityGrouping>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001166:	f7ff ff61 	bl	800102c <__NVIC_GetPriorityGrouping>
 800116a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	6978      	ldr	r0, [r7, #20]
 8001172:	f7ff ffb1 	bl	80010d8 <NVIC_EncodePriority>
 8001176:	4602      	mov	r2, r0
 8001178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117c:	4611      	mov	r1, r2
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff80 	bl	8001084 <__NVIC_SetPriority>
}
 8001184:	bf00      	nop
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff54 	bl	8001048 <__NVIC_EnableIRQ>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
 80011c2:	e16b      	b.n	800149c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011c4:	2201      	movs	r2, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	429a      	cmp	r2, r3
 80011de:	f040 815a 	bne.w	8001496 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d005      	beq.n	80011fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d130      	bne.n	800125c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	2203      	movs	r2, #3
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001230:	2201      	movs	r2, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	091b      	lsrs	r3, r3, #4
 8001246:	f003 0201 	and.w	r2, r3, #1
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b03      	cmp	r3, #3
 8001266:	d017      	beq.n	8001298 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d123      	bne.n	80012ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	08da      	lsrs	r2, r3, #3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3208      	adds	r2, #8
 80012ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	220f      	movs	r2, #15
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	691a      	ldr	r2, [r3, #16]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	08da      	lsrs	r2, r3, #3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3208      	adds	r2, #8
 80012e6:	69b9      	ldr	r1, [r7, #24]
 80012e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0203 	and.w	r2, r3, #3
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80b4 	beq.w	8001496 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b60      	ldr	r3, [pc, #384]	; (80014b4 <HAL_GPIO_Init+0x30c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	4a5f      	ldr	r2, [pc, #380]	; (80014b4 <HAL_GPIO_Init+0x30c>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133c:	6453      	str	r3, [r2, #68]	; 0x44
 800133e:	4b5d      	ldr	r3, [pc, #372]	; (80014b4 <HAL_GPIO_Init+0x30c>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800134a:	4a5b      	ldr	r2, [pc, #364]	; (80014b8 <HAL_GPIO_Init+0x310>)
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	3302      	adds	r3, #2
 8001352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	220f      	movs	r2, #15
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a52      	ldr	r2, [pc, #328]	; (80014bc <HAL_GPIO_Init+0x314>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d02b      	beq.n	80013ce <HAL_GPIO_Init+0x226>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a51      	ldr	r2, [pc, #324]	; (80014c0 <HAL_GPIO_Init+0x318>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d025      	beq.n	80013ca <HAL_GPIO_Init+0x222>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a50      	ldr	r2, [pc, #320]	; (80014c4 <HAL_GPIO_Init+0x31c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d01f      	beq.n	80013c6 <HAL_GPIO_Init+0x21e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4f      	ldr	r2, [pc, #316]	; (80014c8 <HAL_GPIO_Init+0x320>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d019      	beq.n	80013c2 <HAL_GPIO_Init+0x21a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4e      	ldr	r2, [pc, #312]	; (80014cc <HAL_GPIO_Init+0x324>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d013      	beq.n	80013be <HAL_GPIO_Init+0x216>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4d      	ldr	r2, [pc, #308]	; (80014d0 <HAL_GPIO_Init+0x328>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00d      	beq.n	80013ba <HAL_GPIO_Init+0x212>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4c      	ldr	r2, [pc, #304]	; (80014d4 <HAL_GPIO_Init+0x32c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d007      	beq.n	80013b6 <HAL_GPIO_Init+0x20e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4b      	ldr	r2, [pc, #300]	; (80014d8 <HAL_GPIO_Init+0x330>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d101      	bne.n	80013b2 <HAL_GPIO_Init+0x20a>
 80013ae:	2307      	movs	r3, #7
 80013b0:	e00e      	b.n	80013d0 <HAL_GPIO_Init+0x228>
 80013b2:	2308      	movs	r3, #8
 80013b4:	e00c      	b.n	80013d0 <HAL_GPIO_Init+0x228>
 80013b6:	2306      	movs	r3, #6
 80013b8:	e00a      	b.n	80013d0 <HAL_GPIO_Init+0x228>
 80013ba:	2305      	movs	r3, #5
 80013bc:	e008      	b.n	80013d0 <HAL_GPIO_Init+0x228>
 80013be:	2304      	movs	r3, #4
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x228>
 80013c2:	2303      	movs	r3, #3
 80013c4:	e004      	b.n	80013d0 <HAL_GPIO_Init+0x228>
 80013c6:	2302      	movs	r3, #2
 80013c8:	e002      	b.n	80013d0 <HAL_GPIO_Init+0x228>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_GPIO_Init+0x228>
 80013ce:	2300      	movs	r3, #0
 80013d0:	69fa      	ldr	r2, [r7, #28]
 80013d2:	f002 0203 	and.w	r2, r2, #3
 80013d6:	0092      	lsls	r2, r2, #2
 80013d8:	4093      	lsls	r3, r2
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e0:	4935      	ldr	r1, [pc, #212]	; (80014b8 <HAL_GPIO_Init+0x310>)
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	3302      	adds	r3, #2
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ee:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <HAL_GPIO_Init+0x334>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001412:	4a32      	ldr	r2, [pc, #200]	; (80014dc <HAL_GPIO_Init+0x334>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001418:	4b30      	ldr	r3, [pc, #192]	; (80014dc <HAL_GPIO_Init+0x334>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800143c:	4a27      	ldr	r2, [pc, #156]	; (80014dc <HAL_GPIO_Init+0x334>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <HAL_GPIO_Init+0x334>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001466:	4a1d      	ldr	r2, [pc, #116]	; (80014dc <HAL_GPIO_Init+0x334>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <HAL_GPIO_Init+0x334>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001490:	4a12      	ldr	r2, [pc, #72]	; (80014dc <HAL_GPIO_Init+0x334>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3301      	adds	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	2b0f      	cmp	r3, #15
 80014a0:	f67f ae90 	bls.w	80011c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3724      	adds	r7, #36	; 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40013800 	.word	0x40013800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020c00 	.word	0x40020c00
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40021400 	.word	0x40021400
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40021c00 	.word	0x40021c00
 80014dc:	40013c00 	.word	0x40013c00

080014e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f0:	787b      	ldrb	r3, [r7, #1]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f6:	887a      	ldrh	r2, [r7, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014fc:	e003      	b.n	8001506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	041a      	lsls	r2, r3, #16
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	619a      	str	r2, [r3, #24]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e267      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d075      	beq.n	800161e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001532:	4b88      	ldr	r3, [pc, #544]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b04      	cmp	r3, #4
 800153c:	d00c      	beq.n	8001558 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800153e:	4b85      	ldr	r3, [pc, #532]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001546:	2b08      	cmp	r3, #8
 8001548:	d112      	bne.n	8001570 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800154a:	4b82      	ldr	r3, [pc, #520]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001556:	d10b      	bne.n	8001570 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	4b7e      	ldr	r3, [pc, #504]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d05b      	beq.n	800161c <HAL_RCC_OscConfig+0x108>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d157      	bne.n	800161c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e242      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001578:	d106      	bne.n	8001588 <HAL_RCC_OscConfig+0x74>
 800157a:	4b76      	ldr	r3, [pc, #472]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a75      	ldr	r2, [pc, #468]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	e01d      	b.n	80015c4 <HAL_RCC_OscConfig+0xb0>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0x98>
 8001592:	4b70      	ldr	r3, [pc, #448]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a6f      	ldr	r2, [pc, #444]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	4b6d      	ldr	r3, [pc, #436]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a6c      	ldr	r2, [pc, #432]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e00b      	b.n	80015c4 <HAL_RCC_OscConfig+0xb0>
 80015ac:	4b69      	ldr	r3, [pc, #420]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a68      	ldr	r2, [pc, #416]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80015b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b66      	ldr	r3, [pc, #408]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a65      	ldr	r2, [pc, #404]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80015be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d013      	beq.n	80015f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fcfe 	bl	8000fcc <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fcfa 	bl	8000fcc <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	; 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e207      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	4b5b      	ldr	r3, [pc, #364]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0xc0>
 80015f2:	e014      	b.n	800161e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fcea 	bl	8000fcc <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fce6 	bl	8000fcc <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	; 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e1f3      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	4b51      	ldr	r3, [pc, #324]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0xe8>
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d063      	beq.n	80016f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800162a:	4b4a      	ldr	r3, [pc, #296]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00b      	beq.n	800164e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001636:	4b47      	ldr	r3, [pc, #284]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800163e:	2b08      	cmp	r3, #8
 8001640:	d11c      	bne.n	800167c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001642:	4b44      	ldr	r3, [pc, #272]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d116      	bne.n	800167c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164e:	4b41      	ldr	r3, [pc, #260]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <HAL_RCC_OscConfig+0x152>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d001      	beq.n	8001666 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e1c7      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001666:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4937      	ldr	r1, [pc, #220]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167a:	e03a      	b.n	80016f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d020      	beq.n	80016c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001684:	4b34      	ldr	r3, [pc, #208]	; (8001758 <HAL_RCC_OscConfig+0x244>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168a:	f7ff fc9f 	bl	8000fcc <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001692:	f7ff fc9b 	bl	8000fcc <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e1a8      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a4:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4925      	ldr	r1, [pc, #148]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	600b      	str	r3, [r1, #0]
 80016c4:	e015      	b.n	80016f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c6:	4b24      	ldr	r3, [pc, #144]	; (8001758 <HAL_RCC_OscConfig+0x244>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fc7e 	bl	8000fcc <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d4:	f7ff fc7a 	bl	8000fcc <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e187      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d036      	beq.n	800176c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d016      	beq.n	8001734 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_RCC_OscConfig+0x248>)
 8001708:	2201      	movs	r2, #1
 800170a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170c:	f7ff fc5e 	bl	8000fcc <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001714:	f7ff fc5a 	bl	8000fcc <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e167      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0x200>
 8001732:	e01b      	b.n	800176c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_RCC_OscConfig+0x248>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173a:	f7ff fc47 	bl	8000fcc <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001740:	e00e      	b.n	8001760 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001742:	f7ff fc43 	bl	8000fcc <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d907      	bls.n	8001760 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e150      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
 8001754:	40023800 	.word	0x40023800
 8001758:	42470000 	.word	0x42470000
 800175c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001760:	4b88      	ldr	r3, [pc, #544]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1ea      	bne.n	8001742 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 8097 	beq.w	80018a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800177e:	4b81      	ldr	r3, [pc, #516]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10f      	bne.n	80017aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	4b7d      	ldr	r3, [pc, #500]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a7c      	ldr	r2, [pc, #496]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b7a      	ldr	r3, [pc, #488]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017a6:	2301      	movs	r3, #1
 80017a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017aa:	4b77      	ldr	r3, [pc, #476]	; (8001988 <HAL_RCC_OscConfig+0x474>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d118      	bne.n	80017e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017b6:	4b74      	ldr	r3, [pc, #464]	; (8001988 <HAL_RCC_OscConfig+0x474>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a73      	ldr	r2, [pc, #460]	; (8001988 <HAL_RCC_OscConfig+0x474>)
 80017bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c2:	f7ff fc03 	bl	8000fcc <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ca:	f7ff fbff 	bl	8000fcc <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e10c      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017dc:	4b6a      	ldr	r3, [pc, #424]	; (8001988 <HAL_RCC_OscConfig+0x474>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d106      	bne.n	80017fe <HAL_RCC_OscConfig+0x2ea>
 80017f0:	4b64      	ldr	r3, [pc, #400]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f4:	4a63      	ldr	r2, [pc, #396]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6713      	str	r3, [r2, #112]	; 0x70
 80017fc:	e01c      	b.n	8001838 <HAL_RCC_OscConfig+0x324>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b05      	cmp	r3, #5
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x30c>
 8001806:	4b5f      	ldr	r3, [pc, #380]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180a:	4a5e      	ldr	r2, [pc, #376]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	6713      	str	r3, [r2, #112]	; 0x70
 8001812:	4b5c      	ldr	r3, [pc, #368]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001816:	4a5b      	ldr	r2, [pc, #364]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6713      	str	r3, [r2, #112]	; 0x70
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0x324>
 8001820:	4b58      	ldr	r3, [pc, #352]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001824:	4a57      	ldr	r2, [pc, #348]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	6713      	str	r3, [r2, #112]	; 0x70
 800182c:	4b55      	ldr	r3, [pc, #340]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 800182e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001830:	4a54      	ldr	r2, [pc, #336]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001832:	f023 0304 	bic.w	r3, r3, #4
 8001836:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d015      	beq.n	800186c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001840:	f7ff fbc4 	bl	8000fcc <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001846:	e00a      	b.n	800185e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001848:	f7ff fbc0 	bl	8000fcc <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e0cb      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185e:	4b49      	ldr	r3, [pc, #292]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0ee      	beq.n	8001848 <HAL_RCC_OscConfig+0x334>
 800186a:	e014      	b.n	8001896 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186c:	f7ff fbae 	bl	8000fcc <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001872:	e00a      	b.n	800188a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001874:	f7ff fbaa 	bl	8000fcc <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001882:	4293      	cmp	r3, r2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e0b5      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188a:	4b3e      	ldr	r3, [pc, #248]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 800188c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1ee      	bne.n	8001874 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001896:	7dfb      	ldrb	r3, [r7, #23]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d105      	bne.n	80018a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800189c:	4b39      	ldr	r3, [pc, #228]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	4a38      	ldr	r2, [pc, #224]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 80018a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80a1 	beq.w	80019f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018b2:	4b34      	ldr	r3, [pc, #208]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d05c      	beq.n	8001978 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d141      	bne.n	800194a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c6:	4b31      	ldr	r3, [pc, #196]	; (800198c <HAL_RCC_OscConfig+0x478>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fb7e 	bl	8000fcc <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff fb7a 	bl	8000fcc <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e087      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e6:	4b27      	ldr	r3, [pc, #156]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69da      	ldr	r2, [r3, #28]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	019b      	lsls	r3, r3, #6
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	085b      	lsrs	r3, r3, #1
 800190a:	3b01      	subs	r3, #1
 800190c:	041b      	lsls	r3, r3, #16
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	061b      	lsls	r3, r3, #24
 8001916:	491b      	ldr	r1, [pc, #108]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_RCC_OscConfig+0x478>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7ff fb53 	bl	8000fcc <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff fb4f 	bl	8000fcc <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e05c      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x416>
 8001948:	e054      	b.n	80019f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <HAL_RCC_OscConfig+0x478>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff fb3c 	bl	8000fcc <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff fb38 	bl	8000fcc <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e045      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x444>
 8001976:	e03d      	b.n	80019f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d107      	bne.n	8001990 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e038      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
 8001984:	40023800 	.word	0x40023800
 8001988:	40007000 	.word	0x40007000
 800198c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <HAL_RCC_OscConfig+0x4ec>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d028      	beq.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d121      	bne.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d11a      	bne.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019c0:	4013      	ands	r3, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d111      	bne.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	085b      	lsrs	r3, r3, #1
 80019d8:	3b01      	subs	r3, #1
 80019da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d107      	bne.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800

08001a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0cc      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a18:	4b68      	ldr	r3, [pc, #416]	; (8001bbc <HAL_RCC_ClockConfig+0x1b8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d90c      	bls.n	8001a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b65      	ldr	r3, [pc, #404]	; (8001bbc <HAL_RCC_ClockConfig+0x1b8>)
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b63      	ldr	r3, [pc, #396]	; (8001bbc <HAL_RCC_ClockConfig+0x1b8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0b8      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d020      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a58:	4b59      	ldr	r3, [pc, #356]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4a58      	ldr	r2, [pc, #352]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a70:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a7c:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	494d      	ldr	r1, [pc, #308]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d044      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d107      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d119      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e07f      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d003      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d107      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac2:	4b3f      	ldr	r3, [pc, #252]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e06f      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e067      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae2:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f023 0203 	bic.w	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4934      	ldr	r1, [pc, #208]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af4:	f7ff fa6a 	bl	8000fcc <HAL_GetTick>
 8001af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afc:	f7ff fa66 	bl	8000fcc <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e04f      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b12:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 020c 	and.w	r2, r3, #12
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d1eb      	bne.n	8001afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b24:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d20c      	bcs.n	8001b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b32:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e032      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	4916      	ldr	r1, [pc, #88]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d009      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	490e      	ldr	r1, [pc, #56]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b8a:	f000 f821 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	490a      	ldr	r1, [pc, #40]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9c:	5ccb      	ldrb	r3, [r1, r3]
 8001b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff f8ca 	bl	8000d44 <HAL_InitTick>

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023c00 	.word	0x40023c00
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	08006fa8 	.word	0x08006fa8
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000004 	.word	0x20000004

08001bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bd4:	b090      	sub	sp, #64	; 0x40
 8001bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
 8001bdc:	2300      	movs	r3, #0
 8001bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001be0:	2300      	movs	r3, #0
 8001be2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001be8:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d00d      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0x40>
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	f200 80a1 	bhi.w	8001d3c <HAL_RCC_GetSysClockFreq+0x16c>
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0x34>
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d003      	beq.n	8001c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c02:	e09b      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c04:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c06:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c08:	e09b      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c0a:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c0e:	e098      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c10:	4b4f      	ldr	r3, [pc, #316]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c1a:	4b4d      	ldr	r3, [pc, #308]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d028      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c26:	4b4a      	ldr	r3, [pc, #296]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	099b      	lsrs	r3, r3, #6
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	623b      	str	r3, [r7, #32]
 8001c30:	627a      	str	r2, [r7, #36]	; 0x24
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4b47      	ldr	r3, [pc, #284]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c3c:	fb03 f201 	mul.w	r2, r3, r1
 8001c40:	2300      	movs	r3, #0
 8001c42:	fb00 f303 	mul.w	r3, r0, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	4a43      	ldr	r2, [pc, #268]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c4a:	fba0 1202 	umull	r1, r2, r0, r2
 8001c4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c50:	460a      	mov	r2, r1
 8001c52:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c56:	4413      	add	r3, r2
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
 8001c60:	61fa      	str	r2, [r7, #28]
 8001c62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c6a:	f7fe fb09 	bl	8000280 <__aeabi_uldivmod>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4613      	mov	r3, r2
 8001c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c76:	e053      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c78:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	099b      	lsrs	r3, r3, #6
 8001c7e:	2200      	movs	r2, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	617a      	str	r2, [r7, #20]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c8a:	f04f 0b00 	mov.w	fp, #0
 8001c8e:	4652      	mov	r2, sl
 8001c90:	465b      	mov	r3, fp
 8001c92:	f04f 0000 	mov.w	r0, #0
 8001c96:	f04f 0100 	mov.w	r1, #0
 8001c9a:	0159      	lsls	r1, r3, #5
 8001c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ca0:	0150      	lsls	r0, r2, #5
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	ebb2 080a 	subs.w	r8, r2, sl
 8001caa:	eb63 090b 	sbc.w	r9, r3, fp
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001cba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001cbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001cc2:	ebb2 0408 	subs.w	r4, r2, r8
 8001cc6:	eb63 0509 	sbc.w	r5, r3, r9
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	00eb      	lsls	r3, r5, #3
 8001cd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cd8:	00e2      	lsls	r2, r4, #3
 8001cda:	4614      	mov	r4, r2
 8001cdc:	461d      	mov	r5, r3
 8001cde:	eb14 030a 	adds.w	r3, r4, sl
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	eb45 030b 	adc.w	r3, r5, fp
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	028b      	lsls	r3, r1, #10
 8001cfa:	4621      	mov	r1, r4
 8001cfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d00:	4621      	mov	r1, r4
 8001d02:	028a      	lsls	r2, r1, #10
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	60fa      	str	r2, [r7, #12]
 8001d10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d14:	f7fe fab4 	bl	8000280 <__aeabi_uldivmod>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	0c1b      	lsrs	r3, r3, #16
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001d30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d3a:	e002      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3740      	adds	r7, #64	; 0x40
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	00f42400 	.word	0x00f42400
 8001d58:	017d7840 	.word	0x017d7840

08001d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000000 	.word	0x20000000

08001d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d78:	f7ff fff0 	bl	8001d5c <HAL_RCC_GetHCLKFreq>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	0a9b      	lsrs	r3, r3, #10
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	4903      	ldr	r1, [pc, #12]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8a:	5ccb      	ldrb	r3, [r1, r3]
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40023800 	.word	0x40023800
 8001d98:	08006fb8 	.word	0x08006fb8

08001d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001da0:	f7ff ffdc 	bl	8001d5c <HAL_RCC_GetHCLKFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	0b5b      	lsrs	r3, r3, #13
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	4903      	ldr	r1, [pc, #12]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	08006fb8 	.word	0x08006fb8

08001dc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	220f      	movs	r2, #15
 8001dd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_RCC_GetClockConfig+0x5c>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_RCC_GetClockConfig+0x5c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_RCC_GetClockConfig+0x5c>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_RCC_GetClockConfig+0x5c>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	08db      	lsrs	r3, r3, #3
 8001dfe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <HAL_RCC_GetClockConfig+0x60>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0207 	and.w	r2, r3, #7
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	601a      	str	r2, [r3, #0]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40023c00 	.word	0x40023c00

08001e28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e07b      	b.n	8001f32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d108      	bne.n	8001e54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e4a:	d009      	beq.n	8001e60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
 8001e52:	e005      	b.n	8001e60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d106      	bne.n	8001e80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7fe fed2 	bl	8000c24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee4:	ea42 0103 	orr.w	r1, r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	0c1b      	lsrs	r3, r3, #16
 8001efe:	f003 0104 	and.w	r1, r3, #4
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	f003 0210 	and.w	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69da      	ldr	r2, [r3, #28]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b088      	sub	sp, #32
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	603b      	str	r3, [r7, #0]
 8001f46:	4613      	mov	r3, r2
 8001f48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_SPI_Transmit+0x22>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e126      	b.n	80021aa <HAL_SPI_Transmit+0x270>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f64:	f7ff f832 	bl	8000fcc <HAL_GetTick>
 8001f68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d002      	beq.n	8001f80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f7e:	e10b      	b.n	8002198 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <HAL_SPI_Transmit+0x52>
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f90:	e102      	b.n	8002198 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2203      	movs	r2, #3
 8001f96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	88fa      	ldrh	r2, [r7, #6]
 8001faa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	88fa      	ldrh	r2, [r7, #6]
 8001fb0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fd8:	d10f      	bne.n	8001ffa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fe8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ff8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002004:	2b40      	cmp	r3, #64	; 0x40
 8002006:	d007      	beq.n	8002018 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002016:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002020:	d14b      	bne.n	80020ba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <HAL_SPI_Transmit+0xf6>
 800202a:	8afb      	ldrh	r3, [r7, #22]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d13e      	bne.n	80020ae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	881a      	ldrh	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	1c9a      	adds	r2, r3, #2
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800204a:	b29b      	uxth	r3, r3
 800204c:	3b01      	subs	r3, #1
 800204e:	b29a      	uxth	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002054:	e02b      	b.n	80020ae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b02      	cmp	r3, #2
 8002062:	d112      	bne.n	800208a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	881a      	ldrh	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	1c9a      	adds	r2, r3, #2
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800207e:	b29b      	uxth	r3, r3
 8002080:	3b01      	subs	r3, #1
 8002082:	b29a      	uxth	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	86da      	strh	r2, [r3, #54]	; 0x36
 8002088:	e011      	b.n	80020ae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800208a:	f7fe ff9f 	bl	8000fcc <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d803      	bhi.n	80020a2 <HAL_SPI_Transmit+0x168>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d102      	bne.n	80020a8 <HAL_SPI_Transmit+0x16e>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020ac:	e074      	b.n	8002198 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1ce      	bne.n	8002056 <HAL_SPI_Transmit+0x11c>
 80020b8:	e04c      	b.n	8002154 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <HAL_SPI_Transmit+0x18e>
 80020c2:	8afb      	ldrh	r3, [r7, #22]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d140      	bne.n	800214a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	330c      	adds	r3, #12
 80020d2:	7812      	ldrb	r2, [r2, #0]
 80020d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020ee:	e02c      	b.n	800214a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d113      	bne.n	8002126 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	330c      	adds	r3, #12
 8002108:	7812      	ldrb	r2, [r2, #0]
 800210a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800211a:	b29b      	uxth	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	86da      	strh	r2, [r3, #54]	; 0x36
 8002124:	e011      	b.n	800214a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002126:	f7fe ff51 	bl	8000fcc <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d803      	bhi.n	800213e <HAL_SPI_Transmit+0x204>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d102      	bne.n	8002144 <HAL_SPI_Transmit+0x20a>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d102      	bne.n	800214a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002148:	e026      	b.n	8002198 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800214e:	b29b      	uxth	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1cd      	bne.n	80020f0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	6839      	ldr	r1, [r7, #0]
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 fbcb 	bl	80028f4 <SPI_EndRxTxTransaction>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2220      	movs	r2, #32
 8002168:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10a      	bne.n	8002188 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218c:	2b00      	cmp	r3, #0
 800218e:	d002      	beq.n	8002196 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	77fb      	strb	r3, [r7, #31]
 8002194:	e000      	b.n	8002198 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002196:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3720      	adds	r7, #32
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b088      	sub	sp, #32
 80021b6:	af02      	add	r7, sp, #8
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	4613      	mov	r3, r2
 80021c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021ce:	d112      	bne.n	80021f6 <HAL_SPI_Receive+0x44>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10e      	bne.n	80021f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2204      	movs	r2, #4
 80021dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80021e0:	88fa      	ldrh	r2, [r7, #6]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	4613      	mov	r3, r2
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	68b9      	ldr	r1, [r7, #8]
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f8f1 	bl	80023d4 <HAL_SPI_TransmitReceive>
 80021f2:	4603      	mov	r3, r0
 80021f4:	e0ea      	b.n	80023cc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_SPI_Receive+0x52>
 8002200:	2302      	movs	r3, #2
 8002202:	e0e3      	b.n	80023cc <HAL_SPI_Receive+0x21a>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800220c:	f7fe fede 	bl	8000fcc <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d002      	beq.n	8002224 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800221e:	2302      	movs	r3, #2
 8002220:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002222:	e0ca      	b.n	80023ba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <HAL_SPI_Receive+0x7e>
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d102      	bne.n	8002236 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002234:	e0c1      	b.n	80023ba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2204      	movs	r2, #4
 800223a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	88fa      	ldrh	r2, [r7, #6]
 800224e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	88fa      	ldrh	r2, [r7, #6]
 8002254:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800227c:	d10f      	bne.n	800229e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800228c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800229c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a8:	2b40      	cmp	r3, #64	; 0x40
 80022aa:	d007      	beq.n	80022bc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d162      	bne.n	800238a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80022c4:	e02e      	b.n	8002324 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d115      	bne.n	8002300 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f103 020c 	add.w	r2, r3, #12
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	7812      	ldrb	r2, [r2, #0]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022fe:	e011      	b.n	8002324 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002300:	f7fe fe64 	bl	8000fcc <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d803      	bhi.n	8002318 <HAL_SPI_Receive+0x166>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d102      	bne.n	800231e <HAL_SPI_Receive+0x16c>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d102      	bne.n	8002324 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002322:	e04a      	b.n	80023ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002328:	b29b      	uxth	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1cb      	bne.n	80022c6 <HAL_SPI_Receive+0x114>
 800232e:	e031      	b.n	8002394 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b01      	cmp	r3, #1
 800233c:	d113      	bne.n	8002366 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002348:	b292      	uxth	r2, r2
 800234a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002350:	1c9a      	adds	r2, r3, #2
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002364:	e011      	b.n	800238a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002366:	f7fe fe31 	bl	8000fcc <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d803      	bhi.n	800237e <HAL_SPI_Receive+0x1cc>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d102      	bne.n	8002384 <HAL_SPI_Receive+0x1d2>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002388:	e017      	b.n	80023ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800238e:	b29b      	uxth	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1cd      	bne.n	8002330 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	6839      	ldr	r1, [r7, #0]
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 fa45 	bl	8002828 <SPI_EndRxTransaction>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	75fb      	strb	r3, [r7, #23]
 80023b6:	e000      	b.n	80023ba <HAL_SPI_Receive+0x208>
  }

error :
 80023b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08c      	sub	sp, #48	; 0x30
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023e2:	2301      	movs	r3, #1
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_SPI_TransmitReceive+0x26>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e18a      	b.n	8002710 <HAL_SPI_TransmitReceive+0x33c>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002402:	f7fe fde3 	bl	8000fcc <HAL_GetTick>
 8002406:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800240e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002418:	887b      	ldrh	r3, [r7, #2]
 800241a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800241c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002420:	2b01      	cmp	r3, #1
 8002422:	d00f      	beq.n	8002444 <HAL_SPI_TransmitReceive+0x70>
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800242a:	d107      	bne.n	800243c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d103      	bne.n	800243c <HAL_SPI_TransmitReceive+0x68>
 8002434:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002438:	2b04      	cmp	r3, #4
 800243a:	d003      	beq.n	8002444 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800243c:	2302      	movs	r3, #2
 800243e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002442:	e15b      	b.n	80026fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d005      	beq.n	8002456 <HAL_SPI_TransmitReceive+0x82>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_SPI_TransmitReceive+0x82>
 8002450:	887b      	ldrh	r3, [r7, #2]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d103      	bne.n	800245e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800245c:	e14e      	b.n	80026fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b04      	cmp	r3, #4
 8002468:	d003      	beq.n	8002472 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2205      	movs	r2, #5
 800246e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	887a      	ldrh	r2, [r7, #2]
 8002482:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	887a      	ldrh	r2, [r7, #2]
 8002488:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	887a      	ldrh	r2, [r7, #2]
 8002494:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	887a      	ldrh	r2, [r7, #2]
 800249a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b2:	2b40      	cmp	r3, #64	; 0x40
 80024b4:	d007      	beq.n	80024c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ce:	d178      	bne.n	80025c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <HAL_SPI_TransmitReceive+0x10a>
 80024d8:	8b7b      	ldrh	r3, [r7, #26]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d166      	bne.n	80025ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	881a      	ldrh	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	1c9a      	adds	r2, r3, #2
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002502:	e053      	b.n	80025ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b02      	cmp	r3, #2
 8002510:	d11b      	bne.n	800254a <HAL_SPI_TransmitReceive+0x176>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002516:	b29b      	uxth	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d016      	beq.n	800254a <HAL_SPI_TransmitReceive+0x176>
 800251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251e:	2b01      	cmp	r3, #1
 8002520:	d113      	bne.n	800254a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	881a      	ldrh	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	1c9a      	adds	r2, r3, #2
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b01      	cmp	r3, #1
 8002556:	d119      	bne.n	800258c <HAL_SPI_TransmitReceive+0x1b8>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255c:	b29b      	uxth	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d014      	beq.n	800258c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256c:	b292      	uxth	r2, r2
 800256e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002574:	1c9a      	adds	r2, r3, #2
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002588:	2301      	movs	r3, #1
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800258c:	f7fe fd1e 	bl	8000fcc <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002598:	429a      	cmp	r2, r3
 800259a:	d807      	bhi.n	80025ac <HAL_SPI_TransmitReceive+0x1d8>
 800259c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a2:	d003      	beq.n	80025ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025aa:	e0a7      	b.n	80026fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1a6      	bne.n	8002504 <HAL_SPI_TransmitReceive+0x130>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1a1      	bne.n	8002504 <HAL_SPI_TransmitReceive+0x130>
 80025c0:	e07c      	b.n	80026bc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <HAL_SPI_TransmitReceive+0x1fc>
 80025ca:	8b7b      	ldrh	r3, [r7, #26]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d16b      	bne.n	80026a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	330c      	adds	r3, #12
 80025da:	7812      	ldrb	r2, [r2, #0]
 80025dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025f6:	e057      	b.n	80026a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b02      	cmp	r3, #2
 8002604:	d11c      	bne.n	8002640 <HAL_SPI_TransmitReceive+0x26c>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800260a:	b29b      	uxth	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d017      	beq.n	8002640 <HAL_SPI_TransmitReceive+0x26c>
 8002610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002612:	2b01      	cmp	r3, #1
 8002614:	d114      	bne.n	8002640 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	330c      	adds	r3, #12
 8002620:	7812      	ldrb	r2, [r2, #0]
 8002622:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b01      	cmp	r3, #1
 800264c:	d119      	bne.n	8002682 <HAL_SPI_TransmitReceive+0x2ae>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002652:	b29b      	uxth	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d014      	beq.n	8002682 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002674:	b29b      	uxth	r3, r3
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800267e:	2301      	movs	r3, #1
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002682:	f7fe fca3 	bl	8000fcc <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800268e:	429a      	cmp	r2, r3
 8002690:	d803      	bhi.n	800269a <HAL_SPI_TransmitReceive+0x2c6>
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d102      	bne.n	80026a0 <HAL_SPI_TransmitReceive+0x2cc>
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	2b00      	cmp	r3, #0
 800269e:	d103      	bne.n	80026a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026a6:	e029      	b.n	80026fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1a2      	bne.n	80025f8 <HAL_SPI_TransmitReceive+0x224>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d19d      	bne.n	80025f8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f917 	bl	80028f4 <SPI_EndRxTxTransaction>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d006      	beq.n	80026da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2220      	movs	r2, #32
 80026d6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80026d8:	e010      	b.n	80026fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10b      	bne.n	80026fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	e000      	b.n	80026fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80026fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800270c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002710:	4618      	mov	r0, r3
 8002712:	3730      	adds	r7, #48	; 0x30
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002728:	f7fe fc50 	bl	8000fcc <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	4413      	add	r3, r2
 8002736:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002738:	f7fe fc48 	bl	8000fcc <HAL_GetTick>
 800273c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800273e:	4b39      	ldr	r3, [pc, #228]	; (8002824 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	015b      	lsls	r3, r3, #5
 8002744:	0d1b      	lsrs	r3, r3, #20
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	fb02 f303 	mul.w	r3, r2, r3
 800274c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800274e:	e054      	b.n	80027fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002756:	d050      	beq.n	80027fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002758:	f7fe fc38 	bl	8000fcc <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	429a      	cmp	r2, r3
 8002766:	d902      	bls.n	800276e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d13d      	bne.n	80027ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800277c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002786:	d111      	bne.n	80027ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002790:	d004      	beq.n	800279c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279a:	d107      	bne.n	80027ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b4:	d10f      	bne.n	80027d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e017      	b.n	800281a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4013      	ands	r3, r2
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	429a      	cmp	r2, r3
 8002808:	bf0c      	ite	eq
 800280a:	2301      	moveq	r3, #1
 800280c:	2300      	movne	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	429a      	cmp	r2, r3
 8002816:	d19b      	bne.n	8002750 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3720      	adds	r7, #32
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000000 	.word	0x20000000

08002828 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800283c:	d111      	bne.n	8002862 <SPI_EndRxTransaction+0x3a>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002846:	d004      	beq.n	8002852 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002850:	d107      	bne.n	8002862 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002860:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800286a:	d12a      	bne.n	80028c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002874:	d012      	beq.n	800289c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2200      	movs	r2, #0
 800287e:	2180      	movs	r1, #128	; 0x80
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7ff ff49 	bl	8002718 <SPI_WaitFlagStateUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d02d      	beq.n	80028e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002890:	f043 0220 	orr.w	r2, r3, #32
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e026      	b.n	80028ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2200      	movs	r2, #0
 80028a4:	2101      	movs	r1, #1
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f7ff ff36 	bl	8002718 <SPI_WaitFlagStateUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01a      	beq.n	80028e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	f043 0220 	orr.w	r2, r3, #32
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e013      	b.n	80028ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2200      	movs	r2, #0
 80028ca:	2101      	movs	r1, #1
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f7ff ff23 	bl	8002718 <SPI_WaitFlagStateUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	f043 0220 	orr.w	r2, r3, #32
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e000      	b.n	80028ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002900:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <SPI_EndRxTxTransaction+0x7c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1b      	ldr	r2, [pc, #108]	; (8002974 <SPI_EndRxTxTransaction+0x80>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	0d5b      	lsrs	r3, r3, #21
 800290c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002910:	fb02 f303 	mul.w	r3, r2, r3
 8002914:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800291e:	d112      	bne.n	8002946 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2200      	movs	r2, #0
 8002928:	2180      	movs	r1, #128	; 0x80
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f7ff fef4 	bl	8002718 <SPI_WaitFlagStateUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d016      	beq.n	8002964 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293a:	f043 0220 	orr.w	r2, r3, #32
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e00f      	b.n	8002966 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3b01      	subs	r3, #1
 8002950:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295c:	2b80      	cmp	r3, #128	; 0x80
 800295e:	d0f2      	beq.n	8002946 <SPI_EndRxTxTransaction+0x52>
 8002960:	e000      	b.n	8002964 <SPI_EndRxTxTransaction+0x70>
        break;
 8002962:	bf00      	nop
  }

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000000 	.word	0x20000000
 8002974:	165e9f81 	.word	0x165e9f81

08002978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e041      	b.n	8002a0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f839 	bl	8002a16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3304      	adds	r3, #4
 80029b4:	4619      	mov	r1, r3
 80029b6:	4610      	mov	r0, r2
 80029b8:	f000 f9d8 	bl	8002d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
	...

08002a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d001      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e04e      	b.n	8002ae2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a23      	ldr	r2, [pc, #140]	; (8002af0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d022      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x80>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6e:	d01d      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x80>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1f      	ldr	r2, [pc, #124]	; (8002af4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d018      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x80>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1e      	ldr	r2, [pc, #120]	; (8002af8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d013      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x80>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a1c      	ldr	r2, [pc, #112]	; (8002afc <HAL_TIM_Base_Start_IT+0xd0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00e      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x80>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1b      	ldr	r2, [pc, #108]	; (8002b00 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d009      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x80>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a19      	ldr	r2, [pc, #100]	; (8002b04 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d004      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x80>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a18      	ldr	r2, [pc, #96]	; (8002b08 <HAL_TIM_Base_Start_IT+0xdc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d111      	bne.n	8002ad0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d010      	beq.n	8002ae0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ace:	e007      	b.n	8002ae0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40010000 	.word	0x40010000
 8002af4:	40000400 	.word	0x40000400
 8002af8:	40000800 	.word	0x40000800
 8002afc:	40000c00 	.word	0x40000c00
 8002b00:	40010400 	.word	0x40010400
 8002b04:	40014000 	.word	0x40014000
 8002b08:	40001800 	.word	0x40001800

08002b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d122      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d11b      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0202 	mvn.w	r2, #2
 8002b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f8ee 	bl	8002d30 <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f8e0 	bl	8002d1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f8f1 	bl	8002d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d122      	bne.n	8002bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0204 	mvn.w	r2, #4
 8002b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2202      	movs	r2, #2
 8002b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f8c4 	bl	8002d30 <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f8b6 	bl	8002d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f8c7 	bl	8002d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d122      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d11b      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0208 	mvn.w	r2, #8
 8002be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2204      	movs	r2, #4
 8002be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f89a 	bl	8002d30 <HAL_TIM_IC_CaptureCallback>
 8002bfc:	e005      	b.n	8002c0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f88c 	bl	8002d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f89d 	bl	8002d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b10      	cmp	r3, #16
 8002c1c:	d122      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d11b      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0210 	mvn.w	r2, #16
 8002c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2208      	movs	r2, #8
 8002c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f870 	bl	8002d30 <HAL_TIM_IC_CaptureCallback>
 8002c50:	e005      	b.n	8002c5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f862 	bl	8002d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f873 	bl	8002d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d10e      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d107      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0201 	mvn.w	r2, #1
 8002c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fd ff86 	bl	8000b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	2b80      	cmp	r3, #128	; 0x80
 8002c9c:	d10e      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca8:	2b80      	cmp	r3, #128	; 0x80
 8002caa:	d107      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f902 	bl	8002ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc6:	2b40      	cmp	r3, #64	; 0x40
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd4:	2b40      	cmp	r3, #64	; 0x40
 8002cd6:	d107      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f838 	bl	8002d58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d10e      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d107      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0220 	mvn.w	r2, #32
 8002d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f8cc 	bl	8002eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a40      	ldr	r2, [pc, #256]	; (8002e80 <TIM_Base_SetConfig+0x114>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d013      	beq.n	8002dac <TIM_Base_SetConfig+0x40>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8a:	d00f      	beq.n	8002dac <TIM_Base_SetConfig+0x40>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a3d      	ldr	r2, [pc, #244]	; (8002e84 <TIM_Base_SetConfig+0x118>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00b      	beq.n	8002dac <TIM_Base_SetConfig+0x40>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a3c      	ldr	r2, [pc, #240]	; (8002e88 <TIM_Base_SetConfig+0x11c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d007      	beq.n	8002dac <TIM_Base_SetConfig+0x40>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a3b      	ldr	r2, [pc, #236]	; (8002e8c <TIM_Base_SetConfig+0x120>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d003      	beq.n	8002dac <TIM_Base_SetConfig+0x40>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a3a      	ldr	r2, [pc, #232]	; (8002e90 <TIM_Base_SetConfig+0x124>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d108      	bne.n	8002dbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a2f      	ldr	r2, [pc, #188]	; (8002e80 <TIM_Base_SetConfig+0x114>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d02b      	beq.n	8002e1e <TIM_Base_SetConfig+0xb2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dcc:	d027      	beq.n	8002e1e <TIM_Base_SetConfig+0xb2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a2c      	ldr	r2, [pc, #176]	; (8002e84 <TIM_Base_SetConfig+0x118>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d023      	beq.n	8002e1e <TIM_Base_SetConfig+0xb2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a2b      	ldr	r2, [pc, #172]	; (8002e88 <TIM_Base_SetConfig+0x11c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d01f      	beq.n	8002e1e <TIM_Base_SetConfig+0xb2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a2a      	ldr	r2, [pc, #168]	; (8002e8c <TIM_Base_SetConfig+0x120>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d01b      	beq.n	8002e1e <TIM_Base_SetConfig+0xb2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a29      	ldr	r2, [pc, #164]	; (8002e90 <TIM_Base_SetConfig+0x124>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d017      	beq.n	8002e1e <TIM_Base_SetConfig+0xb2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a28      	ldr	r2, [pc, #160]	; (8002e94 <TIM_Base_SetConfig+0x128>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d013      	beq.n	8002e1e <TIM_Base_SetConfig+0xb2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a27      	ldr	r2, [pc, #156]	; (8002e98 <TIM_Base_SetConfig+0x12c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00f      	beq.n	8002e1e <TIM_Base_SetConfig+0xb2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a26      	ldr	r2, [pc, #152]	; (8002e9c <TIM_Base_SetConfig+0x130>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00b      	beq.n	8002e1e <TIM_Base_SetConfig+0xb2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a25      	ldr	r2, [pc, #148]	; (8002ea0 <TIM_Base_SetConfig+0x134>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d007      	beq.n	8002e1e <TIM_Base_SetConfig+0xb2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a24      	ldr	r2, [pc, #144]	; (8002ea4 <TIM_Base_SetConfig+0x138>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d003      	beq.n	8002e1e <TIM_Base_SetConfig+0xb2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a23      	ldr	r2, [pc, #140]	; (8002ea8 <TIM_Base_SetConfig+0x13c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d108      	bne.n	8002e30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <TIM_Base_SetConfig+0x114>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d003      	beq.n	8002e64 <TIM_Base_SetConfig+0xf8>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a0c      	ldr	r2, [pc, #48]	; (8002e90 <TIM_Base_SetConfig+0x124>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d103      	bne.n	8002e6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	615a      	str	r2, [r3, #20]
}
 8002e72:	bf00      	nop
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40010000 	.word	0x40010000
 8002e84:	40000400 	.word	0x40000400
 8002e88:	40000800 	.word	0x40000800
 8002e8c:	40000c00 	.word	0x40000c00
 8002e90:	40010400 	.word	0x40010400
 8002e94:	40014000 	.word	0x40014000
 8002e98:	40014400 	.word	0x40014400
 8002e9c:	40014800 	.word	0x40014800
 8002ea0:	40001800 	.word	0x40001800
 8002ea4:	40001c00 	.word	0x40001c00
 8002ea8:	40002000 	.word	0x40002000

08002eac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e03f      	b.n	8002f66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fd feda 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2224      	movs	r2, #36	; 0x24
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f929 	bl	8003170 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b08a      	sub	sp, #40	; 0x28
 8002f72:	af02      	add	r7, sp, #8
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d17c      	bne.n	8003088 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_UART_Transmit+0x2c>
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e075      	b.n	800308a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_UART_Transmit+0x3e>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e06e      	b.n	800308a <HAL_UART_Transmit+0x11c>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2221      	movs	r2, #33	; 0x21
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fc2:	f7fe f803 	bl	8000fcc <HAL_GetTick>
 8002fc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	88fa      	ldrh	r2, [r7, #6]
 8002fcc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	88fa      	ldrh	r2, [r7, #6]
 8002fd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fdc:	d108      	bne.n	8002ff0 <HAL_UART_Transmit+0x82>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d104      	bne.n	8002ff0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	e003      	b.n	8002ff8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003000:	e02a      	b.n	8003058 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2200      	movs	r2, #0
 800300a:	2180      	movs	r1, #128	; 0x80
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f840 	bl	8003092 <UART_WaitOnFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e036      	b.n	800308a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10b      	bne.n	800303a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003030:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	3302      	adds	r3, #2
 8003036:	61bb      	str	r3, [r7, #24]
 8003038:	e007      	b.n	800304a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	781a      	ldrb	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	3301      	adds	r3, #1
 8003048:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1cf      	bne.n	8003002 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2200      	movs	r2, #0
 800306a:	2140      	movs	r1, #64	; 0x40
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f810 	bl	8003092 <UART_WaitOnFlagUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e006      	b.n	800308a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	e000      	b.n	800308a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003088:	2302      	movs	r3, #2
  }
}
 800308a:	4618      	mov	r0, r3
 800308c:	3720      	adds	r7, #32
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b090      	sub	sp, #64	; 0x40
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	4613      	mov	r3, r2
 80030a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a2:	e050      	b.n	8003146 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030aa:	d04c      	beq.n	8003146 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d007      	beq.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80030b2:	f7fd ff8b 	bl	8000fcc <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030be:	429a      	cmp	r2, r3
 80030c0:	d241      	bcs.n	8003146 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	330c      	adds	r3, #12
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	e853 3f00 	ldrex	r3, [r3]
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	330c      	adds	r3, #12
 80030e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030e2:	637a      	str	r2, [r7, #52]	; 0x34
 80030e4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030ea:	e841 2300 	strex	r3, r2, [r1]
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1e5      	bne.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3314      	adds	r3, #20
 80030fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	e853 3f00 	ldrex	r3, [r3]
 8003104:	613b      	str	r3, [r7, #16]
   return(result);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	63bb      	str	r3, [r7, #56]	; 0x38
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3314      	adds	r3, #20
 8003114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003116:	623a      	str	r2, [r7, #32]
 8003118:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311a:	69f9      	ldr	r1, [r7, #28]
 800311c:	6a3a      	ldr	r2, [r7, #32]
 800311e:	e841 2300 	strex	r3, r2, [r1]
 8003122:	61bb      	str	r3, [r7, #24]
   return(result);
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1e5      	bne.n	80030f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e00f      	b.n	8003166 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	4013      	ands	r3, r2
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	429a      	cmp	r2, r3
 8003154:	bf0c      	ite	eq
 8003156:	2301      	moveq	r3, #1
 8003158:	2300      	movne	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	429a      	cmp	r2, r3
 8003162:	d09f      	beq.n	80030a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3740      	adds	r7, #64	; 0x40
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003174:	b0c0      	sub	sp, #256	; 0x100
 8003176:	af00      	add	r7, sp, #0
 8003178:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318c:	68d9      	ldr	r1, [r3, #12]
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	ea40 0301 	orr.w	r3, r0, r1
 8003198:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800319a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031c8:	f021 010c 	bic.w	r1, r1, #12
 80031cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031d6:	430b      	orrs	r3, r1
 80031d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ea:	6999      	ldr	r1, [r3, #24]
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	ea40 0301 	orr.w	r3, r0, r1
 80031f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4b8f      	ldr	r3, [pc, #572]	; (800343c <UART_SetConfig+0x2cc>)
 8003200:	429a      	cmp	r2, r3
 8003202:	d005      	beq.n	8003210 <UART_SetConfig+0xa0>
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4b8d      	ldr	r3, [pc, #564]	; (8003440 <UART_SetConfig+0x2d0>)
 800320c:	429a      	cmp	r2, r3
 800320e:	d104      	bne.n	800321a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003210:	f7fe fdc4 	bl	8001d9c <HAL_RCC_GetPCLK2Freq>
 8003214:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003218:	e003      	b.n	8003222 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800321a:	f7fe fdab 	bl	8001d74 <HAL_RCC_GetPCLK1Freq>
 800321e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800322c:	f040 810c 	bne.w	8003448 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003234:	2200      	movs	r2, #0
 8003236:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800323a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800323e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003242:	4622      	mov	r2, r4
 8003244:	462b      	mov	r3, r5
 8003246:	1891      	adds	r1, r2, r2
 8003248:	65b9      	str	r1, [r7, #88]	; 0x58
 800324a:	415b      	adcs	r3, r3
 800324c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800324e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003252:	4621      	mov	r1, r4
 8003254:	eb12 0801 	adds.w	r8, r2, r1
 8003258:	4629      	mov	r1, r5
 800325a:	eb43 0901 	adc.w	r9, r3, r1
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800326a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800326e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003272:	4690      	mov	r8, r2
 8003274:	4699      	mov	r9, r3
 8003276:	4623      	mov	r3, r4
 8003278:	eb18 0303 	adds.w	r3, r8, r3
 800327c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003280:	462b      	mov	r3, r5
 8003282:	eb49 0303 	adc.w	r3, r9, r3
 8003286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800328a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003296:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800329a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800329e:	460b      	mov	r3, r1
 80032a0:	18db      	adds	r3, r3, r3
 80032a2:	653b      	str	r3, [r7, #80]	; 0x50
 80032a4:	4613      	mov	r3, r2
 80032a6:	eb42 0303 	adc.w	r3, r2, r3
 80032aa:	657b      	str	r3, [r7, #84]	; 0x54
 80032ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032b4:	f7fc ffe4 	bl	8000280 <__aeabi_uldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4b61      	ldr	r3, [pc, #388]	; (8003444 <UART_SetConfig+0x2d4>)
 80032be:	fba3 2302 	umull	r2, r3, r3, r2
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	011c      	lsls	r4, r3, #4
 80032c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80032d8:	4642      	mov	r2, r8
 80032da:	464b      	mov	r3, r9
 80032dc:	1891      	adds	r1, r2, r2
 80032de:	64b9      	str	r1, [r7, #72]	; 0x48
 80032e0:	415b      	adcs	r3, r3
 80032e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032e8:	4641      	mov	r1, r8
 80032ea:	eb12 0a01 	adds.w	sl, r2, r1
 80032ee:	4649      	mov	r1, r9
 80032f0:	eb43 0b01 	adc.w	fp, r3, r1
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003300:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003304:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003308:	4692      	mov	sl, r2
 800330a:	469b      	mov	fp, r3
 800330c:	4643      	mov	r3, r8
 800330e:	eb1a 0303 	adds.w	r3, sl, r3
 8003312:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003316:	464b      	mov	r3, r9
 8003318:	eb4b 0303 	adc.w	r3, fp, r3
 800331c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800332c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003330:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003334:	460b      	mov	r3, r1
 8003336:	18db      	adds	r3, r3, r3
 8003338:	643b      	str	r3, [r7, #64]	; 0x40
 800333a:	4613      	mov	r3, r2
 800333c:	eb42 0303 	adc.w	r3, r2, r3
 8003340:	647b      	str	r3, [r7, #68]	; 0x44
 8003342:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003346:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800334a:	f7fc ff99 	bl	8000280 <__aeabi_uldivmod>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4611      	mov	r1, r2
 8003354:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <UART_SetConfig+0x2d4>)
 8003356:	fba3 2301 	umull	r2, r3, r3, r1
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2264      	movs	r2, #100	; 0x64
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	1acb      	subs	r3, r1, r3
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800336a:	4b36      	ldr	r3, [pc, #216]	; (8003444 <UART_SetConfig+0x2d4>)
 800336c:	fba3 2302 	umull	r2, r3, r3, r2
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003378:	441c      	add	r4, r3
 800337a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800337e:	2200      	movs	r2, #0
 8003380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003384:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003388:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800338c:	4642      	mov	r2, r8
 800338e:	464b      	mov	r3, r9
 8003390:	1891      	adds	r1, r2, r2
 8003392:	63b9      	str	r1, [r7, #56]	; 0x38
 8003394:	415b      	adcs	r3, r3
 8003396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003398:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800339c:	4641      	mov	r1, r8
 800339e:	1851      	adds	r1, r2, r1
 80033a0:	6339      	str	r1, [r7, #48]	; 0x30
 80033a2:	4649      	mov	r1, r9
 80033a4:	414b      	adcs	r3, r1
 80033a6:	637b      	str	r3, [r7, #52]	; 0x34
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033b4:	4659      	mov	r1, fp
 80033b6:	00cb      	lsls	r3, r1, #3
 80033b8:	4651      	mov	r1, sl
 80033ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033be:	4651      	mov	r1, sl
 80033c0:	00ca      	lsls	r2, r1, #3
 80033c2:	4610      	mov	r0, r2
 80033c4:	4619      	mov	r1, r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	4642      	mov	r2, r8
 80033ca:	189b      	adds	r3, r3, r2
 80033cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033d0:	464b      	mov	r3, r9
 80033d2:	460a      	mov	r2, r1
 80033d4:	eb42 0303 	adc.w	r3, r2, r3
 80033d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033f0:	460b      	mov	r3, r1
 80033f2:	18db      	adds	r3, r3, r3
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033f6:	4613      	mov	r3, r2
 80033f8:	eb42 0303 	adc.w	r3, r2, r3
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003402:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003406:	f7fc ff3b 	bl	8000280 <__aeabi_uldivmod>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <UART_SetConfig+0x2d4>)
 8003410:	fba3 1302 	umull	r1, r3, r3, r2
 8003414:	095b      	lsrs	r3, r3, #5
 8003416:	2164      	movs	r1, #100	; 0x64
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	3332      	adds	r3, #50	; 0x32
 8003422:	4a08      	ldr	r2, [pc, #32]	; (8003444 <UART_SetConfig+0x2d4>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	f003 0207 	and.w	r2, r3, #7
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4422      	add	r2, r4
 8003436:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003438:	e105      	b.n	8003646 <UART_SetConfig+0x4d6>
 800343a:	bf00      	nop
 800343c:	40011000 	.word	0x40011000
 8003440:	40011400 	.word	0x40011400
 8003444:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800344c:	2200      	movs	r2, #0
 800344e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003452:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003456:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800345a:	4642      	mov	r2, r8
 800345c:	464b      	mov	r3, r9
 800345e:	1891      	adds	r1, r2, r2
 8003460:	6239      	str	r1, [r7, #32]
 8003462:	415b      	adcs	r3, r3
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
 8003466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800346a:	4641      	mov	r1, r8
 800346c:	1854      	adds	r4, r2, r1
 800346e:	4649      	mov	r1, r9
 8003470:	eb43 0501 	adc.w	r5, r3, r1
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	00eb      	lsls	r3, r5, #3
 800347e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003482:	00e2      	lsls	r2, r4, #3
 8003484:	4614      	mov	r4, r2
 8003486:	461d      	mov	r5, r3
 8003488:	4643      	mov	r3, r8
 800348a:	18e3      	adds	r3, r4, r3
 800348c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003490:	464b      	mov	r3, r9
 8003492:	eb45 0303 	adc.w	r3, r5, r3
 8003496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800349a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034b6:	4629      	mov	r1, r5
 80034b8:	008b      	lsls	r3, r1, #2
 80034ba:	4621      	mov	r1, r4
 80034bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034c0:	4621      	mov	r1, r4
 80034c2:	008a      	lsls	r2, r1, #2
 80034c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034c8:	f7fc feda 	bl	8000280 <__aeabi_uldivmod>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4b60      	ldr	r3, [pc, #384]	; (8003654 <UART_SetConfig+0x4e4>)
 80034d2:	fba3 2302 	umull	r2, r3, r3, r2
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	011c      	lsls	r4, r3, #4
 80034da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034de:	2200      	movs	r2, #0
 80034e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034ec:	4642      	mov	r2, r8
 80034ee:	464b      	mov	r3, r9
 80034f0:	1891      	adds	r1, r2, r2
 80034f2:	61b9      	str	r1, [r7, #24]
 80034f4:	415b      	adcs	r3, r3
 80034f6:	61fb      	str	r3, [r7, #28]
 80034f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034fc:	4641      	mov	r1, r8
 80034fe:	1851      	adds	r1, r2, r1
 8003500:	6139      	str	r1, [r7, #16]
 8003502:	4649      	mov	r1, r9
 8003504:	414b      	adcs	r3, r1
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003514:	4659      	mov	r1, fp
 8003516:	00cb      	lsls	r3, r1, #3
 8003518:	4651      	mov	r1, sl
 800351a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800351e:	4651      	mov	r1, sl
 8003520:	00ca      	lsls	r2, r1, #3
 8003522:	4610      	mov	r0, r2
 8003524:	4619      	mov	r1, r3
 8003526:	4603      	mov	r3, r0
 8003528:	4642      	mov	r2, r8
 800352a:	189b      	adds	r3, r3, r2
 800352c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003530:	464b      	mov	r3, r9
 8003532:	460a      	mov	r2, r1
 8003534:	eb42 0303 	adc.w	r3, r2, r3
 8003538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	67bb      	str	r3, [r7, #120]	; 0x78
 8003546:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003554:	4649      	mov	r1, r9
 8003556:	008b      	lsls	r3, r1, #2
 8003558:	4641      	mov	r1, r8
 800355a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800355e:	4641      	mov	r1, r8
 8003560:	008a      	lsls	r2, r1, #2
 8003562:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003566:	f7fc fe8b 	bl	8000280 <__aeabi_uldivmod>
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	4b39      	ldr	r3, [pc, #228]	; (8003654 <UART_SetConfig+0x4e4>)
 8003570:	fba3 1302 	umull	r1, r3, r3, r2
 8003574:	095b      	lsrs	r3, r3, #5
 8003576:	2164      	movs	r1, #100	; 0x64
 8003578:	fb01 f303 	mul.w	r3, r1, r3
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	3332      	adds	r3, #50	; 0x32
 8003582:	4a34      	ldr	r2, [pc, #208]	; (8003654 <UART_SetConfig+0x4e4>)
 8003584:	fba2 2303 	umull	r2, r3, r2, r3
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800358e:	441c      	add	r4, r3
 8003590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003594:	2200      	movs	r2, #0
 8003596:	673b      	str	r3, [r7, #112]	; 0x70
 8003598:	677a      	str	r2, [r7, #116]	; 0x74
 800359a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800359e:	4642      	mov	r2, r8
 80035a0:	464b      	mov	r3, r9
 80035a2:	1891      	adds	r1, r2, r2
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	415b      	adcs	r3, r3
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035ae:	4641      	mov	r1, r8
 80035b0:	1851      	adds	r1, r2, r1
 80035b2:	6039      	str	r1, [r7, #0]
 80035b4:	4649      	mov	r1, r9
 80035b6:	414b      	adcs	r3, r1
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035c6:	4659      	mov	r1, fp
 80035c8:	00cb      	lsls	r3, r1, #3
 80035ca:	4651      	mov	r1, sl
 80035cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035d0:	4651      	mov	r1, sl
 80035d2:	00ca      	lsls	r2, r1, #3
 80035d4:	4610      	mov	r0, r2
 80035d6:	4619      	mov	r1, r3
 80035d8:	4603      	mov	r3, r0
 80035da:	4642      	mov	r2, r8
 80035dc:	189b      	adds	r3, r3, r2
 80035de:	66bb      	str	r3, [r7, #104]	; 0x68
 80035e0:	464b      	mov	r3, r9
 80035e2:	460a      	mov	r2, r1
 80035e4:	eb42 0303 	adc.w	r3, r2, r3
 80035e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	663b      	str	r3, [r7, #96]	; 0x60
 80035f4:	667a      	str	r2, [r7, #100]	; 0x64
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003602:	4649      	mov	r1, r9
 8003604:	008b      	lsls	r3, r1, #2
 8003606:	4641      	mov	r1, r8
 8003608:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800360c:	4641      	mov	r1, r8
 800360e:	008a      	lsls	r2, r1, #2
 8003610:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003614:	f7fc fe34 	bl	8000280 <__aeabi_uldivmod>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <UART_SetConfig+0x4e4>)
 800361e:	fba3 1302 	umull	r1, r3, r3, r2
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	2164      	movs	r1, #100	; 0x64
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	3332      	adds	r3, #50	; 0x32
 8003630:	4a08      	ldr	r2, [pc, #32]	; (8003654 <UART_SetConfig+0x4e4>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	f003 020f 	and.w	r2, r3, #15
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4422      	add	r2, r4
 8003644:	609a      	str	r2, [r3, #8]
}
 8003646:	bf00      	nop
 8003648:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800364c:	46bd      	mov	sp, r7
 800364e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003652:	bf00      	nop
 8003654:	51eb851f 	.word	0x51eb851f

08003658 <__NVIC_SetPriority>:
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	6039      	str	r1, [r7, #0]
 8003662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003668:	2b00      	cmp	r3, #0
 800366a:	db0a      	blt.n	8003682 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	b2da      	uxtb	r2, r3
 8003670:	490c      	ldr	r1, [pc, #48]	; (80036a4 <__NVIC_SetPriority+0x4c>)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	0112      	lsls	r2, r2, #4
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	440b      	add	r3, r1
 800367c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003680:	e00a      	b.n	8003698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	4908      	ldr	r1, [pc, #32]	; (80036a8 <__NVIC_SetPriority+0x50>)
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	3b04      	subs	r3, #4
 8003690:	0112      	lsls	r2, r2, #4
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	440b      	add	r3, r1
 8003696:	761a      	strb	r2, [r3, #24]
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	e000e100 	.word	0xe000e100
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <SysTick_Handler+0x1c>)
 80036b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80036b4:	f001 fee8 	bl	8005488 <xTaskGetSchedulerState>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d001      	beq.n	80036c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80036be:	f002 fcd3 	bl	8006068 <xPortSysTickHandler>
  }
}
 80036c2:	bf00      	nop
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	e000e010 	.word	0xe000e010

080036cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80036d0:	2100      	movs	r1, #0
 80036d2:	f06f 0004 	mvn.w	r0, #4
 80036d6:	f7ff ffbf 	bl	8003658 <__NVIC_SetPriority>
#endif
}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036e6:	f3ef 8305 	mrs	r3, IPSR
 80036ea:	603b      	str	r3, [r7, #0]
  return(result);
 80036ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80036f2:	f06f 0305 	mvn.w	r3, #5
 80036f6:	607b      	str	r3, [r7, #4]
 80036f8:	e00c      	b.n	8003714 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80036fa:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <osKernelInitialize+0x44>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d105      	bne.n	800370e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003702:	4b08      	ldr	r3, [pc, #32]	; (8003724 <osKernelInitialize+0x44>)
 8003704:	2201      	movs	r2, #1
 8003706:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003708:	2300      	movs	r3, #0
 800370a:	607b      	str	r3, [r7, #4]
 800370c:	e002      	b.n	8003714 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800370e:	f04f 33ff 	mov.w	r3, #4294967295
 8003712:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003714:	687b      	ldr	r3, [r7, #4]
}
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	200006d4 	.word	0x200006d4

08003728 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800372e:	f3ef 8305 	mrs	r3, IPSR
 8003732:	603b      	str	r3, [r7, #0]
  return(result);
 8003734:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <osKernelStart+0x1a>
    stat = osErrorISR;
 800373a:	f06f 0305 	mvn.w	r3, #5
 800373e:	607b      	str	r3, [r7, #4]
 8003740:	e010      	b.n	8003764 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <osKernelStart+0x48>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d109      	bne.n	800375e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800374a:	f7ff ffbf 	bl	80036cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <osKernelStart+0x48>)
 8003750:	2202      	movs	r2, #2
 8003752:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003754:	f001 fa50 	bl	8004bf8 <vTaskStartScheduler>
      stat = osOK;
 8003758:	2300      	movs	r3, #0
 800375a:	607b      	str	r3, [r7, #4]
 800375c:	e002      	b.n	8003764 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800375e:	f04f 33ff 	mov.w	r3, #4294967295
 8003762:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003764:	687b      	ldr	r3, [r7, #4]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	200006d4 	.word	0x200006d4

08003774 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003774:	b580      	push	{r7, lr}
 8003776:	b08e      	sub	sp, #56	; 0x38
 8003778:	af04      	add	r7, sp, #16
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003780:	2300      	movs	r3, #0
 8003782:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003784:	f3ef 8305 	mrs	r3, IPSR
 8003788:	617b      	str	r3, [r7, #20]
  return(result);
 800378a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800378c:	2b00      	cmp	r3, #0
 800378e:	d17e      	bne.n	800388e <osThreadNew+0x11a>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d07b      	beq.n	800388e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003796:	2380      	movs	r3, #128	; 0x80
 8003798:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800379a:	2318      	movs	r3, #24
 800379c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80037a2:	f04f 33ff 	mov.w	r3, #4294967295
 80037a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d045      	beq.n	800383a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <osThreadNew+0x48>
        name = attr->name;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <osThreadNew+0x6e>
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2b38      	cmp	r3, #56	; 0x38
 80037d4:	d805      	bhi.n	80037e2 <osThreadNew+0x6e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <osThreadNew+0x72>
        return (NULL);
 80037e2:	2300      	movs	r3, #0
 80037e4:	e054      	b.n	8003890 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	089b      	lsrs	r3, r3, #2
 80037f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00e      	beq.n	800381c <osThreadNew+0xa8>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2b5b      	cmp	r3, #91	; 0x5b
 8003804:	d90a      	bls.n	800381c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800380a:	2b00      	cmp	r3, #0
 800380c:	d006      	beq.n	800381c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <osThreadNew+0xa8>
        mem = 1;
 8003816:	2301      	movs	r3, #1
 8003818:	61bb      	str	r3, [r7, #24]
 800381a:	e010      	b.n	800383e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10c      	bne.n	800383e <osThreadNew+0xca>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d108      	bne.n	800383e <osThreadNew+0xca>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d104      	bne.n	800383e <osThreadNew+0xca>
          mem = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	e001      	b.n	800383e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800383a:	2300      	movs	r3, #0
 800383c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d110      	bne.n	8003866 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800384c:	9202      	str	r2, [sp, #8]
 800384e:	9301      	str	r3, [sp, #4]
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	6a3a      	ldr	r2, [r7, #32]
 8003858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 fff6 	bl	800484c <xTaskCreateStatic>
 8003860:	4603      	mov	r3, r0
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	e013      	b.n	800388e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d110      	bne.n	800388e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	b29a      	uxth	r2, r3
 8003870:	f107 0310 	add.w	r3, r7, #16
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f001 f841 	bl	8004906 <xTaskCreate>
 8003884:	4603      	mov	r3, r0
 8003886:	2b01      	cmp	r3, #1
 8003888:	d001      	beq.n	800388e <osThreadNew+0x11a>
            hTask = NULL;
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800388e:	693b      	ldr	r3, [r7, #16]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3728      	adds	r7, #40	; 0x28
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038a0:	f3ef 8305 	mrs	r3, IPSR
 80038a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80038a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <osDelay+0x1c>
    stat = osErrorISR;
 80038ac:	f06f 0305 	mvn.w	r3, #5
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	e007      	b.n	80038c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f001 f966 	bl	8004b90 <vTaskDelay>
    }
  }

  return (stat);
 80038c4:	68fb      	ldr	r3, [r7, #12]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b08a      	sub	sp, #40	; 0x28
 80038d2:	af02      	add	r7, sp, #8
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038de:	f3ef 8305 	mrs	r3, IPSR
 80038e2:	613b      	str	r3, [r7, #16]
  return(result);
 80038e4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d15f      	bne.n	80039aa <osMessageQueueNew+0xdc>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d05c      	beq.n	80039aa <osMessageQueueNew+0xdc>
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d059      	beq.n	80039aa <osMessageQueueNew+0xdc>
    mem = -1;
 80038f6:	f04f 33ff 	mov.w	r3, #4294967295
 80038fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d029      	beq.n	8003956 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d012      	beq.n	8003930 <osMessageQueueNew+0x62>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b4f      	cmp	r3, #79	; 0x4f
 8003910:	d90e      	bls.n	8003930 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	429a      	cmp	r2, r3
 8003928:	d302      	bcc.n	8003930 <osMessageQueueNew+0x62>
        mem = 1;
 800392a:	2301      	movs	r3, #1
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	e014      	b.n	800395a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d110      	bne.n	800395a <osMessageQueueNew+0x8c>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10c      	bne.n	800395a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003944:	2b00      	cmp	r3, #0
 8003946:	d108      	bne.n	800395a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d104      	bne.n	800395a <osMessageQueueNew+0x8c>
          mem = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	61bb      	str	r3, [r7, #24]
 8003954:	e001      	b.n	800395a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003956:	2300      	movs	r3, #0
 8003958:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d10b      	bne.n	8003978 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2100      	movs	r1, #0
 800396a:	9100      	str	r1, [sp, #0]
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fa2e 	bl	8003dd0 <xQueueGenericCreateStatic>
 8003974:	61f8      	str	r0, [r7, #28]
 8003976:	e008      	b.n	800398a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d105      	bne.n	800398a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800397e:	2200      	movs	r2, #0
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fa9c 	bl	8003ec0 <xQueueGenericCreate>
 8003988:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00c      	beq.n	80039aa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <osMessageQueueNew+0xd0>
        name = attr->name;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	e001      	b.n	80039a2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80039a2:	6979      	ldr	r1, [r7, #20]
 80039a4:	69f8      	ldr	r0, [r7, #28]
 80039a6:	f000 fef3 	bl	8004790 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80039aa:	69fb      	ldr	r3, [r7, #28]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3720      	adds	r7, #32
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	4613      	mov	r3, r2
 80039c2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039cc:	f3ef 8305 	mrs	r3, IPSR
 80039d0:	617b      	str	r3, [r7, #20]
  return(result);
 80039d2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d028      	beq.n	8003a2a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d005      	beq.n	80039ea <osMessageQueuePut+0x36>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <osMessageQueuePut+0x36>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80039ea:	f06f 0303 	mvn.w	r3, #3
 80039ee:	61fb      	str	r3, [r7, #28]
 80039f0:	e038      	b.n	8003a64 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80039f2:	2300      	movs	r3, #0
 80039f4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80039f6:	f107 0210 	add.w	r2, r7, #16
 80039fa:	2300      	movs	r3, #0
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	69b8      	ldr	r0, [r7, #24]
 8003a00:	f000 fbba 	bl	8004178 <xQueueGenericSendFromISR>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d003      	beq.n	8003a12 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003a0a:	f06f 0302 	mvn.w	r3, #2
 8003a0e:	61fb      	str	r3, [r7, #28]
 8003a10:	e028      	b.n	8003a64 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d025      	beq.n	8003a64 <osMessageQueuePut+0xb0>
 8003a18:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <osMessageQueuePut+0xbc>)
 8003a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	e01c      	b.n	8003a64 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <osMessageQueuePut+0x82>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d103      	bne.n	8003a3e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003a36:	f06f 0303 	mvn.w	r3, #3
 8003a3a:	61fb      	str	r3, [r7, #28]
 8003a3c:	e012      	b.n	8003a64 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003a3e:	2300      	movs	r3, #0
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	69b8      	ldr	r0, [r7, #24]
 8003a46:	f000 fa99 	bl	8003f7c <xQueueGenericSend>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d009      	beq.n	8003a64 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003a56:	f06f 0301 	mvn.w	r3, #1
 8003a5a:	61fb      	str	r3, [r7, #28]
 8003a5c:	e002      	b.n	8003a64 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003a5e:	f06f 0302 	mvn.w	r3, #2
 8003a62:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003a64:	69fb      	ldr	r3, [r7, #28]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3720      	adds	r7, #32
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	e000ed04 	.word	0xe000ed04

08003a74 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a8a:	f3ef 8305 	mrs	r3, IPSR
 8003a8e:	617b      	str	r3, [r7, #20]
  return(result);
 8003a90:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d028      	beq.n	8003ae8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <osMessageQueueGet+0x34>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <osMessageQueueGet+0x34>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003aa8:	f06f 0303 	mvn.w	r3, #3
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	e037      	b.n	8003b20 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003ab4:	f107 0310 	add.w	r3, r7, #16
 8003ab8:	461a      	mov	r2, r3
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	69b8      	ldr	r0, [r7, #24]
 8003abe:	f000 fcd7 	bl	8004470 <xQueueReceiveFromISR>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d003      	beq.n	8003ad0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003ac8:	f06f 0302 	mvn.w	r3, #2
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	e027      	b.n	8003b20 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d024      	beq.n	8003b20 <osMessageQueueGet+0xac>
 8003ad6:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <osMessageQueueGet+0xb8>)
 8003ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	e01b      	b.n	8003b20 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <osMessageQueueGet+0x80>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d103      	bne.n	8003afc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003af4:	f06f 0303 	mvn.w	r3, #3
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	e011      	b.n	8003b20 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	69b8      	ldr	r0, [r7, #24]
 8003b02:	f000 fbd5 	bl	80042b0 <xQueueReceive>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d009      	beq.n	8003b20 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003b12:	f06f 0301 	mvn.w	r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	e002      	b.n	8003b20 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003b1a:	f06f 0302 	mvn.w	r3, #2
 8003b1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003b20:	69fb      	ldr	r3, [r7, #28]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	e000ed04 	.word	0xe000ed04

08003b30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4a07      	ldr	r2, [pc, #28]	; (8003b5c <vApplicationGetIdleTaskMemory+0x2c>)
 8003b40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	4a06      	ldr	r2, [pc, #24]	; (8003b60 <vApplicationGetIdleTaskMemory+0x30>)
 8003b46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2280      	movs	r2, #128	; 0x80
 8003b4c:	601a      	str	r2, [r3, #0]
}
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	200006d8 	.word	0x200006d8
 8003b60:	20000734 	.word	0x20000734

08003b64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4a07      	ldr	r2, [pc, #28]	; (8003b90 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	4a06      	ldr	r2, [pc, #24]	; (8003b94 <vApplicationGetTimerTaskMemory+0x30>)
 8003b7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b82:	601a      	str	r2, [r3, #0]
}
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	20000934 	.word	0x20000934
 8003b94:	20000990 	.word	0x20000990

08003b98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f103 0208 	add.w	r2, r3, #8
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f103 0208 	add.w	r2, r3, #8
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f103 0208 	add.w	r2, r3, #8
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	601a      	str	r2, [r3, #0]
}
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d103      	bne.n	8003c5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	e00c      	b.n	8003c74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	e002      	b.n	8003c68 <vListInsert+0x2e>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d2f6      	bcs.n	8003c62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	601a      	str	r2, [r3, #0]
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6892      	ldr	r2, [r2, #8]
 8003cc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6852      	ldr	r2, [r2, #4]
 8003ccc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d103      	bne.n	8003ce0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	1e5a      	subs	r2, r3, #1
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10a      	bne.n	8003d2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d26:	bf00      	nop
 8003d28:	e7fe      	b.n	8003d28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d2a:	f002 f90b 	bl	8005f44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d36:	68f9      	ldr	r1, [r7, #12]
 8003d38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d3a:	fb01 f303 	mul.w	r3, r1, r3
 8003d3e:	441a      	add	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	68f9      	ldr	r1, [r7, #12]
 8003d5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	441a      	add	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	22ff      	movs	r2, #255	; 0xff
 8003d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	22ff      	movs	r2, #255	; 0xff
 8003d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d114      	bne.n	8003daa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01a      	beq.n	8003dbe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3310      	adds	r3, #16
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f001 f9bd 	bl	800510c <xTaskRemoveFromEventList>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d012      	beq.n	8003dbe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <xQueueGenericReset+0xcc>)
 8003d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	e009      	b.n	8003dbe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3310      	adds	r3, #16
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fef2 	bl	8003b98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3324      	adds	r3, #36	; 0x24
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff feed 	bl	8003b98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003dbe:	f002 f8f1 	bl	8005fa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003dc2:	2301      	movs	r3, #1
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	e000ed04 	.word	0xe000ed04

08003dd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08e      	sub	sp, #56	; 0x38
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10a      	bne.n	8003dfa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003df6:	bf00      	nop
 8003df8:	e7fe      	b.n	8003df8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10a      	bne.n	8003e16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e12:	bf00      	nop
 8003e14:	e7fe      	b.n	8003e14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <xQueueGenericCreateStatic+0x52>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <xQueueGenericCreateStatic+0x56>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <xQueueGenericCreateStatic+0x58>
 8003e26:	2300      	movs	r3, #0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	623b      	str	r3, [r7, #32]
}
 8003e3e:	bf00      	nop
 8003e40:	e7fe      	b.n	8003e40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d102      	bne.n	8003e4e <xQueueGenericCreateStatic+0x7e>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <xQueueGenericCreateStatic+0x82>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <xQueueGenericCreateStatic+0x84>
 8003e52:	2300      	movs	r3, #0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10a      	bne.n	8003e6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	61fb      	str	r3, [r7, #28]
}
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e6e:	2350      	movs	r3, #80	; 0x50
 8003e70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b50      	cmp	r3, #80	; 0x50
 8003e76:	d00a      	beq.n	8003e8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	61bb      	str	r3, [r7, #24]
}
 8003e8a:	bf00      	nop
 8003e8c:	e7fe      	b.n	8003e8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ea2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	68b9      	ldr	r1, [r7, #8]
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f83f 	bl	8003f34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3730      	adds	r7, #48	; 0x30
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08a      	sub	sp, #40	; 0x28
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <xQueueGenericCreate+0x2a>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	613b      	str	r3, [r7, #16]
}
 8003ee6:	bf00      	nop
 8003ee8:	e7fe      	b.n	8003ee8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	fb02 f303 	mul.w	r3, r2, r3
 8003ef2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	3350      	adds	r3, #80	; 0x50
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f002 f945 	bl	8006188 <pvPortMalloc>
 8003efe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d011      	beq.n	8003f2a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	3350      	adds	r3, #80	; 0x50
 8003f0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f18:	79fa      	ldrb	r2, [r7, #7]
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 f805 	bl	8003f34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f2a:	69bb      	ldr	r3, [r7, #24]
	}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3720      	adds	r7, #32
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d103      	bne.n	8003f50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e002      	b.n	8003f56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f62:	2101      	movs	r1, #1
 8003f64:	69b8      	ldr	r0, [r7, #24]
 8003f66:	f7ff fecb 	bl	8003d00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	78fa      	ldrb	r2, [r7, #3]
 8003f6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08e      	sub	sp, #56	; 0x38
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <xQueueGenericSend+0x32>
	__asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003faa:	bf00      	nop
 8003fac:	e7fe      	b.n	8003fac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d103      	bne.n	8003fbc <xQueueGenericSend+0x40>
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <xQueueGenericSend+0x44>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <xQueueGenericSend+0x46>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10a      	bne.n	8003fdc <xQueueGenericSend+0x60>
	__asm volatile
 8003fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fd8:	bf00      	nop
 8003fda:	e7fe      	b.n	8003fda <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d103      	bne.n	8003fea <xQueueGenericSend+0x6e>
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <xQueueGenericSend+0x72>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <xQueueGenericSend+0x74>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <xQueueGenericSend+0x8e>
	__asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	623b      	str	r3, [r7, #32]
}
 8004006:	bf00      	nop
 8004008:	e7fe      	b.n	8004008 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800400a:	f001 fa3d 	bl	8005488 <xTaskGetSchedulerState>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d102      	bne.n	800401a <xQueueGenericSend+0x9e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <xQueueGenericSend+0xa2>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <xQueueGenericSend+0xa4>
 800401e:	2300      	movs	r3, #0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <xQueueGenericSend+0xbe>
	__asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	61fb      	str	r3, [r7, #28]
}
 8004036:	bf00      	nop
 8004038:	e7fe      	b.n	8004038 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800403a:	f001 ff83 	bl	8005f44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004046:	429a      	cmp	r2, r3
 8004048:	d302      	bcc.n	8004050 <xQueueGenericSend+0xd4>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d129      	bne.n	80040a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	68b9      	ldr	r1, [r7, #8]
 8004054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004056:	f000 fa8b 	bl	8004570 <prvCopyDataToQueue>
 800405a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	2b00      	cmp	r3, #0
 8004062:	d010      	beq.n	8004086 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004066:	3324      	adds	r3, #36	; 0x24
 8004068:	4618      	mov	r0, r3
 800406a:	f001 f84f 	bl	800510c <xTaskRemoveFromEventList>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d013      	beq.n	800409c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004074:	4b3f      	ldr	r3, [pc, #252]	; (8004174 <xQueueGenericSend+0x1f8>)
 8004076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	e00a      	b.n	800409c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800408c:	4b39      	ldr	r3, [pc, #228]	; (8004174 <xQueueGenericSend+0x1f8>)
 800408e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800409c:	f001 ff82 	bl	8005fa4 <vPortExitCritical>
				return pdPASS;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e063      	b.n	800416c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d103      	bne.n	80040b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040aa:	f001 ff7b 	bl	8005fa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	e05c      	b.n	800416c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d106      	bne.n	80040c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040b8:	f107 0314 	add.w	r3, r7, #20
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 f889 	bl	80051d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040c2:	2301      	movs	r3, #1
 80040c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040c6:	f001 ff6d 	bl	8005fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040ca:	f000 fdfb 	bl	8004cc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040ce:	f001 ff39 	bl	8005f44 <vPortEnterCritical>
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040d8:	b25b      	sxtb	r3, r3
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040de:	d103      	bne.n	80040e8 <xQueueGenericSend+0x16c>
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ee:	b25b      	sxtb	r3, r3
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d103      	bne.n	80040fe <xQueueGenericSend+0x182>
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040fe:	f001 ff51 	bl	8005fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004102:	1d3a      	adds	r2, r7, #4
 8004104:	f107 0314 	add.w	r3, r7, #20
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f001 f878 	bl	8005200 <xTaskCheckForTimeOut>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d124      	bne.n	8004160 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004116:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004118:	f000 fb22 	bl	8004760 <prvIsQueueFull>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d018      	beq.n	8004154 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004124:	3310      	adds	r3, #16
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	4611      	mov	r1, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f000 ff9e 	bl	800506c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004132:	f000 faad 	bl	8004690 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004136:	f000 fdd3 	bl	8004ce0 <xTaskResumeAll>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	f47f af7c 	bne.w	800403a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004142:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <xQueueGenericSend+0x1f8>)
 8004144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	e772      	b.n	800403a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004156:	f000 fa9b 	bl	8004690 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800415a:	f000 fdc1 	bl	8004ce0 <xTaskResumeAll>
 800415e:	e76c      	b.n	800403a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004162:	f000 fa95 	bl	8004690 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004166:	f000 fdbb 	bl	8004ce0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800416a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800416c:	4618      	mov	r0, r3
 800416e:	3738      	adds	r7, #56	; 0x38
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	e000ed04 	.word	0xe000ed04

08004178 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b090      	sub	sp, #64	; 0x40
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800418a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d103      	bne.n	80041b4 <xQueueGenericSendFromISR+0x3c>
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <xQueueGenericSendFromISR+0x40>
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <xQueueGenericSendFromISR+0x42>
 80041b8:	2300      	movs	r3, #0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10a      	bne.n	80041d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041d0:	bf00      	nop
 80041d2:	e7fe      	b.n	80041d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d103      	bne.n	80041e2 <xQueueGenericSendFromISR+0x6a>
 80041da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <xQueueGenericSendFromISR+0x6e>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <xQueueGenericSendFromISR+0x70>
 80041e6:	2300      	movs	r3, #0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10a      	bne.n	8004202 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	623b      	str	r3, [r7, #32]
}
 80041fe:	bf00      	nop
 8004200:	e7fe      	b.n	8004200 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004202:	f001 ff81 	bl	8006108 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004206:	f3ef 8211 	mrs	r2, BASEPRI
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	61fa      	str	r2, [r7, #28]
 800421c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800421e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004220:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422a:	429a      	cmp	r2, r3
 800422c:	d302      	bcc.n	8004234 <xQueueGenericSendFromISR+0xbc>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b02      	cmp	r3, #2
 8004232:	d12f      	bne.n	8004294 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800423a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800423e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	68b9      	ldr	r1, [r7, #8]
 8004248:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800424a:	f000 f991 	bl	8004570 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800424e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d112      	bne.n	800427e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	2b00      	cmp	r3, #0
 800425e:	d016      	beq.n	800428e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004262:	3324      	adds	r3, #36	; 0x24
 8004264:	4618      	mov	r0, r3
 8004266:	f000 ff51 	bl	800510c <xTaskRemoveFromEventList>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00e      	beq.n	800428e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00b      	beq.n	800428e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	e007      	b.n	800428e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800427e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004282:	3301      	adds	r3, #1
 8004284:	b2db      	uxtb	r3, r3
 8004286:	b25a      	sxtb	r2, r3
 8004288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800428e:	2301      	movs	r3, #1
 8004290:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004292:	e001      	b.n	8004298 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004294:	2300      	movs	r3, #0
 8004296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3740      	adds	r7, #64	; 0x40
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08c      	sub	sp, #48	; 0x30
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80042bc:	2300      	movs	r3, #0
 80042be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10a      	bne.n	80042e0 <xQueueReceive+0x30>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	623b      	str	r3, [r7, #32]
}
 80042dc:	bf00      	nop
 80042de:	e7fe      	b.n	80042de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <xQueueReceive+0x3e>
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <xQueueReceive+0x42>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <xQueueReceive+0x44>
 80042f2:	2300      	movs	r3, #0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <xQueueReceive+0x5e>
	__asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	61fb      	str	r3, [r7, #28]
}
 800430a:	bf00      	nop
 800430c:	e7fe      	b.n	800430c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800430e:	f001 f8bb 	bl	8005488 <xTaskGetSchedulerState>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d102      	bne.n	800431e <xQueueReceive+0x6e>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <xQueueReceive+0x72>
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <xQueueReceive+0x74>
 8004322:	2300      	movs	r3, #0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <xQueueReceive+0x8e>
	__asm volatile
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	61bb      	str	r3, [r7, #24]
}
 800433a:	bf00      	nop
 800433c:	e7fe      	b.n	800433c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800433e:	f001 fe01 	bl	8005f44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	2b00      	cmp	r3, #0
 800434c:	d01f      	beq.n	800438e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004352:	f000 f977 	bl	8004644 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	1e5a      	subs	r2, r3, #1
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00f      	beq.n	8004386 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004368:	3310      	adds	r3, #16
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fece 	bl	800510c <xTaskRemoveFromEventList>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004376:	4b3d      	ldr	r3, [pc, #244]	; (800446c <xQueueReceive+0x1bc>)
 8004378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004386:	f001 fe0d 	bl	8005fa4 <vPortExitCritical>
				return pdPASS;
 800438a:	2301      	movs	r3, #1
 800438c:	e069      	b.n	8004462 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d103      	bne.n	800439c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004394:	f001 fe06 	bl	8005fa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004398:	2300      	movs	r3, #0
 800439a:	e062      	b.n	8004462 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800439c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043a2:	f107 0310 	add.w	r3, r7, #16
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 ff14 	bl	80051d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043ac:	2301      	movs	r3, #1
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043b0:	f001 fdf8 	bl	8005fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043b4:	f000 fc86 	bl	8004cc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043b8:	f001 fdc4 	bl	8005f44 <vPortEnterCritical>
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043c2:	b25b      	sxtb	r3, r3
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c8:	d103      	bne.n	80043d2 <xQueueReceive+0x122>
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043d8:	b25b      	sxtb	r3, r3
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	d103      	bne.n	80043e8 <xQueueReceive+0x138>
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043e8:	f001 fddc 	bl	8005fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043ec:	1d3a      	adds	r2, r7, #4
 80043ee:	f107 0310 	add.w	r3, r7, #16
 80043f2:	4611      	mov	r1, r2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 ff03 	bl	8005200 <xTaskCheckForTimeOut>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d123      	bne.n	8004448 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004402:	f000 f997 	bl	8004734 <prvIsQueueEmpty>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d017      	beq.n	800443c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800440c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440e:	3324      	adds	r3, #36	; 0x24
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	4611      	mov	r1, r2
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fe29 	bl	800506c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800441a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800441c:	f000 f938 	bl	8004690 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004420:	f000 fc5e 	bl	8004ce0 <xTaskResumeAll>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d189      	bne.n	800433e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800442a:	4b10      	ldr	r3, [pc, #64]	; (800446c <xQueueReceive+0x1bc>)
 800442c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	e780      	b.n	800433e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800443c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800443e:	f000 f927 	bl	8004690 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004442:	f000 fc4d 	bl	8004ce0 <xTaskResumeAll>
 8004446:	e77a      	b.n	800433e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800444a:	f000 f921 	bl	8004690 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800444e:	f000 fc47 	bl	8004ce0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004454:	f000 f96e 	bl	8004734 <prvIsQueueEmpty>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	f43f af6f 	beq.w	800433e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004460:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004462:	4618      	mov	r0, r3
 8004464:	3730      	adds	r7, #48	; 0x30
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	e000ed04 	.word	0xe000ed04

08004470 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08e      	sub	sp, #56	; 0x38
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10a      	bne.n	800449c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	623b      	str	r3, [r7, #32]
}
 8004498:	bf00      	nop
 800449a:	e7fe      	b.n	800449a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d103      	bne.n	80044aa <xQueueReceiveFromISR+0x3a>
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <xQueueReceiveFromISR+0x3e>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <xQueueReceiveFromISR+0x40>
 80044ae:	2300      	movs	r3, #0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	61fb      	str	r3, [r7, #28]
}
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044ca:	f001 fe1d 	bl	8006108 <vPortValidateInterruptPriority>
	__asm volatile
 80044ce:	f3ef 8211 	mrs	r2, BASEPRI
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	61ba      	str	r2, [r7, #24]
 80044e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80044e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d02f      	beq.n	8004556 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004500:	68b9      	ldr	r1, [r7, #8]
 8004502:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004504:	f000 f89e 	bl	8004644 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	1e5a      	subs	r2, r3, #1
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004510:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d112      	bne.n	8004540 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d016      	beq.n	8004550 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	3310      	adds	r3, #16
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fdf0 	bl	800510c <xTaskRemoveFromEventList>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00e      	beq.n	8004550 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00b      	beq.n	8004550 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	e007      	b.n	8004550 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004544:	3301      	adds	r3, #1
 8004546:	b2db      	uxtb	r3, r3
 8004548:	b25a      	sxtb	r2, r3
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004550:	2301      	movs	r3, #1
 8004552:	637b      	str	r3, [r7, #52]	; 0x34
 8004554:	e001      	b.n	800455a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004556:	2300      	movs	r3, #0
 8004558:	637b      	str	r3, [r7, #52]	; 0x34
 800455a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f383 8811 	msr	BASEPRI, r3
}
 8004564:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004568:	4618      	mov	r0, r3
 800456a:	3738      	adds	r7, #56	; 0x38
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10d      	bne.n	80045aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d14d      	bne.n	8004632 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	4618      	mov	r0, r3
 800459c:	f000 ff92 	bl	80054c4 <xTaskPriorityDisinherit>
 80045a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	609a      	str	r2, [r3, #8]
 80045a8:	e043      	b.n	8004632 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d119      	bne.n	80045e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6858      	ldr	r0, [r3, #4]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	461a      	mov	r2, r3
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	f001 fff8 	bl	80065b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	441a      	add	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d32b      	bcc.n	8004632 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	e026      	b.n	8004632 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	68d8      	ldr	r0, [r3, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	461a      	mov	r2, r3
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	f001 ffde 	bl	80065b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	425b      	negs	r3, r3
 80045fe:	441a      	add	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d207      	bcs.n	8004620 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	425b      	negs	r3, r3
 800461a:	441a      	add	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d105      	bne.n	8004632 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	3b01      	subs	r3, #1
 8004630:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800463a:	697b      	ldr	r3, [r7, #20]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d018      	beq.n	8004688 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	441a      	add	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	429a      	cmp	r2, r3
 800466e:	d303      	bcc.n	8004678 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68d9      	ldr	r1, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	461a      	mov	r2, r3
 8004682:	6838      	ldr	r0, [r7, #0]
 8004684:	f001 ff94 	bl	80065b0 <memcpy>
	}
}
 8004688:	bf00      	nop
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004698:	f001 fc54 	bl	8005f44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046a4:	e011      	b.n	80046ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d012      	beq.n	80046d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3324      	adds	r3, #36	; 0x24
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fd2a 	bl	800510c <xTaskRemoveFromEventList>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046be:	f000 fe01 	bl	80052c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	dce9      	bgt.n	80046a6 <prvUnlockQueue+0x16>
 80046d2:	e000      	b.n	80046d6 <prvUnlockQueue+0x46>
					break;
 80046d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	22ff      	movs	r2, #255	; 0xff
 80046da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80046de:	f001 fc61 	bl	8005fa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046e2:	f001 fc2f 	bl	8005f44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046ee:	e011      	b.n	8004714 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d012      	beq.n	800471e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3310      	adds	r3, #16
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fd05 	bl	800510c <xTaskRemoveFromEventList>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004708:	f000 fddc 	bl	80052c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800470c:	7bbb      	ldrb	r3, [r7, #14]
 800470e:	3b01      	subs	r3, #1
 8004710:	b2db      	uxtb	r3, r3
 8004712:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004714:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004718:	2b00      	cmp	r3, #0
 800471a:	dce9      	bgt.n	80046f0 <prvUnlockQueue+0x60>
 800471c:	e000      	b.n	8004720 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800471e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	22ff      	movs	r2, #255	; 0xff
 8004724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004728:	f001 fc3c 	bl	8005fa4 <vPortExitCritical>
}
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800473c:	f001 fc02 	bl	8005f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004748:	2301      	movs	r3, #1
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	e001      	b.n	8004752 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004752:	f001 fc27 	bl	8005fa4 <vPortExitCritical>

	return xReturn;
 8004756:	68fb      	ldr	r3, [r7, #12]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004768:	f001 fbec 	bl	8005f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004774:	429a      	cmp	r2, r3
 8004776:	d102      	bne.n	800477e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004778:	2301      	movs	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	e001      	b.n	8004782 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004782:	f001 fc0f 	bl	8005fa4 <vPortExitCritical>

	return xReturn;
 8004786:	68fb      	ldr	r3, [r7, #12]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	e014      	b.n	80047ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80047a0:	4a0f      	ldr	r2, [pc, #60]	; (80047e0 <vQueueAddToRegistry+0x50>)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10b      	bne.n	80047c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80047ac:	490c      	ldr	r1, [pc, #48]	; (80047e0 <vQueueAddToRegistry+0x50>)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80047b6:	4a0a      	ldr	r2, [pc, #40]	; (80047e0 <vQueueAddToRegistry+0x50>)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	4413      	add	r3, r2
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80047c2:	e006      	b.n	80047d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	3301      	adds	r3, #1
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b07      	cmp	r3, #7
 80047ce:	d9e7      	bls.n	80047a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80047d0:	bf00      	nop
 80047d2:	bf00      	nop
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	20000d90 	.word	0x20000d90

080047e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80047f4:	f001 fba6 	bl	8005f44 <vPortEnterCritical>
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047fe:	b25b      	sxtb	r3, r3
 8004800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004804:	d103      	bne.n	800480e <vQueueWaitForMessageRestricted+0x2a>
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004814:	b25b      	sxtb	r3, r3
 8004816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481a:	d103      	bne.n	8004824 <vQueueWaitForMessageRestricted+0x40>
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004824:	f001 fbbe 	bl	8005fa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	2b00      	cmp	r3, #0
 800482e:	d106      	bne.n	800483e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	3324      	adds	r3, #36	; 0x24
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fc3b 	bl	80050b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800483e:	6978      	ldr	r0, [r7, #20]
 8004840:	f7ff ff26 	bl	8004690 <prvUnlockQueue>
	}
 8004844:	bf00      	nop
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08e      	sub	sp, #56	; 0x38
 8004850:	af04      	add	r7, sp, #16
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800485a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	623b      	str	r3, [r7, #32]
}
 8004872:	bf00      	nop
 8004874:	e7fe      	b.n	8004874 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <xTaskCreateStatic+0x46>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	61fb      	str	r3, [r7, #28]
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004892:	235c      	movs	r3, #92	; 0x5c
 8004894:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	2b5c      	cmp	r3, #92	; 0x5c
 800489a:	d00a      	beq.n	80048b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	61bb      	str	r3, [r7, #24]
}
 80048ae:	bf00      	nop
 80048b0:	e7fe      	b.n	80048b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80048b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80048b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01e      	beq.n	80048f8 <xTaskCreateStatic+0xac>
 80048ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01b      	beq.n	80048f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	2202      	movs	r2, #2
 80048ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80048d2:	2300      	movs	r3, #0
 80048d4:	9303      	str	r3, [sp, #12]
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	9302      	str	r3, [sp, #8]
 80048da:	f107 0314 	add.w	r3, r7, #20
 80048de:	9301      	str	r3, [sp, #4]
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 f850 	bl	8004990 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048f2:	f000 f8dd 	bl	8004ab0 <prvAddNewTaskToReadyList>
 80048f6:	e001      	b.n	80048fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80048fc:	697b      	ldr	r3, [r7, #20]
	}
 80048fe:	4618      	mov	r0, r3
 8004900:	3728      	adds	r7, #40	; 0x28
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004906:	b580      	push	{r7, lr}
 8004908:	b08c      	sub	sp, #48	; 0x30
 800490a:	af04      	add	r7, sp, #16
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	603b      	str	r3, [r7, #0]
 8004912:	4613      	mov	r3, r2
 8004914:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4618      	mov	r0, r3
 800491c:	f001 fc34 	bl	8006188 <pvPortMalloc>
 8004920:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00e      	beq.n	8004946 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004928:	205c      	movs	r0, #92	; 0x5c
 800492a:	f001 fc2d 	bl	8006188 <pvPortMalloc>
 800492e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
 800493c:	e005      	b.n	800494a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800493e:	6978      	ldr	r0, [r7, #20]
 8004940:	f001 fcee 	bl	8006320 <vPortFree>
 8004944:	e001      	b.n	800494a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d017      	beq.n	8004980 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004958:	88fa      	ldrh	r2, [r7, #6]
 800495a:	2300      	movs	r3, #0
 800495c:	9303      	str	r3, [sp, #12]
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	9302      	str	r3, [sp, #8]
 8004962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004964:	9301      	str	r3, [sp, #4]
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f80e 	bl	8004990 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004974:	69f8      	ldr	r0, [r7, #28]
 8004976:	f000 f89b 	bl	8004ab0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800497a:	2301      	movs	r3, #1
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	e002      	b.n	8004986 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004980:	f04f 33ff 	mov.w	r3, #4294967295
 8004984:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004986:	69bb      	ldr	r3, [r7, #24]
	}
 8004988:	4618      	mov	r0, r3
 800498a:	3720      	adds	r7, #32
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	461a      	mov	r2, r3
 80049a8:	21a5      	movs	r1, #165	; 0xa5
 80049aa:	f001 fe0f 	bl	80065cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049b8:	3b01      	subs	r3, #1
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	f023 0307 	bic.w	r3, r3, #7
 80049c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	617b      	str	r3, [r7, #20]
}
 80049e4:	bf00      	nop
 80049e6:	e7fe      	b.n	80049e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d01f      	beq.n	8004a2e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049ee:	2300      	movs	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
 80049f2:	e012      	b.n	8004a1a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	4413      	add	r3, r2
 80049fa:	7819      	ldrb	r1, [r3, #0]
 80049fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	4413      	add	r3, r2
 8004a02:	3334      	adds	r3, #52	; 0x34
 8004a04:	460a      	mov	r2, r1
 8004a06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d006      	beq.n	8004a22 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	3301      	adds	r3, #1
 8004a18:	61fb      	str	r3, [r7, #28]
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	2b0f      	cmp	r3, #15
 8004a1e:	d9e9      	bls.n	80049f4 <prvInitialiseNewTask+0x64>
 8004a20:	e000      	b.n	8004a24 <prvInitialiseNewTask+0x94>
			{
				break;
 8004a22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a2c:	e003      	b.n	8004a36 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	2b37      	cmp	r3, #55	; 0x37
 8004a3a:	d901      	bls.n	8004a40 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a3c:	2337      	movs	r3, #55	; 0x37
 8004a3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4e:	2200      	movs	r2, #0
 8004a50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	3304      	adds	r3, #4
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff f8be 	bl	8003bd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5e:	3318      	adds	r3, #24
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff f8b9 	bl	8003bd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7e:	2200      	movs	r2, #0
 8004a80:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	68f9      	ldr	r1, [r7, #12]
 8004a8e:	69b8      	ldr	r0, [r7, #24]
 8004a90:	f001 f928 	bl	8005ce4 <pxPortInitialiseStack>
 8004a94:	4602      	mov	r2, r0
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aa6:	bf00      	nop
 8004aa8:	3720      	adds	r7, #32
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ab8:	f001 fa44 	bl	8005f44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004abc:	4b2d      	ldr	r3, [pc, #180]	; (8004b74 <prvAddNewTaskToReadyList+0xc4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	4a2c      	ldr	r2, [pc, #176]	; (8004b74 <prvAddNewTaskToReadyList+0xc4>)
 8004ac4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ac6:	4b2c      	ldr	r3, [pc, #176]	; (8004b78 <prvAddNewTaskToReadyList+0xc8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ace:	4a2a      	ldr	r2, [pc, #168]	; (8004b78 <prvAddNewTaskToReadyList+0xc8>)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ad4:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <prvAddNewTaskToReadyList+0xc4>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d110      	bne.n	8004afe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004adc:	f000 fc16 	bl	800530c <prvInitialiseTaskLists>
 8004ae0:	e00d      	b.n	8004afe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ae2:	4b26      	ldr	r3, [pc, #152]	; (8004b7c <prvAddNewTaskToReadyList+0xcc>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d109      	bne.n	8004afe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004aea:	4b23      	ldr	r3, [pc, #140]	; (8004b78 <prvAddNewTaskToReadyList+0xc8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d802      	bhi.n	8004afe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004af8:	4a1f      	ldr	r2, [pc, #124]	; (8004b78 <prvAddNewTaskToReadyList+0xc8>)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004afe:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <prvAddNewTaskToReadyList+0xd0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3301      	adds	r3, #1
 8004b04:	4a1e      	ldr	r2, [pc, #120]	; (8004b80 <prvAddNewTaskToReadyList+0xd0>)
 8004b06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b08:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <prvAddNewTaskToReadyList+0xd0>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b14:	4b1b      	ldr	r3, [pc, #108]	; (8004b84 <prvAddNewTaskToReadyList+0xd4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d903      	bls.n	8004b24 <prvAddNewTaskToReadyList+0x74>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	4a18      	ldr	r2, [pc, #96]	; (8004b84 <prvAddNewTaskToReadyList+0xd4>)
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4a15      	ldr	r2, [pc, #84]	; (8004b88 <prvAddNewTaskToReadyList+0xd8>)
 8004b32:	441a      	add	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3304      	adds	r3, #4
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	f7ff f859 	bl	8003bf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b40:	f001 fa30 	bl	8005fa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b44:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <prvAddNewTaskToReadyList+0xcc>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00e      	beq.n	8004b6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <prvAddNewTaskToReadyList+0xc8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d207      	bcs.n	8004b6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b5a:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <prvAddNewTaskToReadyList+0xdc>)
 8004b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	200012a4 	.word	0x200012a4
 8004b78:	20000dd0 	.word	0x20000dd0
 8004b7c:	200012b0 	.word	0x200012b0
 8004b80:	200012c0 	.word	0x200012c0
 8004b84:	200012ac 	.word	0x200012ac
 8004b88:	20000dd4 	.word	0x20000dd4
 8004b8c:	e000ed04 	.word	0xe000ed04

08004b90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d017      	beq.n	8004bd2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ba2:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <vTaskDelay+0x60>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <vTaskDelay+0x30>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	60bb      	str	r3, [r7, #8]
}
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004bc0:	f000 f880 	bl	8004cc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fcea 	bl	80055a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004bcc:	f000 f888 	bl	8004ce0 <xTaskResumeAll>
 8004bd0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d107      	bne.n	8004be8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004bd8:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <vTaskDelay+0x64>)
 8004bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004be8:	bf00      	nop
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	200012cc 	.word	0x200012cc
 8004bf4:	e000ed04 	.word	0xe000ed04

08004bf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	; 0x28
 8004bfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c06:	463a      	mov	r2, r7
 8004c08:	1d39      	adds	r1, r7, #4
 8004c0a:	f107 0308 	add.w	r3, r7, #8
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fe ff8e 	bl	8003b30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c14:	6839      	ldr	r1, [r7, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	9202      	str	r2, [sp, #8]
 8004c1c:	9301      	str	r3, [sp, #4]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	2300      	movs	r3, #0
 8004c24:	460a      	mov	r2, r1
 8004c26:	4921      	ldr	r1, [pc, #132]	; (8004cac <vTaskStartScheduler+0xb4>)
 8004c28:	4821      	ldr	r0, [pc, #132]	; (8004cb0 <vTaskStartScheduler+0xb8>)
 8004c2a:	f7ff fe0f 	bl	800484c <xTaskCreateStatic>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4a20      	ldr	r2, [pc, #128]	; (8004cb4 <vTaskStartScheduler+0xbc>)
 8004c32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c34:	4b1f      	ldr	r3, [pc, #124]	; (8004cb4 <vTaskStartScheduler+0xbc>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	e001      	b.n	8004c46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d102      	bne.n	8004c52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c4c:	f000 fcfc 	bl	8005648 <xTimerCreateTimerTask>
 8004c50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d116      	bne.n	8004c86 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	613b      	str	r3, [r7, #16]
}
 8004c6a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c6c:	4b12      	ldr	r3, [pc, #72]	; (8004cb8 <vTaskStartScheduler+0xc0>)
 8004c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c74:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <vTaskStartScheduler+0xc4>)
 8004c76:	2201      	movs	r2, #1
 8004c78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c7a:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <vTaskStartScheduler+0xc8>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c80:	f001 f8be 	bl	8005e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c84:	e00e      	b.n	8004ca4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d10a      	bne.n	8004ca4 <vTaskStartScheduler+0xac>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	60fb      	str	r3, [r7, #12]
}
 8004ca0:	bf00      	nop
 8004ca2:	e7fe      	b.n	8004ca2 <vTaskStartScheduler+0xaa>
}
 8004ca4:	bf00      	nop
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	08006f0c 	.word	0x08006f0c
 8004cb0:	080052dd 	.word	0x080052dd
 8004cb4:	200012c8 	.word	0x200012c8
 8004cb8:	200012c4 	.word	0x200012c4
 8004cbc:	200012b0 	.word	0x200012b0
 8004cc0:	200012a8 	.word	0x200012a8

08004cc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004cc8:	4b04      	ldr	r3, [pc, #16]	; (8004cdc <vTaskSuspendAll+0x18>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	4a03      	ldr	r2, [pc, #12]	; (8004cdc <vTaskSuspendAll+0x18>)
 8004cd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004cd2:	bf00      	nop
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	200012cc 	.word	0x200012cc

08004ce0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cea:	2300      	movs	r3, #0
 8004cec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cee:	4b42      	ldr	r3, [pc, #264]	; (8004df8 <xTaskResumeAll+0x118>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10a      	bne.n	8004d0c <xTaskResumeAll+0x2c>
	__asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	603b      	str	r3, [r7, #0]
}
 8004d08:	bf00      	nop
 8004d0a:	e7fe      	b.n	8004d0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d0c:	f001 f91a 	bl	8005f44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d10:	4b39      	ldr	r3, [pc, #228]	; (8004df8 <xTaskResumeAll+0x118>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	4a38      	ldr	r2, [pc, #224]	; (8004df8 <xTaskResumeAll+0x118>)
 8004d18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d1a:	4b37      	ldr	r3, [pc, #220]	; (8004df8 <xTaskResumeAll+0x118>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d162      	bne.n	8004de8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d22:	4b36      	ldr	r3, [pc, #216]	; (8004dfc <xTaskResumeAll+0x11c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d05e      	beq.n	8004de8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d2a:	e02f      	b.n	8004d8c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d2c:	4b34      	ldr	r3, [pc, #208]	; (8004e00 <xTaskResumeAll+0x120>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3318      	adds	r3, #24
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fe ffb7 	bl	8003cac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3304      	adds	r3, #4
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fe ffb2 	bl	8003cac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4c:	4b2d      	ldr	r3, [pc, #180]	; (8004e04 <xTaskResumeAll+0x124>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d903      	bls.n	8004d5c <xTaskResumeAll+0x7c>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	4a2a      	ldr	r2, [pc, #168]	; (8004e04 <xTaskResumeAll+0x124>)
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4a27      	ldr	r2, [pc, #156]	; (8004e08 <xTaskResumeAll+0x128>)
 8004d6a:	441a      	add	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	4619      	mov	r1, r3
 8004d72:	4610      	mov	r0, r2
 8004d74:	f7fe ff3d 	bl	8003bf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7c:	4b23      	ldr	r3, [pc, #140]	; (8004e0c <xTaskResumeAll+0x12c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d302      	bcc.n	8004d8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004d86:	4b22      	ldr	r3, [pc, #136]	; (8004e10 <xTaskResumeAll+0x130>)
 8004d88:	2201      	movs	r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d8c:	4b1c      	ldr	r3, [pc, #112]	; (8004e00 <xTaskResumeAll+0x120>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1cb      	bne.n	8004d2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d9a:	f000 fb55 	bl	8005448 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d9e:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <xTaskResumeAll+0x134>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d010      	beq.n	8004dcc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004daa:	f000 f847 	bl	8004e3c <xTaskIncrementTick>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004db4:	4b16      	ldr	r3, [pc, #88]	; (8004e10 <xTaskResumeAll+0x130>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f1      	bne.n	8004daa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004dc6:	4b13      	ldr	r3, [pc, #76]	; (8004e14 <xTaskResumeAll+0x134>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004dcc:	4b10      	ldr	r3, [pc, #64]	; (8004e10 <xTaskResumeAll+0x130>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d009      	beq.n	8004de8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004dd8:	4b0f      	ldr	r3, [pc, #60]	; (8004e18 <xTaskResumeAll+0x138>)
 8004dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004de8:	f001 f8dc 	bl	8005fa4 <vPortExitCritical>

	return xAlreadyYielded;
 8004dec:	68bb      	ldr	r3, [r7, #8]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	200012cc 	.word	0x200012cc
 8004dfc:	200012a4 	.word	0x200012a4
 8004e00:	20001264 	.word	0x20001264
 8004e04:	200012ac 	.word	0x200012ac
 8004e08:	20000dd4 	.word	0x20000dd4
 8004e0c:	20000dd0 	.word	0x20000dd0
 8004e10:	200012b8 	.word	0x200012b8
 8004e14:	200012b4 	.word	0x200012b4
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e22:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <xTaskGetTickCount+0x1c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e28:	687b      	ldr	r3, [r7, #4]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	200012a8 	.word	0x200012a8

08004e3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e46:	4b4f      	ldr	r3, [pc, #316]	; (8004f84 <xTaskIncrementTick+0x148>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f040 808f 	bne.w	8004f6e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e50:	4b4d      	ldr	r3, [pc, #308]	; (8004f88 <xTaskIncrementTick+0x14c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3301      	adds	r3, #1
 8004e56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e58:	4a4b      	ldr	r2, [pc, #300]	; (8004f88 <xTaskIncrementTick+0x14c>)
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d120      	bne.n	8004ea6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e64:	4b49      	ldr	r3, [pc, #292]	; (8004f8c <xTaskIncrementTick+0x150>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	603b      	str	r3, [r7, #0]
}
 8004e80:	bf00      	nop
 8004e82:	e7fe      	b.n	8004e82 <xTaskIncrementTick+0x46>
 8004e84:	4b41      	ldr	r3, [pc, #260]	; (8004f8c <xTaskIncrementTick+0x150>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	4b41      	ldr	r3, [pc, #260]	; (8004f90 <xTaskIncrementTick+0x154>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a3f      	ldr	r2, [pc, #252]	; (8004f8c <xTaskIncrementTick+0x150>)
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	4a3f      	ldr	r2, [pc, #252]	; (8004f90 <xTaskIncrementTick+0x154>)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	4b3e      	ldr	r3, [pc, #248]	; (8004f94 <xTaskIncrementTick+0x158>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	4a3d      	ldr	r2, [pc, #244]	; (8004f94 <xTaskIncrementTick+0x158>)
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	f000 fad1 	bl	8005448 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ea6:	4b3c      	ldr	r3, [pc, #240]	; (8004f98 <xTaskIncrementTick+0x15c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d349      	bcc.n	8004f44 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eb0:	4b36      	ldr	r3, [pc, #216]	; (8004f8c <xTaskIncrementTick+0x150>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d104      	bne.n	8004ec4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eba:	4b37      	ldr	r3, [pc, #220]	; (8004f98 <xTaskIncrementTick+0x15c>)
 8004ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec0:	601a      	str	r2, [r3, #0]
					break;
 8004ec2:	e03f      	b.n	8004f44 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ec4:	4b31      	ldr	r3, [pc, #196]	; (8004f8c <xTaskIncrementTick+0x150>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d203      	bcs.n	8004ee4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004edc:	4a2e      	ldr	r2, [pc, #184]	; (8004f98 <xTaskIncrementTick+0x15c>)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ee2:	e02f      	b.n	8004f44 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fe fedf 	bl	8003cac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d004      	beq.n	8004f00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	3318      	adds	r3, #24
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fe fed6 	bl	8003cac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f04:	4b25      	ldr	r3, [pc, #148]	; (8004f9c <xTaskIncrementTick+0x160>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d903      	bls.n	8004f14 <xTaskIncrementTick+0xd8>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	4a22      	ldr	r2, [pc, #136]	; (8004f9c <xTaskIncrementTick+0x160>)
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4a1f      	ldr	r2, [pc, #124]	; (8004fa0 <xTaskIncrementTick+0x164>)
 8004f22:	441a      	add	r2, r3
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f7fe fe61 	bl	8003bf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f34:	4b1b      	ldr	r3, [pc, #108]	; (8004fa4 <xTaskIncrementTick+0x168>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d3b8      	bcc.n	8004eb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f42:	e7b5      	b.n	8004eb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f44:	4b17      	ldr	r3, [pc, #92]	; (8004fa4 <xTaskIncrementTick+0x168>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4a:	4915      	ldr	r1, [pc, #84]	; (8004fa0 <xTaskIncrementTick+0x164>)
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d901      	bls.n	8004f60 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f60:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <xTaskIncrementTick+0x16c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d007      	beq.n	8004f78 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	e004      	b.n	8004f78 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f6e:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <xTaskIncrementTick+0x170>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	4a0d      	ldr	r2, [pc, #52]	; (8004fac <xTaskIncrementTick+0x170>)
 8004f76:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f78:	697b      	ldr	r3, [r7, #20]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	200012cc 	.word	0x200012cc
 8004f88:	200012a8 	.word	0x200012a8
 8004f8c:	2000125c 	.word	0x2000125c
 8004f90:	20001260 	.word	0x20001260
 8004f94:	200012bc 	.word	0x200012bc
 8004f98:	200012c4 	.word	0x200012c4
 8004f9c:	200012ac 	.word	0x200012ac
 8004fa0:	20000dd4 	.word	0x20000dd4
 8004fa4:	20000dd0 	.word	0x20000dd0
 8004fa8:	200012b8 	.word	0x200012b8
 8004fac:	200012b4 	.word	0x200012b4

08004fb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fb6:	4b28      	ldr	r3, [pc, #160]	; (8005058 <vTaskSwitchContext+0xa8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004fbe:	4b27      	ldr	r3, [pc, #156]	; (800505c <vTaskSwitchContext+0xac>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fc4:	e041      	b.n	800504a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004fc6:	4b25      	ldr	r3, [pc, #148]	; (800505c <vTaskSwitchContext+0xac>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fcc:	4b24      	ldr	r3, [pc, #144]	; (8005060 <vTaskSwitchContext+0xb0>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	e010      	b.n	8004ff6 <vTaskSwitchContext+0x46>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10a      	bne.n	8004ff0 <vTaskSwitchContext+0x40>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	607b      	str	r3, [r7, #4]
}
 8004fec:	bf00      	nop
 8004fee:	e7fe      	b.n	8004fee <vTaskSwitchContext+0x3e>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	491b      	ldr	r1, [pc, #108]	; (8005064 <vTaskSwitchContext+0xb4>)
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0e4      	beq.n	8004fd4 <vTaskSwitchContext+0x24>
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4a13      	ldr	r2, [pc, #76]	; (8005064 <vTaskSwitchContext+0xb4>)
 8005016:	4413      	add	r3, r2
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	605a      	str	r2, [r3, #4]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	3308      	adds	r3, #8
 800502c:	429a      	cmp	r2, r3
 800502e:	d104      	bne.n	800503a <vTaskSwitchContext+0x8a>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	605a      	str	r2, [r3, #4]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	4a09      	ldr	r2, [pc, #36]	; (8005068 <vTaskSwitchContext+0xb8>)
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	4a06      	ldr	r2, [pc, #24]	; (8005060 <vTaskSwitchContext+0xb0>)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6013      	str	r3, [r2, #0]
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	200012cc 	.word	0x200012cc
 800505c:	200012b8 	.word	0x200012b8
 8005060:	200012ac 	.word	0x200012ac
 8005064:	20000dd4 	.word	0x20000dd4
 8005068:	20000dd0 	.word	0x20000dd0

0800506c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10a      	bne.n	8005092 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	60fb      	str	r3, [r7, #12]
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005092:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <vTaskPlaceOnEventList+0x44>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3318      	adds	r3, #24
 8005098:	4619      	mov	r1, r3
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fe fdcd 	bl	8003c3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050a0:	2101      	movs	r1, #1
 80050a2:	6838      	ldr	r0, [r7, #0]
 80050a4:	f000 fa7c 	bl	80055a0 <prvAddCurrentTaskToDelayedList>
}
 80050a8:	bf00      	nop
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	20000dd0 	.word	0x20000dd0

080050b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10a      	bne.n	80050dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	617b      	str	r3, [r7, #20]
}
 80050d8:	bf00      	nop
 80050da:	e7fe      	b.n	80050da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050dc:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <vTaskPlaceOnEventListRestricted+0x54>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3318      	adds	r3, #24
 80050e2:	4619      	mov	r1, r3
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7fe fd84 	bl	8003bf2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80050f0:	f04f 33ff 	mov.w	r3, #4294967295
 80050f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	68b8      	ldr	r0, [r7, #8]
 80050fa:	f000 fa51 	bl	80055a0 <prvAddCurrentTaskToDelayedList>
	}
 80050fe:	bf00      	nop
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20000dd0 	.word	0x20000dd0

0800510c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10a      	bne.n	8005138 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	60fb      	str	r3, [r7, #12]
}
 8005134:	bf00      	nop
 8005136:	e7fe      	b.n	8005136 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	3318      	adds	r3, #24
 800513c:	4618      	mov	r0, r3
 800513e:	f7fe fdb5 	bl	8003cac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005142:	4b1e      	ldr	r3, [pc, #120]	; (80051bc <xTaskRemoveFromEventList+0xb0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d11d      	bne.n	8005186 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	3304      	adds	r3, #4
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe fdac 	bl	8003cac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005158:	4b19      	ldr	r3, [pc, #100]	; (80051c0 <xTaskRemoveFromEventList+0xb4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d903      	bls.n	8005168 <xTaskRemoveFromEventList+0x5c>
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	4a16      	ldr	r2, [pc, #88]	; (80051c0 <xTaskRemoveFromEventList+0xb4>)
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4a13      	ldr	r2, [pc, #76]	; (80051c4 <xTaskRemoveFromEventList+0xb8>)
 8005176:	441a      	add	r2, r3
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	3304      	adds	r3, #4
 800517c:	4619      	mov	r1, r3
 800517e:	4610      	mov	r0, r2
 8005180:	f7fe fd37 	bl	8003bf2 <vListInsertEnd>
 8005184:	e005      	b.n	8005192 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	3318      	adds	r3, #24
 800518a:	4619      	mov	r1, r3
 800518c:	480e      	ldr	r0, [pc, #56]	; (80051c8 <xTaskRemoveFromEventList+0xbc>)
 800518e:	f7fe fd30 	bl	8003bf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005196:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <xTaskRemoveFromEventList+0xc0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	429a      	cmp	r2, r3
 800519e:	d905      	bls.n	80051ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80051a0:	2301      	movs	r3, #1
 80051a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80051a4:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <xTaskRemoveFromEventList+0xc4>)
 80051a6:	2201      	movs	r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	e001      	b.n	80051b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80051b0:	697b      	ldr	r3, [r7, #20]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	200012cc 	.word	0x200012cc
 80051c0:	200012ac 	.word	0x200012ac
 80051c4:	20000dd4 	.word	0x20000dd4
 80051c8:	20001264 	.word	0x20001264
 80051cc:	20000dd0 	.word	0x20000dd0
 80051d0:	200012b8 	.word	0x200012b8

080051d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051dc:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <vTaskInternalSetTimeOutState+0x24>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051e4:	4b05      	ldr	r3, [pc, #20]	; (80051fc <vTaskInternalSetTimeOutState+0x28>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	605a      	str	r2, [r3, #4]
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	200012bc 	.word	0x200012bc
 80051fc:	200012a8 	.word	0x200012a8

08005200 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b088      	sub	sp, #32
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	613b      	str	r3, [r7, #16]
}
 8005222:	bf00      	nop
 8005224:	e7fe      	b.n	8005224 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	60fb      	str	r3, [r7, #12]
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005242:	f000 fe7f 	bl	8005f44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005246:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <xTaskCheckForTimeOut+0xbc>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525e:	d102      	bne.n	8005266 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
 8005264:	e023      	b.n	80052ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <xTaskCheckForTimeOut+0xc0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d007      	beq.n	8005282 <xTaskCheckForTimeOut+0x82>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	429a      	cmp	r2, r3
 800527a:	d302      	bcc.n	8005282 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800527c:	2301      	movs	r3, #1
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	e015      	b.n	80052ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	429a      	cmp	r2, r3
 800528a:	d20b      	bcs.n	80052a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	1ad2      	subs	r2, r2, r3
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff ff9b 	bl	80051d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800529e:	2300      	movs	r3, #0
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	e004      	b.n	80052ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80052aa:	2301      	movs	r3, #1
 80052ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80052ae:	f000 fe79 	bl	8005fa4 <vPortExitCritical>

	return xReturn;
 80052b2:	69fb      	ldr	r3, [r7, #28]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3720      	adds	r7, #32
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	200012a8 	.word	0x200012a8
 80052c0:	200012bc 	.word	0x200012bc

080052c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052c8:	4b03      	ldr	r3, [pc, #12]	; (80052d8 <vTaskMissedYield+0x14>)
 80052ca:	2201      	movs	r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
}
 80052ce:	bf00      	nop
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	200012b8 	.word	0x200012b8

080052dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052e4:	f000 f852 	bl	800538c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052e8:	4b06      	ldr	r3, [pc, #24]	; (8005304 <prvIdleTask+0x28>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d9f9      	bls.n	80052e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052f0:	4b05      	ldr	r3, [pc, #20]	; (8005308 <prvIdleTask+0x2c>)
 80052f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005300:	e7f0      	b.n	80052e4 <prvIdleTask+0x8>
 8005302:	bf00      	nop
 8005304:	20000dd4 	.word	0x20000dd4
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005312:	2300      	movs	r3, #0
 8005314:	607b      	str	r3, [r7, #4]
 8005316:	e00c      	b.n	8005332 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4a12      	ldr	r2, [pc, #72]	; (800536c <prvInitialiseTaskLists+0x60>)
 8005324:	4413      	add	r3, r2
 8005326:	4618      	mov	r0, r3
 8005328:	f7fe fc36 	bl	8003b98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3301      	adds	r3, #1
 8005330:	607b      	str	r3, [r7, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b37      	cmp	r3, #55	; 0x37
 8005336:	d9ef      	bls.n	8005318 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005338:	480d      	ldr	r0, [pc, #52]	; (8005370 <prvInitialiseTaskLists+0x64>)
 800533a:	f7fe fc2d 	bl	8003b98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800533e:	480d      	ldr	r0, [pc, #52]	; (8005374 <prvInitialiseTaskLists+0x68>)
 8005340:	f7fe fc2a 	bl	8003b98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005344:	480c      	ldr	r0, [pc, #48]	; (8005378 <prvInitialiseTaskLists+0x6c>)
 8005346:	f7fe fc27 	bl	8003b98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800534a:	480c      	ldr	r0, [pc, #48]	; (800537c <prvInitialiseTaskLists+0x70>)
 800534c:	f7fe fc24 	bl	8003b98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005350:	480b      	ldr	r0, [pc, #44]	; (8005380 <prvInitialiseTaskLists+0x74>)
 8005352:	f7fe fc21 	bl	8003b98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005356:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <prvInitialiseTaskLists+0x78>)
 8005358:	4a05      	ldr	r2, [pc, #20]	; (8005370 <prvInitialiseTaskLists+0x64>)
 800535a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800535c:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <prvInitialiseTaskLists+0x7c>)
 800535e:	4a05      	ldr	r2, [pc, #20]	; (8005374 <prvInitialiseTaskLists+0x68>)
 8005360:	601a      	str	r2, [r3, #0]
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000dd4 	.word	0x20000dd4
 8005370:	20001234 	.word	0x20001234
 8005374:	20001248 	.word	0x20001248
 8005378:	20001264 	.word	0x20001264
 800537c:	20001278 	.word	0x20001278
 8005380:	20001290 	.word	0x20001290
 8005384:	2000125c 	.word	0x2000125c
 8005388:	20001260 	.word	0x20001260

0800538c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005392:	e019      	b.n	80053c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005394:	f000 fdd6 	bl	8005f44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005398:	4b10      	ldr	r3, [pc, #64]	; (80053dc <prvCheckTasksWaitingTermination+0x50>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3304      	adds	r3, #4
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fe fc81 	bl	8003cac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80053aa:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <prvCheckTasksWaitingTermination+0x54>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	4a0b      	ldr	r2, [pc, #44]	; (80053e0 <prvCheckTasksWaitingTermination+0x54>)
 80053b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80053b4:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <prvCheckTasksWaitingTermination+0x58>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3b01      	subs	r3, #1
 80053ba:	4a0a      	ldr	r2, [pc, #40]	; (80053e4 <prvCheckTasksWaitingTermination+0x58>)
 80053bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053be:	f000 fdf1 	bl	8005fa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f810 	bl	80053e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053c8:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <prvCheckTasksWaitingTermination+0x58>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e1      	bne.n	8005394 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20001278 	.word	0x20001278
 80053e0:	200012a4 	.word	0x200012a4
 80053e4:	2000128c 	.word	0x2000128c

080053e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d108      	bne.n	800540c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 ff8e 	bl	8006320 <vPortFree>
				vPortFree( pxTCB );
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 ff8b 	bl	8006320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800540a:	e018      	b.n	800543e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005412:	2b01      	cmp	r3, #1
 8005414:	d103      	bne.n	800541e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 ff82 	bl	8006320 <vPortFree>
	}
 800541c:	e00f      	b.n	800543e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005424:	2b02      	cmp	r3, #2
 8005426:	d00a      	beq.n	800543e <prvDeleteTCB+0x56>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	60fb      	str	r3, [r7, #12]
}
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <prvDeleteTCB+0x54>
	}
 800543e:	bf00      	nop
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800544e:	4b0c      	ldr	r3, [pc, #48]	; (8005480 <prvResetNextTaskUnblockTime+0x38>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d104      	bne.n	8005462 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005458:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <prvResetNextTaskUnblockTime+0x3c>)
 800545a:	f04f 32ff 	mov.w	r2, #4294967295
 800545e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005460:	e008      	b.n	8005474 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005462:	4b07      	ldr	r3, [pc, #28]	; (8005480 <prvResetNextTaskUnblockTime+0x38>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4a04      	ldr	r2, [pc, #16]	; (8005484 <prvResetNextTaskUnblockTime+0x3c>)
 8005472:	6013      	str	r3, [r2, #0]
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	2000125c 	.word	0x2000125c
 8005484:	200012c4 	.word	0x200012c4

08005488 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800548e:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <xTaskGetSchedulerState+0x34>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d102      	bne.n	800549c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005496:	2301      	movs	r3, #1
 8005498:	607b      	str	r3, [r7, #4]
 800549a:	e008      	b.n	80054ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800549c:	4b08      	ldr	r3, [pc, #32]	; (80054c0 <xTaskGetSchedulerState+0x38>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d102      	bne.n	80054aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80054a4:	2302      	movs	r3, #2
 80054a6:	607b      	str	r3, [r7, #4]
 80054a8:	e001      	b.n	80054ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054aa:	2300      	movs	r3, #0
 80054ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80054ae:	687b      	ldr	r3, [r7, #4]
	}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	200012b0 	.word	0x200012b0
 80054c0:	200012cc 	.word	0x200012cc

080054c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054d0:	2300      	movs	r3, #0
 80054d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d056      	beq.n	8005588 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054da:	4b2e      	ldr	r3, [pc, #184]	; (8005594 <xTaskPriorityDisinherit+0xd0>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d00a      	beq.n	80054fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80054e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	60fb      	str	r3, [r7, #12]
}
 80054f6:	bf00      	nop
 80054f8:	e7fe      	b.n	80054f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	60bb      	str	r3, [r7, #8]
}
 8005514:	bf00      	nop
 8005516:	e7fe      	b.n	8005516 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551c:	1e5a      	subs	r2, r3, #1
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552a:	429a      	cmp	r2, r3
 800552c:	d02c      	beq.n	8005588 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005532:	2b00      	cmp	r3, #0
 8005534:	d128      	bne.n	8005588 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	3304      	adds	r3, #4
 800553a:	4618      	mov	r0, r3
 800553c:	f7fe fbb6 	bl	8003cac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005558:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <xTaskPriorityDisinherit+0xd4>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	429a      	cmp	r2, r3
 800555e:	d903      	bls.n	8005568 <xTaskPriorityDisinherit+0xa4>
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	4a0c      	ldr	r2, [pc, #48]	; (8005598 <xTaskPriorityDisinherit+0xd4>)
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4a09      	ldr	r2, [pc, #36]	; (800559c <xTaskPriorityDisinherit+0xd8>)
 8005576:	441a      	add	r2, r3
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	3304      	adds	r3, #4
 800557c:	4619      	mov	r1, r3
 800557e:	4610      	mov	r0, r2
 8005580:	f7fe fb37 	bl	8003bf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005584:	2301      	movs	r3, #1
 8005586:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005588:	697b      	ldr	r3, [r7, #20]
	}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000dd0 	.word	0x20000dd0
 8005598:	200012ac 	.word	0x200012ac
 800559c:	20000dd4 	.word	0x20000dd4

080055a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055aa:	4b21      	ldr	r3, [pc, #132]	; (8005630 <prvAddCurrentTaskToDelayedList+0x90>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055b0:	4b20      	ldr	r3, [pc, #128]	; (8005634 <prvAddCurrentTaskToDelayedList+0x94>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3304      	adds	r3, #4
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fe fb78 	bl	8003cac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c2:	d10a      	bne.n	80055da <prvAddCurrentTaskToDelayedList+0x3a>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d007      	beq.n	80055da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ca:	4b1a      	ldr	r3, [pc, #104]	; (8005634 <prvAddCurrentTaskToDelayedList+0x94>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4619      	mov	r1, r3
 80055d2:	4819      	ldr	r0, [pc, #100]	; (8005638 <prvAddCurrentTaskToDelayedList+0x98>)
 80055d4:	f7fe fb0d 	bl	8003bf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055d8:	e026      	b.n	8005628 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4413      	add	r3, r2
 80055e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055e2:	4b14      	ldr	r3, [pc, #80]	; (8005634 <prvAddCurrentTaskToDelayedList+0x94>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d209      	bcs.n	8005606 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055f2:	4b12      	ldr	r3, [pc, #72]	; (800563c <prvAddCurrentTaskToDelayedList+0x9c>)
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	4b0f      	ldr	r3, [pc, #60]	; (8005634 <prvAddCurrentTaskToDelayedList+0x94>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f7fe fb1b 	bl	8003c3a <vListInsert>
}
 8005604:	e010      	b.n	8005628 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005606:	4b0e      	ldr	r3, [pc, #56]	; (8005640 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <prvAddCurrentTaskToDelayedList+0x94>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3304      	adds	r3, #4
 8005610:	4619      	mov	r1, r3
 8005612:	4610      	mov	r0, r2
 8005614:	f7fe fb11 	bl	8003c3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005618:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <prvAddCurrentTaskToDelayedList+0xa4>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	429a      	cmp	r2, r3
 8005620:	d202      	bcs.n	8005628 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005622:	4a08      	ldr	r2, [pc, #32]	; (8005644 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	6013      	str	r3, [r2, #0]
}
 8005628:	bf00      	nop
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	200012a8 	.word	0x200012a8
 8005634:	20000dd0 	.word	0x20000dd0
 8005638:	20001290 	.word	0x20001290
 800563c:	20001260 	.word	0x20001260
 8005640:	2000125c 	.word	0x2000125c
 8005644:	200012c4 	.word	0x200012c4

08005648 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08a      	sub	sp, #40	; 0x28
 800564c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005652:	f000 fb07 	bl	8005c64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005656:	4b1c      	ldr	r3, [pc, #112]	; (80056c8 <xTimerCreateTimerTask+0x80>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d021      	beq.n	80056a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005662:	2300      	movs	r3, #0
 8005664:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005666:	1d3a      	adds	r2, r7, #4
 8005668:	f107 0108 	add.w	r1, r7, #8
 800566c:	f107 030c 	add.w	r3, r7, #12
 8005670:	4618      	mov	r0, r3
 8005672:	f7fe fa77 	bl	8003b64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	9202      	str	r2, [sp, #8]
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	2302      	movs	r3, #2
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	2300      	movs	r3, #0
 8005686:	460a      	mov	r2, r1
 8005688:	4910      	ldr	r1, [pc, #64]	; (80056cc <xTimerCreateTimerTask+0x84>)
 800568a:	4811      	ldr	r0, [pc, #68]	; (80056d0 <xTimerCreateTimerTask+0x88>)
 800568c:	f7ff f8de 	bl	800484c <xTaskCreateStatic>
 8005690:	4603      	mov	r3, r0
 8005692:	4a10      	ldr	r2, [pc, #64]	; (80056d4 <xTimerCreateTimerTask+0x8c>)
 8005694:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005696:	4b0f      	ldr	r3, [pc, #60]	; (80056d4 <xTimerCreateTimerTask+0x8c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800569e:	2301      	movs	r3, #1
 80056a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <xTimerCreateTimerTask+0x76>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	613b      	str	r3, [r7, #16]
}
 80056ba:	bf00      	nop
 80056bc:	e7fe      	b.n	80056bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80056be:	697b      	ldr	r3, [r7, #20]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	20001300 	.word	0x20001300
 80056cc:	08006f14 	.word	0x08006f14
 80056d0:	0800580d 	.word	0x0800580d
 80056d4:	20001304 	.word	0x20001304

080056d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08a      	sub	sp, #40	; 0x28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10a      	bne.n	8005706 <xTimerGenericCommand+0x2e>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	623b      	str	r3, [r7, #32]
}
 8005702:	bf00      	nop
 8005704:	e7fe      	b.n	8005704 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005706:	4b1a      	ldr	r3, [pc, #104]	; (8005770 <xTimerGenericCommand+0x98>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d02a      	beq.n	8005764 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b05      	cmp	r3, #5
 800571e:	dc18      	bgt.n	8005752 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005720:	f7ff feb2 	bl	8005488 <xTaskGetSchedulerState>
 8005724:	4603      	mov	r3, r0
 8005726:	2b02      	cmp	r3, #2
 8005728:	d109      	bne.n	800573e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800572a:	4b11      	ldr	r3, [pc, #68]	; (8005770 <xTimerGenericCommand+0x98>)
 800572c:	6818      	ldr	r0, [r3, #0]
 800572e:	f107 0110 	add.w	r1, r7, #16
 8005732:	2300      	movs	r3, #0
 8005734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005736:	f7fe fc21 	bl	8003f7c <xQueueGenericSend>
 800573a:	6278      	str	r0, [r7, #36]	; 0x24
 800573c:	e012      	b.n	8005764 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800573e:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <xTimerGenericCommand+0x98>)
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	f107 0110 	add.w	r1, r7, #16
 8005746:	2300      	movs	r3, #0
 8005748:	2200      	movs	r2, #0
 800574a:	f7fe fc17 	bl	8003f7c <xQueueGenericSend>
 800574e:	6278      	str	r0, [r7, #36]	; 0x24
 8005750:	e008      	b.n	8005764 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005752:	4b07      	ldr	r3, [pc, #28]	; (8005770 <xTimerGenericCommand+0x98>)
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	f107 0110 	add.w	r1, r7, #16
 800575a:	2300      	movs	r3, #0
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	f7fe fd0b 	bl	8004178 <xQueueGenericSendFromISR>
 8005762:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005766:	4618      	mov	r0, r3
 8005768:	3728      	adds	r7, #40	; 0x28
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20001300 	.word	0x20001300

08005774 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af02      	add	r7, sp, #8
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800577e:	4b22      	ldr	r3, [pc, #136]	; (8005808 <prvProcessExpiredTimer+0x94>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	3304      	adds	r3, #4
 800578c:	4618      	mov	r0, r3
 800578e:	f7fe fa8d 	bl	8003cac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d022      	beq.n	80057e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	699a      	ldr	r2, [r3, #24]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	18d1      	adds	r1, r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	6978      	ldr	r0, [r7, #20]
 80057ae:	f000 f8d1 	bl	8005954 <prvInsertTimerInActiveList>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01f      	beq.n	80057f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057b8:	2300      	movs	r3, #0
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	2300      	movs	r3, #0
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	2100      	movs	r1, #0
 80057c2:	6978      	ldr	r0, [r7, #20]
 80057c4:	f7ff ff88 	bl	80056d8 <xTimerGenericCommand>
 80057c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d113      	bne.n	80057f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	60fb      	str	r3, [r7, #12]
}
 80057e2:	bf00      	nop
 80057e4:	e7fe      	b.n	80057e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	6978      	ldr	r0, [r7, #20]
 80057fe:	4798      	blx	r3
}
 8005800:	bf00      	nop
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	200012f8 	.word	0x200012f8

0800580c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005814:	f107 0308 	add.w	r3, r7, #8
 8005818:	4618      	mov	r0, r3
 800581a:	f000 f857 	bl	80058cc <prvGetNextExpireTime>
 800581e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4619      	mov	r1, r3
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 f803 	bl	8005830 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800582a:	f000 f8d5 	bl	80059d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800582e:	e7f1      	b.n	8005814 <prvTimerTask+0x8>

08005830 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800583a:	f7ff fa43 	bl	8004cc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800583e:	f107 0308 	add.w	r3, r7, #8
 8005842:	4618      	mov	r0, r3
 8005844:	f000 f866 	bl	8005914 <prvSampleTimeNow>
 8005848:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d130      	bne.n	80058b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10a      	bne.n	800586c <prvProcessTimerOrBlockTask+0x3c>
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	429a      	cmp	r2, r3
 800585c:	d806      	bhi.n	800586c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800585e:	f7ff fa3f 	bl	8004ce0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005862:	68f9      	ldr	r1, [r7, #12]
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7ff ff85 	bl	8005774 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800586a:	e024      	b.n	80058b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d008      	beq.n	8005884 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005872:	4b13      	ldr	r3, [pc, #76]	; (80058c0 <prvProcessTimerOrBlockTask+0x90>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <prvProcessTimerOrBlockTask+0x50>
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <prvProcessTimerOrBlockTask+0x52>
 8005880:	2300      	movs	r3, #0
 8005882:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005884:	4b0f      	ldr	r3, [pc, #60]	; (80058c4 <prvProcessTimerOrBlockTask+0x94>)
 8005886:	6818      	ldr	r0, [r3, #0]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	4619      	mov	r1, r3
 8005892:	f7fe ffa7 	bl	80047e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005896:	f7ff fa23 	bl	8004ce0 <xTaskResumeAll>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10a      	bne.n	80058b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80058a0:	4b09      	ldr	r3, [pc, #36]	; (80058c8 <prvProcessTimerOrBlockTask+0x98>)
 80058a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	f3bf 8f6f 	isb	sy
}
 80058b0:	e001      	b.n	80058b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80058b2:	f7ff fa15 	bl	8004ce0 <xTaskResumeAll>
}
 80058b6:	bf00      	nop
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	200012fc 	.word	0x200012fc
 80058c4:	20001300 	.word	0x20001300
 80058c8:	e000ed04 	.word	0xe000ed04

080058cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80058d4:	4b0e      	ldr	r3, [pc, #56]	; (8005910 <prvGetNextExpireTime+0x44>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <prvGetNextExpireTime+0x16>
 80058de:	2201      	movs	r2, #1
 80058e0:	e000      	b.n	80058e4 <prvGetNextExpireTime+0x18>
 80058e2:	2200      	movs	r2, #0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d105      	bne.n	80058fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058f0:	4b07      	ldr	r3, [pc, #28]	; (8005910 <prvGetNextExpireTime+0x44>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	e001      	b.n	8005900 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005900:	68fb      	ldr	r3, [r7, #12]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	200012f8 	.word	0x200012f8

08005914 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800591c:	f7ff fa7e 	bl	8004e1c <xTaskGetTickCount>
 8005920:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005922:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <prvSampleTimeNow+0x3c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	429a      	cmp	r2, r3
 800592a:	d205      	bcs.n	8005938 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800592c:	f000 f936 	bl	8005b9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	e002      	b.n	800593e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800593e:	4a04      	ldr	r2, [pc, #16]	; (8005950 <prvSampleTimeNow+0x3c>)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005944:	68fb      	ldr	r3, [r7, #12]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20001308 	.word	0x20001308

08005954 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005962:	2300      	movs	r3, #0
 8005964:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	429a      	cmp	r2, r3
 8005978:	d812      	bhi.n	80059a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	1ad2      	subs	r2, r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	429a      	cmp	r2, r3
 8005986:	d302      	bcc.n	800598e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005988:	2301      	movs	r3, #1
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	e01b      	b.n	80059c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800598e:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <prvInsertTimerInActiveList+0x7c>)
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3304      	adds	r3, #4
 8005996:	4619      	mov	r1, r3
 8005998:	4610      	mov	r0, r2
 800599a:	f7fe f94e 	bl	8003c3a <vListInsert>
 800599e:	e012      	b.n	80059c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d206      	bcs.n	80059b6 <prvInsertTimerInActiveList+0x62>
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d302      	bcc.n	80059b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80059b0:	2301      	movs	r3, #1
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	e007      	b.n	80059c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059b6:	4b07      	ldr	r3, [pc, #28]	; (80059d4 <prvInsertTimerInActiveList+0x80>)
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	3304      	adds	r3, #4
 80059be:	4619      	mov	r1, r3
 80059c0:	4610      	mov	r0, r2
 80059c2:	f7fe f93a 	bl	8003c3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80059c6:	697b      	ldr	r3, [r7, #20]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	200012fc 	.word	0x200012fc
 80059d4:	200012f8 	.word	0x200012f8

080059d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08e      	sub	sp, #56	; 0x38
 80059dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059de:	e0ca      	b.n	8005b76 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	da18      	bge.n	8005a18 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80059e6:	1d3b      	adds	r3, r7, #4
 80059e8:	3304      	adds	r3, #4
 80059ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10a      	bne.n	8005a08 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80059f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	61fb      	str	r3, [r7, #28]
}
 8005a04:	bf00      	nop
 8005a06:	e7fe      	b.n	8005a06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a0e:	6850      	ldr	r0, [r2, #4]
 8005a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a12:	6892      	ldr	r2, [r2, #8]
 8005a14:	4611      	mov	r1, r2
 8005a16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f2c0 80aa 	blt.w	8005b74 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d004      	beq.n	8005a36 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	3304      	adds	r3, #4
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fe f93b 	bl	8003cac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a36:	463b      	mov	r3, r7
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff ff6b 	bl	8005914 <prvSampleTimeNow>
 8005a3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b09      	cmp	r3, #9
 8005a44:	f200 8097 	bhi.w	8005b76 <prvProcessReceivedCommands+0x19e>
 8005a48:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <prvProcessReceivedCommands+0x78>)
 8005a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4e:	bf00      	nop
 8005a50:	08005a79 	.word	0x08005a79
 8005a54:	08005a79 	.word	0x08005a79
 8005a58:	08005a79 	.word	0x08005a79
 8005a5c:	08005aed 	.word	0x08005aed
 8005a60:	08005b01 	.word	0x08005b01
 8005a64:	08005b4b 	.word	0x08005b4b
 8005a68:	08005a79 	.word	0x08005a79
 8005a6c:	08005a79 	.word	0x08005a79
 8005a70:	08005aed 	.word	0x08005aed
 8005a74:	08005b01 	.word	0x08005b01
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a7e:	f043 0301 	orr.w	r3, r3, #1
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	18d1      	adds	r1, r2, r3
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a98:	f7ff ff5c 	bl	8005954 <prvInsertTimerInActiveList>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d069      	beq.n	8005b76 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aa8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d05e      	beq.n	8005b76 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	441a      	add	r2, r3
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aca:	f7ff fe05 	bl	80056d8 <xTimerGenericCommand>
 8005ace:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d14f      	bne.n	8005b76 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	61bb      	str	r3, [r7, #24]
}
 8005ae8:	bf00      	nop
 8005aea:	e7fe      	b.n	8005aea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005af2:	f023 0301 	bic.w	r3, r3, #1
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005afe:	e03a      	b.n	8005b76 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b06:	f043 0301 	orr.w	r3, r3, #1
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	617b      	str	r3, [r7, #20]
}
 8005b32:	bf00      	nop
 8005b34:	e7fe      	b.n	8005b34 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b38:	699a      	ldr	r2, [r3, #24]
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	18d1      	adds	r1, r2, r3
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b44:	f7ff ff06 	bl	8005954 <prvInsertTimerInActiveList>
					break;
 8005b48:	e015      	b.n	8005b76 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d103      	bne.n	8005b60 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b5a:	f000 fbe1 	bl	8006320 <vPortFree>
 8005b5e:	e00a      	b.n	8005b76 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b66:	f023 0301 	bic.w	r3, r3, #1
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b72:	e000      	b.n	8005b76 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005b74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b76:	4b08      	ldr	r3, [pc, #32]	; (8005b98 <prvProcessReceivedCommands+0x1c0>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	1d39      	adds	r1, r7, #4
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fe fb96 	bl	80042b0 <xQueueReceive>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f47f af2a 	bne.w	80059e0 <prvProcessReceivedCommands+0x8>
	}
}
 8005b8c:	bf00      	nop
 8005b8e:	bf00      	nop
 8005b90:	3730      	adds	r7, #48	; 0x30
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20001300 	.word	0x20001300

08005b9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ba2:	e048      	b.n	8005c36 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ba4:	4b2d      	ldr	r3, [pc, #180]	; (8005c5c <prvSwitchTimerLists+0xc0>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bae:	4b2b      	ldr	r3, [pc, #172]	; (8005c5c <prvSwitchTimerLists+0xc0>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fe f875 	bl	8003cac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d02e      	beq.n	8005c36 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4413      	add	r3, r2
 8005be0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d90e      	bls.n	8005c08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bf6:	4b19      	ldr	r3, [pc, #100]	; (8005c5c <prvSwitchTimerLists+0xc0>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f7fe f81a 	bl	8003c3a <vListInsert>
 8005c06:	e016      	b.n	8005c36 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c08:	2300      	movs	r3, #0
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	2100      	movs	r1, #0
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f7ff fd60 	bl	80056d8 <xTimerGenericCommand>
 8005c18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10a      	bne.n	8005c36 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	603b      	str	r3, [r7, #0]
}
 8005c32:	bf00      	nop
 8005c34:	e7fe      	b.n	8005c34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c36:	4b09      	ldr	r3, [pc, #36]	; (8005c5c <prvSwitchTimerLists+0xc0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1b1      	bne.n	8005ba4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c40:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <prvSwitchTimerLists+0xc0>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c46:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <prvSwitchTimerLists+0xc4>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a04      	ldr	r2, [pc, #16]	; (8005c5c <prvSwitchTimerLists+0xc0>)
 8005c4c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c4e:	4a04      	ldr	r2, [pc, #16]	; (8005c60 <prvSwitchTimerLists+0xc4>)
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	6013      	str	r3, [r2, #0]
}
 8005c54:	bf00      	nop
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	200012f8 	.word	0x200012f8
 8005c60:	200012fc 	.word	0x200012fc

08005c64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c6a:	f000 f96b 	bl	8005f44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c6e:	4b15      	ldr	r3, [pc, #84]	; (8005cc4 <prvCheckForValidListAndQueue+0x60>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d120      	bne.n	8005cb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c76:	4814      	ldr	r0, [pc, #80]	; (8005cc8 <prvCheckForValidListAndQueue+0x64>)
 8005c78:	f7fd ff8e 	bl	8003b98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c7c:	4813      	ldr	r0, [pc, #76]	; (8005ccc <prvCheckForValidListAndQueue+0x68>)
 8005c7e:	f7fd ff8b 	bl	8003b98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c82:	4b13      	ldr	r3, [pc, #76]	; (8005cd0 <prvCheckForValidListAndQueue+0x6c>)
 8005c84:	4a10      	ldr	r2, [pc, #64]	; (8005cc8 <prvCheckForValidListAndQueue+0x64>)
 8005c86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c88:	4b12      	ldr	r3, [pc, #72]	; (8005cd4 <prvCheckForValidListAndQueue+0x70>)
 8005c8a:	4a10      	ldr	r2, [pc, #64]	; (8005ccc <prvCheckForValidListAndQueue+0x68>)
 8005c8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c8e:	2300      	movs	r3, #0
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	4b11      	ldr	r3, [pc, #68]	; (8005cd8 <prvCheckForValidListAndQueue+0x74>)
 8005c94:	4a11      	ldr	r2, [pc, #68]	; (8005cdc <prvCheckForValidListAndQueue+0x78>)
 8005c96:	2110      	movs	r1, #16
 8005c98:	200a      	movs	r0, #10
 8005c9a:	f7fe f899 	bl	8003dd0 <xQueueGenericCreateStatic>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	4a08      	ldr	r2, [pc, #32]	; (8005cc4 <prvCheckForValidListAndQueue+0x60>)
 8005ca2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ca4:	4b07      	ldr	r3, [pc, #28]	; (8005cc4 <prvCheckForValidListAndQueue+0x60>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d005      	beq.n	8005cb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <prvCheckForValidListAndQueue+0x60>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	490b      	ldr	r1, [pc, #44]	; (8005ce0 <prvCheckForValidListAndQueue+0x7c>)
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe fd6c 	bl	8004790 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cb8:	f000 f974 	bl	8005fa4 <vPortExitCritical>
}
 8005cbc:	bf00      	nop
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20001300 	.word	0x20001300
 8005cc8:	200012d0 	.word	0x200012d0
 8005ccc:	200012e4 	.word	0x200012e4
 8005cd0:	200012f8 	.word	0x200012f8
 8005cd4:	200012fc 	.word	0x200012fc
 8005cd8:	200013ac 	.word	0x200013ac
 8005cdc:	2000130c 	.word	0x2000130c
 8005ce0:	08006f1c 	.word	0x08006f1c

08005ce4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	3b04      	subs	r3, #4
 8005cf4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3b04      	subs	r3, #4
 8005d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f023 0201 	bic.w	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3b04      	subs	r3, #4
 8005d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d14:	4a0c      	ldr	r2, [pc, #48]	; (8005d48 <pxPortInitialiseStack+0x64>)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3b14      	subs	r3, #20
 8005d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	3b04      	subs	r3, #4
 8005d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f06f 0202 	mvn.w	r2, #2
 8005d32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3b20      	subs	r3, #32
 8005d38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	08005d4d 	.word	0x08005d4d

08005d4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d56:	4b12      	ldr	r3, [pc, #72]	; (8005da0 <prvTaskExitError+0x54>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5e:	d00a      	beq.n	8005d76 <prvTaskExitError+0x2a>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	60fb      	str	r3, [r7, #12]
}
 8005d72:	bf00      	nop
 8005d74:	e7fe      	b.n	8005d74 <prvTaskExitError+0x28>
	__asm volatile
 8005d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	60bb      	str	r3, [r7, #8]
}
 8005d88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d8a:	bf00      	nop
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0fc      	beq.n	8005d8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d92:	bf00      	nop
 8005d94:	bf00      	nop
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	2000000c 	.word	0x2000000c
	...

08005db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005db0:	4b07      	ldr	r3, [pc, #28]	; (8005dd0 <pxCurrentTCBConst2>)
 8005db2:	6819      	ldr	r1, [r3, #0]
 8005db4:	6808      	ldr	r0, [r1, #0]
 8005db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dba:	f380 8809 	msr	PSP, r0
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f04f 0000 	mov.w	r0, #0
 8005dc6:	f380 8811 	msr	BASEPRI, r0
 8005dca:	4770      	bx	lr
 8005dcc:	f3af 8000 	nop.w

08005dd0 <pxCurrentTCBConst2>:
 8005dd0:	20000dd0 	.word	0x20000dd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop

08005dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005dd8:	4808      	ldr	r0, [pc, #32]	; (8005dfc <prvPortStartFirstTask+0x24>)
 8005dda:	6800      	ldr	r0, [r0, #0]
 8005ddc:	6800      	ldr	r0, [r0, #0]
 8005dde:	f380 8808 	msr	MSP, r0
 8005de2:	f04f 0000 	mov.w	r0, #0
 8005de6:	f380 8814 	msr	CONTROL, r0
 8005dea:	b662      	cpsie	i
 8005dec:	b661      	cpsie	f
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	df00      	svc	0
 8005df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005dfa:	bf00      	nop
 8005dfc:	e000ed08 	.word	0xe000ed08

08005e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e06:	4b46      	ldr	r3, [pc, #280]	; (8005f20 <xPortStartScheduler+0x120>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a46      	ldr	r2, [pc, #280]	; (8005f24 <xPortStartScheduler+0x124>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d10a      	bne.n	8005e26 <xPortStartScheduler+0x26>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	613b      	str	r3, [r7, #16]
}
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e26:	4b3e      	ldr	r3, [pc, #248]	; (8005f20 <xPortStartScheduler+0x120>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a3f      	ldr	r2, [pc, #252]	; (8005f28 <xPortStartScheduler+0x128>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d10a      	bne.n	8005e46 <xPortStartScheduler+0x46>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	60fb      	str	r3, [r7, #12]
}
 8005e42:	bf00      	nop
 8005e44:	e7fe      	b.n	8005e44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e46:	4b39      	ldr	r3, [pc, #228]	; (8005f2c <xPortStartScheduler+0x12c>)
 8005e48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	22ff      	movs	r2, #255	; 0xff
 8005e56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	4b31      	ldr	r3, [pc, #196]	; (8005f30 <xPortStartScheduler+0x130>)
 8005e6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e6e:	4b31      	ldr	r3, [pc, #196]	; (8005f34 <xPortStartScheduler+0x134>)
 8005e70:	2207      	movs	r2, #7
 8005e72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e74:	e009      	b.n	8005e8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005e76:	4b2f      	ldr	r3, [pc, #188]	; (8005f34 <xPortStartScheduler+0x134>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	4a2d      	ldr	r2, [pc, #180]	; (8005f34 <xPortStartScheduler+0x134>)
 8005e7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e80:	78fb      	ldrb	r3, [r7, #3]
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e8a:	78fb      	ldrb	r3, [r7, #3]
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e92:	2b80      	cmp	r3, #128	; 0x80
 8005e94:	d0ef      	beq.n	8005e76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e96:	4b27      	ldr	r3, [pc, #156]	; (8005f34 <xPortStartScheduler+0x134>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f1c3 0307 	rsb	r3, r3, #7
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d00a      	beq.n	8005eb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	60bb      	str	r3, [r7, #8]
}
 8005eb4:	bf00      	nop
 8005eb6:	e7fe      	b.n	8005eb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005eb8:	4b1e      	ldr	r3, [pc, #120]	; (8005f34 <xPortStartScheduler+0x134>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	021b      	lsls	r3, r3, #8
 8005ebe:	4a1d      	ldr	r2, [pc, #116]	; (8005f34 <xPortStartScheduler+0x134>)
 8005ec0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ec2:	4b1c      	ldr	r3, [pc, #112]	; (8005f34 <xPortStartScheduler+0x134>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005eca:	4a1a      	ldr	r2, [pc, #104]	; (8005f34 <xPortStartScheduler+0x134>)
 8005ecc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ed6:	4b18      	ldr	r3, [pc, #96]	; (8005f38 <xPortStartScheduler+0x138>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a17      	ldr	r2, [pc, #92]	; (8005f38 <xPortStartScheduler+0x138>)
 8005edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ee2:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <xPortStartScheduler+0x138>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a14      	ldr	r2, [pc, #80]	; (8005f38 <xPortStartScheduler+0x138>)
 8005ee8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005eec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005eee:	f000 f8dd 	bl	80060ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ef2:	4b12      	ldr	r3, [pc, #72]	; (8005f3c <xPortStartScheduler+0x13c>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ef8:	f000 f8fc 	bl	80060f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005efc:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <xPortStartScheduler+0x140>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a0f      	ldr	r2, [pc, #60]	; (8005f40 <xPortStartScheduler+0x140>)
 8005f02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f08:	f7ff ff66 	bl	8005dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f0c:	f7ff f850 	bl	8004fb0 <vTaskSwitchContext>
	prvTaskExitError();
 8005f10:	f7ff ff1c 	bl	8005d4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	e000ed00 	.word	0xe000ed00
 8005f24:	410fc271 	.word	0x410fc271
 8005f28:	410fc270 	.word	0x410fc270
 8005f2c:	e000e400 	.word	0xe000e400
 8005f30:	200013fc 	.word	0x200013fc
 8005f34:	20001400 	.word	0x20001400
 8005f38:	e000ed20 	.word	0xe000ed20
 8005f3c:	2000000c 	.word	0x2000000c
 8005f40:	e000ef34 	.word	0xe000ef34

08005f44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
	__asm volatile
 8005f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	607b      	str	r3, [r7, #4]
}
 8005f5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f5e:	4b0f      	ldr	r3, [pc, #60]	; (8005f9c <vPortEnterCritical+0x58>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3301      	adds	r3, #1
 8005f64:	4a0d      	ldr	r2, [pc, #52]	; (8005f9c <vPortEnterCritical+0x58>)
 8005f66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f68:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <vPortEnterCritical+0x58>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d10f      	bne.n	8005f90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f70:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <vPortEnterCritical+0x5c>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <vPortEnterCritical+0x4c>
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	603b      	str	r3, [r7, #0]
}
 8005f8c:	bf00      	nop
 8005f8e:	e7fe      	b.n	8005f8e <vPortEnterCritical+0x4a>
	}
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	2000000c 	.word	0x2000000c
 8005fa0:	e000ed04 	.word	0xe000ed04

08005fa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005faa:	4b12      	ldr	r3, [pc, #72]	; (8005ff4 <vPortExitCritical+0x50>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10a      	bne.n	8005fc8 <vPortExitCritical+0x24>
	__asm volatile
 8005fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	607b      	str	r3, [r7, #4]
}
 8005fc4:	bf00      	nop
 8005fc6:	e7fe      	b.n	8005fc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <vPortExitCritical+0x50>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	4a09      	ldr	r2, [pc, #36]	; (8005ff4 <vPortExitCritical+0x50>)
 8005fd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fd2:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <vPortExitCritical+0x50>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d105      	bne.n	8005fe6 <vPortExitCritical+0x42>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	f383 8811 	msr	BASEPRI, r3
}
 8005fe4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	2000000c 	.word	0x2000000c
	...

08006000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006000:	f3ef 8009 	mrs	r0, PSP
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	4b15      	ldr	r3, [pc, #84]	; (8006060 <pxCurrentTCBConst>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	f01e 0f10 	tst.w	lr, #16
 8006010:	bf08      	it	eq
 8006012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601a:	6010      	str	r0, [r2, #0]
 800601c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006024:	f380 8811 	msr	BASEPRI, r0
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f7fe ffbe 	bl	8004fb0 <vTaskSwitchContext>
 8006034:	f04f 0000 	mov.w	r0, #0
 8006038:	f380 8811 	msr	BASEPRI, r0
 800603c:	bc09      	pop	{r0, r3}
 800603e:	6819      	ldr	r1, [r3, #0]
 8006040:	6808      	ldr	r0, [r1, #0]
 8006042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006046:	f01e 0f10 	tst.w	lr, #16
 800604a:	bf08      	it	eq
 800604c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006050:	f380 8809 	msr	PSP, r0
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	f3af 8000 	nop.w

08006060 <pxCurrentTCBConst>:
 8006060:	20000dd0 	.word	0x20000dd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006064:	bf00      	nop
 8006066:	bf00      	nop

08006068 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	607b      	str	r3, [r7, #4]
}
 8006080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006082:	f7fe fedb 	bl	8004e3c <xTaskIncrementTick>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800608c:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <xPortSysTickHandler+0x40>)
 800608e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	2300      	movs	r3, #0
 8006096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	f383 8811 	msr	BASEPRI, r3
}
 800609e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80060a0:	bf00      	nop
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	e000ed04 	.word	0xe000ed04

080060ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060b0:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <vPortSetupTimerInterrupt+0x34>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060b6:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <vPortSetupTimerInterrupt+0x38>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060bc:	4b0a      	ldr	r3, [pc, #40]	; (80060e8 <vPortSetupTimerInterrupt+0x3c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a0a      	ldr	r2, [pc, #40]	; (80060ec <vPortSetupTimerInterrupt+0x40>)
 80060c2:	fba2 2303 	umull	r2, r3, r2, r3
 80060c6:	099b      	lsrs	r3, r3, #6
 80060c8:	4a09      	ldr	r2, [pc, #36]	; (80060f0 <vPortSetupTimerInterrupt+0x44>)
 80060ca:	3b01      	subs	r3, #1
 80060cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060ce:	4b04      	ldr	r3, [pc, #16]	; (80060e0 <vPortSetupTimerInterrupt+0x34>)
 80060d0:	2207      	movs	r2, #7
 80060d2:	601a      	str	r2, [r3, #0]
}
 80060d4:	bf00      	nop
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	e000e010 	.word	0xe000e010
 80060e4:	e000e018 	.word	0xe000e018
 80060e8:	20000000 	.word	0x20000000
 80060ec:	10624dd3 	.word	0x10624dd3
 80060f0:	e000e014 	.word	0xe000e014

080060f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006104 <vPortEnableVFP+0x10>
 80060f8:	6801      	ldr	r1, [r0, #0]
 80060fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80060fe:	6001      	str	r1, [r0, #0]
 8006100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006102:	bf00      	nop
 8006104:	e000ed88 	.word	0xe000ed88

08006108 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800610e:	f3ef 8305 	mrs	r3, IPSR
 8006112:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b0f      	cmp	r3, #15
 8006118:	d914      	bls.n	8006144 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800611a:	4a17      	ldr	r2, [pc, #92]	; (8006178 <vPortValidateInterruptPriority+0x70>)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4413      	add	r3, r2
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006124:	4b15      	ldr	r3, [pc, #84]	; (800617c <vPortValidateInterruptPriority+0x74>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	7afa      	ldrb	r2, [r7, #11]
 800612a:	429a      	cmp	r2, r3
 800612c:	d20a      	bcs.n	8006144 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	607b      	str	r3, [r7, #4]
}
 8006140:	bf00      	nop
 8006142:	e7fe      	b.n	8006142 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006144:	4b0e      	ldr	r3, [pc, #56]	; (8006180 <vPortValidateInterruptPriority+0x78>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800614c:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <vPortValidateInterruptPriority+0x7c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	429a      	cmp	r2, r3
 8006152:	d90a      	bls.n	800616a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	603b      	str	r3, [r7, #0]
}
 8006166:	bf00      	nop
 8006168:	e7fe      	b.n	8006168 <vPortValidateInterruptPriority+0x60>
	}
 800616a:	bf00      	nop
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	e000e3f0 	.word	0xe000e3f0
 800617c:	200013fc 	.word	0x200013fc
 8006180:	e000ed0c 	.word	0xe000ed0c
 8006184:	20001400 	.word	0x20001400

08006188 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08a      	sub	sp, #40	; 0x28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006190:	2300      	movs	r3, #0
 8006192:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006194:	f7fe fd96 	bl	8004cc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006198:	4b5b      	ldr	r3, [pc, #364]	; (8006308 <pvPortMalloc+0x180>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061a0:	f000 f920 	bl	80063e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061a4:	4b59      	ldr	r3, [pc, #356]	; (800630c <pvPortMalloc+0x184>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4013      	ands	r3, r2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f040 8093 	bne.w	80062d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01d      	beq.n	80061f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80061b8:	2208      	movs	r2, #8
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4413      	add	r3, r2
 80061be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d014      	beq.n	80061f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f023 0307 	bic.w	r3, r3, #7
 80061d0:	3308      	adds	r3, #8
 80061d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <pvPortMalloc+0x6c>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	617b      	str	r3, [r7, #20]
}
 80061f0:	bf00      	nop
 80061f2:	e7fe      	b.n	80061f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d06e      	beq.n	80062d8 <pvPortMalloc+0x150>
 80061fa:	4b45      	ldr	r3, [pc, #276]	; (8006310 <pvPortMalloc+0x188>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	429a      	cmp	r2, r3
 8006202:	d869      	bhi.n	80062d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006204:	4b43      	ldr	r3, [pc, #268]	; (8006314 <pvPortMalloc+0x18c>)
 8006206:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006208:	4b42      	ldr	r3, [pc, #264]	; (8006314 <pvPortMalloc+0x18c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800620e:	e004      	b.n	800621a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	429a      	cmp	r2, r3
 8006222:	d903      	bls.n	800622c <pvPortMalloc+0xa4>
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1f1      	bne.n	8006210 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800622c:	4b36      	ldr	r3, [pc, #216]	; (8006308 <pvPortMalloc+0x180>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006232:	429a      	cmp	r2, r3
 8006234:	d050      	beq.n	80062d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2208      	movs	r2, #8
 800623c:	4413      	add	r3, r2
 800623e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	1ad2      	subs	r2, r2, r3
 8006250:	2308      	movs	r3, #8
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	429a      	cmp	r2, r3
 8006256:	d91f      	bls.n	8006298 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4413      	add	r3, r2
 800625e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	f003 0307 	and.w	r3, r3, #7
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <pvPortMalloc+0xf8>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	613b      	str	r3, [r7, #16]
}
 800627c:	bf00      	nop
 800627e:	e7fe      	b.n	800627e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	1ad2      	subs	r2, r2, r3
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006292:	69b8      	ldr	r0, [r7, #24]
 8006294:	f000 f908 	bl	80064a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006298:	4b1d      	ldr	r3, [pc, #116]	; (8006310 <pvPortMalloc+0x188>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	4a1b      	ldr	r2, [pc, #108]	; (8006310 <pvPortMalloc+0x188>)
 80062a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062a6:	4b1a      	ldr	r3, [pc, #104]	; (8006310 <pvPortMalloc+0x188>)
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <pvPortMalloc+0x190>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d203      	bcs.n	80062ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062b2:	4b17      	ldr	r3, [pc, #92]	; (8006310 <pvPortMalloc+0x188>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a18      	ldr	r2, [pc, #96]	; (8006318 <pvPortMalloc+0x190>)
 80062b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	4b13      	ldr	r3, [pc, #76]	; (800630c <pvPortMalloc+0x184>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062ce:	4b13      	ldr	r3, [pc, #76]	; (800631c <pvPortMalloc+0x194>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3301      	adds	r3, #1
 80062d4:	4a11      	ldr	r2, [pc, #68]	; (800631c <pvPortMalloc+0x194>)
 80062d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062d8:	f7fe fd02 	bl	8004ce0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	f003 0307 	and.w	r3, r3, #7
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00a      	beq.n	80062fc <pvPortMalloc+0x174>
	__asm volatile
 80062e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	60fb      	str	r3, [r7, #12]
}
 80062f8:	bf00      	nop
 80062fa:	e7fe      	b.n	80062fa <pvPortMalloc+0x172>
	return pvReturn;
 80062fc:	69fb      	ldr	r3, [r7, #28]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3728      	adds	r7, #40	; 0x28
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	2000500c 	.word	0x2000500c
 800630c:	20005020 	.word	0x20005020
 8006310:	20005010 	.word	0x20005010
 8006314:	20005004 	.word	0x20005004
 8006318:	20005014 	.word	0x20005014
 800631c:	20005018 	.word	0x20005018

08006320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d04d      	beq.n	80063ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006332:	2308      	movs	r3, #8
 8006334:	425b      	negs	r3, r3
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4413      	add	r3, r2
 800633a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	4b24      	ldr	r3, [pc, #144]	; (80063d8 <vPortFree+0xb8>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4013      	ands	r3, r2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <vPortFree+0x44>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	60fb      	str	r3, [r7, #12]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <vPortFree+0x62>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	60bb      	str	r3, [r7, #8]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	4b14      	ldr	r3, [pc, #80]	; (80063d8 <vPortFree+0xb8>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01e      	beq.n	80063ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d11a      	bne.n	80063ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <vPortFree+0xb8>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	43db      	mvns	r3, r3
 80063a2:	401a      	ands	r2, r3
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063a8:	f7fe fc8c 	bl	8004cc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <vPortFree+0xbc>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4413      	add	r3, r2
 80063b6:	4a09      	ldr	r2, [pc, #36]	; (80063dc <vPortFree+0xbc>)
 80063b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063ba:	6938      	ldr	r0, [r7, #16]
 80063bc:	f000 f874 	bl	80064a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063c0:	4b07      	ldr	r3, [pc, #28]	; (80063e0 <vPortFree+0xc0>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3301      	adds	r3, #1
 80063c6:	4a06      	ldr	r2, [pc, #24]	; (80063e0 <vPortFree+0xc0>)
 80063c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063ca:	f7fe fc89 	bl	8004ce0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063ce:	bf00      	nop
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20005020 	.word	0x20005020
 80063dc:	20005010 	.word	0x20005010
 80063e0:	2000501c 	.word	0x2000501c

080063e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80063ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063f0:	4b27      	ldr	r3, [pc, #156]	; (8006490 <prvHeapInit+0xac>)
 80063f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00c      	beq.n	8006418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3307      	adds	r3, #7
 8006402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0307 	bic.w	r3, r3, #7
 800640a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	4a1f      	ldr	r2, [pc, #124]	; (8006490 <prvHeapInit+0xac>)
 8006414:	4413      	add	r3, r2
 8006416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800641c:	4a1d      	ldr	r2, [pc, #116]	; (8006494 <prvHeapInit+0xb0>)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006422:	4b1c      	ldr	r3, [pc, #112]	; (8006494 <prvHeapInit+0xb0>)
 8006424:	2200      	movs	r2, #0
 8006426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	4413      	add	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006430:	2208      	movs	r2, #8
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1a9b      	subs	r3, r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0307 	bic.w	r3, r3, #7
 800643e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4a15      	ldr	r2, [pc, #84]	; (8006498 <prvHeapInit+0xb4>)
 8006444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006446:	4b14      	ldr	r3, [pc, #80]	; (8006498 <prvHeapInit+0xb4>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800644e:	4b12      	ldr	r3, [pc, #72]	; (8006498 <prvHeapInit+0xb4>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	1ad2      	subs	r2, r2, r3
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006464:	4b0c      	ldr	r3, [pc, #48]	; (8006498 <prvHeapInit+0xb4>)
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	4a0a      	ldr	r2, [pc, #40]	; (800649c <prvHeapInit+0xb8>)
 8006472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	4a09      	ldr	r2, [pc, #36]	; (80064a0 <prvHeapInit+0xbc>)
 800647a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800647c:	4b09      	ldr	r3, [pc, #36]	; (80064a4 <prvHeapInit+0xc0>)
 800647e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006482:	601a      	str	r2, [r3, #0]
}
 8006484:	bf00      	nop
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	20001404 	.word	0x20001404
 8006494:	20005004 	.word	0x20005004
 8006498:	2000500c 	.word	0x2000500c
 800649c:	20005014 	.word	0x20005014
 80064a0:	20005010 	.word	0x20005010
 80064a4:	20005020 	.word	0x20005020

080064a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064b0:	4b28      	ldr	r3, [pc, #160]	; (8006554 <prvInsertBlockIntoFreeList+0xac>)
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	e002      	b.n	80064bc <prvInsertBlockIntoFreeList+0x14>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d8f7      	bhi.n	80064b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	4413      	add	r3, r2
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d108      	bne.n	80064ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	441a      	add	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	441a      	add	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d118      	bne.n	8006530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	4b15      	ldr	r3, [pc, #84]	; (8006558 <prvInsertBlockIntoFreeList+0xb0>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d00d      	beq.n	8006526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	441a      	add	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	e008      	b.n	8006538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006526:	4b0c      	ldr	r3, [pc, #48]	; (8006558 <prvInsertBlockIntoFreeList+0xb0>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	e003      	b.n	8006538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	429a      	cmp	r2, r3
 800653e:	d002      	beq.n	8006546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006546:	bf00      	nop
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20005004 	.word	0x20005004
 8006558:	2000500c 	.word	0x2000500c

0800655c <__errno>:
 800655c:	4b01      	ldr	r3, [pc, #4]	; (8006564 <__errno+0x8>)
 800655e:	6818      	ldr	r0, [r3, #0]
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	20000010 	.word	0x20000010

08006568 <__libc_init_array>:
 8006568:	b570      	push	{r4, r5, r6, lr}
 800656a:	4d0d      	ldr	r5, [pc, #52]	; (80065a0 <__libc_init_array+0x38>)
 800656c:	4c0d      	ldr	r4, [pc, #52]	; (80065a4 <__libc_init_array+0x3c>)
 800656e:	1b64      	subs	r4, r4, r5
 8006570:	10a4      	asrs	r4, r4, #2
 8006572:	2600      	movs	r6, #0
 8006574:	42a6      	cmp	r6, r4
 8006576:	d109      	bne.n	800658c <__libc_init_array+0x24>
 8006578:	4d0b      	ldr	r5, [pc, #44]	; (80065a8 <__libc_init_array+0x40>)
 800657a:	4c0c      	ldr	r4, [pc, #48]	; (80065ac <__libc_init_array+0x44>)
 800657c:	f000 fc8e 	bl	8006e9c <_init>
 8006580:	1b64      	subs	r4, r4, r5
 8006582:	10a4      	asrs	r4, r4, #2
 8006584:	2600      	movs	r6, #0
 8006586:	42a6      	cmp	r6, r4
 8006588:	d105      	bne.n	8006596 <__libc_init_array+0x2e>
 800658a:	bd70      	pop	{r4, r5, r6, pc}
 800658c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006590:	4798      	blx	r3
 8006592:	3601      	adds	r6, #1
 8006594:	e7ee      	b.n	8006574 <__libc_init_array+0xc>
 8006596:	f855 3b04 	ldr.w	r3, [r5], #4
 800659a:	4798      	blx	r3
 800659c:	3601      	adds	r6, #1
 800659e:	e7f2      	b.n	8006586 <__libc_init_array+0x1e>
 80065a0:	08006ffc 	.word	0x08006ffc
 80065a4:	08006ffc 	.word	0x08006ffc
 80065a8:	08006ffc 	.word	0x08006ffc
 80065ac:	08007000 	.word	0x08007000

080065b0 <memcpy>:
 80065b0:	440a      	add	r2, r1
 80065b2:	4291      	cmp	r1, r2
 80065b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80065b8:	d100      	bne.n	80065bc <memcpy+0xc>
 80065ba:	4770      	bx	lr
 80065bc:	b510      	push	{r4, lr}
 80065be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065c6:	4291      	cmp	r1, r2
 80065c8:	d1f9      	bne.n	80065be <memcpy+0xe>
 80065ca:	bd10      	pop	{r4, pc}

080065cc <memset>:
 80065cc:	4402      	add	r2, r0
 80065ce:	4603      	mov	r3, r0
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d100      	bne.n	80065d6 <memset+0xa>
 80065d4:	4770      	bx	lr
 80065d6:	f803 1b01 	strb.w	r1, [r3], #1
 80065da:	e7f9      	b.n	80065d0 <memset+0x4>

080065dc <siprintf>:
 80065dc:	b40e      	push	{r1, r2, r3}
 80065de:	b500      	push	{lr}
 80065e0:	b09c      	sub	sp, #112	; 0x70
 80065e2:	ab1d      	add	r3, sp, #116	; 0x74
 80065e4:	9002      	str	r0, [sp, #8]
 80065e6:	9006      	str	r0, [sp, #24]
 80065e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065ec:	4809      	ldr	r0, [pc, #36]	; (8006614 <siprintf+0x38>)
 80065ee:	9107      	str	r1, [sp, #28]
 80065f0:	9104      	str	r1, [sp, #16]
 80065f2:	4909      	ldr	r1, [pc, #36]	; (8006618 <siprintf+0x3c>)
 80065f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065f8:	9105      	str	r1, [sp, #20]
 80065fa:	6800      	ldr	r0, [r0, #0]
 80065fc:	9301      	str	r3, [sp, #4]
 80065fe:	a902      	add	r1, sp, #8
 8006600:	f000 f868 	bl	80066d4 <_svfiprintf_r>
 8006604:	9b02      	ldr	r3, [sp, #8]
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	b01c      	add	sp, #112	; 0x70
 800660c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006610:	b003      	add	sp, #12
 8006612:	4770      	bx	lr
 8006614:	20000010 	.word	0x20000010
 8006618:	ffff0208 	.word	0xffff0208

0800661c <__ssputs_r>:
 800661c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006620:	688e      	ldr	r6, [r1, #8]
 8006622:	429e      	cmp	r6, r3
 8006624:	4682      	mov	sl, r0
 8006626:	460c      	mov	r4, r1
 8006628:	4690      	mov	r8, r2
 800662a:	461f      	mov	r7, r3
 800662c:	d838      	bhi.n	80066a0 <__ssputs_r+0x84>
 800662e:	898a      	ldrh	r2, [r1, #12]
 8006630:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006634:	d032      	beq.n	800669c <__ssputs_r+0x80>
 8006636:	6825      	ldr	r5, [r4, #0]
 8006638:	6909      	ldr	r1, [r1, #16]
 800663a:	eba5 0901 	sub.w	r9, r5, r1
 800663e:	6965      	ldr	r5, [r4, #20]
 8006640:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006644:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006648:	3301      	adds	r3, #1
 800664a:	444b      	add	r3, r9
 800664c:	106d      	asrs	r5, r5, #1
 800664e:	429d      	cmp	r5, r3
 8006650:	bf38      	it	cc
 8006652:	461d      	movcc	r5, r3
 8006654:	0553      	lsls	r3, r2, #21
 8006656:	d531      	bpl.n	80066bc <__ssputs_r+0xa0>
 8006658:	4629      	mov	r1, r5
 800665a:	f000 fb55 	bl	8006d08 <_malloc_r>
 800665e:	4606      	mov	r6, r0
 8006660:	b950      	cbnz	r0, 8006678 <__ssputs_r+0x5c>
 8006662:	230c      	movs	r3, #12
 8006664:	f8ca 3000 	str.w	r3, [sl]
 8006668:	89a3      	ldrh	r3, [r4, #12]
 800666a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800666e:	81a3      	strh	r3, [r4, #12]
 8006670:	f04f 30ff 	mov.w	r0, #4294967295
 8006674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006678:	6921      	ldr	r1, [r4, #16]
 800667a:	464a      	mov	r2, r9
 800667c:	f7ff ff98 	bl	80065b0 <memcpy>
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668a:	81a3      	strh	r3, [r4, #12]
 800668c:	6126      	str	r6, [r4, #16]
 800668e:	6165      	str	r5, [r4, #20]
 8006690:	444e      	add	r6, r9
 8006692:	eba5 0509 	sub.w	r5, r5, r9
 8006696:	6026      	str	r6, [r4, #0]
 8006698:	60a5      	str	r5, [r4, #8]
 800669a:	463e      	mov	r6, r7
 800669c:	42be      	cmp	r6, r7
 800669e:	d900      	bls.n	80066a2 <__ssputs_r+0x86>
 80066a0:	463e      	mov	r6, r7
 80066a2:	6820      	ldr	r0, [r4, #0]
 80066a4:	4632      	mov	r2, r6
 80066a6:	4641      	mov	r1, r8
 80066a8:	f000 faa8 	bl	8006bfc <memmove>
 80066ac:	68a3      	ldr	r3, [r4, #8]
 80066ae:	1b9b      	subs	r3, r3, r6
 80066b0:	60a3      	str	r3, [r4, #8]
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	4433      	add	r3, r6
 80066b6:	6023      	str	r3, [r4, #0]
 80066b8:	2000      	movs	r0, #0
 80066ba:	e7db      	b.n	8006674 <__ssputs_r+0x58>
 80066bc:	462a      	mov	r2, r5
 80066be:	f000 fb97 	bl	8006df0 <_realloc_r>
 80066c2:	4606      	mov	r6, r0
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d1e1      	bne.n	800668c <__ssputs_r+0x70>
 80066c8:	6921      	ldr	r1, [r4, #16]
 80066ca:	4650      	mov	r0, sl
 80066cc:	f000 fab0 	bl	8006c30 <_free_r>
 80066d0:	e7c7      	b.n	8006662 <__ssputs_r+0x46>
	...

080066d4 <_svfiprintf_r>:
 80066d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d8:	4698      	mov	r8, r3
 80066da:	898b      	ldrh	r3, [r1, #12]
 80066dc:	061b      	lsls	r3, r3, #24
 80066de:	b09d      	sub	sp, #116	; 0x74
 80066e0:	4607      	mov	r7, r0
 80066e2:	460d      	mov	r5, r1
 80066e4:	4614      	mov	r4, r2
 80066e6:	d50e      	bpl.n	8006706 <_svfiprintf_r+0x32>
 80066e8:	690b      	ldr	r3, [r1, #16]
 80066ea:	b963      	cbnz	r3, 8006706 <_svfiprintf_r+0x32>
 80066ec:	2140      	movs	r1, #64	; 0x40
 80066ee:	f000 fb0b 	bl	8006d08 <_malloc_r>
 80066f2:	6028      	str	r0, [r5, #0]
 80066f4:	6128      	str	r0, [r5, #16]
 80066f6:	b920      	cbnz	r0, 8006702 <_svfiprintf_r+0x2e>
 80066f8:	230c      	movs	r3, #12
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006700:	e0d1      	b.n	80068a6 <_svfiprintf_r+0x1d2>
 8006702:	2340      	movs	r3, #64	; 0x40
 8006704:	616b      	str	r3, [r5, #20]
 8006706:	2300      	movs	r3, #0
 8006708:	9309      	str	r3, [sp, #36]	; 0x24
 800670a:	2320      	movs	r3, #32
 800670c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006710:	f8cd 800c 	str.w	r8, [sp, #12]
 8006714:	2330      	movs	r3, #48	; 0x30
 8006716:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80068c0 <_svfiprintf_r+0x1ec>
 800671a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800671e:	f04f 0901 	mov.w	r9, #1
 8006722:	4623      	mov	r3, r4
 8006724:	469a      	mov	sl, r3
 8006726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800672a:	b10a      	cbz	r2, 8006730 <_svfiprintf_r+0x5c>
 800672c:	2a25      	cmp	r2, #37	; 0x25
 800672e:	d1f9      	bne.n	8006724 <_svfiprintf_r+0x50>
 8006730:	ebba 0b04 	subs.w	fp, sl, r4
 8006734:	d00b      	beq.n	800674e <_svfiprintf_r+0x7a>
 8006736:	465b      	mov	r3, fp
 8006738:	4622      	mov	r2, r4
 800673a:	4629      	mov	r1, r5
 800673c:	4638      	mov	r0, r7
 800673e:	f7ff ff6d 	bl	800661c <__ssputs_r>
 8006742:	3001      	adds	r0, #1
 8006744:	f000 80aa 	beq.w	800689c <_svfiprintf_r+0x1c8>
 8006748:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800674a:	445a      	add	r2, fp
 800674c:	9209      	str	r2, [sp, #36]	; 0x24
 800674e:	f89a 3000 	ldrb.w	r3, [sl]
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 80a2 	beq.w	800689c <_svfiprintf_r+0x1c8>
 8006758:	2300      	movs	r3, #0
 800675a:	f04f 32ff 	mov.w	r2, #4294967295
 800675e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006762:	f10a 0a01 	add.w	sl, sl, #1
 8006766:	9304      	str	r3, [sp, #16]
 8006768:	9307      	str	r3, [sp, #28]
 800676a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800676e:	931a      	str	r3, [sp, #104]	; 0x68
 8006770:	4654      	mov	r4, sl
 8006772:	2205      	movs	r2, #5
 8006774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006778:	4851      	ldr	r0, [pc, #324]	; (80068c0 <_svfiprintf_r+0x1ec>)
 800677a:	f7f9 fd31 	bl	80001e0 <memchr>
 800677e:	9a04      	ldr	r2, [sp, #16]
 8006780:	b9d8      	cbnz	r0, 80067ba <_svfiprintf_r+0xe6>
 8006782:	06d0      	lsls	r0, r2, #27
 8006784:	bf44      	itt	mi
 8006786:	2320      	movmi	r3, #32
 8006788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800678c:	0711      	lsls	r1, r2, #28
 800678e:	bf44      	itt	mi
 8006790:	232b      	movmi	r3, #43	; 0x2b
 8006792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006796:	f89a 3000 	ldrb.w	r3, [sl]
 800679a:	2b2a      	cmp	r3, #42	; 0x2a
 800679c:	d015      	beq.n	80067ca <_svfiprintf_r+0xf6>
 800679e:	9a07      	ldr	r2, [sp, #28]
 80067a0:	4654      	mov	r4, sl
 80067a2:	2000      	movs	r0, #0
 80067a4:	f04f 0c0a 	mov.w	ip, #10
 80067a8:	4621      	mov	r1, r4
 80067aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067ae:	3b30      	subs	r3, #48	; 0x30
 80067b0:	2b09      	cmp	r3, #9
 80067b2:	d94e      	bls.n	8006852 <_svfiprintf_r+0x17e>
 80067b4:	b1b0      	cbz	r0, 80067e4 <_svfiprintf_r+0x110>
 80067b6:	9207      	str	r2, [sp, #28]
 80067b8:	e014      	b.n	80067e4 <_svfiprintf_r+0x110>
 80067ba:	eba0 0308 	sub.w	r3, r0, r8
 80067be:	fa09 f303 	lsl.w	r3, r9, r3
 80067c2:	4313      	orrs	r3, r2
 80067c4:	9304      	str	r3, [sp, #16]
 80067c6:	46a2      	mov	sl, r4
 80067c8:	e7d2      	b.n	8006770 <_svfiprintf_r+0x9c>
 80067ca:	9b03      	ldr	r3, [sp, #12]
 80067cc:	1d19      	adds	r1, r3, #4
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	9103      	str	r1, [sp, #12]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	bfbb      	ittet	lt
 80067d6:	425b      	neglt	r3, r3
 80067d8:	f042 0202 	orrlt.w	r2, r2, #2
 80067dc:	9307      	strge	r3, [sp, #28]
 80067de:	9307      	strlt	r3, [sp, #28]
 80067e0:	bfb8      	it	lt
 80067e2:	9204      	strlt	r2, [sp, #16]
 80067e4:	7823      	ldrb	r3, [r4, #0]
 80067e6:	2b2e      	cmp	r3, #46	; 0x2e
 80067e8:	d10c      	bne.n	8006804 <_svfiprintf_r+0x130>
 80067ea:	7863      	ldrb	r3, [r4, #1]
 80067ec:	2b2a      	cmp	r3, #42	; 0x2a
 80067ee:	d135      	bne.n	800685c <_svfiprintf_r+0x188>
 80067f0:	9b03      	ldr	r3, [sp, #12]
 80067f2:	1d1a      	adds	r2, r3, #4
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	9203      	str	r2, [sp, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	bfb8      	it	lt
 80067fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006800:	3402      	adds	r4, #2
 8006802:	9305      	str	r3, [sp, #20]
 8006804:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80068d0 <_svfiprintf_r+0x1fc>
 8006808:	7821      	ldrb	r1, [r4, #0]
 800680a:	2203      	movs	r2, #3
 800680c:	4650      	mov	r0, sl
 800680e:	f7f9 fce7 	bl	80001e0 <memchr>
 8006812:	b140      	cbz	r0, 8006826 <_svfiprintf_r+0x152>
 8006814:	2340      	movs	r3, #64	; 0x40
 8006816:	eba0 000a 	sub.w	r0, r0, sl
 800681a:	fa03 f000 	lsl.w	r0, r3, r0
 800681e:	9b04      	ldr	r3, [sp, #16]
 8006820:	4303      	orrs	r3, r0
 8006822:	3401      	adds	r4, #1
 8006824:	9304      	str	r3, [sp, #16]
 8006826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800682a:	4826      	ldr	r0, [pc, #152]	; (80068c4 <_svfiprintf_r+0x1f0>)
 800682c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006830:	2206      	movs	r2, #6
 8006832:	f7f9 fcd5 	bl	80001e0 <memchr>
 8006836:	2800      	cmp	r0, #0
 8006838:	d038      	beq.n	80068ac <_svfiprintf_r+0x1d8>
 800683a:	4b23      	ldr	r3, [pc, #140]	; (80068c8 <_svfiprintf_r+0x1f4>)
 800683c:	bb1b      	cbnz	r3, 8006886 <_svfiprintf_r+0x1b2>
 800683e:	9b03      	ldr	r3, [sp, #12]
 8006840:	3307      	adds	r3, #7
 8006842:	f023 0307 	bic.w	r3, r3, #7
 8006846:	3308      	adds	r3, #8
 8006848:	9303      	str	r3, [sp, #12]
 800684a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800684c:	4433      	add	r3, r6
 800684e:	9309      	str	r3, [sp, #36]	; 0x24
 8006850:	e767      	b.n	8006722 <_svfiprintf_r+0x4e>
 8006852:	fb0c 3202 	mla	r2, ip, r2, r3
 8006856:	460c      	mov	r4, r1
 8006858:	2001      	movs	r0, #1
 800685a:	e7a5      	b.n	80067a8 <_svfiprintf_r+0xd4>
 800685c:	2300      	movs	r3, #0
 800685e:	3401      	adds	r4, #1
 8006860:	9305      	str	r3, [sp, #20]
 8006862:	4619      	mov	r1, r3
 8006864:	f04f 0c0a 	mov.w	ip, #10
 8006868:	4620      	mov	r0, r4
 800686a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800686e:	3a30      	subs	r2, #48	; 0x30
 8006870:	2a09      	cmp	r2, #9
 8006872:	d903      	bls.n	800687c <_svfiprintf_r+0x1a8>
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0c5      	beq.n	8006804 <_svfiprintf_r+0x130>
 8006878:	9105      	str	r1, [sp, #20]
 800687a:	e7c3      	b.n	8006804 <_svfiprintf_r+0x130>
 800687c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006880:	4604      	mov	r4, r0
 8006882:	2301      	movs	r3, #1
 8006884:	e7f0      	b.n	8006868 <_svfiprintf_r+0x194>
 8006886:	ab03      	add	r3, sp, #12
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	462a      	mov	r2, r5
 800688c:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <_svfiprintf_r+0x1f8>)
 800688e:	a904      	add	r1, sp, #16
 8006890:	4638      	mov	r0, r7
 8006892:	f3af 8000 	nop.w
 8006896:	1c42      	adds	r2, r0, #1
 8006898:	4606      	mov	r6, r0
 800689a:	d1d6      	bne.n	800684a <_svfiprintf_r+0x176>
 800689c:	89ab      	ldrh	r3, [r5, #12]
 800689e:	065b      	lsls	r3, r3, #25
 80068a0:	f53f af2c 	bmi.w	80066fc <_svfiprintf_r+0x28>
 80068a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068a6:	b01d      	add	sp, #116	; 0x74
 80068a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ac:	ab03      	add	r3, sp, #12
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	462a      	mov	r2, r5
 80068b2:	4b06      	ldr	r3, [pc, #24]	; (80068cc <_svfiprintf_r+0x1f8>)
 80068b4:	a904      	add	r1, sp, #16
 80068b6:	4638      	mov	r0, r7
 80068b8:	f000 f87a 	bl	80069b0 <_printf_i>
 80068bc:	e7eb      	b.n	8006896 <_svfiprintf_r+0x1c2>
 80068be:	bf00      	nop
 80068c0:	08006fc0 	.word	0x08006fc0
 80068c4:	08006fca 	.word	0x08006fca
 80068c8:	00000000 	.word	0x00000000
 80068cc:	0800661d 	.word	0x0800661d
 80068d0:	08006fc6 	.word	0x08006fc6

080068d4 <_printf_common>:
 80068d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068d8:	4616      	mov	r6, r2
 80068da:	4699      	mov	r9, r3
 80068dc:	688a      	ldr	r2, [r1, #8]
 80068de:	690b      	ldr	r3, [r1, #16]
 80068e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068e4:	4293      	cmp	r3, r2
 80068e6:	bfb8      	it	lt
 80068e8:	4613      	movlt	r3, r2
 80068ea:	6033      	str	r3, [r6, #0]
 80068ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068f0:	4607      	mov	r7, r0
 80068f2:	460c      	mov	r4, r1
 80068f4:	b10a      	cbz	r2, 80068fa <_printf_common+0x26>
 80068f6:	3301      	adds	r3, #1
 80068f8:	6033      	str	r3, [r6, #0]
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	0699      	lsls	r1, r3, #26
 80068fe:	bf42      	ittt	mi
 8006900:	6833      	ldrmi	r3, [r6, #0]
 8006902:	3302      	addmi	r3, #2
 8006904:	6033      	strmi	r3, [r6, #0]
 8006906:	6825      	ldr	r5, [r4, #0]
 8006908:	f015 0506 	ands.w	r5, r5, #6
 800690c:	d106      	bne.n	800691c <_printf_common+0x48>
 800690e:	f104 0a19 	add.w	sl, r4, #25
 8006912:	68e3      	ldr	r3, [r4, #12]
 8006914:	6832      	ldr	r2, [r6, #0]
 8006916:	1a9b      	subs	r3, r3, r2
 8006918:	42ab      	cmp	r3, r5
 800691a:	dc26      	bgt.n	800696a <_printf_common+0x96>
 800691c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006920:	1e13      	subs	r3, r2, #0
 8006922:	6822      	ldr	r2, [r4, #0]
 8006924:	bf18      	it	ne
 8006926:	2301      	movne	r3, #1
 8006928:	0692      	lsls	r2, r2, #26
 800692a:	d42b      	bmi.n	8006984 <_printf_common+0xb0>
 800692c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006930:	4649      	mov	r1, r9
 8006932:	4638      	mov	r0, r7
 8006934:	47c0      	blx	r8
 8006936:	3001      	adds	r0, #1
 8006938:	d01e      	beq.n	8006978 <_printf_common+0xa4>
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	68e5      	ldr	r5, [r4, #12]
 800693e:	6832      	ldr	r2, [r6, #0]
 8006940:	f003 0306 	and.w	r3, r3, #6
 8006944:	2b04      	cmp	r3, #4
 8006946:	bf08      	it	eq
 8006948:	1aad      	subeq	r5, r5, r2
 800694a:	68a3      	ldr	r3, [r4, #8]
 800694c:	6922      	ldr	r2, [r4, #16]
 800694e:	bf0c      	ite	eq
 8006950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006954:	2500      	movne	r5, #0
 8006956:	4293      	cmp	r3, r2
 8006958:	bfc4      	itt	gt
 800695a:	1a9b      	subgt	r3, r3, r2
 800695c:	18ed      	addgt	r5, r5, r3
 800695e:	2600      	movs	r6, #0
 8006960:	341a      	adds	r4, #26
 8006962:	42b5      	cmp	r5, r6
 8006964:	d11a      	bne.n	800699c <_printf_common+0xc8>
 8006966:	2000      	movs	r0, #0
 8006968:	e008      	b.n	800697c <_printf_common+0xa8>
 800696a:	2301      	movs	r3, #1
 800696c:	4652      	mov	r2, sl
 800696e:	4649      	mov	r1, r9
 8006970:	4638      	mov	r0, r7
 8006972:	47c0      	blx	r8
 8006974:	3001      	adds	r0, #1
 8006976:	d103      	bne.n	8006980 <_printf_common+0xac>
 8006978:	f04f 30ff 	mov.w	r0, #4294967295
 800697c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006980:	3501      	adds	r5, #1
 8006982:	e7c6      	b.n	8006912 <_printf_common+0x3e>
 8006984:	18e1      	adds	r1, r4, r3
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	2030      	movs	r0, #48	; 0x30
 800698a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800698e:	4422      	add	r2, r4
 8006990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006998:	3302      	adds	r3, #2
 800699a:	e7c7      	b.n	800692c <_printf_common+0x58>
 800699c:	2301      	movs	r3, #1
 800699e:	4622      	mov	r2, r4
 80069a0:	4649      	mov	r1, r9
 80069a2:	4638      	mov	r0, r7
 80069a4:	47c0      	blx	r8
 80069a6:	3001      	adds	r0, #1
 80069a8:	d0e6      	beq.n	8006978 <_printf_common+0xa4>
 80069aa:	3601      	adds	r6, #1
 80069ac:	e7d9      	b.n	8006962 <_printf_common+0x8e>
	...

080069b0 <_printf_i>:
 80069b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069b4:	7e0f      	ldrb	r7, [r1, #24]
 80069b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069b8:	2f78      	cmp	r7, #120	; 0x78
 80069ba:	4691      	mov	r9, r2
 80069bc:	4680      	mov	r8, r0
 80069be:	460c      	mov	r4, r1
 80069c0:	469a      	mov	sl, r3
 80069c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069c6:	d807      	bhi.n	80069d8 <_printf_i+0x28>
 80069c8:	2f62      	cmp	r7, #98	; 0x62
 80069ca:	d80a      	bhi.n	80069e2 <_printf_i+0x32>
 80069cc:	2f00      	cmp	r7, #0
 80069ce:	f000 80d8 	beq.w	8006b82 <_printf_i+0x1d2>
 80069d2:	2f58      	cmp	r7, #88	; 0x58
 80069d4:	f000 80a3 	beq.w	8006b1e <_printf_i+0x16e>
 80069d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069e0:	e03a      	b.n	8006a58 <_printf_i+0xa8>
 80069e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069e6:	2b15      	cmp	r3, #21
 80069e8:	d8f6      	bhi.n	80069d8 <_printf_i+0x28>
 80069ea:	a101      	add	r1, pc, #4	; (adr r1, 80069f0 <_printf_i+0x40>)
 80069ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069f0:	08006a49 	.word	0x08006a49
 80069f4:	08006a5d 	.word	0x08006a5d
 80069f8:	080069d9 	.word	0x080069d9
 80069fc:	080069d9 	.word	0x080069d9
 8006a00:	080069d9 	.word	0x080069d9
 8006a04:	080069d9 	.word	0x080069d9
 8006a08:	08006a5d 	.word	0x08006a5d
 8006a0c:	080069d9 	.word	0x080069d9
 8006a10:	080069d9 	.word	0x080069d9
 8006a14:	080069d9 	.word	0x080069d9
 8006a18:	080069d9 	.word	0x080069d9
 8006a1c:	08006b69 	.word	0x08006b69
 8006a20:	08006a8d 	.word	0x08006a8d
 8006a24:	08006b4b 	.word	0x08006b4b
 8006a28:	080069d9 	.word	0x080069d9
 8006a2c:	080069d9 	.word	0x080069d9
 8006a30:	08006b8b 	.word	0x08006b8b
 8006a34:	080069d9 	.word	0x080069d9
 8006a38:	08006a8d 	.word	0x08006a8d
 8006a3c:	080069d9 	.word	0x080069d9
 8006a40:	080069d9 	.word	0x080069d9
 8006a44:	08006b53 	.word	0x08006b53
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	1d1a      	adds	r2, r3, #4
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	602a      	str	r2, [r5, #0]
 8006a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0a3      	b.n	8006ba4 <_printf_i+0x1f4>
 8006a5c:	6820      	ldr	r0, [r4, #0]
 8006a5e:	6829      	ldr	r1, [r5, #0]
 8006a60:	0606      	lsls	r6, r0, #24
 8006a62:	f101 0304 	add.w	r3, r1, #4
 8006a66:	d50a      	bpl.n	8006a7e <_printf_i+0xce>
 8006a68:	680e      	ldr	r6, [r1, #0]
 8006a6a:	602b      	str	r3, [r5, #0]
 8006a6c:	2e00      	cmp	r6, #0
 8006a6e:	da03      	bge.n	8006a78 <_printf_i+0xc8>
 8006a70:	232d      	movs	r3, #45	; 0x2d
 8006a72:	4276      	negs	r6, r6
 8006a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a78:	485e      	ldr	r0, [pc, #376]	; (8006bf4 <_printf_i+0x244>)
 8006a7a:	230a      	movs	r3, #10
 8006a7c:	e019      	b.n	8006ab2 <_printf_i+0x102>
 8006a7e:	680e      	ldr	r6, [r1, #0]
 8006a80:	602b      	str	r3, [r5, #0]
 8006a82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a86:	bf18      	it	ne
 8006a88:	b236      	sxthne	r6, r6
 8006a8a:	e7ef      	b.n	8006a6c <_printf_i+0xbc>
 8006a8c:	682b      	ldr	r3, [r5, #0]
 8006a8e:	6820      	ldr	r0, [r4, #0]
 8006a90:	1d19      	adds	r1, r3, #4
 8006a92:	6029      	str	r1, [r5, #0]
 8006a94:	0601      	lsls	r1, r0, #24
 8006a96:	d501      	bpl.n	8006a9c <_printf_i+0xec>
 8006a98:	681e      	ldr	r6, [r3, #0]
 8006a9a:	e002      	b.n	8006aa2 <_printf_i+0xf2>
 8006a9c:	0646      	lsls	r6, r0, #25
 8006a9e:	d5fb      	bpl.n	8006a98 <_printf_i+0xe8>
 8006aa0:	881e      	ldrh	r6, [r3, #0]
 8006aa2:	4854      	ldr	r0, [pc, #336]	; (8006bf4 <_printf_i+0x244>)
 8006aa4:	2f6f      	cmp	r7, #111	; 0x6f
 8006aa6:	bf0c      	ite	eq
 8006aa8:	2308      	moveq	r3, #8
 8006aaa:	230a      	movne	r3, #10
 8006aac:	2100      	movs	r1, #0
 8006aae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ab2:	6865      	ldr	r5, [r4, #4]
 8006ab4:	60a5      	str	r5, [r4, #8]
 8006ab6:	2d00      	cmp	r5, #0
 8006ab8:	bfa2      	ittt	ge
 8006aba:	6821      	ldrge	r1, [r4, #0]
 8006abc:	f021 0104 	bicge.w	r1, r1, #4
 8006ac0:	6021      	strge	r1, [r4, #0]
 8006ac2:	b90e      	cbnz	r6, 8006ac8 <_printf_i+0x118>
 8006ac4:	2d00      	cmp	r5, #0
 8006ac6:	d04d      	beq.n	8006b64 <_printf_i+0x1b4>
 8006ac8:	4615      	mov	r5, r2
 8006aca:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ace:	fb03 6711 	mls	r7, r3, r1, r6
 8006ad2:	5dc7      	ldrb	r7, [r0, r7]
 8006ad4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ad8:	4637      	mov	r7, r6
 8006ada:	42bb      	cmp	r3, r7
 8006adc:	460e      	mov	r6, r1
 8006ade:	d9f4      	bls.n	8006aca <_printf_i+0x11a>
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d10b      	bne.n	8006afc <_printf_i+0x14c>
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	07de      	lsls	r6, r3, #31
 8006ae8:	d508      	bpl.n	8006afc <_printf_i+0x14c>
 8006aea:	6923      	ldr	r3, [r4, #16]
 8006aec:	6861      	ldr	r1, [r4, #4]
 8006aee:	4299      	cmp	r1, r3
 8006af0:	bfde      	ittt	le
 8006af2:	2330      	movle	r3, #48	; 0x30
 8006af4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006af8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006afc:	1b52      	subs	r2, r2, r5
 8006afe:	6122      	str	r2, [r4, #16]
 8006b00:	f8cd a000 	str.w	sl, [sp]
 8006b04:	464b      	mov	r3, r9
 8006b06:	aa03      	add	r2, sp, #12
 8006b08:	4621      	mov	r1, r4
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	f7ff fee2 	bl	80068d4 <_printf_common>
 8006b10:	3001      	adds	r0, #1
 8006b12:	d14c      	bne.n	8006bae <_printf_i+0x1fe>
 8006b14:	f04f 30ff 	mov.w	r0, #4294967295
 8006b18:	b004      	add	sp, #16
 8006b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b1e:	4835      	ldr	r0, [pc, #212]	; (8006bf4 <_printf_i+0x244>)
 8006b20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b24:	6829      	ldr	r1, [r5, #0]
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b2c:	6029      	str	r1, [r5, #0]
 8006b2e:	061d      	lsls	r5, r3, #24
 8006b30:	d514      	bpl.n	8006b5c <_printf_i+0x1ac>
 8006b32:	07df      	lsls	r7, r3, #31
 8006b34:	bf44      	itt	mi
 8006b36:	f043 0320 	orrmi.w	r3, r3, #32
 8006b3a:	6023      	strmi	r3, [r4, #0]
 8006b3c:	b91e      	cbnz	r6, 8006b46 <_printf_i+0x196>
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	f023 0320 	bic.w	r3, r3, #32
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	2310      	movs	r3, #16
 8006b48:	e7b0      	b.n	8006aac <_printf_i+0xfc>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	f043 0320 	orr.w	r3, r3, #32
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	2378      	movs	r3, #120	; 0x78
 8006b54:	4828      	ldr	r0, [pc, #160]	; (8006bf8 <_printf_i+0x248>)
 8006b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b5a:	e7e3      	b.n	8006b24 <_printf_i+0x174>
 8006b5c:	0659      	lsls	r1, r3, #25
 8006b5e:	bf48      	it	mi
 8006b60:	b2b6      	uxthmi	r6, r6
 8006b62:	e7e6      	b.n	8006b32 <_printf_i+0x182>
 8006b64:	4615      	mov	r5, r2
 8006b66:	e7bb      	b.n	8006ae0 <_printf_i+0x130>
 8006b68:	682b      	ldr	r3, [r5, #0]
 8006b6a:	6826      	ldr	r6, [r4, #0]
 8006b6c:	6961      	ldr	r1, [r4, #20]
 8006b6e:	1d18      	adds	r0, r3, #4
 8006b70:	6028      	str	r0, [r5, #0]
 8006b72:	0635      	lsls	r5, r6, #24
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	d501      	bpl.n	8006b7c <_printf_i+0x1cc>
 8006b78:	6019      	str	r1, [r3, #0]
 8006b7a:	e002      	b.n	8006b82 <_printf_i+0x1d2>
 8006b7c:	0670      	lsls	r0, r6, #25
 8006b7e:	d5fb      	bpl.n	8006b78 <_printf_i+0x1c8>
 8006b80:	8019      	strh	r1, [r3, #0]
 8006b82:	2300      	movs	r3, #0
 8006b84:	6123      	str	r3, [r4, #16]
 8006b86:	4615      	mov	r5, r2
 8006b88:	e7ba      	b.n	8006b00 <_printf_i+0x150>
 8006b8a:	682b      	ldr	r3, [r5, #0]
 8006b8c:	1d1a      	adds	r2, r3, #4
 8006b8e:	602a      	str	r2, [r5, #0]
 8006b90:	681d      	ldr	r5, [r3, #0]
 8006b92:	6862      	ldr	r2, [r4, #4]
 8006b94:	2100      	movs	r1, #0
 8006b96:	4628      	mov	r0, r5
 8006b98:	f7f9 fb22 	bl	80001e0 <memchr>
 8006b9c:	b108      	cbz	r0, 8006ba2 <_printf_i+0x1f2>
 8006b9e:	1b40      	subs	r0, r0, r5
 8006ba0:	6060      	str	r0, [r4, #4]
 8006ba2:	6863      	ldr	r3, [r4, #4]
 8006ba4:	6123      	str	r3, [r4, #16]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bac:	e7a8      	b.n	8006b00 <_printf_i+0x150>
 8006bae:	6923      	ldr	r3, [r4, #16]
 8006bb0:	462a      	mov	r2, r5
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	4640      	mov	r0, r8
 8006bb6:	47d0      	blx	sl
 8006bb8:	3001      	adds	r0, #1
 8006bba:	d0ab      	beq.n	8006b14 <_printf_i+0x164>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	079b      	lsls	r3, r3, #30
 8006bc0:	d413      	bmi.n	8006bea <_printf_i+0x23a>
 8006bc2:	68e0      	ldr	r0, [r4, #12]
 8006bc4:	9b03      	ldr	r3, [sp, #12]
 8006bc6:	4298      	cmp	r0, r3
 8006bc8:	bfb8      	it	lt
 8006bca:	4618      	movlt	r0, r3
 8006bcc:	e7a4      	b.n	8006b18 <_printf_i+0x168>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	4632      	mov	r2, r6
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	4640      	mov	r0, r8
 8006bd6:	47d0      	blx	sl
 8006bd8:	3001      	adds	r0, #1
 8006bda:	d09b      	beq.n	8006b14 <_printf_i+0x164>
 8006bdc:	3501      	adds	r5, #1
 8006bde:	68e3      	ldr	r3, [r4, #12]
 8006be0:	9903      	ldr	r1, [sp, #12]
 8006be2:	1a5b      	subs	r3, r3, r1
 8006be4:	42ab      	cmp	r3, r5
 8006be6:	dcf2      	bgt.n	8006bce <_printf_i+0x21e>
 8006be8:	e7eb      	b.n	8006bc2 <_printf_i+0x212>
 8006bea:	2500      	movs	r5, #0
 8006bec:	f104 0619 	add.w	r6, r4, #25
 8006bf0:	e7f5      	b.n	8006bde <_printf_i+0x22e>
 8006bf2:	bf00      	nop
 8006bf4:	08006fd1 	.word	0x08006fd1
 8006bf8:	08006fe2 	.word	0x08006fe2

08006bfc <memmove>:
 8006bfc:	4288      	cmp	r0, r1
 8006bfe:	b510      	push	{r4, lr}
 8006c00:	eb01 0402 	add.w	r4, r1, r2
 8006c04:	d902      	bls.n	8006c0c <memmove+0x10>
 8006c06:	4284      	cmp	r4, r0
 8006c08:	4623      	mov	r3, r4
 8006c0a:	d807      	bhi.n	8006c1c <memmove+0x20>
 8006c0c:	1e43      	subs	r3, r0, #1
 8006c0e:	42a1      	cmp	r1, r4
 8006c10:	d008      	beq.n	8006c24 <memmove+0x28>
 8006c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c1a:	e7f8      	b.n	8006c0e <memmove+0x12>
 8006c1c:	4402      	add	r2, r0
 8006c1e:	4601      	mov	r1, r0
 8006c20:	428a      	cmp	r2, r1
 8006c22:	d100      	bne.n	8006c26 <memmove+0x2a>
 8006c24:	bd10      	pop	{r4, pc}
 8006c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c2e:	e7f7      	b.n	8006c20 <memmove+0x24>

08006c30 <_free_r>:
 8006c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c32:	2900      	cmp	r1, #0
 8006c34:	d044      	beq.n	8006cc0 <_free_r+0x90>
 8006c36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c3a:	9001      	str	r0, [sp, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c42:	bfb8      	it	lt
 8006c44:	18e4      	addlt	r4, r4, r3
 8006c46:	f000 f913 	bl	8006e70 <__malloc_lock>
 8006c4a:	4a1e      	ldr	r2, [pc, #120]	; (8006cc4 <_free_r+0x94>)
 8006c4c:	9801      	ldr	r0, [sp, #4]
 8006c4e:	6813      	ldr	r3, [r2, #0]
 8006c50:	b933      	cbnz	r3, 8006c60 <_free_r+0x30>
 8006c52:	6063      	str	r3, [r4, #4]
 8006c54:	6014      	str	r4, [r2, #0]
 8006c56:	b003      	add	sp, #12
 8006c58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c5c:	f000 b90e 	b.w	8006e7c <__malloc_unlock>
 8006c60:	42a3      	cmp	r3, r4
 8006c62:	d908      	bls.n	8006c76 <_free_r+0x46>
 8006c64:	6825      	ldr	r5, [r4, #0]
 8006c66:	1961      	adds	r1, r4, r5
 8006c68:	428b      	cmp	r3, r1
 8006c6a:	bf01      	itttt	eq
 8006c6c:	6819      	ldreq	r1, [r3, #0]
 8006c6e:	685b      	ldreq	r3, [r3, #4]
 8006c70:	1949      	addeq	r1, r1, r5
 8006c72:	6021      	streq	r1, [r4, #0]
 8006c74:	e7ed      	b.n	8006c52 <_free_r+0x22>
 8006c76:	461a      	mov	r2, r3
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	b10b      	cbz	r3, 8006c80 <_free_r+0x50>
 8006c7c:	42a3      	cmp	r3, r4
 8006c7e:	d9fa      	bls.n	8006c76 <_free_r+0x46>
 8006c80:	6811      	ldr	r1, [r2, #0]
 8006c82:	1855      	adds	r5, r2, r1
 8006c84:	42a5      	cmp	r5, r4
 8006c86:	d10b      	bne.n	8006ca0 <_free_r+0x70>
 8006c88:	6824      	ldr	r4, [r4, #0]
 8006c8a:	4421      	add	r1, r4
 8006c8c:	1854      	adds	r4, r2, r1
 8006c8e:	42a3      	cmp	r3, r4
 8006c90:	6011      	str	r1, [r2, #0]
 8006c92:	d1e0      	bne.n	8006c56 <_free_r+0x26>
 8006c94:	681c      	ldr	r4, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	6053      	str	r3, [r2, #4]
 8006c9a:	4421      	add	r1, r4
 8006c9c:	6011      	str	r1, [r2, #0]
 8006c9e:	e7da      	b.n	8006c56 <_free_r+0x26>
 8006ca0:	d902      	bls.n	8006ca8 <_free_r+0x78>
 8006ca2:	230c      	movs	r3, #12
 8006ca4:	6003      	str	r3, [r0, #0]
 8006ca6:	e7d6      	b.n	8006c56 <_free_r+0x26>
 8006ca8:	6825      	ldr	r5, [r4, #0]
 8006caa:	1961      	adds	r1, r4, r5
 8006cac:	428b      	cmp	r3, r1
 8006cae:	bf04      	itt	eq
 8006cb0:	6819      	ldreq	r1, [r3, #0]
 8006cb2:	685b      	ldreq	r3, [r3, #4]
 8006cb4:	6063      	str	r3, [r4, #4]
 8006cb6:	bf04      	itt	eq
 8006cb8:	1949      	addeq	r1, r1, r5
 8006cba:	6021      	streq	r1, [r4, #0]
 8006cbc:	6054      	str	r4, [r2, #4]
 8006cbe:	e7ca      	b.n	8006c56 <_free_r+0x26>
 8006cc0:	b003      	add	sp, #12
 8006cc2:	bd30      	pop	{r4, r5, pc}
 8006cc4:	20005024 	.word	0x20005024

08006cc8 <sbrk_aligned>:
 8006cc8:	b570      	push	{r4, r5, r6, lr}
 8006cca:	4e0e      	ldr	r6, [pc, #56]	; (8006d04 <sbrk_aligned+0x3c>)
 8006ccc:	460c      	mov	r4, r1
 8006cce:	6831      	ldr	r1, [r6, #0]
 8006cd0:	4605      	mov	r5, r0
 8006cd2:	b911      	cbnz	r1, 8006cda <sbrk_aligned+0x12>
 8006cd4:	f000 f8bc 	bl	8006e50 <_sbrk_r>
 8006cd8:	6030      	str	r0, [r6, #0]
 8006cda:	4621      	mov	r1, r4
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f000 f8b7 	bl	8006e50 <_sbrk_r>
 8006ce2:	1c43      	adds	r3, r0, #1
 8006ce4:	d00a      	beq.n	8006cfc <sbrk_aligned+0x34>
 8006ce6:	1cc4      	adds	r4, r0, #3
 8006ce8:	f024 0403 	bic.w	r4, r4, #3
 8006cec:	42a0      	cmp	r0, r4
 8006cee:	d007      	beq.n	8006d00 <sbrk_aligned+0x38>
 8006cf0:	1a21      	subs	r1, r4, r0
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f000 f8ac 	bl	8006e50 <_sbrk_r>
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d101      	bne.n	8006d00 <sbrk_aligned+0x38>
 8006cfc:	f04f 34ff 	mov.w	r4, #4294967295
 8006d00:	4620      	mov	r0, r4
 8006d02:	bd70      	pop	{r4, r5, r6, pc}
 8006d04:	20005028 	.word	0x20005028

08006d08 <_malloc_r>:
 8006d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0c:	1ccd      	adds	r5, r1, #3
 8006d0e:	f025 0503 	bic.w	r5, r5, #3
 8006d12:	3508      	adds	r5, #8
 8006d14:	2d0c      	cmp	r5, #12
 8006d16:	bf38      	it	cc
 8006d18:	250c      	movcc	r5, #12
 8006d1a:	2d00      	cmp	r5, #0
 8006d1c:	4607      	mov	r7, r0
 8006d1e:	db01      	blt.n	8006d24 <_malloc_r+0x1c>
 8006d20:	42a9      	cmp	r1, r5
 8006d22:	d905      	bls.n	8006d30 <_malloc_r+0x28>
 8006d24:	230c      	movs	r3, #12
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	2600      	movs	r6, #0
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d30:	4e2e      	ldr	r6, [pc, #184]	; (8006dec <_malloc_r+0xe4>)
 8006d32:	f000 f89d 	bl	8006e70 <__malloc_lock>
 8006d36:	6833      	ldr	r3, [r6, #0]
 8006d38:	461c      	mov	r4, r3
 8006d3a:	bb34      	cbnz	r4, 8006d8a <_malloc_r+0x82>
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	4638      	mov	r0, r7
 8006d40:	f7ff ffc2 	bl	8006cc8 <sbrk_aligned>
 8006d44:	1c43      	adds	r3, r0, #1
 8006d46:	4604      	mov	r4, r0
 8006d48:	d14d      	bne.n	8006de6 <_malloc_r+0xde>
 8006d4a:	6834      	ldr	r4, [r6, #0]
 8006d4c:	4626      	mov	r6, r4
 8006d4e:	2e00      	cmp	r6, #0
 8006d50:	d140      	bne.n	8006dd4 <_malloc_r+0xcc>
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	4631      	mov	r1, r6
 8006d56:	4638      	mov	r0, r7
 8006d58:	eb04 0803 	add.w	r8, r4, r3
 8006d5c:	f000 f878 	bl	8006e50 <_sbrk_r>
 8006d60:	4580      	cmp	r8, r0
 8006d62:	d13a      	bne.n	8006dda <_malloc_r+0xd2>
 8006d64:	6821      	ldr	r1, [r4, #0]
 8006d66:	3503      	adds	r5, #3
 8006d68:	1a6d      	subs	r5, r5, r1
 8006d6a:	f025 0503 	bic.w	r5, r5, #3
 8006d6e:	3508      	adds	r5, #8
 8006d70:	2d0c      	cmp	r5, #12
 8006d72:	bf38      	it	cc
 8006d74:	250c      	movcc	r5, #12
 8006d76:	4629      	mov	r1, r5
 8006d78:	4638      	mov	r0, r7
 8006d7a:	f7ff ffa5 	bl	8006cc8 <sbrk_aligned>
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d02b      	beq.n	8006dda <_malloc_r+0xd2>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	442b      	add	r3, r5
 8006d86:	6023      	str	r3, [r4, #0]
 8006d88:	e00e      	b.n	8006da8 <_malloc_r+0xa0>
 8006d8a:	6822      	ldr	r2, [r4, #0]
 8006d8c:	1b52      	subs	r2, r2, r5
 8006d8e:	d41e      	bmi.n	8006dce <_malloc_r+0xc6>
 8006d90:	2a0b      	cmp	r2, #11
 8006d92:	d916      	bls.n	8006dc2 <_malloc_r+0xba>
 8006d94:	1961      	adds	r1, r4, r5
 8006d96:	42a3      	cmp	r3, r4
 8006d98:	6025      	str	r5, [r4, #0]
 8006d9a:	bf18      	it	ne
 8006d9c:	6059      	strne	r1, [r3, #4]
 8006d9e:	6863      	ldr	r3, [r4, #4]
 8006da0:	bf08      	it	eq
 8006da2:	6031      	streq	r1, [r6, #0]
 8006da4:	5162      	str	r2, [r4, r5]
 8006da6:	604b      	str	r3, [r1, #4]
 8006da8:	4638      	mov	r0, r7
 8006daa:	f104 060b 	add.w	r6, r4, #11
 8006dae:	f000 f865 	bl	8006e7c <__malloc_unlock>
 8006db2:	f026 0607 	bic.w	r6, r6, #7
 8006db6:	1d23      	adds	r3, r4, #4
 8006db8:	1af2      	subs	r2, r6, r3
 8006dba:	d0b6      	beq.n	8006d2a <_malloc_r+0x22>
 8006dbc:	1b9b      	subs	r3, r3, r6
 8006dbe:	50a3      	str	r3, [r4, r2]
 8006dc0:	e7b3      	b.n	8006d2a <_malloc_r+0x22>
 8006dc2:	6862      	ldr	r2, [r4, #4]
 8006dc4:	42a3      	cmp	r3, r4
 8006dc6:	bf0c      	ite	eq
 8006dc8:	6032      	streq	r2, [r6, #0]
 8006dca:	605a      	strne	r2, [r3, #4]
 8006dcc:	e7ec      	b.n	8006da8 <_malloc_r+0xa0>
 8006dce:	4623      	mov	r3, r4
 8006dd0:	6864      	ldr	r4, [r4, #4]
 8006dd2:	e7b2      	b.n	8006d3a <_malloc_r+0x32>
 8006dd4:	4634      	mov	r4, r6
 8006dd6:	6876      	ldr	r6, [r6, #4]
 8006dd8:	e7b9      	b.n	8006d4e <_malloc_r+0x46>
 8006dda:	230c      	movs	r3, #12
 8006ddc:	603b      	str	r3, [r7, #0]
 8006dde:	4638      	mov	r0, r7
 8006de0:	f000 f84c 	bl	8006e7c <__malloc_unlock>
 8006de4:	e7a1      	b.n	8006d2a <_malloc_r+0x22>
 8006de6:	6025      	str	r5, [r4, #0]
 8006de8:	e7de      	b.n	8006da8 <_malloc_r+0xa0>
 8006dea:	bf00      	nop
 8006dec:	20005024 	.word	0x20005024

08006df0 <_realloc_r>:
 8006df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df4:	4680      	mov	r8, r0
 8006df6:	4614      	mov	r4, r2
 8006df8:	460e      	mov	r6, r1
 8006dfa:	b921      	cbnz	r1, 8006e06 <_realloc_r+0x16>
 8006dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e00:	4611      	mov	r1, r2
 8006e02:	f7ff bf81 	b.w	8006d08 <_malloc_r>
 8006e06:	b92a      	cbnz	r2, 8006e14 <_realloc_r+0x24>
 8006e08:	f7ff ff12 	bl	8006c30 <_free_r>
 8006e0c:	4625      	mov	r5, r4
 8006e0e:	4628      	mov	r0, r5
 8006e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e14:	f000 f838 	bl	8006e88 <_malloc_usable_size_r>
 8006e18:	4284      	cmp	r4, r0
 8006e1a:	4607      	mov	r7, r0
 8006e1c:	d802      	bhi.n	8006e24 <_realloc_r+0x34>
 8006e1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e22:	d812      	bhi.n	8006e4a <_realloc_r+0x5a>
 8006e24:	4621      	mov	r1, r4
 8006e26:	4640      	mov	r0, r8
 8006e28:	f7ff ff6e 	bl	8006d08 <_malloc_r>
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d0ed      	beq.n	8006e0e <_realloc_r+0x1e>
 8006e32:	42bc      	cmp	r4, r7
 8006e34:	4622      	mov	r2, r4
 8006e36:	4631      	mov	r1, r6
 8006e38:	bf28      	it	cs
 8006e3a:	463a      	movcs	r2, r7
 8006e3c:	f7ff fbb8 	bl	80065b0 <memcpy>
 8006e40:	4631      	mov	r1, r6
 8006e42:	4640      	mov	r0, r8
 8006e44:	f7ff fef4 	bl	8006c30 <_free_r>
 8006e48:	e7e1      	b.n	8006e0e <_realloc_r+0x1e>
 8006e4a:	4635      	mov	r5, r6
 8006e4c:	e7df      	b.n	8006e0e <_realloc_r+0x1e>
	...

08006e50 <_sbrk_r>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	4d06      	ldr	r5, [pc, #24]	; (8006e6c <_sbrk_r+0x1c>)
 8006e54:	2300      	movs	r3, #0
 8006e56:	4604      	mov	r4, r0
 8006e58:	4608      	mov	r0, r1
 8006e5a:	602b      	str	r3, [r5, #0]
 8006e5c:	f7fa f80e 	bl	8000e7c <_sbrk>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d102      	bne.n	8006e6a <_sbrk_r+0x1a>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b103      	cbz	r3, 8006e6a <_sbrk_r+0x1a>
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	2000502c 	.word	0x2000502c

08006e70 <__malloc_lock>:
 8006e70:	4801      	ldr	r0, [pc, #4]	; (8006e78 <__malloc_lock+0x8>)
 8006e72:	f000 b811 	b.w	8006e98 <__retarget_lock_acquire_recursive>
 8006e76:	bf00      	nop
 8006e78:	20005030 	.word	0x20005030

08006e7c <__malloc_unlock>:
 8006e7c:	4801      	ldr	r0, [pc, #4]	; (8006e84 <__malloc_unlock+0x8>)
 8006e7e:	f000 b80c 	b.w	8006e9a <__retarget_lock_release_recursive>
 8006e82:	bf00      	nop
 8006e84:	20005030 	.word	0x20005030

08006e88 <_malloc_usable_size_r>:
 8006e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e8c:	1f18      	subs	r0, r3, #4
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	bfbc      	itt	lt
 8006e92:	580b      	ldrlt	r3, [r1, r0]
 8006e94:	18c0      	addlt	r0, r0, r3
 8006e96:	4770      	bx	lr

08006e98 <__retarget_lock_acquire_recursive>:
 8006e98:	4770      	bx	lr

08006e9a <__retarget_lock_release_recursive>:
 8006e9a:	4770      	bx	lr

08006e9c <_init>:
 8006e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9e:	bf00      	nop
 8006ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ea2:	bc08      	pop	{r3}
 8006ea4:	469e      	mov	lr, r3
 8006ea6:	4770      	bx	lr

08006ea8 <_fini>:
 8006ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eaa:	bf00      	nop
 8006eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eae:	bc08      	pop	{r3}
 8006eb0:	469e      	mov	lr, r3
 8006eb2:	4770      	bx	lr
